//
//  https://nov-soft.ru
//

#Область ПрограммныйИнтерфейс


Процедура РазместитьПодчиненныйСправочник(Форма, ИмяСправочника, ЭлементРодитель, ИмяПоляПризнакОсновной = Неопределено) Экспорт
	Объект = Форма.Объект;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат
	КонецЕсли;
	
	ТекстПоля = "";
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника));
	Таблица.Колонки.Добавить("ЭтоОсновной", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Модифицирован", Новый ОписаниеТипов("Булево"));
	
	Для каждого Реквизит Из Метаданные.Справочники[ИмяСправочника].Реквизиты Цикл
		ТекстПоля = ТекстПоля + "," + Символы.ПС 
			+ "Спр." + Реквизит.Имя + " КАК " + Реквизит.Имя;	
			
			
		Таблица.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Спр.Ссылка,
		|	" + ?(ИмяПоляПризнакОсновной = Неопределено, "ЛОЖЬ", "(Спр.Владелец." + ИмяПоляПризнакОсновной) + " = Спр.Ссылка) КАК ЭтоОсновной" + ТекстПоля + "
		|ИЗ
		|	Справочник.БанковскиеСчетаСотрудников КАК Спр
		|ГДЕ
		|	Спр.Владелец = &Владелец
		|	И НЕ Спр.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО 
		|	ЭтоОсновной Убыв";
	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "БанковскиеСчетаСотрудников", ИмяСправочника);
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат
	//КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Выборка);
	КонецЦикла;
	
	// Пустая строка для нового элемента
	Таблица.Добавить();
	
	// Добавляем на форму Таблицу
	ИмяТаблицыФормы = ПолучитьИмяТаблицыФормы(ИмяСправочника);
	НовыеРеквизиты = Новый Массив();
	НовыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяТаблицыФормы, Новый ОписаниеТипов("ТаблицаЗначений"), , , Истина));
	
	// Колонки таблицы
	Для каждого Колонка Из Таблица.Колонки Цикл
		НовыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицыФормы));
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	Форма[ИмяТаблицыФормы].Загрузить(Таблица);
	
	ДобавитьЭлементыПоТаблице(Форма, Таблица, ЭлементРодитель, ИмяСправочника, ИмяПоляПризнакОсновной <> Неопределено);
	
КонецПроцедуры

// ЭлементРодитель - группа, в которой размещаются все элементы подчиненного справочника
Процедура ДобавитьЭлементыПоТаблице(Форма, Таблица, ЭлементРодитель, ИмяСправочника, ЕстьПризнакОсновной) Экспорт
	
	Перем ИмяКомандыОсновной;
	
	// Для больших справочников эта подсистема не подходит. Максимум - 10 элементов
	МаксимальноеКоличествоЭлементов = 10;
	
	ИменаПолей = "";
	Для каждого Колонка Из Таблица.Колонки Цикл
		
		Если ЭтоПредопределенноеПоле(Колонка.Имя) Тогда
			Продолжить
		КонецЕсли;
		
		ИменаПолей = ИменаПолей + ?(ПустаяСтрока(ИменаПолей), "", ",") + Колонка.Имя;
		
	КонецЦикла;
	
	Если ЕстьПризнакОсновной Тогда
		
		ИмяКомандыОсновной = "ПодчиненныеСправочникиУстановитьОсновной" + ЭлементРодитель.Имя;
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКомандыОсновной);
		КомандаФормы.Действие = "Подключаемый_ПодчиненныеСправочникиВыполнитьКоманду";
		КомандаФормы.Заголовок = "Установить основной";
		КомандаФормы.Подсказка   = КомандаФормы.Заголовок;
		КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
		КомандаФормы.Картинка = БиблиотекаКартинок.Успешно;
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		
	КонецЕсли;
	
	ИмяКомандыУдалить = "ПодчиненныеСправочникиУдалить" + ЭлементРодитель.Имя;
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыУдалить);
	КомандаФормы.Действие = "Подключаемый_ПодчиненныеСправочникиВыполнитьКоманду";
	КомандаФормы.Заголовок = "Удалить";
	КомандаФормы.Подсказка   = КомандаФормы.Заголовок;
	КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
	КомандаФормы.Картинка = БиблиотекаКартинок.УдалитьСтраницу;
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	
	Для Индекс = 0 По Таблица.Количество() - 1 Цикл
		
		СтрокаТаблицы = Таблица[Индекс];
		
		ПараметрыЭлемента = Новый Структура();
		ПараметрыЭлемента.Вставить("ИменаПолей", ИменаПолей);
		ПараметрыЭлемента.Вставить("Суффикс", Формат(Индекс, "ЧН=0; ЧГ=0"));
		ПараметрыЭлемента.Вставить("ЕстьПризнакОсновной", ЕстьПризнакОсновной);
		ПараметрыЭлемента.Вставить("ИмяКомандыОсновной", ИмяКомандыОсновной);
		ПараметрыЭлемента.Вставить("ИмяКомандыУдалить", ИмяКомандыУдалить);
		
		ДобавитьЭлементСправочика(Форма, 
			ИмяСправочника, 
			СтрокаТаблицы, 
			ЭлементРодитель, 
			ПараметрыЭлемента
		);
		
		Если Индекс = МаксимальноеКоличествоЭлементов - 1 Тогда
			Прервать
		КонецЕсли;
	КонецЦикла;
	
	// Команда добавление нового
	ИмяКоманды = "ПодчиненныеСправочникиДобавить";
		
	КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КомандаФормы.Действие = "Подключаемый_ПодчиненныеСправочникиДобавить";
	КомандаФормы.Заголовок = "Добавить";
	КомандаФормы.Подсказка   = КомандаФормы.Заголовок;
	КомандаФормы.Отображение = ОтображениеКнопки.Текст;
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	
	ИмяКнопки = ЭлементРодитель.Имя + "КнопкаДобавить";
	Элемент = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭлементРодитель);
	Элемент.Заголовок = "Добавить";
	Элемент.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

// Размещение на форме полей элемента справочника
Процедура ДобавитьЭлементСправочика(Форма, ИмяСправочника, ОписаниеЭлемента, ЭлементРодитель, ПараметрыЭлемента) Экспорт
	
	ИмяТаблицыФормы = ПолучитьИмяТаблицыФормы(ИмяСправочника);
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(ОписаниеЭлемента.Ссылка);
	ИдентификаторГруппа = ?(ЭтоНовый,
		ЭлементРодитель.Имя + "НовыйЭлемент",
		дт_ОбщегоНазначенияКлиентСервер.ГУИД_в_строку(ОписаниеЭлемента.Ссылка.УникальныйИдентификатор())
	);
	
	Группа = Форма.Элементы.Найти(ИдентификаторГруппа);
	Если Группа = Неопределено Тогда
		Группа = Форма.Элементы.Добавить(ИдентификаторГруппа, Тип("ГруппаФормы"), ЭлементРодитель);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа; 
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	ДобавляемыеЭлементы = Новый Структура(Группа.Имя, ПараметрыЭлемента.ИменаПолей);
	
	ПараметрыПолей = Новый Структура();
	ПараметрыПолей.Вставить("ИспользоватьТекстПодсказки", Истина);
	ПараметрыПолей.Вставить("СуффиксИмени", ПараметрыЭлемента.Суффикс);
	ПараметрыПолей.Вставить("Метаданные", ОписаниеЭлемента.Ссылка.Метаданные());
	ПараметрыПолей.Вставить("Действия", Новый Структура("ПриИзменении", "Подключаемый_ПодчиненныеСправочникиПриИзменении"));
	
	дт_Формы.ДобавитьЭлементы(Форма, ДобавляемыеЭлементы, , ИмяТаблицыФормы + СтрШаблон("[%1]", ПараметрыЭлемента.Суффикс), ПараметрыПолей);
	
	
	// Маски для строковых полей
	ОбъектМД = Метаданные.Справочники[ИмяСправочника];
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
	
		Если ТипЗнч(Элемент) = Тип("ПолеФормы")
			И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			ИмяРеквизита = Элемент.ПутьКДанным;
			ИмяРеквизита = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизита, ".");
			ИмяРеквизита = ИмяРеквизита[ИмяРеквизита.Количество() - 1];
			
			РеквизитМД = ОбъектМД.Реквизиты.Найти(ИмяРеквизита);
			Если РеквизитМД = Неопределено Тогда
				РеквизитМД = ОбъектМД.СтандартныеРеквизиты.Найти(ИмяРеквизита);
			КонецЕсли;
			
			Если РеквизитМД <> Неопределено 
				И ЗначениеЗаполнено(РеквизитМД.Маска) Тогда
				Элемент.Маска = РеквизитМД.Маска;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла; 
	
	// Кнопку выборка Основной добавляем, если есть признак Основной
	Если ПараметрыЭлемента.ЕстьПризнакОсновной Тогда
		
		ИмяКнопки = ЭлементРодитель.Имя + "КнопкаОсновной" + ПараметрыЭлемента.Суффикс;
		Элемент = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Группа);
		Элемент.Заголовок = "Основной";
		Элемент.Картинка = ?(ОписаниеЭлемента.ЭтоОсновной, 
			БиблиотекаКартинок.Успешно,
			БиблиотекаКартинок.УспешноЖелтый
		);
		Элемент.Отображение = ОтображениеКнопки.Картинка;
		Элемент.ИмяКоманды = ПараметрыЭлемента.ИмяКомандыОсновной;
		Элемент.Доступность = НЕ ЭтоНовый;
		
	КонецЕсли;
	
	ИмяКнопки = ЭлементРодитель.Имя + "КнопкаУдалить" + ПараметрыЭлемента.Суффикс;
	Элемент = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Группа);
	Элемент.Заголовок = "Удалить";
	//Элемент.Картинка = БиблиотекаКартинок.УдалитьСтраницу;

	Элемент.Отображение = ОтображениеКнопки.Картинка;
	Элемент.ИмяКоманды = ПараметрыЭлемента.ИмяКомандыУдалить;
	Элемент.Доступность = НЕ ЭтоНовый;
	
	
КонецПроцедуры


// Команда Добавить
Процедура КомандаДобавить(Форма, ИмяСправочника) Экспорт

	ИмяТаблицыФормы = ПолучитьИмяТаблицыФормы(ИмяСправочника);
	Таблица = Форма.РеквизитФормыВЗначение(ИмяТаблицыФормы);
	ИндексСтроки = Таблица.Количество() - 1;
	
	ЭлементРодитель = Форма.Элементы.Найти("Группа" + ИмяСправочника);
	Если ЭлементРодитель = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	// Определим признак ЕстьОсновной по наличию соответствующей команды формы
	ИмяКомандыОсновной = "ПодчиненныеСправочникиУстановитьОсновной" + ЭлементРодитель.Имя;
	ЕстьПризнакОсновной = Форма.Команды.Найти(ИмяКомандыОсновной) <> Неопределено;
	
	// Чтобы не было конфликта имен сначала запишем незаписанный (новый) элемент и переименуем его группу
	Если Не ЗначениеЗаполнено(Таблица[ИндексСтроки].Ссылка) Тогда
		
		// Записать незаписанный
		Если НЕ ЗаписатьЭлементПодчиненногоСправочника(Таблица[ИндексСтроки], Форма.Объект.Ссылка) Тогда
			Возврат
		КонецЕсли;
		
		// Создать новую группу и удалить старую (т.к. переименовать нельзя - свойство Имя недоступно для записи)
		СтароеИмя = ЭлементРодитель.Имя + "НовыйЭлемент";
		ГруппаЭлемента = Форма.Элементы.Найти(СтароеИмя);
		Если ГруппаЭлемента <> Неопределено Тогда
			
			НовоеИмя = дт_ОбщегоНазначенияКлиентСервер.ГУИД_в_строку(Таблица[ИндексСтроки].Ссылка.УникальныйИдентификатор());
			ГруппаНовая = Форма.Элементы.Вставить(НовоеИмя, Тип("ГруппаФормы"), ЭлементРодитель, ГруппаЭлемента);
			ГруппаНовая.Вид = ВидГруппыФормы.ОбычнаяГруппа; 
			ГруппаНовая.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаНовая.ОтображатьЗаголовок = Ложь;
			
			// Изменить родителя у всех подчиненных элементов
			ЭлементыГруппы = Новый Массив();
			
			Для каждого Элемент Из ГруппаЭлемента.ПодчиненныеЭлементы Цикл
				ЭлементыГруппы.Добавить(Элемент);
			КонецЦикла;
			Для каждого Элемент Из ЭлементыГруппы Цикл
				Форма.Элементы.Переместить(Элемент, ГруппаНовая);	
			КонецЦикла;
			
		КонецЕсли;	
		
		
		// Кнопку Основной сделать активной
		Если ЕстьПризнакОсновной Тогда
			Элемент = Форма.Элементы.Найти(ЭлементРодитель.Имя + "КнопкаОсновной" + Формат(ИндексСтроки, "ЧГ=0"));
			Если Элемент <> Неопределено Тогда
				Элемент.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Кнопку Удалить сделать активной
		Элемент = Форма.Элементы.Найти(ЭлементРодитель.Имя + "КнопкаУдалить" + Формат(ИндексСтроки, "ЧГ=0"));
		Если Элемент <> Неопределено Тогда
			Элемент.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	// Имена полей справочника определим из таблицы
	ИменаПолей = "";
	Для каждого Колонка Из Таблица.Колонки Цикл
		
		Если ЭтоПредопределенноеПоле(Колонка.Имя) Тогда
			Продолжить
		КонецЕсли;
		
		ИменаПолей = ИменаПолей + ?(ПустаяСтрока(ИменаПолей), "", ",") + Колонка.Имя;
		
	КонецЦикла;
	
	ИмяКомандыУдалить = "ПодчиненныеСправочникиУдалить" + ЭлементРодитель.Имя;
	
	Индекс = Таблица.Количество();
	
	СтрокаТаблицы = Таблица.Добавить();
		
	ПараметрыЭлемента = Новый Структура();
	ПараметрыЭлемента.Вставить("ИменаПолей", ИменаПолей);
	ПараметрыЭлемента.Вставить("Суффикс", Формат(Индекс, "ЧН=0; ЧГ=0"));
	ПараметрыЭлемента.Вставить("ЕстьПризнакОсновной", ЕстьПризнакОсновной);
	ПараметрыЭлемента.Вставить("ИмяКомандыОсновной", ИмяКомандыОсновной);
	ПараметрыЭлемента.Вставить("ИмяКомандыУдалить", ИмяКомандыУдалить);
		
	ДобавитьЭлементСправочика(Форма, 
			ИмяСправочника, 
			СтрокаТаблицы, 
			ЭлементРодитель, 
			ПараметрыЭлемента
		);
		
	Форма.ЗначениеВРеквизитФормы(Таблица, ИмяТаблицыФормы);
	
КонецПроцедуры

// Запись изменений
Процедура ПослеЗаписи(Форма, ТекущийОбъект, ПараметрыЗаписи, ИмяСправочника, ЭлементРодитель = Неопределено, ИмяПоляОсновной = Неопределено) Экспорт

	ИмяТаблицыФормы = ПолучитьИмяТаблицыФормы(ИмяСправочника);
	
	
	// Если Справочник не был размещен, то...
	Если НЕ дт_Формы.ЕстьРеквизитФормы(Форма, ИмяТаблицыФормы) Тогда
		РазместитьПодчиненныйСправочник(Форма, ИмяСправочника, ЭлементРодитель, ИмяПоляОсновной);
		Возврат
	КонецЕсли;
	
	Таблица = Форма.РеквизитФормыВЗначение(ИмяТаблицыФормы);
	СтрокиКЗаписи = Таблица.НайтиСтроки(Новый Структура("Модифицирован", Истина));
	
	ЕстьИзмененияТаблицы = Ложь;
	
    Для каждого СтрокаТаблицы Из СтрокиКЗаписи Цикл
	
		ЕстьИзмененияТаблицы = ЕстьИзмененияТаблицы ИЛИ ЗаписатьЭлементПодчиненногоСправочника(СтрокаТаблицы, Форма.Объект.Ссылка);	
	
	КонецЦикла;
	
	Если ЕстьИзмененияТаблицы Тогда
		Форма.ЗначениеВРеквизитФормы(Таблица, ИмяТаблицыФормы);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


Функция ЗаписатьЭлементПодчиненногоСправочника(ДанныеЗаполнения, Владелец)
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Проверим есть ли хоть одно заполненное поле
	// Предопределенные поля игнорируем
	
	Заполнено = Ложь;
	Для каждого Колонка Из ДанныеЗаполнения.Владелец().Колонки Цикл
		
		Если ЭтоПредопределенноеПоле(Колонка.Имя) Тогда
			Продолжить
		КонецЕсли;
		
		Заполнено = Заполнено ИЛИ ЗначениеЗаполнено(ДанныеЗаполнения[Колонка.Имя]);
		
		Если Заполнено Тогда
			Прервать
		КонецЕсли;
		
	КонецЦикла;
	
	// Если ничего не заполнено, то нет смысла записывать
	Если Не Заполнено Тогда
		Возврат Результат;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.Ссылка) Тогда
		МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения.Ссылка);
		Объект = МенеджерСправочника.СоздатьЭлемент();
		Объект.Владелец = Владелец;
	Иначе
		Объект = ДанныеЗаполнения.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения);
	
	Попытка
	
		Объект.Записать();
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.Ссылка) Тогда
			ДанныеЗаполнения.Ссылка = Объект.Ссылка;
		КонецЕсли;	
		Результат = Истина;
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон("Не удалось записать %1. %2",
				Объект,
				ОписаниеОшибки())
		);
			
	КонецПопытки;
	
	Возврат Результат

КонецФункции // ЗаписатьЭлементПодчиненногоСправочника()


Функция ПолучитьИмяТаблицыФормы(ИмяСправочника)

	Возврат дт_ПодчиненныеСправочникиКлиентСервер.ПолучитьИмяТаблицыФормы(ИмяСправочника);	

КонецФункции // ПолучитьИмяТаблицыФормы()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоПредопределенноеПоле(Имя)

	Возврат Имя = "Ссылка" 
			ИЛИ Имя = "ЭтоОсновной" 
			ИЛИ Имя = "Модифицирован";
			
КонецФункции // ЭтоПредопределенноеПоле()



#КонецОбласти