#Область ПрограммныйИнтерфейс

Функция ПолучитьПоказаниеОдометра(Автомобиль, Знач Дата = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();	
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказанияОдометраСрезПоследних.Показание КАК Показание,
		|	ПоказанияОдометраСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ПоказанияОдометра.СрезПоследних(&Дата, Автомобиль = &Автомобиль) КАК ПоказанияОдометраСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Машины.ПоказаниеОдометраНаНачалоЭксплуатации,
		|	Машины.Дата
		|ИЗ
		|	Справочник.Машины КАК Машины
		|ГДЕ
		|	Машины.Ссылка = &Автомобиль
		|	И Машины.Дата <= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автомобиль, "ПоказаниеОдометраНаНачалоЭксплуатации");
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Показание;
	КонецЕсли;
	
 	Возврат Результат;
	
КонецФункции // ПолучитьПоказаниеОдометра()


Функция ПолучитьТопливоВБаке(Автомобиль, Знач Дата = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();	
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТопливоВБакахОстатки.Автомобиль КАК Автомобиль,
		|	ТопливоВБакахОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТопливоВБаках.Остатки(&Дата, Автомобиль = &Автомобиль) КАК ТопливоВБакахОстатки";
	
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = 0;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Количество;
	КонецЕсли;
	
 	Возврат Результат;

КонецФункции // ПолучитьТопливоВБаке()

Функция ПолучитьОборотыТопливаВБаке(Автомобиль, НачалоПериода, КонецПериода, ИсключитьРегистратор = Неопределено) Экспорт

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ТопливоВБакахОбороты.КоличествоОборот) КАК Количество
		|ИЗ
		|	РегистрНакопления.ТопливоВБаках.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Автомобиль = &Автомобиль) КАК ТопливоВБакахОбороты";
	
	Если ЗначениеЗаполнено(ИсключитьРегистратор) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ТопливоВБакахОбороты.Регистратор <> &Регистратор";
		
		Запрос.УстановитьПараметр("Регистратор", ИсключитьРегистратор);
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Регистратор", "");
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = 0;
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Результат = ?(ВыборкаДетальныеЗаписи.Количество = NULL, 0, ВыборкаДетальныеЗаписи.Количество);
	КонецЕсли;
	
	
	Возврат Результат;

КонецФункции // ПолучитьОборотыТопливаВБаке()

Функция ПолучитьПолныйАдрес(Город, Адрес) Экспорт

	Слова = Новый Массив();
	
	Слова.Добавить(Адрес);
	
	Если ЗначениеЗаполнено(Город) Тогда
		ГородПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Город, "Наименование");
		Если СтрНайти(Адрес, ГородПредставление) = 0 Тогда 
			Слова.Вставить(0, "г. " + ГородПредставление);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат дт_ОбщегоНазначенияКлиентСервер.СтрокаИзМассиваСтрок(Слова, ", ", Истина);

КонецФункции // ПолучитьПолныйАдрес()

Функция ПолучитьТаблицуПлановыхРемонтов(Автомобиль, НаДату) Экспорт

	
	СвойстваАвтомобиля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Автомобиль, "МаркаТС,Год,Дата");
	Если Не ЗначениеЗаполнено(СвойстваАвтомобиля.МаркаТС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗаявкаНаОбслуживание.ДатаВыполнения) КАК ДатаВыполнения,
		|	ЗаявкаНаОбслуживание.ВидОбслуживания КАК ВидОбслуживания,
		|	МАКСИМУМ(ЗаявкаНаОбслуживание.ПоказанияОдометраНачало) КАК ПоказанияОдометра,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявкаНаОбслуживание.Ссылка) КАК Количество
		|ПОМЕСТИТЬ ВТ_ЗавершенныеРемонты
		|ИЗ
		|	Документ.ЗаявкаНаОбслуживание КАК ЗаявкаНаОбслуживание
		|ГДЕ
		|	ЗаявкаНаОбслуживание.Автомобиль = &Автомобиль
		|	И ЗаявкаНаОбслуживание.Дата <= &НаДату
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаОбслуживание.ВидОбслуживания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МодельТСПлановыеРемонты.ВидОбслуживания КАК ВидОбслуживания,
		|	МодельТСПлановыеРемонты.ВидПланированияПоВыработке КАК ВидПланированияПоВыработке,
		|	МодельТСПлановыеРемонты.Количество КАК Количество,
		|	МодельТСПлановыеРемонты.Периодичность КАК Периодичность,
		|	МодельТСПлановыеРемонты.ПараметрВыработки КАК ПараметрВыработки,
		|	МодельТСПлановыеРемонты.Допуск КАК Допуск,
		|	МодельТСПлановыеРемонты.КоличествоПовторов КАК КоличествоПовторов,
		|	ЕСТЬNULL(ВТ_ЗавершенныеРемонты.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРемонта,
		|	ЕСТЬNULL(ВТ_ЗавершенныеРемонты.ПоказанияОдометра, 0) КАК ПробегПоследний
		|ИЗ
		|	Справочник.МодельТС.ПлановыеРемонты КАК МодельТСПлановыеРемонты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗавершенныеРемонты КАК ВТ_ЗавершенныеРемонты
		|		ПО МодельТСПлановыеРемонты.ВидОбслуживания = ВТ_ЗавершенныеРемонты.ВидОбслуживания
		|ГДЕ
		|	МодельТСПлановыеРемонты.Ссылка = &Модель
		|	И МодельТСПлановыеРемонты.Количество <> 0";
	
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("Модель", СвойстваАвтомобиля.МаркаТС);
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Дата");
	Результат.Колонки.Добавить("Пробег");
	Результат.Колонки.Добавить("ВидОбслуживания");
	
	ДатаНачала = Неопределено;
	МесяцНачалаЭксплуатации = ?(ЗначениеЗаполнено(СвойстваАвтомобиля.Дата), Месяц(СвойстваАвтомобиля.Дата), 1);
	ДеньНачалаЭксплуатации = ?(ЗначениеЗаполнено(СвойстваАвтомобиля.Дата), День(СвойстваАвтомобиля.Дата), 1);
	
	Если ЗначениеЗаполнено(СвойстваАвтомобиля.Год) Тогда
		ДатаНачала = Дата(СвойстваАвтомобиля.Год, МесяцНачалаЭксплуатации, ДеньНачалаЭксплуатации);
	КонецЕсли;
	
	ПробегТекущий = ПолучитьПоказаниеОдометра(Автомобиль, НаДату);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
			
		Если ВыборкаДетальныеЗаписи.ВидПланированияПоВыработке Тогда
			// относительно нулевого пробега считаем ближайший
			
			ЦикловДолжноБытьПройдено = Цел(ПробегТекущий / ВыборкаДетальныеЗаписи.Количество);
			
			Если ВыборкаДетальныеЗаписи.КоличествоПовторов = 0 ИЛИ ЦикловДолжноБытьПройдено < ВыборкаДетальныеЗаписи.КоличествоПовторов Тогда
				
				ПробегПоследнегоРемонта = ВыборкаДетальныеЗаписи.ПробегПоследний;
				
				НоваяСтрока = Результат.Добавить();
				Если ПробегПоследнегоРемонта = 0 Тогда
					НоваяСтрока.Пробег = (ЦикловДолжноБытьПройдено + 1) * ВыборкаДетальныеЗаписи.Количество;
				Иначе
					НоваяСтрока.Пробег =  ПробегПоследнегоРемонта + ВыборкаДетальныеЗаписи.Количество;
				КонецЕсли;
				НоваяСтрока.ВидОбслуживания = ВыборкаДетальныеЗаписи.ВидОбслуживания;
				
			КонецЕсли;
			
		Иначе
			// относительно даты выпуска а/м считаем ближайшую
			ПараметрВыработки = дт_ОбщегоНазначенияКлиентСервер.РазностьДат(НаДату, ДатаНачала, ВыборкаДетальныеЗаписи.Периодичность);
			
			ЦикловДолжноБытьПройдено = Цел(ПараметрВыработки / ВыборкаДетальныеЗаписи.Количество);
			
			Если ВыборкаДетальныеЗаписи.КоличествоПовторов = 0 ИЛИ ЦикловДолжноБытьПройдено < ВыборкаДетальныеЗаписи.КоличествоПовторов Тогда
				
				ДатаПоследнегоРемонта = ВыборкаДетальныеЗаписи.ДатаРемонта;
				
				НоваяСтрока = Результат.Добавить();
				Если Не ЗначениеЗаполнено(ДатаПоследнегоРемонта) Тогда
					СледующаяДата = дт_ОбщегоНазначенияКлиентСервер.ДобавитьКДате(ДатаНачала, 
						(ЦикловДолжноБытьПройдено + 1) * ВыборкаДетальныеЗаписи.Количество, 
						ВыборкаДетальныеЗаписи.Периодичность
					);
				Иначе
					СледующаяДата = дт_ОбщегоНазначенияКлиентСервер.ДобавитьКДате(ДатаПоследнегоРемонта, 
						ВыборкаДетальныеЗаписи.Количество, 
						ВыборкаДетальныеЗаписи.Периодичность
					);
				КонецЕсли;
				НоваяСтрока.Дата = Макс(СледующаяДата, НаДату);
				НоваяСтрока.ВидОбслуживания = ВыборкаДетальныеЗаписи.ВидОбслуживания;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем неуникальные строки ?
	
	Возврат Результат;	

КонецФункции // ПолучитьТаблицуПлановыхРемонтов()

// Функция формирует сведения о водителе
// К сведениям относятся: наименование, адрес, номер телефона, банковские реквизиты.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОВодителе(Водитель, ДатаПериода = Неопределено) Экспорт

	Поля = "Наименование,Код,УдостоверенияВодителяНомер,УдостоверенияВодителяДатаВыдачи,УдостоверенияВодителяСрокДействия,ПаспортСерияНомер,ПаспортВыдан,ПаспортДатаВыдачи,КлассВодителя";
	Сведения = Новый Структура(Поля);
	
	Если ЗначениеЗаполнено(Водитель) Тогда
		Сведения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Водитель, Поля);
	КонецЕсли;	
	
	Сведения.Вставить("ФИО", Сведения.Наименование);
	
	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()


Функция СведенияОбАвтомобиле(Автомобиль, ДатаПериода) Экспорт

	Поля = "ТипТС,МаркаТС,ГосНомер,Код,Водитель,ЭтоПрицеп";
	ПоляДоп = "Модель,ПрицепМодель,ПрицепГосномер,ПрицепКод";
	Результат = Новый Структура(Поля + ", " + ПоляДоп);
	
	Если ЗначениеЗаполнено(Автомобиль) Тогда
		
		Сведения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Автомобиль, Поля);
		Сведения.Вставить("Модель", Сведения.ТипТС);
		
		Если НЕ Сведения.ЭтоПрицеп Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сцепки.Прицеп КАК Прицеп
			|ИЗ
			|	РегистрСведений.дт_Сцепки.СрезПоследних(&Дата, Автомобиль = &Автомобиль) КАК Сцепки";
			
			Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
			Запрос.УстановитьПараметр("Дата", ДатаПериода);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				Прицеп = Выборка.Прицеп;
				
				Если ЗначениеЗаполнено(Прицеп) Тогда
					
					СведенияОПрицепе = СведенияОбАвтомобиле(Прицеп, ДатаПериода);
					Сведения.Вставить("ПрицепМодель", СведенияОПрицепе.Модель);
					Сведения.Вставить("ПрицепГосномер", СведенияОПрицепе.Госномер);
					Сведения.Вставить("ПрицепКод", СведенияОПрицепе.Код);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, Сведения);
		
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции // СведенияОЮрФизЛице()


#КонецОбласти

#Область Проведение
// Выполняет движения регистра накопления РегистрНакопления1
//
Процедура ОтразитьПоказанияОдометра(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	ТаблицыДляДвижения = Новый Массив();
	ТаблицыДляДвижения.Добавить("ТаблицаПоказанияОдометра");
	
	
	ТаблицаДвижения = Неопределено;
	
	Для каждого ИмяТаблицы Из ТаблицыДляДвижения Цикл
	
		Если ПараметрыПроведения.Свойство(ИмяТаблицы) Тогда
			
			Если ТаблицаДвижения = Неопределено Тогда
				ТаблицаДвижения = ПараметрыПроведения[ИмяТаблицы].Скопировать();
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыПроведения[ИмяТаблицы], ТаблицаДвижения);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если Отказ
	 ИЛИ ТаблицаДвижения = Неопределено 
	 ИЛИ ТаблицаДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ДвиженияНабор = Движения.ПоказанияОдометра;
	ДвиженияНабор.Записывать = Истина;
	ДвиженияНабор.Загрузить(ТаблицаДвижения);
	
КонецПроцедуры

// Выполняет движения регистра накопления РегистрНакопления1
//
Процедура ОтразитьТопливоВБаках(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	ТаблицыДляДвижения = Новый Массив();
	ТаблицыДляДвижения.Добавить("ТаблицаТопливоВБаках");
	
	
	ТаблицаДвижения = Неопределено;
	
	Для каждого ИмяТаблицы Из ТаблицыДляДвижения Цикл
	
		Если ПараметрыПроведения.Свойство(ИмяТаблицы) Тогда
			
			Если ТаблицаДвижения = Неопределено Тогда
				ТаблицаДвижения = ПараметрыПроведения[ИмяТаблицы].Скопировать();
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыПроведения[ИмяТаблицы], ТаблицаДвижения);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если Отказ
	 ИЛИ ТаблицаДвижения = Неопределено
	 ИЛИ ТаблицаДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ДвиженияНабор = Движения.ТопливоВБаках;
	ДвиженияНабор.Записывать = Истина;
	ДвиженияНабор.Загрузить(ТаблицаДвижения);
	
КонецПроцедуры

// Выполняет движения регистра накопления РегистрНакопления1
//
Процедура ОтразитьСебестоимостьПеревозок(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	ТаблицыДляДвижения = Новый Массив();
	ТаблицыДляДвижения.Добавить("ТаблицаСебестоимостьПеревозок");
	
	
	ТаблицаДвижения = Неопределено;
	
	Для каждого ИмяТаблицы Из ТаблицыДляДвижения Цикл
	
		Если ПараметрыПроведения.Свойство(ИмяТаблицы) Тогда
			
			Если ТаблицаДвижения = Неопределено Тогда
				ТаблицаДвижения = ПараметрыПроведения[ИмяТаблицы].Скопировать();
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыПроведения[ИмяТаблицы], ТаблицаДвижения);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если Отказ
	 ИЛИ ТаблицаДвижения = Неопределено 
	 ИЛИ ТаблицаДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ДвиженияНабор = Движения.СебестоимостьПеревозок;
	ДвиженияНабор.Записывать = Истина;
	ДвиженияНабор.Загрузить(ТаблицаДвижения);
	
КонецПроцедуры


// Готовит к записи наборы записей документа (только по регистрам, входящих в подсистему)
//
Процедура ПодготовитьНаборыЗаписей(СтруктураОбъект) Экспорт
	
	РегистрыПодсистемы = Новый Массив;
	РегистрыПодсистемы.Добавить("ПоказанияОдометра");
	РегистрыПодсистемы.Добавить("ТопливоВБаках");
	РегистрыПодсистемы.Добавить("СебестоимостьПеревозок");
	
	Для каждого Регистр Из РегистрыПодсистемы Цикл
	
		НаборЗаписей = СтруктураОбъект.Движения.Найти(Регистр);
		
		Если НаборЗаписей <> Неопределено Тогда
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
				
			КонецЕсли;
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
				
			КонецЕсли;
			
			//РегистрыНакопления[Регистр].СоздатьПустуюВременнуюТаблицуИзменение(СтруктураОбъект.ДополнительныеСвойства);
		
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры

	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс



#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти