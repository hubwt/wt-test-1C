
Функция ПреобразованиеНомераТелефона(phone)
	
	МассивСимволов = Новый Массив;
	МассивСимволов.Добавить("0");
	МассивСимволов.Добавить("1");
	МассивСимволов.Добавить("2");
	МассивСимволов.Добавить("3");
	МассивСимволов.Добавить("4");
	МассивСимволов.Добавить("5");
	МассивСимволов.Добавить("6");
	МассивСимволов.Добавить("7");
	МассивСимволов.Добавить("8");
	МассивСимволов.Добавить("9");
	
	newphone = "";
	Для i = 1 По СтрДлина(phone) Цикл
		ТекущийСимвол = Сред(phone, i, 1);
		Если МассивСимволов.Найти(ТекущийСимвол) <> Неопределено Тогда
			newphone = newphone + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат newphone;
	
КонецФункции

Функция ПолучитьСуммуОпдатыЗаказа(ЗаказПокупателя)
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ЗаказПокупателя);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
	СтруктураПараметров = МенеджерОбъекта.СтруктураСостояниеВыполненияДокумента();
	
	Запрос = Новый Запрос;
	
	// Установка параметров запроса.
	Запрос.УстановитьПараметр("МассивДокументов", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));

	
КонецФункции


Функция ПолучитьСтатус(Сделка)
	
	Если Сделка.Статус = Перечисления.СтатусыСделок.Проиграна Тогда
		Возврат "4"; // Статус "Отмененные"
	КонецЕсли;
	
	ДопРеквизит_ОтказКлиента = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Отказ клиента (Список заказов клиентов)", Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДата());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЗаказКлиента.Ссылка КАК Ссылка,
	|	ДокументЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументЗаказКлиента.Номер КАК Номер,
	|	ДокументЗаказКлиента.Дата КАК Дата,
	|	ДокументЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	|	ДокументЗаказКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
	|	ДокументЗаказКлиента.Проведен КАК Проведен,
	|	ДокументЗаказКлиента.Приоритет КАК Приоритет,
	|	ДокументЗаказКлиента.Партнер КАК Партнер,
	|	ДокументЗаказКлиента.Контрагент КАК Контрагент,
	|	ДокументЗаказКлиента.Организация КАК Организация,
	|	ДокументЗаказКлиента.Соглашение КАК Соглашение,
	|	ДокументЗаказКлиента.Договор КАК Договор,
	|	ДокументЗаказКлиента.Сделка КАК Сделка,
	|	ДокументЗаказКлиента.Валюта КАК Валюта,
	|	ДокументЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ДокументЗаказКлиента.СуммаВозвратнойТары КАК СуммаВозвратнойТары,
	|	ДокументЗаказКлиента.ГрафикОплаты КАК ГрафикОплаты,
	|	ДокументЗаказКлиента.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ДокументЗаказКлиента.Склад КАК Склад,
	|	ДокументЗаказКлиента.Статус КАК Статус,
	|	ДокументЗаказКлиента.Менеджер КАК Менеджер,
	|	ДокументЗаказКлиента.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ДокументЗаказКлиента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
	|	ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки,
	|	ДокументЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДокументЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДокументЗаказКлиента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДокументЗаказКлиента.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА НЕ ДокументЗаказКлиента.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт))
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА НЕ ДокументЗаказКлиента.Проведен
	|			ТОГДА ЛОЖЬ
	|		КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияЗаказовКлиентов.ДатаСобытия
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочен,
	|	ВЫБОР
	|		КОГДА ДокументЗаказКлиента.Приоритет В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания)
	|			ТОГДА 0
	|		КОГДА ДокументЗаказКлиента.Приоритет В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания УБЫВ)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КартинкаПриоритета,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОплаты, 0) КАК ПроцентОплаты,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки, 0) КАК СуммаОтгрузки,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОтгрузки, 0) КАК ПроцентОтгрузки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0) < 0
	|			ТОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НашДолг,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0) > 0
	|			ТОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгКлиента,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентДолга, 0) КАК ПроцентДолга,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ДатаСобытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСобытия,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ) КАК ЕстьРасхожденияОрдерНакладная,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО (СостоянияЗаказовКлиентов.Заказ = ДокументЗаказКлиента.Ссылка)
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО (СостоянияЭД.СсылкаНаОбъект = ДокументЗаказКлиента.Ссылка)}
	|ГДЕ
	|	ДокументЗаказКлиента.Сделка = &Сделка";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗначениеОтказ = УправлениеСвойствами.ЗначениеСвойства(Выборка.Ссылка,ДопРеквизит_ОтказКлиента);
			Если ЗначениеОтказ <> Неопределено И ЗначениеОтказ Тогда
				Возврат "4";
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЗаказКлиента.Ссылка КАК Ссылка,
	|	ДокументЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументЗаказКлиента.Номер КАК Номер,
	|	ДокументЗаказКлиента.Дата КАК Дата,
	|	ДокументЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	|	ДокументЗаказКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
	|	ДокументЗаказКлиента.Проведен КАК Проведен,
	|	ДокументЗаказКлиента.Приоритет КАК Приоритет,
	|	ДокументЗаказКлиента.Партнер КАК Партнер,
	|	ДокументЗаказКлиента.Контрагент КАК Контрагент,
	|	ДокументЗаказКлиента.Организация КАК Организация,
	|	ДокументЗаказКлиента.Соглашение КАК Соглашение,
	|	ДокументЗаказКлиента.Договор КАК Договор,
	|	ДокументЗаказКлиента.Сделка КАК Сделка,
	|	ДокументЗаказКлиента.Валюта КАК Валюта,
	|	ДокументЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ДокументЗаказКлиента.СуммаВозвратнойТары КАК СуммаВозвратнойТары,
	|	ДокументЗаказКлиента.ГрафикОплаты КАК ГрафикОплаты,
	|	ДокументЗаказКлиента.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ДокументЗаказКлиента.Склад КАК Склад,
	|	ДокументЗаказКлиента.Статус КАК Статус,
	|	ДокументЗаказКлиента.Менеджер КАК Менеджер,
	|	ДокументЗаказКлиента.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ДокументЗаказКлиента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
	|	ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки,
	|	ДокументЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДокументЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДокументЗаказКлиента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДокументЗаказКлиента.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА НЕ ДокументЗаказКлиента.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт))
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА НЕ ДокументЗаказКлиента.Проведен
	|			ТОГДА ЛОЖЬ
	|		КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияЗаказовКлиентов.ДатаСобытия
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочен,
	|	ВЫБОР
	|		КОГДА ДокументЗаказКлиента.Приоритет В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания)
	|			ТОГДА 0
	|		КОГДА ДокументЗаказКлиента.Приоритет В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания УБЫВ)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КартинкаПриоритета,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОплаты, 0) КАК ПроцентОплаты,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки, 0) КАК СуммаОтгрузки,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОтгрузки, 0) КАК ПроцентОтгрузки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0) < 0
	|			ТОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НашДолг,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0) > 0
	|			ТОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгКлиента,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентДолга, 0) КАК ПроцентДолга,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ДатаСобытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСобытия,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ) КАК ЕстьРасхожденияОрдерНакладная,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО (СостоянияЗаказовКлиентов.Заказ = ДокументЗаказКлиента.Ссылка)
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО (СостоянияЭД.СсылкаНаОбъект = ДокументЗаказКлиента.Ссылка)}
	|ГДЕ
	|	ДокументЗаказКлиента.Сделка = &Сделка";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПроцентОплаты >= 100 Тогда
				Возврат "3";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЗаказКлиента.Ссылка КАК Ссылка,
	|	ДокументЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументЗаказКлиента.Номер КАК Номер,
	|	ДокументЗаказКлиента.Дата КАК Дата,
	|	ДокументЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	|	ДокументЗаказКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
	|	ДокументЗаказКлиента.Проведен КАК Проведен,
	|	ДокументЗаказКлиента.Приоритет КАК Приоритет,
	|	ДокументЗаказКлиента.Партнер КАК Партнер,
	|	ДокументЗаказКлиента.Контрагент КАК Контрагент,
	|	ДокументЗаказКлиента.Организация КАК Организация,
	|	ДокументЗаказКлиента.Соглашение КАК Соглашение,
	|	ДокументЗаказКлиента.Договор КАК Договор,
	|	ДокументЗаказКлиента.Сделка КАК Сделка,
	|	ДокументЗаказКлиента.Валюта КАК Валюта,
	|	ДокументЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ДокументЗаказКлиента.СуммаВозвратнойТары КАК СуммаВозвратнойТары,
	|	ДокументЗаказКлиента.ГрафикОплаты КАК ГрафикОплаты,
	|	ДокументЗаказКлиента.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ДокументЗаказКлиента.Склад КАК Склад,
	|	ДокументЗаказКлиента.Статус КАК Статус,
	|	ДокументЗаказКлиента.Менеджер КАК Менеджер,
	|	ДокументЗаказКлиента.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ДокументЗаказКлиента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
	|	ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки,
	|	ДокументЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДокументЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДокументЗаказКлиента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДокументЗаказКлиента.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА НЕ ДокументЗаказКлиента.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт))
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА НЕ ДокументЗаказКлиента.Проведен
	|			ТОГДА ЛОЖЬ
	|		КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияЗаказовКлиентов.ДатаСобытия
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочен,
	|	ВЫБОР
	|		КОГДА ДокументЗаказКлиента.Приоритет В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания)
	|			ТОГДА 0
	|		КОГДА ДокументЗаказКлиента.Приоритет В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания УБЫВ)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КартинкаПриоритета,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОплаты, 0) КАК ПроцентОплаты,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки, 0) КАК СуммаОтгрузки,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОтгрузки, 0) КАК ПроцентОтгрузки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0) < 0
	|			ТОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НашДолг,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0) > 0
	|			ТОГДА ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаДолга, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгКлиента,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентДолга, 0) КАК ПроцентДолга,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ДатаСобытия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСобытия,
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ) КАК ЕстьРасхожденияОрдерНакладная,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО (СостоянияЗаказовКлиентов.Заказ = ДокументЗаказКлиента.Ссылка)
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО (СостоянияЭД.СсылкаНаОбъект = ДокументЗаказКлиента.Ссылка)}
	|ГДЕ
	|	ДокументЗаказКлиента.Сделка = &Сделка";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Состояние = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяСогласование Тогда
				Возврат "2";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат "1"; // Статус Новое событие"
	
КонецФункции

Функция ПолучитьСумму(Сделка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Сделка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Продажи.Сумма КАК СуммаДокумента,
	|	Продажи.Регистратор.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор.Ссылка = &Заказ";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		СуммаДокумента = 0;
		Пока Выборка.Следующий() Цикл
			СуммаДокумента = СуммаДокумента + Выборка.СуммаДокумента;			
		КонецЦикла;
		Возврат Формат(СуммаДокумента, "ЧГ=0");
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Сделка", Сделка);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СУММА(ЕСТЬNULL(ЗаказПокупателя.СуммаДокумента, 0)) КАК СуммаДокумента,
	//|	ЗаказПокупателя.Ссылка
	//|ИЗ
	//|	Документ.ЗаказКлиента КАК ЗаказПокупателя
	//|ГДЕ
	//|	ЗаказПокупателя.Сделка = &Сделка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЗаказПокупателя.Ссылка";
	//РезультатЗапроса = Запрос.Выполнить();
	//Если Не РезультатЗапроса.Пустой() Тогда
	//	Выборка = РезультатЗапроса.Выбрать();
	//	СуммаДокумента = 0;
	//	Пока Выборка.Следующий() Цикл
	//		СуммаДокумента = СуммаДокумента + Выборка.СуммаДокумента;			
	//	КонецЦикла;
	//	Возврат Формат(СуммаДокумента, "ЧГ=0");
	//КонецЕсли;
	
	Возврат 0;

КонецФункции

Функция ПолучитьСебестоимость(Сделка)
	Себестоимость= 0;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.Стоимость, 0)) КАК Себестоимость,
	|	СУММА(ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.СуммаВыручки, 0)) КАК СуммаВыручки,
	|	СУММА(ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.Количество, 0)) КАК Количество
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.ЗаказКлиента.Сделка = &Сделка";
	Запрос.УстановитьПараметр("Сделка", Сделка);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Себестоимость = Себестоимость + ?(Выборка.Себестоимость = NULL, 0, Выборка.Себестоимость);
		КонецЦикла;		
	КонецЕсли;
	

	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Сделка", Сделка);
	//Запрос.УстановитьПараметр("ВидЦеныСебестоимость", Справочники.RoistatНастройки.ВидЦеныСебестоимость.Значение);
	//Запрос.УстановитьПараметр("ДатаСделки", ДокументЗаказ.Дата);
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ЗаказКлиентаТовары.Ссылка КАК ЗаказПокупателя,
	//|	ЗаказКлиентаТовары.Номенклатура,
	//|	ЗаказКлиентаТовары.Количество,
	//|	ЦеныНоменклатурыСрезПоследних.Цена,
	//|	ЗаказКлиентаТовары.Количество * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Себестоимость
	//|ИЗ
	//|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСделки, ВидЦены = &ВидЦеныСебестоимость) КАК ЦеныНоменклатурыСрезПоследних
	//|		ПО ЗаказКлиентаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//|			И ЗаказКлиентаТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	//|ГДЕ
	//|	ЗаказКлиентаТовары.Ссылка.ДокументОснование = &Сделка";
	//РезультатЗапроса = Запрос.Выполнить();
	//	
	//Себестоимость = 0;
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Себестоимость = Себестоимость + Выборка.Себестоимость;
	//КонецЦикла;
	
	Возврат Формат(Себестоимость, "ЧГ=0");
	
КонецФункции


Функция СделкаСуществует(Roistat_НомерСделки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	CRM_Событие.Ссылка КАК Сделка,
	|	CRM_Событие.Roistat_НомерВизита,
	|	CRM_Событие.Roistat_НомерСделки
	|ИЗ
	|	Справочник.СделкиСКлиентами КАК CRM_Событие
	|ГДЕ
	|	CRM_Событие.Roistat_НомерСделки = &Roistat_НомерСделки";
	Запрос.УстановитьПараметр("Roistat_НомерСделки", Roistat_НомерСделки);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ПолучитьСделку(Roistat_НомерСделки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	CRM_Событие.Ссылка КАК Сделка,
	|	CRM_Событие.Roistat_НомерВизита,
	|	CRM_Событие.Roistat_НомерСделки
	|ИЗ
	|	Справочник.СделкиСКлиентами КАК CRM_Событие
	|ГДЕ
	|	CRM_Событие.Roistat_НомерСделки = &Roistat_НомерСделки";
	Запрос.УстановитьПараметр("Roistat_НомерСделки", Roistat_НомерСделки);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Сделка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция НайтиКонтрагентаПоДаннымСделки(ТекущаяСделка)
	Если ПустаяСтрока(ТекущаяСделка.email) И ПустаяСтрока(ТекущаяСделка.phone) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СокрЛП(ТекущаяСделка.phone)) Тогда
		newphone = ПреобразованиеНомераТелефона(СокрЛП(ТекущаяСделка.phone));
		newphone = "7" + Прав(newphone, 10);
		//Если СтрДлина(newphone) < 11 Тогда
		//	Возврат;
		//КонецЕсли;
		Если СтрДлина(newphone) > 10 Тогда
			ЗапросТелефон = Новый Запрос;
			ЗапросТелефон.УстановитьПараметр("Телефон", "%"+СокрЛП(newphone));
			ЗапросТелефон.УстановитьПараметр("ТипКонтактнойИнформации", Перечисления.ТипыКонтактнойИнформации.Телефон);
			ЗапросТелефон.Текст =
			"ВЫБРАТЬ
			|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
			|	ПартнерыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
			|	ПартнерыКонтактнаяИнформация.Тип КАК Тип,
			|	ПартнерыКонтактнаяИнформация.Вид КАК Вид,
			|	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
			|	ПартнерыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
			|	ПартнерыКонтактнаяИнформация.Страна КАК Страна,
			|	ПартнерыКонтактнаяИнформация.Регион КАК Регион,
			|	ПартнерыКонтактнаяИнформация.Город КАК Город,
			|	ПартнерыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
			|	ПартнерыКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
			|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
			|	ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
			|ГДЕ
			|	ПартнерыКонтактнаяИнформация.НомерТелефона ПОДОБНО &Телефон
			|	И ПартнерыКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерСтроки,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Страна,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Регион,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Город,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.ДоменноеИмяСервера,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
			|ГДЕ
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона ПОДОБНО &Телефон
			|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации";
			РезультатЗапросаТелефон = ЗапросТелефон.Выполнить();
			Если Не РезультатЗапросаТелефон.Пустой() Тогда
				ВыборкаТелефон = РезультатЗапросаТелефон.Выбрать();
				Если ВыборкаТелефон.Следующий() Тогда
					
					Возврат ВыборкаТелефон.Партнер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СокрЛП(ТекущаяСделка.email)) Тогда
		ЗапросПочта = Новый Запрос;
		ЗапросПочта.УстановитьПараметр("АдресЭП", СокрЛП(ТекущаяСделка.email));
		ЗапросПочта.УстановитьПараметр("ТипКонтактнойИнформации", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ЗапросПочта.Текст = 
		"ВЫБРАТЬ
		|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
		|	ПартнерыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	ПартнерыКонтактнаяИнформация.Тип КАК Тип,
		|	ПартнерыКонтактнаяИнформация.Вид КАК Вид,
		|	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
		|	ПартнерыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ПартнерыКонтактнаяИнформация.Страна КАК Страна,
		|	ПартнерыКонтактнаяИнформация.Регион КАК Регион,
		|	ПартнерыКонтактнаяИнформация.Город КАК Город,
		|	ПартнерыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
		|	ПартнерыКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
		|	ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.АдресЭП ПОДОБНО &АдресЭП
		|	И ПартнерыКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерСтроки,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Страна,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Регион,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Город,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.ДоменноеИмяСервера,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП ПОДОБНО &АдресЭП
		|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации";
		РезультатЗапросаПочта = ЗапросПочта.Выполнить();
		Если Не РезультатЗапросаПочта.Пустой() Тогда
			ВыборкаПочта = РезультатЗапросаПочта.Выбрать();
			Если ВыборкаПочта.Следующий() Тогда
				
				Возврат ВыборкаПочта.Партнер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
		
	Возврат Неопределено;

КонецФункции

Функция СозданиеНовогоПартнера(ТекущаяСделка)
	
	Наименование = СокрЛП(ТекущаяСделка.name);
	Если ЗначениеЗаполнено(СокрЛП(ТекущаяСделка.phone)) Тогда
		Наименование = Наименование + ", "	+ СокрЛП(ТекущаяСделка.phone);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СокрЛП(ТекущаяСделка.email)) Тогда
		Наименование = Наименование + ", "	+ СокрЛП(ТекущаяСделка.email);
	КонецЕсли;
	
	
	//Создание партнера
	Спр=Справочники.Партнеры.СоздатьЭлемент();
	Спр.Наименование= СокрЛП(Наименование);
	Спр.НаименованиеПолное= СокрЛП(ТекущаяСделка.name);
	Спр.Клиент= Истина;
	Спр.Поставщик= Ложь;
	Спр.ПрочиеОтношения=Ложь;
	Спр.ЮрФизЛицо=Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	
	Спр.Комментарий = "Создан автоматически Roistat";
	Спр.ДатаРегистрации= ТекущаяДата();
	
	Если Не ПустаяСтрока(СокрЛП(ТекущаяСделка.email)) Тогда
		ЗаполнитьКонтактнуюИнформациюТелефонИЛИEmail(Спр.КонтактнаяИнформация, СокрЛП(ТекущаяСделка.email), Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	КонецЕсли; 
	Если Не ПустаяСтрока(СокрЛП(ТекущаяСделка.phone)) Тогда
		ЗаполнитьКонтактнуюИнформациюТелефонИЛИEmail(Спр.КонтактнаяИнформация, СокрЛП(ТекущаяСделка.phone), Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	КонецЕсли;
	Спр.ОсновнойМенеджер = ПолучитьМенеджераИзОчереди();
	Спр.Записать();
	Партнер = Спр.Ссылка;
	//Создание контрагента
	
	СпрКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	СпрКонтрагент.Наименование= СокрЛП(Наименование);
	СпрКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	СпрКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	СпрКонтрагент.Партнер = Спр.Ссылка;
	СпрКонтрагент.Записать();
	
	
	//Запись контактных лиц партнера
	Спр=Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
	Спр.Владелец = Партнер;
	Спр.Наименование= СокрЛП(ТекущаяСделка.name);
	Спр.Комментарий = "Создан автоматически Roistat";
	Спр.ДатаРегистрацииСвязи= ТекущаяДата();
	
	
	Если Не ПустаяСтрока(СокрЛП(ТекущаяСделка.email)) Тогда
		ЗаполнитьКонтактнуюИнформациюТелефонИЛИEmail(Спр.КонтактнаяИнформация, СокрЛП(ТекущаяСделка.email), Справочники.ВидыКонтактнойИнформации.EmailПартнера);
		ЗаполнитьКонтактнуюИнформациюТелефонИЛИEmail(СпрКонтрагент.КонтактнаяИнформация, СокрЛП(ТекущаяСделка.email), Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	КонецЕсли; 
	Если Не ПустаяСтрока(СокрЛП(ТекущаяСделка.phone)) Тогда
		ЗаполнитьКонтактнуюИнформациюТелефонИЛИEmail(Спр.КонтактнаяИнформация, СокрЛП(ТекущаяСделка.phone), Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
		ЗаполнитьКонтактнуюИнформациюТелефонИЛИEmail(СпрКонтрагент.КонтактнаяИнформация, СокрЛП(ТекущаяСделка.phone), Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	КонецЕсли;
	Спр.Записать();	
	
	
	Возврат Партнер;
	
КонецФункции

Процедура СозданиеДокументаСобытие(ТекущийКонтрагент, ТекущаяСделка, ДокументСобытия = Неопределено)
	
	
	Если ТипЗнч(ТекущийКонтрагент) = Тип("СправочникСсылка.Партнеры") Тогда
		Партнер = ТекущийКонтрагент;
	КонецЕсли;
	Если ТипЗнч(ТекущийКонтрагент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Партнер = ТекущийКонтрагент.Владелец;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сделки.Ссылка КАК Сделки,
	|	Сделки.Roistat_НомерВизита КАК Roistat_НомерВизита,
	|	Сделки.Roistat_НомерСделки КАК Roistat_НомерСделки
	|ИЗ
	|	Справочник.СделкиСКлиентами КАК Сделки
	|ГДЕ
	|	Сделки.Партнер = &Контрагент
	|	И Сделки.Roistat_ПервичнаяСделка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сделки.ДатаНачала УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("Контрагент", Партнер);
	РезультатЗапроса = Запрос.Выполнить();
	//
	//Возврат;
	
	
	ЕстьПервичнаяСделка = Ложь;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		//@skip-check query-in-loop
		Статус = ПолучитьСтатус(Выборка.Сделки);
		Если Статус = 1 Тогда // Статус В работе
			ЕстьПервичнаяСделка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументСобытия = Неопределено Тогда 
		НоваяСделка = Справочники.СделкиСКлиентами.СоздатьЭлемент();
	Иначе
		НоваяСделка = ДокументСобытия.ПолучитьОбъект();
		ТекущийКонтрагент =  ДокументСобытия.Партнер;
	КонецЕсли;
	
	
	
	
	ДатаСделки = СтрЗаменить(СокрЛП(ТекущаяСделка.creation_date), " ", "");//2017-05-22 13:25:10
	ДатаСделки = СтрЗаменить(ДатаСделки, "-", "");
	ДатаСделки = СтрЗаменить(ДатаСделки, ":", "");
	Попытка
		НоваяСделка.ДатаНачала = МестноеВремя(Дата(ДатаСделки));
	Исключение
		НоваяСделка.ДатаНачала = ТекущаяДата();
	КонецПопытки;
	
	НоваяСделка.Наименование = ТекущаяСделка.title;
	
	
	Если ТипЗнч(ТекущийКонтрагент) = Тип("СправочникСсылка.Партнеры") Тогда
		НоваяСделка.Партнер = ТекущийКонтрагент;
	КонецЕсли;
	Если ТипЗнч(ТекущийКонтрагент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		НоваяСделка.Партнер = ТекущийКонтрагент.Владелец;
		//НоваяСделка.КонтактноеЛицо = ТекущийКонтрагент;
	КонецЕсли;
	
	НоваяСделка.ВалютаПервичногоСпроса = Константы.ВалютаРегламентированногоУчета.Получить();
	
	НоваяСделка.Roistat_ПервичнаяСделка = Не ЕстьПервичнаяСделка;
	НоваяСделка.Roistat_НомерВизита = СокрЛП(ТекущаяСделка.roistat);
	НоваяСделка.Roistat_НомерСделки = СокрЛП(ТекущаяСделка.id);

	НоваяСделка.Комментарий = Символы.ПС +СокрЛП(ТекущаяСделка.title)+Символы.ПС+СокрЛП(ТекущаяСделка.text);
	НоваяСделка.Ответственный = ПолучитьМенеджераИзОчереди();
	
	ДополнительныеПоляСделки = Неопределено;
	Если ТекущаяСделка.Свойство("order_fields", ДополнительныеПоляСделки) Тогда
		Если ЗначениеЗаполнено(ДополнительныеПоляСделки) Тогда
			Если ДополнительныеПоляСделки.Свойство("form") Тогда
				НоваяСделка.Roistat_НазваниеФормы = ДополнительныеПоляСделки.form;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	НоваяСделка.Записать();
	
КонецПроцедуры

Функция ПолучитьМенеджераИзОчереди(Сайт = "", Форма = "")
	
	Если ПустаяСтрока(Сайт) Тогда
		Очередь = Справочники.Roistat_Настройки.НайтиПоНаименованию("Очередь менеджеров").Менеджеры;
	Иначе
		ОчередьМенеджеровПоСайту = Справочники.Roistat_Настройки.НайтиПоНаименованию("Очередь менеджеров для сайта "+Сайт);
		Если ОчередьМенеджеровПоСайту = Неопределено ИЛИ ОчередьМенеджеровПоСайту.Пустая() Тогда
			НовЭл = Справочники.Roistat_Настройки.СоздатьЭлемент();
			НовЭл.Наименование = "Очередь менеджеров для сайта "+Сайт;
			НовЭл.Записать();
			ОчередьМенеджеровПоСайту = НовЭл.Ссылка;
		КонецЕсли;
		Очередь = ОчередьМенеджеровПоСайту.Менеджеры;
	КонецЕсли;
		
	Если Очередь.Количество() = 0 Тогда
		Возврат Пользователи.АвторизованныйПользователь();
	КонецЕсли; 
	
	Менеджер = Неопределено;
	ИндексСледующегоМенеджера = 0;
	Для Сч = 0 По Очередь.Количество() - 1 Цикл
		Если Очередь[Сч].Текущий Тогда
			
			Если Сч < Очередь.Количество() - 1 Тогда
				ИндексСледующегоМенеджера = Сч + 1;
			КонецЕсли; 
			Менеджер = Очередь[ИндексСледующегоМенеджера].Менеджер;
			
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Менеджер = Неопределено Тогда
		Менеджер = Очередь[ИндексСледующегоМенеджера].Менеджер;
	КонецЕсли; 
	
	Об = Справочники.Roistat_Настройки.НайтиПоНаименованию("Очередь менеджеров").ПолучитьОбъект();
	Для каждого Эл Из Об.Менеджеры Цикл
		Эл.Текущий = Ложь;
	КонецЦикла; 
	Об.Менеджеры[ИндексСледующегоМенеджера].Текущий = Истина;
	Об.Записать();
	
	Возврат Менеджер;
	
КонецФункции // ()

Функция ПолучитьМенеджераИзИстории()


КонецФункции // ()

Процедура ОбработатьСделку(ТекущаяСделка)
	Партнер = НайтиКонтрагентаПоДаннымСделки(ТекущаяСделка);
	Если Партнер = Неопределено Тогда
		Партнер = СозданиеНовогоПартнера(ТекущаяСделка);
	КонецЕсли;
	
	СозданиеДокументаСобытие(Партнер.Ссылка, ТекущаяСделка);

КонецПроцедуры


//ПОЛУЧЕНИЕ
Процедура ПрочитатьОтвет(ПараметрыОбмена, ОтветСервера)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);;
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	
	Если ПараметрыОбмена.Получить("service") = "set-statuses" Тогда

	ИначеЕсли ПараметрыОбмена.Получить("service") = "add-orders" Тогда
		//очистка регистра с отправленными заказами
		
	ИначеЕсли ПараметрыОбмена.Получить("service") = "proxy-leads" Тогда
		Если ДанныеJSON.status = "success" Тогда
			
			МассивСделок = ДанныеJSON.ProxyLeads;
			Если МассивСделок.Количество() > 0 Тогда
				Индекс = МассивСделок.ВГраница();
				Пока Индекс >= 0 Цикл
					ТекущаяСделка = МассивСделок[Индекс];
					
					//Если Найти(ТекущаяСделка.title, "Новая заявка через mango calltracking") <> 0 Тогда
					//	Если Не СделкаСуществует(СокрЛП(ТекущаяСделка.id)) Тогда
					//		ОбработатьСделкуПоЗвонкам(ТекущаяСделка);
					//	КОнецЕсли;
					//Иначе
					Если СокрЛП(ВРег("unregistered@unregistered.com")) = СокрЛП(Врег(ТекущаяСделка.email)) Тогда
						ТекущаяСделка.email = "";
					КонецЕсли;
					
						//@skip-check query-in-loop
						Если Не СделкаСуществует(СокрЛП(ТекущаяСделка.id)) Тогда
							//@skip-check query-in-loop
							ОбработатьСделку(ТекущаяСделка);
						Иначе
							//Обновим сделку. В прод режиме отключаем
							//Сделка = ПолучитьСделку(СокрЛП(ТекущаяСделка.id));
							//Если Сделка <> Неопределено Тогда
							//	СозданиеДокументаСобытие(Неопределено, ТекущаяСделка, Сделка);
							//КонецЕсли;
						КонецЕсли;
					//КонецЕсли;
					Индекс = Индекс - 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Сообщить("ProxyLeads не прочитан", СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанные(ПараметрыОбмена)
	ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	АдресРесурса =  "/api/v1"   +
					"/project/" + ПараметрыОбмена.Получить("service") + 
					"?project=" + ПараметрыОбмена.Получить("project") + 
					"&key=" 	+ ПараметрыОбмена.Получить("key") + 
					"&period=" 	+ ПараметрыОбмена.Получить("period");
	
	Соединение = Новый HTTPСоединение(ПараметрыОбмена.Получить("api"),443,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ПараметрыОбмена.Получить("headers"));
	HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		ContentType = HTTPОтвет.Заголовки.Получить("Content-Type");
		Если Найти(ContentType, ПараметрыОбмена.Получить("accept")) > 0 Тогда
			ПрочитатьОтвет(ПараметрыОбмена, HTTPОтвет.ПолучитьТелоКакСтроку());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//ОТПРАВКА
Функция ЗаписатьСтатусыВФайл(ПараметрыОбмена)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СтатусыСделок = Новый Массив;
	СтатусыСделок.Добавить(Новый Структура("id, name, type", "1", "Новое событие", "progress"));
	СтатусыСделок.Добавить(Новый Структура("id, name, type", "2", "Заказ подтвержден", "progress"));
	//СтатусыСделок.Добавить(Новый Структура("id, name, type", "3", "Отгрузка", "paid"));
	СтатусыСделок.Добавить(Новый Структура("id, name, type", "3", "Счет оплачен", "paid"));
	СтатусыСделок.Добавить(Новый Структура("id, name, type", "4", "Заказ отменен", "canceled"));
	
	ЗаписатьJSON(ЗаписьJSON, СтатусыСделок);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Процедура ОтправитьСтатусы(ПараметрыОбмена)
	ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );  
                         
	
	JSON = ЗаписатьСтатусыВФайл(ПараметрыОбмена);
	
	АдресРесурса =  "/api/v1"   +
				    "/project/" + ПараметрыОбмена.Получить("service") + 
					"?project=" + ПараметрыОбмена.Получить("project") + 
					"&key=" 	+ ПараметрыОбмена.Получить("key");
	
	Соединение = Новый HTTPСоединение(ПараметрыОбмена.Получить("api"),443,,,,,ssl);

	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ПараметрыОбмена.Получить("headers"));
	//HTTPЗапрос.Заголовки.Вставить("use-http-code", 1);
	HTTPЗапрос.УстановитьТелоИзСтроки(JSON, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		ContentType = HTTPОтвет.Заголовки.Получить("Content-Type");
		Если Найти(ContentType, ПараметрыОбмена.Получить("accept")) > 0 Тогда
			ПрочитатьОтвет(ПараметрыОбмена, HTTPОтвет.ПолучитьТелоКакСтроку());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьДанныеВФайл(ПараметрыОбмена)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаИзмененияСтатуса", НачалоДня(ТекущаяДата()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Roistat_Сделки.Сделка КАК Сделка
	|ИЗ
	|	РегистрСведений.Roistat_Сделки КАК Roistat_Сделки
	|ГДЕ
	|	Roistat_Сделки.ДатаИзмененияСтатуса >= &ДатаИзмененияСтатуса
	|	И НЕ Roistat_Сделки.Сделка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Roistat_Сделки.Сделка
	|АВТОУПОРЯДОЧИВАНИЕ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Структура_orders = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураСделки = Новый Структура;
		СтруктураСделки.Вставить("id", 			Строка(Выборка.Сделка.Roistat_НомерСделки));
		СтруктураСделки.Вставить("name", 		СокрЛП(Выборка.Сделка));
		СтруктураСделки.Вставить("date_create", Формат(УниверсальноеВремя(Выборка.Сделка.ДатаНачала) - Дата(1970,1,1,0,0,0), "ЧГ=0"));
		//@skip-check query-in-loop
		СтруктураСделки.Вставить("status", 		ПолучитьСтатус(Выборка.Сделка));
		//@skip-check query-in-loop
		СтруктураСделки.Вставить("price", 		ПолучитьСумму(Выборка.Сделка));
		//@skip-check query-in-loop
		СтруктураСделки.Вставить("cost", 		ПолучитьСебестоимость(Выборка.Сделка));
		СтруктураСделки.Вставить("roistat", 	СокрЛП(Выборка.Сделка.Roistat_НомерВизита));
		СтруктураСделки.Вставить("client_id", 	Строка(Выборка.Сделка.Партнер.УникальныйИдентификатор()));
		
		ДополнительныеПоля = Новый Соответствие;
		ДополнительныеПоля.Вставить("Менеджер", 	Строка(Выборка.Сделка.Ответственный));
				
		СтруктураСделки.Вставить("fields", 		ДополнительныеПоля);
						
		Структура_orders.Добавить(СтруктураСделки);
		
	КонецЦикла;
	
	ЗаписатьJSON(ЗаписьJSON, Структура_orders); 
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПолучитьМассивСобытийДляУдаления()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаИзмененияСтатуса", НачалоДня(ТекущаяДата()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Roistat_Сделки.Сделка КАК Сделка
	|ИЗ
	|	РегистрСведений.Roistat_Сделки КАК Roistat_Сделки
	|ГДЕ
	|	Roistat_Сделки.ДатаИзмененияСтатуса >= &ДатаИзмененияСтатуса
	|	И Roistat_Сделки.Сделка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Roistat_Сделки.Сделка.Roistat_НомерСделки
	|АВТОУПОРЯДОЧИВАНИЕ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Сделка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьДанные(ПараметрыОбмена)
	ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );   
                         
	
	Результат = ЗаписатьДанныеВФайл(ПараметрыОбмена);
	
	АдресРесурса = 	"/api/v1"   +
					"/project/" + ПараметрыОбмена.Получить("service") +
					"?project=" + ПараметрыОбмена.Получить("project") + 
					"&key=" 	+ ПараметрыОбмена.Получить("key");
	
	Соединение = Новый HTTPСоединение(ПараметрыОбмена.Получить("api"),443,,,,,ssl);
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ПараметрыОбмена.Получить("headers"));
	HTTPЗапрос.УстановитьТелоИзСтроки(Результат, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		ContentType = HTTPОтвет.Заголовки.Получить("Content-Type");
		Если Найти(ContentType, ПараметрыОбмена.Получить("accept")) > 0 Тогда
			ПрочитатьОтвет(ПараметрыОбмена, HTTPОтвет.ПолучитьТелоКакСтроку());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ОтправитьУдаленныеЗаявки(ПараметрыОбмена)
	
	МассивСобытий = Новый Массив;
	МассивСобытий = ПолучитьМассивСобытийДляУдаления();
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );   
	Соединение = Новый HTTPСоединение(ПараметрыОбмена.Получить("api"),443,,,,,ssl);
	
	Для Каждого Событие Из МассивСобытий Цикл
		УРЛ = ПараметрыОбмена.Получить("service");
		_Адрес_ = СтрЗаменить(УРЛ, "{orderId}", СокрЛП(Событие.Roistat_НомерСделки));
		АдресРесурса = 	"/api/v1"   +
						"/project/" + _Адрес_ +
						"?project=" + ПараметрыОбмена.Получить("project") + 
						"&key=" 	+ ПараметрыОбмена.Получить("key");
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ПараметрыОбмена.Получить("headers"));
		HTTPЗапрос.УстановитьТелоИзСтроки("", "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			ContentType = HTTPОтвет.Заголовки.Получить("Content-Type");
			Если Найти(ContentType, ПараметрыОбмена.Получить("accept")) > 0 Тогда
				//@skip-check query-in-loop
				ПрочитатьОтвет(ПараметрыОбмена, HTTPОтвет.ПолучитьТелоКакСтроку());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	
КонецПроцедуры

//РЕГЛАМЕНТНОЕ ЗАДАНИЕ
Функция ЗаполнитьПараметрыОбмена()
	
	ПараметрыОбмена = Новый Соответствие;
	ПараметрыОбмена.Вставить("accept", 	"application/json");
	ПараметрыОбмена.Вставить("api",		"cloud.roistat.com");
	ПараметрыОбмена.Вставить("key",		СокрЛП(Справочники.Roistat_Настройки.НайтиПоНаименованию("key").Значение));
	ПараметрыОбмена.Вставить("project",	СокрЛП(Справочники.Roistat_Настройки.НайтиПоНаименованию("project").Значение));
	ПараметрыОбмена.Вставить("period",	Формат(ТекущаяДата()-86400*10, "ДФ=yyyy-MM-dd") + "-" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"));
	//ПараметрыОбмена.Вставить("period",	Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "-" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"));
	//ПараметрыОбмена.Вставить("input", 	ПолучитьИмяВременногоФайла(СтрЗаменить(ПараметрыОбмена.Получить("accept"), "application/", "")));
	//ПараметрыОбмена.Вставить("output", 	ПолучитьИмяВременногоФайла(СтрЗаменить(ПараметрыОбмена.Получить("accept"), "application/", "")));
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("accept", ПараметрыОбмена.Получить("accept"));
	Заголовки.Вставить("Content-Type", ПараметрыОбмена.Получить("accept"));
	
	
	ПараметрыОбмена.Вставить("headers",	Заголовки);
	
	Возврат ПараметрыОбмена;
	
КонецФункции

Процедура ЗагрузкаДанных() Экспорт
	
	ПараметрыОбмена = ЗаполнитьПараметрыОбмена();
	ПараметрыОбмена.Вставить("service",	"proxy-leads");
	ПолучитьДанные(ПараметрыОбмена);
	
КонецПроцедуры

Процедура ВыгрузкаДанных() Экспорт
	ПараметрыОбмена = ЗаполнитьПараметрыОбмена();
	ПараметрыОбмена.Вставить("service",	"set-statuses");
	ОтправитьСтатусы(ПараметрыОбмена);
	
	
	ПараметрыОбмена = ЗаполнитьПараметрыОбмена();
	ПараметрыОбмена.Вставить("service",	"add-orders");
	ОтправитьДанные(ПараметрыОбмена);
	
	ПараметрыОбмена = ЗаполнитьПараметрыОбмена();
	ПараметрыОбмена.Вставить("service",	"integration/order/{orderId}/delete");	
	ОтправитьУдаленныеЗаявки(ПараметрыОбмена);
	
КонецПроцедуры

//МаксименкоВВ 31.07.17
Процедура Roistat_ПриЗаписиДокумента(Источник, Отказ) Экспорт
	
	Попытка
		Если Источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
	//По идее при записи объекта ссылки может еще не быть
	Попытка
		Если Источник.ЭтоНовый() Тогда
			Возврат;
		Иначе
			_Источник = Источник.Ссылка;
		КонецЕсли;
	Исключение
		_Источник = Источник.Ссылка;
	КонецПопытки;
	
	Сделка = Неопределено;
	
	Если ТипЗнч(_Источник) = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		Сделка =_Источник;
	КонецЕсли;
		
	Если ТипЗнч(_Источник) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Если ТипЗнч(_Источник.Сделка) = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
			Сделка =_Источник.Сделка;
		КонецЕсли;
	КонецЕсли;
		
	Если ТипЗнч(_Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ТипЗнч(_Источник.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Если ТипЗнч(_Источник.ЗаказКлиента.Сделка) = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
				Сделка =_Источник.ЗаказКлиента.Сделка;
			КонецЕсли;
		КонецЕсли;
		//Если ТипЗнч(Источник.Сделка) = Тип("ДокументСсылка.РаспоряжениеНаОтгрузку") Тогда
		//	Если ТипЗнч(Источник.Сделка.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		//		Если ТипЗнч(Источник.Сделка.ЗаказПокупателя.ДокументОснование) = Тип("ДокументСсылка.CRM_Событие") Тогда
		//			Сделка =Источник.Сделка.ЗаказПокупателя.ДокументОснование;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	
	Если ТипЗнч(Сделка) = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		Если НЕ ПустаяСтрока(Сделка.Roistat_НомерСделки) Тогда
		//Если Сделка.Roistat_ПервичнаяСделка Тогда
			НаборЗаписей = РегистрыСведений.Roistat_Сделки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сделка.Установить(Сделка);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Сделка = Сделка;
			НоваяЗапись.ДатаИзмененияСтатуса = ТекущаяДата();
			
			НаборЗаписей.Записать();
		КонецЕсли;
		//Иначе
		//	НаборЗаписей = РегистрыСведений.Roistat_Сделки.СоздатьНаборЗаписей();
		//	НаборЗаписей.Отбор.Сделка.Установить(Сделка);
		//	НаборЗаписей.Записать();
		//КонецЕсли;
	КонецЕсли;


КонецПроцедуры

Процедура ПодпискаНаСобытиеПриЗаписиСебестоимости(Источник, Отказ, Замещение) Экспорт
	Если Источник.Отбор.Регистратор.Значение <> Неопределено Тогда
		Roistat_ПриЗаписиДокумента(Источник.Отбор.Регистратор.Значение, Отказ);
	КонецЕсли; 
	
КонецПроцедуры


Функция ПреобразоватьНомерТелефона(НомерТелефона) 
	
	ТолькоЦифрыНомера = "";
	Для а=1 По СтрДлина(НомерТелефона) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(НомерТелефона,а,1)) > 0 Тогда
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТелефона,а,1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТолькоЦифрыНомера;
	
КонецФункции


&НаСервере
Функция ПолучитьЗначениеПолейДляТелефона(СтрокаПолей,Вид)
    
    Структура = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(СтрокаПолей,Вид);
    Данные = УправлениеКонтактнойИнформациейСлужебный.ДесериализацияТелефона(СтрокаПолей);
//sal Зачем эти строки? Они нигде не используются.	
	//Пред = "";
	//Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(Структура.КодСтраны,Структура.КодГорода,Структура.НомерТелефона,Структура.Добавочный,Структура.Комментарий);
    
    Данные.Представление = Структура.НомерТелефона;
    ЗначениеПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Данные);
    
    Возврат ЗначениеПолей;        
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПолейДляЕмайл(СтрокаПолей,Вид)
    
    Данные = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(СтрокаПолей, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	//УправлениеКонтактнойИнформациейСлужебный.ДесериализацияПрочейКонтактнойИнформации(СтрокаПолей,СтрокаПолей,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
    
    Данные.Представление = СтрокаПолей;
    ЗначениеПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Данные);
    
    Возврат ЗначениеПолей;        
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформациюТелефонИЛИEmail(КонтактнаяИнформация,Данные,Вид)
    
    НСКонтактнойИнформации = КонтактнаяИнформация.Добавить();
    НСКонтактнойИнформации.Тип = Вид.Тип;
    НСКонтактнойИнформации.Вид = Вид;
    
    Если НСКонтактнойИнформации.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
        НСКонтактнойИнформации.Представление = СокрЛП(Данные);
        НСКонтактнойИнформации.ЗначенияПолей = "НомерТелефона="+СокрЛП(Данные);
        
        НСКонтактнойИнформации.ЗначенияПолей = ПолучитьЗначениеПолейДляТелефона(НСКонтактнойИнформации.ЗначенияПолей,Вид);
        
        НСКонтактнойИнформации.НомерТелефона = СокрЛП(Данные);
        НСКонтактнойИнформации.НомерТелефонаБезКодов = СокрЛП(Данные);        
    Иначе
        НСКонтактнойИнформации.Представление = СокрЛП(Данные);
        НСКонтактнойИнформации.ЗначенияПолей = "ЭлектроннаяПочта="+СокрЛП(Данные);
        
        НСКонтактнойИнформации.ЗначенияПолей = ПолучитьЗначениеПолейДляЕмайл(Данные,Вид);
        
        НСКонтактнойИнформации.АдресЭП = СокрЛП(Данные);    
    КонецЕсли;
    
КонецПроцедуры

