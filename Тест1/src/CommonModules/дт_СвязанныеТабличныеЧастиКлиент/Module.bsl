#Область ПрограммныйИнтерфейс


#Область ГлавнаяТабличнаяЧасть

// Присваивает новый уникальный идентификатор строки главной табличной части (реквизит  ИдентификаторСтроки)
//	и считает подытог подчиненный табличной части
//
// Параметры:
//		Форма  - Управляемая форма документа
//		Элемент - ТаблицаФормы - элемент формы, соответствующий главной табличной части
//		...
// 		ИмяПодчиненнойТабличнойЧасти  - Строка - имя подчиненной табличной части. Обязательное поле  ИдентификаторСтрокиРодитель
// 		СтруктураПоляПодытог		- Структура - описание полей для подсчета подытога
//								(ключ структуры - Имя реквизита табличной части, по которому считается подытог,
//									значение структуры - имя реквизита формы (Число), содержащий подытог
//
Процедура ПередОкончаниемРедактированияГлавнойТабличнойЧасти(Форма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, ИмяПодчиненнойТабличнойЧасти = Неопределено, СтруктураПоляПодытог = Неопределено) Экспорт
	
	Если ОтменаРедактирования Тогда
		Возврат
	КонецЕсли;
	
	ИмяГлавнойТабличнойЧасти = Элемент.Имя;
	
	ТекущиеДанные = Форма.Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		
		Если ИмяПодчиненнойТабличнойЧасти <> Неопределено Тогда
			ОбновитьОтборСтрокПодчиненнойТабличнойЧасти(Форма, Элемент, ИмяПодчиненнойТабличнойЧасти, СтруктураПоляПодытог);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры 

// <Описание процедуры>
//
// Параметры:
//	Элемент - ТаблицаФормы, Строка - элемент формы или имя главной табличной части
//	...
//  ИмяПодчиненнойТабличнойЧасти  - Строка - Перечень табличных частей в порядке подчиненности
//
Процедура ПередУдалениемСтрокиГлавнойТабличнойЧасти(Форма, Элемент, ИмяПодчиненнойТабличнойЧасти, Отказ, ТекущаяСтрока = Неопределено) Экспорт

	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		ИмяГлавнойТабличнойЧасти = Элемент;
	Иначе
		ИмяГлавнойТабличнойЧасти = Элемент.Имя;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Форма.Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные;
	Иначе
		ТекущиеДанные = ТекущаяСтрока;
	КонецЕсли;
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(ИмяПодчиненнойТабличнойЧасти) Тогда
		Возврат
	КонецЕсли;
	
	ПодчиненныеТабличныеЧасти = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПодчиненнойТабличнойЧасти);
	ИмяПодчиненнойТабличнойЧасти = ПодчиненныеТабличныеЧасти[0];
	
	
	// Сформируем список табл. частей следующего порядка
	ПодчиненныеТабличныеЧастиОстаток = "";
	Для Индекс = 1 По ПодчиненныеТабличныеЧасти.Количество() - 1 Цикл
	
		ПодчиненныеТабличныеЧастиОстаток = ПодчиненныеТабличныеЧастиОстаток 
			+ ?(ПустаяСтрока(ПодчиненныеТабличныеЧастиОстаток), "", ",") +  ПодчиненныеТабличныеЧасти[Индекс];	
	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		
		
		УдаляемыеСтроки = Объект[ИмяПодчиненнойТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодитель", ТекущиеДанные.ИдентификаторСтроки));
		
		Для каждого СтрокаТаблицы Из УдаляемыеСтроки Цикл
			
			// Сначала очистим строки в подчиненных табл. частях следующего порядка
			Если Не ПустаяСтрока(ПодчиненныеТабличныеЧастиОстаток) Тогда
				ПередУдалениемСтрокиГлавнойТабличнойЧасти(Форма, ИмяПодчиненнойТабличнойЧасти, ПодчиненныеТабличныеЧастиОстаток, Отказ, СтрокаТаблицы);
			КонецЕсли;
		
			Объект[ИмяПодчиненнойТабличнойЧасти].Удалить(СтрокаТаблицы);
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПередУдалениемСтрокиГлавнойТабличнойЧасти()


// Пересчитываем (перераспределяет) суммы подчиненных табл. частей по сумме строки главной ТЧ
Процедура ПриИзмененииСуммыГлавнойТабличнойЧасти(Форма, Элемент, ПодчиненныеТабличныеЧастиСтрока, ИмяРеквизитаСумма, ТекущаяСтрока = Неопределено) Экспорт
	
	
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		ИмяГлавнойТабличнойЧасти = Элемент;
	Иначе
		ИмяГлавнойТабличнойЧасти = Элемент.Имя;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Форма.Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные;
	Иначе
		ТекущиеДанные = ТекущаяСтрока;
	КонецЕсли;

	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(ПодчиненныеТабличныеЧастиСтрока) Тогда
		Возврат
	КонецЕсли;
	
	ПодчиненныеТабличныеЧасти = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПодчиненныеТабличныеЧастиСтрока);
	ИмяПодчиненнойТабличнойЧасти = ПодчиненныеТабличныеЧасти[0];
	
	
	// Сформируем список табл. частей следующего порядка
	ПодчиненныеТабличныеЧастиОстаток = "";
	Для Индекс = 1 По ПодчиненныеТабличныеЧасти.Количество() - 1 Цикл
	
		ПодчиненныеТабличныеЧастиОстаток = ПодчиненныеТабличныеЧастиОстаток 
			+ ?(ПустаяСтрока(ПодчиненныеТабличныеЧастиОстаток), "", ",") +  ПодчиненныеТабличныеЧасти[Индекс];	
	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		
		СуммаНовая = ТекущиеДанные[ИмяРеквизитаСумма];
		
		ПодчиненныеСтроки = Объект[ИмяПодчиненнойТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодитель", ТекущиеДанные.ИдентификаторСтроки));
		
		СуммаСтарая = 0;
		Для каждого СтрокиТаблицы Из ПодчиненныеСтроки Цикл
			
			СуммаСтарая = СуммаСтарая + СтрокиТаблицы[ИмяРеквизитаСумма];
		
		КонецЦикла;
		
		Если СуммаНовая - СуммаСтарая = 0 Тогда
			// Ничего не изменилось
			Возврат;
		КонецЕсли;
		
		ПодчиненныеСтроки = дт_ОбщегоНазначенияКлиентСервер.РаспределитьПропорционально(СуммаНовая, ПодчиненныеСтроки, Ложь, ИмяРеквизитаСумма, ИмяРеквизитаСумма);
		
		// пересчет сумм в подчиненных
		Если Не ПустаяСтрока(ПодчиненныеТабличныеЧастиОстаток) Тогда
			Для каждого СтрокиТаблицы Из ПодчиненныеСтроки Цикл
				
				ПриИзмененииСуммыГлавнойТабличнойЧасти(Форма, ИмяПодчиненнойТабличнойЧасти, ПодчиненныеТабличныеЧастиОстаток, ИмяРеквизитаСумма ,СтрокиТаблицы);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередНачаломДобавленияСтрокиГлавнойТабличнойЧасти(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр, ИмяПодчиненнойТабличнойЧасти = Неопределено, СтруктураПоляПодытог = Неопределено) Экспорт
	
	ИмяГлавнойТабличнойЧасти = Элемент.Имя;
	
	ТекДанные = Форма.Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
			
		ТекДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		
		Если ИмяПодчиненнойТабличнойЧасти <> Неопределено Тогда
			ОбновитьОтборСтрокПодчиненнойТабличнойЧасти(Форма, Элемент, ИмяПодчиненнойТабличнойЧасти, СтруктураПоляПодытог);
		КонецЕсли;
			
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПриНачалеРедактированияCтрокиГлавнойТабличнойЧасти(Форма, Элемент, НоваяСтрока, Копирование, ИмяПодчиненнойТабличнойЧасти = Неопределено, СтруктураПоляПодытог = Неопределено) Экспорт

	ИмяГлавнойТабличнойЧасти = Элемент.Имя;
	
	ТекущиеДанные = Форма.Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные;
	Если НоваяСтрока И ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		
		Если ИмяПодчиненнойТабличнойЧасти <> Неопределено Тогда
			ОбновитьОтборСтрокПодчиненнойТабличнойЧасти(Форма, Элемент, ИмяПодчиненнойТабличнойЧасти, СтруктураПоляПодытог);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


	
#КонецОбласти 


#Область ПодчиненнаяТабличнаяЧасть
//	Обновляет отбор строк в подчиненной табличной части по тидентификатору текущей строки главной табличной части
//
// Параметры:
//  	Форма  - Управляемая форма документа
//		Элемент - ТаблицаФормы - элемент формы, соответствующий главной табличной части
//		...
// 		см. описание процедуры ПередОкончаниемРедактированияГлавнойТабличнойЧасти
//
Процедура ОбновитьОтборСтрокПодчиненнойТабличнойЧасти(Форма, Элемент, ИмяПодчиненнойТабличнойЧасти, ПоляПодытог = Неопределено) Экспорт

	ИмяГлавнойТабличнойЧасти = Элемент.Имя;
	Объект = Форма.Объект;
	
	ТекущиеДанные = Форма.Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ЗначениеОтбора = Неопределено;
	Иначе 
		ЗначениеОтбора = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	Форма.Элементы[ИмяПодчиненнойТабличнойЧасти].ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиРодитель", ЗначениеОтбора);
	
	
	// Обновить подытоги
	Если ПоляПодытог <> Неопределено Тогда
		
		СтрокиПодытог = Объект[ИмяПодчиненнойТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодитель", ЗначениеОтбора));
		
		Для каждого ПолеПодытог Из ПоляПодытог Цикл
			
			Форма[ПолеПодытог.Значение] = 0;
			
		КонецЦикла; 
		
		Для каждого СтрокаТаблицы Из СтрокиПодытог Цикл
			
			Для каждого ПолеПодытог Из ПоляПодытог Цикл
				
				Форма[ПолеПодытог.Значение] = Форма[ПолеПодытог.Значение] + СтрокаТаблицы[ПолеПодытог.Ключ];
				
			КонецЦикла; 
			
		КонецЦикла; 
	КонецЕсли;
	

КонецПроцедуры // ОбновитьОтборСтрокСтатьиКалькуляции()

//	Заполняет поле ИдентификаторСтрокиРодитель подчичиненной табличной части
//
// Параметры:
//  	Форма  - Управляемая форма документа
//		Элемент - ТаблицаФормы - элемент формы, соответствующий подчиненной табличной части
//		...
// 		см. описание процедуры ПередОкончаниемРедактированияГлавнойТабличнойЧасти
//
Процедура ПередОкончаниемРедактированияПодчиненнойТабличнойЧасти(Форма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, ИмяГлавнойТабличнойЧасти) Экспорт
	
	ИмяПодчиненнойТабличнойЧасти = Элемент.Имя;
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		
		ТекСтрока = Форма.Элементы[ИмяПодчиненнойТабличнойЧасти].ТекущиеДанные;
		
		Если ТекСтрока = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СтрокаГлавнойТабличнойЧасти = Форма.Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные;
		
		Если СтрокаГлавнойТабличнойЧасти = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Элемент.ОтборСтрок = Неопределено Тогда
			Если СтрокаГлавнойТабличнойЧасти = Неопределено Тогда
				
				Отказ = Истина;
				Возврат;
				
			Иначе 	
				ТекСтрока.ИдентификаторСтрокиРодитель = СтрокаГлавнойТабличнойЧасти.ИдентификаторСтроки;
			КонецЕсли;
		Иначе
			ТекСтрока.ИдентификаторСтрокиРодитель = Элемент.ОтборСтрок.ИдентификаторСтрокиРодитель;
		КонецЕсли;
		
		//ТекСтрока.ИдентификаторСтроки = ?(Элемент.ОтборСтрок = Неопределено, 
		//		?(Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные = Неопределено,
		//			Неопределено,
		//			Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные.ИдентификаторСтроки), 
		//		Элемент.ОтборСтрок.ИдентификаторСтроки);
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ИдентификаторСтрокиРодитель) Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаГлавнойТабличнойЧасти.ИдентификаторСтроки) Тогда // старая версия документа - id не присваивался
				СтрокаГлавнойТабличнойЧасти.ИдентификаторСтроки =  Новый УникальныйИдентификатор();					
			КонецЕсли;
			
			ТекСтрока.ИдентификаторСтрокиРодитель = СтрокаГлавнойТабличнойЧасти.ИдентификаторСтроки;
			ОбновитьОтборСтрокПодчиненнойТабличнойЧасти(Форма, Форма.Элементы[ИмяГлавнойТабличнойЧасти], ИмяПодчиненнойТабличнойЧасти);
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ИдентификаторСтрокиРодитель) Тогда
				
				Отказ = Истина;
				
			КонецЕсли;	
		КонецЕсли;
						
			
		
	КонецЕсли;
КонецПроцедуры


//	Обновляет подытоги у подчиненной и сумму текущей строки у главной табличной части
//
// Параметры:
//  	Форма  - Управляемая форма документа
//		Элемент - ТаблицаФормы - элемент формы, соответствующий подчиненной табличной части
//		...
// 		см. описание процедуры ПередОкончаниемРедактированияГлавнойТабличнойЧасти
//		ИмяГлавнойТабличнойЧасти - Строка, Неопределено. Если не указано, то обновления суммы строки главной табл. части не происходит
//
Процедура ПриИзмененииСуммыПодчиненнойТабличнойЧасти(Форма, ЭлементФормы, ПоляПодытог, ИмяГлавнойТабличнойЧасти = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
		Элемент = ЭлементФормы.Родитель;
	Иначе//Если ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
		Элемент = ЭлементФормы;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) <> Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПодчиненнойТабличнойЧасти = Элемент.Имя;
	// Обновить подытоги
	
	Если Элемент.ОтборСтрок = Неопределено Тогда
		СтрокиПодытог = Объект[ИмяПодчиненнойТабличнойЧасти];
	Иначе
		СтрокиПодытог = Объект[ИмяПодчиненнойТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодитель", Элемент.ОтборСтрок.ИдентификаторСтрокиРодитель));
	КонецЕсли;
	
	
	
	
	Для каждого ПолеПодытог Из ПоляПодытог Цикл
		
		Форма[ПолеПодытог.Значение] = 0;
		
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из СтрокиПодытог Цикл
		
		Для каждого ПолеПодытог Из ПоляПодытог Цикл
			
			Форма[ПолеПодытог.Значение] = Форма[ПолеПодытог.Значение] + СтрокаТаблицы[ПолеПодытог.Ключ];
			
		КонецЦикла; 
		
	КонецЦикла; 
	
		
	Если ИмяГлавнойТабличнойЧасти <> Неопределено Тогда
		ТекущаяСтрокаГлавнойТабличнойЧасти = Форма.Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные;
		Если Не ТекущаяСтрокаГлавнойТабличнойЧасти = Неопределено Тогда
			Для каждого ПолеПодытог Из ПоляПодытог Цикл
				ИмяПоля = ПолеПодытог.Ключ;
				ЗначениеПоля = ПолеПодытог.Значение;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрокаГлавнойТабличнойЧасти, ИмяПоля) Тогда 
					ТекущаяСтрокаГлавнойТабличнойЧасти[ИмяПоля] = Форма[ЗначениеПоля];
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры


Процедура ПередНачаломДобавленияПодчиненнойТабличнойЧасти(Форма, Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр, ИмяГлавнойТабличнойЧасти) Экспорт
	
	СтрокаГлавнойТабличнойЧасти = Форма.Элементы[ИмяГлавнойТабличнойЧасти].ТекущиеДанные;
		
	Если СтрокаГлавнойТабличнойЧасти = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Для добавления связанной строки необходимо сначала выделить строку в главном списке",
			,
			ИмяГлавнойТабличнойЧасти,
			"Объект",
			Отказ
		);

		Возврат;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти 

	
#КонецОбласти 




