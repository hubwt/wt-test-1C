#Область ОбщиеПроцедурыИФункции

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;


			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет подготовку наборов записей документа к проведению документа.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
// Вызывается из модуля документа при проведении.
//
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект, ВыборочноОчищатьРегистры = Истина) Экспорт
	
	// С целью оптимизации производительности запоминаем значение свойства в переменной.
	ПропуститьПроверкуЗапретаИзменения = Объект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");
	
	Для каждого НаборЗаписей Из Объект.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
	КонецЦикла;

	Если Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	// Регистры, требующие принудительной очистки:
	МассивИменРегистровПринудительнойОчистки = Новый Массив;
	МассивДвиженийДляПринудительнойОчистки = Новый Массив;
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
		Если МассивИменРегистровПринудительнойОчистки.Найти(ИмяРегистра) <> Неопределено
			ИЛИ НЕ ВыборочноОчищатьРегистры Тогда
			МассивДвиженийДляПринудительнойОчистки.Добавить(Объект.Движения[ИмяРегистра]);
		КонецЕсли; 
	КонецЦикла;
		
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Истина);
		КонецЦикла;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), Объект);
				
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
				
	ИначеЕсли НЕ Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед Тогда
		
		Для каждого НаборЗаписей Из МассивДвиженийДляПринудительнойОчистки Цикл
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед Тогда
		Объект.Движения.Записать();
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к отмене проведения документа.
// 1. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 2. Снимает активность у наборов записей документов с установленным флагом ручной корректировки
// Вызывается из модуля документа при отмене проведения.
//
Процедура ПодготовитьНаборыЗаписейКОтменеПроведения(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	ПропуститьПроверкуЗапретаИзменения = Объект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		НаборЗаписей = Объект.Движения[ИмяРегистра];
		НаборЗаписей.Записывать = Истина;
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если проведение документа выполняется в режиме группового перепроведения.
//
// Параметры:
//	Объект - ДокументОбъект - документ, для которого необходимо вернуть режим.
//
// Возвращаемое значение:
//	Булево
Функция ГрупповоеПерепроведение(Объект) Экспорт

	Результат = Ложь;

	Если Объект.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") Тогда
		Если ТипЗнч(Объект.ДополнительныеСвойства.ГрупповоеПерепроведение) = Тип("Булево") Тогда
			Результат = Объект.ДополнительныеСвойства.ГрупповоеПерепроведение;
		Иначе
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииБЗК

// Очищает записи наборов из коллекции Движения и проставляет флаг Записывать наборам, по которым 
// документ уже имеет движения
// 
//	Параметры:
//		Объект - документ
//		ЭтоНовый - признак того, что пишется новый документ
//		ДвиженияМетаданные - свойство метаданных Движения
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь, ДвиженияМетаданные = НеОпределено) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ДатаДокументаСдвинутаВперед") Тогда
		Объект.ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Истина);
	КонецЕсли;	
	ПодготовитьНаборыЗаписейКПроведению(Объект, Ложь);
		
КонецПроцедуры

#КонецОбласти


#Область ОбработкаОшибокПриПроведении

// Возвращает таблицу значений для хранения сообщений, выдаваемых в процессе проведения.
//
Функция НовыеСообщенияПользователю() Экспорт

	ОписаниеТиповЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(1);

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("КлючДанных");  // Ссылка на объект.
	Результат.Колонки.Добавить("Дата");        // Дата, к которой относятся данные объекта. Используется для сортировки списка сообщений.
	Результат.Колонки.Добавить("Сообщение");   // СообщениеПользователю
	Результат.Колонки.Добавить("ТипСообщения", ОписаниеТиповЧисло); // 0 - ошибка, 1 - информация.
	
	Возврат Результат;

КонецФункции

// Возвращает пустую структуру с параметрами формирования отчета об ошибках.
//
// Параметры:
//	ВариантОтчета - Строка - "Перепроведение", "АктуализацияРасчетовСКонтрагентами"
//	Сообщения - ТаблицаЗначений - Результат функции НовыеСообщенияПользователю()
//
// Возвращаемое значение:
//	Структура - Содержит параметры формирования отчета:
//		* ВариантОтчета - Строка - "Перепроведение", "АктуализацияРасчетовСКонтрагентами".
//		* Сообщения - ТаблицаЗначений - Результат функции НовыеСообщенияПользователю().
//		* ДатаНачала - Дата - Начало периода расчета.
//		* ДатаОкончания - Дата - Окончание периода расчета.
//		* ПроведеноДокументов - Число - Количество перепроведенных документов.
//		* НеУдалосьПровести - Число - Количество документов с ошибками.
//		* АктуализированоДоговоров - Число - Количество договоров, расчеты по которым актуализированы.
//		* НеУдалосьАктуализировать - Число - Количество договоров с ошибками в расчетах.
// 
Функция НовыеПараметрыОтчетаССообщениямиПользователю(ВариантОтчета, Сообщения) Экспорт

	Если ВариантОтчета <> "Перепроведение"
		И ВариантОтчета <> "АктуализацияРасчетовСКонтрагентами" Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не поддерживаемый вариант отчета %1'"), ВариантОтчета);
	КонецЕсли;

	Результат = Новый Структура();
	
	Результат.Вставить("ВариантОтчета", 	ВариантОтчета);
	Результат.Вставить("Сообщения", 		Сообщения);
	Результат.Вставить("ДополнительноеОписание", "");
	Результат.Вставить("ДатаНачала",		'0001-01-01');
	Результат.Вставить("ДатаОкончания",		'0001-01-01');
	Результат.Вставить("ПроведеноДокументов",      0);
	Результат.Вставить("НеУдалосьПровести",        0);
	Результат.Вставить("АктуализированоДоговоров", 0);
	Результат.Вставить("НеУдалосьАктуализировать", 0);
	
	Возврат Результат;

КонецФункции

// Формирует табличный документ с информацией о сообщениях при проведении.
//
// Параметры:
//	ПараметрыОтчета - Структура - содержит параметры вывода сообщений, см.НовыеПараметрыОтчетаССообщениямиПользователю() 
//
// Возвращаемое значение:
//	Табличный документ - отчет об ошибках проведения.
//
Функция ВывестиСообщенияПользователю(ПараметрыОтчета) Экспорт

	// Выводим в отчет в иерархическом виде:
	//	- организация
	//		- группа сообщений (ошибки, информация) - если есть несколько типов сообщений
	//			- документ
	//  			- сообщения по этому документу
	
	ПараметрыОтчета.Сообщения.Сортировать("Организация, ТипСообщения, Дата, КлючДанных", Новый СравнениеЗначений());
	
	КоличествоСообщений 		     = ПараметрыОтчета.Сообщения.Количество();
	ЕстьСообщенияРазныхТипов 	     = Ложь;
	ЕстьРазныеОрганизации 		     = Ложь;
	ИспользуетсяОтложенноеПроведение = (ПараметрыОтчета.АктуализированоДоговоров > 0 Или ПараметрыОтчета.НеУдалосьАктуализировать > 0);

	Если КоличествоСообщений > 0 Тогда
		ПерваяОрганизация 			= ПараметрыОтчета.Сообщения[0].Организация;
		ЕстьСообщенияРазныхТипов 	= ПараметрыОтчета.Сообщения[КоличествоСообщений - 1].ТипСообщения <> 0;
		ЕстьРазныеОрганизации 		= ПараметрыОтчета.Сообщения[КоличествоСообщений - 1].Организация <> ПерваяОрганизация;
	КонецЕсли;

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ОписаниеОшибокПроведения");
	
	Если ПараметрыОтчета.ВариантОтчета = "АктуализацияРасчетовСКонтрагентами" Тогда
		ИмяОбластиШапки = "ШапкаВосстановлениеРасчетов";
	ИначеЕсли ИспользуетсяОтложенноеПроведение Тогда
		ИмяОбластиШапки = "ШапкаОтложенноеПерепроведение";
	Иначе
		ИмяОбластиШапки = "ШапкаПерепроведение";
	КонецЕсли;
	ОбластьШапка             = Макет.ПолучитьОбласть(ИмяОбластиШапки);
	ОбластьГруппаОрганизация = Макет.ПолучитьОбласть("ГруппаОрганизация");
	ОбластьГруппаОшибки 	 = Макет.ПолучитьОбласть("ГруппаОшибки");
	ОбластьГруппаИнформация  = Макет.ПолучитьОбласть("ГруппаИнформация");
	ОбластьСсылка 	         = Макет.ПолучитьОбласть("Ссылка");
	ОбластьТекст2 	         = Макет.ПолучитьОбласть("ТекстВторогоУровня");

	Если НЕ ЕстьРазныеОрганизации Тогда
		// Если организация одна, выводим ее в шапке.
		ОбластьШапка.Параметры.Организация = ПерваяОрганизация;
	КонецЕсли;
	
	// Период отчета.
	Если ЗначениеЗаполнено(ПараметрыОтчета.ДатаНачала) И ЗначениеЗаполнено(ПараметрыОтчета.ДатаОкончания) Тогда
		ОбластьШапка.Параметры.Период = ПредставлениеПериода(ПараметрыОтчета.ДатаНачала, ПараметрыОтчета.ДатаОкончания);
	
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОтчета.ДатаНачала) Тогда
		ОбластьШапка.Параметры.Период = СтрШаблон(
			НСтр("ru = '%1 - ...'"), 
			Формат(ПараметрыОтчета.ДатаНачала, 
					?(ПараметрыОтчета.ДатаНачала = НачалоДня(ПараметрыОтчета.ДатаНачала), "ДЛФ=Д", "ДЛФ=ДВ")));

	ИначеЕсли ЗначениеЗаполнено(ПараметрыОтчета.ДатаОкончания) Тогда
		ОбластьШапка.Параметры.Период = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '... - %1'"), 
			Формат(ПараметрыОтчета.ДатаОкончания, 
					?(ПараметрыОтчета.ДатаОкончания = НачалоДня(ПараметрыОтчета.ДатаОкончания) 
						ИЛИ ПараметрыОтчета.ДатаОкончания = КонецДня(ПараметрыОтчета.ДатаОкончания), 
					"ДЛФ=Д", 
					"ДЛФ=ДВ")));
	КонецЕсли;
	
	ОбластьШапка.Параметры.ДополнительноеОписание = ПараметрыОтчета.ДополнительноеОписание;

	Если ПараметрыОтчета.ВариантОтчета = "АктуализацияРасчетовСКонтрагентами"
	 Или ИспользуетсяОтложенноеПроведение Тогда
		ОбластьШапка.Параметры.АктуализированоДоговоров = ПараметрыОтчета.АктуализированоДоговоров;
		ОбластьШапка.Параметры.НеУдалосьАктуализировать = ПараметрыОтчета.НеУдалосьАктуализировать;
	КонецЕсли;
	Если ПараметрыОтчета.ВариантОтчета = "Перепроведение" Тогда
		ОбластьШапка.Параметры.ПроведеноДокументов 	    = ПараметрыОтчета.ПроведеноДокументов;
		ОбластьШапка.Параметры.НеУдалосьПровести 	    = ПараметрыОтчета.НеУдалосьПровести;
	КонецЕсли;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_об_ошибках_проведения_документов";
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	ТекущийКлючДанных 	= Неопределено;
	ТекущаяОрганизация 	= Неопределено;

	Сч = 0;
	
	Пока Сч < КоличествоСообщений Цикл
	
		СтрокаТаблицы = ПараметрыОтчета.Сообщения[Сч];
		
		Если ЕстьРазныеОрганизации Тогда
			Если СтрокаТаблицы.Организация <> ТекущаяОрганизация Тогда
				Если Сч > 0 Тогда
					// Закроем группу по предыдущей организации.
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;
				// Начинаем группу по новой организации.
				ОбластьГруппаОрганизация.Параметры.Организация = СтрокаТаблицы.Организация;
				ТабДокумент.Вывести(ОбластьГруппаОрганизация);
				ТабДокумент.НачатьГруппуСтрок();
			КонецЕсли;
		КонецЕсли;
		
		ТекущаяОрганизация	= СтрокаТаблицы.Организация;
		ТекущийТипСообщения = СтрокаТаблицы.ТипСообщения;
		
		Если ЕстьСообщенияРазныхТипов Тогда
			Если ТекущийТипСообщения = 0 Тогда
				// Ошибка
				ТабДокумент.Вывести(ОбластьГруппаОшибки);
			Иначе
				// Информация
				ТабДокумент.Вывести(ОбластьГруппаИнформация);
			КонецЕсли;
		
			ТабДокумент.НачатьГруппуСтрок();
		КонецЕсли;
		
		НомерПП = 0;
		
		Пока Сч < КоличествоСообщений
			И ТекущаяОрганизация 	= ПараметрыОтчета.Сообщения[Сч].Организация
			И ТекущийТипСообщения 	= ПараметрыОтчета.Сообщения[Сч].ТипСообщения Цикл
		
			НомерПП = НомерПП + 1;
			
			СтрокаТаблицы = ПараметрыОтчета.Сообщения[Сч];
			
			ТекущийКлючДанных = СтрокаТаблицы.КлючДанных;
		
		    // Выводим документ и все его сообщения.
		    ОбластьСсылка.Параметры.НомерПП			= НомерПП;
	    	ОбластьСсылка.Параметры.Ссылка 			= СтрокаТаблицы.КлючДанных;
		    ОбластьСсылка.Параметры.Представление 	= Строка(СтрокаТаблицы.КлючДанных);
		    ТабДокумент.Вывести(ОбластьСсылка);
		    ТабДокумент.НачатьГруппуСтрок();
			
		    ВложенныйНомерПП = 0;
		    
		    // Из-за того сообщения могут приходит из нескольких расчетов, они могут повторяться для одного и того же объекта (КлючДанных).
		    // Такие сообщения выводим только один раз.
		    ТекстСообщения = "";
		    
		    Пока Сч < КоличествоСообщений
		    	И ТекущийТипСообщения = ПараметрыОтчета.Сообщения[Сч].ТипСообщения
		    	И ТекущийКлючДанных = ПараметрыОтчета.Сообщения[Сч].КлючДанных Цикл
		    
		    	СтрокаТаблицы = ПараметрыОтчета.Сообщения[Сч];
		    	
		    	Если СтрокаТаблицы.Сообщение.Текст = ТекстСообщения Тогда
		    		// Такое сообщение уже было выведено ранее, второй раз не повторяем.
		    		Сч = Сч + 1;
		    		Продолжить;
		    	КонецЕсли;
		    	ТекстСообщения = СтрокаТаблицы.Сообщение.Текст;

		    	ВложенныйНомерПП = ВложенныйНомерПП + 1;
		    	
	    		// Если документ сообщил о нескольких ошибках, то будем выводить для них субномера.
		    	Если ВложенныйНомерПП = 1 
		    		И (Сч = КоличествоСообщений - 1  // Это последнее сообщение в таблице или следующее сообщение относится к другом типу/документу.
		    				ИЛИ ПараметрыОтчета.Сообщения[Сч + 1].КлючДанных <> ТекущийКлючДанных
		    				ИЛИ ПараметрыОтчета.Сообщения[Сч + 1].ТипСообщения <> ТекущийТипСообщения)  Тогда
		    		ОбластьТекст2.Параметры.НомерПП = "";
		    	Иначе
		    		ОбластьТекст2.Параметры.НомерПП	= Формат(НомерПП, "ЧГ=") + "." + Формат(ВложенныйНомерПП, "ЧГ=");
		    	КонецЕсли;
		    	ОбластьТекст2.Параметры.Текст 				= СтрокаТаблицы.Сообщение.Текст;
		    	ОбластьТекст2.Параметры.Расшифровка 		= СтрокаТаблицы.Сообщение;
		    	
		    	ТабДокумент.Вывести(ОбластьТекст2);
		    	
		    	Сч = Сч + 1;
		    КонецЦикла; // по сообщениям одного документа
		    
		    ТабДокумент.ЗакончитьГруппуСтрок();
		
		КонецЦикла; // по документам
		
		Если ЕстьСообщенияРазныхТипов Тогда
	    	ТабДокумент.ЗакончитьГруппуСтрок();
	    КонецЕсли;
		
	КонецЦикла; // по типам сообщений
	
	Если ЕстьРазныеОрганизации И КоличествоСообщений > 0 Тогда
		// Закроем группу по последней организации.
		ТабДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции

// Добавляет новое сообщение в общую таблицу сообщений.
//
// Параметры:
//	Сообщения - ТаблицаЗначений - см. НовыеСообщенияПользователю().
//	Организация - СправочникСсылка.Организации - Организация, для которой зарегистрировать сообщение.
//	НовоеСообщение - СообщениеПользователю - Добавляемое сообщение.
//	СсылкаНаОбъект - Произвольный - Ссылка на объект, с которым должно быть связано сообщение.
//	Дата - Дата - Дата, к которой относится сообщение пользователю. Используется для сортировки списка сообщений в хронологическом порядке.
//	ЭтоОшибка - Булево - Истина, если сообщение является сообщение об ошибке.
//
Процедура ДобавитьСообщениеПользователю(Сообщения, Организация, НовоеСообщение, СсылкаНаОбъект, Дата, ЭтоОшибка) Экспорт

	СтрокаТаблицы 					= Сообщения.Добавить();
	СтрокаТаблицы.Организация		= Организация;
	Если НЕ ЗначениеЗаполнено(НовоеСообщение.КлючДанных) Тогда
		СтрокаТаблицы.КлючДанных 	= СсылкаНаОбъект;
		НовоеСообщение.КлючДанных	= СсылкаНаОбъект;
	Иначе
		СтрокаТаблицы.КлючДанных 	= НовоеСообщение.КлючДанных;
	КонецЕсли;
	СтрокаТаблицы.Дата				= Дата;
	СтрокаТаблицы.Сообщение 		= НовоеСообщение;	
	СтрокаТаблицы.ТипСообщения 		= ?(ЭтоОшибка, 0, 1);

КонецПроцедуры

// Добавляет все сгенерированные сообщения пользователю при проведении объекта в общую таблицу сообщений.
//
// Параметры:
//	Сообщения - ТаблицаЗначений - см. НовыеСообщенияПользователю()
//	Организация - СправочникСсылка.Организации - Организация, к которой относится документ.
//	ТекстПричины - Строка - Строковое описание причины возникновения сообщения.
//	СсылкаНаОбъект - Произвольный - Ссылка на объект, с которым связано сообщение.
//	ЭтоОшибка - Булево - Истина, если сообщение является сообщением об ошибке.
//	АвтоматическиФормироватьТекстСообщения - Булево - Если Истина, то в текст сообщения будет включена ссылка на объект.
//
Процедура ЗапомнитьСообщенияПользователю(Сообщения, Организация, ТекстПричины, СсылкаНаОбъект, Дата, ЭтоОшибка = Истина, АвтоматическиФормироватьТекстСообщения = Истина) Экспорт

	СообщенияПользователю = ПолучитьСообщенияПользователюБезСлужебных(Истина);
	КоличествоСообщений = СообщенияПользователю.Количество();
	
	Если КоличествоСообщений > 0 Тогда
		Для ИндексСообщения = 0 По КоличествоСообщений - 1 Цикл
			ДобавитьСообщениеПользователю(Сообщения, Организация, СообщенияПользователю[ИндексСообщения], СсылкаНаОбъект, Дата, ЭтоОшибка);
		КонецЦикла;
	ИначеЕсли ЭтоОшибка Тогда
		// Объект сам о себе ничего не сказал, поэтому выводим общий текст сообщения о том,
		// что возникла ошибка.
		Если АвтоматическиФормироватьТекстСообщения Тогда
			Если ЗначениеЗаполнено(ТекстПричины) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Обработка %1 не выполнена по причине: 
					|%2'"),
					Строка(СсылкаНаОбъект), ТекстПричины);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При обработке %1 возникла ошибка!'"),
					Строка(СсылкаНаОбъект));
			КонецЕсли;
		Иначе
			ТекстСообщения = ТекстПричины;
		КонецЕсли;
	
		НовоеСообщение 				= Новый СообщениеПользователю();
		НовоеСообщение.КлючДанных 	= СсылкаНаОбъект;
		НовоеСообщение.Текст 		= ТекстСообщения;
		
		ДобавитьСообщениеПользователю(Сообщения, Организация, НовоеСообщение, СсылкаНаОбъект, Дата, ЭтоОшибка);
	
	КонецЕсли;

КонецПроцедуры

// Подготавливает сообщения пользователю для передачи в форму отображения ошибок проведения.
//
// Параметры:
//	Сообщения - ТаблицаЗначений - результат НовыеСообщенияПользователю()
//	ТабДокумент - ТабличныйДокумент - результат ВывестиСообщенияПользователю()
//	АдресХранилища - УникальныйИдентификатор, Строка - см. второй параметр платформенной функции ПоместитьВоВременноеХранилище()
//
// Возвращаемое значение:
//	Строка - Адрес созданного временного хранилища.
//
Функция ПоместитьСообщенияПользователюВоВременноеХранилищеДляФормыОшибок(Сообщения, ТабДокумент, АдресХранилища) Экспорт

	// Проиндексируем таблицу для поиска ней по КлючуДанных в форме ошибок.
	Сообщения.Индексы.Добавить("КлючДанных");

	Данные = Новый Структура();
	
	Данные.Вставить("ТаблицаСообщенийПользователю", Сообщения);
	Данные.Вставить("ОтчетПоОшибкам", 				ТабДокумент);

	Возврат ПоместитьВоВременноеХранилище(Данные, АдресХранилища);

КонецФункции

#КонецОбласти

// Возвращает массив сообщений пользователю, из которого исключены служебные сообщения БСП,
// используемые для отображения прогресса выполнения фонового задания.
//
// Параметры:
//	УдалятьПолученные - Булево - Если Истина, то сообщения будут удалены из очереди после получения.
//	ИдентификаторЗадания - УникальныйИдентификатор, Неопределено - Идентификатор фонового задания,
//		сообшения из которого получать. Если не указан, то возвращает сообщения из основного сеанса.
//
// Возвращаемое значение:
//	ФиксированныйМассив - Массив сообщений пользователю.
//
Функция ПолучитьСообщенияПользователюБезСлужебных(УдалятьПолученные = Ложь, ИдентификаторЗадания = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ФоновоеЗадание <> Неопределено Тогда
			СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю(УдалятьПолученные);
		КонецЕсли;
	Иначе
		СообщенияПользователю = ПолучитьСообщенияПользователю(УдалятьПолученные);
	КонецЕсли;

	Результат = Новый Массив;

	Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
		Если СтрНачинаетсяС(СообщениеПользователю.Текст, "{СтандартныеПодсистемы.ДлительныеОперации}") Тогда
			// Это служебное сообщение БСП, его исключаем.
			Продолжить;
		КонецЕсли;
		Результат.Добавить(СообщениеПользователю);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);

КонецФункции
