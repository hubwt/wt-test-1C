
Функция СписокФайловGDrive(ПараметрыПользователя, PageToken = Неопределено) Экспорт 
	
	СтруктураПараметров = GoogleAPI_ОбщегоНазначения.ПодготовкаСоединенияПоAPI(ПараметрыПользователя, "СерверGS");
	Если СтруктураПараметров = Неопределено Тогда 
		Возврат СтруктураПараметров;
	КонецЕсли;	
	
	ЗапросHTTP = Новый HTTPЗапрос(СтруктураПараметров.РесурсGDrive + ?(PageToken = Неопределено, "", "?pageToken=" + PageToken), СтруктураПараметров.Заголовки);
	
	Ответ = СтруктураПараметров.Соединение.ВызватьHTTPМетод("GET", ЗапросHTTP);
	
    Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());

	Фабрика = ПрочитатьJSON(Чтение);
	
    Чтение.Закрыть();
	
	//если ошибка, пишем в журнал регистрации
	Если Фабрика.Свойство("error") Тогда
		ТекстОшибок = СтрШаблон("Не удалось получить список файлов. Ошибка HTTP запроса %1, код ошибки %2", Фабрика.error.message, Фабрика.error.code);
		GoogleAPI_ОбщегоНазначения.ЗаписьОшибкиПриРаботеСGS(ТекстОшибок, ". Список файлов");
		Возврат Неопределено;
	ИначеЕсли Фабрика.Свойство("items") Тогда
		Возврат Фабрика.items;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Функция СохранитьТабличныйДокументНаGoogleDrive_multipart(Знач ТабДок, ПараметрыПользователя, ИмяФайла, ТипФайла, id_папки = "", TeamDrives = "false") Экспорт
	
	СтруктураПараметров = GoogleAPI_ОбщегоНазначения.ПодготовкаСоединенияПоAPI(ПараметрыПользователя, "СерверGS");
	Если СтруктураПараметров = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	ВРегТипФайла = ВРег(ТипФайла);
	Разделитель = "file_for_drive";
	ЗаголовокПоТипуФайла = СоответствиеТипуФайлаЗаголовкамGoogle()[ВРегТипФайла];
	
	СтруктураПараметров.Заголовки.Вставить("Content-Type", "multipart/related; boundary=" + Разделитель);
	
	
	//-----
	//первый запрос
	//-----
	
	//заголоки
	Заголовки = Новый Массив;
	Заголовки.Добавить("Content-Type: application/json; charset=UTF-8");
	
	//запрос метаданных
	//формируем json с параметрами имя файла, заголовок и родитель
	ТелоЗапроса = СформироватьТелоЗапросаСозданиеФайлаGSs(ИмяФайла, ЗаголовокПоТипуФайла, id_папки);
	
	ДвоичныеДанныеСообщения = GoogleAPI_ОбщегоНазначения.СоздатьСообщение_Текст(Заголовки, ТелоЗапроса);
	
	//-----
	//конец первого запроса
	//-----
	
	
	//-----
	//второй запрос
	//-----
	
	//заголоки
	Заголовки.Очистить();
	Заголовки.Добавить("Content-Type: " + ЗаголовокПоТипуФайла);
	Заголовки.Добавить("uploadType: media");

	
	//запрос метаданных
	ВременныйФайл = ПолучитьИмяВременногоФайла(ТипФайла);
	ТабДок.Записать(ВременныйФайл, ТипТабличногоДокументаПоТипуФайла()[ВРегТипФайла]);
	ДвоичныеДанныеФайла = GoogleAPI_ОбщегоНазначения.СоздатьСообщение_Файл(Заголовки, Новый ДвоичныеДанные(ВременныйФайл));
	
	//-----
	//конец второго запроса
	//-----
	
	//-----
	// Формируем основное составное сообщение.
	МассивСообщений = Новый Массив;
	МассивСообщений.Добавить(ДвоичныеДанныеСообщения);
	МассивСообщений.Добавить(ДвоичныеДанныеФайла);
	ДвоичныеДанныеТело = GoogleAPI_ОбщегоНазначения.ПолучаемДвоичныеДанныеДляПакетныхСообщенийHTTP(Разделитель, МассивСообщений);
	//-----
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрШаблон("%1?uploadType=multipart&convert=true&supportsTeamDrives=%2", СтруктураПараметров.РесурсЗагрузкиGDrive, TeamDrives), СтруктураПараметров.Заголовки); 
	
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеТело);
	
	Ответ = СтруктураПараметров.Соединение.ВызватьHTTPМетод("POST", ЗапросHTTP);
	
	Если Не Ответ.КодСостояния = 200 Тогда
		ТекстОшибок = СтрШаблон("Ошибка HTTP запроса %1, код ошибки %2", Ответ.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
		GoogleAPI_ОбщегоНазначения.ЗаписьОшибкиПриРаботеСGS(ТекстОшибок, ". Запись документа");
		Возврат "";
	КонецЕсли;
	
	HTTPСоединение	= Неопределено;
	ЗапросHTTP		= Неопределено;
	
	//удаляем временные файлы
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
		ЗаписьЖурналаРегистрации("Удалить файлы",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;	
		
	//получаем ссылку на документ для последующего открытия	
	ОтветHTTPТело = Ответ.ПолучитьТелоКакСтроку();	
	ОбъектJSON = GoogleAPI_СериализацияОбъектовGoogleJSON.СформироватьЗначениеОбъектаJSON(ОтветHTTPТело);
	
	Возврат GoogleAPI_СериализацияОбъектовGoogleJSON.ПрочитатьСвойствоВСтрокеОбъектаJSON(ОбъектJSON, "alternateLink");		
	
КонецФункции

Функция ПолучитьПапкиИзДиска(ПараметрыПользователя, TeamDrive = Ложь, ID_Родителя = "", PageToken = "") Экспорт 
	
	СтруктураПараметров = GoogleAPI_ОбщегоНазначения.ПодготовкаСоединенияПоAPI(ПараметрыПользователя, "СерверGS");
	Если СтруктураПараметров = Неопределено Тогда 
		PageToken = "";
		Возврат Новый Массив;
	КонецЕсли;	
	
	СтруктураПараметров.Заголовки.Вставить("Content-Type", "application/json");
	
	Если TeamDrive И ID_Родителя = "" Тогда 
		СтрокаПодключения = СтрШаблон("%1?useDomainAdminAccess=false&orderBy=modifiedTime%2", 
								СтруктураПараметров.РесурсTeamDrive,
								?(PageToken = "", "", СтрШаблон("&pageToken=%1", PageToken)));
	Иначе 
		
		СтрокаПодключения = СтрШаблон("%1?q= mimeType = 'application/vnd.google-apps.folder' and '%2' in parents%3&orderBy=modifiedTime%4%5", 
								СтруктураПараметров.РесурсGDrive,
								?(ПустаяСтрока(ID_Родителя), "root", ID_Родителя),
								?(ПараметрыПользователя.Свойство("ПараметрОтбора"), ПараметрыПользователя.ПараметрОтбора, ""),
								?(TeamDrive, "&includeTeamDriveItems=true&supportsTeamDrives=true", ""),
								?(PageToken = "", "", СтрШаблон("&pageToken=%1", PageToken)));
	КонецЕсли;	
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаПодключения, СтруктураПараметров.Заголовки);
	
	Ответ = СтруктураПараметров.Соединение.ВызватьHTTPМетод("GET", ЗапросHTTP);
	
	Если Не Ответ.КодСостояния = 200 Тогда
		PageToken = "";
		ТекстОшибок = СтрШаблон("Ошибка HTTP запроса %1, код ошибки %2", Ответ.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
		GoogleAPI_ОбщегоНазначения.ЗаписьОшибкиПриРаботеСGS(ТекстОшибок, ". Получить папки");
		Возврат Новый Массив;
	КонецЕсли;
	
	HTTPСоединение	= Неопределено;
	ЗапросHTTP		= Неопределено;
	
    Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());

	Фабрика = ПрочитатьJSON(Чтение);
	
    Чтение.Закрыть();
	
	//получить токен следующей страницы
	Если Фабрика.Свойство("nextPageToken") Тогда
		PageToken = Фабрика.nextPageToken;
	Иначе 
		PageToken = "";
	КонецЕсли;
	
	Если Фабрика.Свойство("files") Тогда
		Возврат Фабрика.files;
	ИначеЕсли Фабрика.Свойство("teamDrives") Тогда 
		Возврат Фабрика.teamDrives;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьФайлПоID(ПараметрыПользователя, ID_файла, TeamDrives) Экспорт 
	
	СтруктураПараметров = GoogleAPI_ОбщегоНазначения.ПодготовкаСоединенияПоAPI(ПараметрыПользователя, "СерверGS");
	Если СтруктураПараметров = Неопределено Тогда 
		PageToken = "";
		Возврат Новый Массив;
	КонецЕсли;	
	
	СтруктураПараметров.Заголовки.Вставить("Content-Type", "application/json");
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрШаблон("%1/%2?supportsTeamDrives=%3fields=id,mimeType,name,parents", 
								СтруктураПараметров.РесурсGDrive,
								ID_файла, TeamDrives), СтруктураПараметров.Заголовки);
	
	Ответ = СтруктураПараметров.Соединение.ВызватьHTTPМетод("GET", ЗапросHTTP);
	
	Если Не Ответ.КодСостояния = 200 Тогда
		ТекстОшибок = СтрШаблон("Ошибка HTTP запроса %1, код ошибки %2", Ответ.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
		GoogleAPI_ОбщегоНазначения.ЗаписьОшибкиПриРаботеСGS(ТекстОшибок, ". Получить папки");
		Возврат Новый Массив;
	КонецЕсли;
	
	HTTPСоединение	= Неопределено;
	ЗапросHTTP		= Неопределено;
	
    Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());

	Фабрика = ПрочитатьJSON(Чтение);
	
    Чтение.Закрыть();
	
	Возврат Фабрика;
	
КонецФункции	

#Область ВспомогательныеФункции

Функция СоответствиеТипуФайлаЗаголовкамGoogle()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("XLSX", "application/vnd.ms-excel");
	Соответствие.Вставить("XLS", "application/vnd.ms-excel");
	Соответствие.Вставить("XLS95", "application/vnd.ms-excel");
	Соответствие.Вставить("XLS97", "application/vnd.ms-excel");
	Соответствие.Вставить("DOCX", "application/msword");
	Соответствие.Вставить("HTML", "text/html");
	Соответствие.Вставить("HTML3", "text/html");
	Соответствие.Вставить("HTML4", "text/html");
	Соответствие.Вставить("HTML5", "text/html");
	Соответствие.Вставить("ODS", "application/vnd.oasis.opendocument.spreadsheet");
	Соответствие.Вставить("PDF", "application/pdf");
	
	Возврат	Соответствие;
	
КонецФункции	

Функция ТипТабличногоДокументаПоТипуФайла()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("XLSX", 		ТипФайлаТабличногоДокумента.XLSX);
	Соответствие.Вставить("XLS", 		ТипФайлаТабличногоДокумента.XLS);
	Соответствие.Вставить("XLS95", 		ТипФайлаТабличногоДокумента.XLS95);
	Соответствие.Вставить("XLS97",		ТипФайлаТабличногоДокумента.XLS97);
	Соответствие.Вставить("DOCX", 		ТипФайлаТабличногоДокумента.DOCX);
	Соответствие.Вставить("HTML", 		ТипФайлаТабличногоДокумента.HTML);
	Соответствие.Вставить("HTML3", 		ТипФайлаТабличногоДокумента.HTML3);
	Соответствие.Вставить("HTML4", 		ТипФайлаТабличногоДокумента.HTML4);
	Соответствие.Вставить("HTML5", 		ТипФайлаТабличногоДокумента.HTML5);
	Соответствие.Вставить("ODS", 		ТипФайлаТабличногоДокумента.ODS);
	Соответствие.Вставить("PDF", 		ТипФайлаТабличногоДокумента.PDF);
	
	Возврат	Соответствие;
	
КонецФункции	

Процедура ПолучитьРекурсивноСписокПапок(ПараметрыПользователя, ДеревоПапок, TeamDrive = Ложь, ID_Родителя = "", PageToken = "") Экспорт 
	
	МассивПапок = ПолучитьПапкиИзДиска(ПараметрыПользователя, TeamDrive, ID_Родителя, PageToken);
	Если МассивПапок = Неопределено Тогда 
		Возврат;
	КонецЕсли;		
	Для Каждого Стр Из МассивПапок Цикл 
		//заполнить дерево
		НоваясСтрока = ДеревоПапок.Строки.Добавить();
		НоваясСтрока.id 			= Стр.id;
		НоваясСтрока.Наименование 	= Стр.name;
		НоваясСтрока.id_Родителя 	= ID_Родителя;
		НоваясСтрока.Нажатие 		= 0;		
	КонецЦикла;	
	Если Не ПустаяСтрока(PageToken) Тогда 
		ПолучитьРекурсивноСписокПапок(ПараметрыПользователя, ДеревоПапок, TeamDrive, ID_Родителя, PageToken);
	КонецЕсли;	
	
КонецПроцедуры	

Функция СформироватьТелоЗапросаСозданиеФайлаGSs(ИмяФайла, mimeType, Родитель)
	
	ФабрикаGSs = ФабрикаXDTO;
		
	Если ПустаяСтрока(Родитель) Тогда 
		
		ТипDrive = ФабрикаGSs.Тип("http://www.GoogleAPI_GoogleDrive.org", "GoogleDriveFileNotParent");
		ОбъектDrive = ФабрикаGSs.Создать(ТипDrive);
		
	Иначе 	
		
		//..формирование тела запроса
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("parents_id", Родитель);
		
		ТипDrive = ФабрикаGSs.Тип("http://www.GoogleAPI_GoogleDrive.org", "GoogleDriveFile");
		ОбъектDrive = ФабрикаGSs.Создать(ТипDrive);
		GoogleAPI_СериализацияОбъектовGoogleJSON.ЗаполнитьОбъектПоУмолчаниюGSs(ОбъектDrive, ФабрикаGSs, ДопПараметры);
		
	КонецЕсли;	
		
	ОбъектDrive.title 	= ИмяФайла;
	ОбъектDrive.mimeType = mimeType;
	
	ЗаписьJSON	= Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	
	ФабрикаGSs.ЗаписатьJSON(ЗаписьJSON, ОбъектDrive);
	ТелоЗапросаJSON = ЗаписьJSON.Закрыть();
	
	ТелоЗапросаJSON = GoogleAPI_СериализацияОбъектовGoogleJSON.ПолучитьЗначениеОбъектаJSON(ТелоЗапросаJSON);
		
	Возврат ТелоЗапросаJSON;
	
КонецФункции


#КонецОбласти