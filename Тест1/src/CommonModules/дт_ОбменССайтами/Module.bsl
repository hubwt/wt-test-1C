#Область ПрограммныйИнтерфейс

Процедура ВыгрузитьРегламентноеЗадание(КодНастройки) Экспорт
	
	Если Не ЗначениеЗаполнено(КодНастройки) Тогда
		ВызватьИсключение "Не заполнен код настройки";
	КонецЕсли;
	
	ПараметрыОбмена = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	дт_НастройкиОбмена.ИмяКаталога КАК ИмяКаталога,
	|	дт_НастройкиОбмена.Наименование КАК Наименование,
	|	дт_НастройкиОбмена.Город КАК Город,
	|	дт_НастройкиОбмена.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_НастройкиОбмена
	|ИЗ
	|	Справочник.дт_НастройкиОбмена КАК дт_НастройкиОбмена
	|ГДЕ
	|	дт_НастройкиОбмена.Код = &Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НастройкиОбмена.ИмяКаталога КАК ИмяКаталога,
	|	ВТ_НастройкиОбмена.Наименование КАК Наименование,
	|	ВТ_НастройкиОбмена.Город КАК Город
	|ИЗ
	|	ВТ_НастройкиОбмена КАК ВТ_НастройкиОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	дт_НастройкиОбменаГорода.Город КАК Город
	|ИЗ
	|	Справочник.дт_НастройкиОбмена.Города КАК дт_НастройкиОбменаГорода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиОбмена КАК ВТ_НастройкиОбмена
	|		ПО дт_НастройкиОбменаГорода.Ссылка = ВТ_НастройкиОбмена.Ссылка";
	
	Запрос.УстановитьПараметр("Код", КодНастройки);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение СтрШаблон("Не найдена настройка с кодом %1", КодНастройки);
	КонецЕсли;
	
	НастройкиТаблица = РезультатЗапроса.Выгрузить();
	
	ПараметрыОбмена = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НастройкиТаблица[0]);
	
	
	ПараметрыОбмена.Вставить("Города", РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выгрузить().ВыгрузитьКолонку("Город"));
	
	Результат = Выгрузить(ПараметрыОбмена);
	
	Если Результат.Свойство("ТекстОшибки") Тогда
		ВызватьИсключение Результат.ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры



Функция Выгрузить(ПараметрыОбмена) Экспорт
	
	Результат = Новый Структура();
	
	ИмяКаталога = ПараметрыОбмена.ИмяКаталога;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Склады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Город = &Город
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрНакопления1Остатки.Товар КАК Ссылка,
	|	РегистрНакопления1Остатки.Товар.Наименование КАК Наименование,
	|	СУММА(РегистрНакопления1Остатки.КолвоОстаток) КАК КолвоОстаток
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки(
	|			,
	|			Склад В
	|				(ВЫБРАТЬ
	|					ВТ_Склады.Ссылка
	|				ИЗ
	|					ВТ_Склады)) КАК РегистрНакопления1Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрНакопления1Остатки.Товар,
	|	РегистрНакопления1Остатки.Товар.Наименование
	|
	|ИМЕЮЩИЕ
	|	СУММА(РегистрНакопления1Остатки.КолвоОстаток) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Код КАК Код,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрНоменклатура.НомерПроизводителя КАК НомерПроизводителя,
	|	СпрНоменклатура.МестоНаСкладе2 КАК МестоНаСкладе2,
	|	ЕСТЬNULL(ВТ_Номенклатура.КолвоОстаток, 0) КАК КолвоОстаток,
	|	СпрНоменклатура.Бренд КАК Бренд,
	|	СпрНоменклатура.Описание КАК Описание,
	|	СпрНоменклатура.Ссылка КАК Ссылка,
	|	СпрНоменклатура.Комплектность.(
	|		НомерПоиск КАК НомерПоиск,
	|		Артикул КАК Артикул,
	|		Наименование КАК Наименование,
	|		Количество КАК Количество,
	|		Предложение КАК Предложение
	|	) КАК Комплектность,
	|	СпрНоменклатура.Категория КАК Категория,
	|	СпрНоменклатура.КрупныйАгрегат КАК КрупныйАгрегат,
	|	СпрНоменклатура.НомераЗамен.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		НомерЗамены КАК НомерЗамены,
	|		Производитель КАК Производитель
	|	) КАК НомераЗамен,
	|	СпрНоменклатура.Видео КАК Видео,
	|	СпрНоменклатура.РекомендованаяЦена КАК РекомендованаяЦена,
	|	СпрНоменклатура.НаСайтеТракДонор КАК НаСайтеТракДонор,
	|	СпрНоменклатура.Производитель.Ссылка КАК произв1,
	|	СпрНоменклатура.Вес КАК Вес,
	|	СпрНоменклатура.Объем КАК Объем,
	|	СпрНоменклатура.ДляТэгов.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Реквизит1 КАК Реквизит1
	|	) КАК ДляТэгов,
	|	СпрНоменклатура.ЕстьТэги КАК ЕстьТэги,
	|	СпрНоменклатура.Диаметр КАК Диаметр,
	|	СпрНоменклатура.ШагРезьбы КАК ШагРезьбы,
	|	СпрНоменклатура.Прочность КАК Прочность,
	|	СпрНоменклатура.ТипКрепеж КАК ТипКрепеж,
	|	СпрНоменклатура.Длина КАК Длина,
	|	СпрНоменклатура.Производитель КАК Производитель,
	|	СпрНоменклатура.Состояние КАК Состояние,
	|	СпрНоменклатура.Длина КАК Длина1,
	|	СпрНоменклатура.ВнутреннийДиаметр КАК ВнутреннийДиаметр,
	|	СпрНоменклатура.podkategoria КАК podkategoria,
	|	СпрНоменклатура.Толщина КАК Толщина,
	|	СпрНоменклатура.Title КАК Title,
	|	СпрНоменклатура.Предложения.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Реквизит1 КАК Реквизит1
	|	) КАК Предложения,
	|	СпрНоменклатура.длин КАК длин,
	|	СпрНоменклатура.шир КАК шир,
	|	СпрНоменклатура.выс КАК выс,
	|	СпрНоменклатура.ЭтоНоваяЗапчасть КАК ЭтоНоваяЗапчасть,
	|	СпрНоменклатура.ЗапросыПоисковиков.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Название КАК Название
	|	) КАК ЗапросыПоисковиков,
	|	СпрНоменклатура.podkat2 КАК podkat2,
	|	СпрНоменклатура.ДопКат.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		кат КАК кат,
	|		подкат КАК подкат,
	|		кат2 КАК кат2
	|	) КАК ДопКат,
	|	СпрНоменклатура.Подкатегория2 КАК Подкатегория2,
	|	СпрНоменклатура.ЦенаПроверена КАК ЦенаПроверена,
	|	СпрНоменклатура.DirectNazvanie КАК DirectNazvanie,
	|	СпрНоменклатура.DirectText КАК DirectText,
	|	СпрНоменклатура.DirectSlova КАК DirectSlova,
	|	СпрНоменклатура.DirectZapolneno КАК DirectZapolneno
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО СпрНоменклатура.Ссылка = ВТ_Номенклатура.Ссылка";
	
	Запрос.УстановитьПараметр("Город", ПараметрыОбмена.Город);
	РезультатЗапроса = Запрос.Выполнить();
	таблица = РезультатЗапроса.Выгрузить();
	
	
	// ++ obrv 24.05.19
	// Получим остатки по доп. городам
	ЕстьДопГорода = ПараметрыОбмена.Города.Количество() <> 0; 	
	ВыборкаПоДопГородам = ПолучитьОстаткиПоДопГородам(ПараметрыОбмена, МВТ);	
	// -- obrv 24.05.19
	
	
	Текст = Новый ЗаписьТекста(ИмяКаталога + "\sklad.xml", КодировкаТекста.UTF8);
	док = "<?xml version='1.0' encoding='UTF-8'?><info><items>";
	Текст.ЗаписатьСтроку(док);
	
	Для Каждого номстрока из таблица Цикл
		Компл = "";
		Компл2 = "";
		компл21 = "";
		комплН = "";
		запросП = "";
		dz = 0;
		Если номстрока.DirectZapolneno = ИСТИНА Тогда
			dz = 1
		КонецЕсли;
		direct  = "<direct><ok>"+dz+"</ok><name><![CDATA["+номстрока.DirectNazvanie+"]]></name><text><![CDATA["+номстрока.DirectText+"]]></text><slova>"+номстрока.DirectSlova+"</slova></direct>";
		Для Каждого кпл из номстрока.Комплектность Цикл
			Компл = Компл + "/"+кпл.НомерПоиск;
			компл21 = компл21 + "<komplitem><nomer>"+кпл.Артикул+"</nomer><name><![CDATA["+СтрЗаменить(кпл.Наименование,"&"," ")+"]]></name><predl>"+кпл.Предложение.Код+"</predl><kolvo>"+кпл.Количество+"</kolvo></komplitem>";
		КонецЦикла;
		Для Каждого кпл из номстрока.НомераЗамен Цикл
			Компл = Компл + "/"+кпл.НомерЗамены;
			комплН = комплН + "<n><![CDATA["+кпл.НомерЗамены+"]]></n><b><![CDATA["+СтрЗаменить(кпл.Производитель.Наименование,"&"," ")+"]]></b>"
		КонецЦикла;
		Для Каждого зпр из номстрока.ЗапросыПоисковиков Цикл
			запросП = запросП + зпр.Название + "/";
		КонецЦикла;
		Компл = Компл + "/";
		насайте = 0;
		Если номстрока.НаСайтеТракДонор = ИСТИНА Тогда
			насайте = 1
		КонецЕсли;
		допкат = "<dopkats>";
		Для Каждого дк из номстрока.ДопКат Цикл
			допкат = допкат + "<dop><kat2>"+дк.кат2.Код+"</kat2><podkat>"+дк.подкат.Код+"</podkat></dop>";
		КонецЦикла;
		допкат = допкат + "</dopkats>";
		крепеж = "<krep_info>";
		Если номстрока.Категория.код = "000000148" Тогда
			крепеж=крепеж + "<type>"+номстрока.ТипКрепеж+"</type><diametr>"+номстрока.Диаметр+"</diametr><shag>"+
			номстрока.ШагРезьбы+"</shag><dlina>"+номстрока.Длина+"</dlina><prochnost>"+номстрока.Прочность+
			"</prochnost><wd>"+номстрока.ВнутреннийДиаметр+"</wd><tol>"+номстрока.Толщина+"</tol>";
		КонецЕсли;
		крепеж=крепеж + "</krep_info>";
		цена = номстрока.РекомендованаяЦена;
		кагг = 0;
		Если номстрока.КрупныйАгрегат = Истина Тогда
			кагг = 1;
		КонецЕсли;
		ет = 0;
		Если номстрока.ЕстьТэги = Истина Тогда
			ет = 1;
		КонецЕсли;
		эт_н=0;
		Если номстрока.ЭтоНоваяЗапчасть = Истина Тогда
			эт_н=1;
		КонецЕсли;
		цп=0;
		Если номстрока.ЦенаПроверена = Истина Тогда
			цп = 1;
		КонецЕсли;
		
		
		тд=0;		
		СтрокаЗапроса = "/common/api?key=ByTdEt87&id1c="+номстрока.Код + "&name="+СтрЗаменить(номстрока.Наименование,"&"," ")+"&oe="+номстрока.Артикул+
		"&analog="+номстрока.НомерПроизводителя+"&brend="+номстрока.Бренд+
		"&price="+Формат(цена,"ЧРГ=;ЧРД=.;")+"&warehouse="+номстрока.МестоНаСкладе2+"&kolvo="+номстрока.КолвоОстаток+"&kompl="+Компл+
		"&cat="+номстрока.Категория.Код+"&bigagg="+кагг+"&vidlink="+номстрока.Видео+"&pr_exp="+номстрока.РекомендованаяЦена+
		"&partdescr="+номстрока.Описание;
		док = "<item><id1c>"+номстрока.Код + "</id1c><name><![CDATA["+СтрЗаменить(номстрока.Наименование,"&"," ") + "]]></name><title>"+номстрока.Title+"</title><oe>"+номстрока.Артикул + "</oe>
		| <analog>"+номстрока.НомерПроизводителя + "</analog><brend>"+номстрока.Бренд + "</brend><price>"+Формат(цена,"ЧРГ=;ЧРД=.;") + "</price>
		| <warehouse>"+номстрока.МестоНаСкладе2 + "</warehouse><proizv>"+номстрока.Производитель+"</proizv><sost>"+номстрока.Состояние+"</sost><kolvo>"+номстрока.КолвоОстаток + "</kolvo>";
		
		
		// ++ obrv 24.05.19
		// Добавим остатки по доп. городам
		Если ЕстьДопГорода Тогда
			док = док + СтрокаОстаткиПоГородам(номстрока.Ссылка, ВыборкаПоДопГородам);
		КонецЕсли;
		// -- obrv 24.05.19
		
		
		док = док + "<kompl>"+Компл + "</kompl><kompl2>"+компл21 + "</kompl2>
		| <cat2>"+номстрока.Подкатегория2.Код + "</cat2><sitecat>"+номстрока.произв1 + "</sitecat><bigagg>"+кагг + "</bigagg><vidlink>"+номстрока.Видео + "</vidlink>
		| <pr_exp>"+номстрока.РекомендованаяЦена + "</pr_exp><nzn>"+комплН+"</nzn>
		| <weigth>"+номстрока.Вес+"</weigth><volume>"+номстрока.Объем+"</volume><cp>"+цп+"</cp>
		| <ontd>"+насайте + "</ontd><partdescr><![CDATA["+номстрока.Описание + "]]></partdescr>"+direct+"
		| <dlin>"+номстрока.длин+"</dlin><shir>"+номстрока.шир+"</shir><isnew>"+эт_н+"</isnew><vis>"+номстрока.выс+"</vis>
		| <zapros>"+запросП+"</zapros><hastags>"+ет+"</hastags>"+крепеж;
		
		Если номстрока.ЕстьТэги = Истина Тогда
			док = док + "<tags>";
			Для каждого тэг Из номстрока.ДляТэгов Цикл
				док = док + "<tag>"+тэг.Реквизит1.код+"</tag>";
			КонецЦикла;
			док = док + "</tags>";
		КонецЕсли;
		док = док + "<predlozenia>";
		Для каждого тэг Из номстрока.Предложения Цикл
			док = док + "<predl>"+тэг.Реквизит1.код+"</predl>";
		КонецЦикла;
		док = док + "</predlozenia>";
		док = док + допкат;
		док = док + "</item>";
		док = СтрЗаменить(док,"&","&amp;");
		Текст.ЗаписатьСтроку(док);
	КонецЦикла;
	
	
	док ="</items></info>";
	Текст.ЗаписатьСтроку(док);
	Текст.Закрыть();
	
	
	
	Текст = Новый ЗаписьТекста(ИмяКаталога + "\sklad2.xml", КодировкаТекста.UTF8);
	док = "<?xml version='1.0' encoding='UTF-8'?><info>";
	Текст.ЗаписатьСтроку(док);
	Запрос.Текст = "ВЫБРАТЬ
	|	Спецпредложения.Код КАК Код,
	|	Спецпредложения.ДатаНачала КАК ДатаНачала,
	|	Спецпредложения.ДатаОкончания КАК ДатаОкончания,
	|	Спецпредложения.ДатаОбновления КАК ДатаОбновления,
	|	Спецпредложения.Товар.Код КАК ткод,
	|	Спецпредложения.Товар.ЭтоНоваяЗапчасть КАК этн,
	|	Спецпредложения.Цена КАК Цена,
	|	Спецпредложения.Условия КАК Условия
	|ИЗ
	|	Справочник.Спецпредложения КАК Спецпредложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО Спецпредложения.Товар = ВТ_Номенклатура.Ссылка";
	рез1 = Запрос.Выполнить().Выгрузить();
	док = "<specpredl>";
	Текст.ЗаписатьСтроку(док);
	
	Для Каждого пред из рез1 Цикл
		этн = 0;
		Если пред.этн = Истина Тогда
			этн = 1;
		КонецЕсли;
		док = "<predl><id>"+пред.Код+"</id><id1c>"+пред.ткод+"</id1c><isnew>"+этн+"</isnew><updated>"+пред.ДатаОбновления+"</updated>
		|<from>"+пред.ДатаНачала+"</from><to>"+пред.ДатаОкончания+"</to>
		|<price>"+пред.Цена+"</price><description><![CDATA["+пред.Условия+"]]></description></predl>";
		док = СтрЗаменить(док,"&","&amp;");
		Текст.ЗаписатьСтроку(док);
	КонецЦикла;
	док = "</specpredl>";
	Текст.ЗаписатьСтроку(док);
	Запрос.Текст = "ВЫБРАТЬ
	|	Тэги.Ссылка,
	|	Тэги.ВерсияДанных,
	|	Тэги.ПометкаУдаления,
	|	Тэги.Предопределенный,
	|	Тэги.Код,
	|	Тэги.Наименование
	|ИЗ
	|	Справочник.Тэги КАК Тэги";
	рез1 = Запрос.Выполнить().Выгрузить();
	док = "<tags_table>";
	Для Каждого тэг из рез1 Цикл
		док = док + "<tag><id>"+тэг.Код+"</id><name>"+тэг.Наименование+"</name></tag>";
	КонецЦикла;
	док = док + "</tags_table>";
	док = СтрЗаменить(док,"&","&amp;");
	Текст.ЗаписатьСтроку(док);
	
	Запрос.Текст =  "ВЫБРАТЬ
	|	Клиенты.Телефон КАК Телефон,
	|	Клиенты.ФИО КАК ФИО
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Город = &Город";
	
	Запрос.УстановитьПараметр("Город", ПараметрыОбмена.Город);
	
	рез1 = Запрос.Выполнить().Выгрузить();
	док = "<phones>";
	Для Каждого тел из рез1 цикл
		док = док + "<phone><pn>"+тел.Телефон+"</pn><name>"+тел.ФИО+"</name></phone>";
	КонецЦикла;
	док = док + "</phones>";
	Текст.ЗаписатьСтроку(док);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Podkategorii.Ссылка,
	|	Podkategorii.ВерсияДанных,
	|	Podkategorii.ПометкаУдаления,
	|	Podkategorii.Предопределенный,
	|	Podkategorii.Владелец,
	|	Podkategorii.Код,
	|	Podkategorii.Наименование,
	|	Podkategorii.poryadok
	|ИЗ
	|	Справочник.Podkategorii КАК Podkategorii";
	рез1 = Запрос.Выполнить().Выгрузить();
	док = "<podkats>";
	Для Каждого подкат из рез1 цикл
		док = док + "<podkat><id>"+подкат.Код+"</id><catid>"+подкат.Владелец.Код+"</catid><name>"+подкат.Наименование+"</name><poryadok>"+подкат.poryadok+"</poryadok></podkat>";
	КонецЦикла;
	
	
	запрос333 = Новый Запрос;
	//запрос333.Текст =  "ВЫБРАТЬ
	//               |	ПродажаЗапчастей.ЕстьДоставка,
	//               |	ПродажаЗапчастей.ДоставкаНеЗаполнена,
	//               |	ПродажаЗапчастей.ТранспортнаяКомпания,
	//               |	ПродажаЗапчастей.Вес,
	//               |	ПродажаЗапчастей.Объем,
	//               |	ПродажаЗапчастей.КоличествоМест,
	//               |	ПродажаЗапчастей.ГородОтправки,
	//               |	ПродажаЗапчастей.РегионПолучения,
	//               |	ПродажаЗапчастей.ГородПолучения,
	//               |	ПродажаЗапчастей.СтоимостьДоставки,
	//               |	ПродажаЗапчастей.Номер,
	//               |	ПродажаЗапчастей.Таблица.(
	//               |		Ссылка,
	//               |		НомерСтроки,
	//               |		Товар,
	//               |		Количество,
	//               |		Цена,
	//               |		Скидка,
	//               |		машина,
	//               |		цена1,
	//               |		Комментарий,
	//               |		Сумма
	//               |	)
	//               |ИЗ
	//               |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей" ;
	//
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажаЗапчастей.Ссылка КАК Ссылка,
	|	ПродажаЗапчастей.Номер КАК Номер,
	|	ПродажаЗапчастей.ГородОтправки КАК ГородОтправки,
	|	ПродажаЗапчастей.РегионПолучения КАК РегионПолучения,
	|	ПродажаЗапчастей.РегионПолучения.Владелец КАК РегионПолученияВладелец,
	|	ПродажаЗапчастей.ГородПолучения КАК ГородПолучения,
	|	ПродажаЗапчастей.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	|	ПродажаЗапчастей.Вес КАК Вес,
	|	ПродажаЗапчастей.Объем КАК Объем,
	|	ПродажаЗапчастей.КоличествоМест КАК КоличествоМест,
	|	ПродажаЗапчастей.СтоимостьДоставки КАК СтоимостьДоставки
	|ПОМЕСТИТЬ ВТ_ПродажиСДоставкой
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.ЕстьДоставка
	|	И НЕ ПродажаЗапчастей.ДоставкаНеЗаполнена
	|	И ПродажаЗапчастей.ГородПолучения = &Город
	|	И НЕ ПродажаЗапчастей.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПродажиСДоставкой.Ссылка КАК Ссылка,
	|	ВТ_ПродажиСДоставкой.Номер КАК Номер,
	|	ВТ_ПродажиСДоставкой.ГородОтправки КАК ГородОтправки,
	|	ВТ_ПродажиСДоставкой.РегионПолучения КАК РегионПолучения,
	|	ВТ_ПродажиСДоставкой.РегионПолученияВладелец КАК РегионПолученияВладелец,
	|	ВТ_ПродажиСДоставкой.ГородПолучения КАК ГородПолучения,
	|	ВТ_ПродажиСДоставкой.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	|	ВТ_ПродажиСДоставкой.Вес КАК Вес,
	|	ВТ_ПродажиСДоставкой.Объем КАК Объем,
	|	ВТ_ПродажиСДоставкой.КоличествоМест КАК КоличествоМест,
	|	ВТ_ПродажиСДоставкой.СтоимостьДоставки КАК СтоимостьДоставки
	|ИЗ
	|	ВТ_ПродажиСДоставкой КАК ВТ_ПродажиСДоставкой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажаЗапчастейТаблица.Ссылка КАК Ссылка,
	|	ПродажаЗапчастейТаблица.Товар КАК Товар,
	|	ПродажаЗапчастейТаблица.Количество КАК Количество,
	|	ПродажаЗапчастейТаблица.Товар.Код КАК ТоварКод,
	|	ВТ_Номенклатура.Наименование КАК ТоварНаименование
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПродажиСДоставкой КАК ВТ_ПродажиСДоставкой
	|			ПО ПродажаЗапчастейТаблица.Ссылка = ВТ_ПродажиСДоставкой.Ссылка
	|		ПО ВТ_Номенклатура.Ссылка = ПродажаЗапчастейТаблица.Товар
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Город", ПараметрыОбмена.Город);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументы = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выбрать();
	ВыборкаДокументыТовары = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	хмл = "<dostavki>";
	
	СвойстваЗаписи = Новый Структура("Номер,ГородОтправки,РегионПолученияВладелец,РегионПолучения,ГородПолучения,ТранспортнаяКомпания,Вес,Объем,КоличествоМест,СтоимостьДоставки");
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СвойстваЗаписи, ВыборкаДокументы);
		
		хмл = хмл + "<dostavka><nomer>"+СвойстваЗаписи.Номер+"</nomer><from>"+СвойстваЗаписи.ГородОтправки+"</from><to>"+СвойстваЗаписи.РегионПолученияВладелец+", "+СвойстваЗаписи.РегионПолучения+", г. "+СвойстваЗаписи.ГородПолучения+"</to><transport>"+СвойстваЗаписи.ТранспортнаяКомпания+"</transport>
		| <ves>"+СвойстваЗаписи.Вес+"</ves><obem>"+СвойстваЗаписи.Объем+"</obem><mest>"+СвойстваЗаписи.КоличествоМест+"</mest><stoimost>"+СвойстваЗаписи.СтоимостьДоставки+"</stoimost><tovari>";
		
		ВыборкаДокументыТовары.Сбросить();
		Если ВыборкаДокументыТовары.НайтиСледующий(Новый Структура("Ссылка", ВыборкаДокументы.Ссылка)) Тогда
			
			ВыборкаТовары = ВыборкаДокументыТовары.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				хмл = хмл + "<tovar><id>"+ВыборкаТовары.ТоварКод+"</id><name><![CDATA["+ВыборкаТовары.ТоварНаименование+"]]></name><kolvo>"+ВыборкаТовары.Количество+"</kolvo></tovar>"; 
			КонецЦикла;
		КонецЕсли;
		
		хмл = хмл + "</tovari></dostavka>";
		
	КонецЦикла; 
	хмл = хмл + "</dostavki>";
	
	
	//
	//рез = запрос333.Выполнить().Выгрузить();
	//хмл = "<dostavki>";
	//Для Каждого стр Из рез Цикл
	//	Если стр.ЕстьДоставка = Истина И стр.ДоставкаНеЗаполнена = Ложь Тогда
	//		хмл = хмл + "<dostavka><nomer>"+стр.Номер+"</nomer><from>"+стр.ГородОтправки+"</from><to>"+стр.РегионПолучения.Владелец+", "+стр.РегионПолучения+", г. "+стр.ГородПолучения+"</to><transport>"+стр.ТранспортнаяКомпания+"</transport>
	//		| <ves>"+стр.Вес+"</ves><obem>"+стр.Объем+"</obem><mest>"+стр.КоличествоМест+"</mest><stoimost>"+стр.СтоимостьДоставки+"</stoimost><tovari>";
	//		Для каждого стр1 Из стр.Таблица Цикл
	//			хмл = хмл + "<tovar><id>"+стр1.Товар.Код+"</id><name><![CDATA["+стр1.Товар.Наименование+"]]></name><kolvo>"+стр1.Количество+"</kolvo></tovar>"; 
	//		КонецЦикла;
	//		хмл = хмл + "</tovari></dostavka>";
	//	КонецЕсли;
	//КонецЦикла;
	//хмл = хмл + "</dostavki>";
	
	
	запрос333.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Клиенты.Область КАК Область,
	|	Клиенты.Город2 КАК Город2,
	|	Клиенты.Страна2 КАК Страна2
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Город2 = &Город";
	
	запрос333.УстановитьПараметр("Город", ПараметрыОбмена.Город);
	
	рез = запрос333.Выполнить().Выгрузить();
	хмл = хмл + "<cities>";
	Для Каждого стр Из рез Цикл	
		хмл = хмл + "<city><to>"+стр.Страна2+", "+стр.Область+", г. "+стр.Город2+"</to></city>";
	КонецЦикла;
	хмл = хмл + "</cities>";
	
	запрос333.МенеджерВременныхТаблиц = МВТ;
	
	запрос333.Текст =
	"ВЫБРАТЬ
	|	РегистрНакопления1Остатки.Товар КАК Товар,
	|	ИндНомер.Цена КАК цена,
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	|	Комментарии.Комментарий КАК Комментарий,
	|	ИндНомер.Код КАК ИндКод,
	|	ВЫБОР
	|		КОГДА РегистрНакопления1Остатки.Товар.Состояние = ЗНАЧЕНИЕ(Перечисление.Состояние.БУ)
	|			ТОГДА (ВЫРАЗИТЬ(РегистрНакопления1Остатки.Товар.РекомендованаяЦена * ИндНомер.наценка.Коофициент / 10 КАК ЧИСЛО(10, 0))) * 10
	|		ИНАЧЕ ИндНомер.Цена
	|	КОНЕЦ КАК наценкаФ,
	|	ЕСТЬNULL(РегистрНакопления1Остатки.Склад.Город.Код, """") КАК ГородКод
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки(
	|			,
	|			ВЫБОР
	|				КОГДА &ЕстьДопГорода
	|					ТОГДА Склад.Город В (&Города)
	|				ИНАЧЕ Товар В
	|						(ВЫБРАТЬ
	|							ВТ_Номенклатура.Ссылка
	|						ИЗ
	|							ВТ_Номенклатура)
	|			КОНЕЦ) КАК РегистрНакопления1Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарии
	|		ПО (Комментарии.Товар = РегистрНакопления1Остатки.Товар)
	|			И (Комментарии.Машина = РегистрНакопления1Остатки.машина)
	|			И (Комментарии.индкод = РегистрНакопления1Остатки.индкод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО (ИндНомер.индкод = РегистрНакопления1Остатки.индкод)";
	
	
	// Если есть список доп. городов, то остатки выгружаем не только со своего склада
	запрос333.УстановитьПараметр("ЕстьДопГорода", ЕстьДопГорода);	
	ГородаОтбор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОбмена.Город);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГородаОтбор, ПараметрыОбмена.Города, Истина);
	
	запрос333.УстановитьПараметр("Города", ГородаОтбор);	
	
	
	рез = запрос333.Выполнить().Выгрузить();
	хмл = хмл + "<indparts>";
	Для Каждого стр Из рез Цикл	
		хмл = хмл + "<indpart><id>"+стр.Товар.Код+"</id><price>"+стр.наценкаФ+"</price><kolvo>"+стр.КолвоОстаток+"</kolvo>";
		
		// ++ obrv 24.05.19
		// Добавим остатки по доп. городам
		Если ЕстьДопГорода Тогда
			хмл = хмл + СтрокаОстаткиПоГороду(стр.ГородКод, стр.КолвоОстаток);
		КонецЕсли;
		// -- obrv 24.05.19
		
		хмл = хмл + "<indkod>"+стр.ИндКод+"</indkod></indpart>";
	КонецЦикла;
	хмл = хмл + "</indparts>";
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Категории.Код,
	|	Категории.Наименование,
	|	Категории.Порядок1,
	|	Категории.Родитель,
	|	Категории.допкат.(
	|		Ссылка,
	|		НомерСтроки,
	|		ДопКатегория
	|	),
	|	Категории.ОписаниеОбщее,
	|	Категории.ОписаниеСкания,
	|	Категории.ОписаниеДАФ,
	|	Категории.ОписаниеМАН,
	|	Категории.ОписаниеВольво,
	|	Категории.ОписаниеРено,
	|	Категории.Автолайн,
	|	Категории.допкат2.(
	|		Ссылка,
	|		НомерСтроки,
	|		код,
	|		Родитель,
	|		Название
	|	),
	|	Категории.НазваниеДляОписания,
	|	Категории.МетаОписание
	|ИЗ
	|	Справочник.Категории КАК Категории";
	рез1 = Запрос.Выполнить().Выгрузить();
	хмл = хмл + "<mainkats>";
	Для Каждого подкат из рез1 цикл
		катавто = "";
		Если подкат.Автолайн <> Справочники.Категории.ПустаяСсылка() Тогда
			катавто = подкат.Автолайн.catauto;
		КонецЕсли;
		If  подкат.Родитель = Справочники.Категории.ПустаяСсылка() Then
			хмл = хмл + "<kat><id>"+подкат.Код+"</id><name>"+подкат.Наименование+"</name>
			| <poryadok>"+Формат(подкат.Порядок1,"ЧРГ=;ЧРД=.;")+"</poryadok><parent>0</parent></kat>";
		Else
			хмл = хмл + "<kat><id>"+подкат.Код+"</id>
			| <name>"+подкат.Наименование+"</name><poryadok>"+Формат(подкат.Порядок1,"ЧРГ=;ЧРД=.;")+"</poryadok>
			| <parent>"+подкат.Родитель.Код+"</parent><catauto>"+катавто+"</catauto><similar2>";
			Для Каждого симкат Из подкат.допкат2 Цикл
				хмл = хмл+"<skat><id>"+симкат.Код+"</id><pid>"+симкат.Родитель.Код+"</pid><name>"+симкат.Название+"</name></skat>";
			КонецЦикла;
			хмл = хмл + "</similar2><similar>";
			Для Каждого симкат Из подкат.допкат Цикл
				хмл = хмл+"<skat>"+симкат.ДопКатегория.Код+"</skat>";
			КонецЦикла; 		  
			хмл = хмл + "</similar><fordesc>"+подкат.НазваниеДляОписания+"</fordesc><metadesc><![CDATA["+подкат.МетаОписание+"]]></metadesc><descmain><![CDATA["+подкат.ОписаниеОбщее+"]]></descmain>
			| <descscania><![CDATA["+подкат.ОписаниеСкания+"]]></descscania>
			| <descdaf><![CDATA["+подкат.ОписаниеДАФ+"]]></descdaf>
			| <descman><![CDATA["+подкат.ОписаниеМАН+"]]></descman>
			| <descvolvo><![CDATA["+подкат.ОписаниеВольво+"]]></descvolvo>
			| <descrenault><![CDATA["+подкат.ОписаниеРено+"]]></descrenault></kat>";
		EndIf;
	КонецЦикла;
	хмл = хмл + "</mainkats>";
	док = док + "</podkats>"+хмл+"</info>";
	док = СтрЗаменить(док,"&","&amp;");
	
	Текст.ЗаписатьСтроку(док);
	Текст.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Процедура дт_ОбменССайтом() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ПолучитьОстаткиПоДопГородам(ПараметрыОбмена, МВТ)
	
	Если ПараметрыОбмена.Города.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрНакопления1Остатки.Товар КАК Номенклатура,
	|	СУММА(РегистрНакопления1Остатки.КолвоОстаток) КАК КолвоОстаток,
	|	РегистрНакопления1Остатки.Склад.Город КАК Город,
	|	ЕСТЬNULL(РегистрНакопления1Остатки.Склад.Город.Код, """") КАК ГородКод
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки(, Склад.Город В (&Города)) КАК РегистрНакопления1Остатки
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрНакопления1Остатки.Товар,
	|	РегистрНакопления1Остатки.Склад.Город,
	|	РегистрНакопления1Остатки.Склад.Город.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	Город
	|ИТОГИ
	|	СУММА(КолвоОстаток)
	|ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Города", ПараметрыОбмена.Города);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Выборка;
	
	
КонецФункции // ПолучитьОстаткиПоДопГородам()



Функция СтрокаОстаткиПоГородам(Номенклатура, ВыборкаНоменклатура)
	
	Результат = "";
	ВыборкаНоменклатура.Сбросить();
	Если ВыборкаНоменклатура.НайтиСледующий(Новый Структура("Номенклатура", Номенклатура)) Тогда
		
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Результат = Результат + СтрШаблон(ШаблонТекстаОстатокПоГороду(), Выборка.ГородКод, Выборка.КолвоОстаток);		
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат) Тогда
		Результат = СтрШаблон(ШаблонТекстаОстаткиПоГородам(), Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СтрокаОстаткиПоГородам()

Функция СтрокаОстаткиПоГороду(ГородКод, Остаток)
	
	Результат = "";
	Если Остаток <> 0 Тогда
		
		Результат = Результат + СтрШаблон(ШаблонТекстаОстатокПоГороду(), ГородКод, Остаток);		
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат) Тогда
		Результат = СтрШаблон(ШаблонТекстаОстаткиПоГородам(), Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СтрокаОстаткиПоГородам()

Функция ШаблонТекстаОстатокПоГороду()
	
	Возврат "
	|	<countdetail>
	|		<stock>%1</stock>
	|		<count>%2</count>
	|	</countdetail>";
	
	
КонецФункции // ШаблонТекстаОстатокПоГороду()


Функция ШаблонТекстаОстаткиПоГородам()
	
	Возврат "
	|<countdetails>%1
	|</countdetails>";
	
КонецФункции // ШаблонТекстаОстаткиПоГородам()


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс



#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти  

Процедура СформироватьСписокДеталейПоштучно(Детали) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрНакопления1Остатки.Товар КАК Товар,
	               |	РегистрНакопления1Остатки.индкод КАК индкод,
	               |	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	               |	ИндНомер.Цена КАК Цена
	               |ПОМЕСТИТЬ ВТ_ОстаткиНач
	               |ИЗ
	               |	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	               |		ПО РегистрНакопления1Остатки.индкод = ИндНомер.индкод
	               |ГДЕ
	               |	РегистрНакопления1Остатки.Товар В(&Товар)
	               |	И РегистрНакопления1Остатки.КолвоОстаток > -1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИндКодик.Владелец КАК Товар,
	               |	ИндКодик.Наименование КАК индкод,
	               |	ЕСТЬNULL(ВТ_ОстаткиНач.КолвоОстаток, 0) КАК КолвоОстаток
	               |ПОМЕСТИТЬ ВТ_Остатки
	               |ИЗ
	               |	Справочник.ИндКод КАК ИндКодик
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНач КАК ВТ_ОстаткиНач
	               |		ПО (ВТ_ОстаткиНач.индкод = ИндКодик.Ссылка)
	               |ГДЕ
	               |	ИндКодик.Владелец В(&Товар)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Код КАК id1c,
	               |	Номенклатура.Наименование КАК name,
	               |	Номенклатура.Производитель.Наименование КАК manufacturer,
	               |	Номенклатура.Бренд.Наименование КАК brand_local,
	               |	Номенклатура.МестоНаСкладе2.Наименование КАК location,
	               |	Номенклатура.Описание КАК description,
	               |	ВЫБОР
	               |		КОГДА Номенклатура.Состояние = ЗНАЧЕНИЕ(Перечисление.Состояние.БУ)
	               |				ИЛИ Номенклатура.Состояние = ЗНАЧЕНИЕ(Перечисление.Состояние.Перекупка)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК is_used,
	               |	Номенклатура.Артикул КАК oe,
	               |	ВТ_Остатки.индкод КАК ind_code,
	               |	ЕСТЬNULL(ВТ_Остатки.КолвоОстаток, 0) КАК onhand_1c,
	               |	Номенклатура.НомерПроизводителя КАК analog
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	               |		ПО Номенклатура.Ссылка = ВТ_Остатки.Товар
	               |ГДЕ
	               |	Номенклатура.Ссылка В(&Товар)";
	Запрос.УстановитьПараметр("Товар",Детали);
	тз = Запрос.Выполнить().Выгрузить(); 
	тз.Колонки.Добавить("created_at",,"created_at"); 
	тз.Колонки.Добавить("updated_at",,"updated_at"); 
	тз.Колонки.Добавить("slug",,"slug");
	тз.Колонки.Добавить("oe_clean",,"oe_clean");
	тз.Колонки.Добавить("analog_clean",,"analog_clean");
	тз.Колонки.Добавить("shipping_category_id",,"shipping_category_id");

	Для каждого стр из тз Цикл	
		Пока Лев(стр.id1c, 1) = "0" Цикл 
			стр.id1c = Прав(стр.id1c, СтрДлина(стр.id1c) - 1);
		КонецЦикла;
		
		стр.created_at = ТекущаяДата();
		стр.updated_at = ТекущаяДата();
		стр.slug = Транслит(стр.name, ложь)+стр.ind_code;
		стр.name = СтрЗаменить(стр.name,"RH","прав.");
		стр.name = СтрЗаменить(стр.name,"LH","лев.");
		
		Стр.analog 	     = ?(Стр.analog = "",Стр.oe,Стр.analog);	
		стр.oe_clean     = СтрокаБезСимволов(стр.oe);
		стр.analog_clean = СтрокаБезСимволов(стр.analog); 
		
		стр.shipping_category_id = 1;
	КонецЦикла;
	
	ОтразитьНаборЗаписей_SQL(тз, "spree_products", "ind_code");	 
КонецПроцедуры 

Процедура СформироватьСписокДеталейВсе() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрНакопления1Остатки.Товар КАК Товар,
	               |	РегистрНакопления1Остатки.индкод КАК индкод,
	               |	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	               |	ИндНомер.Цена КАК Цена
	               |ПОМЕСТИТЬ ВТ_ОстаткиНач
	               |ИЗ
	               |	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	               |		ПО РегистрНакопления1Остатки.индкод = ИндНомер.индкод
	               |ГДЕ
	               |	РегистрНакопления1Остатки.КолвоОстаток > -1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИндКодик.Владелец КАК Товар,
	               |	ИндКодик.Наименование КАК индкод,
	               |	ЕСТЬNULL(ВТ_ОстаткиНач.КолвоОстаток, 0) КАК КолвоОстаток
	               |ПОМЕСТИТЬ ВТ_Остатки
	               |ИЗ
	               |	Справочник.ИндКод КАК ИндКодик
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНач КАК ВТ_ОстаткиНач
	               |		ПО (ВТ_ОстаткиНач.индкод = ИндКодик.Ссылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Код КАК id1c,
	               |	Номенклатура.Наименование КАК name,
	               |	Номенклатура.Производитель.Наименование КАК manufacturer,
	               |	Номенклатура.Бренд.Наименование КАК brand_local,
	               |	Номенклатура.МестоНаСкладе2.Наименование КАК location,
	               |	Номенклатура.Описание КАК description,
	               |	ВЫБОР
	               |		КОГДА Номенклатура.Состояние = ЗНАЧЕНИЕ(Перечисление.Состояние.БУ)
	               |				ИЛИ Номенклатура.Состояние = ЗНАЧЕНИЕ(Перечисление.Состояние.Перекупка)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК is_used,
	               |	Номенклатура.Артикул КАК oe,
	               |	ВТ_Остатки.индкод КАК ind_code,
	               |	ЕСТЬNULL(ВТ_Остатки.КолвоОстаток, 0) КАК onhand_1c,
	               |	Номенклатура.НомерПроизводителя КАК analog
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	               |		ПО Номенклатура.Ссылка = ВТ_Остатки.Товар";
	
	тз = Запрос.Выполнить().Выгрузить(); 
	тз.Колонки.Добавить("created_at",,"created_at"); 
	тз.Колонки.Добавить("updated_at",,"updated_at"); 
	тз.Колонки.Добавить("slug",,"slug");
	тз.Колонки.Добавить("oe_clean",,"oe_clean");
	тз.Колонки.Добавить("analog_clean",,"analog_clean");
	тз.Колонки.Добавить("shipping_category_id",,"shipping_category_id");

	Для каждого стр из тз Цикл	
		Пока Лев(стр.id1c, 1) = "0" Цикл 
			стр.id1c = Прав(стр.id1c, СтрДлина(стр.id1c) - 1);
		КонецЦикла;
		
		стр.created_at = ТекущаяДата();
		стр.updated_at = ТекущаяДата();
		стр.slug = Транслит(стр.name, ложь)+стр.ind_code;
		стр.name = СтрЗаменить(стр.name,"RH","прав.");
		стр.name = СтрЗаменить(стр.name,"LH","лев.");
		
		Стр.analog 	     = ?(Стр.analog = "",Стр.oe,Стр.analog);	
		стр.oe_clean     = СтрокаБезСимволов(стр.oe);
		стр.analog_clean = СтрокаБезСимволов(стр.analog); 
		
		стр.shipping_category_id = 1;
	КонецЦикла;	
	ОтразитьНаборЗаписей_SQL(тз, "spree_products", "ind_code");	 
КонецПроцедуры 


Функция СтрокаБезСимволов(ИсходнаяСтрока)
	ДопустимыеСимволы = "0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZzАаБбВвГгДдЕеЁёЖжЗзИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхШшЩщЧчЫыЬьЪъЭэЮюЯя";
	
	ЛишниеСимволы  = СтрСоединить(СтрРазделить(ИсходнаяСтрока,ДопустимыеСимволы));
	ИтоговаяСтрока = СтрСоединить(СтрРазделить(ИсходнаяСтрока,ЛишниеСимволы));
	
	Возврат ИтоговаяСтрока;
КонецФункции

Функция Транслит(СтрокаВход, Реверс) Экспорт
	
	// Параметры:
	// СтрокаВход - строка на Кириллице или Латинице
	// Реверс - Булево, если Истина, то строка на Латинице. Преобразуем латиницу в Кириллицу
	//                  если Ложь, то строка на Кириллице. Преобразуем латиницу в Латиницу
	
	ВыходСтрока= "";
	AZ_3 = Новый Соответствие; // три символа (сочетание)
	AZ_2 = Новый Соответствие; // два символа (сочетание)
	AZ_1 = Новый Соответствие; // один символ
	
	// Соответствие символов
	// кириллицы и латиницы
	AZ_3.Вставить(?(Реверс=Ложь,"щ","sch"),?(Реверс=Истина,"щ","sch"));
	
	AZ_2.Вставить(?(Реверс=Ложь,"э","je"),?(Реверс=Истина,"э","je"));
	AZ_2.Вставить(?(Реверс=Ложь,"ю","ju"),?(Реверс=Истина,"ю","ju"));
	AZ_2.Вставить(?(Реверс=Ложь,"я","ya"),?(Реверс=Истина,"я","ya"));
	AZ_2.Вставить(?(Реверс=Ложь,"ё","jo"),?(Реверс=Истина,"ё","jo"));
	AZ_2.Вставить(?(Реверс=Ложь,"ж","zh"),?(Реверс=Истина,"ж","zh"));
	AZ_2.Вставить(?(Реверс=Ложь,"ч","ch"),?(Реверс=Истина,"ч","ch"));
	AZ_2.Вставить(?(Реверс=Ложь,"ш","sh"),?(Реверс=Истина,"ш","sh"));
	
	AZ_1.Вставить(?(Реверс=Ложь,"а","a"),?(Реверс=Истина,"а","a"));
	AZ_1.Вставить(?(Реверс=Ложь,"б","b"),?(Реверс=Истина,"б","b"));
	AZ_1.Вставить(?(Реверс=Ложь,"в","v"),?(Реверс=Истина,"в","v"));
	AZ_1.Вставить(?(Реверс=Ложь,"г","g"),?(Реверс=Истина,"г","g"));
	AZ_1.Вставить(?(Реверс=Ложь,"д","d"),?(Реверс=Истина,"д","d"));
	AZ_1.Вставить(?(Реверс=Ложь,"е","e"),?(Реверс=Истина,"е","e"));
	AZ_1.Вставить(?(Реверс=Ложь,"з","z"),?(Реверс=Истина,"з","z"));
	AZ_1.Вставить(?(Реверс=Ложь,"и","i"),?(Реверс=Истина,"и","i"));
	AZ_1.Вставить(?(Реверс=Ложь,"й","j"),?(Реверс=Истина,"й","j"));
	AZ_1.Вставить(?(Реверс=Ложь,"к","k"),?(Реверс=Истина,"к","k"));
	AZ_1.Вставить(?(Реверс=Ложь,"л","l"),?(Реверс=Истина,"л","l"));
	AZ_1.Вставить(?(Реверс=Ложь,"м","m"),?(Реверс=Истина,"м","m"));
	AZ_1.Вставить(?(Реверс=Ложь,"н","n"),?(Реверс=Истина,"н","n"));
	AZ_1.Вставить(?(Реверс=Ложь,"о","o"),?(Реверс=Истина,"о","o"));
	AZ_1.Вставить(?(Реверс=Ложь,"п","p"),?(Реверс=Истина,"п","p"));
	AZ_1.Вставить(?(Реверс=Ложь,"р","r"),?(Реверс=Истина,"р","r"));
	AZ_1.Вставить(?(Реверс=Ложь,"с","s"),?(Реверс=Истина,"с","s"));
	AZ_1.Вставить(?(Реверс=Ложь,"т","t"),?(Реверс=Истина,"т","t"));
	AZ_1.Вставить(?(Реверс=Ложь,"у","u"),?(Реверс=Истина,"у","u"));
	AZ_1.Вставить(?(Реверс=Ложь,"ф","f"),?(Реверс=Истина,"ф","f"));
	AZ_1.Вставить(?(Реверс=Ложь,"х","h"),?(Реверс=Истина,"х","h"));
	AZ_1.Вставить(?(Реверс=Ложь,"ц","c"),?(Реверс=Истина,"ц","c"));
	AZ_1.Вставить(?(Реверс=Ложь,"ы","y"),?(Реверс=Истина,"ы","y"));
	AZ_1.Вставить(?(Реверс=Ложь,"ъ",""),?(Реверс=Истина,"ъ",""));//#
	AZ_1.Вставить(?(Реверс=Ложь,"ь",""),?(Реверс=Истина,"ь",""));//'
	AZ_1.Вставить(?(Реверс=Ложь," ","_"),?(Реверс=Истина," ","_"));// пробел
	AZ_1.Вставить(?(Реверс=Ложь,".",""),?(Реверс=Истина," ","_"));
	Для Сч=1 По СтрДлина(СтрокаВход) Цикл
		
		ТекСимволСтроки = НРЕГ(Сред(СтрокаВход,Сч,3));
		НайденныйСимвол = AZ_3.Получить(ТекСимволСтроки);
		Если НайденныйСимвол = Неопределено Тогда
			ТекСимволСтроки = НРЕГ(Сред(СтрокаВход,Сч,2));
			НайденныйСимвол = AZ_2.Получить(ТекСимволСтроки);
			Если НайденныйСимвол = Неопределено Тогда
				ТекСимволСтроки = НРЕГ(Сред(СтрокаВход,Сч,1));
				НайденныйСимвол = AZ_1.Получить(ТекСимволСтроки);
				Если НайденныйСимвол = Неопределено Тогда
					ТекСимволСтроки = НРЕГ(Сред(СтрокаВход,Сч,1));
					НайденныйСимвол = AZ_3.Получить(ТекСимволСтроки);
					Если НайденныйСимвол = Неопределено Тогда
						ТекСимволСтроки = НРЕГ(Сред(СтрокаВход,Сч,1));
						НайденныйСимвол = AZ_2.Получить(ТекСимволСтроки);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Сч=Сч+1
			КонецЕсли;
		Иначе
			Сч=Сч+2
		КонецЕсли;
		
		Если НайденныйСимвол <> Неопределено Тогда
			СимволВСтроку = НайденныйСимвол;
		Иначе // Если не нашли соответствие, то оставляем символ как есть
			СимволВСтроку = Сред(СтрокаВход,Сч,1);
		КонецЕсли;
		
		ВыходСтрока = ВыходСтрока + СимволВСтроку;
	КонецЦикла;
	
	Возврат ВыходСтрока;
	
КонецФункции

&НаСервере
Функция СоединитьСерверSQLТест() Экспорт
	
	//Настройки   =    inf_ПовтИспСеанс.ВернутьНастройкиСвязиSQL();
	
	Server      =  "62.109.15.75:3306" ;
	Base        =  "dtweb_production";
	User        =  "user_1c";
	Pass        =  "JKBwZW15axKSSOx"; 
	булWinLogin =  ложь;
	DataSource  = "SiteTo1C";      
	СтрокаПодключенияКMySQL   = "driver={MySQL ODBC 8.0 Unicode Driver};server="+Server+";uid="+User+";pwd="+Pass+";Database="+Base+";DataSource="+DataSource+";STMT="+"set character_set_results=utf8mb3"+";";
	
	
	Попытка
		con = Новый COMОбъект("ADODB.Connection"); 
		con.Open(СтрокаПодключенияКMySQL);
		//con.Close();
		Возврат con;
	Исключение
		Возврат ОписаниеОшибки();	
	КонецПопытки 
КонецФункции 

&НаСервере
Функция СоединитьСерверSQL() Экспорт
	
	//Настройки   =    inf_ПовтИспСеанс.ВернутьНастройкиСвязиSQL();
	
	Server      =  "192.168.0.128:33061" ;
	Base        =  "dtweb_development";
	User        =  "user_1c";
	Pass        =  "pass1234"; 
	
	DataSource  = "TestSiteTo1C";      
	СтрокаПодключенияКMySQL   = "driver={MySQL ODBC 8.0 Unicode Driver};server="+Server+";uid="+User+";pwd="+Pass+";Database="+Base+";DataSource="+DataSource+";STMT="+"set character_set_results=cp1251"+";";
	
	
	Попытка
		con = Новый COMОбъект("ADODB.Connection"); 
		con.Open(СтрокаПодключенияКMySQL);
		//con.Close();
		Возврат con;
	Исключение
		Возврат ОписаниеОшибки();	
	КонецПопытки 
КонецФункции

Функция ПолучитьТаблицуДанныхSQL(ТекстЗапроса, con)  Экспорт
	Таблица = Новый ТаблицаЗначений;
	cmd    = Новый COMОбъект("ADODB.Command");
	cmd.CommandTimeout = 0;
	cmd.ActiveConnection = con;    
	cmd.CommandText    = ТекстЗапроса;
	rs = cmd.Execute();
	Для НомерСтолбца = 0 По Rs.Fields.Count-1 Цикл
		ИмяНовойКолонки = Rs.Fields(НомерСтолбца).Name;
		Таблица.Колонки.Добавить(ИмяНовойКолонки);
	КонецЦикла;
	Если Не Rs.eof Тогда
		rs.MoveFirst();
	КонецЕсли;
	Пока Не Rs.eof Цикл    
		НоваяСтрока = Таблица.Добавить();
		Для каждого Колонка из Таблица.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			Значение = Rs.Fields.Item(ИмяКолонки).Value;
			Если значение <> Null Тогда
				НоваяСтрока[ИмяКолонки] = Значение;
			КонецЕсли;        
		КонецЦикла;
		rs.MoveNext();
	КонецЦикла;
	Возврат Таблица;
КонецФункции

Процедура ВыполнитьЗапросSQL(ТекстЗапроса, con)  Экспорт
	
	cmd	= Новый COMОбъект("ADODB.Command");
	cmd.CommandTimeout = 0;
	cmd.CommandText	= ТекстЗапроса;
	cmd.ActiveConnection = con;	
	cmd.CommandType = 1;
	rs = cmd.Execute();
	
КонецПроцедуры

Процедура ОтразитьЕдиничныеОбъекты_SQL(Данные, ИмяТаблицы, ИмяПоляИдентификатора) Экспорт
	//ИмяТаблицы="test1c";
	//ИмяПоляИдентификатора="text_1c";
	//Тз = Новый ТаблицаЗначений;
	//Тз.Колонки.Добавить("Тест",,"Тест");
	//Тз.Добавить().Тест= "тестовыйТест";
	//Данные = Тз; 
	//Если Данные.Колонки.Найти(ИмяПоляИдентификатора) = Неопределено Тогда
	//	Возврат;		
	//КонецЕсли;	
	
	ОписаниеКолонок = ОписаниеКолонок(Данные);
	
	ТекстЗапросаУдаление 	= ШаблонЗапросаНаУдаление(ИмяТаблицы, ИмяПоляИдентификатора);
	ТекстЗапросаЗапись		= ШаблонЗапросаНаЗапись(ИмяТаблицы, ОписаниеКолонок);
	БлокЗначений = "";
	БлокУдаление = "";
	
	ДопПараметры = Новый Структура;
	
	ДопПараметры.Вставить("МаксимальнаяДлинаСтроки", 200000);   //Строка неограниченной длины не совсем неограниченная 
	ДопПараметры.Вставить("ОписаниеКолонок", ОписаниеКолонок);
	ДопПараметры.Вставить("ИмяТаблицы"		,  ИмяТаблицы);
	ДопПараметры.Вставить("ИмяПоляИдентификатора", ИмяПоляИдентификатора);
	
	Соединение =  СоединитьСерверSQL();	
	Попытка
		Если ТипЗнч(Данные) = Тип("РезультатЗапроса") Тогда
			Выборка = Данные.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ОтразитьСтрокуДанных(Выборка, Данные, ТекстЗапросаУдаление, ТекстЗапросаЗапись,
				БлокЗначений, БлокУдаление, ДопПараметры, Соединение, Ложь)		
			КонецЦикла;	
		ИначеЕсли	ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
			
			Для Каждого Стр Из Данные Цикл
				ОтразитьСтрокуДанных(Стр, Данные, ТекстЗапросаУдаление, ТекстЗапросаЗапись,
				БлокЗначений, БлокУдаление, ДопПараметры, Соединение, Ложь)		
			КонецЦикла;		
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(БлокУдаление) Тогда
			ТекстЗапросаУдаление = СтрЗаменить(ТекстЗапросаУдаление, "%Идентификаторы%", БлокУдаление); 
			ВыполнитьЗапросSQL(ТекстЗапросаУдаление	,  Соединение);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(БлокЗначений) Тогда	
			ТекстЗапросаЗапись = СтрЗаменить(ТекстЗапросаЗапись, "%Значения%", БлокЗначений);			
			ВыполнитьЗапросSQL(ТекстЗапросаЗапись,  Соединение);
		КонецЕсли;	
	Исключение //Ошибки ошибками, а соединение закрыть нужно
	КонецПопытки;
	
	Соединение.Close();
	
КонецПроцедуры	

Процедура ОтразитьСтрокуДанных(Строка, Данные, ТекстЗапросаУдаление, ТекстЗапросаЗапись,
	БлокЗначений, БлокУдаление, ДопПараметры, Соединение, ЭтоНаборЗаписей, НомСтр = 0)
	
	ЗначенияДляСтроки = "";	
	ЗнУдаление = "";
	Для Каждого Кл Из Данные.Колонки Цикл
		Значение = Строка[Кл.Имя];
		СтрЗначение = СтроковоеЗначениеПоля(Значение);
		
		Если (НЕ ЭтоНаборЗаписей) И (Кл.Имя = ДопПараметры.ИмяПоляИдентификатора) Тогда
			Если БлокУдаление = "" Тогда
				БлокУдаление = СтрЗначение;
			Иначе	
				БлокУдаление = БлокУдаление + Символы.ПС + ", " + СтрЗначение;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЗначенияДляСтроки = "" Тогда
			ЗначенияДляСтроки = СтрЗначение;
		Иначе
			ЗначенияДляСтроки = ЗначенияДляСтроки + Символы.ПС + ", " + СтрЗначение;
		КонецЕсли;			
	КонецЦикла;	
	
	Если ДопПараметры.Свойство("ИмяПоляНумератора") Тогда
		ЗначенияДляСтроки = ЗначенияДляСтроки + Символы.ПС + ", " + СтроковоеЗначениеПоля(НомСтр);		
	КонецЕсли;
	
	РезДлина = СтрДлина(ТекстЗапросаЗапись) + СтрДлина(БлокЗначений) + СтрДлина(ЗначенияДляСтроки);
	
	Если РезДлина > ДопПараметры.МаксимальнаяДлинаСтроки Тогда
		
		Если ЗначениеЗаполнено(БлокУдаление) Тогда
			ТекстЗапросаУдаление = СтрЗаменить(ТекстЗапросаУдаление, "%Идентификаторы%", БлокУдаление); 
			ВыполнитьЗапросSQL(ТекстЗапросаУдаление	,  Соединение);
			ТекстЗапросаУдаление = ШаблонЗапросаНаУдаление(ДопПараметры.ИмяТаблицы, ДопПараметры.ИмяПоляИдентификатора);
			БлокУдаление = "";
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(БлокЗначений) Тогда
			ТекстЗапросаЗапись = СтрЗаменить(ТекстЗапросаЗапись, "%Значения%", БлокЗначений);	
			ВыполнитьЗапросSQL(ТекстЗапросаЗапись	,  Соединение);
			ТекстЗапросаЗапись = ШаблонЗапросаНаЗапись(ДопПараметры.ИмяТаблицы, ДопПараметры.ОписаниеКолонок);
			БлокЗначений = "";
		КонецЕсли;			
	КонецЕсли;
	
	Если БлокЗначений = "" Тогда
		БлокЗначений = "(" + ЗначенияДляСтроки + ")";
	Иначе	
		БлокЗначений = БлокЗначений  + Символы.ПС + ", (" +	ЗначенияДляСтроки + ")";	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОтразитьНаборЗаписей_SQL(Данные, ИмяТаблицы, ИмяПоляИдентификатора, ИмяПоляНумератора="") Экспорт
	
	
	Если Данные.Колонки.Найти(ИмяПоляИдентификатора) = Неопределено Тогда
		Возврат;		
	КонецЕсли;	
	
	ОписаниеКолонок = ОписаниеКолонок(Данные, ИмяПоляНумератора);
	
	ТекстЗапросаУдаление 	= ШаблонЗапросаНаУдаление(ИмяТаблицы, ИмяПоляИдентификатора);
	ТекстЗапросаЗапись		= ШаблонЗапросаНаЗапись(ИмяТаблицы, ОписаниеКолонок);
	БлокЗначений = "";
	БлокУдаление = "";
	
	ДопПараметры = Новый Структура;
	
	ДопПараметры.Вставить("МаксимальнаяДлинаСтроки", 200000);   //Строка неограниченной длины не совсем неограниченная //6054606
	ДопПараметры.Вставить("ОписаниеКолонок", ОписаниеКолонок);
	ДопПараметры.Вставить("ИмяТаблицы"		,  ИмяТаблицы);
	ДопПараметры.Вставить("ИмяПоляИдентификатора", ИмяПоляИдентификатора);
	Если ЗначениеЗаполнено(ИмяПоляНумератора) Тогда
		ДопПараметры.Вставить("ИмяПоляНумератора", ИмяПоляНумератора);
	КонецЕсли;
	
	Соединение =  СоединитьСерверSQL();	
	
	Попытка	
		Если ТипЗнч(Данные) = Тип("РезультатЗапроса") Тогда
			ВыборкаРегистратор = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРегистратор.Следующий() Цикл
				
				ЗначениеКлюча = ВыборкаРегистратор[ИмяПоляИдентификатора];
				СтрЗначение = СтроковоеЗначениеПоля(ЗначениеКлюча);
				
				Если БлокУдаление = "" Тогда
					БлокУдаление = СтрЗначение;
				Иначе	
					БлокУдаление = БлокУдаление + Символы.ПС + ", " + СтрЗначение;
				КонецЕсли;	
				
				Выборка =  ВыборкаРегистратор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				НомСтр = 0;
				Пока Выборка.Следующий() Цикл
					НомСтр = НомСтр + 1;
					ОтразитьСтрокуДанных(Выборка, Данные, ТекстЗапросаУдаление, ТекстЗапросаЗапись,
					БлокЗначений, БлокУдаление, ДопПараметры, Соединение, Истина, НомСтр);
				КонецЦикла;	
			КонецЦикла;	
			
		ИначеЕсли	ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
			
			Т_ИД = Данные.Скопировать(,ИмяПоляИдентификатора);
			Т_ИД.Свернуть(ИмяПоляИдентификатора);
			
			Для Каждого СтрИД Из Т_ИД Цикл
				
				ЗначениеКлюча = СтрИД[ИмяПоляИдентификатора];
				СтрЗначение = СтроковоеЗначениеПоля(ЗначениеКлюча);
				
				Если БлокУдаление = "" Тогда
					БлокУдаление = СтрЗначение;
				Иначе	
					БлокУдаление = БлокУдаление + Символы.ПС + ", " + СтрЗначение;
				КонецЕсли;	
				
				ПараметрыОтбораСтрок = Новый Структура(ИмяПоляИдентификатора, СтрИД[ИмяПоляИдентификатора]);		
				СтрокиПоИД = Данные.НайтиСтроки(ПараметрыОтбораСтрок);		
				НомСтр = 0;
				Для Каждого Стр Из СтрокиПоИД Цикл
					НомСтр = НомСтр + 1;
					
					ОтразитьСтрокуДанных(Стр, Данные, ТекстЗапросаУдаление, ТекстЗапросаЗапись,
					БлокЗначений, БлокУдаление, ДопПараметры, Соединение, Истина, НомСтр);
				КонецЦикла;	
			КонецЦикла;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(БлокУдаление) Тогда
			ТекстЗапросаУдаление = СтрЗаменить(ТекстЗапросаУдаление, "%Идентификаторы%", БлокУдаление); 
			ВыполнитьЗапросSQL(ТекстЗапросаУдаление	,  Соединение);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(БлокЗначений) Тогда	
			ТекстЗапросаЗапись = СтрЗаменить(ТекстЗапросаЗапись, "%Значения%", БлокЗначений);			
			ВыполнитьЗапросSQL(ТекстЗапросаЗапись,  Соединение); 
			//СоединитьСерверSQLСтрока(ТекстЗапросаЗапись);
			
		КонецЕсли;	
	Исключение
		
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Соединение.Close();
	
КонецПроцедуры	

Функция ОписаниеКолонок(Данные, ИмяПоляНумератора = "")
	
	ОписаниеКолонок = "";
	
	Для Каждого Кл Из Данные.Колонки Цикл
		Если ОписаниеКолонок = "" Тогда
			ОписаниеКолонок = Кл.Имя;
		Иначе
			ОписаниеКолонок = ОписаниеКолонок + Символы.ПС + ", " + Кл.Имя;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ИмяПоляНумератора) Тогда
		ОписаниеКолонок = ОписаниеКолонок + Символы.ПС + ", " + ИмяПоляНумератора;	
	КонецЕсли;	
	
	Возврат ОписаниеКолонок;
	
КонецФункции	

Функция СтроковоеЗначениеПоля(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = СтрЗаменить(Значение, "'", "''");
		Значение = СокрЛП(Значение);
		СтрЗначение = "'" + Значение + "'";	
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		СтрЗначение = "'" + Формат(Значение, "Л=ru_RU; ДФ='yyyy-MM-dd HH:mm:ss'")  + "'";	
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		СтрЗначение = Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда	
		СтрЗначение = Формат(Значение, "БЛ=0x00; БИ=0x01");	
	ИначеЕсли ТипЗнч(Значение) = Тип("Null") Тогда
		СтрЗначение = "NULL";
	Иначе
		СтрЗначение = ПредставлениеСсылкиСУБД(Значение);	
	КонецЕсли;	
	
	Возврат СтрЗначение;
	
КонецФункции	

Функция ШаблонЗапросаНаУдаление(ИмяТаблицы, ИмяПоляИдентификатора)
	
	ТекстЗапроса = 
	"DELETE FROM %ИмяТаблицы% 
	|WHERE %ПолеИдентификатора% in (%Идентификаторы%)"
	;	
	
	ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса,"%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса,"%ПолеИдентификатора%", ИмяПоляИдентификатора);
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ШаблонЗапросаНаЗапись(ИмяТаблицы, ОписаниеКолонок)
	
	ТекстЗапроса =
	"INSERT %ИмяТаблицы% 
	|
	|(%ПоляТаблицы%
	|)
	|VALUES
	|	%Значения%
	|"	
	;
	
	ТекстЗапроса 		= СтрЗаменить(ТекстЗапроса,"%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса 		= СтрЗаменить(ТекстЗапроса, "%ПоляТаблицы%", ОписаниеКолонок);
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПредставлениеСсылкиСУБД(Значение) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат  "0x00000000000000000000000000000000";
	КонецЕсли;	
	
	СтрокаИД = ЗначениеВСтрокуВнутр(Значение);
	
	СтрокаИДПоКомпонентам 	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИД, ":");
	ПредставлениеСсылки0 	= СтрокаИДПоКомпонентам[1];	
	Блок0 = Сред(ПредставлениеСсылки0,1,32);
	ПредставлениеИсх0		="0x"+Врег(Блок0);
	Возврат ПредставлениеИсх0;
	
КонецФункции
