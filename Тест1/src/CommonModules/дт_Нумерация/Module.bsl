

#Область ПрограммныйИнтерфейс


Функция ПрефиксНомераДокумента(Номер, ИгнорироватьСуффикс = Истина) Экспорт
	
	
	
	Результат = "";
	
	Если ИгнорироватьСуффикс Тогда
		
		Поз = СтрНайти(Номер, "-");
		Результат = Лев(Номер, Поз);
		Для Индекс  = Поз + 1 По СтрДлина(Номер) Цикл
		
			СимволСтроки = Сред(Номер, Индекс, 1);
			Если (СимволСтроки >= "0" И СимволСтроки <= "9") Тогда
				Прервать;
			Иначе 
				Результат = Результат + СимволСтроки;
			КонецЕсли;
			
		
		КонецЦикла; 
		
	Иначе
		
		Индекс = СтрДлина(Номер);
		Пока Индекс > 0 Цикл
			СимволСтроки = Сред(Номер, Индекс, 1);
			Если НЕ (СимволСтроки >= "0" И СимволСтроки <= "9") Тогда
				Результат = Лев(Номер, Индекс);
				Прервать;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


Функция СвободныйНомерДокумента(ВидДокумента, ДатаДокумента, Префикс, Знач ИмяРеквизитаНомер = "", Знач ИгнорироватьСсылку = Неопределено)  Экспорт
	
	
	Если ПустаяСтрока(ИмяРеквизитаНомер) Тогда
		ИмяРеквизитаНомер = "Номер";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	МетаданныеДокумента = Метаданные.Документы[ВидДокумента];
	ЭтоСтроковыйТип = Истина;
	
	Если ИмяРеквизитаНомер = "Номер" Тогда
		ДлинаНомера = МетаданныеДокумента.ДлинаНомера; 
	Иначе	
		Если МетаданныеДокумента.Реквизиты[ИмяРеквизитаНомер].Тип.СодержитТип(Тип("Строка")) Тогда
			ДлинаНомера = МетаданныеДокумента.Реквизиты[ИмяРеквизитаНомер].Тип.КвалификаторыСтроки.Длина;
		Иначе 
			ЭтоСтроковыйТип = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УсловиеПрефикс = "";
	Если ЭтоСтроковыйТип И ЗначениеЗаполнено(Префикс) Тогда
		
		ШаблонНомера = Префикс;
		Для Индекс = СтрДлина(Префикс) + 1 По ДлинаНомера Цикл
			
			УсловиеПрефикс = УсловиеПрефикс + ?(НЕ ПустаяСтрока(УсловиеПрефикс), " ИЛИ ", "")	+ СтрШаблон("Док.%1 ПОДОБНО &ШаблонНомера", ИмяРеквизитаНомер) + Индекс;
			
			ШаблонНомера = ШаблонНомера + "[0-9]";
			Запрос.УстановитьПараметр("ШаблонНомера" + Индекс, ШаблонНомера);
			
		КонецЦикла;
		
		УсловиеПрефикс = СтрШаблон("(%1)", УсловиеПрефикс);
		
	КонецЕсли;
	
	Запрос.Текст = 
		СтрШаблон("ВЫБРАТЬ
			|	Док.%1 КАК Номер
			|ИЗ
			|	Документ.%2 КАК Док",
			ИмяРеквизитаНомер,
			ВидДокумента);
			
	Если Не ПустаяСтрока(УсловиеПрефикс) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ " + УсловиеПрефикс;
	КонецЕсли;
	
	ИмяРеквизитаДата = "Дата";
	Если ИмяРеквизитаНомер = "НомерУПД" Тогда
		ИмяРеквизитаДата = "ДатаУПД"
	ИначеЕсли ИмяРеквизитаНомер = "ТоварнаяНакладная" Тогда
		ИмяРеквизитаДата = "ДатаТоварнойНакладной"
	КонецЕсли;
	
	ДобавитьУсловиеПоПериодичностиДокумента(Запрос, МетаданныеДокумента, ДатаДокумента, ИмяРеквизитаДата);		
	
	
	Если ЗначениеЗаполнено(ИгнорироватьСсылку) Тогда
		Если СтрНайти(Запрос.Текст, "ГДЕ") = 0 Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС + "ГДЕ " ;
		Иначе	
			Запрос.Текст = Запрос.Текст + Символы.ПС + "И " ;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "Док.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ИгнорироватьСсылку);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Номер УБЫВ";		
	
		
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МаксимальныйЗанятыйНомер = 0;
	
	Пока Выборка.Следующий() Цикл
		
		МаксимальныйЗанятыйНомерСтр = дт_ПрефиксацияКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		Номер = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МаксимальныйЗанятыйНомерСтр);
		Если Номер <> Неопределено Тогда
			МаксимальныйЗанятыйНомер = Номер;
			Прервать
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	МаксимальныйЗанятыйНомер = МаксимальныйЗанятыйНомер + 1;
	МаксимальныйЗанятыйНомерСтр = Префикс + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(МаксимальныйЗанятыйНомер, "ЧГ=0"), ДлинаНомера - СтрДлина(Префикс), "0");
	
	Возврат ?(ЭтоСтроковыйТип, МаксимальныйЗанятыйНомерСтр, МаксимальныйЗанятыйНомер); 
	                                 
КонецФункции



Функция НомерУникален(ДокОбъект, УчитыватьПомеченныеНаУдаление = Истина, ИгнорироватьПустые = Истина, ВыводитьСообщение = Ложь, Знач ИмяРеквизитаНомер = "", Отказ = Ложь) Экспорт

	Если ПустаяСтрока(ИмяРеквизитаНомер) Тогда
		ИмяРеквизитаНомер = "Номер";
	КонецЕсли;
	
	ЗначениеРеквизита = ДокОбъект[ИмяРеквизитаНомер];
	
	Если ИгнорироватьПустые
		И Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	

	Запрос = Новый Запрос;
	
	УсловиеСсылка = "";
	
	Если ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
		УсловиеСсылка = " И	Док.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);
	КонецЕсли;
	
	Запрос.Текст = 
	СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Док.Ссылка) КАК СсылкаПредставление
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Док
	|ГДЕ
	|	(НЕ Док.ПометкаУдаления
	|			ИЛИ НЕ &УчитыватьПомеченные)
	|	И Док.%1 = &ЗначениеРеквизита",
	ИмяРеквизитаНомер) + УсловиеСсылка;
	
	
	МетаданныеДокумента = ?(ТипЗнч(ДокОбъект) = Тип("ДанныеФормыСтруктура"), ДокОбъект.Ссылка.Метаданные(), ДокОбъект.Метаданные()); 
	ДатаДокумента =  ДокОбъект.Дата;
	
	ИмяРеквизитаДата = "Дата";
	Если ИмяРеквизитаНомер = "НомерУПД" Тогда
		ИмяРеквизитаДата = "ДатаУПД"
	ИначеЕсли ИмяРеквизитаНомер = "ТоварнаяНакладная" Тогда
		ИмяРеквизитаДата = "ДатаТоварнойНакладной"
	КонецЕсли;
	ДатаДокумента = ДокОбъект[ИмяРеквизитаДата];
	
	ДобавитьУсловиеПоПериодичностиДокумента(Запрос, МетаданныеДокумента, ДатаДокумента, ИмяРеквизитаДата);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "АвансовыйОтчет", МетаданныеДокумента.Имя);
	
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	Запрос.УстановитьПараметр("УчитыватьПомеченные", УчитыватьПомеченныеНаУдаление);
	
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Пустой();
	
	Если Не Результат Тогда 
		Если ВыводитьСообщение Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Если ЗначениеЗаполнено(ДокОбъект.Ссылка)
					И ТипЗнч(ДокОбъект) <> Тип("ДанныеФормыСтруктура") Тогда
					
					 
					ТекстОшибки = СтрШаблон("%1: Не уникальное значение поля %2 (см. %3)", 
						ДокОбъект,
						ПредставлениеРеквизита(МетаданныеДокумента, ИмяРеквизитаНомер),
				        Выборка.СсылкаПредставление
					);
					
				Иначе
					 
					ТекстОшибки = СтрШаблон("Не уникальное значение поля %1 (см. %2)", 
						ПредставлениеРеквизита(МетаданныеДокумента, ИмяРеквизитаНомер),
				        Выборка.СсылкаПредставление
					);
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					ИмяРеквизитаНомер,
					,
					Отказ
				);
				
			КонецЕсли;
		Иначе
			Отказ = Истина; 
		КонецЕсли;	
	КонецЕсли;
		
		
		
	Возврат Результат;

КонецФункции

Функция ГодИзменен(Ссылка, НовоеЗначение) Экспорт

	ДатаЗаписанногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Дата");
	Возврат Год(НовоеЗначение) <> Год(ДатаЗаписанногоДокумента);

КонецФункции // ПриИзмененииДаты()


// Контроль уникальности
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПроверитьУникальностьЭлементаСправочника(СпрОбъект, ИмяРеквизита, ИгнорироватьПомеченныеНаУдаление = Истина, ИгнорироватьПустые = Истина, СообщатьОбОшибке = Истина, Отказ = Ложь, ДопОтбор = Неопределено) Экспорт

	Если ИгнорироватьПомеченныеНаУдаление 
		И СпрОбъект.ПометкаУдаления Тогда
		Возврат
	КонецЕсли;

	Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизита);
	
	Если ИгнорироватьПустые Тогда
		
		ПустыеПоля = Истина;
		
		Для каждого Реквизит Из Реквизиты цикл
			
			ПустыеПоля = ПустыеПоля И Не ЗначениеЗаполнено(СпрОбъект[Реквизит]);
			
		КонецЦикла;		
		
		Если ПустыеПоля Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Условие = "";
	ПредставлениеРеквизитов = "";
	МетаданныеОбъекта = СпрОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	
	Для каждого Реквизит Из Реквизиты цикл
			
		Условие = Условие + СтрШаблон(" И Спр.%1 = &%1", Реквизит);
		Запрос.УстановитьПараметр(Реквизит, СпрОбъект[Реквизит]);
		ПредставлениеРеквизитов = ПредставлениеРеквизитов + ?(ПустаяСтрока(ПредставлениеРеквизитов), "", ", ")  
			+ ПредставлениеРеквизита(МетаданныеОбъекта, Реквизит);
			
	КонецЦикла;		
	
	Запрос.Текст = 
	СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка,
	|	Спр.Представление,
	|	Спр.Код КАК Код
	|ИЗ
	|	Справочник.%1 КАК Спр
	|ГДЕ
	|	Спр.Ссылка <> &Ссылка
	|	И (НЕ Спр.ПометкаУдаления
	|			ИЛИ НЕ &УчитыватьПомеченные)
	|	", МетаданныеОбъекта.Имя) + Условие;
	
	
	
	Запрос.УстановитьПараметр("Ссылка", СпрОбъект.Ссылка);
	Запрос.УстановитьПараметр("УчитыватьПомеченные", ИгнорироватьПомеченныеНаУдаление);
	
	
	Если НЕ ДопОтбор = Неопределено Тогда
		Для каждого ПараметрОтбора Из ДопОтбор Цикл
		
			Запрос.Текст = Запрос.Текст + СтрШаблон(" И Спр.%1 = &%2", ПараметрОтбора.Ключ, ПараметрОтбора.Ключ) + Символы.ПС;
			Запрос.УстановитьПараметр(ПараметрОтбора.Ключ, ПараметрОтбора.Значение);
		
		КонецЦикла; 
	КонецЕсли;
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если СообщатьОбОшибке Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("Значение %1 ""%2"" не уникально (см. %3, %4)",
					?(Реквизиты.Количество() = 1, "поля", "полей"), 
					ПредставлениеРеквизитов,
					Выборка.Представление,
					Выборка.Код),
				,
				ИмяРеквизита,
				,
				Отказ
			);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
		
	

КонецПроцедуры // ПроверитьУникальностьЭлементаСправочника()


Функция ПредставлениеРеквизита(МетаданныеОбъекта, ИмяРеквизита) Экспорт

	Поле = ?(ЭтоСтандартныйРеквизит(МетаданныеОбъекта, ИмяРеквизита), 
		МетаданныеОбъекта.СтандартныеРеквизиты[ИмяРеквизита],	
		МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита)
	); 
	
	Синоним = ?(Поле = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Поле.Синоним), ИмяРеквизита, Поле.Синоним);
	
	Возврат Синоним;

КонецФункции // ПредставлениеРеквизита()

Функция ЭтоСтандартныйРеквизит(МетаданныеОбъекта, ИмяРеквизита) Экспорт

	Для каждого Поле Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
	
		Если Поле.Имя = ИмяРеквизита Тогда
			Возврат Истина;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЭтоСтандартныйРеквизит()


#КонецОбласти

#Область ПодпискиНаСобытия

Процедура ПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ Источник.ЭтоНовый() Тогда
		Возврат
	КонецЕсли;
	
	ДокументОбъект = Источник;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();	
	КонецЕсли;
	
	
	// Проверим уникальность номера. 
	Если НомерУникален(ДокументОбъект, Истина, Истина, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	// Если не уникален, то присвоим новый
	ДокументОбъект.Номер = СвободныйНомерДокумента(
		ДокументОбъект.Метаданные().Имя, 
		ДокументОбъект.Дата, 
		ПрефиксНомераДокумента(ДокументОбъект.Номер)); 
	
КонецПроцедуры


Процедура ПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	ПрефиксИБ = дт_ОбщегоНазначенияПовтИсп.ПрефиксИБ();
	
	Если Не ПустаяСтрока(ПрефиксИБ) Тогда
		Префикс = ПрефиксИБ + Префикс;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьУсловиеПоПериодичностиДокумента(Запрос, МетаданныеДокумента, ДатаДокумента, Знач ИмяРеквизитаДата = Неопределено)

	ПериодНумерации = МетаданныеДокумента.ПериодичностьНомера;
	Если ИмяРеквизитаДата = Неопределено Тогда
		ИмяРеквизитаДата = "Дата";
	КонецЕсли;
	
	Если ПериодНумерации = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
		ПериодНумерации = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год;
	КонецЕсли;
	
	Если ПериодНумерации <> Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
		
		УсловиеПериод = СтрШаблон("Док.%1 МЕЖДУ &НачалоПериода И &КонецПериода", ИмяРеквизитаДата);
		
		Если ПериодНумерации = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
			
			Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ДатаДокумента));
			Запрос.УстановитьПараметр("КонецПериода", КонецГода(ДатаДокумента));
			
		ИначеЕсли ПериодНумерации = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
			Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ДатаДокумента));
			Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ДатаДокумента));
		ИначеЕсли ПериодНумерации = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
			Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаДокумента));
			Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаДокумента));
		ИначеЕсли ПериодНумерации = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
			Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаДокумента));
			Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаДокумента));
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст 
			+ ?(СтрНайти(Запрос.Текст, "ГДЕ") = 0, " ГДЕ ", " И ") + УсловиеПериод;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьУсловиеПоПериодичностиДокумента()



#КонецОбласти