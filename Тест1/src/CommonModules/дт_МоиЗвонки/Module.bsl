#Область ПрограммныйИнтерфейс

Процедура ЗапуститьПолучениеТаблицыЗвонков(Знач Параметры, Знач АдресРезультата = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Клиент = Неопределено;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Клиент =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ссылка");
	ИначеЕсли ТипЗнч(Параметры) = Тип("СправочникСсылка.Клиенты") Тогда
		Клиент = Параметры;
	Иначе
		ВызватьИсключение "Неверный тип параметра";
	КонецЕсли;
	
	ТаблицаРезультат = ПолучитьТаблицуЗвонков();
	
	Результат = Новый Структура("ТаблицаРезультат", 
		ТаблицаРезультат
	);
	
	// Запускаем поиск
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	
КонецПроцедуры

Функция ПолучитьТаблицуЗвонков() Экспорт
	
	// получим список телефонов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлиентыДополнительныеКонтакты.Телефон КАК Телефон
		|ИЗ
		|	Справочник.Клиенты.ДополнительныеКонтакты КАК КлиентыДополнительныеКонтакты
		|ГДЕ
		|	НЕ КлиентыДополнительныеКонтакты.Телефон ПОДОБНО """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Клиенты.Телефон
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Телефоны = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Телефон");
	ТелефоныПреобразованные = Новый Массив();
	
	Для каждого НомерТелефона Из Телефоны Цикл
		
		НомераПреобразованные = ПреобразоватьНомерТелефона(НомерТелефона);
		Если ТипЗнч(НомераПреобразованные) = Тип("Строка") Тогда
			ТелефоныПреобразованные.Добавить(НомераПреобразованные);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТелефоныПреобразованные, НомераПреобразованные);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультат = ПолучитьТаблицуЗвонковПоНомерам(ТелефоныПреобразованные);
	
	Возврат ТаблицаРезультат;
		
КонецФункции



Процедура ЗапуститьПолучениеТаблицыЗвонковПоКлиенту(Знач Параметры, Знач АдресРезультата = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Клиент = Неопределено;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Клиент =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ссылка");
	ИначеЕсли ТипЗнч(Параметры) = Тип("СправочникСсылка.Клиенты") Тогда
		Клиент = Параметры;
	Иначе
		ВызватьИсключение "Неверный тип параметра";
	КонецЕсли;
	
	ТаблицаРезультат = ПолучитьТаблицуЗвонковПоКлиенту(Клиент);
	
	Результат = Новый Структура("ТаблицаРезультат", 
		ТаблицаРезультат
	);
	
	// Запускаем поиск
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	
КонецПроцедуры

Функция ПолучитьТаблицуЗвонковПоКлиенту(Клиент) Экспорт
	
	// получим список телефонов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлиентыДополнительныеКонтакты.Телефон КАК Телефон
		|ИЗ
		|	Справочник.Клиенты.ДополнительныеКонтакты КАК КлиентыДополнительныеКонтакты
		|ГДЕ
		|	КлиентыДополнительныеКонтакты.Ссылка = &Ссылка
		|	И НЕ КлиентыДополнительныеКонтакты.Телефон ПОДОБНО """"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Клиенты.Телефон КАК Телефон
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Ссылка = &Ссылка
		|	И НЕ Клиенты.Телефон ПОДОБНО """"
		|;";
		
	Запрос.УстановитьПараметр("Ссылка", Клиент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Телефоны = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Телефон");
	ТелефоныПреобразованные = Новый Массив();
	
	Для каждого НомерТелефона Из Телефоны Цикл
		
		НомераПреобразованные = ПреобразоватьНомерТелефона(НомерТелефона);
		Если ТипЗнч(НомераПреобразованные) = Тип("Строка") Тогда
			ТелефоныПреобразованные.Добавить(НомераПреобразованные);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТелефоныПреобразованные, НомераПреобразованные);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультат = ПолучитьТаблицуЗвонковПоНомерам(ТелефоныПреобразованные);
	
	Возврат ТаблицаРезультат;
		
КонецФункции


Процедура ЗапуститьПолучениеТаблицыЗвонковПоЗаявке(Знач Параметры, Знач АдресРезультата = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Заявка = Неопределено;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Заявка =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ссылка");
	ИначеЕсли ТипЗнч(Параметры) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Заявка = Параметры;
	Иначе
		ВызватьИсключение "Неверный тип параметра";
	КонецЕсли;
	
	ТаблицаРезультат = ПолучитьТаблицуЗвонковПоЗаявке(Заявка);
	
	Результат = Новый Структура("ТаблицаРезультат", 
		ТаблицаРезультат
	);
	
	// Запускаем поиск
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	
КонецПроцедуры


Функция ПолучитьТаблицуЗвонковПоЗаявке(Заявка) Экспорт
	
	// получим список телефонов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.НомерТелефона КАК Телефон
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Телефоны = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Телефон");
	ТелефоныПреобразованные = Новый Массив();
	
	Для каждого НомерТелефона Из Телефоны Цикл
		
		НомераПреобразованные = ПреобразоватьНомерТелефона(НомерТелефона);
		Если ТипЗнч(НомераПреобразованные) = Тип("Строка") Тогда
			ТелефоныПреобразованные.Добавить(НомераПреобразованные);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТелефоныПреобразованные, НомераПреобразованные);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультат = ПолучитьТаблицуЗвонковПоНомерам(ТелефоныПреобразованные);
	
	Возврат ТаблицаРезультат;
		
КонецФункции





Функция ПреобразоватьНомерТелефона(НомерТелефона) Экспорт

	НомераТелефонов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НомерТелефона, ",/");//СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НомерТелефона, ",");
	
	Если НомераТелефонов.Количество() > 1 Тогда
		
		Результат = Новый Массив();
		
		Для каждого Номер Из НомераТелефонов Цикл
			Результат.Добавить(ПреобразоватьНомерТелефона(Номер));
		КонецЦикла;
		
	Иначе
		Результат = ""; 
		Попытка
		Для Индекс = 1 По СтрДлина(НомераТелефонов[0]) Цикл
			ЧастьСтроки = Сред(НомераТелефонов[0], Индекс, 1);
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастьСтроки) Тогда
				Результат = Результат + ЧастьСтроки;
			КонецЕсли;
		КонецЦикла;
			
		Если Лев(Результат, 1) = "8" Тогда
			Результат = "+7" + Сред(Результат, 2);	
		КонецЕсли;
		
		Если Лев(Результат, 1) = "7" Тогда
			Результат = "+" + Результат;	
		КонецЕсли;
	Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	

КонецФункции // ПреобразоватьНомерТелефона()

Функция ПолучитьТаблицуЗвонковПоНомеру(НомерТелефона, ПараметрыПодключения, Соединение, Отказ = Ложь) Экспорт
	
	Результат = НоваяТаблицаЗвонков();

	Токен = ПараметрыПодключения.Токен;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыПодключения.АдресСервера);
	
	
	Запрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ЗапросСтруктура = Новый Структура();
	ЗапросСтруктура.Вставить("user_name", ПараметрыПодключения.ИмяПользователя);
	ЗапросСтруктура.Вставить("api_key", Токен);
	ЗапросСтруктура.Вставить("action", "calls.list");
	//ЗапросСтруктура.Вставить("from_date", "");
	ЗапросСтруктура.Вставить("from_id" , 0);
	ЗапросСтруктура.Вставить("phone" , НомерТелефона);
	ЗапросСтруктура.Вставить("max_results" , 100);
	ЗапросСтруктура.Вставить("supervised" , 1);
	
	// параметры запроса
	ПотокJSON = Новый ЗаписьJSON();
	ПотокJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
	СтрокаJSON = ПотокJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	
	Запрос.Заголовки.Вставить("Content-Length", СтрДлина(СтрокаJSON));
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон("Не удалось получить список звонков. %1",
				ОписаниеОшибки()),
			,
			,
			,
			Отказ
		);
		Возврат Результат;
	КонецПопытки;
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстОтвета);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ
		);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеJSON = дт_ОбщегоНазначения.ПолучитьЗначениеИзJSONСтроки(ТекстОтвета);
	Если ДанныеJSON = Неопределено Тогда
		
		ТекстОшибки = "Ошибка чтения json";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ
		);
		Возврат Результат; 
		
	КонецЕсли;
	
	Данные = дт_ОбщегоНазначения.ПолучитьСвойствоОбъектаJSON(ДанныеJSON, "results");
	Если Данные = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого Запись Из Данные Цикл
		
		СсылкаНаЗапись = Запись.Получить("recording");
		Если СсылкаНаЗапись <> Неопределено 
			И ЗначениеЗаполнено(СсылкаНаЗапись) Тогда
			//Сообщить(СсылкаНаЗапись);
			
//			СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СсылкаНаЗапись);
//			Запрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
			
//			ИмяФайла = СсылкаНаЗапись;
//			Если СтрЗаканчиваетсяНа(ИмяФайла, "/") Тогда
//				СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИмяФайла);
//			КонецЕсли;

			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Дата = ПолучитьДатуИзUTC(Запись.Получить("start_time"));
			НоваяСтрока.ЗаписьURL = СсылкаНаЗапись;
			НоваяСтрока.НомерТелефона = Запись.Получить("client_number");
			НоваяСтрока.Длительность = ПолучитьДатуИзСекунд(Запись.Получить("duration"));
			НоваяСтрока.user_id = Запись.Получить("user_id");
			НоваяСтрока.ТипЗвонка = Запись.Получить("direction"); 
//			ИмяФайлаВрем = ПолучитьИмяВременногоФайла(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла));
//			Ответ = Соединение.Получить(Запрос, ИмяФайлаВрем);
//			Сообщить(ИмяФайлаВрем);
			//Прервать;
		КонецЕсли;
			
	
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыПодключения() Экспорт
	ПараметрыПодключения = НовыеПараметрыПодключения();
	
	ПараметрыПодключения.АдресСервера = Константы.дт_МоиЗвонкиАдресСервера.Получить();
	ПараметрыПодключения.ИмяПользователя = Константы.дт_МоиЗвонкиЛогин.Получить();
	ПараметрыПодключения.Пароль = Константы.дт_МоиЗвонкиПароль.Получить();
	ПараметрыПодключения.Вставить("Токен", Константы.дт_МоиЗвонкиAPI_Key.Получить());	
	
	Возврат ПараметрыПодключения;	
КонецФункции

Функция ПолучитьТаблицуЗвонковПоНомерам(НомераТелефонов, Отказ = Ложь) Экспорт
	
	Результат = НоваяТаблицаЗвонков();
	
	Если НомераТелефонов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	
	Соединение = ПолучитьСоединение(ПараметрыПодключения);
	
	Если Соединение = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не удалось подключиться к серверу Мои звонки",
			,
			,
			,
			Отказ
		);
		Возврат Результат;
	КонецЕсли;	
	 
	Для каждого НомерТелефона Из НомераТелефонов Цикл
		
		ТаблицаЗвонки = ПолучитьТаблицуЗвонковПоНомеру(НомерТелефона, ПараметрыПодключения, Соединение);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗвонки, Результат);
			
	КонецЦикла;
	
	//Результат.Сортировать("Дата");
	
	Соединение = Неопределено;
	
	Возврат Результат;
КонецФункции
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


Функция НоваяТаблицаЗвонков()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));	
	Результат.Колонки.Добавить("ЗаписьURL", ОбщегоНазначения.ОписаниеТипаСтрока(0));	
	Результат.Колонки.Добавить("НомерТелефона", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Результат.Колонки.Добавить("Длительность", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время));
	Результат.Колонки.Добавить("user_id", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Результат.Колонки.Добавить("ТипЗвонка", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	Возврат Результат;
		
КонецФункции



Функция НовыеПараметрыПодключения() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("АдресСервера");
	Результат.Вставить("ИмяПользователя");
	Результат.Вставить("Пароль");
	Результат.Вставить("Порт");
	Результат.Вставить("Таймаут");
	Результат.Вставить("ПассивныйРежим");
	Результат.Вставить("РезультатВыполнения", Новый Структура("МассивОшибок", Новый Массив()));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСоединение(ПараметрыПодключения) Экспорт

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыПодключения.АдресСервера);
	
	ЗащищенноеСоединение = Неопределено;
	Если СтруктураURI.Схема = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows()
		);
	КонецЕсли;
	
	Попытка
		
		СоединениеHTTP = Новый HTTPСоединение(СтруктураURI.Хост, 
			СтруктураURI.Порт, 
			ПараметрыПодключения.ИмяПользователя, 
			ПараметрыПодключения.Пароль,
			Неопределено, 
			ПараметрыПодключения.Таймаут, 
			ЗащищенноеСоединение
		);
		
	Исключение
		СоединениеHTTP = Неопределено;
		//ЗаписатьТекстОшибки(ОписаниеОшибки(), ПараметрыВыполнения);	
	КонецПопытки;
	
	
	Возврат СоединениеHTTP;
	

КонецФункции // ПолучитьСоединениеHTTP()



#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ПолучитьДатуИзUTC(ВремяUTC) 
	Результат = Дата(1970, 1, 1) + ВремяUTC;
	
	ЧасовойПоясИнформационнойБазы = ЧасовойПояс();//ПолучитьЧасовойПоясИнформационнойБазы(); // Europe/Moscow
	
	УниверсальнаяДата = УниверсальноеВремя(Результат, "UTC");
	Результат = МестноеВремя(УниверсальнаяДата, ЧасовойПоясИнформационнойБазы); 
	
	Возврат Результат;
КонецФункции

Функция ПолучитьДатуИзСекунд(ВремяСек)
	
	Если ТипЗнч(ВремяСек) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Дата(1, 1, 1) + ВремяСек;
	
КонецФункции

#КонецОбласти