

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаявкаНаСборку";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на сборку'");
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаявкаНаПеремещение";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на перемещение'");
	КомандаПечати.Порядок = 20;

	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаСборку") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаявкаНаСборку", "Заявка на сборку", 
			ПечатьЗаявкаНаСборку(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаПеремещение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаявкаНаПеремещение", "Заявка на перемещение", 
			ПечатьЗаявкаНаПеремещение(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	
КонецПроцедуры


Функция ПечатьЗаявкаНаСборку(МассивОбъектов, ОбъектыПечати) Экспорт
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	//ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаСборку";
	
	Макет = ПолучитьМакет("ПФ_MXL_ЗаявкаНаСборку");	
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов);
	
	
	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаТовары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаТовары.Сбросить();
		
		ЕстьТовары = ВыборкаТовары.НайтиСледующий(СтруктураПоиска);


		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДопПараметры = Новый Структура();	
		ДопПараметры.Вставить("Номер", дт_ПрефиксацияКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
		ДопПараметры.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДЛФ=D;"));
		ДопПараметры.Вставить("Логист", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Логист));
		ДопПараметры.Вставить("Заголовок", ПолучитьЗаголовокДокумента(ДанныеПечати.ВидОперации));
		ДопПараметры.Вставить("ОтветственныйПредставление", ПолучитьПредставлениеОтветственного(ДанныеПечати.ВидОперации));
//		Если ТипЗнч(ДанныеПечати.Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
//			ДопПараметры.Вставить("Клиент", ДанныеПечати.ОснованиеСкладПолучатель);
//		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.Заполнить(ДопПараметры);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		Если ЕстьТовары Тогда
					
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			СтрокаВыборки = ВыборкаТовары.Выбрать();
			
			НомерСтроки = 1;		
			ДопПараметрыСтроки = Новый Структура();
			Пока СтрокаВыборки.Следующий() Цикл
				
				ДопПараметрыСтроки.Вставить("НомерСтроки", НомерСтроки);
				ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ОбластьМакета.Параметры.Заполнить(ДопПараметрыСтроки);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("footer");
		ОбластьМакета.Параметры.Заполнить(ДопПараметры);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
	
КонецФункции

Функция ПечатьЗаявкаНаПеремещение(МассивОбъектов, ОбъектыПечати) Экспорт
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	//ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаСборку";
	
	Макет = ПолучитьМакет("ПФ_MXL_Перемещение");	
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов);
	
	
	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаТовары 		= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаТовары.Сбросить();
		
		ЕстьТовары = ВыборкаТовары.НайтиСледующий(СтруктураПоиска);


		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДопПараметры = Новый Структура();	
		ДопПараметры.Вставить("Номер", дт_ПрефиксацияКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
		ДопПараметры.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДЛФ=D;"));
		ДопПараметры.Вставить("Логист", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Логист));
		ДопПараметры.Вставить("Заголовок", ПолучитьЗаголовокДокумента(ДанныеПечати.ВидОперации));
		ДопПараметры.Вставить("ОтветственныйПредставление", ПолучитьПредставлениеОтветственного(ДанныеПечати.ВидОперации));
		//ДопПараметры.Вставить("Состояние", ДанныеПечати.Состояние);
//		Если ТипЗнч(ДанныеПечати.Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
//			ДопПараметры.Вставить("Клиент", ДанныеПечати.ОснованиеСкладПолучатель);
//		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.Заполнить(ДопПараметры);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		Если ЕстьТовары Тогда
					
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			СтрокаВыборки = ВыборкаТовары.Выбрать();
			
			НомерСтроки = 1;		
			ДопПараметрыСтроки = Новый Структура();
			Пока СтрокаВыборки.Следующий() Цикл
				
				ДопПараметрыСтроки.Вставить("НомерСтроки", НомерСтроки);
				ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ОбластьМакета.Параметры.Заполнить(ДопПараметрыСтроки);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("footer");
		ОбластьМакета.Параметры.Заполнить(ДопПараметры);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		//ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область("R1C1:R20C14");
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
	
КонецФункции


Функция ПолучитьДанныеДляПечати(МассивОбъектов)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Номер КАК Номер,
	|	Док.Дата КАК Дата,
	|	Док.Ответственный КАК Ответственный,
	|	Док.Клиент КАК Клиент,
	|	Док.Основание КАК Основание,
	|	Док.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА Док.Основание ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА Док.Основание.СкладПолучатель
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ОснованиеСкладПолучатель,
	|	Док.Логист КАК Логист,
	|	Док.Проект КАК Проект,
	|	Док.Инициатор КАК Инициатор,
	|	Док.ВидОперации КАК ВидОперации,
	|	Док.Состояние КАК Состояние
	|ИЗ
	|	Документ.ЗаявкаНаСборку КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Номенклатура.Код КАК Код,
	|	Товары.Номенклатура.НомерПроизводителя КАК НомерПроизводителя,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК ТоварНаименование,
	|	МестаХранения.МестоХранения КАК МестоХранения,
	|	Товары.Партия КАК Партия,
	|	Остаток.КолвоОстаток КАК ОстатокНаСкладе,
	|	Товары.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ЗаявкаНаСборку.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК Остаток
	|		ПО Товары.Номенклатура = Остаток.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дт_МестаХраненияНоменклатуры.СрезПоследних КАК МестаХранения
	|		ПО Товары.Ссылка.Склад = МестаХранения.Склад
	|			И Товары.Номенклатура = МестаХранения.Номенклатура
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Рез = Новый Структура();
	Рез.Вставить("РезультатПоШапке", РезультатЗапроса[0]);
	Рез.Вставить("РезультатПоТабличнойЧасти", РезультатЗапроса[1]);
	
	Возврат Рез;

КонецФункции // ПолучитьДанныеДляПечати()

Функция ПолучитьЗаголовокДокумента(ВидОперации) 
	Возврат Строка(ВидОперации);	
КонецФункции

Функция ПолучитьПредставлениеОтветственного(ВидОперации) 
	
	Результат = "Ответственный";
	
	Суффикс = ПолучитьЗаголовокДокумента(ВидОперации);
	
	Если Не ПустаяСтрока(Суффикс) Тогда
		Результат = Результат + " за " + нрег(Суффикс);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти


#Область Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	НомераТаблиц = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Реквизиты.Дата, ВидГраницы.Исключая));
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст =
		ТекстЗапросаСписанныеТовары(НомераТаблиц) + 
		ТекстЗапросаТоварыВТранзитнойЗоне(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();

	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		Таблица =  Результат[НомерТаблицы.Значение].Выгрузить();
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Таблица);
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции

Функция ПодготовитьПараметрыПроведенияВТранзит(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	НомераТаблиц = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Реквизиты.Дата, ВидГраницы.Исключая));
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст =
		ТекстЗапросаСписанныеТоварыВТранзит(НомераТаблиц) + 
		ТекстЗапросаТоварыВТранзитнойЗонеВТранзит(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();

	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		Таблица =  Результат[НомерТаблицы.Значение].Выгрузить();
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Таблица);
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции



Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.СкладТранзитный КАК СкладТранзитный,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Состояние КАК Состояние,
	|	Реквизиты.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ЗаявкаНаСборку КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.СкладТранзитный КАК СкладТранзитный,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Состояние КАК Состояние,
	|	Реквизиты.Ответственный КАК Ответственный
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()


Функция ТекстЗапросаСписанныеТовары(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСписанныеТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.Автомобиль КАК Автомобиль,
	|	Товары.Партия КАК Партия,
	|	Товары.Распоряжение КАК Распоряжение,
	|	Товары.Списать КАК Списать
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЗаявкаНаСборку.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.СкладТранзитный КАК Склад,
	|	ВТ_Товары.Номенклатура КАК Товар,
	|	ВТ_Товары.Количество КАК Колво,
	|	ВТ_Товары.Автомобиль КАК машина,
	|	ВТ_Товары.Партия КАК индкод
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Реквизиты.СкладТранзитный <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.Склад КАК Склад,
	|	ВТ_Товары.Номенклатура КАК Товар,
	|	ВТ_Товары.Количество КАК Колво,
	|	ВТ_Товары.Автомобиль КАК машина,
	|	ВТ_Товары.Партия КАК индкод
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Реквизиты.СкладТранзитный <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()

Функция ТекстЗапросаТоварыВТранзитнойЗоне(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаТоварыВТранзитнойЗоне", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.СкладТранзитный КАК Склад,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.Автомобиль КАК Автомобиль,
	|	ВТ_Товары.Партия КАК Партия,
	|	ВТ_Товары.Распоряжение КАК Распоряжение
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Реквизиты.СкладТранзитный <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()

Функция ТекстЗапросаСписанныеТоварыВТранзит(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСписанныеТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.Автомобиль КАК Автомобиль,
	|	Товары.Партия КАК Партия,
	|	Товары.Распоряжение КАК Распоряжение,
	|	Товары.Списать КАК Списать
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЗаявкаНаСборку.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.СкладТранзитный КАК Склад,
	|	ВТ_Товары.Номенклатура КАК Товар,
	|	ВТ_Товары.Количество КАК Колво,
	|	ВТ_Товары.Автомобиль КАК машина,
	|	ВТ_Товары.Партия КАК индкод
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Реквизиты.СкладТранзитный <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.Склад КАК Склад,
	|	ВТ_Товары.Номенклатура КАК Товар,
	|	ВТ_Товары.Количество КАК Колво,
	|	ВТ_Товары.Автомобиль КАК машина,
	|	ВТ_Товары.Партия КАК индкод
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Реквизиты.СкладТранзитный <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()

Функция ТекстЗапросаТоварыВТранзитнойЗонеВТранзит(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаТоварыВТранзитнойЗоне", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.СкладТранзитный КАК Склад,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.Автомобиль КАК Автомобиль,
	|	ВТ_Товары.Партия КАК Партия,
	|	ВТ_Товары.Распоряжение КАК Распоряжение
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Реквизиты.СкладТранзитный <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()


//
// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументОбъект, ПараметрыПроведения, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДвиженияТовары.Склад КАК Склад,
	|	ДвиженияТовары.Номенклатура КАК Номенклатура,
	|	ДвиженияТовары.Автомобиль КАК Автомобиль,
	|	ДвиженияТовары.Партия КАК Партия,
	|	ДвиженияТовары.Распоряжение КАК Распоряжение,
	|	ВЫБОР
	|		КОГДА ДвиженияТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ДвиженияТовары.Количество
	|		ИНАЧЕ -ДвиженияТовары.Количество
	|	КОНЕЦ КАК КоличествоИзменение,
	|	ДвиженияТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ДвиженияТовары
	|ИЗ
	|	&ДвиженияТовары КАК ДвиженияТовары
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДвиженияТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДвиженияТовары.Количество
	|			ИНАЧЕ -ДвиженияТовары.Количество
	|		КОНЕЦ < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияТовары.Номенклатура) КАК НоменклатураПредставление,
	|	ДвиженияТовары.Склад КАК Склад,
	|	ДвиженияТовары.Распоряжение КАК Распоряжение,
	|	ДвиженияТовары.Номенклатура КАК Номенклатура,
	|	ДвиженияТовары.Автомобиль КАК Автомобиль,
	|	ДвиженияТовары.Партия КАК Партия,
	|	ДвиженияТовары.КоличествоИзменение КАК КоличествоИзменение,
	|	ДвиженияТовары.НомерСтроки КАК НомерСтроки,
	|	ТоварыОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	ВТ_ДвиженияТовары КАК ДвиженияТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВТранзитнойЗоне.Остатки(&МоментКонтроля, ) КАК ТоварыОстатки
	|		ПО ДвиженияТовары.Номенклатура = ТоварыОстатки.Номенклатура
	|			И ДвиженияТовары.Склад = ТоварыОстатки.Склад
	|			И ДвиженияТовары.Автомобиль = ТоварыОстатки.Автомобиль
	|			И ДвиженияТовары.Партия = ТоварыОстатки.Партия
	|			И ДвиженияТовары.Распоряжение = ТоварыОстатки.Распоряжение
	|ГДЕ
	|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) < 0";
	
	//Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ТаблицаИсточник = ПараметрыПроведения.ТаблицыДляДвижений.ТаблицаТоварыВТранзитнойЗоне;
	Запрос.УстановитьПараметр("МоментКонтроля", ПараметрыПроведения.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ДвиженияТовары", ТаблицаИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	// Отрицательный остаток по счету
	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// определим индекс строки табличной части для отображения баллона
			ПараметрыПоискаСтроки = Новый Структура("Номенклатура,Партия,Распоряжение");
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаСтроки, Выборка);
			СтрокиТабличнойЧасти = ТаблицаИсточник.НайтиСтроки(ПараметрыПоискаСтроки);
			
			Поле = "";
			НомерСтроки = 0;
			
			Если СтрокиТабличнойЧасти.Количество() <> 0 Тогда
				
				НомерСтроки = СтрокиТабличнойЧасти[0].НомерСтроки;
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, "Количество");
				
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				"Строка %1: Количество товара %2 (%3) по распоряжению %4 превышает остаток в транзитной зоне %5. Нехватка: %6", 
				НомерСтроки, 
				Выборка.НоменклатураПредставление,
				Выборка.Партия,
				Выборка.Распоряжение,
				Выборка.Склад,
				//Выборка.КоличествоИзменение, 
				-Выборка.Количество);
			
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьКонтроль()


#КонецОбласти 




#КонецОбласти

#Область ОбработчикиСобытий
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон("Перемещение. %1 %2 от %3", Данные.ВидОперации, Данные.Номер, Данные.Дата);	
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	Поля.Добавить("ВидОперации");
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс



#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти

#КонецЕсли