




#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
    УстановитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ДатаПриИзмененииСервер()

	Если дт_Нумерация.ГодИзменен(Объект.Ссылка, Объект.Дата) Тогда
		Объект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ДатаПриИзмененииСервер()


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Сотрудники

&НаКлиенте
Процедура СотрудникиКоличествоОтработаноПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Начисления", Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиКоличествоРабочееВремяПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Начисления", Элемент.Имя);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
	Новый Структура("Значение, РежимВыбораПериода, ЗапрашиватьРежимВыбораПериодаУВладельца", Объект.период, "Месяц", Ложь),
		ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте	
Процедура ПериодНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Объект.Период = РезультатЗакрытия;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Объект.Начисления.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
		|	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
		|	ДолжностиСотрудниковСрезПоследних.Период КАК Период,
		|	ДолжностиСотрудниковСрезПоследних.Оклад КАК Оклад
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	РегистрСведений.ДолжностиСотрудников.СрезПоследних(&КонецПериода,) КАК ДолжностиСотрудниковСрезПоследних
		|ГДЕ
		|	(ДолжностиСотрудниковСрезПоследних.Подразделение В ИЕРАРХИИ (&Подразделение)
		|	ИЛИ НЕ &ЕстьОтборПоПодразделению)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Должность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Сотрудники.Должность КАК Должность
		|ПОМЕСТИТЬ ВТ_Должности
		|ИЗ
		|	ВТ_Сотрудники КАК ВТ_Сотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыДолжностей.Период КАК Период,
		|	ПараметрыДолжностей.Должность КАК Должность,
		|	ПараметрыДолжностей.Процент КАК Процент,
		|	ПараметрыДолжностей.Ставка КАК Ставка,
		|	ПараметрыДолжностей.ВидАналитики КАК ВидАналитики,
		|	ПараметрыДолжностей.Оклад КАК Оклад,
		|	ПараметрыДолжностей.НормироватьОтработанноеВремя КАК НормироватьОтработанноеВремя,
		|	Должности.СпособНачисленияОклада КАК СпособНачисленияОклада,
		|	Должности.Календарь КАК Календарь,
		|	Должности.СпособНачисленияПремии КАК СпособНачисленияПремии,
		|	Должности.СпособНачисленияСдельнойОплаты КАК СпособНачисленияСдельнойОплаты,
		|	Должности.ВычитатьНеявкиИзСдельнойОплаты КАК ВычитатьНеявкиИзСдельнойОплаты
		|ИЗ
		|	ВТ_Должности КАК ВТ_Должности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДолжностиПредприятия КАК Должности
		|		ПО ВТ_Должности.Должность = Должности.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыДолжностей КАК ПараметрыДолжностей
		|		ПО ВТ_Должности.Должность = ПараметрыДолжностей.Должность
		|		И (ПараметрыДолжностей.Период >= &НачалоПериода)
		|		И (ПараметрыДолжностей.Период <= &КонецПериода)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПараметрыДолжностейСрезПоследних.Период > &НачалоПериода
		|			ТОГДА ПараметрыДолжностейСрезПоследних.Период
		|		ИНАЧЕ &НачалоПериода
		|	КОНЕЦ,
		|	ПараметрыДолжностейСрезПоследних.Должность,
		|	ПараметрыДолжностейСрезПоследних.Процент,
		|	ПараметрыДолжностейСрезПоследних.Ставка,
		|	ПараметрыДолжностейСрезПоследних.ВидАналитики,
		|	ПараметрыДолжностейСрезПоследних.Оклад,
		|	ПараметрыДолжностейСрезПоследних.НормироватьОтработанноеВремя,
		|	Должности.СпособНачисленияОклада,
		|	Должности.Календарь,
		|	Должности.СпособНачисленияПремии,
		|	Должности.СпособНачисленияСдельнойОплаты,
		|	Должности.ВычитатьНеявкиИзСдельнойОплаты
		|ИЗ
		|	ВТ_Должности КАК ВТ_Должности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДолжностиПредприятия КАК Должности
		|		ПО ВТ_Должности.Должность = Должности.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыДолжностей.СрезПоследних(&КонецПериода,) КАК
		|			ПараметрыДолжностейСрезПоследних
		|		ПО ВТ_Должности.Должность = ПараметрыДолжностейСрезПоследних.Должность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Должность,
		|	Период УБЫВ
		|ИТОГИ
		|ПО
		|	Должность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Сотрудники.Сотрудник КАК Сотрудник,
		|	ВТ_Сотрудники.Должность КАК Должность,
		|	ВТ_Сотрудники.Оклад КАК Оклад,
		|	ВТ_Сотрудники.Подразделение КАК Подразделение,
		|	ВТ_Сотрудники.Период КАК ДатаНачала
		|ИЗ
		|	ВТ_Сотрудники КАК ВТ_Сотрудники
		|
		|УПОРЯДОЧИТЬ ПО
		|	Должность
		|ИТОГИ
		|	МИНИМУМ(ДатаНачала)
		|ПО
		|	Должность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	дт_НачисленияФиксированныеПланСрезПоследних.Сотрудник КАК Сотрудник,
		|	дт_НачисленияФиксированныеПланСрезПоследних.ВидРасчета,
		|	дт_НачисленияФиксированныеПланСрезПоследних.Сумма КАК СуммаНачислено
		|ИЗ
		|	РегистрСведений.дт_НачисленияФиксированныеПлан.СрезПоследних(&КонецПериода,) КАК
		|		дт_НачисленияФиксированныеПланСрезПоследних
		|ГДЕ
		|	КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &КонецПериода
		|	ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	Сотрудник";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ЕстьОтборПоПодразделению", ЗначениеЗаполнено(Объект.Подразделение));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Параметры должностей с периодами действия
	ВыборкаДолжности = РезультатЗапроса[РезультатЗапроса.Количество() - 3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПараметрыДолжностей = Новый Соответствие();
	
	Пока ВыборкаДолжности.Следующий() Цикл
		ВыборкаПериодыДолжностей = ВыборкаДолжности.Выбрать();
		
		ПериодыДолжности = Новый Массив();
		КонецПериода = КонецМесяца(Объект.Период);
		Пока ВыборкаПериодыДолжностей.Следующий() Цикл
			
			ПериодДолжности = Новый Структура("НачалоПериода,КонецПериода,Процент,Ставка,ВидАналитики,Оклад"
				+ ",СпособНачисленияОклада,СпособНачисленияПремии,СпособНачисленияСдельнойОплаты,Календарь"
				+ ",НормироватьОтработанноеВремя,ВычитатьНеявкиИзСдельнойОплаты"
			);
			ЗаполнитьЗначенияСвойств(ПериодДолжности, ВыборкаПериодыДолжностей);
			ПериодДолжности.НачалоПериода = ВыборкаПериодыДолжностей.Период;
			ПериодДолжности.КонецПериода = КонецПериода;
			ПериодыДолжности.Добавить(ПериодДолжности);	
			
			КонецПериода = ВыборкаПериодыДолжностей.Период - 1;
		КонецЦикла;
		
		ПараметрыДолжностей.Вставить(ВыборкаДолжности.Должность, ПериодыДолжности);
		
	КонецЦикла;
	
	
	
	ВыборкаСотрудникиДолжность = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаНадбавки = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудникиДолжность.Следующий() Цикл
		
		ВыборкаСотрудник = ВыборкаСотрудникиДолжность.Выбрать();
		Пока ВыборкаСотрудник.Следующий() Цикл
			
			ЗаполнитьПоСотруднику(ВыборкаСотрудник.Сотрудник, 
				ВыборкаСотрудник.Должность, 
				ВыборкаСотрудник.Подразделение, 
				ПараметрыДолжностей, 
				ВыборкаСотрудник.ДатаНачала, 
				ВыборкаСотрудник.Оклад,
				ВыборкаНадбавки
			);
				
		КонецЦикла;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьПоСотруднику(Сотрудник, Должность, Подразделение, ПараметрыДолжностей, ДатаНачала, Оклад, ВыборкаНадбавки)
	
	ПериодыДолжности = ПараметрыДолжностей.Получить(Должность);
	Если ПериодыДолжности = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для каждого ПараметрыДолжности Из ПериодыДолжности Цикл
		
		НачалоПериода = Макс(ДатаНачала, ПараметрыДолжности.НачалоПериода); 
		КонецПериода =  ПараметрыДолжности.КонецПериода;
		СтрокаОклад = Неопределено;
		
		// Оклад
		Если ЗначениеЗаполнено(ПараметрыДолжности.СпособНачисленияОклада)  Тогда		
			
			НоваяСтрока = Объект.Начисления.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.ВидРасчета = Справочники.дт_ВидыРасчетовЗарплаты.Оклад;
			НоваяСтрока.Комментарий = СтрШаблон("%1 - %2", 
				Формат(НачалоПериода, "ДЛФ=D"), 
				Формат(КонецПериода, "ДЛФ=D")
			);
			НоваяСтрока.СуммаБаза = ?(Оклад <> 0, Оклад, ПараметрыДолжности.Оклад);
			СтрокаОклад = НоваяСтрока;
			
		КонецЕсли;
		
		Если ПараметрыДолжности.СпособНачисленияОклада = Перечисления.СпособыНачисленияОклада.ПоДням 
			ИЛИ ПараметрыДолжности.СпособНачисленияОклада = Перечисления.СпособыНачисленияОклада.ПоЧасам Тогда	
				
			РабочееВремя = дт_Зарплата.ПолучитьРабочееВремяПоКалендарю(
					ПараметрыДолжности.Календарь,
					НачалоПериода,
					КонецПериода,
					ПараметрыДолжности.СпособНачисленияОклада
			);
			
			ОтработанноеВремя =   дт_Зарплата.ПолучитьВремяПоТабелю(Сотрудник, 
						НачалоПериода,
						КонецПериода,
						Перечисления.ТипыДнейТабеля.РабочийДень,
						ПараметрыДолжности.СпособНачисленияОклада
			);
						
			НоваяСтрока.КоличествоОтработано = ОтработанноеВремя;
			НоваяСтрока.КоличествоРабочееВремя = РабочееВремя;
			
			дт_ЗарплатаКлиентСервер.ОбработкаИзмененияСтроки(Объект, НоваяСтрока, "КоличествоОтработано", ПараметрыДолжности);
		КонецЕсли;
		
		// Сделка
		Если ЗначениеЗаполнено(ПараметрыДолжности.СпособНачисленияСдельнойОплаты) 
			И ПараметрыДолжности.СпособНачисленияСдельнойОплаты <> Перечисления.СпособыНачисленияСдельнойОплаты.ПроцентСПродажЗаВычетомОклада 		
			И ПараметрыДолжности.СпособНачисленияСдельнойОплаты <> Перечисления.СпособыНачисленияСдельнойОплаты.ПроцентСПродаж Тогда		
			
			НоваяСтрока = Объект.Начисления.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.ВидРасчета = Справочники.дт_ВидыРасчетовЗарплаты.СдельнаяОплата;
			НоваяСтрока.СуммаБаза = ПараметрыДолжности.Ставка;
			НоваяСтрока.Комментарий = СтрШаблон("%1 - %2", 
				Формат(НачалоПериода, "ДЛФ=D"), 
				Формат(КонецПериода, "ДЛФ=D")
			);
			
		КонецЕсли;
		
		Если ПараметрыДолжности.СпособНачисленияСдельнойОплаты = Перечисления.СпособыНачисленияСдельнойОплаты.ПоЧасам Тогда
			
			
			ОтработанноеВремя = дт_Зарплата.ПолучитьВремяПоТабелю(Сотрудник, 
						НачалоПериода,
						КонецПериода,
						Перечисления.ТипыДнейТабеля.РабочийДень,
						Перечисления.СпособыНачисленияОклада.ПоЧасам
			);
						
			НоваяСтрока.КоличествоОтработано = ОтработанноеВремя;
			дт_ЗарплатаКлиентСервер.ОбработкаИзмененияСтроки(Объект, НоваяСтрока, "КоличествоОтработано", ПараметрыДолжности);
			
		ИначеЕсли ПараметрыДолжности.СпособНачисленияСдельнойОплаты = Перечисления.СпособыНачисленияСдельнойОплаты.Вручную Тогда
			
			НоваяСтрока.СуммаНачислено = 0; // вручную
			

		ИначеЕсли ПараметрыДолжности.СпособНачисленияСдельнойОплаты = Перечисления.СпособыНачисленияСдельнойОплаты.ПроцентСПродажЗаВычетомОклада 
			ИЛИ ПараметрыДолжности.СпособНачисленияСдельнойОплаты = Перечисления.СпособыНачисленияСдельнойОплаты.ПроцентСПродаж Тогда
			
			СуммаСделки = ПолучитьЗаполнитьПродажиЗаПериод(Сотрудник, 
						НачалоПериода,
						КонецПериода,
						ПараметрыДолжности.ВидАналитики,
						Подразделение,
						ПараметрыДолжности.Процент
			);
			
			// Уменьшить оклад на сумму сделки - строка сторно
			Если ПараметрыДолжности.СпособНачисленияСдельнойОплаты = Перечисления.СпособыНачисленияСдельнойОплаты.ПроцентСПродажЗаВычетомОклада 
				И СтрокаОклад <> Неопределено
				И СуммаСделки <> 0 Тогда
					
				НоваяСтрока = Объект.Начисления.Вставить(Объект.Начисления.Индекс(СтрокаОклад) + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОклад,, "КоличествоОтработано,КоличествоРабочееВремя");
				НоваяСтрока.СуммаНачислено = -Мин(СтрокаОклад.СуммаНачислено, СуммаСделки);
				НоваяСтрока.Комментарий = "Корректировка оклада на сумму сдельной оплаты";
								
			КонецЕсли; 

			БольничныеВремя =   дт_Зарплата.ПолучитьВремяПоТабелю(Сотрудник, 
					НачалоПериода,
					КонецПериода,
					Перечисления.ТипыДнейТабеля.Больничный,
					ПараметрыДолжности.СпособНачисленияОклада
			);
			
			// Уменьшить сделку на административные
			Если ПараметрыДолжности.ВычитатьНеявкиИзСдельнойОплаты
				И СтрокаОклад <> Неопределено
				И СуммаСделки <> 0 Тогда
				
				ОтпускныеВремя =   дт_Зарплата.ПолучитьВремяПоТабелю(Сотрудник, 
						НачалоПериода,
						КонецПериода,
						Перечисления.ТипыДнейТабеля.Отпуск,
						ПараметрыДолжности.СпособНачисленияОклада
				);
				
				НеявкиВремя = Макс(СтрокаОклад.КоличествоРабочееВремя - СтрокаОклад.КоличествоОтработано - БольничныеВремя - ОтпускныеВремя, 0); 
				
				Если НеявкиВремя <> 0 Тогда
				
					НоваяСтрока = Объект.Начисления.Вставить(Объект.Начисления.Индекс(СтрокаОклад) + 1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОклад);
					
					НоваяСтрока.ВидРасчета = Справочники.дт_ВидыРасчетовЗарплаты.Неявки;
					НоваяСтрока.КоличествоОтработано = НеявкиВремя;
					НоваяСтрока.Комментарий = "Корректировка сдельной оплаты на сумму неявок";
					
					дт_ЗарплатаКлиентСервер.ОбработкаИзмененияСтроки(Объект, НоваяСтрока, "КоличествоОтработано", ПараметрыДолжности, СуммаСделки);
					
				КонецЕсли;
					
			КонецЕсли;
			
			// Больничные
			Если БольничныеВремя <> 0 Тогда
				НоваяСтрока = Объект.Начисления.Вставить(Объект.Начисления.Индекс(СтрокаОклад) + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОклад);
					
				НоваяСтрока.ВидРасчета = Справочники.дт_ВидыРасчетовЗарплаты.Больничный;
				НоваяСтрока.КоличествоОтработано = БольничныеВремя;
					
				дт_ЗарплатаКлиентСервер.ОбработкаИзмененияСтроки(Объект, НоваяСтрока, "КоличествоОтработано", ПараметрыДолжности);
					
			КонецЕсли;
			
		КонецЕсли;
		
		// Премия
		Если ПараметрыДолжности.СпособНачисленияПремии = Истина Тогда
			НоваяСтрока = Объект.Начисления.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.ВидРасчета = Справочники.дт_ВидыРасчетовЗарплаты.Премия;
			НоваяСтрока.Комментарий = СтрШаблон("%1 - %2", 
				Формат(НачалоПериода, "ДЛФ=D"), 
				Формат(КонецПериода, "ДЛФ=D")
			);
		КонецЕсли;
		
	
	КонецЦикла;
		
	// Надбавки
	Если ВыборкаНадбавки.НайтиСледующий(Новый Структура("Сотрудник", Сотрудник)) Тогда
		
		Выборка = ВыборкаНадбавки.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Объект.Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоСотруднику()

Функция ПолучитьЗаполнитьПродажиЗаПериод(Сотрудник, НачалоПериода, КонецПериода, ВидАналитики, Подразделение, Процент)
	
	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажиОбороты.Регистратор КАК Сделка,
		|	ПродажиОбороты.СуммаОборот КАК СуммаПродажи,
		|	ОплатыПоСделкамОбороты.СуммаОборот КАК СуммаОплачено,
		|	ОплатыПоСделкамОбороты.Период КАК ДатаОплаты
		|ПОМЕСТИТЬ ВТ_Продажи
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода, Регистратор, &УсловиеОтбор) КАК ПродажиОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатыПоСделкам.Обороты(, , День, ) КАК ОплатыПоСделкамОбороты
		|		ПО ПродажиОбороты.Регистратор = ОплатыПоСделкамОбороты.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Продажи.Сделка КАК Сделка,
		|	МАКСИМУМ(ВТ_Продажи.ДатаОплаты) КАК ДатаОплаты
		|ПОМЕСТИТЬ ВТ_ДатыОплаты
		|ИЗ
		|	ВТ_Продажи КАК ВТ_Продажи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Продажи.Сделка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Продажи.Сделка КАК Сделка,
		|	МАКСИМУМ(ВТ_Продажи.СуммаПродажи) КАК СуммаПродажи,
		|	СУММА(ВТ_Продажи.СуммаОплачено) КАК СуммаОплачено
		|ПОМЕСТИТЬ ВТ_ПродажиГрп
		|ИЗ
		|	ВТ_Продажи КАК ВТ_Продажи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Продажи.Сделка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Продажи.Сделка КАК Сделка,
		|	ВЫБОР
		|		КОГДА Продажи.СуммаОплачено > Продажи.СуммаПродажи
		|			ТОГДА Продажи.СуммаПродажи
		|		ИНАЧЕ Продажи.СуммаОплачено
		|	КОНЕЦ КАК СуммаБаза,
		|	ДатыОплаты.ДатаОплаты КАК ДатаОплаты
		|ИЗ
		|	ВТ_ПродажиГрп КАК Продажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыОплаты КАК ДатыОплаты
		|		ПО Продажи.Сделка = ДатыОплаты.Сделка
		|ГДЕ
		|	Продажи.СуммаОплачено >= Продажи.СуммаПродажи";
	
	
	Условие = "";
	Если ВидАналитики = "Подразделение" Тогда
		Условие = "Подразделение = &Подразделение";
	ИначеЕсли ВидАналитики = "Ответственный" Тогда
		Условие = "Менеджер = &Сотрудник";
		Пользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Пользователь");
		
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			НомерСтроки = Объект.Начисления.Количество();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("Строка %1. Не заполнен пользователь сотрудника %2. Расчет сдельной оплаты по продажам невозможен",
					НомерСтроки,
					Сотрудник
				),
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Начисления", НомерСтроки, "Сотрудник"),
			);
			
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбор", Условие);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Сотрудник", Пользователь);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = Объект.Начисления.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ВидРасчета = Справочники.дт_ВидыРасчетовЗарплаты.СдельнаяОплата;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.СуммаНачислено = НоваяСтрока.СуммаБаза * Процент / 100;
		
		Результат = Результат + НоваяСтрока.СуммаНачислено; 
	КонецЦикла;
	
	Возврат Результат;

КонецФункции


&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачисленияБУ(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьНачисленияБУНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияБУНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	СУММА(ДолжностиСотрудниковСрезПоследних.ОкладБУ) КАК ОкладБУ
		|ПОМЕСТИТЬ втДолжности
		|ИЗ
		|	РегистрСведений.ДолжностиСотрудников.СрезПоследних(&КонецПериода,) КАК ДолжностиСотрудниковСрезПоследних
		|ГДЕ
		|	ДолжностиСотрудниковСрезПоследних.Подразделение В ИЕРАРХИИ (&Подразделение)
		|	ИЛИ НЕ &ЕстьОтборПоПодразделению
		|СГРУППИРОВАТЬ ПО
		|	ДолжностиСотрудниковСрезПоследних.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	НачислениеЗарплаты.Ссылка
		|ПОМЕСТИТЬ втНачислениеПредыдущее
		|ИЗ
		|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Организация = &Организация
		|	И НачислениеЗарплаты.Подразделение = &Подразделение
		|	И НЕ НачислениеЗарплаты.ПометкаУдаления
		|	И НачислениеЗарплаты.Период < &Период
		|	И НачислениеЗарплаты.Дата <= &Дата
		|УПОРЯДОЧИТЬ ПО
		|	НачислениеЗарплаты.Период УБЫВ,
		|	НачислениеЗарплаты.Дата УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНачисленияБУ.Сотрудник,
		|	НачислениеЗарплатыНачисленияБУ.Сумма
		|ПОМЕСТИТЬ втНачисления
		|ИЗ
		|	Документ.НачислениеЗарплаты.НачисленияБУ КАК НачислениеЗарплатыНачисленияБУ
		|ГДЕ
		|	НачислениеЗарплатыНачисленияБУ.Ссылка В
		|		(ВЫБРАТЬ
		|			втНачислениеПредыдущее.Ссылка
		|		ИЗ
		|			втНачислениеПредыдущее)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДолжности.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(втНачисления.Сумма, втДолжности.ОкладБУ) КАК Сумма
		|ИЗ
		|	втДолжности КАК втДолжности
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
		|		ПО втДолжности.Сотрудник = втНачисления.Сотрудник
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Период", Объект.Период);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ЕстьОтборПоПодразделению", ЗначениеЗаполнено(Объект.Подразделение));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.НачисленияБУ.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// СуммаНачислено
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.НачисленияСуммаНачислено.Имя);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСтроки(ИмяТабличнойЧасти, Поле = Неопределено, ДанныеСтроки = Неопределено)

	ДанныеСтроки = ?(ДанныеСтроки = Неопределено, Элементы[ИмяТабличнойЧасти].ТекущиеДанные, ДанныеСтроки);
	ТекСтрокаКопия = Новый Структура("Сотрудник,СуммаБаза,СуммаНачислено,КоличествоОтработано,КоличествоРабочееВремя,ВидРасчета,Сделка,ДатаОплаты");
	
	ЗаполнитьЗначенияСвойств(ТекСтрокаКопия, ДанныеСтроки);
	 
	ОбработкаИзмененияСтрокиСервер(ТекСтрокаКопия);
	

	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекСтрокаКопия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияСтрокиСервер(ДанныеСтроки)

	ПараметрыДолжности = дт_Зарплата.ПолучитьПараметрыДолжности(ДанныеСтроки.Сотрудник, Объект.Период);
	
	дт_ЗарплатаКлиентСервер.ОбработкаИзмененияСтроки(Объект, ДанныеСтроки, "КоличествоОтработано", ПараметрыДолжности);
	
	
КонецПроцедуры



#КонецОбласти