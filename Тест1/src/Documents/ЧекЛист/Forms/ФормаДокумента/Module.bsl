



Процедура ОбновлениеДиаграммы()
	//Чеки 		 = 0;
	//ЗакрытыеЧеки = 0;
	//
	//Для Каждого стр из Объект.ЧекЛист Цикл
	//	Чеки = Чеки+1;
	//	Если стр.Чек Тогда
	//		ЗакрытыеЧеки = ЗакрытыеЧеки+1;
	//	КонецЕсли;
	//КонецЦикла;
	//Если Чеки > 0 тогда
	//	Процент = (ЗакрытыеЧеки/Чеки)*100;
	//Иначе
	//	Процент = 0;
	//КонецЕсли;
	//
	//Диаграмма = ПроцентВыполнения;
	//Диаграмма.Обновление = Ложь;
	//Диаграмма.Очистить();
	//
	//Диаграмма.КоличествоТочек = 1; 
	//Диаграмма.Точки[0].Текст = " "; 
	//
	//Серия = Диаграмма.УстановитьСерию("Процент");
	//
	//Диаграмма.УстановитьЗначение(0, Серия, Процент);
	//Диаграмма.Обновление = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПриИзменении(Элемент)
	//ОбновлениеДиаграммы();
КонецПроцедуры

&НаКлиенте
Процедура ВыводНаПечать(Команда)
	ТабДок = Печать(Объект.ссылка,1);
	
	// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("Печать");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "Печать";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ВыводНаПечатьАнкеты(Команда)
	ТабДок = Печать(Объект.ссылка,2);
	
	// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ПечатьАнкеты");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "ПечатьАнкеты";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводНаПечатьБезРамок(Команда)
	ТабДок = Печать(Объект.ссылка,3);
	
	// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ПечатьБезРамок");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "ПечатьБезРамок";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ВыводНаПечатьАльбом(Команда)
	ТабДок = Печать(Объект.ссылка,4);
	
	// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ПечатьБезРамок");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "ПечатьБезРамок";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура ПечатьПравил(Команда)
	ТабДок = Печать(Объект.ссылка,5);
	
	// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ПечатьПравил");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "ПечатьПравил";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);

КонецПроцедуры



Функция Печать(Ссылка,ВидМакета = 1)
	Табдок= Новый ТабличныйДокумент;
	Если ВидМакета = 1 тогда
		Макет = Документы.ЧекЛист.ПолучитьМакет("Печать");
	ИначеЕсли  ВидМакета = 2 тогда
		Макет = Документы.ЧекЛист.ПолучитьМакет("ПечатьАнкеты");
	иначеЕсли ВидМакета = 3 тогда
		Макет = Документы.ЧекЛист.ПолучитьМакет("ПечатьБезРамок");
	иначеЕсли ВидМакета = 4 тогда
		Макет = Документы.ЧекЛист.ПолучитьМакет("ПечатьАльбом");	
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	иначеЕсли ВидМакета = 5 тогда
		Макет = Документы.ЧекЛист.ПолучитьМакет("ПечатьПравил");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_телефоны
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И СотрудникиКонтактнаяИнформация.Вид = &Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекЛисты.ВидЧекЛиста КАК ВидЧекЛиста,
	|	ЧекЛисты.Дата КАК Дата,
	|	ЧекЛисты.Проверяющий.Фамилия + "" "" + ПОДСТРОКА(ЧекЛисты.Проверяющий.Имя, 1, 1) + ""."" + ПОДСТРОКА(ЧекЛисты.Проверяющий.Отчество, 1, 1) + ""."" КАК Проверяющий,
	|	ЧекЛисты.Номер КАК Номер,
	|	ЧекЛисты.ЧекЛист.(
	|		НомерСтроки КАК НомерСтроки,
	|		Чек КАК Чек,
	|		Описание КАК Описание,
	|		ЧекЛисты.ЧекЛист.Ответственный.Фамилия + "" "" + ПОДСТРОКА(ЧекЛисты.ЧекЛист.Ответственный.Имя, 1, 1) + ""."" + ПОДСТРОКА(ЧекЛисты.ЧекЛист.Ответственный.Отчество, 1, 1) + ""."" КАК Ответственный,
	|		Подпись КАК Подпись,
	|		Ответственный.Фамилия КАК ОтветственныйФамилия,
	|		Ответственный.Имя КАК ОтветственныйИмя,
	|		Ответственный.Отчество КАК ОтветственныйОтчество,
	|		Должность КАК Должность,
	|		Обязанность КАК Обязанность,
	|		СсылкаНаЧекЛист.Номер КАК СсылкаНаЧекЛист
	|	) КАК ЧекЛист,
	|	""+"" + вт_телефоны.НомерТелефона КАК Телефон
	|ИЗ
	|	Документ.ЧекЛист КАК ЧекЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_телефоны КАК вт_телефоны
	|		ПО ЧекЛисты.Проверяющий.Ссылка = вт_телефоны.Ссылка
	|ГДЕ
	|	ЧекЛисты.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", Ссылка); 	               
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЧекЛистШапка = Макет.ПолучитьОбласть("ЧекЛистШапка");
	ОбластьЧекЛист = Макет.ПолучитьОбласть("ЧекЛист");
	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Очистить();
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		//		Выборка.Проверяющий = Выборка.ПроверяющийФамилия + " " + Лев(Выборка.ПроверяющийИмя,1) + "." + Лев(Выборка.ПроверяющийОтчество,1) + ".";
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		
		ТабДок.Вывести(ОбластьЗаголовок);
		
		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());
		
		ТабДок.Вывести(ОбластьЧекЛистШапка);
		ВыборкаЧекЛист = Выборка.ЧекЛист.Выбрать();
		Пока ВыборкаЧекЛист.Следующий() Цикл
			//		ВыборкаЧекЛист.Ответственный = ВыборкаЧекЛист.ОтветственныйФамилия + " " + Лев(ВыборкаЧекЛист.ОтветственныйИмя,1) + "." + Лев(ВыборкаЧекЛист.ОтветственныйОтчество,1) + ".";
			ОбластьЧекЛист.Параметры.Заполнить(ВыборкаЧекЛист);
			ТабДок.Вывести(ОбластьЧекЛист, ВыборкаЧекЛист.Уровень());
		КонецЦикла;
		ОбластьПодвал.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьПробел,);
		ТабДок.Вывести(ОбластьПодвал, Выборка.Уровень());
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	ТабДок.Автомасштаб=истина;
	Возврат Табдок;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.Наименование = объект.ВидЧекЛиста;
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистОбязанностьПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистДолжностьПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистОтветственныйПриИзменении(Элемент)
	ТекСтрока = Элементы.ЧекЛист.ТекущиеДанные;
	ПодборДолжности(ТекСтрока.Ответственный,ТекСтрока.ПолучитьИдентификатор());
КонецПроцедуры


Процедура ПодборДолжности(Ответственный, номер)
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ДолжностиСотрудниковСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|ГДЕ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Запрос.УстановитьПараметр("сотрудник",Ответственный);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если НЕ значениеЗаполнено(Объект.ЧекЛист.НайтиПоИдентификатору(номер).Должность) И НЕ Объект.ЧекЛист.НайтиПоИдентификатору(номер).Должность = Выборка.должность Тогда
		Объект.ЧекЛист.НайтиПоИдентификатору(номер).Должность = Выборка.должность;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистОбязанностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ЧекЛист.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Должность",ТекСтрока.Должность);
	ПараметрыОткрытия.Вставить("Сотрудник",ТекСтрока.Ответственный);
	ПараметрыОткрытия.Вставить("РежимВыбора",ИСТИНА);
	
	//ФормаВыбораОбязанностей = ПолучитьФорму("Справочник.Обязанности.ФормаВыбора",ПараметрыОткрытия,этаформа);
	ОткрытьФорму("Справочник.Обязанности.ФормаВыбора",ПараметрыОткрытия,Элементы.ЧекЛистОбязанность);
	//ФормаВыбораОбязанностей.Открыть();
	//СтандартнаяОбработка = Истина;	//Элемент.ПодсказкаВвода = ТекСтрока.Обязанность;
	//
	//ДанныеВыбора = Новый СписокЗначений;
	//Табличка = НаборОбязанностейПоДолжностиИСотруднику(ТекСтрока.Ответственный,ТекСтрока.Должность);
	//Для каждого строка из Табличка  Цикл
	//	ДанныеВыбора.Добавить(строка.Ссылка, строка.Наименование);
	//КонецЦикла;
	
КонецПроцедуры

Функция НаборОбязанностейПоДолжностиИСотруднику(Ответственный,Должность)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбязанностиКураторы.Сотрудник КАК Сотрудник,
	|	ОбязанностиКураторы.Ссылка КАК Ссылка,
	|	ОбязанностиКураторы.Ссылка.Описание КАК Описание,
	|	ОбязанностиКураторы.Ссылка.Код КАК Код,
	|	NULL КАК Должность,
	|	ОбязанностиКураторы.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Обязанности.Кураторы КАК ОбязанностиКураторы
	|ГДЕ
	|	ОбязанностиКураторы.Сотрудник = &Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ОбязанностиСписокДолжностей.Ссылка,
	|	ОбязанностиСписокДолжностей.Ссылка.Описание,
	|	ОбязанностиСписокДолжностей.Ссылка.Код,
	|	ОбязанностиСписокДолжностей.Должность.Ссылка,
	|	ОбязанностиСписокДолжностей.Ссылка.Наименование
	|ИЗ
	|	Справочник.Обязанности.СписокДолжностей КАК ОбязанностиСписокДолжностей
	|ГДЕ
	|	ОбязанностиСписокДолжностей.Должность = &Должность";
	
	Запрос.УстановитьПараметр("Сотрудник", Ответственный);
	Запрос.УстановитьПараметр("Должность", Должность);
	Табличка = Запрос.Выполнить().Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Табличка);
КонецФункции

&НаКлиенте
Процедура ЧекЛистОбязанностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Переменная = ВыбранноеЗначение;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОформлениеТаблицы();
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	//ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	ОформлениеТаблицы();
КонецПроцедуры


&НаСервере
Процедура ОформлениеТаблицы()
	Если объект.Статус = Перечисления.СтатусЧекЛиста.Плейлист Тогда
		элементы.ЧекЛистОтветственный.Видимость   = ложь;
		элементы.ЧекЛистПодпись.Видимость 		  = ложь;
		элементы.ЧекЛистСсылкаНаЧекЛист.Видимость = ложь;
		элементы.ЧекЛистДолжность.Видимость 	  = ложь;
		элементы.ЧекЛистОбязанность.Видимость 	  = ложь;
		элементы.ЧекЛистСсылкаНаРесурс.Видимость  = Истина;
		
		элементы.ЧекЛистОписание.Заголовок        = "Описание";
	Иначе
		элементы.ЧекЛистОтветственный.Видимость   = Истина;
		элементы.ЧекЛистПодпись.Видимость 		  = Истина;
		элементы.ЧекЛистСсылкаНаЧекЛист.Видимость = Истина;
		элементы.ЧекЛистДолжность.Видимость 	  = Истина;
		элементы.ЧекЛистОбязанность.Видимость 	  = Истина;
		элементы.ЧекЛистСсылкаНаРесурс.Видимость  = ложь;
		
		элементы.ЧекЛистОписание.Заголовок        = "Задача";
	КонецЕсли;
КонецПроцедуры












