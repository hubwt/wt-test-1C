

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Свойство("НомерСтроки") Тогда
		Элементы.Товары.ТекущаяСтрока = Параметры.НомерСтроки - 1;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборСтроки") Тогда
		
		СтрокиТаблицы = Объект.Товары.НайтиСтроки(Параметры.ОтборСтроки);
		Если СтрокиТаблицы.Количество() <> 0 Тогда
			Элементы.Товары.ТекущаяСтрока = СтрокиТаблицы[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьФункциональныеОпции();
	
	ОбновитьРасчетныеПоказатели();
	
	УправлениеФормой(ЭтаФорма);
	
	ВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьРасчетныеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры



&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьРасчетныеПоказатели();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере(Элемент.Имя);
	
КонецПроцедуры



&НаСервере
Процедура СкладПриИзмененииНаСервере(ИмяРеквизитаСклад)
	
	Склад = Объект[ИмяРеквизитаСклад];
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат
	КонецЕсли;
	
	ОбновитьМестаХранения();

КонецПроцедуры // СкладПриИзмененииНаСервере()



&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОбновитьМестаХранения();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Товары



&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	
	СвойстваСтроки = Новый Структура();
	СвойстваСтроки.Вставить("Дата", Объект.Дата);
	СвойстваСтроки.Вставить("Склад", Объект.Склад);
	СвойстваСтроки.Вставить("Номенклатура", ТекСтрока.Номенклатура);
	
	ТаблицаНоменклатураПриИзмененииСервер(СвойстваСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекСтрока, СвойстваСтроки, "МестоХранения");
	
КонецПроцедуры


&НаСервере
Процедура ТаблицаНоменклатураПриИзмененииСервер(ДанныеЗаполнения)
	ДанныеЗаполнения.Вставить("МестоХранения", дт_АдресноеХранение.ПолучитьМестоХранения(ДанныеЗаполнения));	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьПартииПоОстаткам(Команда)

	ИмяТабличнойЧасти = "Товары";
		
	
	Если НЕ ПроверитьЗаполнениеВФорме(ИмяТабличнойЧасти) Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьПартииПоОстаткамНаСервере(ИмяТабличнойЧасти);
	
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьПартииПоОстаткамНаСервере(ИмяТабличнойЧасти)

	
	Источник = Объект[ИмяТабличнойЧасти].Выгрузить(); //, "НомерСтроки,Номенклатура,Количество,Склад");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Источник.НомерСтроки КАК НомерСтроки,
		|	Источник.Номенклатура КАК Номенклатура,
		|	Источник.Количество КАК Количество,
		|	&Склад КАК Склад,
		|	Источник.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ ВТ_Источник
		|ИЗ
		|	&Источник КАК Источник";
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Запрос.Выполнить();
	
	дт_Склад.ЗаполнитьПартииПоОстаткамНаСервере(Объект,
		 ИмяТабличнойЧасти,
		 "Склад",
		  Новый Граница(Объект.Дата, ВидГраницы.Исключая),
		  Запрос.МенеджерВременныхТаблиц
	);

КонецПроцедуры // ЗаполнитьПартииПоОстаткамНаСервере()


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьРасчетныеПоказатели()
	
	ОбновитьМестаХранения();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьМестаХранения() Экспорт
	
	дт_АдресноеХранение.ЗаполнитьМестаХранения(ЭтаФорма, "Склад", "Товары", "Номенклатура");
	
КонецПроцедуры

Функция ПроверитьЗаполнениеВФорме(ИмяТабличнойЧасти)

	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, "Склад");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Склад",
			,
			Отказ
		);
			
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, "Номенклатура", СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				Поле,
				"Объект",
				Отказ
				);
			
		КонецЕсли;	
		
		
	КонецЦикла;
	
	Возврат Не Отказ;

КонецФункции // ПроверитьЗаполнениеВФорме()





&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
		

КонецПроцедуры // УправлениеФормой()

&НаСервере
Функция ОбновитьФункциональныеОпции()

		
КонецФункции // ОбновитьФункциональныеОпции()

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	///+ГомзМА 13.02.2024
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			Элемент.ТекущиеДанные.ДатаДобавления = '00010101';
		Иначе
			Элемент.ТекущиеДанные.ДатаДобавления = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	///-ГомзМА 13.02.2024
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьИДоступностьЭлементов()

	///+ГомзМА 13.02.2024
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("Руководитель")) ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава")) Тогда
		Элементы.ТоварыДатаДобавления.Видимость = Истина;
	Иначе
		Элементы.ТоварыДатаДобавления.Видимость = Ложь;
	КонецЕсли;
	///-ГомзМА 13.02.2024

КонецПроцедуры



#КонецОбласти





