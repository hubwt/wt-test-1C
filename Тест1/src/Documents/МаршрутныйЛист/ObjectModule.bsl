#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс



#КонецОбласти

#Область ОбработчикиСобытий


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	//Расстояние = Маршрут.Итог("Расстояние");
	ОбновитьСуммуДокумента();	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ДатаНачала > ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Дата окончания не может быть меньше даты начала",
			,
			"ДатаОкончания",
			"Объект",
			Отказ
		);
			
	КонецЕсли;
	
	Если ПоказанияОдометраНачало > ПоказанияОдометраОкончание Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Показание одометра на конец поездки не может быть меньше показания на начало",
			,
			"ПоказанияОдометраОкончание",
			"Объект",
			Отказ
		);
			
	КонецЕсли;
	
	// Если маршрутный лист таксирован, то заказы должны быть не таксированы 
	Если ЗначениеЗаполнено(ТопливоРасходВсего) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МаршрутныйЛистМаршрут.ЗаказНаДоставку КАК ЗаказНаДоставку,
			|	МаршрутныйЛистМаршрут.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.МаршрутныйЛист.Маршрут КАК МаршрутныйЛистМаршрут
			|ГДЕ
			|	НЕ МаршрутныйЛистМаршрут.ЗаказНаДоставку = &ПустойЗаказ
			|	И МаршрутныйЛистМаршрут.Ссылка = &Ссылка
			|	И МаршрутныйЛистМаршрут.ЗаказНаДоставку.ТопливоРасходВсего <> 0";
		
		Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказНаДоставку.ПустаяСсылка());
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Маршрут", ВыборкаДетальныеЗаписи.НомерСтроки, "ЗаказНаДоставку");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("Строка %1. В таксированном маршрутном листе нельзя выбирать таксированный заказ на доставку",
					ВыборкаДетальныеЗаписи.НомерСтроки),
				,
				Поле,
				"Объект",
				Отказ
			);
				
			
		КонецЦикла;
	
	КонецЕсли;

	
	Для каждого СтрокаТаблицы Из Маршрут Цикл
	
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачала)
			И (СтрокаТаблицы.ДатаНачала < ДатаНачала
			ИЛИ СтрокаТаблицы.ДатаНачала > ДатаОкончания) Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Маршрут", СтрокаТаблицы.НомерСтроки, "ДатаНачала");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("Строка %1. Дата поездки %2 не входит в период маршрутного листа",
					СтрокаТаблицы.НомерСтроки,
					Формат(СтрокаТаблицы.ДатаНачала, "ДЛФ=D")),
				,
				Поле,
				"Объект",
				Отказ
			);
				
			
		КонецЕсли;
	
	КонецЦикла;
	

	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ДополнительныеСвойства.Вставить("ЭтоНовый",                    ЭтоНовый()); 
	ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Ложь); 
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	
	ПараметрыПроведения = Документы.МаршрутныйЛист.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	дт_ОбщегоНазначения.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	дт_Продажи.ПодготовитьНаборыЗаписей(ЭтотОбъект);
	дт_Грузоперевозки.ПодготовитьНаборыЗаписей(ЭтотОбъект);	
	
	// Формирование движений
	дт_Грузоперевозки.ОтразитьПоказанияОдометра(ПараметрыПроведения, Движения, Отказ);
	дт_Грузоперевозки.ОтразитьТопливоВБаках(ПараметрыПроведения, Движения, Отказ);
	
	ПараметрыПроведения.Вставить("ТаблицаСебестоимостьПеревозок", ПолучитьТаблицуСебестоимостьПеревозок(ПараметрыПроведения.ТаблицаТопливоВБаках));
	дт_Грузоперевозки.ОтразитьСебестоимостьПеревозок(ПараметрыПроведения, Движения, Отказ);
	
	Движения.Записать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТопливоВБаках", ПараметрыПроведения.ТаблицаТопливоВБаках);
	ДополнительныеСвойства.ДляПроведения.МоментКонтроля = Новый Граница(МоментВремени(), ВидГраницы.Включая);
	
	// Контроль отрицательных остаткок по регистрам накопления
	Документы.МаршрутныйЛист.ВыполнитьКонтроль(ЭтотОбъект, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	Префикс = дт_ОбщегоНазначения.ПрефиксОрганизации(Организация);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ОбновитьСуммуДокумента() Экспорт

	// Сумма документа
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Маршрут.ЗаказНаДоставку КАК ЗаказНаДоставку
		|ПОМЕСТИТЬ ВТ_Маршрут
		|ИЗ
		|	&Маршрут КАК Маршрут
		|ГДЕ
		|	Маршрут.ЗаказНаДоставку <> &ПустойЗаказНаДоставку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(Док.СуммаДокумента) КАК СуммаДокумента
		|ИЗ
		|	ВТ_Маршрут КАК Маршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаДоставку КАК Док
		|		ПО (Док.Ссылка = Маршрут.ЗаказНаДоставку)";	
		
		
	Запрос.УстановитьПараметр("ПустойЗаказНаДоставку", Документы.ЗаказНаДоставку.ПустаяСсылка());
	Запрос.УстановитьПараметр("Маршрут", Маршрут.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СуммаДокумента = 0;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СуммаДокумента = ВыборкаДетальныеЗаписи.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуСебестоимостьПеревозок(ТаблицаТопливоВБаках)

	ТаблицаСебестоимостьПеревозок =  ТаблицаТопливоВБаках.Скопировать();
	ТаблицаСебестоимостьПеревозок.Колонки.Стоимость.Имя = "Сумма";
	ТаблицаСебестоимостьПеревозок.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.МаршрутныйЛист"));
	ТаблицаСебестоимостьПеревозок.ЗаполнитьЗначения(Ссылка, "Документ");
	
	Возврат ТаблицаСебестоимостьПеревозок;

КонецФункции // ПолучитьТаблицуСебестоимостьПеревозок()



#КонецОбласти

#КонецЕсли