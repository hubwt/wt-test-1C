#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс



#Область Проведение
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	НомераТаблиц = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Запрос.УстановитьПараметр("МоментВремениКонецПериода", Новый Граница(КонецДня(Реквизиты.ДатаОкончания), ВидГраницы.Исключая));
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст =
		ТекстЗапросаПоказанияОдометра(НомераТаблиц)
		+ ТекстЗапросаТопливоВБаках(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();

	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		Таблица =  Результат[НомерТаблицы.Значение].Выгрузить();
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Таблица);
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции


Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Автомобиль КАК Автомобиль,
	|	Реквизиты.Расстояние КАК Расстояние,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ПоказанияОдометраОкончание КАК ПоказанияОдометраОкончание,
	|	Реквизиты.ТопливоРасходВсего КАК ТопливоРасходВсего,
	|	Реквизиты.ПоказанияОдометраНачало КАК ПоказанияОдометраНачало,
	|	Реквизиты.ДатаНачала КАК ДатаНачала,
	|	Реквизиты.ДатаОкончания КАК ДатаОкончания,
	|	Реквизиты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.МаршрутныйЛист КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Автомобиль КАК Автомобиль,
	|	Реквизиты.Расстояние КАК Расстояние,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.ПоказанияОдометраОкончание КАК ПоказанияОдометраОкончание,
	|	Реквизиты.ТопливоРасходВсего КАК ТопливоРасходВсего,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ДатаНачала КАК ДатаНачала,
	|	Реквизиты.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()


Функция ТекстЗапросаТопливоВБаках(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаТопливоВБаках", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	КОНЕЦПЕРИОДА(Реквизиты.ДатаОкончания, ДЕНЬ) КАК Период,
	|	Реквизиты.Автомобиль КАК Автомобиль,
	|	Реквизиты.ТопливоРасходВсего КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТопливоВБакахОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		КОГДА Реквизиты.ТопливоРасходВсего = ТопливоВБакахОстатки.КоличествоОстаток
	|			ТОГДА ЕСТЬNULL(ТопливоВБакахОстатки.СтоимостьОстаток, 0)
	|		ИНАЧЕ ВЫРАЗИТЬ(Реквизиты.ТопливоРасходВсего * ТопливоВБакахОстатки.СтоимостьОстаток / ТопливоВБакахОстатки.КоличествоОстаток КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Стоимость
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТопливоВБаках.Остатки(
	|				&МоментВремениКонецПериода,
	|				Автомобиль В
	|					(ВЫБРАТЬ
	|						Реквизиты.Автомобиль
	|					ИЗ
	|						Реквизиты)) КАК ТопливоВБакахОстатки
	|		ПО Реквизиты.Автомобиль = ТопливоВБакахОстатки.Автомобиль
	|ГДЕ
	|	Реквизиты.ТопливоРасходВсего <> 0";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()


Функция ТекстЗапросаПоказанияОдометра(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаПоказания", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПоказанияОдометра", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.ДатаНачала КАК Период,
	|	Реквизиты.Автомобиль КАК Автомобиль,
	|	Реквизиты.ПоказанияОдометраНачало КАК Показание
	|ПОМЕСТИТЬ ВТ_Показания
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ПоказанияОдометраНачало <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.ДатаОкончания,
	|	Реквизиты.Автомобиль,
	|	Реквизиты.ПоказанияОдометраОкончание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ПоказанияОдометраОкончание <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Маршрут.ЗаказНаДоставку.ДатаОкончания, Маршрут.ДатаНачала),
	|	Реквизиты.Автомобиль,
	|	Маршрут.ПоказанияОдометраОкончание
	|ИЗ
	|	Документ.МаршрутныйЛист.Маршрут КАК Маршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Маршрут.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	Маршрут.ПоказанияОдометраОкончание <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показания.Период КАК Период,
	|	ВТ_Показания.Автомобиль КАК Автомобиль,
	|	МАКСИМУМ(ВТ_Показания.Показание) КАК Показание
	|ИЗ
	|	ВТ_Показания КАК ВТ_Показания
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Показания.Период,
	|	ВТ_Показания.Автомобиль";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()


// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументОбъект, ПараметрыПроведения, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	
	//СтруктураВременныеТаблицы = ПараметрыПроведения.ТаблицаЗапланированныеОтгрузки;
	СтруктураВременныеТаблицы = ПараметрыПроведения.ДляПроведения.СтруктураВременныеТаблицы;
	
		
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДвиженияТовары.Автомобиль КАК Автомобиль,
	|	ВЫБОР
	|		КОГДА ДвиженияТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ДвиженияТовары.Количество
	|		ИНАЧЕ -ДвиженияТовары.Количество
	|	КОНЕЦ КАК КоличествоИзменение
	|ПОМЕСТИТЬ ВТ_ДвиженияТовары
	|ИЗ
	|	&ДвиженияТовары КАК ДвиженияТовары
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДвиженияТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДвиженияТовары.Количество
	|			ИНАЧЕ -ДвиженияТовары.Количество
	|		КОНЕЦ < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияТовары.Автомобиль КАК Автомобиль,
	|	ДвиженияТовары.КоличествоИзменение КАК КоличествоИзменение,
	|	ТоварыОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	ВТ_ДвиженияТовары КАК ДвиженияТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТопливоВБаках.Остатки(&МоментКонтроля, ) КАК ТоварыОстатки
	|		ПО ДвиженияТовары.Автомобиль = ТоварыОстатки.Автомобиль
	|ГДЕ
	|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) < 0";
	
	//Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ТаблицаИсточник = ПараметрыПроведения.ТаблицыДляДвижений["ТаблицаТопливоВБаках"];
	Запрос.УстановитьПараметр("МоментКонтроля", ПараметрыПроведения.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ДвиженияТовары", ТаблицаИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	// Отрицательный остаток по счету
	Если НЕ РезультатЗапроса.Пустой() Тогда
		//ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Поле = "ТопливоРасходВсего";
			
			ТекстСообщения = СтрШаблон(
				"Количество топлива превышает остаток в баке %1. Нехватка: %2", 
				Выборка.Автомобиль,
				//Выборка.КоличествоИзменение, 
				-Выборка.Количество);
			
			
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект" , Отказ);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьКонтроль()

#КонецОбласти 


#Область Печать
// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПутевойЛист4С";
	КомандаПечати.Представление = НСтр("ru = 'Путевой лист'"); // 4-С
	КомандаПечати.Порядок = 10;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПутевойЛист4С") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПутевойЛист4С", "Путевой лист", 
			ПечатьПутевойЛист(МассивОбъектов, ОбъектыПечати, "ПутевойЛист_4С"));
	КонецЕсли;
		
	//ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов,
	//	КоллекцияПечатныхФорм,
	//	ОбъектыПечати,
	//	ПараметрыВывода);
	
КонецПроцедуры

Функция ПолучитьДанныеПечатиПутевойЛист(МассивОбъектов, ЭтоНарядНаСборку = Ложь)

	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧМаршрут.НомерСтроки КАК НомерСтроки,
	|	ТЧМаршрут.Ссылка КАК Ссылка,
	|	ТЧМаршрут.МассаГруза КАК МассаГруза
	|ПОМЕСТИТЬ ВТ_Маршрут
	|ИЗ
	|	Документ.МаршрутныйЛист.Маршрут КАК ТЧМаршрут
	|ГДЕ
	|	ТЧМаршрут.Ссылка В (&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Номер КАК НомерДокумента,
	|	Док.Дата КАК ДатаДокумента,
	|	Док.Дата КАК ДатаВыписки,
	|	Док.Организация КАК Организация,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	Док.ДатаОкончания КАК ДатаОкончания,
	|	Док.Расстояние КАК Расстояние,
	|	Док.Расстояние КАК ПробегОбщийТС,
	|	ЕСТЬNULL(МаршрутГрп.КоличествоПоездок, 0) КАК ЕздокВсего,
	|	Док.ТопливоРасходВсего КАК РасходФактический,
	|	МаршрутГрп.МассаГруза КАК ТоннВсего,
	|	ЕСТЬNULL(МаршрутГрп.МассаГруза, 0) * Док.Расстояние КАК ВсегоТКМ,
	|	Док.ТопливоВБакеНачало КАК ОстатокПриВыезде1,
	|	Док.ТопливоВБакеОкончание КАК ОстатокПриВозвращении1,
	|	Док.ДатаНачала КАК ДатаВыезда_ДД,
	|	Док.ДатаНачала КАК ДатаВыезда_ММММ,
	|	Док.ПоказанияОдометраНачало КАК СпидометрВыезда,
	|	Док.Водитель КАК Водитель,
	|	Док.Автомобиль КАК Автомобиль
	|ИЗ
	|	Документ.МаршрутныйЛист КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(ВТ_Маршрут.НомерСтроки) КАК КоличествоПоездок,
	|			ВТ_Маршрут.Ссылка КАК Ссылка,
	|			СУММА(ВТ_Маршрут.МассаГруза) КАК МассаГруза
	|		ИЗ
	|			ВТ_Маршрут КАК ВТ_Маршрут
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_Маршрут.Ссылка) КАК МаршрутГрп
	|		ПО Док.Ссылка = МаршрутГрп.Ссылка
	|ГДЕ
	|	Док.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Маршрут.НомерСтроки КАК НомерСтроки,
	|	Маршрут.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Маршрут КАК Маршрут
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Шапка      	= РезультатЗапроса[1].Выбрать();
	ВыборкаПоСтрокам = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Возврат Новый Структура("Шапка,Строки",
		Шапка,
		ВыборкаПоСтрокам);
		
КонецФункции // ПолучитьДанныеПечатиПеремещениеТоваров()


// Процедура печати документа.
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму;
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
//  ИмяМакета      - Строка - "Счет" или "Заказ".
//  ВыводитьПлатежныеРеквизиты - Булево - если Истина, выводит шапку с платежными реквизитами в счете.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьПутевойЛист(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	ДанныеПечати = ПолучитьДанныеПечатиПутевойЛист(МассивОбъектов, ИмяМакета = "НарядНаСборку");
	
	Шапка      	= ДанныеПечати.Шапка;
	ВыборкаПоСтрокам = ДанныеПечати.Строки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПутевойЛист_Основной";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.МаршрутныйЛист.ПФ_MXL_" + ИмяМакета);
	ФорматДаты = "ДЛФ=DD";
	ВыводитьСПустойТабличнойЧастью = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
		ВыборкаПоСтрокам.Сбросить();
		
		ЕстьСтроки = ВыборкаПоСтрокам.НайтиСледующий(СтруктураПоиска);
		Если НЕ ВыводитьСПустойТабличнойЧастью 
			И НЕ ЕстьСтроки Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют строки. Печать не требуется'"),
				Шапка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Шапка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		СведенияОВодителе = дт_Грузоперевозки.СведенияОВодителе(Шапка.Водитель); 
		СведенияОбАвтомобиле = дт_Грузоперевозки.СведенияОбАвтомобиле(Шапка.Автомобиль, Шапка.ДатаДокумента); 
		
		ДанныеПечатиДоп = Новый Структура();
		ДанныеПечатиДоп.Вставить("Номер", дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
		ДанныеПечатиДоп.Вставить("ДатаВыписки", Формат(Шапка.ДатаДокумента, ФорматДаты));
		ДанныеПечатиДоп.Вставить("ОрганизацияПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны"));
		ДанныеПечатиДоп.Вставить("КодПоОКПО", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоОКПО", Ложь));
		
		
		ДанныеПечатиДоп.Вставить("ТипТС", СведенияОбАвтомобиле.ТипТС);
		ДанныеПечатиДоп.Вставить("МодельТС", СведенияОбАвтомобиле.МаркаТС);
		ДанныеПечатиДоп.Вставить("ТранспортноеСредствоГосНомер", СведенияОбАвтомобиле.Госномер);
		ДанныеПечатиДоп.Вставить("ТранспортноеСредствоГарНомер", СведенияОбАвтомобиле.Код);
		ДанныеПечатиДоп.Вставить("ПрицепМодель1", СведенияОбАвтомобиле.ПрицепМодель);
		ДанныеПечатиДоп.Вставить("ПрицепГосНомер1", СведенияОбАвтомобиле.ПрицепГосномер);
		ДанныеПечатиДоп.Вставить("ПрицепГарНомер1", СведенияОбАвтомобиле.ПрицепКод);
		
		
		ВодительФИО = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.Водитель);
		ДанныеПечатиДоп.Вставить("Водитель1", ВодительФИО);
		ДанныеПечатиДоп.Вставить("ВодительПринял", ВодительФИО);
		ДанныеПечатиДоп.Вставить("ВодительСдал", ВодительФИО);
		
		ДанныеПечатиДоп.Вставить("ВодительКод1", СведенияОВодителе.Код);
		ДанныеПечатиДоп.Вставить("НомерУдостоверенияВодителя", СведенияОВодителе.УдостоверенияВодителяНомер);
		ДанныеПечатиДоп.Вставить("КлассВодителя", СведенияОВодителе.КлассВодителя);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Лицевая");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		// Таблица
		//ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		//СтрокаТовары = ВыборкаПоСтрокам.Выбрать();
		//Пока СтрокаТовары.Следующий() Цикл
		//	
		//	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		//	
		//	ТабличныйДокумент.Вывести(ОбластьМакета);
		//	
		//КонецЦикла;
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Оборотная");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции


#КонецОбласти 



#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс



#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти

#КонецЕсли