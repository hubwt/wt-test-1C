//Перем ПутьДляПоиска = "W:\code\imageService\images\";
//Перем СсылкаНаФото =  "http://dev.wt10.ru/image/";
#Область ТекстыДляЗапросов 

Функция текстДляНоменклатуры()
	текстзапроса ="ВЫБРАТЬ
	              |	Номенклатура.Ссылка КАК Ссылка
	              |ПОМЕСТИТЬ ВТ_Номенклатура
	              |ИЗ
	              |	Справочник.Номенклатура КАК Номенклатура
	              |ГДЕ
	              |	Номенклатура.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	Номенклатура.Ссылка
	              |ИЗ
	              |	Справочник.Номенклатура КАК Номенклатура
	              |ГДЕ
	              |	Номенклатура.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	Номенклатура.Ссылка
	              |ИЗ
	              |	Справочник.Номенклатура КАК Номенклатура
	              |ГДЕ
	              |	Номенклатура.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ИндНомер.индкод КАК индкод
	              |ПОМЕСТИТЬ ВТ_предКоды
	              |ИЗ
	              |	РегистрСведений.ИндНомер КАК ИндНомер
	              |ГДЕ
	              |	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	              |	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	ИндНомер.индкод
	              |ИЗ
	              |	РегистрСведений.ИндНомер КАК ИндНомер
	              |ГДЕ
	              |	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	              |	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	ИндНомер.индкод
	              |ИЗ
	              |	РегистрСведений.ИндНомер КАК ИндНомер
	              |ГДЕ
	              |	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	              |	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	ИндНомер.индкод
	              |ИЗ
	              |	РегистрСведений.ИндНомер КАК ИндНомер
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	              |		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
	              |ГДЕ
	              |	НЕ ИндНомер.Стеллаж В (&Стеллаж)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	              |	РегИндНомер.индкод КАК индкод,
	              |	ВЫБОР
	              |		КОГДА РегИндНомер.Цена > 0
	              |			ТОГДА РегИндНомер.Цена
	              |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	              |	КОНЕЦ КАК Цена,
	              |	РегИндНомер.Комментарий КАК Комментарий,
	              |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	              |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	              |	ВЫБОР
	              |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	              |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	              |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	              |	КОНЕЦ КАК Адрес,
	              |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	              |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	              |	РегИндНомер.Поддон КАК Поддон,
	              |	РегистрНакопления1Остатки.Склад.Город КАК Город,
	              |	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
	              |	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	              |	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация
	              |ПОМЕСТИТЬ ВТ_данныеНоменклатур
	              |ИЗ
	              |	ВТ_предКоды КАК ИндНомер
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	              |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	              |		ПО ИндНомер.индкод = РегИндНомер.индкод
	              |ГДЕ
	              |	РегистрНакопления1Остатки.КолвоОстаток > 0
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ ПЕРВЫЕ %1
	              |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	              |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	              |	ВТ_данныеНоменклатур.Цена КАК Цена,
	              |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	              |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	              |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	              |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	              |	ВТ_данныеНоменклатур.Склад КАК Склад,
	              |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	              |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	              |	ВТ_данныеНоменклатур.Город КАК Город,
	              |	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
	              |	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
	              |	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация
	              |ИЗ
	              |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	              |ГДЕ
	              |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	НомерЗаписи" ; 
	Возврат текстзапроса;
КонецФункции 

Функция текстДляНоменклатурыПолка()
	
	///+ГомзМА 01.02.2024
	текстзапроса ="ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегистрНакопления1Остатки.Склад.Город КАК Город,
	|	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	|	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.Город КАК Город,
	|	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
	|	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
	|	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи" ; 
	Возврат текстзапроса;
	///-ГомзМА 01.02.2024
	
КонецФункции 

Функция текстДляТовара()
	текстзапроса ="ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегистрНакопления1Остатки.Склад.Город КАК Город,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	|	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация
	
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.Город КАК Город,
	|	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
	|	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
	|	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
	|	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация
	
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи" ; 
	Возврат текстзапроса;
КонецФункции

Функция текстДляТовара1()
	текстзапроса ="ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегистрНакопления1Остатки.Склад.Город КАК Город
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.Город КАК Город,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_данныеНоменклатур.индкод) КАК Количество
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_данныеНоменклатур.Адрес,
	|	ВТ_данныеНоменклатур.Склад,
	|	ВТ_данныеНоменклатур.Город" ; 
	Возврат текстзапроса;
КонецФункции

Функция текстДляНоменклатуры2()
	текстзапроса ="ВЫБРАТЬ ПЕРВЫЕ 100000
	|	ИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ИндНомер.индкод) КАК индкод,
	|	ВЫБОР
	|		КОГДА ИндНомер.Цена > 0
	|			ТОГДА ИндНомер.Цена
	|		ИНАЧЕ ИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	ИндНомер.Комментарий КАК Комментарий,
	|	ИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(ИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА ИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ИндНомер.Поддон КАК Поддон
	|ПОМЕСТИТЬ ВТ_данныеНоменклатуры
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	(ИндНомер.индкод.Владелец.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|			ИЛИ ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|			ИЛИ ИндНомер.индкод.Владелец.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|			ИЛИ ИндНомер.индкод.Владелец.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")
	|	И РегистрНакопления1Остатки.КолвоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатуры.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатуры.Наименование КАК Наименование,
	|	ВТ_данныеНоменклатуры.Цена КАК Цена,
	|	ВТ_данныеНоменклатуры.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатуры.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатуры.Подкатегория2 КАК Подкатегория2,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатуры.индкод) КАК индкод,
	|	ВТ_данныеНоменклатуры.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатуры.Склад КАК Склад,
	|	ВТ_данныеНоменклатуры.Поддон КАК Поддон
	|ИЗ
	|	ВТ_данныеНоменклатуры КАК ВТ_данныеНоменклатуры
	|ГДЕ
	|	ВТ_данныеНоменклатуры.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи" ; 
	Возврат текстзапроса;
КонецФункции

Функция текстДляСпискаПродаж()
	Текст ="ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100000
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	ПродажаЗапчастей.Ссылка КАК Ссылка,
	|	ПродажаЗапчастей.Номер КАК Номер,
	|	ПродажаЗапчастей.Дата КАК Дата,
	|	ПродажаЗапчастей.Клиент КАК Клиент,
	|	ПродажаЗапчастей.КтоПродал КАК Ответственный,
	|	ПродажаЗапчастей.ИтогоРекв КАК СуммаДокумента,
	|	ПродажаЗапчастей.СтатусОбработки КАК СтатусОбработки,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|ПОМЕСТИТЬ ВТ_Продажи
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО ПродажаЗапчастей.КтоПродал = ТелефоныСлужебные.Ссылка.Пользователь 
	|ГДЕ
	|ПродажаЗапчастей.СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаявок.&СостояниеСборки)
	|{ГДЕ
	|	(ТелефоныСлужебные.ТелефонСлужебный = &Телефон) КАК Поле2}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_Продажи.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Продажи.Ссылка КАК Ссылка,
	|	ВТ_Продажи.Номер КАК Номер,
	|	ВТ_Продажи.Дата КАК Дата,
	|	ВТ_Продажи.Клиент КАК Клиент,
	|	ВТ_Продажи.Ответственный КАК Ответственный,
	|	ВТ_Продажи.СуммаДокумента КАК СуммаДокумента,
	|	ВТ_Продажи.СтатусОбработки КАК СтатусОбработки,
	|	ВТ_Продажи.ТелефонСлужебный КАК ТелефонСлужебный
	|ИЗ
	|	ВТ_Продажи КАК ВТ_Продажи
	|ГДЕ
	|	ВТ_Продажи.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";
	Возврат текст;
КонецФункции

Функция текстДляСпискаНарядов() 
	Текст ="ВЫБРАТЬ
	|	ЗаказНарядТовары.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(ЗаказНарядТовары.НомерСтроки) КАК КоличествоСтрок,
	|	ЗаказНарядТовары.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТ_Условие
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Состояние,
	|	ЗаказНарядТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Условие.Ссылка КАК Ссылка,
	|	СУММА(ВТ_Условие.КоличествоСтрок) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ_Сборка
	|ИЗ
	|	ВТ_Условие КАК ВТ_Условие
	|ГДЕ
	|	(ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Планово)
	|			ИЛИ ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Срочно))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Условие.Ссылка КАК Ссылка,
	|	СУММА(ВТ_Условие.КоличествоСтрок) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ_Выдача
	|ИЗ
	|	ВТ_Условие КАК ВТ_Условие
	|ГДЕ
	|	(ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Собрано)
	|			ИЛИ ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.НетВНаличии))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Клиент КАК Клиент,
	|	ЗаказНаряд.Ответственный КАК Ответственный,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.ЗаказКлиента КАК ЗаказКлиента,
	|	ЗаказНаряд.ВнутреннийЗаказНаряд  КАК Внутр,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ВТ_Сборка.КоличествоСтрок КАК КоличествоСборка,
	|	ВТ_Выдача.КоличествоСтрок КАК КоличествоВыдача
	|ПОМЕСТИТЬ ВТ_Наряд
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сборка КАК ВТ_Сборка
	|		ПО (ВТ_Сборка.Ссылка = ЗаказНаряд.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ЗаказНаряд.Инициатор = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выдача КАК ВТ_Выдача
	|		ПО ЗаказНаряд.Ссылка = ВТ_Выдача.Ссылка 
	| &Фильтр
	// |{ГДЕ
	// |	(ЗаказНаряд.Состояние В (&СостояниНаряда)) ,
	// |	(ВТ_Сборка.КоличествоСтрок > &Сборка) ,
	// |	(ВТ_Выдача.КоличествоСтрок > &Выдача) }
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_Наряд.Код КАК Код,
	|	ВТ_Наряд.Номер КАК Номер,
	|	ВТ_Наряд.Дата КАК Дата,
	|	ВТ_Наряд.Клиент КАК Клиент,
	|	ВТ_Наряд.Ответственный КАК Ответственный,
	|	ВТ_Наряд.Состояние КАК Состояние,
	|	ВТ_Наряд.ЗаказКлиента КАК ЗаказКлиента,
	|	ВТ_Наряд.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Наряд.КоличествоСборка КАК КоличествоСборка,
	|	ВТ_Наряд.КоличествоВыдача КАК КоличествоВыдача,
	|	ВТ_Наряд.Внутр  КАК Внутр
	|ИЗ
	|	ВТ_Наряд КАК ВТ_Наряд
	|ГДЕ
	|	ВТ_Наряд.НомерЗаписи >= &НачинаяСЗаписи  
	|	И ВТ_Наряд.Дата > датавремя(2023,10,02) 
	|	И не ВТ_Наряд.Внутр 
	|	И  ВТ_Наряд.Состояние <> Значение(перечисление.СостоянияЗаказНаряда.Выполнен) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";
	Возврат текст;
	
КонецФункции

Функция текстДляПродажи()
	//Перечисления.СтатусыТовараВЗаказНаряде.соб
	Текст =  "ВЫБРАТЬ
	         |	ПродажаЗапчастей.Номер КАК Номер,
	         |	ПродажаЗапчастей.Ссылка КАК ссылка,
	         |	ПродажаЗапчастей.Дата КАК Дата,
	         |	ПродажаЗапчастей.Клиент КАК Клиент,
	         |	ПродажаЗапчастей.ИтогоРекв КАК ИтогоРекв,
	         |	ПродажаЗапчастей.КтоПродал КАК КтоПродал,
	         |	ПродажаЗапчастей.Таблица.(
	         |		Товар КАК Товар,
	         |		Количество КАК Количество,
	         |		Цена КАК Цена,
	         |		Сумма КАК Сумма,
	         |		Партия КАК Партия,
	         |		ПРЕДСТАВЛЕНИЕ(ПродажаЗапчастей.Таблица.Партия) КАК Партия2,
	         |		НомерСтроки КАК НомерСтроки,
	         |		СтатусТовара КАК СтатусТовара,
	         |		Товар.Код КАК Код,
	         |		Отменено КАК Отменено,
	         |		Товар.Артикул КАК Артикул
	         |	) КАК Таблица,
	         |	ПродажаЗапчастей.ЗаказКлиента КАК ЗаказКлиента,
	         |	ПродажаЗапчастей.СтатусОбработки КАК СтатусОбработки,
	         |	Сотрудники.Код КАК Код,
	         |	ПродажаЗапчастей.ОтветственныйКладовщик КАК ОтветственныйКладовщик,
	         |	ПродажаЗапчастей.СтатусЗаказаВТК КАК СтатусЗаказаВТК,
	         |	ПродажаЗапчастей.Клиент.Телефон КАК КлиентТелефон,
	         |	ПродажаЗапчастей.ТранспортнаяКомпания КАК ТранспортнаяКомпания
	         |ИЗ
	         |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	         |		ПО ПродажаЗапчастей.ОтветственныйКладовщик = Сотрудники.Пользователь
	         |ГДЕ
	         |	ПродажаЗапчастей.Номер = &Номер";
	Возврат Текст;
КонецФункции  

Функция текстДляЗаказНаряда2() 
	Текст =  "ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Клиент КАК Клиент,
	|	ЗаказНаряд.Ответственный КАК Ответственный,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Товар,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Автомобиль КАК Автомобиль,
	|		СкидкаСумма КАК СкидкаСумма,
	|		СкидкаПроцент КАК СкидкаПроцент,
	|		Сумма КАК Сумма,
	|		Партия КАК Партия,
	|		ПРЕДСТАВЛЕНИЕ(ЗаказНаряд.Товары.Партия) КАК Партия2,
	|		СуммаВсего КАК СуммаВсего,
	|		Склад КАК Склад,
	|		Ответственный КАК Ответственный,
	|		СуммаНалог КАК СуммаНалог,
	|		СуммаЗп КАК СуммаЗп,
	|		Состояние КАК Состояние,
	|		СуммаСНДС КАК СуммаСНДС,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Код КАК Код
	|	) КАК Таблица,
	|	ЗаказНаряд.ЗаказКлиента КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ЗаказНаряд.Инициатор = Сотрудники.Ссылка
	|ГДЕ
	|	ЗаказНаряд.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция ТекстДляПеремещения() 
	
	///+ГомзМА 31.01.2024
		Текст =  "ВЫБРАТЬ
		         |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		         |	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		         |	ПеремещениеТоваровТовары.Товар КАК Товар,
		         |	ПеремещениеТоваровТовары.Автомобиль КАК Автомобиль,
		         |	ПеремещениеТоваровТовары.Партия КАК Партия,
		         |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Партия) КАК Партия2,
		         |	ПеремещениеТоваровТовары.Цена КАК Цена,
		         |	ПеремещениеТоваровТовары.Количество КАК Количество,
		         |	ПеремещениеТоваровТовары.ОбщЦена КАК ОбщЦена,
		         |	ПеремещениеТоваровТовары.Комментарий КАК Комментарий,
		         |	ПеремещениеТоваровТовары.СостояниеТовара КАК СостояниеТовара,
		         |	ПеремещениеТоваровТовары.Товар.Код КАК Код,
		         |	ПеремещениеТоваровТовары.Товар.Артикул КАК Артикул
		         |ПОМЕСТИТЬ ВТ_ТЧЗаказано
		         |ИЗ
		         |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		         |ГДЕ
		         |	(ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Заказано)
		         |			ИЛИ ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.НетВНаличии))
		         |	И ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
		         |;
		         |
		         |////////////////////////////////////////////////////////////////////////////////
		         |ВЫБРАТЬ
		         |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		         |	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		         |	ПеремещениеТоваровТовары.Товар КАК Товар,
		         |	ПеремещениеТоваровТовары.Автомобиль КАК Автомобиль,
		         |	ПеремещениеТоваровТовары.Партия КАК Партия,
		         |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Партия) КАК Партия2,
		         |	ПеремещениеТоваровТовары.Цена КАК Цена,
		         |	ПеремещениеТоваровТовары.Количество КАК Количество,
		         |	ПеремещениеТоваровТовары.ОбщЦена КАК ОбщЦена,
		         |	ПеремещениеТоваровТовары.Комментарий КАК Комментарий,
		         |	ПеремещениеТоваровТовары.СостояниеТовара КАК СостояниеТовара,
		         |	ПеремещениеТоваровТовары.Товар.Код КАК Код,
		         |	ПеремещениеТоваровТовары.Товар.Артикул КАК Артикул
		         |ПОМЕСТИТЬ ВТ_ТЧСобрано
		         |ИЗ
		         |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		         |ГДЕ
		         |	(ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Собрано)
		         |			ИЛИ ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.НетВНаличии))
		         |	И ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
		         |;
		         |
		         |////////////////////////////////////////////////////////////////////////////////
		         |ВЫБРАТЬ
		         |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		         |	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		         |	ПеремещениеТоваровТовары.Товар КАК Товар,
		         |	ПеремещениеТоваровТовары.Автомобиль КАК Автомобиль,
		         |	ПеремещениеТоваровТовары.Партия КАК Партия,
		         |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Партия) КАК Партия2,
		         |	ПеремещениеТоваровТовары.Цена КАК Цена,
		         |	ПеремещениеТоваровТовары.Количество КАК Количество,
		         |	ПеремещениеТоваровТовары.ОбщЦена КАК ОбщЦена,
		         |	ПеремещениеТоваровТовары.Комментарий КАК Комментарий,
		         |	ПеремещениеТоваровТовары.СостояниеТовара КАК СостояниеТовара,
		         |	ПеремещениеТоваровТовары.Товар.Код КАК Код,
		         |	ПеремещениеТоваровТовары.Товар.Артикул КАК Артикул
		         |ПОМЕСТИТЬ ВТ_ТЧКОтправке
		         |ИЗ
		         |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		         |ГДЕ
		         |	ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.КОтправке)
		         |	И ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
		         |;
		         |
		         |////////////////////////////////////////////////////////////////////////////////
		         |ВЫБРАТЬ
		         |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		         |	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		         |	ПеремещениеТоваровТовары.Товар КАК Товар,
		         |	ПеремещениеТоваровТовары.Автомобиль КАК Автомобиль,
		         |	ПеремещениеТоваровТовары.Партия КАК Партия,
		         |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Партия) КАК Партия2,
		         |	ПеремещениеТоваровТовары.Цена КАК Цена,
		         |	ПеремещениеТоваровТовары.Количество КАК Количество,
		         |	ПеремещениеТоваровТовары.ОбщЦена КАК ОбщЦена,
		         |	ПеремещениеТоваровТовары.Комментарий КАК Комментарий,
		         |	ПеремещениеТоваровТовары.СостояниеТовара КАК СостояниеТовара,
		         |	ПеремещениеТоваровТовары.Товар.Код КАК Код,
		         |	ПеремещениеТоваровТовары.Товар.Артикул КАК Артикул
		         |ПОМЕСТИТЬ ВТ_ТЧКОтправлен
		         |ИЗ
		         |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		         |ГДЕ
		         |	ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Отправлен)
		         |	И ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
		         |;
		         |
		         |////////////////////////////////////////////////////////////////////////////////
		         |ВЫБРАТЬ
		         |	ПеремещениеТоваров.Ссылка КАК Ссылка,
		         |	ПеремещениеТоваров.Номер КАК Номер,
		         |	ПеремещениеТоваров.Дата КАК Дата,
		         |	ПеремещениеТоваров.Организация КАК Организация,
		         |	ПеремещениеТоваров.Итого КАК Итого,
		         |	ПеремещениеТоваров.Ответственный КАК Ответственный,
		         |	ПеремещениеТоваров.Проверяющий КАК Проверяющий,
		         |	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
		         |	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель,
		         |	ПеремещениеТоваров.НомерВходящий КАК НомерВходящий,
		         |	ПеремещениеТоваров.Комментарий КАК Комментарий,
		         |	ПеремещениеТоваров.Статус КАК Статус,
		         |	ПеремещениеТоваров.Проект КАК Проект,
		         |	Сотрудники.Код КАК Код
		         |ИЗ
		         |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		         |		ПО ПеремещениеТоваров.Ответственный = Сотрудники.Ссылка
		         |ГДЕ
		         |	ПеремещениеТоваров.Номер = &Номер";
		
		///-ГомзМА 31.01.2024
	//Текст =  "ВЫБРАТЬ
	//         |	Сотрудники.Код КАК Код,
	//         |	ПеремещениеТоваров.Ссылка КАК Ссылка,
	//         |	ПеремещениеТоваров.ВерсияДанных КАК ВерсияДанных,
	//         |	ПеремещениеТоваров.ПометкаУдаления КАК ПометкаУдаления,
	//         |	ПеремещениеТоваров.Номер КАК Номер,
	//         |	ПеремещениеТоваров.Дата КАК Дата,
	//         |	ПеремещениеТоваров.Проведен КАК Проведен,
	//         |	ПеремещениеТоваров.Организация КАК Организация,
	//         |	ПеремещениеТоваров.УдалитьКлиент КАК УдалитьКлиент,
	//         |	ПеремещениеТоваров.Итого КАК Итого,
	//         |	ПеремещениеТоваров.Ответственный КАК Ответственный,
	//         |	ПеремещениеТоваров.Проверяющий КАК Проверяющий,
	//         |	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
	//         |	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель,
	//         |	ПеремещениеТоваров.НомерВходящий КАК НомерВходящий,
	//         |	ПеремещениеТоваров.Комментарий КАК Комментарий,
	//         |	ПеремещениеТоваров.Статус КАК Статус,
	//         |	ПеремещениеТоваров.Проект КАК Проект,
	//         |	ПеремещениеТоваров.Товары.(
	//         |		Ссылка КАК Ссылка,
	//         |		НомерСтроки КАК НомерСтроки,
	//         |		Товар КАК Товар,
	//         |		Автомобиль КАК Автомобиль,
	//         |		Партия КАК Партия,
	//         |		Цена КАК Цена,
	//		 	|		ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваров.Товары.Партия) КАК Партия2,

	//         |		Количество КАК Количество,
	//         |		ОбщЦена КАК ОбщЦена,
	//         |		Комментарий КАК Комментарий,
	//         |		СостояниеТовара КАК СостояниеТовара,
	//         |		Товар.Артикул КАК Артикул,
	//         |		Товар.Код КАК Код
	//         |	) КАК Товары
	//         |ИЗ
	//         |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	//         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	//         |		ПО ПеремещениеТоваров.Ответственный = Сотрудники.Ссылка
	//         |ГДЕ
	//         |	ПеремещениеТоваров.Номер = &Номер
	//		 | &Фильтр";
	Возврат Текст;
КонецФункции

Функция текстДляСпискаЗаявок()
	Текст ="ВЫБРАТЬ
	|	ИндНомер.индкод.Владелец КАК индкодВладелец,
	|МАКСИМУМ(ВЫБОР
	|КОГДА ИндНомер.Стеллаж.Наименование ПОДОБНО &кСклады
	|	ТОГДА 1
	|	ИНАЧЕ 0
	|КОНЕЦ) КАК Поле1
	|ПОМЕСТИТЬ ВТ_КСклад
	|ИЗ
	|РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|ИндНомер.Стеллаж.Наименование ПОДОБНО &кСклады
	|СГРУППИРОВАТЬ ПО
	|	ИндНомер.индкод.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВТ_КСклад.Поле1) КАК Поле1
	|ПОМЕСТИТЬ ВТ_НаКСкладе
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		левое СОЕДИНЕНИЕ ВТ_КСклад КАК ВТ_КСклад
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_КСклад.индкодВладелец
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100000
	|	ЗаказКлиента.СтатусОбработки КАК СтатусОбработки,
	|	ЗаказКлиента.Состояние КАК Состояние,
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Клиент КАК Клиент,
	|	ЗаказКлиента.Ответственный КАК Ответственный,
	|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
	|	ЗаказКлиента.Комментарий КАК Комментарий,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку
	|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаявок.&СостояниеСборки)
	|	И (ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Ожидание)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Думает)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ПропущенныйЗвонок)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ЖдёмДенег))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
	|	ВТ_ДанныеЗаявки.Номер КАК Номер,
	|	ВТ_ДанныеЗаявки.Дата КАК Дата,
	|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
	|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
	|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
	|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
	|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
	|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
	|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ВТ_ДанныеЗаявки.СтатусОбработки КАК СтатусОбработки,
	|	ВТ_НаКСкладе.Поле1 КАК НаКскладе
	|ИЗ
	|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
	|		левое СОЕДИНЕНИЕ ВТ_НаКСкладе КАК ВТ_НаКСкладе
	|		ПО ВТ_ДанныеЗаявки.Ссылка = ВТ_НаКСкладе.Ссылка
	|ГДЕ
	|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи";  
	Возврат текст;
КонецФункции

Функция текстДляЗаявки()
	Текст =  "ВЫБРАТЬ
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Клиент КАК Клиент,
	|	ЗаказКлиента.Состояние КАК Состояние,
	|	ЗаказКлиента.Ответственный КАК Ответственный,
	|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
	|	ЗаказКлиента.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ЦенаОригинала КАК ЦенаОригинала,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		Отменено КАК Отменено,
	|		Склад КАК Склад,
	|		СуммаНДС КАК СуммаНДС,
	|		Комментарий КАК Комментарий,
	|		ПредлагаемаяЦена КАК ПредлагаемаяЦена,
	|		Партия КАК Партия,
	|		Представление(Партия) КАК Партия2,
	|		Номенклатура.Код КАК Код
	|	) КАК Товары,
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.СтатусОбработки КАК СтатусОбработки,
	|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ЗаказКлиента.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция текстДляСпискаСотрудников() 
	Текст =  "ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	Сотрудники.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.Пользователь.Недействителен
	|	И Сотрудники.ДолжностьДляУК = &ДолжностьДляУК
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Возврат Текст;
КонецФункции

Функция текстДляЗаявокИПродаж() 
	Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Клиент КАК Клиент,
	|	ЗаказКлиента.СтатусОбработки КАК СтатусОбработки,
	|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	1 КАК Флаг,
	|	ЗаказКлиента.Ответственный КАК Ответственный,
	|	ЗаказКлиента.Дата КАК Дата
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Номер ПОДОБНО &Номер
	|	И ЗаказКлиента.Дата > &Дата
	|{ГДЕ
	|	(ЗаказКлиента.Ответственный = &Ответственный) КАК Поле2}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПродажаЗапчастей.Номер,
	|	ПродажаЗапчастей.Клиент,
	|	ПродажаЗапчастей.СтатусОбработки,
	|	ПродажаЗапчастей.ОтветственныйКладовщик,
	|	ПродажаЗапчастей.Ссылка,
	|	0,
	|	ПродажаЗапчастей.КтоПродал,
	|	ПродажаЗапчастей.Дата
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.Номер ПОДОБНО &Номер
	|	И ПродажаЗапчастей.Дата > &Дата
	|{ГДЕ
	|	(ПродажаЗапчастей.КтоПродал = &Ответственный) КАК Поле2}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер УБЫВ"; 
	Возврат Текст;
КонецФункции

Функция текстДляСчета() 
	
	///+ГомзМА 29.11.2023
	Текст =  "ВЫБРАТЬ
	|	ПредварительныйСчет.Номер КАК Номер,
	|	ПредварительныйСчет.Ссылка КАК Ссылка,
	|	ПредварительныйСчет.Дата КАК Дата,
	|	ПредварительныйСчет.Клиент КАК Клиент,
	|	ПредварительныйСчет.Организация КАК Организация,
	|	ПредварительныйСчет.ИтогоРекв КАК ИтогоРекв,
	|	ПредварительныйСчет.КтоПродал КАК КтоПродал,
	|	ПредварительныйСчет.Таблица.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Товар КАК Товар,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Скидка КАК Скидка,
	|		машина КАК машина,
	|		цена1 КАК цена1,
	|		Комментарий КАК Комментарий,
	|		Сумма КАК Сумма,
	|		ПродНак КАК ПродНак
	|	) КАК Таблица,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	ПредварительныйСчет.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	Документ.ПредварительныйСчет КАК ПредварительныйСчет
	|ГДЕ
	|	ПредварительныйСчет.Номер = &Номер";
	Возврат Текст;
	///-ГомзМА 29.11.2023
	
КонецФункции

Функция текстДляЗаказНаряда() 
	
	Текст =  "ВЫБРАТЬ
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.Номер = &Номер";
	Возврат Текст;
	
КонецФункции

Функция текстДляПродажиСтатусТК()
	
	///+ГомзМА 27.11.2023
	Текст =  "ВЫБРАТЬ
	|	ПродажаЗапчастей.Номер КАК Номер,
	|	ПродажаЗапчастей.Ссылка КАК ссылка,
	|	ПродажаЗапчастей.Дата КАК Дата,
	|	ПродажаЗапчастей.Клиент КАК Клиент,
	|	ПродажаЗапчастей.ИтогоРекв КАК ИтогоРекв,
	|	ПродажаЗапчастей.КтоПродал КАК КтоПродал,
	|	ПродажаЗапчастей.WTpanel КАК СтатусОбработки,
	|	ПродажаЗапчастей.ПодстатусОбработки КАК ПодстатусОбработки,
	|	ПродажаЗапчастей.СтатусЗаказаВТК КАК СтатусЗаказаВТК,
	|	ПродажаЗапчастей.ИсторияОтслеживанияЗаказа КАК ИсторияОтслеживанияЗаказа,
	|	ПродажаЗапчастей.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	|	ПродажаЗапчастей.ТрекНомер КАК ТрекНомер,
	|	ПродажаЗапчастей.Вес КАК Вес,
	|	ПродажаЗапчастей.ГородОтправки КАК ГородОтправки,
	|	ПродажаЗапчастей.СтранаПолучения КАК СтранаПолучения,
	|	ПродажаЗапчастей.РегионПолучения КАК РегионПолучения,
	|	ПродажаЗапчастей.ГородПолучения КАК ГородПолучения,
	|	ПродажаЗапчастей.СтатусДоставки КАК СтатусДоставки,
	|	ПродажаЗапчастей.Водитель КАК Водитель,
	|	ПродажаЗапчастей.ИНН КАК ИНН,
	|	ПродажаЗапчастей.Паспорт КАК Паспорт,
	|	ПродажаЗапчастей.Прописка КАК Прописка,
	|	ПродажаЗапчастей.доставкаКлиент КАК доставкаКлиент,
	|	ПродажаЗапчастей.НаименованиеИлиФИО КАК НаименованиеИлиФИО,
	|	ПродажаЗапчастей.частный КАК частный,
	|	ПродажаЗапчастей.Таблица.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Товар КАК Товар,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Скидка КАК Скидка,
	|		машина КАК машина,
	|		цена1 КАК цена1,
	|		Комментарий КАК Комментарий,
	|		Сумма КАК Сумма,
	|		ПродНак КАК ПродНак,
	|		укод КАК укод,
	|		Партия КАК Партия,
	|		Отменено КАК Отменено,
	|		Склад КАК Склад,
	|		СуммаНДС КАК СуммаНДС,
	|		СтатусТовара КАК СтатусТовара,
	|		ДатаОтгрузкиСоСклада КАК ДатаОтгрузкиСоСклада,
	|		Сборщик КАК Сборщик,
	|		Товар.Код КАК Код,
	|		Товар.Артикул КАК Артикул
	|	) КАК Таблица,
	|	ПродажаЗапчастей.Телефон КАК Телефон
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.Номер = &Номер";
	Возврат Текст;
	///-ГомзМА 27.11.2023
КонецФункции

Функция текстДляСпискаПеремещений() 
	Текст = "ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПеремещениеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	|	ПеремещениеТоваровТовары.СостояниеТовара КАК СостояниеТовара
	|ПОМЕСТИТЬ Вт_Условие
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Ссылка,
	|	ПеремещениеТоваровТовары.СостояниеТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Заказ
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Заказано)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Собрано
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Собрано)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_КУпаковке
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.КОтправке)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_НаПриём
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.НаПриёме)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Отправлен
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Отправлен)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Принят
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Принят)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка,
	|	ПеремещениеТоваров.Дата КАК Дата,
	|	ПеремещениеТоваров.Ответственный КАК Ответственный,
	|	ПеремещениеТоваров.Проверяющий КАК Проверяющий,
	|	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
	|	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель,
	|	ПеремещениеТоваров.Статус КАК Статус,
	|	ВТ_Заказ.НомерСтроки КАК КолВоЗаказов,
	|	ВТ_Собрано.НомерСтроки КАК КолВоСобрано,
	|	ВТ_КУпаковке.НомерСтроки КАК КолВоКУпаковке,
	|	ВТ_НаПриём.НомерСтроки КАК КолВоНаПриём,
	|	ВТ_Отправлен.НомерСтроки КАК КолВоОтправлен,
	|	ВТ_Принят.НомерСтроки КАК КолВоПринят,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|ПОМЕСТИТЬ ВТ_Наряд
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		Левое СОЕДИНЕНИЕ ВТ_Заказ КАК ВТ_Заказ
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_Заказ.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_Собрано КАК ВТ_Собрано
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_Собрано.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_КУпаковке КАК ВТ_КУпаковке
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_КУпаковке.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_НаПриём КАК ВТ_НаПриём
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_НаПриём.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_Отправлен КАК ВТ_Отправлен
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_Отправлен.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_Принят КАК ВТ_Принят
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_Принят.Ссылка
	| &Фильтр
	// |{ГДЕ
	// |	(ЗаказНаряд.Состояние В (&СостояниНаряда)) ,
	// |	(ВТ_Сборка.КоличествоСтрок > &Сборка) ,
	// |	(ВТ_Выдача.КоличествоСтрок > &Выдача) }
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_Наряд.Номер КАК Номер,
	|	ВТ_Наряд.Дата КАК Дата,
	|	ВТ_Наряд.Ответственный КАК Ответственный,
	|	ВТ_Наряд.Статус КАК Статус,
	|	ВТ_Наряд.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Наряд.КолВоЗаказов КАК КолВоЗаказов,
	|	ВТ_Наряд.КолВоСобрано КАК КолВоСобрано,
	|	ВТ_Наряд.КолВоКУпаковке КАК КолВоКУпаковке,
	|	ВТ_Наряд.КолВоНаПриём КАК КолВоНаПриём,
	|	ВТ_Наряд.КолВоНаПриём КАК КолВоОтправлен,
	|	ВТ_Наряд.КолВоПринят КАК КолВоПринят,
	|	ВТ_Наряд.СкладОтправитель КАК СкладОтправитель,
	|	ВТ_Наряд.Проверяющий КАК Проверяющий,
	|	ВТ_Наряд.СкладПолучатель КАК СкладПолучатель
	
	|ИЗ
	|	ВТ_Наряд КАК ВТ_Наряд
	|ГДЕ
	|	ВТ_Наряд.НомерЗаписи >= &НачинаяСЗаписи  
	|	И ВТ_Наряд.Дата > датавремя(2023,10,02) 
	
	|	И  ВТ_Наряд.Статус <> Значение(перечисление.СтатусыПеремещений.Принят) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";
	Возврат текст;
	
КонецФункции


#Конецобласти


#Область GET 
Функция ПолучитьСписокСотрудниковGetWorkersList(Запрос) 
	запросСотрудников = Новый Запрос;
	запросСотрудников.Текст =  текстДляСпискаСотрудников(); 
	
	запросСотрудников.УстановитьПараметр("ДолжностьДляУК",Справочники.ДолжностиДляУК.НайтиПоКоду("000000001"));
	ВыборкаСотрудников = запросСотрудников.Выполнить().Выбрать();
	
	МассивСотрудников = новый массив;
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		СтруктураСотрдников = Новый Структура; 
		
		СтруктураСотрдников.Вставить("name",    Строка(ВыборкаСотрудников.Наименование));
		СтруктураСотрдников.Вставить("code", Строка(ВыборкаСотрудников.Код));
		МассивСотрудников.Добавить(СтруктураСотрдников);
	КонецЦикла;
	
	
	СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивСотрудников);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьСписокТоваровGetProductsList(Запрос)
	
	МассивСтеллажей = Новый Массив;
	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001068")); //RegionEKB
	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002014")); //RegionMSK
	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002015")); //RegionNN
	
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["IndCode"]))+"%" ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	запросТовара.УстановитьПараметр("Стеллаж", МассивСтеллажей);
	
	
	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
	
	запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["IndCode"]))+"%" );
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*((Запрос.ПараметрыURL["Page"])-1)+1)));
	Иначе 
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	Для каждого стр из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		итер = итер+1;
		тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));                      
		СтруктураТоваров.Вставить("place",    Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("code",    Строка(стр.Код));
		СтруктураТоваров.Вставить("count",    Строка(стр.Остаток));
		СтруктураТоваров.Вставить("stack",    стр.Комплектация);
		
		СтруктураТоваров.Вставить("sity",    Строка(стр.Город));
		
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон)); 
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);
	Если Лев(Запрос.ПараметрыURL["IndCode"],1) = "П" Тогда
		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["IndCode"])))); 
		//	Иначе
		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
	КонецЕсли;
	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокТоваровКорзинаGetProductsListShelf(Запрос)
	
	///+ГомзМА 01.02.2024
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляНоменклатурыПолка(), Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["IndCode"]))+"%" ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	
	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
	
	запросТовара.Текст =  СтрШаблон(текстДляНоменклатурыПолка(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["IndCode"]))+"%" );
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*((Запрос.ПараметрыURL["Page"])-1)+1)));
	Иначе 
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	Для каждого стр из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		итер = итер+1;
		тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));                      
		СтруктураТоваров.Вставить("place",    Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("code",    Строка(стр.Код));
		СтруктураТоваров.Вставить("count",    Строка(стр.Остаток));
		СтруктураТоваров.Вставить("stack",    стр.Комплектация);
		
		СтруктураТоваров.Вставить("sity",    Строка(стр.Город));
		
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон)); 
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);
	Если Лев(Запрос.ПараметрыURL["IndCode"],1) = "П" Тогда
		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["IndCode"])))); 
		//	Иначе
		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
	КонецЕсли;
	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 01.02.2024
	
КонецФункции

Функция ПолучитьТоварGetProduct(Запрос)
	
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));  
	
	
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]) ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	Для каждого стр из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		итер = итер+1;
		тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place",    Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("code",    Строка(стр.Код));
		СтруктураТоваров.Вставить("pk",    стр.АвитоЧастник);
		
		СтруктураТоваров.Вставить("count",    Строка(стр.Остаток));
		СтруктураТоваров.Вставить("stack",    стр.Комплектация);
		
		
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьМестаХраненияGetPlaces(Запрос)
	
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТовара1(), Формат(10000, "ЧГ="));  
	
	
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]) ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	//	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	//ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив")); 
	МассивТоваров = Новый Массив;
	тз.Сортировать("Количество Убыв");
	
	итер = 0;
	ПроверкаМеста = "";
	Для каждого стр из ТЗ Цикл
		
		//Если Строка(стр.Адрес) <> ПроверкаМеста Тогда
		СтруктураТоваров = Новый Структура;
		//СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		//СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		//СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		//СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place",    Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("sity",     Строка(стр.Город));  
		СтруктураТоваров.Вставить("count",    Строка(стр.Количество));
		//ПроверкаМеста = Строка(стр.Адрес);
		//СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));   
		//СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
		//конецЕсли;
		
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьТоварGetProduct1(Запрос)
	
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));  
	
	
	запросТовара.УстановитьПараметр("наименование", Строка(Запрос.ПараметрыURL["id"]) ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	Для каждого стр из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		//Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
		
		стр.колфото = 1;  
		
		Для каждого Фотка Из НайденныеФотки Цикл
			Текст = "";
			//Текст = "https://wt10.ru" + Фотка; 
			Текст = Фотка;
			МассивФото.Добавить(Текст);
		КонецЦикла; 
		//КонецЕсли;
		итер = итер+1;
		тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place",    Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
		//СтруктураТоваров.Вставить("pk",    стр.АвитоЧастник);
		
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокКатегорийgetCategories(Запрос)	
	МассивКатегорий= Новый Массив;
	Дерево = Новый ДеревоЗначений;
	запросКатегорий = Новый Запрос;
	запросКатегорий.Текст = "ВЫБРАТЬ
	                        |	Категории.Ссылка КАК Ссылка,
	                        |	Категории.Код КАК Код
	                        |ИЗ
	                        |	Справочник.Категории КАК Категории
	                        |ИТОГИ ПО
	                        |	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	Дерево = запросКатегорий.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	МассивКатегорий= Новый Массив;
	Для Каждого СтрПервогоУровня из Дерево.Строки Цикл
		СтруктураКатегорий1 = Новый Структура;
		СтруктураКатегорий1.Вставить("Category",Строка(СтрПервогоУровня.Ссылка));
		МассивКатегорий2 = Новый массив;
		Для Каждого стрВторогоУровня из СтрПервогоУровня.Строки Цикл 
			МассивКатегорий3 = Новый массив;
			
			Для Каждого стрТретьегоУровня из СтрВторогоУровня.Строки Цикл
				СтруктураКатегорий3 = Новый Структура;
				СтруктураКатегорий3.Вставить("category","");
				
				СтруктураКатегорий3.Вставить("category",Строка(стрТретьегоУровня.Ссылка));
				
				МассивКатегорий3.Добавить(СтруктураКатегорий3);	
			КонецЦикла;	
			СтруктураКатегорий2 = новый Структура;
			СтруктураКатегорий2.Вставить("category",Строка(стрВторогоУровня.Ссылка));
			Если МассивКатегорий3.Количество()>0 Тогда
				
				СтруктураКатегорий2.Вставить("subcategory",МассивКатегорий3);
			КонецЕсли;
			МассивКатегорий2.Добавить(СтруктураКатегорий2);
		КонецЦикла;
		Если МассивКатегорий2.Количество()>0 Тогда
			СтруктураКатегорий1.Вставить("subcategory",МассивКатегорий2);
			
		КонецЕсли;
		МассивКатегорий.Добавить(СтруктураКатегорий1);
	КонецЦикла;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокЗаявокlistapplication(Запрос)
	
	запросзаявки = Новый Запрос;
	
	запросзаявки.Текст =  ТекстдляСпискаЗаявок();
	запросзаявки.УстановитьПараметр("Ответственный",Запрос.ПараметрыURL["Phone"] ); 
	Выборкаобщ = запросзаявки.Выполнить().Выбрать().Количество();  
	
	запросзаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	запросзаявки.УстановитьПараметр("Телефон",Запрос.ПараметрыURL["Phone"] ); 
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросзаявки.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	Иначе 
		запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	МассивЗаявок = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураЗаявки = новый Структура;
		СтруктураЗаявки.Вставить("num",Строка(выборка.Номер));
		СтруктураЗаявки.Вставить("date",Строка(выборка.Дата));
		СтруктураЗаявки.Вставить("client",Строка(выборка.Клиент));
		СтруктураЗаявки.Вставить("condition",Строка(выборка.Состояние));
		СтруктураЗаявки.Вставить("responsible",Строка(выборка.Ответственный));
		СтруктураЗаявки.Вставить("Sum",Строка(выборка.СуммаДокумента));
		СтруктураЗаявки.Вставить("calldate",Строка(выборка.ДатаСвязи));
		СтруктураЗаявки.Вставить("processing",Строка(выборка.СтатусОбработки));
		СтруктураЗаявки.Вставить("porter",Строка(выборка.ОтветственныйЗаОбработку));
		МассивЗаявок.Добавить(СтруктураЗаявки);
	КонецЦикла;  
	
	
	СтруктураИнфо = новый Структура;
	СтруктураИнфо.Вставить("pages",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗаявок);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокПродажlissale(Запрос)
	
	запроспродаж = Новый Запрос;
	запроспродаж.Текст =  СтрШаблон(текстДляСпискаПродаж(), Формат(10000, "ЧГ="));
	запроспродаж.УстановитьПараметр("Телефон",Запрос.ПараметрыURL["Phone"] ); 
	запроспродаж.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запроспродаж.Выполнить().Выбрать().Количество();  
	
	запроспродаж.Текст =  СтрШаблон(текстДляСпискаПродаж(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	запроспродаж.УстановитьПараметр("Телефон",Запрос.ПараметрыURL["Phone"] ); 
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запроспродаж.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	Иначе 
		запроспродаж.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = запроспродаж.Выполнить().Выбрать();
	
	МассивПродаж = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураПродажи = новый Структура;
		СтруктураПродажи.Вставить("num",Строка(выборка.Номер));
		СтруктураПродажи.Вставить("date",Строка(выборка.Дата));
		СтруктураПродажи.Вставить("client",Строка(выборка.Клиент));
		
		СтруктураПродажи.Вставить("responsible",Строка(выборка.Ответственный));
		СтруктураПродажи.Вставить("sum",Строка(выборка.СуммаДокумента));
		
		МассивПродаж.Добавить(СтруктураПродажи);
	КонецЦикла;
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивПродаж);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьВесьСписокЗаявокalllistapplication(Запрос) 
	
	Если число(Запрос.ПараметрыURL["processing"]) = 1 тогда 
		состояниеСборки = "ВОбработке";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 2 тогда 
		состояниеСборки = "ВРаботе";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 3 тогда
		состояниеСборки = "НаСогласовании";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 4 тогда
		состояниеСборки = "Обработано"; 
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 5 тогда
		состояниеСборки = "Выдано";  
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 6 тогда
		состояниеСборки = "Упаковано";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 7 тогда
		состояниеСборки = "ОтправленоВТК";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 8 тогда
		состояниеСборки = "ПринятоВТК";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 9 тогда
		состояниеСборки = "ПолученоКлиентом";
	КонецЕсли;
	
	запросзаявки = Новый Запрос;
	
	запросзаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="));
	запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&СостояниеСборки",состояниеСборки);
	
	Если Запрос.ПараметрыURL["userid"] <> Неопределено и Запрос.ПараметрыURL["userid"] <> "0" тогда 
		запросзаявки.Текст = запросзаявки.Текст +	" и
		|	(ВТ_ДанныеЗаявки.Ответственный = &Ответственный
		|    ИЛИ ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку = &Ответственный)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЗаписи";
		Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
		запросзаявки.УстановитьПараметр("Ответственный", Ответственный);
	КонецЕсли;
	запросзаявки.УстановитьПараметр("кСклады", "%"+ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе("K-")+"%");	
	запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	Выборкаобщ = запросзаявки.Выполнить().Выбрать().Количество();  
	
	
	
	запросзаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	
	запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&СостояниеСборки",состояниеСборки);
	Если Запрос.ПараметрыURL["userid"] <> Неопределено и Запрос.ПараметрыURL["userid"] <> "0" тогда 
		запросзаявки.Текст = запросзаявки.Текст +	" и
		|	(ВТ_ДанныеЗаявки.Ответственный = &Ответственный
		|    ИЛИ ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку = &Ответственный)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЗаписи";		
		запросзаявки.УстановитьПараметр("Ответственный", Ответственный);
	КонецЕсли;
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросзаявки.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
		
	Иначе 
		запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	МассивЗаявок = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураЗаявки = новый Структура;
		СтруктураЗаявки.Вставить("num",Строка(выборка.Номер));
		СтруктураЗаявки.Вставить("date",Строка(выборка.Дата));
		СтруктураЗаявки.Вставить("client",Строка(выборка.Клиент));
		СтруктураЗаявки.Вставить("condition",Строка(выборка.Состояние));
		СтруктураЗаявки.Вставить("responsible",Строка(выборка.Ответственный));
		СтруктураЗаявки.Вставить("sum",Строка(выборка.СуммаДокумента));
		СтруктураЗаявки.Вставить("callDate",Строка(выборка.ДатаСвязи));
		СтруктураЗаявки.Вставить("processing",Строка(выборка.СтатусОбработки));
		СтруктураЗаявки.Вставить("porter",Строка(выборка.ОтветственныйЗаОбработку));
		СтруктураЗаявки.Вставить("comment",Строка(выборка.Комментарий));
		СтруктураЗаявки.Вставить("k",Строка(выборка.НаКскладе));
		МассивЗаявок.Добавить(СтруктураЗаявки);
	КонецЦикла;  
	
	
	СтруктураИнфо = новый Структура;
	СтруктураИнфо.Вставить("pages",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗаявок);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьВесьСписокПродажalllissale(Запрос)
	Если число(Запрос.ПараметрыURL["processing"]) = 1 тогда 
		состояниеСборки = "ВОбработке";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 2 тогда 
		состояниеСборки = "ВРаботе";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 3 тогда
		состояниеСборки = "НаСогласовании";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 4 тогда
		состояниеСборки = "Обработано"; 
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 5 тогда
		состояниеСборки = "Выдано";  
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 6 тогда
		состояниеСборки = "Упаковано";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 7 тогда
		состояниеСборки = "ОтправленоВТК";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 8 тогда
		состояниеСборки = "ПринятоВТК";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 9 тогда
		состояниеСборки = "ПолученоКлиентом";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 41 тогда
		состояниеСборки = "ВзятоНаВыдачу";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 51 тогда
		состояниеСборки = "ОтправленоНаУпаковку";			
	Иначеесли число(Запрос.ПараметрыURL["processing"])  = 52 тогда
		состояниеСборки = "Упаковывается";
	Иначеесли число(Запрос.ПараметрыURL["processing"]) = 61 тогда
		состояниеСборки = "ОтправляетсяВТК";
	КонецЕсли;
	
	запроспродаж = Новый Запрос;
	запроспродаж.Текст =  СтрШаблон(текстДляСпискаПродаж(), Формат(10000, "ЧГ="));
	запроспродаж.Текст = СтрЗаменить(запроспродаж.Текст,"&СостояниеСборки",состояниеСборки);
	//запроспродаж.УстановитьПараметр("Телефон",Запрос.ПараметрыURL["Phone"] ); 
	запроспродаж.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запроспродаж.Выполнить().Выбрать().Количество();  
	
	запроспродаж.Текст =  СтрШаблон(текстДляСпискаПродаж(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	//запроспродаж.УстановитьПараметр("Телефон",Запрос.ПараметрыURL["Phone"] ); 
	запроспродаж.Текст = СтрЗаменить(запроспродаж.Текст,"&СостояниеСборки",состояниеСборки);
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запроспродаж.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
		
	Иначе 
		запроспродаж.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = запроспродаж.Выполнить().Выбрать();
	
	МассивПродаж = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураПродажи = новый Структура;
		СтруктураПродажи.Вставить("num",Строка(выборка.Номер));
		СтруктураПродажи.Вставить("date",Строка(выборка.Дата));
		СтруктураПродажи.Вставить("client",Строка(выборка.Клиент));
		СтруктураПродажи.Вставить("processing",Строка(выборка.СтатусОбработки));
		СтруктураПродажи.Вставить("responsible",Строка(выборка.Ответственный));
		СтруктураПродажи.Вставить("sum",Строка(выборка.СуммаДокумента));
		
		МассивПродаж.Добавить(СтруктураПродажи);
	КонецЦикла;
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивПродаж);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокОрганизацийlistorganizations(Запрос)  
	
	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	Организация.Код КАК Код,
	|	Организация.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организация КАК Организация
	|ГДЕ
	|	Не Организация.ПометкаУдаления "; 	
	Выборка = запрос.Выполнить().Выбрать();
	Выборкаобщ = Выборка.Количество();
	
	МассивОрганизаций = Новый Массив;
	Пока выборка.Следующий() Цикл
		Структураорганизации = новый Структура;
		Структураорганизации.Вставить("name",Строка(выборка.Наименование));
		Структураорганизации.Вставить("code",Строка(выборка.Код));
		
		МассивОрганизаций.Добавить(Структураорганизации);
	КонецЦикла;
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивОрганизаций);
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции               

Функция ПолучитьСписокСчетовlistaccounts(Запрос)  
	
	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	Счета.Наименование КАК Наименование,
	|	Счета.Код КАК Код
	|ИЗ
	|	Справочник.TipOplati КАК Счета
	|ГДЕ
	|	НЕ Счета.ПометкаУдаления"; 	
	Выборка = запрос.Выполнить().Выбрать();
	Выборкаобщ = Выборка.Количество();
	
	МассивСчетов = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураСчёта = новый Структура;
		СтруктураСчёта.Вставить("name",Строка(выборка.Наименование));
		СтруктураСчёта.Вставить("code",Строка(выборка.Код));
		//СтруктураСчёта.Вставить("Org",Строка(выборка.Владелец));
		МассивСчетов.Добавить(СтруктураСчёта);
	КонецЦикла;
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивСчетов);
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции 

Функция ПолучитьЗаявкуgetapplication(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать(); 
	КоличествоСФото   = 0;
	КоличествоТоваров = 0;
	
	
	МассивТоваров = Новый Массив;
	СтруктураИнфо = новый Структура;
	
	//Пока выборка.Следующий() Цикл 
	выборка.Следующий();
	
	Счет = ПроверкаСчета(Выборка.Ссылка);
	
	СтруктураИнфо.Вставить("num",Строка(выборка.Номер));
	СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
	СтруктураИнфо.Вставить("client",Строка(выборка.Клиент));
	СтруктураИнфо.Вставить("condition",Строка(выборка.Состояние));
	СтруктураИнфо.Вставить("responsible",Строка(выборка.Ответственный));
	СтруктураИнфо.Вставить("sum",Строка(выборка.СуммаДокумента));
	СтруктураИнфо.Вставить("callDate",Строка(выборка.ДатаСвязи));
	СтруктураИнфо.Вставить("processing",Строка(выборка.СтатусОбработки));
	СтруктураИнфо.Вставить("porter",Строка(выборка.ОтветственныйЗаОбработку));
	СтруктураИнфо.Вставить("comment",Строка(выборка.Комментарий));
	СтруктураИнфо.Вставить("numCheck",Строка(?(Счет.Ссылка = Неопределено, "", Счет.Ссылка.Номер)));
	ВыборкаТоваров = выборка.Товары.Выбрать(); 
	
	ТЗ = выборка.Товары.Выгрузить(); 
	Массивкодов = ТЗ.ВыгрузитьКолонку("Партия2");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	//Для каждого стр из ТЗ Цикл 
	//	НайденныеФотки = Новый Массив;
	//	Фотки = ПолучениеФото(стр.индкод);
	//	
	//	Если фотки <> неопределено и  фотки.Количество()>0  Тогда
	//		НайденныеФотки = Фотки[0].urls;
	//		Если НайденныеФотки.Количество()>0 Тогда
	//			стр.колфото = 1;  
	//		КонецЕсли; 
	//	КонецЕсли;
	//	
	//КонецЦикла;
	ИндКоды = тз.ВыгрузитьКолонку("Партия2");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	Для каждого стр из ТЗ Цикл
		
		//	Пока ВыборкаТоваров.Следующий() Цикл 
		МассивФото = новый массив;
		
		//Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
		//ПутьКФайлам = "W:\code\imageService\images\" + ВыборкаТоваров.Партия;
		//НайденныеФотки = НайтиФайлы(ПутьКФайлам,"*" );
		//Фотки = ПолучениеФото(ВыборкаТоваров.Партия);
		//Если фотки <> неопределено и  фотки.Количество()>0  Тогда
		НайденныеФотки = Новый Массив; 
		КоличествоСФото = КоличествоСФото + 1; 
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка;
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		итер = итер+1;
		
		//КонецЕсли;
		
		//КонецЕсли;
		
		//Если ВыборкаТоваров.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
		//	ПутьКФайлам = "C:\Users\admin\Pictures\prod_wt_images\" + ВыборкаТоваров.Партия;
		//	НайденныеФотки = НайтиФайлы(ПутьКФайлам,"*" );
		//	Если НайденныеФотки.Количество() > 0 Тогда
		//		КоличествоСФото = КоличествоСФото + 1; 
		//	КонецЕсли;
		//	Для каждого Фотка Из НайденныеФотки Цикл
		//		Текст = "";
		//		Текст =  "http://192.168.0.223:8081/image/" + ВыборкаТоваров.Партия + "/" + Фотка.Имя ;
		//		МассивФото.Добавить(Текст);
		//	КонецЦикла;
		//КонецЕсли; 
		
		Код = стр.Код; 
		Пока Лев(Код, 1) = "0" Цикл 
			Код = Прав(Код, СтрДлина(Код) - 1);
		КонецЦикла;
		СтруктураТоваров = Новый Структура; 
		СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
		СтруктураТоваров.Вставить("name",     Строка(стр.Номенклатура));
		СтруктураТоваров.Вставить("article",  Строка(стр.Номенклатура.Артикул));
		СтруктураТоваров.Вставить("cost",     Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment",  Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("code",     Строка("00"+Код));
		СтруктураТоваров.Вставить("indcode",  Строка(стр.Партия));
		СтруктураТоваров.Вставить("stat",     стр.Отменено); 
		СтруктураТоваров.Вставить("k",        ЕстьНаКСкладе(стр.Номенклатура)); 
		Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
			НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
			НаборЗаписей.Отбор.индкод.Установить(стр.Партия);
			НаборЗаписей.Прочитать(); 
			Товар = НаборЗаписей[0]; 
			СтруктураТоваров.Вставить("place",    Строка(Товар.стеллаж)); 
			СтруктураТоваров.Вставить("poddon",    Строка(Товар.поддон)); 
		Иначе
			СтруктураТоваров.Вставить("place",    Строка(стр.Номенклатура.МестоНаСкладе2));  
			СтруктураТоваров.Вставить("poddon",    Строка(""));
		КонецЕсли;  
		
		Если Не стр.Отменено тогда
			КоличествоТоваров = КоличествоТоваров +1;
		КонецЕсли;
		
		
		СтруктураТоваров.Вставить("photos",   МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла; 
	
	Если КоличествоТоваров <= КоличествоСФото и КоличествоТоваров > 0 тогда 
		СтруктураИнфо.Вставить("stat", Истина);
	Иначе
		СтруктураИнфо.Вставить("stat", Ложь);
	КонецЕсли;
	
	//КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьПродажуgetsale(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляПродажи();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("num",Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client",Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("application",Строка(выборка.ЗаказКлиента));
		СтруктураИнфо.Вставить("processing",Строка(выборка.СтатусОбработки));
		СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible",Строка(выборка.КтоПродал));
		СтруктураИнфо.Вставить("sum",Строка(выборка.ИтогоРекв));
		
		//	ВыборкаТоваров = выборка.Таблица.Выбрать();
		
		
		ТЗ = выборка.Таблица.Выгрузить(); 
		Массивкодов = ТЗ.ВыгрузитьКолонку("Партия");
		ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
		ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;
		//Для каждого стр из ТЗ Цикл 
		//	НайденныеФотки = Новый Массив;
		//	Фотки = ПолучениеФото(стр.индкод);
		//	
		//	Если фотки <> неопределено и  фотки.Количество()>0  Тогда
		//		НайденныеФотки = Фотки[0].urls;
		//		Если НайденныеФотки.Количество()>0 Тогда
		//			стр.колфото = 1;  
		//		КонецЕсли; 
		//	КонецЕсли;
		//	
		//КонецЦикла;
		ИндКоды = тз.ВыгрузитьКолонку("Партия2");
		Фотки = ПолучениеФото(ИндКоды);
		итер = 0;
		Для каждого стр из ТЗ Цикл
			
			//	Пока ВыборкаТоваров.Следующий() Цикл 
			МассивФото = новый массив;
			
			//Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
			//ПутьКФайлам = "W:\code\imageService\images\" + ВыборкаТоваров.Партия;
			//НайденныеФотки = НайтиФайлы(ПутьКФайлам,"*" );
			//Фотки = ПолучениеФото(ВыборкаТоваров.Партия);
			//Если фотки <> неопределено и  фотки.Количество()>0  Тогда
			НайденныеФотки = Новый Массив;  
			//КоличествоСФото = КоличествоСФото + 1; 
			//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
			НайденныеФотки = Фотки[итер].urls;
			МассивФото = новый массив;  
			Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
				
				стр.колфото = 1;  
				
				Для каждого Фотка Из НайденныеФотки Цикл
					Текст = "";
					//Текст = "https://wt10.ru" + Фотка;
					Текст = Фотка;
					МассивФото.Добавить(Текст);
				КонецЦикла; 
			КонецЕсли;
			итер = итер+1;
			
			//КонецЕсли;
			
			//КонецЕсли;
			
			Код = стр.Код; 
			Пока Лев(Код, 1) = "0" Цикл 
				Код = Прав(Код, СтрДлина(Код) - 1);
			КонецЦикла;
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name",    Строка(стр.Товар));
			СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
			СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
			СтруктураТоваров.Вставить("count", Строка(стр.Количество));		
			СтруктураТоваров.Вставить("sum",    Строка(стр.Сумма));
			СтруктураТоваров.Вставить("issued",    Строка(стр.СтатусТовара));
			СтруктураТоваров.Вставить("Code",     Строка("00"+Код));
			СтруктураТоваров.Вставить("indcode", Строка(стр.Партия));
			СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	
			СтруктураТоваров.Вставить("photos", МассивФото);  
			СтруктураТоваров.Вставить("state",  Строка(стр.СтатусТовара)); 
			СтруктураТоваров.Вставить("article",  Строка(стр.Артикул));
			СтруктураТоваров.Вставить("k",        ЕстьНаКСкладе(стр.Товар)); 
			СтруктураТоваров.Вставить("poddon",    Строка(ПолучитьПоддон(стр.Партия)));
			СтруктураТоваров.Вставить("cancel",    (стр.Отменено));
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;
	КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьЗаказНарядgetorder(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаказНаряда2();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("num",Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client",Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("application",Строка(выборка.ЗаказКлиента));
		СтруктураИнфо.Вставить("processing",Строка(выборка.состояние));
		//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible",Строка(выборка.Ответственный));
		//СтруктураИнфо.Вставить("sum",Строка(выборка.ИтогоРекв));
		МассивТоваров = ПолучитьСтруктуруТоваров(выборка.Номер);
		СтруктураИнфо.Вставить("state_product",МассивТоваров); 
		//	ВыборкаТоваров = выборка.Таблица.Выбрать();
		
		
		ТЗ = выборка.Таблица.Выгрузить(); 
		Массивкодов = ТЗ.ВыгрузитьКолонку("Партия");
		ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
		ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;
		
		ИндКоды = тз.ВыгрузитьКолонку("Партия2");
		Фотки = ПолучениеФото(ИндКоды);
		итер = 0;
		Для каждого стр из ТЗ Цикл
			Если стр.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Срочно 
				ИЛИ стр.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Планово 
				ИЛИ стр.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Собрано
				ИЛИ стр.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.НетВНаличии Тогда	
				МассивФото = новый массив;
				
				НайденныеФотки = Новый Массив;  
				НайденныеФотки = Фотки[итер].urls;
				МассивФото = новый массив;  
				Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
					
					стр.колфото = 1;  
					
					Для каждого Фотка Из НайденныеФотки Цикл
						Текст = "";
						Текст = Фотка;
						МассивФото.Добавить(Текст);
					КонецЦикла; 
				КонецЕсли;
				
				
				Код = стр.Код; 
				Пока Лев(Код, 1) = "0" Цикл 
					Код = Прав(Код, СтрДлина(Код) - 1);
				КонецЦикла;
				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("name",    Строка(стр.Товар));
				СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
				СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
				СтруктураТоваров.Вставить("count", Строка(стр.Количество));		
				СтруктураТоваров.Вставить("sum",    Строка(стр.Сумма));
				СтруктураТоваров.Вставить("issued",    Строка(стр.Состояние));
				СтруктураТоваров.Вставить("Code",     Строка("00"+Код));
				СтруктураТоваров.Вставить("indcode", Строка(стр.Партия));
				СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	
				СтруктураТоваров.Вставить("photos", МассивФото);  
				СтруктураТоваров.Вставить("state",  Строка(стр.Состояние)); 
				СтруктураТоваров.Вставить("article",  Строка(стр.Артикул));
				СтруктураТоваров.Вставить("k",        ЕстьНаКСкладе(стр.Товар)); 
				СтруктураТоваров.Вставить("rvr",        ЕстьНаПолкеРВРВ(стр.Товар));
				СтруктураТоваров.Вставить("poddon",    Строка(ПолучитьПоддон(стр.Партия))); 
				МассивТоваров.Добавить(СтруктураТоваров); 
			КонецЕсли;
			итер = итер+1;
		КонецЦикла; 
		
	КонецЦикла;	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьПеремещениеgetmove(Запрос)
	
	
	///+ГомзМА 31.01.2024
	ЗапросЗаявки = Новый Запрос;
	ЗапросЗаявки.Текст = ТекстДляПеремещения();
	
	ЗапросЗаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = ЗапросЗаявки.Выполнить().Выбрать();
	
	МассивТоваров = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("num",			Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",			Строка(выборка.Дата));
		СтруктураИнфо.Вставить("from",			Строка(выборка.СкладОтправитель));
		СтруктураИнфо.Вставить("to",			Строка(выборка.СкладПолучатель));
		СтруктураИнфо.Вставить("processing",	Строка(выборка.Статус));
		СтруктураИнфо.Вставить("responsible",	Строка(выборка.Ответственный));
		СтруктураИнфо.Вставить("recipient",		Строка(выборка.Проверяющий));
		
		МассивТоваров = ПолучитьСтруктуруТоваровПеремещения(Выборка.Номер);
		СтруктураИнфо.Вставить("state_product", МассивТоваров); 	
		
		Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
			ТЗ = ЗапросЗаявки.ВыполнитьПакетСПромежуточнымиДанными()[0].Выгрузить(); //ВТ_ТЧЗаказано
		ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "2" Тогда
			ТЗ = ЗапросЗаявки.ВыполнитьПакетСПромежуточнымиДанными()[1].Выгрузить(); //ВТ_ТЧСобрано
		ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "3" Тогда
			ТЗ = ЗапросЗаявки.ВыполнитьПакетСПромежуточнымиДанными()[2].Выгрузить(); //ВТ_ТЧКОтправке
		ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "4" Тогда
			ТЗ = ЗапросЗаявки.ВыполнитьПакетСПромежуточнымиДанными()[3].Выгрузить(); //ВТ_ТЧКОтправлен
		КонецЕсли;
		
		МассивТоваров = Новый Массив;
		
		Если ТЗ.Количество() > 0 Тогда
			Массивкодов = ТЗ.ВыгрузитьКолонку("Партия");
			ТЗ.Колонки.Добавить("колФото",  Новый ОписаниеТипов("Число"));  
			ТЗ.Колонки.Добавить("Фото",		Новый ОписаниеТипов("Массив"));
			
			ИндКоды = Тз.ВыгрузитьКолонку("Партия2");
			Фотки = ПолучениеФото(ИндКоды);
			Итер = 0;
			Для каждого Стр из ТЗ Цикл
				
				МассивФото = новый массив;
				
				НайденныеФотки = Новый Массив;  
				НайденныеФотки = Фотки[итер].urls;
				МассивФото = новый массив;  
				Если НайденныеФотки <> Неопределено и НайденныеФотки.Количество()>0 Тогда
					
					стр.колфото = 1;  
					
					Для каждого Фотка Из НайденныеФотки Цикл
						Текст = "";
						Текст = Фотка;
						МассивФото.Добавить(Текст);
					КонецЦикла; 
				КонецЕсли;
				
				Код = стр.Код; 
				Пока Лев(Код, 1) = "0" Цикл 
					Код = Прав(Код, СтрДлина(Код) - 1);
				КонецЦикла;
				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("name",    	Строка(стр.Товар));
				СтруктураТоваров.Вставить("position", 	Строка(стр.НомерСтроки));
				СтруктураТоваров.Вставить("car",    	Строка(стр.Автомобиль));
				СтруктураТоваров.Вставить("count", 		Строка(стр.Количество));		
				СтруктураТоваров.Вставить("sum",    	Строка(стр.ОбщЦена));
				СтруктураТоваров.Вставить("issued",    	Строка(стр.СостояниеТовара));
				СтруктураТоваров.Вставить("Code",     	Строка("00"+Код));
				СтруктураТоваров.Вставить("indcode", 	Строка(стр.Партия));
				СтруктураТоваров.Вставить("place", 		Строка(ПолучитьМесто(стр.Партия)));	
				СтруктураТоваров.Вставить("photos", 	МассивФото);  
				СтруктураТоваров.Вставить("article",  	Строка(стр.Артикул));
				СтруктураТоваров.Вставить("k",        	ЕстьНаКСкладе(стр.Товар)); 
				СтруктураТоваров.Вставить("rvr",        ЕстьНаПолкеРВРВ(стр.Товар));
				СтруктураТоваров.Вставить("poddon",    	Строка(ПолучитьПоддон(стр.Партия))); 
				МассивТоваров.Добавить(СтруктураТоваров); 
				итер = итер+1;
				
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;	
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	///-ГомзМА 31.01.2024
	
	
	
	
	//запросзаявки = Новый Запрос;
	//запросзаявки.Текст = текстДляПеремещения();
	//
	/////+ГомзМА 26.01.2024
	//Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
	//	запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&Фильтр","И (ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Заказано)" + Символы.ПС + 
	//															   "	ИЛИ ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.НетВНаличии))");
	//ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "2" Тогда
	//	
	//	запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&Фильтр","И (ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Собрано)" + Символы.ПС + 
	//															   "	ИЛИ ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.НетВНаличии))");
	//ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "3" Тогда
	//	
	//	запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&Фильтр","И (ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.КОтправке))");
	//ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "4" Тогда
	//	
	//	запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&Фильтр","И (ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Отправлен))");
	//ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "5" Тогда
	//	
	//	//запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&Фильтр","Где ВТ_Принят.НомерСтроки > 0");
	//	
	//КонецЕсли;
	/////-ГомзМА 26.01.2024
	//
	//запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	//Выборка = запросзаявки.Выполнить().Выбрать();
	//
	/////+ГомзМА 29.01.2024
	//НетТоваровСоСтатусом = Ложь;
	//Если Выборка.Количество() = 0 Тогда
	//	НетТоваровСоСтатусом = Истина;
	//	запросзаявки.Текст = СтрЗаменить(текстДляПеремещения(),"&Фильтр", "");
	//	Выборка = запросзаявки.Выполнить().Выбрать();
	//КонецЕсли;
	/////-ГомзМА 29.01.2024
	//
	//
	//МассивТоваров = Новый Массив;
	//Пока выборка.Следующий() Цикл
	//	СтруктураИнфо = новый Структура;
	//	СтруктураИнфо.Вставить("num",Строка(выборка.Номер));
	//	СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
	//	СтруктураИнфо.Вставить("from",Строка(выборка.СкладОтправитель));
	//	СтруктураИнфо.Вставить("to",Строка(выборка.СкладПолучатель));
	//	СтруктураИнфо.Вставить("processing",Строка(выборка.Статус));
	//	//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
	//	//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
	//	//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
	//	СтруктураИнфо.Вставить("responsible",Строка(выборка.Ответственный));
	//	СтруктураИнфо.Вставить("recipient",Строка(выборка.Проверяющий));
	//	
	//	//	ВыборкаТоваров = выборка.Таблица.Выбрать();
	//	
	//	///+ГомзМА 29.01.2024
	//	Если НЕ НетТоваровСоСтатусом Тогда
	//	МассивТоваров = ПолучитьСтруктуруТоваровПеремещения(выборка.Номер);
	//	СтруктураИнфо.Вставить("state_product",МассивТоваров); 	
	//		
	//	ТЗ = выборка.Товары.Выгрузить(); 
	//	Массивкодов = ТЗ.ВыгрузитьКолонку("Партия");
	//	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	//	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	//	МассивТоваров = Новый Массив;
	//	
	//	ИндКоды = тз.ВыгрузитьКолонку("Партия2");
	//	Фотки = ПолучениеФото(ИндКоды);
	//	итер = 0;
	//	Для каждого стр из ТЗ Цикл
	//		
	//			МассивФото = новый массив;
	//			
	//			НайденныеФотки = Новый Массив;  
	//			НайденныеФотки = Фотки[итер].urls;
	//			МассивФото = новый массив;  
	//			Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
	//				
	//				стр.колфото = 1;  
	//				
	//				Для каждого Фотка Из НайденныеФотки Цикл
	//					Текст = "";
	//					Текст = Фотка;
	//					МассивФото.Добавить(Текст);
	//				КонецЦикла; 
	//			КонецЕсли;
	//							
	//			Код = стр.Код; 
	//			Пока Лев(Код, 1) = "0" Цикл 
	//				Код = Прав(Код, СтрДлина(Код) - 1);
	//			КонецЦикла;
	//			СтруктураТоваров = Новый Структура;
	//			СтруктураТоваров.Вставить("name",    Строка(стр.Товар));
	//			СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
	//			СтруктураТоваров.Вставить("car",    Строка(стр.Автомобиль));
	//			СтруктураТоваров.Вставить("count", Строка(стр.Количество));		
	//			СтруктураТоваров.Вставить("sum",    Строка(стр.ОбщЦена));
	//			СтруктураТоваров.Вставить("issued",    Строка(стр.СостояниеТовара));
	//			СтруктураТоваров.Вставить("Code",     Строка("00"+Код));
	//			СтруктураТоваров.Вставить("indcode", Строка(стр.Партия));
	//			СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	
	//			СтруктураТоваров.Вставить("photos", МассивФото);  
	//			СтруктураТоваров.Вставить("article",  Строка(стр.Артикул));
	//			СтруктураТоваров.Вставить("k",        ЕстьНаКСкладе(стр.Товар)); 
	//			СтруктураТоваров.Вставить("rvr",        ЕстьНаПолкеРВРВ(стр.Товар));
	//			СтруктураТоваров.Вставить("poddon",    Строка(ПолучитьПоддон(стр.Партия))); 
	//			МассивТоваров.Добавить(СтруктураТоваров); 
	//		итер = итер+1;

	//	КонецЦикла; 
	//	КонецЕсли;
	//КонецЦикла;	
	//
	//СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	//СтруктураОтвета.Вставить("data",МассивТоваров);
	//
	//ЗаписьJSON = Новый ЗаписьJSON;
	//ЗаписьJSON.УстановитьСтроку();
	//
	//ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	//
	//СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	//
	//Ответ = Новый HTTPСервисОтвет(200);	
	//Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	//
	//Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	//
	Возврат Ответ;
КонецФункции
Функция ПолучитьАвторизациюAuthorization(Запрос)
	ЗапросСотрудника = Новый запрос;
	ЗапросСотрудника.Текст = "ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Организация КАК Организация,
	|	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ДолжностиСотрудниковСрезПоследних.ТипДоговора КАК ТипДоговора,
	|	ДолжностиСотрудниковСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втДолжности
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	Подразделение,
	|	Должность,
	|	ТипДоговора,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(втДолжности.Период) КАК Период
	|ПОМЕСТИТЬ втДолжностиПериоды
	|ИЗ
	|	втДолжности КАК втДолжности
	|
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(втДолжности.Организация) КАК Организация,
	|	МИНИМУМ(втДолжности.Подразделение) КАК Подразделение,
	|	МИНИМУМ(втДолжности.Должность) КАК Должность,
	|	МИНИМУМ(втДолжности.ТипДоговора) КАК ТипДоговора
	|ПОМЕСТИТЬ втДолжностиСотрудников
	|ИЗ
	|	втДолжности КАК втДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолжностиПериоды КАК втДолжностиПериоды
	|		ПО втДолжности.Сотрудник = втДолжностиПериоды.Сотрудник
	|			И (втДолжностиПериоды.Период = втДолжности.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	втДолжностиСотрудников.Организация КАК Организация,
	|	втДолжностиСотрудников.Подразделение КАК Подразделение,
	|	втДолжностиСотрудников.Должность КАК Должность,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втДолжностиСотрудников.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка) КАК Действующий,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	Сотрудники.МестоРаботы КАК МестоРаботы,
	|	Сотрудники.ПарольДляУК КАК ПарольДляУК,
	|	Сотрудники.Тележка КАК Тележка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолжностиСотрудников КАК втДолжностиСотрудников
	|		ПО (втДолжностиСотрудников.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	|ГДЕ
	|	(ТелефоныЛичные.ТелефонЛичный = &Телефон
	|			ИЛИ ТелефоныСлужебные.ТелефонСлужебный = &Телефон)
	|	И НЕ Сотрудники.Пользователь.Недействителен";
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	ЗапросСотрудника.УстановитьПараметр("Телефон", Строка(Массив.Phone));
	
	ВыборкаСотрудника = ЗапросСотрудника.Выполнить().Выбрать();
	Если ВыборкаСотрудника.Количество() > 0 Тогда
		ВыборкаСотрудника.Следующий();
		Если ВыборкаСотрудника.ПарольДляУК = Массив.Pass тогда 
			//ДанныеВBase64 = XMLСтрока(ВыборкаСотрудника.фото); // Получим Base64 хранилища значения
			//ДвоичныеДанные = Base64Значение(ДанныеВBase64);
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("name",      Строка(ВыборкаСотрудника.Наименование));
			СтруктураОтвета.Вставить("code",      Строка(ВыборкаСотрудника.Код));
			СтруктураОтвета.Вставить("company",   Строка(ВыборкаСотрудника.Организация));
			СтруктураОтвета.Вставить("post",      Строка(ВыборкаСотрудника.Должность));
			СтруктураОтвета.Вставить("birthdate", Строка(ВыборкаСотрудника.ДатаРождения));
			СтруктураОтвета.Вставить("pphone",    Строка(ВыборкаСотрудника.ТелефонЛичный));
			СтруктураОтвета.Вставить("wphone",    Строка(ВыборкаСотрудника.ТелефонСлужебный)); 
			СтруктураОтвета.Вставить("car",    Строка(ВыборкаСотрудника.Тележка));
			Если   ВыборкаСотрудника.Тележка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
				СтруктураОтвета.Вставить("car_items", КоличествоТоваровВКорзине(ВыборкаСотрудника.Тележка));
			Иначе
				СтруктураОтвета.Вставить("car_items", 0);	   
			КонецЕсли;
			
			//СтруктураОтвета.Вставить("Photo",ДвоичныеДанные ); 
			//signin
			// Роли = ВыборкаСотрудника.РолиWT10.Выгрузить();
			
			//МассивРолей = Новый массив;
			//
			//
			//Для Каждого стр из Роли Цикл 
			//	Структурароли = Новый Структура;
			//	Структурароли.Вставить("id",    Стр.Роль.Код);
			//	Структурароли.Вставить("title",    Строка(Стр.Роль)); 
			//	МассивРолей.Добавить(Структурароли);
			//КонецЦикла;
			//
			//СтруктураОтвета.Вставить("roles",    МассивРолей);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			
			ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
			
			
			
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			
			Ответ = Новый HTTPСервисОтвет(200);	
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			
			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			
			Возврат Ответ;
		Иначе 
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("{ text:""Пароль не верен"" }");
			Возврат Ответ;
		КонецЕсли;
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("{ text:""Нет такого"" }");
		Возврат Ответ;
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьЗаявкиИПродажиgetappandsale(Запрос)
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
	
	запросзаявки = Новый Запрос;
	
	запросзаявки.Текст =  текстДляЗаявокИПродаж();
	
	запросзаявки.УстановитьПараметр("номер", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["num"]))+"%" ); 
	Если Строка(Запрос.ПараметрыURL["num"]) = "0" Тогда 
		запросзаявки.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*90 );
	Иначе
		запросзаявки.УстановитьПараметр("Дата", Дата("00010101"));
	КонецЕсли;
	Если Ответственный <> Справочники.Пользователи.ПустаяСсылка() Тогда
		запросзаявки.УстановитьПараметр("Ответственный", Ответственный );
	КонецЕсли;
	
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	МассивЗаявок = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураЗаявки = новый Структура;
		СтруктураЗаявки.Вставить("num",Строка(выборка.Номер));
		СтруктураЗаявки.Вставить("client",Строка(выборка.Клиент));  
		СтруктураЗаявки.Вставить("date",Строка(выборка.дата));
		СтруктураЗаявки.Вставить("processing",Строка(выборка.СтатусОбработки));		
		СтруктураЗаявки.Вставить("porter",Строка(выборка.ОтветственныйЗаОбработку));  
		СтруктураЗаявки.Вставить("responsible",Строка(выборка.Ответственный));
		СтруктураЗаявки.Вставить("porterphone",Строка(получитьНомерТелефона(выборка.ОтветственныйЗаОбработку)));
		СтруктураЗаявки.Вставить("flag",Строка(выборка.Флаг));
		МассивЗаявок.Добавить(СтруктураЗаявки);
	КонецЦикла;  
	
	//
	//СтруктураИнфо = новый Структура;
	//СтруктураИнфо.Вставить("pages",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	//СтруктураИнфо.Вставить("count",Выборкаобщ);	
	//
	СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗаявок);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСчетgetcheck(Запрос)
	
	///+ГомзМА 29.11.2023
	ЗапросСчета = Новый Запрос;
	ЗапросСчета.Текст = ТекстДляСчета();
	ЗапросСчета.УстановитьПараметр("Номер", Запрос.ПараметрыURL["Num"] ); 
	Выборка = ЗапросСчета.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;		
	
	Пока выборка.Следующий() Цикл
		
		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата, , Выборка.БанковскийСчет);
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Клиент, Выборка.Дата);
		Руководитель = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновноеОтветственноеЛицоОрганизации(Выборка.Организация, Выборка.Дата);
		СтавкаНДС = дт_ОбщегоНазначенияВызовСервераПовтИсп.СтавкаНДСПоУмолчанию(Выборка.Дата);
		НомерНаПечать = дт_ПрефиксацияКлиентСервер.НомерНаПечать(Выборка.Номер);
		
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("num",	Строка(НомерНаПечать));
		СтруктураИнфо.Вставить("date",	Строка(Формат(выборка.Дата, "ДФ=dd.MM.yyyy")));
		
		СтруктураИнфо.Вставить("innorganization", 	Строка(СведенияОПоставщике.ИНН));
		СтруктураИнфо.Вставить("kpporganization", 	Строка(СведенияОПоставщике.КПП));
		СтруктураИнфо.Вставить("bank", 				Строка(СведенияОПоставщике.Банк));
		СтруктураИнфо.Вставить("bikbank", 			Строка(СведенияОПоставщике.БИК));
		СтруктураИнфо.Вставить("schetbank", 		Строка(СведенияОПоставщике.КоррСчет));
		СтруктураИнфо.Вставить("schetorganization", Строка(СведенияОПоставщике.НомерСчета));
		
		СтруктураИнфо.Вставить("organization", 	Строка(СведенияОПоставщике.НаименованиеДляПечатныхФорм));
		СтруктураИнфо.Вставить("provider", 		Строка(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны,Email")));
		СтруктураИнфо.Вставить("buyer", 		Строка(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,Email,НомерСчета,Банк,БИК,КоррСчет")));
		СтруктураИнфо.Вставить("director", 		Строка(Руководитель));
		СтруктураИнфо.Вставить("buh", 			Строка(Руководитель));		
		
		ТЗ = выборка.Таблица.Выгрузить(); 
		
		ИтогоСумма = 0;
		Для каждого стр из ТЗ Цикл
			
			ИтогоСумма = ИтогоСумма + стр.сумма;
			
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name",    Строка(стр.Товар.Артикул + " " + стр.Товар));
			СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
			СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
			СтруктураТоваров.Вставить("count", Строка(стр.Количество));		
			СтруктураТоваров.Вставить("sum",    Строка(стр.Сумма));
			
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;
		СтруктураИнфо.Вставить("sum", Строка(Формат(ИтогоСумма, "ЧГ=0")));
		СтруктураИнфо.Вставить("withnds", Строка(Формат(Окр(ИтогоСумма * СтавкаНДС / (100 + СтавкаНДС), 2), "ЧГ=0")));
		СтруктураИнфо.Вставить("allsum", Строка(Формат(ИтогоСумма + ?(Выборка.СуммаВключаетНДС, 0, Окр(ИтогоСумма * СтавкаНДС / (100 + СтавкаНДС), 2)), "ЧГ=0")));
	КонецЦикла;
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 29.11.2023
	
КонецФункции

Функция ПолучитьИнформациюОДоставке(Запрос)
	
	///+сергеев 06.12.2023
	///Получение ТранспортнойКомпании и Трек-номера
	ЗапросПродажидоставки = Новый Запрос;
	ЗапросПродажидоставки.Текст = текстДляПродажиСтатусТК();
	ЗапросПродажидоставки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["id"] ); 
	Выборка = ЗапросПродажидоставки.Выполнить().Выбрать();
	
	
	
	Массивданных = Новый Массив;
	Пока выборка.Следующий() Цикл
		
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("id",Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client",Строка(выборка.Клиент));
		
		СтруктураИнфо.Вставить("status", Строка(Выборка.СтатусЗаказаВТК)); 
		СтруктураИнфо.Вставить("statushistory", Строка(выборка.ИсторияОтслеживанияЗаказа));
		
		СтруктураИнфо.Вставить("sending_city",Строка(выборка.ГородОтправки));
		СтруктураИнфо.Вставить("receipt_country",Строка(выборка.СтранаПолучения));
		СтруктураИнфо.Вставить("receipt_region",Строка(выборка.РегионПолучения));
		СтруктураИнфо.Вставить("receipt_city",Строка(выборка.ГородПолучения));
		СтруктураИнфо.Вставить("delivery_status",Строка(выборка.СтатусДоставки));
		СтруктураИнфо.Вставить("driver",Строка(выборка.Водитель));
		СтруктураИнфо.Вставить("inn",Строка(выборка.ИНН));
		СтруктураИнфо.Вставить("passport",Строка(выборка.Паспорт));
		СтруктураИнфо.Вставить("registration",Строка(выборка.Прописка));
		СтруктураИнфо.Вставить("delivery_client",Строка(выборка.доставкаКлиент));
		СтруктураИнфо.Вставить("name_or_name",Строка(выборка.НаименованиеИлиФИО));
		СтруктураИнфо.Вставить("private",Строка(выборка.частный));
		СтруктураИнфо.Вставить("weight",Строка(выборка.Вес));
		СтруктураИнфо.Вставить("tk",Строка(выборка.ТранспортнаяКомпания));
		СтруктураИнфо.Вставить("phone",Строка(выборка.телефон));
		СтруктураИнфо.Вставить("sum",Строка(выборка.ИтогоРекв));
		
		ТЗ = выборка.Таблица.Выгрузить(); 
		
		МассивТоваров = Новый Массив;
		
		Для каждого стр из ТЗ Цикл	
			Код = стр.Код; 
			Пока Лев(Код, 1) = "0" Цикл 
				Код = Прав(Код, СтрДлина(Код) - 1);
			КонецЦикла;
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name",    Строка(стр.Товар));
			СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
			СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
			СтруктураТоваров.Вставить("count", Строка(стр.Количество));		
			СтруктураТоваров.Вставить("sum",    Строка(стр.Сумма));
			СтруктураТоваров.Вставить("issued",    Строка(стр.СтатусТовара));
			СтруктураТоваров.Вставить("Code",     Строка("00"+Код));
			СтруктураТоваров.Вставить("indcode", Строка(стр.Партия));
			СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	
			
			СтруктураТоваров.Вставить("state",  Строка(стр.СтатусТовара)); 
			СтруктураТоваров.Вставить("article",  Строка(стр.Артикул));
			СтруктураТоваров.Вставить("k",        ЕстьНаКСкладе(стр.Товар)); 
			
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;
	КонецЦикла;
	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-сергеев 06.12.2023
	
КонецФункции

Функция ПолучитьУПДgetYPD(Запрос)
	
	///+ГомзМА 29.11.2023
	ЗапросСчета = Новый Запрос;
	ЗапросСчета.Текст = текстДляПродажиСтатусТК();
	ЗапросСчета.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"] ); 
	Выборка = ЗапросСчета.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;		
	
	Пока выборка.Следующий() Цикл
		
		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата, , Выборка.БанковскийСчет);
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Клиент, Выборка.Дата);
		Руководитель = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновноеОтветственноеЛицоОрганизации(Выборка.Организация, Выборка.Дата);
		СтавкаНДС = дт_ОбщегоНазначенияВызовСервераПовтИсп.СтавкаНДСПоУмолчанию(Выборка.Дата);
		НомерНаПечать = дт_ПрефиксацияКлиентСервер.НомерНаПечать(Выборка.Номер);
		
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("num",	Строка(НомерНаПечать));
		СтруктураИнфо.Вставить("date",	Строка(Формат(выборка.Дата, "ДФ=dd.MM.yyyy")));
		
		СтруктураИнфо.Вставить("innorganization", 	Строка(СведенияОПоставщике.ИНН));
		СтруктураИнфо.Вставить("kpporganization", 	Строка(СведенияОПоставщике.КПП));
		СтруктураИнфо.Вставить("bank", 				Строка(СведенияОПоставщике.Банк));
		СтруктураИнфо.Вставить("bikbank", 			Строка(СведенияОПоставщике.БИК));
		СтруктураИнфо.Вставить("schetbank", 		Строка(СведенияОПоставщике.КоррСчет));
		СтруктураИнфо.Вставить("schetorganization", Строка(СведенияОПоставщике.НомерСчета));
		
		СтруктураИнфо.Вставить("organization", 	Строка(СведенияОПоставщике.НаименованиеДляПечатныхФорм));
		СтруктураИнфо.Вставить("provider", 		Строка(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны,Email")));
		СтруктураИнфо.Вставить("buyer", 		Строка(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,Email,НомерСчета,Банк,БИК,КоррСчет")));
		СтруктураИнфо.Вставить("director", 		Строка(Руководитель));
		СтруктураИнфо.Вставить("buh", 			Строка(Руководитель));		
		
		ТЗ = выборка.Таблица.Выгрузить(); 
		
		ИтогоСумма = 0;
		Для каждого стр из ТЗ Цикл
			
			ИтогоСумма = ИтогоСумма + стр.сумма;
			
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name",    Строка(стр.Товар.Артикул + " " + стр.Товар));
			СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
			СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
			СтруктураТоваров.Вставить("count", Строка(стр.Количество));		
			СтруктураТоваров.Вставить("sum",    Строка(стр.Сумма));
			
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;
		СтруктураИнфо.Вставить("sum", Строка(Формат(ИтогоСумма, "ЧГ=0")));
		СтруктураИнфо.Вставить("withnds", Строка(Формат(Окр(ИтогоСумма * СтавкаНДС / (100 + СтавкаНДС), 2), "ЧГ=0")));
		СтруктураИнфо.Вставить("allsum", Строка(Формат(ИтогоСумма + ?(Выборка.СуммаВключаетНДС, 0, Окр(ИтогоСумма * СтавкаНДС / (100 + СтавкаНДС), 2)), "ЧГ=0")));
	КонецЦикла;
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 29.11.2023
	
КонецФункции

Функция ПолучитьСписокЗадачВРаботеlistworkinwork(Запрос)  
	
	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	Задача.Наименование КАК Наименование,
	|	Задача.Описание КАК Описание,
	|	Задача.Исполнитель КАК Исполнитель,
	|	Задача.Номер КАК Номер
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	(Задача.Проект = &Проект
	|			ИЛИ Задача.Проект = &Проект2)
	|	И Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.ВРаботе)"; 
	Запрос.УстановитьПараметр("Проект",Справочники.ПроектыРазвития.НайтиПоКоду("000000016"));
	Запрос.УстановитьПараметр("Проект2",Справочники.ПроектыРазвития.НайтиПоКоду("000000006"));
	Выборка = запрос.Выполнить().Выбрать();
	Выборкаобщ = Выборка.Количество();
	
	МассивЗадач = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураЗадачи = новый Структура;
		СтруктураЗадачи.Вставить("name",Строка(выборка.Наименование));
		СтруктураЗадачи.Вставить("text",Строка(выборка.Описание));
		СтруктураЗадачи.Вставить("worker",Строка(выборка.Исполнитель));
		СтруктураЗадачи.Вставить("num",Строка(выборка.Номер));
		
		МассивЗадач.Добавить(СтруктураЗадачи);
	КонецЦикла;
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗадач);
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции      

Функция ПолучитьСписокНарядовgetlistorders(Запрос)
	запросНарядов = Новый Запрос;
	
	запросНарядов.Текст =  СтрШаблон(текстДляСпискаНарядов(), Формат(10000, "ЧГ="));  
	
	Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Выдача.КоличествоСтрок > 0");
	Иначе
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Сборка.КоличествоСтрок > 0");
		
	КонецЕсли;
	
	запросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросНарядов.Выполнить().Выбрать().Количество();  
	
	запросНарядов.Текст =  СтрШаблон(текстДляСпискаНарядов(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Выдача.КоличествоСтрок > 0");
	Иначе
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Сборка.КоличествоСтрок > 0");
		
	КонецЕсли;
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	Иначе 
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = запросНарядов.Выполнить().Выбрать();
	
	МассивНарядов = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("num",Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client",Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("application",Строка(выборка.ЗаказКлиента));
		СтруктураИнфо.Вставить("processing",Строка(выборка.состояние));
		//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible",Строка(выборка.Ответственный));
		
		МассивТоваров = ПолучитьСтруктуруТоваров(выборка.Номер);
		СтруктураИнфо.Вставить("state_product",МассивТоваров); 
		
		МассивНарядов.Добавить(СтруктураИнфо); 
		
	КонецЦикла;
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивНарядов);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции 

Функция ПолучитьСписокПеремещенийgetlistmove(Запрос)
	запросНарядов = Новый Запрос;
	
	запросНарядов.Текст =  СтрШаблон(текстДляСпискаПеремещений(), Формат(10000, "ЧГ="));  
	
	Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Заказ.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "2" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Собрано.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "3" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_КУпаковке.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "4" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Отправлен.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "5" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Принят.НомерСтроки > 0");
		
	КонецЕсли;
	
	запросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросНарядов.Выполнить().Выбрать().Количество();  
	
	запросНарядов.Текст =  СтрШаблон(текстДляСпискаПеремещений(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ=")); 
	
	Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Заказ.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "2" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Собрано.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "3" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_КУпаковке.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "4" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Отправлен.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "5" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Принят.НомерСтроки > 0");
		
	КонецЕсли;
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	Иначе 
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = запросНарядов.Выполнить().Выбрать();
	
	МассивНарядов = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = новый Структура;
		
		СтруктураИнфо.Вставить("num",Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		СтруктураИнфо.Вставить("from",Строка(выборка.СкладОтправитель));
		СтруктураИнфо.Вставить("to",Строка(выборка.СкладПолучатель));
		СтруктураИнфо.Вставить("processing",Строка(выборка.Статус));
		//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible",Строка(выборка.Ответственный));
		СтруктураИнфо.Вставить("recipient",Строка(выборка.Проверяющий));
		
		МассивТоваров = ПолучитьСтруктуруТоваровПеремещения(выборка.Номер);
		СтруктураИнфо.Вставить("state_product",МассивТоваров); 
		
		МассивНарядов.Добавить(СтруктураИнфо); 
		
	КонецЦикла;
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивНарядов);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти   

#Область Post

Функция СменаРеквизитовТовараEditListPost(Запрос) 
	
	
	Ответ = Новый HTTPСервисОтвет(200);
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
		Возврат Ответ;
	КонецЕсли;
	//	Для Каждого СтрокаМассива Из Массив Цикл
	Ответ = РедактироватьТоварPost(Запрос.ПараметрыURL["IndCode"],Массив.Com, число(Массив.cost),Массив.author);
	//	КонецЦикла;
	
	Возврат Ответ;
КонецФункции

Функция РедактироватьТоварPost(индкод,комментарий=неопределено, ценановая=неопределено,Автор)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.Код КАК Код,
	|	ИндНомер.Стеллаж КАК Стеллаж,
	|	ИндНомер.Комментарий КАК Комментарий,
	|	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
	|	ИндНомер.Модель КАК Модель,
	|	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
	|	ИндНомер.Ответственный КАК Ответственный,
	|	ИндНомер.ЕстьФото КАК ЕстьФото,
	|	ИндНомер.Комментарий КАК Комментарий1,
	|	ИндНомер.Цена КАК Цена,
	|	ИндНомер.Поддон КАК Поддон
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Код"; 
	запрос.УстановитьПараметр("Код", индкод);
	выборка = Запрос.Выполнить().Выбрать(); 
	Выборка.Следующий();
	
	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать(); 
	Записьjson = новый ЗаписьJSON;
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		
		//Записьjson.ЗаписатьЗначение("Нет такого");
		//Записьjson.Закрыть();
		Ответ.УстановитьТелоИзСтроки("{ text:""Нет такого"" }");
		
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		ТекстЛога= "";
		НовыйНомер = НаборЗаписей[0];
		Если ценановая > 0 и ценановая <> неопределено Тогда
			ТекстЛога =  ТекстЛога + " Установил цену с " + НовыйНомер.цена +" на " + ценановая; 
			ЛогированиеИндНомера(Строка(НовыйНомер.индкод),Автор,ТекстЛога);
			
			НовыйНомер.цена = ценановая;
		КонецЕсли; 
		
		Если комментарий <> "" и комментарий <> неопределено Тогда  
			ТекстЛога =  ТекстЛога + " Установил комментарий с " + НовыйНомер.комментарий +" на " + комментарий; 
			ЛогированиеИндНомера(НовыйНомер.Индкод,Автор,ТекстЛога,,);
			
			НовыйНомер.комментарий = комментарий;
		КонецЕсли;
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		// Записьjson.ЗаписатьЗначение("Успех");
		//Записьjson.Закрыть();
		Ответ.УстановитьТелоИзСтроки("{ text:""Успех"" }");	
	КонецЕсли; 
	
	НаборЗаписей.Записать();
	Возврат ответ;
	
КонецФункции

Функция СменаМестаХраненияEditPlace(Запрос)
	
	//Тело = Запрос.ПолучитьТелоКакстроку();
	//ЧтениеJSON = Новый ЧтениеJSON();
	//ЧтениеJSON.УстановитьСтроку(Тело);
	//
	//Массив = ПрочитатьJSON(ЧтениеJSON);
	//
	//Автор = Справочники.Сотрудники.НайтиПоКоду(массив.author).Пользователь;
	//
	//Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	//Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
	//	Ответ = Новый HTTPСервисОтвет(450);
	//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	//	Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
	//	Возврат Ответ;
	//КонецЕсли;
	//
	//Если Массив.type = 1 тогда	
	//	Ответ = РедактироватьПоддон(Массив.IndCode,Массив.Place,массив.author); 
	//Иначе
	//	Ответ = РедактироватьПолку(Массив.IndCode,Массив.Place,массив.author); 
	//	
	//	//Если массив.mess  = 0 Тогда
	//	//	ТекстЛога = " Запхал себе в корзину " + Массив.IndCode;
	//	//	Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Автор) + ТекстЛога); 
	//	//КонецЕсли;
	//	
	//КонецЕсли; 
	//
	//Возврат Ответ;
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	
	Если Массив.type = 1 тогда	
		Ответ = РедактироватьПоддон(Массив.IndCode,Массив.Place,Массив.author); 
	Иначе
		Ответ = РедактироватьПолку(Массив.IndCode,Массив.Place,Массив.author);  
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

Функция ПеремещениеПолкиmoveshelf(Запрос)	
	///+ГомзМА 12.12.2023
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	Автор = массив.author;
	
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
		Возврат Ответ;
	КонецЕсли;
	
	Если Справочники.Поддоны.НайтиПоНаименованию(Массив.pallet) = Справочники.Поддоны.ПустаяСсылка() Тогда   
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Поддон не корректен!");
		Возврат Ответ;		
	КонецЕсли;
	//поменять стеллаж у индномеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.Поддон КАК Поддон,
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон = &Поддон";
	
	Если   Справочники.Поддоны.НайтиПоНаименованию(Массив.pallet) <> Справочники.Поддоны.ПустаяСсылка() Тогда
		Запрос.УстановитьПараметр("Поддон", Справочники.Поддоны.НайтиПоНаименованию(Массив.pallet)); 
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Поддон не корректен!");
		Возврат Ответ;	
	КонецЕсли; 
	
	Если Справочники.Стеллаж.НайтиПоНаименованию(Массив.shelf) = Справочники.Стеллаж.ПустаяСсылка() Тогда   
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Полка не корректна!");
		Возврат Ответ;		
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.индкод 	= РезультатЗапроса.индкод;
			ЗаписьВРегистреСведений.Прочитать();
			Если ЗаписьВРегистреСведений.Выбран() Тогда 
				
				Лог = "Сменил полку с " + РезультатЗапроса.Стеллаж + " на "+ Массив.shelf;
				ЛогированиеИндНомера(Строка(РезультатЗапроса.индкод),Автор,Лог,Массив.shelf); 
				
				ЗаписьВРегистреСведений.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Массив.shelf);
				ЗаписьВРегистреСведений.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	//поменять стеллаж у поддона
	СправочникПоддонОбъект = Справочники.Поддоны.НайтиПоНаименованию(Массив.pallet).ПолучитьОбъект();
	СправочникПоддонОбъект.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Массив.shelf);
	СправочникПоддонОбъект.Записать();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Поддон успешно перемещен на полку " + Массив.shelf);
	Возврат Ответ;
	///-ГомзМА 12.12.2023
	
КонецФункции

Функция РедактироватьПолку(индкод,Место=неопределено,Автор)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.Код КАК Код,
	|	ИндНомер.Стеллаж КАК Стеллаж,
	|	ИндНомер.Комментарий КАК Комментарий,
	|	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
	|	ИндНомер.Модель КАК Модель,
	|	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
	|	ИндНомер.Ответственный КАК Ответственный,
	|	ИндНомер.ЕстьФото КАК ЕстьФото,
	|	ИндНомер.Комментарий КАК Комментарий1,
	|	ИндНомер.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Код"; 
	запрос.УстановитьПараметр("Код", индкод); 
	
	выборка = Запрос.Выполнить().Выбрать(); 
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;	
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать(); 
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
		
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		
		///+ГомзМА 31.01.2024
		Если СтрНайти(НаборЗаписей[0].Стеллаж, "Korzina") > 0 И СтрНайти(Место, "Korzina") > 0 Тогда
			Ответ = Новый HTTPСервисОтвет(415);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Невозможно переместить в корзину. Деталь находится у другого пользователя в " + НаборЗаписей[0].Стеллаж);
			Возврат ответ;
		Иначе
			НовыйНомер = НаборЗаписей[0]; 
			Полка = Справочники.Стеллаж.НайтиПоНаименованию(место); 
			Если Полка <> Справочники.Стеллаж.ПустаяСсылка() Тогда  	
				Лог =  " сменил полку с " + НовыйНомер.Стеллаж +" на " + Полка; 
				ЛогированиеИндНомера(НовыйНомер.индкод,Автор,Лог,Полка,,НовыйНомер.Стеллаж,);
				НовыйНомер.Стеллаж = Полка;
				НовыйНомер.Поддон = Справочники.Поддоны.ПустаяСсылка();
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех"); 
				Если СтрНайти(Место,"Korzina") > 0 тогда 
					Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
					ТекстЛога = " Поместил в корзину " +  Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Тележка", Полка)) +" "+Строка(Выборка.индкод.Владелец) + " с кодом "+ индкод;
					Фотки = ПолучениеФотоДляТелеги(индкод);
					НайденныеФотки = Фотки[0].urls;
					Попытка
						Telegram_Сервер. ОтправитьКартинкуПользователю("-1001874958074", НайденныеФотки[0]);
						
					Исключение
						
					КонецПопытки;
					Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Автор) + ТекстЛога);
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЕсли;
			Возврат ответ;
		КонецЕсли;
		///-ГомзМА 31.01.2024
		
		
	Иначе
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Полка не найдена"); 
		Возврат ответ;
		
	КонецЕсли;
	

НаборЗаписей.Записать();
Возврат ответ;

КонецФункции  

Функция РедактироватьПоддон(индкод,Место=неопределено,автор)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.Код КАК Код,
	|	ИндНомер.Стеллаж КАК Стеллаж,
	|	ИндНомер.Комментарий КАК Комментарий,
	|	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
	|	ИндНомер.Модель КАК Модель,
	|	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
	|	ИндНомер.Ответственный КАК Ответственный,
	|	ИндНомер.ЕстьФото КАК ЕстьФото,
	|	ИндНомер.Комментарий КАК Комментарий1,
	|	ИндНомер.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Код"; 
	запрос.УстановитьПараметр("Код", индкод);
	выборка = Запрос.Выполнить().Выбрать(); 
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;	
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать(); 
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");	
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		
		НовыйНомер = НаборЗаписей[0]; 
		Поддон = Справочники.Поддоны.НайтиПоНаименованию(место);
		Если Поддон <> Справочники.Поддоны.ПустаяСсылка() Тогда  	
			Лог =  " сменил поддон с " + НовыйНомер.поддон +" на " + Поддон; 
			
			ЛогированиеИндНомера(Строка(НовыйНомер.индкод),Автор,Лог,Строка(Поддон.Стеллаж),Поддон,НовыйНомер.Стеллаж,НовыйНомер.поддон);
			
			НовыйНомер.поддон = Поддон; 
			НовыйНомер.Стеллаж = Поддон.Стеллаж;
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
		Иначе
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Поддон не найден");
		КонецЕсли;
	КонецЕсли; 
	
	НаборЗаписей.Записать();
	Возврат ответ;
	
КонецФункции

Функция СоздатьПродажуcreatesale(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	Номерзаявки = Запрос.ПараметрыURL["Num"];
	Массив = ПрочитатьJSON(ЧтениеJSON);
	Автор = Массив.author;
	
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
		Возврат Ответ;
	КонецЕсли;
	
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Номерзаявки); 
	Выборка = запросзаявки.Выполнить().Выбрать(); 
	
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		Продажа = ПроверкаПродаж(Выборка.ссылка); 
		Если Продажа.ссылка = неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Клиент КАК Клиент,
			|	Док.Комментарий КАК Комментарий,
			|	Док.Проект КАК Проект,
			|	Док.Склад КАК Склад,
			|	Док.Ссылка КАК ЗаказКлиента,
			|	Док.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	Док.НачислятьНДС КАК НачислятьНДС,
			|	Док.Ответственный КАК КтоПродал
			|ПОМЕСТИТЬ втШапка
			|ИЗ
			|	Документ.ЗаказКлиента КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втШапка.Клиент КАК Клиент,
			|	втШапка.Комментарий КАК Комментарий,
			|	втШапка.Проект КАК Проект,
			|	втШапка.Склад КАК Склад,
			|	втШапка.ЗаказКлиента КАК ЗаказКлиента,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	втШапка.КтоПродал КАК КтоПродал
			|ИЗ
			|	втШапка КАК втШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
			|	ЗаказКлиентаТовары.Номенклатура КАК Товар,
			|	ЗаказКлиентаТовары.Количество КАК Количество,
			|	ЗаказКлиентаТовары.Цена КАК Цена,
			|	ЗаказКлиентаТовары.Сумма КАК Сумма,
			|	втШапка.Склад КАК Склад,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,
			|	ЗаказКлиентаТовары.Партия КАК Партия,
			|	втШапка.КтоПродал КАК КтоПродал,
			|	РегистрНакопления1Остатки.машина КАК машина,
			|	РегистрНакопления1Остатки.Склад КАК Склад1
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ втШапка КАК втШапка
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
			|		ПО ЗаказКлиентаТовары.Партия = РегистрНакопления1Остатки.индкод
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка = &Ссылка
			|	И НЕ ЗаказКлиентаТовары.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			
			Запрос.УстановитьПараметр("Ссылка", Выборка.ссылка);
			НоваяПродажа = Документы.ПродажаЗапчастей.СоздатьДокумент();
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			НоваяПродажа.Организация = Справочники.Организация.НайтиПоКоду(Массив.org);  
			НоваяПродажа.TipOplati   = Справочники.TipOplati.НайтиПоКоду(Массив.bill);
			НоваяПродажа.БезДоговора = Истина; 
			НоваяПродажа.Дата        = ТекущаяДата();
			НоваяПродажа.Ктопродал   = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки).Ответственный;  
			НоваяПродажа.Самовывоз   = истина; 
			НоваяПродажа.СтатусОбработки   = Перечисления.СтатусыОбработкиЗаявок.Обработано;
			НоваяПродажа.СтатусДоставки    = Перечисления.СтатусОтправки.Отправлен;
			НоваяПродажа.ДатаСписания      = ТекущаяДата();
			Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить()[0]);
			
			ЗаполнениеДокументов.Заполнить(НоваяПродажа, Шапка, Ложь);
			НоваяПродажа.Таблица.Загрузить(РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить()); 
			
			НоваяПродажа.Записать();
			
			ТекстЛога =  " Создал продажу " + НоваяПродажа.номер ; 
			ЛогированиеWT10(НоваяПродажа.ссылка,Автор,ТекстЛога);
			//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(НоваяПродажа.КтоПродал), Строка(Выборка.Ответственный) + ТекстЛога); 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки(НоваяПродажа.номер);
		Иначе
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Продажа уже есть!");
			ТекстЛога =  "Продажа уже есть! ";
			////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
		КонецЕсли; 
	иначе
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такой заявки!"); 
		ТекстЛога =  "Нет такой заявки! ";
		////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
	КонецЕсли;
	возврат Ответ;
КонецФункции

Функция НаполнитьЗаявкуfillingapplication(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.IndCode;
	Позиция = Число(Массив.Pose);
	Автор 	= Массив.author;
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
		Возврат Ответ;
		
	КонецЕсли;
	Пока выборка.Следующий() Цикл
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗаявки.Товары[Позиция-1].Партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
		ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил партию в товаре " + ОбъектЗаявки.Товары[Позиция-1].Номенклатура + " "+ ОбъектЗаявки.Товары[Позиция-1].Партия; 
		ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога); 
		ЛогированиеИндНомера(ИндКод,Автор,ТекстЛога);
		
		ОбъектЗаявки.Записать();
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции  

Функция НаполнитьЗаказНарядfillingorder(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаказНаряда2();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.id;
	//Позиция = Число(Массив.pose);
	Автор 	= Массив.person;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
		Возврат Ответ;
		
	КонецЕсли;	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура", Номенклатура);
	Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	
	Пока выборка.Следующий() Цикл
		Если выборка.Состояние = Перечисления.СостоянияЗаказНаряда.Выполнен Тогда
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Наряд закрыт!");
			Возврат Ответ;	
			
		КонецЕсли;
		
		ОбъектНаряда = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		НайденныеСтроки = ОбъектНаряда.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.количество() > 0 Тогда 
			СтрокаТЧ = ОбъектНаряда.Товары[НайденныеСтроки[0].НомерСтроки-1];  
			СтрокаТЧ.партия = партия; 
			СтрокаТЧ.Автомобиль = ПолучитьМашину(партия);
			СтрокаТЧ.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 
			СтрокаТЧ.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Установлена;
			
			ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
		Иначе
			Если  Не ОбъектНаряда.ЗаблокироватьТЧТовары Тогда
				
				Новаястрока = ОбъектНаряда.Товары.Добавить();
				Новаястрока.Партия = партия;
				Новаястрока.Номенклатура = Номенклатура; 
				Новаястрока.Количество = 1;
				Новаястрока.Автомобиль = ПолучитьМашину(партия);
				Новаястрока.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Установлена;
				Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
				Новаястрока.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 	
				
				ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + Новаястрока.Номенклатура + " "+ Новаястрока.Партия; 
				ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение); 
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех");
				Возврат Ответ;
			Иначе
				Ответ = Новый HTTPСервисОтвет(400);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Заказ-наряд закрыт!");
				Возврат Ответ;	
			КонецЕсли; 
			
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Такой позиции в заказ-наряде нет или партия уже установлена!");
			Возврат Ответ;
		КонецЕсли;
		
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Заказ-наряде не существует или номер не корректен.");
	Возврат Ответ;	
	
КонецФункции 

Функция ОтправитьВРВРsendrvr(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаказНаряда2();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.id;
	//Позиция = Число(Массив.pose);
	Автор 	= Массив.person; 
	
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
		Возврат Ответ;
		
	КонецЕсли;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура", Номенклатура);
	Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	
	Пока выборка.Следующий() Цикл
		ОбъектНаряда = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		НайденныеСтроки = ОбъектНаряда.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.количество() > 0 Тогда 
			СтрокаТЧ = ОбъектНаряда.Товары[НайденныеСтроки[0].НомерСтроки-1];  
			СтрокаТЧ.партия = партия; 
			СтрокаТЧ.Автомобиль = ПолучитьМашину(партия);
			СтрокаТЧ.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 
			СтрокаТЧ.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Собрано;
			РедактироватьПолку(ИндКод,"K-RVR",Автор);
			ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение);	 
			
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
			
		Иначе
			//	Если  Не ОбъектНаряда.ЗаблокироватьТЧТовары Тогда
			//	
			//	Новаястрока = ОбъектНаряда.Товары.Добавить();
			//	Новаястрока.Партия = партия;
			//	Новаястрока.Номенклатура = Номенклатура; 
			//	Новаястрока.Количество = 1;
			//	Новаястрока.Автомобиль = ПолучитьМашину(партия);
			//	Новаястрока.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Выдано;
			//	Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
			//	Новаястрока.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 	
			//	
			//	ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + Новаястрока.Номенклатура + " "+ Новаястрока.Партия; 
			//	ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			//	ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение); 
			//	
			//	Ответ = Новый HTTPСервисОтвет(200);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Успех");
			//	Возврат Ответ;
			//Иначе
			//	Ответ = Новый HTTPСервисОтвет(400);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Заказ-наряд закрыт!");
			//	Возврат Ответ;	
			//КонецЕсли; 
			
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Такой позиции в заказ-нарядде нет или партия уже установлена!");
			
		КонецЕсли;
		
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Заказа-наряд не существет или номер не корректен.");
	Возврат Ответ;	
	
КонецФункции

Функция УдалитьТоварИзЗаявкиdeleteproductapplication(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.IndCode;
	Позиция = Число(Запрос.ПараметрыURL["Pose"]);
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
		Возврат Ответ;
		
	КонецЕсли;	
	
	Пока выборка.Следующий() Цикл
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗаявки.Товары.удалить(Позиция-1);
		ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " удалил товар " + ОбъектЗаявки.Товары[Позиция-1].Номенклатура + " "+ ОбъектЗаявки.Товары[Позиция-1].Партия; 
		ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
		ОбъектЗаявки.Записать();
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции  

Функция ОтменитьТоварИзЗаявкиcancelproductapplication(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	//ИндКод  = Массив.IndCode;
	Позиция = Число(Массив.Pose);	
	Автор = Массив.author;
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
		Возврат Ответ;
		
	КонецЕсли;
	
	Пока выборка.Следующий() Цикл
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗаявки.Товары[Позиция-1].Отменено = Не ОбъектЗаявки.Товары[Позиция-1].Отменено;
		Если НЕ  ОбъектЗаявки.Товары[Позиция-1].Отменено Тогда
			ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " не найден товар " + ОбъектЗаявки.Товары[Позиция-1].Номенклатура + " "+ ОбъектЗаявки.Товары[Позиция-1].Партия; 
		Иначе
			ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " вернул товар " + ОбъектЗаявки.Товары[Позиция-1].Номенклатура + " "+ ОбъектЗаявки.Товары[Позиция-1].Партия;
		КонецЕсли;
		ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.Ответственный),ТекстЛога);
		
		ОбъектЗаявки.Записать();
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции 

Функция ОтменитьТоварИзПродажиcancelproductsale(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляПродажи();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	//ИндКод  = Массив.IndCode;
	Позиция = Число(Массив.Pose);	
	Автор = Массив.author;
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
		Возврат Ответ;
		
	КонецЕсли;
	
	Если выборка.Количество() > 0 тогда
		Пока выборка.Следующий() Цикл
			ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();
			ОбъектПродажи.Таблица[Позиция-1].Отменено = Не ОбъектПродажи.Таблица[Позиция-1].Отменено;
			Если НЕ  ОбъектПродажи.Таблица[Позиция-1].Отменено Тогда
				ТекстЛога =  " В заявке " + ОбъектПродажи.номер + " не найден товар " + ОбъектПродажи.Таблица[Позиция-1].Товар + " "+ ОбъектПродажи.Таблица[Позиция-1].Партия; 
			Иначе
				ТекстЛога =  " В заявке " + ОбъектПродажи.номер + " вернул товар " + ОбъектПродажи.Таблица[Позиция-1].Товар + " "+ ОбъектПродажи.Таблица[Позиция-1].Партия;
			КонецЕсли;
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.Ответственный),ТекстЛога);
			
			ОбъектПродажи.Записать();
		КонецЦикла;
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех");
		Возврат Ответ;
	Иначе
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такой продажи!");
		Возврат Ответ;
	КонецЕсли;
	
КонецФункции

Функция ВыдатьПродажуissueasale(Запрос)
	запросПродажи = Новый Запрос;
	запросПродажи.Текст = текстДляПродажи();
	запросПродажи.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросПродажи.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	выдано = 0;
	//ИндКод  = Массив.IndCode;
	Позиция = Число(Массив.Pose); 
	автор = Массив.author;
	
	Пока выборка.Следующий() Цикл
		ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект(); 
		ОбъектПродажи.датаСписания = ТекущаяДата();
		ОбъектПродажи.Записать();
		//ОбъектПродажи.таблица[Позиция-1].Партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);  
		Для каждого Позиция из массив.pose цикл       
			ОбъектПродажи.таблица[Позиция-1].статусТовара = Истина;
			ТекстЛога =  " В продаже: " + ОбъектПродажи.номер + " выдан товар " +ОбъектПродажи.таблица[Позиция-1].Товар + " "+ ОбъектПродажи.таблица[Позиция-1].Партия; 
			ЛогированиеWT10(ОбъектПродажи.ссылка,Автор,ТекстЛога);
			Если ОбъектПродажи.таблица[Позиция-1].Склад = Справочники.Склады.ПустаяСсылка() или ОбъектПродажи.таблица[Позиция-1].Склад = неопределено тогда		
				ОбъектПродажи.таблица[Позиция-1].Склад = ОбъектПродажи.склад;
			КонецЕсли;
			//выдано = выдано +1; 
		КонецЦикла;
		товары = Выборка.Таблица.Выбрать();
		Пока  товары.Следующий() цикл 
			Если НЕ товары.СтатусТовара и НЕ товары.Отменено Тогда
				выдано = 1;	
			КонецЕсли;
			
		КонецЦикла;
		
		
		Если выдано = 0 тогда
			Заказ = Выборка.ЗаказКлиента.ПолучитьОбъект();
			ОбъектПродажи.СтатусОбработки =  Перечисления.СтатусыОбработкиЗаявок.Упаковывается;
			////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада"); 
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(ОбъектПродажи.КтоПродал), "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада");
			ОбъектПродажи.ОтветственныйКладовщик = Справочники.Пользователи.ПустаяСсылка();
			//ОбъектПродажи.записать();  
		конецесли;
		
		
		ТекстЛога =  " В продаже " + ОбъектПродажи.номер + "ц выдал товар " + ОбъектПродажи.таблица[Позиция-1].Товар + " "+ ОбъектПродажи.таблица[Позиция-1].Партия; 
		ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
		ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции 

Функция ЗаменитьТоварВПродажechangesale(Запрос)
	запросПродажи = Новый Запрос;
	запросПродажи.Текст = текстДляПродажи();
	запросПродажи.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросПродажи.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	выдано = 0;
	ИндКод  = Массив.IndCode;
	Позиция = Число(Массив.Pose); 
	автор = Массив.author;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Пока выборка.Следующий() Цикл
		ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект(); 
		ОбъектПродажи.датаСписания = ТекущаяДата();
		ОбъектПродажи.Записать();
		//ОбъектПродажи.таблица[Позиция-1].Партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);  
		//Для каждого Позиция из массив.pose цикл       
			//СтрокаТЧ = ОбъектПродажи.Таблица[НайденныеСтроки[0].НомерСтроки-1]; 
			СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
			СтрокаТЧ.партия = партия; 
			СтрокаТЧ.машина = ПолучитьМашину(партия);
			//СтрокаТЧ.Склад = ОбъектПродажи.склад; 
			СтрокаТЧ.СтатусТовара = Истина;
			ТекстЛога =  " В продаже: " + ОбъектПродажи.номер + " выдан товар " +ОбъектПродажи.таблица[Позиция-1].Товар + " "+ ОбъектПродажи.таблица[Позиция-1].Партия; 
			ЛогированиеWT10(ОбъектПродажи.ссылка,Автор,ТекстЛога);
			Если ОбъектПродажи.таблица[Позиция-1].Склад = Справочники.Склады.ПустаяСсылка() или ОбъектПродажи.таблица[Позиция-1].Склад = неопределено тогда		
				ОбъектПродажи.таблица[Позиция-1].Склад = ОбъектПродажи.склад;
			КонецЕсли;
			//выдано = выдано +1; 
		//КонецЦикла;
		товары = Выборка.Таблица.Выбрать();
		Пока  товары.Следующий() цикл 
			Если НЕ товары.СтатусТовара и НЕ товары.Отменено Тогда
				выдано = 1;	
			КонецЕсли;
			
		КонецЦикла;
		
		
		Если выдано = 0 тогда
			Заказ = Выборка.ЗаказКлиента.ПолучитьОбъект();
			ОбъектПродажи.СтатусОбработки =  Перечисления.СтатусыОбработкиЗаявок.Упаковывается;
			////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада"); 
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(ОбъектПродажи.КтоПродал), "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада");
			ОбъектПродажи.ОтветственныйКладовщик = Справочники.Пользователи.ПустаяСсылка();
			//ОбъектПродажи.записать();  
		конецесли;
		
		
		ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " выдал товар " + ОбъектПродажи.таблица[Позиция-1].Товар + " "+ ОбъектПродажи.таблица[Позиция-1].Партия; 
		ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
		ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции      


Функция ИзменитьНаименованиеТовараSetProductName(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	
	ОбъектКарточкиТовара = Справочники.ИндКод.НайтиПоНаименованию(Запрос.ПараметрыURL["IndCode"]).Владелец.ПолучитьОбъект();
	
	ТекстЛога = " Переименовал деталь " + ОбъектКарточкиТовара.Наименование + " на" + Массив.Name; 
	//ЛогированиеWT10(ОбъектКарточкиТовара,Массив.author,ТекстЛога);
	
	ОбъектКарточкиТовара.Наименование = Массив.Name;
	ОбъектКарточкиТовара.Записать();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции

Функция ИзменитьЗаявкуeditgapplication(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);	
	Если число(Массив.processing) = 1 тогда 
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ВОбработке;
	Иначеесли число(Массив.processing) = 2 тогда 
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ВРаботе;
	Иначеесли число(Массив.processing) = 3 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.НаСогласовании;
	Иначеесли число(Массив.processing) = 4 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.Обработано;
	Иначеесли число(Массив.processing) = 5 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.Выдано;
	Иначеесли число(Массив.processing) = 6 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.Упаковано;
	Иначеесли число(Массив.processing) = 7 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ОтправленоВТК;
	Иначеесли число(Массив.processing) = 8 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ПринятоВТК;
	Иначеесли число(Массив.processing) = 9 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ПолученоКлиентом;
	КонецЕсли;
	
	
	
	запросзаявки.УстановитьПараметр("Номер",Массив.Num); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
	
	
	Пока выборка.Следующий() Цикл
		ТекстЛога =  " установил статус: " + состояниеСборки; 
		Если число(Массив.processing) = 1 тогда 
			//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001905387489","для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		КонецЕсли;
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.Ответственный),"для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		ЛогированиеWT10(Выборка.ссылка,Массив.person,ТекстЛога);
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗаявки.СтатусОбработки = состояниеСборки;
		Если Массив.person <> Неопределено и Массив.person <> Справочники.Пользователи.ПустаяСсылка() Тогда
			ОбъектЗаявки.ОтветственныйЗаОбработку = Ответственный;
			
		КонецЕсли; 
		
		ОбъектЗаявки.Записать();
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции 

Функция ИзменитьПродажуeditsale(Запрос)
	запроспродажи = Новый Запрос;
	запроспродажи.Текст = текстДляпродажи();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);	
	Если число(Массив.processing) = 1 тогда 
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ВОбработке;
	Иначеесли число(Массив.processing) = 2 тогда 
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ВРаботе;
	Иначеесли число(Массив.processing) = 3 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.НаСогласовании;
	Иначеесли число(Массив.processing) = 4 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.Обработано;
	Иначеесли число(Массив.processing) = 5 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.Выдано;
	Иначеесли число(Массив.processing) = 6 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.Упаковано;
	Иначеесли число(Массив.processing) = 7 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ОтправленоВТК;
	Иначеесли число(Массив.processing) = 8 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ПринятоВТК;
	Иначеесли число(Массив.processing) = 9 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ПолученоКлиентом;
		
	Иначеесли число(Массив.processing) = 41 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ВзятоНаВыдачу;
	Иначеесли число(Массив.processing) = 51 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ОтправленоНаУпаковку;			
	Иначеесли число(Массив.processing) = 52 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.Упаковывается;
	Иначеесли число(Массив.processing) = 61 тогда
		состояниеСборки = Перечисления.СтатусыОбработкиЗаявок.ОтправляетсяВТК;
		
	КонецЕсли;
	
	
	
	запроспродажи.УстановитьПараметр("Номер",Массив.Num); 
	Выборка = запроспродажи.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
	Если ответственный = Неопределено тогда
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	
	
	Пока выборка.Следующий() Цикл
		ТекстЛога =  " установил статус: " + состояниеСборки; 
		ЛогированиеWT10(Выборка.ссылка,Массив.person,ТекстЛога); 
		////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074","для продажи "+ Выборка.номер + " " + Ответственный + ТекстЛога); 
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.КтоПродал),"для продажи "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		
		ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект(); 
		ОбъектПродажи.ОтветственныйКладовщик = Ответственный;
		ОбъектПродажи.СтатусОбработки = состояниеСборки;
		Если Массив.person <> Неопределено и Массив.person <> Справочники.Пользователи.ПустаяСсылка() Тогда
			//ОбъектПродажи.ОтветственныйЗаОбработку = Ответственный;
			
		КонецЕсли; 
		
		ОбъектПродажи.Записать();
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции 

Функция ОтменитьЗаявкуcancelapplication(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);	
	
	запросзаявки.УстановитьПараметр("Номер",Массив.Num); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
	
	
	Пока выборка.Следующий() Цикл
		ТекстЛога =  " Отменил " ; 
		//Если число(Массив.processing) = 1 тогда 
		//	//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001905387489","Заявку "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		//КонецЕсли;
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.Ответственный),"для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		ЛогированиеWT10(Выборка.ссылка,Массив.person,ТекстЛога);
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗаявки.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Отказ;
		Если Массив.person <> Неопределено и Массив.person <> Справочники.Пользователи.ПустаяСсылка() Тогда
			ОбъектЗаявки.ОтветственныйЗаОбработку = Ответственный;
			
		КонецЕсли; 
		
		ОбъектЗаявки.Записать();
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции 

Функция УстановитьТрекНомерsettrecknum(Запрос)
	
	
	запроспродажи = Новый Запрос;
	запроспродажи.Текст = текстДляпродажи();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);	
	
	
	запроспродажи.УстановитьПараметр("Номер",Массив.Num); 
	Выборка = запроспродажи.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
	Если ответственный = Неопределено тогда
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	
	
	Пока выборка.Следующий() Цикл
		
		///+ГомзМА 06.02.2024
		ИнтеграцияAPIТранспортныеКомпанииВызовСервера.УзнатьСтатусДоставки(Массив.trecknum, Выборка.ТранспортнаяКомпания);
		///-ГомзМА 06.02.2024
		
		ТекстЛога =  " установил статус: "; 
		ЛогированиеWT10(Выборка.ссылка,Массив.person,ТекстЛога); 
		////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074","для продажи "+ Выборка.номер + " " + Ответственный + ТекстЛога); 
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.КтоПродал),"для продажи "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		
		ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект(); 
		ОбъектПродажи.ОтветственныйКладовщик = Ответственный;
		ОбъектПродажи.ТрекНомер = Массив.trecknum;
		Если Массив.person <> Неопределено и Массив.person <> Справочники.Пользователи.ПустаяСсылка() Тогда
			//ОбъектПродажи.ОтветственныйЗаОбработку = Ответственный;
			
		КонецЕсли; 
		
		ОбъектПродажи.Записать();
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции 

Функция НаполнитьПродажуfillingsale(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляПродажи();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.IndCode;
	
	//	ИндКод  = Массив.id;
	Позиция = Число(Массив.pose);
	Автор 	= Массив.author;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	Отбор = Новый Структура();
	Отбор.Вставить("Товар", Номенклатура);
	Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	
	Пока выборка.Следующий() Цикл		
		ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();  
		
		НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);
		Если НайденныеСтроки.количество() > 0 Тогда 
			//Если Массив.type = 0 Тогда
			СтрокаТЧ = ОбъектПродажи.Таблица[НайденныеСтроки[0].НомерСтроки-1]; 
			//СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
			СтрокаТЧ.партия = партия; 
			СтрокаТЧ.машина = ПолучитьМашину(партия);
			СтрокаТЧ.Склад = ОбъектПродажи.склад; 
			СтрокаТЧ.СтатусТовара = Истина;
			
			ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " установил партию в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех. Партия установлена для " + строка(СтрокаТЧ.Товар) );
			Возврат Ответ;
		Иначе
			Отбор = Новый Структура();
			Отбор.Вставить("Товар", Номенклатура);
			Отбор.Вставить("Партия", партия);
			НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.количество() > 0 Тогда 
				СтрокаТЧ = ОбъектПродажи.Таблица[НайденныеСтроки[0].НомерСтроки-1]; 
				СтрокаТЧ.СтатусТовара = Истина;
				
				ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " установил выдал партию в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
				ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);	 
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех. Партия Выдана для " + строка(СтрокаТЧ.Товар) );
				Возврат Ответ;
				
			Иначе
				
				Новаястрока = ОбъектПродажи.Таблица.Добавить();
				Новаястрока.Партия = партия;
				Новаястрока.Товар = Номенклатура; 
				Новаястрока.Количество = 1;
				Новаястрока.машина = ПолучитьМашину(партия);
				Новаястрока.СтатусТовара = Истина;
				Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
				Новаястрока.Склад = ОбъектПродажи.склад; 	
				
				ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " добавил партию в товаре " + Новаястрока.Товар + " "+ Новаястрока.Партия; 
				ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение); 
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех. Строка добавлена");
				Возврат Ответ;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не Найдена продажа!");
	Возврат Ответ;	
	
КонецФункции  

Функция ВПродажуИзКорзиныcarttosale(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляПродажи();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.IndCode;
	
	//	ИндКод  = Массив.id;
	//Позиция = Число(Массив.pose);
	Автор 	= Массив.author;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	Отбор = Новый Структура();
	Отбор.Вставить("Товар", Номенклатура);
	Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	
	Пока выборка.Следующий() Цикл		
		ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);
		Если НайденныеСтроки.количество() > 0 Тогда 
			//Если Массив.type = 0 Тогда
			СтрокаТЧ = ОбъектПродажи.Таблица[НайденныеСтроки[0].НомерСтроки-1]; 
			//СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
			СтрокаТЧ.партия = партия; 
			СтрокаТЧ.машина = ПолучитьМашину(партия);
			СтрокаТЧ.Склад = ОбъектПродажи.склад; 
			СтрокаТЧ.СтатусТовара = Истина;
			
			ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " установил партию в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех. Партия установлена для " + строка(СтрокаТЧ.Товар) );
			Возврат Ответ;
		Иначе
			Отбор = Новый Структура();
			Отбор.Вставить("Товар", Номенклатура);
			Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
			НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.количество() > 0 Тогда 
				//
				//Новаястрока = ОбъектПродажи.Таблица.Добавить();
				//Новаястрока.Партия = партия;
				//Новаястрока.Товар = Номенклатура; 
				//Новаястрока.Количество = 1;
				//Новаястрока.машина = ПолучитьМашину(партия);
				//Новаястрока.СтатусТовара = Истина;
				//Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
				//Новаястрока.Склад = ОбъектПродажи.склад; 	
				//
				//ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " добавил партию в товаре " + Новаястрока.Товар + " "+ Новаястрока.Партия; 
				//ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				//ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение); 
				//
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Вилка");
				Возврат Ответ;
			Иначе
				Новаястрока = ОбъектПродажи.Таблица.Добавить();
				Новаястрока.Партия = партия;
				Новаястрока.Товар = Номенклатура; 
				Новаястрока.Количество = 1;
				Новаястрока.машина = ПолучитьМашину(партия);
				Новаястрока.СтатусТовара = Истина;
				Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
				Новаястрока.Склад = ОбъектПродажи.склад; 	
				
				ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " добавил партию в товаре " + Новаястрока.Товар + " "+ Новаястрока.Партия; 
				ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение); 
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех. Строка добавлена");
				Возврат Ответ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не Найдена продажа!");
	Возврат Ответ;	
	
КонецФункции  

Функция СменаCтатусаТоваровВПеремещенииchangestatemove(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляПеремещения();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.IndCode;
	
	Позиция = Число(Массив.pose);
	Автор 	= Массив.author;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	Отбор = Новый Структура();
	Отбор.Вставить("Товар", Номенклатура);
	Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	
	Пока выборка.Следующий() Цикл		
		ОбъектПерем = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		Если Массив.type = "Нет в наличии" Тогда
			СтрокаТЧ = ОбъектПерем.Товары[Позиция-1]; 
			
			СтрокаТЧ.СостояниеТовара = Перечисления.СтатусыПеремещений.НетВНаличии; 
			
			ТекстЛога =  " В перемещении " + ОбъектПерем.номер + " установил нет в наличии в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех. Нет в наличии " + строка(СтрокаТЧ.Товар) );
			//Возврат Ответ;
		ИначеЕсли Массив.type = "Собрано" ИЛИ Массив.type = "Принят" Тогда
			
			///+ГомзМА 26.01.2024
			Если Массив.type = "Собрано" Тогда
				СтатусТЧ = Перечисления.СтатусыПеремещений.Собрано;
			ИначеЕсли Массив.type = "Принят" Тогда
				СтатусТЧ = Перечисления.СтатусыПеремещений.Принят;
			КонецЕсли;
			///-ГомзМА 26.01.2024
			
			///+ГомзМА 05.02.2024
			//Определение полки
			Если ОбъектПерем.СкладПолучатель = Справочники.Склады.НайтиПоКоду("000000005") Тогда //Москва
				Стеллаж = Справочники.Стеллаж.НайтиПоКоду("000002014"); //RegionMSK
			ИначеЕсли ОбъектПерем.СкладПолучатель = Справочники.Склады.НайтиПоКоду("000000008") Тогда //Екатеринбург
				Стеллаж = Справочники.Стеллаж.НайтиПоКоду("000001068"); //RegionEKB
			Иначе
				Стеллаж = Справочники.Стеллаж.НайтиПоКоду("000002015"); //RegionNN
			КонецЕсли;
			///-ГомзМА 05.02.2024
				
			НайденныеСтроки = ОбъектПерем.Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.количество() > 0 Тогда 
				//Если Массив.type = 0 Тогда
				СтрокаТЧ = ОбъектПерем.Товары[НайденныеСтроки[0].НомерСтроки-1]; 
				//СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
				СтрокаТЧ.партия = партия; 
				СтрокаТЧ.Автомобиль = ПолучитьМашину(партия);
				//  СтрокаТЧ.Склад = ОбъектПерем.склад; 
				СтрокаТЧ.СостояниеТовара = СтатусТЧ;
				
				///-ГомзМА 05.02.2024
				//Изменение стеллажа
				Если Массив.type = "Собрано" Тогда
					//УказатьРегиональнуюПолку
					ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
					ЗаписьВРегистреСведений.индкод 	= Справочники.ИндКод.НайтиПоНаименованию(Партия);
					ЗаписьВРегистреСведений.Прочитать();
					Если ЗаписьВРегистреСведений.Выбран() Тогда
						ЗаписьВРегистреСведений.Стеллаж = Стеллаж;
						ЗаписьВРегистреСведений.Поддон = Справочники.Поддоны.ПустаяСсылка();
						ЗаписьВРегистреСведений.Записать();
					КонецЕсли;	
				КонецЕсли;	
				///-ГомзМА 05.02.2024
				
				ТекстЛога =  " В продаже " + ОбъектПерем.номер + " установил партию в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
				ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);	 
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех. Партия установлена для " + строка(СтрокаТЧ.Товар) );
				//Возврат Ответ;
			Иначе
				Отбор = Новый Структура();
				Отбор.Вставить("Товар", Номенклатура);
				Отбор.Вставить("Партия", партия);
				НайденныеСтроки = ОбъектПерем.Товары.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.количество() > 0 Тогда 
					
					СтрокаТЧ = ОбъектПерем.Товары[НайденныеСтроки[0].НомерСтроки-1]; 
					//Новаястрока.Партия = партия;
					//Новаястрока.Товар = Номенклатура; 
					//Новаястрока.Количество = 1;
					//Новаястрока.машина = ПолучитьМашину(партия);
					СтрокаТЧ.СостояниеТовара = СтатусТЧ;
					
					///-ГомзМА 05.02.2024
					//Изменение стеллажа
					Если Массив.type = "Собрано" Тогда
						//УказатьРегиональнуюПолку
						ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
						ЗаписьВРегистреСведений.индкод 	= Справочники.ИндКод.НайтиПоНаименованию(СтрокаТЧ.Партия);
						ЗаписьВРегистреСведений.Прочитать();
						Если ЗаписьВРегистреСведений.Выбран() Тогда
							ЗаписьВРегистреСведений.Стеллаж = Стеллаж;
							ЗаписьВРегистреСведений.Поддон = Справочники.Поддоны.ПустаяСсылка();
							ЗаписьВРегистреСведений.Записать();
						КонецЕсли;	
					КонецЕсли;	
					///-ГомзМА 05.02.2024
				
					//Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
					//Новаястрока.Склад = ОбъектПерем.склад; 	
					
					ТекстЛога =  " В продаже " + ОбъектПерем.номер + " добавил партию в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
					ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
					ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение); 
					
					Ответ = Новый HTTPСервисОтвет(200);
					Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки(Массив.type);
					//Возврат Ответ;
				Иначе
					Новаястрока = ОбъектПерем.Товары.Добавить();
					Новаястрока.Партия = партия;
					Новаястрока.Товар = Номенклатура; 
					Новаястрока.Количество = 1;
					Новаястрока.Автомобиль = ПолучитьМашину(партия);
					Новаястрока.СостояниеТовара = СтатусТЧ;
					Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
					//Новаястрока.Склад = ОбъектПерем.склад; 	
					
					ТекстЛога =  " В продаже " + ОбъектПерем.номер + " добавил партию в товаре " + Новаястрока.Товар + " "+ Новаястрока.Партия; 
					ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
					ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение); 
					
					Ответ = Новый HTTPСервисОтвет(200);
					Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки("Успех. Строка добавлена");
					
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверкаПеремещения(Запрос.ПараметрыURL["Num"], Массив.type) Тогда
				Если Массив.type = "Собрано" Тогда	
					Для каждого стр из ОбъектПерем.товары Цикл
						Если стр.СостояниеТовара = Перечисления.СтатусыПеремещений.Собрано Тогда
							стр.СостояниеТовара = Перечисления.СтатусыПеремещений.КОтправке;
						КонецЕсли;
					КонецЦикла;
					ОбъектПерем.Статус = Перечисления.СтатусыПеремещений.КОтправке; 
					ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);	
				ИначеЕсли Массив.type = "Принят" Тогда
					ОбъектПерем.Статус = Перечисления.СтатусыПеремещений.Принят; 
					ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЕсли;
			///+ГомзМА 26.01.2024	
		ИначеЕсли Массив.type = "Отправлен" Тогда
			Для каждого СтрокаТЧ Из ОбъектПерем.Товары Цикл
				Если СтрокаТЧ.СостояниеТовара <> Перечисления.СтатусыПеремещений.НетВНаличии Тогда
					СтрокаТЧ.СостояниеТовара = Перечисления.СтатусыПеремещений.Отправлен;
				КонецЕсли;
			КонецЦикла;
			
			ОбъектПерем.Статус = Перечисления.СтатусыПеремещений.Отправлен;
			ТекстЛога =  " Отправил перемещение " + ОбъектПерем.номер; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех. Перемещение " + ОбъектПерем.номер + " отправлено");
			///-ГомзМА 26.01.2024
		КонецЕсли;
		
		Возврат Ответ;	
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не Найдена продажа!");
	Возврат Ответ;	
	
КонецФункции 

Функция ПроверкаПеремещения(Номер, Статус)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПеремещениеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	               |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Всего
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПеремещениеТоваровТовары.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПеремещениеТоваровТовары.НомерСтроки) КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТ_отбор
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
	               |	И (ПеремещениеТоваровТовары.СостояниеТовара = Значение(Перечисление.СтатусыПеремещений.НетВНаличии)
	               |	ИЛИ ПеремещениеТоваровТовары.СостояниеТовара = Значение(Перечисление.СтатусыПеремещений.&Статус))
				   |СГРУППИРОВАТЬ ПО
	               |	ПеремещениеТоваровТовары.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Всего.НомерСтроки КАК Итог,
	               |	ВТ_отбор.НомерСтроки КАК Отбор
	               |ИЗ
	               |	ВТ_Всего КАК ВТ_Всего
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_отбор КАК ВТ_отбор
	               |		ПО ВТ_Всего.Ссылка = ВТ_отбор.Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Статус", Статус);
	Запрос.УстановитьПараметр("Номер", Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	///+ГомзМА 26.01.2024
	Если Выборка.Итог <> Неопределено ИЛИ Выборка.Отбор <> Неопределено Тогда
		Разность = Выборка.итог - Выборка.отбор;
	Иначе
		Разность = Неопределено;
	КонецЕсли;
	///-ГомзМА 26.01.2024
	
	Если Разность =0 тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ИзменитьГабаритыТовараSetProductSize(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	
	ОбъектКарточкиТовара = Справочники.ИндКод.НайтиПоНаименованию(Запрос.ПараметрыURL["IndCode"]).Владелец.ПолучитьОбъект();
	
	ТекстЛога = " Переименовал деталь " + ОбъектКарточкиТовара.Наименование + " на" + Массив.Name; 
	//ЛогированиеWT10(ОбъектКарточкиТовара,Массив.author,ТекстЛога);
	
	//	ОбъектКарточкиТовара.Наименование = Массив.Name;  
	ОбъектКарточкиТовара.длин = Массив.length;
	ОбъектКарточкиТовара.шир  = Массив.width;
	ОбъектКарточкиТовара.выс  = Массив.height;  
	ОбъектКарточкиТовара.вес  = Массив.weight;
	
	
	ОбъектКарточкиТовара.Записать();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции

Функция ГлобальноВыдатьПродажуglobalissueasale(Запрос)
	запросПродажи = Новый Запрос;
	запросПродажи.Текст = текстДляПродажи();
	запросПродажи.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросПродажи.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	выдано = 0;
	ИндКод  = Массив.IndCode;
	Автор 	= Массив.author;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	
	
	автор = Массив.author;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Товар", Номенклатура);
	Отбор.Вставить("Партия", партия);
	Попытка 
		Пока выборка.Следующий() Цикл
			ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();
			НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор); 
			
			Если НайденныеСтроки.количество() > 0 Тогда 
				
				Позиция = НайденныеСтроки[0].НомерСтроки; 
				
				ОбъектПродажи.датаСписания = ТекущаяДата();	
				СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1];
				СтрокаТЧ.статусТовара = Истина;
				ТекстЛога =  " В продаже: " + ОбъектПродажи.номер + " выдан товар " +СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
				ЛогированиеWT10(ОбъектПродажи.ссылка,Автор,ТекстЛога);
				Если СтрокаТЧ.Склад = Справочники.Склады.ПустаяСсылка() или ОбъектПродажи.таблица[Позиция-1].Склад = неопределено тогда		
					СтрокаТЧ.Склад = ОбъектПродажи.склад;
				КонецЕсли;
				//выдано = выдано +1; 
				//КонецЦикла;
				товары = Выборка.Таблица.Выбрать();
				Пока  товары.Следующий() цикл 
					Если НЕ товары.СтатусТовара и НЕ товары.Отменено Тогда
						выдано = 1;	
					КонецЕсли;
					
				КонецЦикла;
				
				Если выдано = 0 тогда
					Заказ = Выборка.ЗаказКлиента.ПолучитьОбъект();
					ОбъектПродажи.СтатусОбработки =  Перечисления.СтатусыОбработкиЗаявок.Упаковывается;
					////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада"); 
					//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(ОбъектПродажи.КтоПродал), "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада");
					ОбъектПродажи.ОтветственныйКладовщик = Справочники.Пользователи.ПустаяСсылка();
					//ОбъектПродажи.записать();  
				конецесли;
				
				ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " выдал товар " + ОбъектПродажи.таблица[Позиция-1].Товар + " "+ ОбъектПродажи.таблица[Позиция-1].Партия; 
				ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
				ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение); 
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех. Выдан товар "+ строка(СтрокаТЧ.Товар));
				Возврат Ответ;
				
			Иначе
				Отбор = Новый Структура();
				Отбор.Вставить("Товар", Номенклатура);
				Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
				НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);
				
				СтрокаТЧ = ОбъектПродажи.Таблица[НайденныеСтроки[0].НомерСтроки-1]; 
				//СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
				СтрокаТЧ.партия = партия; 
				СтрокаТЧ.машина = ПолучитьМашину(партия);
				СтрокаТЧ.Склад = ОбъектПродажи.склад; 
				СтрокаТЧ.СтатусТовара = Истина;
				
				ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " установил партию в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
				ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);	 
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех. Партия установлена для " + строка(СтрокаТЧ.Товар) + " и выдана!" );
				Возврат Ответ;
				
			КонецЕсли;
		КонецЦикла;
	Исключение
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Такого товара нет в продаже!");
		Возврат Ответ;
	КонецПопытки;
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Такого товара нет в продаже!");
	Возврат Ответ; 
	
КонецФункции

Функция СменаподдонаEditpod(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	индкоды = Массив.ids;
	Место = "П0003";
	Автор = Массив.author; 
	
	ДЛя каждого индкод из индкоды цикл	
		Запрос = новый запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИндНомер.индкод КАК индкод,
		|	ИндНомер.Код КАК Код,
		|	ИндНомер.Стеллаж КАК Стеллаж,
		|	ИндНомер.Комментарий КАК Комментарий,
		|	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
		|	ИндНомер.Модель КАК Модель,
		|	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
		|	ИндНомер.Ответственный КАК Ответственный,
		|	ИндНомер.ЕстьФото КАК ЕстьФото,
		|	ИндНомер.Комментарий КАК Комментарий1,
		|	ИндНомер.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|ГДЕ
		|	ИндНомер.индкод.Наименование = &Код"; 
		запрос.УстановитьПараметр("Код", индкод);
		выборка = Запрос.Выполнить().Выбрать(); 
		Если выборка.Количество() > 0 Тогда
			Выборка.Следующий();
		Иначе
			Ответ = Новый HTTPСервисОтвет(415);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Нет такого");
			Возврат ответ;	
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
		НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
		НаборЗаписей.Прочитать(); 
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Ответ = Новый HTTPСервисОтвет(415);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Нет такого");	
		ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
			
			НовыйНомер = НаборЗаписей[0]; 
			Поддон = Справочники.Поддоны.НайтиПоНаименованию(место);
			Если Поддон <> Справочники.Поддоны.ПустаяСсылка() Тогда  	
				Лог =  " сменил поддон с " + НовыйНомер.поддон +" на " + Поддон; 
				
				ЛогированиеИндНомера(Строка(НовыйНомер.индкод),Автор,Лог,Поддон.Стеллаж.Наименование,Место,НовыйНомер.Стеллаж,НовыйНомер.поддон);
				
				НовыйНомер.поддон = Поддон; 
				НовыйНомер.Стеллаж = Поддон.Стеллаж;
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех");
			Иначе
				Ответ = Новый HTTPСервисОтвет(404);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Поддон не найден");
			КонецЕсли;
		КонецЕсли; 
		
		НаборЗаписей.Записать(); 
	Конеццикла;
	Возврат ответ;
	
	
	
КонецФункции


#Область СчетНаОплату

Функция СоздатьСчетcreatecheck(Запрос)
	
	///+ГомзМА 20.11.2023
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	Массив = ПрочитатьJSON(ЧтениеJSON); 
	//Автор = Массив.Person;
	
	Номерзаявки = Запрос.ПараметрыURL["Num"];
	
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Номерзаявки); 
	Выборка = запросзаявки.Выполнить().Выбрать(); 
	
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		Счет = ПроверкаСчета(Выборка.ссылка); 
		Если Счет.Ссылка = Неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Клиент КАК Клиент,
			|	Док.Комментарий КАК Комментарий,
			|	Док.Проект КАК Проект,
			|	Док.Склад КАК Склад,
			|	Док.Ссылка КАК ЗаказКлиента,
			|	Док.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	Док.НачислятьНДС КАК НачислятьНДС,
			|	Док.Ответственный КАК КтоПродал
			|ПОМЕСТИТЬ втШапка
			|ИЗ
			|	Документ.ЗаказКлиента КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втШапка.Клиент КАК Клиент,
			|	втШапка.Комментарий КАК Комментарий,
			|	втШапка.Проект КАК Проект,
			|	втШапка.Склад КАК Склад,
			|	втШапка.ЗаказКлиента КАК ЗаказКлиента,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	втШапка.КтоПродал КАК КтоПродал
			|ИЗ
			|	втШапка КАК втШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
			|	ЗаказКлиентаТовары.Номенклатура КАК Товар,
			|	ЗаказКлиентаТовары.Количество КАК Количество,
			|	ЗаказКлиентаТовары.Цена КАК Цена,
			|	ЗаказКлиентаТовары.Сумма КАК Сумма,
			|	втШапка.Склад КАК Склад,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,
			|	ЗаказКлиентаТовары.Партия КАК Партия,
			|	втШапка.КтоПродал КАК КтоПродал,
			|	РегистрНакопления1Остатки.машина КАК машина,
			|	РегистрНакопления1Остатки.Склад КАК Склад1
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ втШапка КАК втШапка
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
			|		ПО ЗаказКлиентаТовары.Партия = РегистрНакопления1Остатки.индкод
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка = &Ссылка
			|	И НЕ ЗаказКлиентаТовары.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			Запрос.УстановитьПараметр("Ссылка", Выборка.ссылка);
			
			НовыйСчет = Документы.ПредварительныйСчет.СоздатьДокумент();
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			НовыйСчет.Организация = Справочники.Организация.НайтиПоКоду(Массив.org);  
			НовыйСчет.TipOplati   = Справочники.TipOplati.НайтиПоКоду(Массив.bill);
			НовыйСчет.БезДоговора = Истина; 
			НовыйСчет.Дата        = ТекущаяДата();
			НовыйСчет.Клиент   	  = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки).Клиент;
			НовыйСчет.Основание   = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки);
			//НовыйСчет.Ктопродал   = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки).Ответственный;  
			//НовыйСчет.Самовывоз   = истина; 
			//НовыйСчет.WTPanel   = Справочники.СтатусыWT.НайтиПоНаименованию("Продажа");
			//НовыйСчет.ПодстатусОбработки   = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
			
			//НовыйСчет.СтатусДоставки    = Перечисления.СтатусОтправки.Отправлен;
			//НовыйСчет.ДатаСписания      = ТекущаяДата();  
			//НовыйСчет.ОжидаемаяДатаВыплаты      = ТекущаяДата();
			Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить()[0]);
			
			ЗаполнениеДокументов.Заполнить(НовыйСчет, Шапка, Ложь);
			НовыйСчет.Таблица.Загрузить(РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить()); 
			
			НовыйСчет.Записать();
			
			ТекстЛога =  " Создал счет " + НовыйСчет.номер ; 
			ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
			//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(НоваяПродажа.КтоПродал), Строка(Выборка.Ответственный) + ТекстЛога); 
			
			//ОбъектЗаявки = Выборка.ссылка.получитьОбъект();
			//ОбъектЗаявки.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.ЖдёмДенег; 
			//ОбъектЗаявки.Записать();
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Счет №" + НовыйСчет.номер + " создан");
		Иначе
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Счет уже есть!");
			ТекстЛога =  "Счет уже есть! ";
			////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
		КонецЕсли;
		
	иначе
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такой заявки!"); 
		ТекстЛога =  "Нет такой заявки! ";
		////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
	КонецЕсли;
	возврат Ответ;
	///-ГомзМА 20.11.2023
	
КонецФункции

#КонецОбласти

#Конецобласти     

Функция ПолучениеФотоДляТелеги(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245",8085);
		
		СтрокаЗапроса = "/v1/images?type=outlinks&ind_code="+ИндКод;
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("indCode", ИндКод);
		//
		//
		//// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		
		МассивПустыхФото = новый массив; 
		
		Для каждого стр из ИндКод Цикл 
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);
			
		КонецЦикла;
		
		Возврат МассивПустыхФото;
	КонецПопытки;
	
КонецФункции

Функция ПолучениеФото(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL());  
	Соединение = Новый HTTPСоединение("192.168.0.245",8085);
	
	СтрокаЗапроса = "/v1/images";
	Заголовки = Новый Соответствие;    
	Заголовки.Вставить("Content-Type", "application/json");
	
	//Для Каждого ЭлементМассива из ИндКод Цикл
	//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
	//Конеццикла;
	//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
	//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
	//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
	Запрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);	
	ЗапросСтруктура = Новый Структура();
	
	ЗапросСтруктура.Вставить("indCode", ИндКод);
	
	
	// параметры запроса
	ПотокJSON = Новый ЗаписьJSON();
	ПотокJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
	СтрокаJSON = ПотокJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		тело = Ответ.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Тело);
		
		Ответ  = ПрочитатьJSON(ЧтениеJSON);
		Сообщить(Ответ); //получим HTML-код страницы 
	Иначе
		Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
		тело = Ответ.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Тело);
		
		Ответ  = ПрочитатьJSON(ЧтениеJSON);
		Сообщить(Ответ);
		ответ = неопределено;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСтруктуруТоваров(Номер)  
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыТовараВЗаказНаряде.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Статусы
	|ИЗ
	|	Перечисление.СтатусыТовараВЗаказНаряде КАК СтатусыТовараВЗаказНаряде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЗаказНарядТовары.НомерСтроки) КАК КоличествоСтрок,
	|	ЗаказНарядТовары.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТ_Условие
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|ГДЕ
	|	ЗаказНарядТовары.Ссылка.Номер = &Номер
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Статусы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ВТ_Условие.КоличествоСтрок, 0) КАК КоличествоСтрок
	|ИЗ
	|	ВТ_Статусы КАК ВТ_Статусы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Условие КАК ВТ_Условие
	|		ПО ВТ_Статусы.Ссылка = ВТ_Условие.Состояние";
	Запрос.УстановитьПараметр("Номер",Номер);
	Выборка = Запрос.Выполнить().Выбрать(); 
	массивТоваров = Новый массив;
	пока Выборка.Следующий() цикл
		СтруктураСтатусов = Новый Структура;
		СтруктураСтатусов.Вставить("state",Строка(Выборка.Ссылка));
		СтруктураСтатусов.Вставить("count",Строка(Выборка.КоличествоСтрок));
		массивТоваров.Добавить(СтруктураСтатусов);
	КонецЦикла;
	Возврат массивТоваров;	
КонецФункции 

Функция ПолучитьСтруктуруТоваровПеремещения(Номер)  
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыПеремещений.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Статусы
	|ИЗ
	|	Перечисление.СтатусыПеремещений КАК СтатусыПеремещений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПеремещениеТоваровТовары.НомерСтроки) КАК КоличествоСтрок,
	|	ПеремещениеТоваровТовары.СостояниеТовара КАК Состояние
	|ПОМЕСТИТЬ ВТ_Условие
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.СостояниеТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Статусы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ВТ_Условие.КоличествоСтрок, 0) КАК КоличествоСтрок
	|ИЗ
	|	ВТ_Статусы КАК ВТ_Статусы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Условие КАК ВТ_Условие
	|		ПО ВТ_Статусы.Ссылка = ВТ_Условие.Состояние";
	Запрос.УстановитьПараметр("Номер",Номер);
	Выборка = Запрос.Выполнить().Выбрать(); 
	массивТоваров = Новый массив;
	пока Выборка.Следующий() цикл
		СтруктураСтатусов = Новый Структура;
		СтруктураСтатусов.Вставить("state",Строка(Выборка.Ссылка));
		СтруктураСтатусов.Вставить("count",Строка(Выборка.КоличествоСтрок));
		массивТоваров.Добавить(СтруктураСтатусов);
	КонецЦикла;
	Возврат массивТоваров;	
КонецФункции

Процедура ЛогированиеWT10(Заявка,Автор,Лог)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогWT10.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.Источник = Заявка;
	МенеджерЗаписиЛога.Дата = ТекущаяДата();
	МенеджерЗаписиЛога.Пользователь = Автор;
	МенеджерЗаписиЛога.Лог = "--------------------------" + Символы.ПС + Автор + Лог;
	МенеджерЗаписиЛога.Записать();	
КонецПроцедуры 

Процедура ЛогированиеИндНомера(индкод,Автор,Лог,Стеллажж = неопределено,Поддон = неопределено,ПредСтеллаж = неопределено,ПредПоддон = неопределено)
	Авторец = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогИндНомера.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.индкод = Справочники.ИндКод.НайтиПоНаименованию(индкод); 
	МенеджерЗаписиЛога.дата = ТекущаяДата();
	МенеджерЗаписиЛога.период = ТекущаяДата();
	Если  Поддон <> неопределено  Тогда  
		//Поддон = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.Поддон  = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон; 
	КонецЕсли;  
	
	Если  Стеллажж <> неопределено Тогда  
		//Стеллажж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.ПредыдущийСтеллаж = ПредСтеллаж;
	КонецЕсли;  
	
	МенеджерЗаписиЛога.Ответственный = Авторец;
	МенеджерЗаписиЛога.Текст = "--------------------------" + Символы.ПС + Авторец + Лог;
	МенеджерЗаписиЛога.Записать();	
КонецПроцедуры 

Функция ПроверкаПродаж(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	ПродажаЗапчастей.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.ЗаказКлиента = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента",Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;
	
КонецФункции

Функция ПроверкаСчета(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	ПредварительныйСчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПредварительныйСчет КАК ПредварительныйСчет
	|ГДЕ
	|	ПредварительныйСчет.Основание = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента",Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;
	
КонецФункции

Функция пользТелеги(Автор)
	Запрос =новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Telegram_Пользователи.ID_Пользователя КАК ID_Пользователя
	|ИЗ
	|	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
	|ГДЕ
	|	Telegram_Пользователи.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь",Автор);
	Выборка = запрос.Выполнить().Выбрать();                             
	Выборка.Следующий();
	
	Возврат выборка.ID_Пользователя;
Конецфункции

Функция ПолучитьФинансыgetfin(Запрос) 
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	//Автор = Массив.Person;
	
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗаявкаНаРасход.ДатаОплаты, ДЕНЬ) КАК ДатаЗаявкиНаРасход,
	|	СУММА(ЗаявкаНаРасход.СуммаДокумента) КАК СуммаЗаявкиНаРасход
	|ИЗ
	|	Документ.ЗаявкаНаРасход КАК ЗаявкаНаРасход
	|ГДЕ
	|	ЗаявкаНаРасход.ДатаОплаты МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаявкаНаРасход.Согласовал <> ЗНАЧЕНИЕ(Справочник.пользователи.Пустаяссылка)
	|	И ЗаявкаНаРасход.Статус <> ЗНАЧЕНИЕ(Перечисление.дт_СтатусыЗаявокНаРасход.Отклонено)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЗаявкаНаРасход.ДатаОплаты, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаявкиНаРасход"; 
	
	//Если массив.datestart <> неопределено и массив.dateend <> неопределено тогда
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(Дата(массив.datestart)));	
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Дата(массив.dateend)));	
	//КонецЕсли;
	
	ВыборкаЗаявокНаРасход = Запрос.Выполнить().Выбрать();
	
	
	МассивЗаявокНаРасход = Новый массив;
	Пока  ВыборкаЗаявокНаРасход.Следующий() Цикл
		СтруктураЗаявок = новый Структура;
		СтруктураЗаявок.Вставить("sum",Строка(ВыборкаЗаявокНаРасход.СуммаЗаявкиНаРасход));
		СтруктураЗаявок.Вставить("date",Строка(ВыборкаЗаявокНаРасход.ДатаЗаявкиНаРасход)); 
		
		МассивЗаявокНаРасход.Добавить(СтруктураЗаявок);
	КонецЦикла;
	
	
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БалансОстаткиИОбороты.ПериодДень КАК ДатаРасхода,
	|	СУММА(БалансОстаткиИОбороты.БалансРасход) КАК Сумма
	|ИЗ
	|	РегистрНакопления.Баланс.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, , ) КАК БалансОстаткиИОбороты
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(БалансОстаткиИОбороты.Регистратор) = ТИП(Документ.Расходы)
	|			ИЛИ ТИПЗНАЧЕНИЯ(БалансОстаткиИОбороты.Регистратор) = ТИП(Документ.ЛичныйВывод))
	|
	|СГРУППИРОВАТЬ ПО
	|	БалансОстаткиИОбороты.ПериодДень
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРасхода";
	
	//Если  массив.datestart <> неопределено и массив.dateend <> неопределено тогда
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(Дата(массив.datestart)));	
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Дата(массив.dateend)));	
	//КонецЕсли;
	
	ВыборкаРасходов = Запрос.Выполнить().Выбрать();
	
	
	МассивРасходов = Новый массив;
	Пока  ВыборкаРасходов.Следующий() Цикл
		СтруктураРасходов = новый Структура;
		СтруктураРасходов.Вставить("sum",Строка(ВыборкаРасходов.Сумма));
		СтруктураРасходов.Вставить("date",Строка(ВыборкаРасходов.ДатаРасхода)); 
		
		МассивРасходов.Добавить(СтруктураРасходов);
	КонецЦикла;
	
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БалансОстаткиИОбороты.ПериодДень КАК датаПрихода,
	|	СУММА(БалансОстаткиИОбороты.БалансПриход) КАК Сумма
	|ИЗ
	|	РегистрНакопления.Баланс.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, , ) КАК БалансОстаткиИОбороты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(БалансОстаткиИОбороты.Регистратор) = ТИП(Документ.ПриходДенегНаСчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	БалансОстаткиИОбороты.ПериодДень
	|
	|УПОРЯДОЧИТЬ ПО
	|	датаПрихода";
	
	//Если  массив.datestart <> неопределено и массив.dateend <> неопределено тогда
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(Дата(массив.datestart)));	
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Дата(массив.dateend)));	
	//КонецЕсли; 
	
	ВыборкаПоступленийДенег = Запрос.Выполнить().Выбрать();
	
	
	МассивПоступленийДенег = Новый массив;
	Пока  ВыборкаПоступленийДенег.Следующий() Цикл
		СтруктураПоступленийДенег = новый Структура;
		СтруктураПоступленийДенег.Вставить("sum",Строка(ВыборкаПоступленийДенег.Сумма));
		СтруктураПоступленийДенег.Вставить("date",Строка(ВыборкаПоступленийДенег.ДатаПрихода)); 
		
		МассивПоступленийДенег.Добавить(СтруктураПоступленийДенег);
	КонецЦикла;
	
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПродажаЗапчастей.ОжидаемаяДатаВыплаты, ДЕНЬ) КАК ОжидаемаяДатаВыплаты,
	|	СУММА(ПродажаЗапчастей.ИтогоРекв - ЕСТЬNULL(Оплаты.Сумма, 0)) КАК ИтогоРекв
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Оплаты.Документ КАК Документ,
	|			СУММА(Оплаты.Сумма) КАК Сумма
	|		ИЗ
	|			(ВЫБРАТЬ
	|				БаланПоНакладнойОстатки.Измерение1 КАК Документ,
	|				БаланПоНакладнойОстатки.СуммаОстаток КАК Сумма
	|			ИЗ
	|				РегистрНакопления.БаланПоНакладной.Остатки КАК БаланПоНакладнойОстатки
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ОплатыПоСделкамОбороты.Документ,
	|				ОплатыПоСделкамОбороты.СуммаОборот
	|			ИЗ
	|				РегистрНакопления.ОплатыПоСделкам.Обороты КАК ОплатыПоСделкамОбороты) КАК Оплаты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Оплаты.Документ) КАК Оплаты
	|		ПО ПродажаЗапчастей.Ссылка = Оплаты.Документ
	|ГДЕ
	|	ПродажаЗапчастей.ОжидаемаяДатаВыплаты МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПродажаЗапчастей.ОжидаемаяДатаВыплаты, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОжидаемаяДатаВыплаты";
	
	//	Если  массив.datestart <> неопределено и массив.dateend <> неопределено тогда
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(Дата(массив.datestart)));	
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Дата(массив.dateend)));	
	//КонецЕсли;
	
	ВыборкаПродаж = Запрос.Выполнить().Выбрать();
	
	
	МассивПродаж = Новый массив;
	Пока  ВыборкаПродаж.Следующий() Цикл
		СтруктураПродаж = новый Структура;
		СтруктураПродаж.Вставить("sum",Строка(ВыборкаПродаж.ИтогоРекв));
		СтруктураПродаж.Вставить("date",Строка(ВыборкаПродаж.ОжидаемаяДатаВыплаты)); 
		
		МассивПродаж.Добавить(СтруктураПродаж);
	КонецЦикла;
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("rasplan",МассивЗаявокНаРасход);
	СтруктураОтвета.Вставить("rasfact",МассивРасходов);
	СтруктураОтвета.Вставить("prihplan",МассивПродаж);
	СтруктураОтвета.Вставить("prihfact",МассивПоступленийДенег);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция ЕстьНаКСкладе(Номенклатура) 
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""%K-%""
	|			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО ""%К-%"")
	|	И ИндНомер.индкод.Владелец = &Владелец
	|	И РегистрНакопления1Остатки.КолвоОстаток > 0";
	
	Запрос.УстановитьПараметр("Владелец",Номенклатура);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ЕстьНаПолкеРВРВ(Номенклатура)  
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""K-2-11-1"")
	|	И ИндНомер.индкод.Владелец = &Владелец
	|	И РегистрНакопления1Остатки.КолвоОстаток > 0";
	
	Запрос.УстановитьПараметр("Владелец",Номенклатура);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе 
		Возврат 0;
	КонецЕсли;	
КонецФункции

Функция ПолучитьТоварыИзЗаявокgetstuffapp(Запрос)
	Запрос = Новый запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	СправочникНоменклатура.Код КАК Код,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	|	СправочникНоменклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО СправочникНоменклатура.Ссылка = РегистрНакопления1Остатки.Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Рейтинг
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_РейтингМесяц
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка.Дата >= &ДатаСреза
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод.Владелец КАК индкодВладелец,
	|	МАКСИМУМ(ИндНомер.АвитоЧастник) КАК АвитоЧастник
	|ПОМЕСТИТЬ ВТ_Проверка
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|	И НЕ ИндНомер.АвитоЧастник
	|
	|СГРУППИРОВАТЬ ПО
	|	ИндНомер.индкод.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод.Владелец КАК индкодВладелец,
	|	СУММА(ВЫБОР
	|			КОГДА ИндНомер.АвитоЧастник
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК АвитоЧастник
	|ПОМЕСТИТЬ ВТ_КоличествоОтконвейерненых
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|	И НЕ ИндНомер.АвитоЧастник
	|
	|СГРУППИРОВАТЬ ПО
	|	ИндНомер.индкод.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Код КАК Код,
	|	ВТ_Остатки.Артикул КАК Артикул,
	|	ВТ_Остатки.Ссылка КАК Наименование,
	|	ВТ_Остатки.КолвоОстаток КАК Остаток,
	|	ЗаказКлиентаТовары.Цена КАК Цена,
	|	ВТ_Рейтинг.Количество КАК Рейтинг,
	|	ВТ_РейтингМесяц.Количество КАК РейтингЗаМесяц,
	|	ВТ_Проверка.АвитоЧастник КАК Конвейер,
	|	ВТ_КоличествоОтконвейерненых.АвитоЧастник КАК КоличествоОтконвейерненых
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_Остатки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Рейтинг КАК ВТ_Рейтинг
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_Рейтинг.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РейтингМесяц КАК ВТ_РейтингМесяц
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_РейтингМесяц.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Проверка КАК ВТ_Проверка
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_Проверка.индкодВладелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоОтконвейерненых КАК ВТ_КоличествоОтконвейерненых
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_КоличествоОтконвейерненых.индкодВладелец
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка.Дата >= &ДатаСреза
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.Ссылка,
	|	ВТ_Остатки.Артикул,
	|	ВТ_Остатки.Код,
	|	ЗаказКлиентаТовары.Цена,
	|	ВТ_Остатки.КолвоОстаток,
	|	ВТ_Рейтинг.Количество,
	|	ВТ_РейтингМесяц.Количество,
	|	ВТ_Проверка.АвитоЧастник,
	|	ВТ_КоличествоОтконвейерненых.АвитоЧастник"; 
	
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(ТекущаяДата()-3600*24));
	Выборка = запрос.Выполнить().Выбрать();
	
	МассивТоваров = Новый Массив;
	Пока выборка.Следующий() Цикл
		МассивФото = Новый массив;
		Партия = ПолучитьРандомнуюПартию(выборка.Наименование);
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    	   Строка(выборка.Наименование));
		СтруктураТоваров.Вставить("article", 	   Строка(выборка.Артикул));
		СтруктураТоваров.Вставить("cost",   	   Строка(выборка.Цена));  
		СтруктураТоваров.Вставить("ost",     	   Строка(выборка.Остаток));  
		СтруктураТоваров.Вставить("rate",    	   Строка(выборка.Рейтинг));
		СтруктураТоваров.Вставить("rate_mounth",   Строка(выборка.РейтингЗаМесяц));
		СтруктураТоваров.Вставить("konv",   	   Строка(выборка.Конвейер));                                             
		СтруктураТоваров.Вставить("konv_count",    Строка(выборка.КоличествоОтконвейерненых));
		СтруктураТоваров.Вставить("code",    	   Строка(выборка.Код));
		СтруктураТоваров.Вставить("Indcode",       Строка(Партия)); 
		Если Партия <>  Справочники.ИндКод.ПустаяСсылка() Тогда
			МассивФото.Добавить(Строка(Партия));
			СтруктураТоваров.Вставить("photos",    	   ПолучениеФото(МассивФото));
			СтруктураТоваров.Вставить("place",         Строка(ПолучитьМесто(Партия))); 
		Иначе
			СтруктураТоваров.Вставить("photos",    	   МассивФото);
		КонецЕсли;
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);                        
		
	КонецЦикла;                              
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьРандомнуюПартию(Товар)
	
	///+ГомзМА 12.12.2023
	Результат = Справочники.ИндКод.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	ИндНомер.ЕстьФото
	|	И ИндНомер.индкод.Владелец = &Товар
	|	И ИндНомер.АвитоЧастник
	|	И РегистрНакопления1Остатки.КолвоОстаток > 0";
	
	Запрос.УстановитьПараметр("Товар", Товар);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		ГСЧ = Новый ГенераторСлучайныхЧисел;
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1, РезультатЗапроса.Количество());
		
		СтрокаТЗ = РезультатЗапроса[СлучайноеЧисло - 1];
		
		Результат = СтрокаТЗ.индкод;
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 12.12.2023
	
КонецФункции

Функция СоздатьЗадачуcreatework(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	Если число(Массив.level) = 1 тогда 
		оценка = Перечисления.ОценкаЗадач.Просто;
	Иначеесли число(Массив.level) = 2 тогда 
		оценка = Перечисления.ОценкаЗадач.Сложно;
	Иначеесли число(Массив.level) = 3 тогда
		оценка = Перечисления.ОценкаЗадач.Срочно;
	КонецЕсли;
	
	
	
	Новаязадача = Документы.Задача.СоздатьДокумент();
	
	Новаязадача.Наименование 	= Массив.name;  
	Новаязадача.Исполнитель   	= Справочники.Сотрудники.НайтиПоКоду(Массив.executor).Пользователь; 
	Новаязадача.Ответственный   = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;  
	Новаязадача.Проект   		= Справочники.ПроектыРазвития.НайтиПоКоду("000000016");
	Новаязадача.Описание   		= Массив.text; 
	Новаязадача.ОценкаЗадач   	= оценка;
	Новаязадача.ДатаНачалаПлан  = ТекущаяДата();
	Новаязадача.Дата = ТекущаяДата();
	
	Новаязадача.Записать();
	
	//	ТекстЛога =  " Создал продажу " + Новаязадача.номер ; 
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(Новаязадача.номер);
	//Иначе
	//	Ответ = Новый HTTPСервисОтвет(400);
	//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	//	Ответ.УстановитьТелоИзСтроки("Продажа уже есть!");
	//	ТекстЛога =  "Продажа уже есть! ";
	//	////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
	//КонецЕсли; 
	////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
	возврат Ответ;
КонецФункции

Функция ПодтвердитьЗаявкуacceptapplication(Запрос)
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Массив.id ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	ИндКод  = Массив.IndCode;
	Позиция = Число(Массив.Pose);
	Пока выборка.Следующий() Цикл
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект(); 
		Если  ОбъектЗаявки.Товары[Позиция-1].Партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод) Тогда
			ОбъектЗаявки.Товары[Позиция-1].Проверено = истина;	 
			ОбъектЗаявки.Записать();
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			
		Иначе
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Партия не верна!");
		КонецЕсли;
		
		ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил партию в товаре " + ОбъектЗаявки.Товары[Позиция-1].Номенклатура + " "+ ОбъектЗаявки.Товары[Позиция-1].Партия; 
		ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция КоличествоТоваровВКорзине(Тележка)  
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИндНомер.индкод) КАК Количество,
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж = &Стеллаж
	|
	|СГРУППИРОВАТЬ ПО
	|	ИндНомер.Стеллаж";
	Запрос.УстановитьПараметр("Стеллаж",Тележка);
	Выборка = запрос.Выполнить().Выбрать();
	
	Если выборка.Количество()>0 тогда
		Выборка.Следующий();
		Возврат выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМесто(Партия) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод",Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.стеллаж;
КонецФункции 

Функция ПолучитьПоддон(Партия) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.поддон КАК поддон
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод",Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.поддон;
КонецФункции  

Функция ПолучитьПолку(поддон) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Поддоны.Стеллаж КАК Стеллаж,
	|	Поддоны.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Поддоны КАК Поддоны
	|ГДЕ
	|	Поддоны.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование",поддон);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Стеллаж;
КонецФункции

Функция ПолучитьДокументСписания(user)
	Запрос = новый  Запрос;
	Запрос.Текст =   "ВЫБРАТЬ
	|	СписаниеЗапчастейТовары.Ссылка КАК Ссылка,
	|	СУММА(СписаниеЗапчастейТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.СписаниеЗапчастей.Товары КАК СписаниеЗапчастейТовары
	|ГДЕ
	|	СписаниеЗапчастейТовары.Ссылка.Ответственный = &Ответственный
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗапчастейТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеЗапчастейТовары.Ссылка.Дата УБЫВ";  
	
	Запрос.УстановитьПараметр("Ответственный",user);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		выборка.Следующий();
		Если Выборка.Количество < 100 Тогда
			Возврат Выборка.ссылка; 
		Иначе  
			возврат неопределено;
		КонецЕсли;
		
	Иначе 
		возврат неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьМашину(ИндКодДетали)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегистрНакопления1.машина КАК машина
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1
	|ГДЕ
	|	РегистрНакопления1.индкод = &индкод";
	Запрос.УстановитьПараметр("ИндКод",ИндКодДетали);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат выборка.машина;
КонецФункции

Функция ПолучитьМенеджера(Код)
	Возврат Справочники.Пользователи.НайтиПоКоду(Код);
КонецФункции

Функция получитьНомерТелефона(Юзер)
	
	Запрос = Новый запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|	И СотрудникиКонтактнаяИнформация.Ссылка.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь",Юзер);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 тогда
		Выборка.Следующий();
		возврат выборка.ТелефонСлужебный;
	Иначе Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ЗаявкиИТоварыGetApplication(Запрос)
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон("ВЫБРАТЬ
	|	ПродажаЗапчастей.ЗаказКлиента КАК ЗаказКлиента,
	|	ПродажаЗапчастейТаблица.Партия КАК Партия
	|ПОМЕСТИТЬ ВТ_Продажа
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|		ПО ПродажаЗапчастейТаблица.Ссылка = ПродажаЗапчастей.Ссылка
	|ГДЕ
	|	ПродажаЗапчастей.КтоПродал = &КтоПродал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100000
	|	ИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ИндНомер.Цена > 0
	|			ТОГДА ИндНомер.Цена
	|		ИНАЧЕ ИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	ИндНомер.Комментарий КАК Комментарий,
	|	ИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ИндНомер.индкод.Владелец.Подкатегория2 КАК Подкатегория2,
	|	ИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА ИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ИндНомер.Стеллаж
	|		ИНАЧЕ ИндНомер.индкод.Владелец.МестоНаСкладе2
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|ПОМЕСТИТЬ ВТ_данныеНоменклатуры
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	индкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатуры.Наименование КАК Наименование,
	|	ВТ_данныеНоменклатуры.Цена КАК Цена,
	|	ВТ_данныеНоменклатуры.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатуры.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатуры.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатуры.индкод КАК индкод,
	|	ВТ_данныеНоменклатуры.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатуры.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Продажа.Партия КАК Партия
	|ИЗ
	|	ВТ_Продажа КАК ВТ_Продажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_данныеНоменклатуры КАК ВТ_данныеНоменклатуры
	|		ПО (ВТ_данныеНоменклатуры.индкод = ВТ_Продажа.Партия)
	|ГДЕ
	|	ВТ_данныеНоменклатуры.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи", Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	//запросТовара.УстановитьПараметр("наименование", "%" +Запрос.ПараметрыURL["IndCode"]+"%" ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", ?(Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0,((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])),0));
	запросТовара.УстановитьПараметр("КтоПродал", ПолучитьМенеджера(Запрос.ПараметрыURL["UIN"])); 
	Выборка = запросТовара.Выполнить().Выбрать();
	
	
	МассивТоваров = Новый Массив;
	Пока выборка.Следующий() Цикл
		ПутьКФайлам = "C:\Users\admin\Nextcloud\Otdel_avito\Avito_chastnik\" + выборка.индкод;
		НайденныеФотки = НайтиФайлы(ПутьКФайлам, "*.jpg");
		//СтруктураКатегорий = Новый Структура;
		//СтруктураКатегорий.Вставить("Category1",Строка(выборка.Подкатегория2));
		//СтруктураКатегорий.Вставить("Category2",Строка(выборка.Родитель1));
		//СтруктураКатегорий.Вставить("Category3",Строка(выборка.Родитель2));
		//СтруктураКатегорий.Вставить("Category4",Строка(выборка.Родитель3));
		МассивФото = новый массив;
		Для каждого Фотка Из НайденныеФотки Цикл
			Текст = "";
			Текст =  "https://prod.worktruck.ru/image/" + выборка.индкод + "/" + Фотка.Имя ;
			МассивФото.Добавить(Текст);
		КонецЦикла;
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("Name",    Строка(выборка.Наименование));
		СтруктураТоваров.Вставить("Article", Строка(выборка.Артикул));
		СтруктураТоваров.Вставить("Cost",    Строка(выборка.Цена));
		СтруктураТоваров.Вставить("Comment", Строка(выборка.Комментарий));
		//СтруктураТоваров.Вставить("Category1",Строка(выборка.Подкатегория2));
		//СтруктураТоваров.Вставить("Category2",Строка(выборка.Родитель1));
		//СтруктураТоваров.Вставить("Category3",Строка(выборка.Родитель2));
		СтруктураТоваров.Вставить("place",    Строка(выборка.Адрес));
		
		СтруктураТоваров.Вставить("IndCode", Строка(выборка.индкод));
		СтруктураТоваров.Вставить("Photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

функция СписатьДетальDeleteProduct(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	ИндКод        = Справочники.ИндКод.НайтиПоНаименованию(Массив.id);
	Товар         = ИндКод.Владелец;
	Машина        = ПолучитьМашину(ИндКод);
	Комментарий   = Массив.coment;
	
	ССылкаСписания = ПолучитьСписание(Ответственный);
	Если ССылкаСписания <> неопределено тогда
		Объектсписания = ССылкаСписания.ПолучитьОбъект();
	Иначе
		Объектсписания  = Документы.СписаниеЗапчастей.СоздатьДокумент();
		Объектсписания.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 
		Объектсписания.дата = ТекущаяДата();  
		Объектсписания.Ответственный = Ответственный;
		Объектсписания.Организация = Справочники.Организация.НайтиПоКоду("000000005");
		Объектсписания.Записать();
	КонецЕсли;
	НоваястрокаСписания = Объектсписания.Товары.Добавить(); 
	
	НоваястрокаСписания.Номенклатура = Товар;
	НоваястрокаСписания.Инициатор    = Ответственный;
	НоваястрокаСписания.Количество   = 1; 
	НоваястрокаСписания.Партия       = ИндКод;
	НоваястрокаСписания.Автомобиль   = Машина;
	НоваястрокаСписания.Количество   = 1;
	НоваястрокаСписания.Комментарий  = Комментарий;
	
	Объектсписания.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("индкод", НоваястрокаСписания.Партия);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Списано. Удалено. Вычеркнуто.");
	Возврат Ответ;		
КонецФункции

Функция ПолучитьСписание(Ответственный)
	Запрос = новый  Запрос;
	Запрос.Текст =   "ВЫБРАТЬ
	|	СписаниеЗапчастейТаблица.Ссылка КАК Ссылка,
	|	СУММА(СписаниеЗапчастейТаблица.Количество) КАК товар
	|ИЗ
	|	Документ.СписаниеЗапчастей.Товары КАК СписаниеЗапчастейТаблица
	|ГДЕ
	|	 СписаниеЗапчастейТаблица.Ссылка.Ответственный = &Ответственный
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗапчастейТаблица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеЗапчастейТаблица.Ссылка.Дата УБЫВ";
	Запрос.УстановитьПараметр("Ответственный",Ответственный);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		выборка.Следующий();
		Если Выборка.товар < 100 Тогда
			Возврат Выборка.ссылка; 
		Иначе  
			возврат неопределено;
		КонецЕсли;
		
	Иначе 
		возврат неопределено;
	КонецЕсли;
КонецФункции


//Раздел не оконченных
функция ПроверкаСписания(Запрос) 
	//		Тело = Запрос.ПолучитьТелоКакстроку();
	//	ЧтениеJSON = Новый ЧтениеJSON();
	//	ЧтениеJSON.УстановитьСтроку(Тело);
	//	
	//	Массив = ПрочитатьJSON(ЧтениеJSON);
	//	user = Справочники.Сотрудники.НайтиПоКоду(Массив.user_id).Пользователь;
	//	
	//	Если user <> Справочники.Пользователи.ПустаяСсылка() Тогда
	//		ССылкаСписания = ПолучитьДокументСписания(user);
	//	Иначе 
	//		Ответ = Новый HTTPСервисОтвет(400);
	//		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	//		Ответ.УстановитьТелоИзСтроки("Пользователь не корректен!");
	//	Возврат Ответ;
	//	
	//	КонецЕсли;
	
	//	
	//	Если ССылкаСписания <> неопределено тогда
	//		ОбъектСписания = ССылкаСписания.ПолучитьОбъект();
	//		
	//		НоваяСтрока = ОбъектСписания.Товары.Добавить();
	//		
	//		НоваяСтрока.Партия = Справочники.ИндКод.НайтиПоНаименованию(Массив.id);
	//		НоваяСтрока.Номенклатура = товар; 
	//		НоваяСтрока.Автомобиль = Машина;
	//		НоваяСтрока.Колво = 1;
	//		НоваяСтрока.Инициатор = user;
	//		
	//		ОбъектСписания.Записать(РежимЗаписиДокумента.Проведение); 
	//		
	//		//ОбъектСписания = ССылкаСписания.ПолучитьОбъект();
	//		//ОбъектСписания.Записать();
	//	Иначе 
	//		Ответ = Новый HTTPСервисОтвет(200);
	//		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	//		Ответ.УстановитьТелоИзСтроки("1");
	//		Возврат Ответ;
	//		
	//	КонецЕсли;   
	//		
Конецфункции  

функция СписаниеДетали(док,деталь)
	//	user = Справочники.Сотрудники.НайтиПоКоду(Массив.user_id).Пользователь;
	//		
	//	ССылкаСписания = ПолучитьДокументСписания(user);
	//	Если ССылкаСписания <> неопределено тогда
	//		ОбъектСписания = ССылкаСписания.ПолучитьОбъект();
	//		ОбъектСписания.Записать();
	//	Иначе
	//		Организация = Справочники.Организация.НайтиПоКоду(Массив.org);
	//		ОбъектСписания  = Документы.СписаниеЗапчастей.СоздатьДокумент();
	//		ОбъектСписания.Ответственный = Пользователи.ТекущийПользователь();
	//		ОбъектСписания.Организация = Организация; 
	//		ОбъектСписания.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 
	//		ОбъектСписания.дата = ТекущаяДата();
	//		ОбъектСписания.Записать();
	//	КонецЕсли;   
	//	
	//	НоваяСтрока = ОбъектСписания.Товары.Добавить();
	//	
	//	НоваяСтрока.Партия = Справочники.ИндКод.НайтиПоНаименованию(Массив.id);
	//	НоваяСтрока.Номенклатура = товар; 
	//	НоваяСтрока.Автомобиль = Машина;
	//	НоваяСтрока.Колво = 1;
	//	НоваяСтрока.Инициатор = user;
	//	
	//	ОбъектСписания.Записать(РежимЗаписиДокумента.Проведение); 
КонецФункции


Функция СменаРеквизитовТовараEditList(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

Функция СменаCтатусаТоваровВЗНchangestateorder(Запрос)
	
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаказНаряда2();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	тип   = Массив.type;
	Позиция = Число(Массив.pose);
	Автор 	= Массив.author;
	//партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	//
	//Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	//Отбор = Новый Структура();
	//Отбор.Вставить("Номенклатура", Номенклатура);
	//Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	
	Пока выборка.Следующий() Цикл
		Если выборка.Состояние = Перечисления.СостоянияЗаказНаряда.Выполнен Тогда
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Наряд закрыт!");
			Возврат Ответ;	
			
		КонецЕсли;
		
		ОбъектНаряда = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		//НайденныеСтроки = ОбъектНаряда.Товары.НайтиСтроки(Отбор);
		//Если НайденныеСтроки.количество() > 0 Тогда
		Попытка
			СтрокаТЧ = ОбъектНаряда.Товары[Позиция-1];  
			//СтрокаТЧ.партия = партия; 
			//СтрокаТЧ.Автомобиль = ПолучитьМашину(партия);
			СтрокаТЧ.Склад = Справочники.Склады.НайтиПоКоду("000000002");
			Если  тип = 0  Тогда
			СтрокаТЧ.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.НетВНаличии;
			ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " сменил статус в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 
		ИначеЕсли тип = 1 тогда
			СтрокаТЧ.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Установлена;
			ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " сменил статус в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 

		КонецЕсли;
		
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
			//Иначе
		Исключение
			///Если  Не ОбъектНаряда.ЗаблокироватьТЧТовары Тогда
			//	
			//	Новаястрока = ОбъектНаряда.Товары.Добавить();
			//	Новаястрока.Партия = партия;
			//	Новаястрока.Номенклатура = Номенклатура; 
			//	Новаястрока.Количество = 1;
			//	Новаястрока.Автомобиль = ПолучитьМашину(партия);
			//	Новаястрока.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Выдано;
			//	Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
			//	Новаястрока.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 	
			//	
			//	ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + Новаястрока.Номенклатура + " "+ Новаястрока.Партия; 
			//	ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			//	ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение); 
			//	
			//	Ответ = Новый HTTPСервисОтвет(200);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Успех");
			//	Возврат Ответ;
			//Иначе
			//	Ответ = Новый HTTPСервисОтвет(400);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Заказ-наряд закрыт!");
			//	Возврат Ответ;	
			//КонецЕсли; 
			
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Не удалось сменить статус товара!");
			Возврат Ответ;
			//КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не верные данные");
	Возврат Ответ;
	
КонецФункции





