
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьГрузоперевозки = ПолучитьФункциональнуюОпцию("дт_ИспользоватьГрузоперевозки");
	ИспользоватьРазборку = ПолучитьФункциональнуюОпцию("дт_ИспользоватьРазборку");
	
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьСписки(); 
	
	//Волков ИО 07.02.24 ++
	ОбновитьИзображение();
	//Волков ИО 07.02.24 --
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзображение()
	
	СсылкаНаФотоАвто = ПолучитьНавигационнуюСсылку(Объект.Ссылка,"Фото");    
	Элементы.СсылкаНаФотоАвто.РазмерКартинки = РазмерКартинки.АвтоРазмер;   
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьСписки();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьСписки();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипТСПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТипТС) Тогда
		ТипТСПриИзмененииСервер();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТипТСПриИзмененииСервер()
	
	Объект.ЭтоПрицеп = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипТС, "ЭтоПрицеп");	
	
КонецПроцедуры // ТипТСПриИзмененииСервер()


&НаКлиенте
Процедура МаркаТСПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.МаркаТС) Тогда
		МаркаТСПриИзмененииСервер();	
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура МаркаТСПриИзмененииСервер()
	Объект.ТипТС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МаркаТС, "Владелец");
	ТипТСПриИзмененииСервер();
КонецПроцедуры // МаркаТСПриИзмененииСервер()

&НаКлиенте
Процедура ЭтоПрицепПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_История

&НаКлиенте
Процедура ИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = История.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Ссылка) Тогда
			Оповещение = Новый ОписаниеОповещения("ОбновитьИсторию", ЭтаФорма, ТекСтрока.Ссылка);
			ПоказатьЗначение(Оповещение, ТекСтрока.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьИсторию(Парам1, Парам2) Экспорт
	ПолучитьИсторию();
КонецПроцедуры // ОбновитьИсторию()


#КонецОбласти

#Область ОбработчикиКомандФормы



#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	Элементы.ЭтоПрицеп.Доступность = НЕ ЗначениеЗаполнено(Объект.ТипТС);
	//Элементы.ТипТС.Видимость = Форма.ИспользоватьРазборку;
	
	Элементы.МаркаТС.АвтоОтметкаНезаполненного = Форма.ИспользоватьГрузоперевозки;
	
	Элементы.ГруппаИстория.Видимость = Форма.ИспользоватьГрузоперевозки;
	
	
	ЭлементыАвтомобиля = Новый Массив();
	ЭлементыАвтомобиля.Добавить("ГруппаСцепки");
	ЭлементыАвтомобиля.Добавить("ПоказаниеОдометраНаНачалоЭксплуатации");
	ЭлементыАвтомобиля.Добавить("Водитель");
	
	Для каждого Элемент Из ЭлементыАвтомобиля Цикл
		Элементы[Элемент].Видимость = НЕ Объект.ЭтоПрицеп;	
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьДоступность()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ОбновитьСписки()
	
	ПолучитьИсторию();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокСцепки, 
	"Автомобиль", 
	Объект.Ссылка, // Значение отбора
	ВидСравненияКомпоновкиДанных.Равно,,Истина);
	
	
КонецПроцедуры // ОбновитьСписки()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПолучитьИсторию()
	
	Если НЕ ИспользоватьГрузоперевозки Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		История.Очистить();
		ИсторияКоличество = 0;
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказанияОдометра.Период КАК Период,
	|	ПоказанияОдометра.Регистратор КАК Регистратор,
	|	ПоказанияОдометра.Показание КАК Показание
	|ПОМЕСТИТЬ ВТ_Пробег
	|ИЗ
	|	РегистрСведений.ПоказанияОдометра КАК ПоказанияОдометра
	|ГДЕ
	|	ПоказанияОдометра.Автомобиль = &Автомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Пробег.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_МаршрутныеЛисты
	|ИЗ
	|	ВТ_Пробег КАК ВТ_Пробег
	|ГДЕ
	|	ВТ_Пробег.Регистратор ССЫЛКА Документ.МаршрутныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Пробег.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛистМаршрут.Ссылка КАК Ссылка,
	|	МаршрутныйЛистМаршрут.ЗаказНаДоставку.Состояние КАК Состояние,
	|	ЕСТЬNULL(СостоянияЗаказаНаДоставку.Порядок, 99) КАК СостояниеПорядок
	|ПОМЕСТИТЬ ВТ_СостоянияЗаказов
	|ИЗ
	|	Документ.МаршрутныйЛист.Маршрут КАК МаршрутныйЛистМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаршрутныеЛисты КАК ВТ_МаршрутныеЛисты
	|		ПО МаршрутныйЛистМаршрут.Ссылка = ВТ_МаршрутныеЛисты.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.СостоянияЗаказаНаДоставку КАК СостоянияЗаказаНаДоставку
	|		ПО МаршрутныйЛистМаршрут.ЗаказНаДоставку.Состояние = СостоянияЗаказаНаДоставку.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СостоянияЗаказов.Ссылка КАК Ссылка,
	|	МИНИМУМ(ВТ_СостоянияЗаказов.СостояниеПорядок) КАК СостояниеПорядок
	|ПОМЕСТИТЬ ВТ_СостоянияЗаказовМин
	|ИЗ
	|	ВТ_СостоянияЗаказов КАК ВТ_СостоянияЗаказов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СостоянияЗаказов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СостоянияЗаказов.Ссылка КАК Ссылка,
	|	ВТ_СостоянияЗаказов.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТ_СостоянияМаршрутныхЛистов
	|ИЗ
	|	ВТ_СостоянияЗаказов КАК ВТ_СостоянияЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СостоянияЗаказовМин КАК ВТ_СостоянияЗаказовМин
	|		ПО ВТ_СостоянияЗаказов.СостояниеПорядок = ВТ_СостоянияЗаказовМин.СостояниеПорядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Пробег.Регистратор КАК Регистратор,
	|	МИНИМУМ(ВТ_Пробег.Показание) КАК Показание
	|ПОМЕСТИТЬ ВТ_МинПоказанияРегистраторов
	|ИЗ
	|	ВТ_Пробег КАК ВТ_Пробег
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Пробег.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Пробег.Период КАК Дата,
	|	ВТ_Пробег.Регистратор КАК Регистратор,
	|	ВТ_Пробег.Показание КАК Пробег,
	|	ВЫБОР
	|		КОГДА ВТ_Пробег.Регистратор ССЫЛКА Документ.МаршрутныйЛист
	|			ТОГДА ЕСТЬNULL(ВТ_СостоянияМаршрутныхЛистов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказаНаДоставку.ПустаяСсылка))
	|		ИНАЧЕ ВТ_Пробег.Регистратор.Состояние
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА ВТ_Пробег.Регистратор ССЫЛКА Документ.ЗаявкаНаОбслуживание
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Пробег.Регистратор.СуммаДокумента
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВТ_Пробег.Регистратор ССЫЛКА Документ.ЗаявкаНаОбслуживание
	|			ТОГДА ЕСТЬNULL(ЗаявкаНаОбслуживание.Описание, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Событие,
	|	ВЫБОР
	|		КОГДА ВТ_Пробег.Регистратор ССЫЛКА Документ.ЗаявкаНаОбслуживание
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Множитель
	|ИЗ
	|	ВТ_Пробег КАК ВТ_Пробег
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МинПоказанияРегистраторов КАК ВТ_МинПоказанияРегистраторов
	|		ПО ВТ_Пробег.Регистратор = ВТ_МинПоказанияРегистраторов.Регистратор
	|			И ВТ_Пробег.Показание = ВТ_МинПоказанияРегистраторов.Показание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаОбслуживание КАК ЗаявкаНаОбслуживание
	|		ПО ВТ_Пробег.Регистратор = ЗаявкаНаОбслуживание.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияМаршрутныхЛистов КАК ВТ_СостоянияМаршрутныхЛистов
	|		ПО ВТ_Пробег.Регистратор = ВТ_СостоянияМаршрутныхЛистов.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Машины.Дата,
	|	NULL,
	|	Машины.ПоказаниеОдометраНаНачалоЭксплуатации,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказаНаДоставку.Выполнен),
	|	Машины.Сумма,
	|	""Покупка"",
	|	-1
	|ИЗ
	|	Справочник.Машины КАК Машины
	|ГДЕ
	|	Машины.Ссылка = &Автомобиль
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пробег,
	|	Дата";
	
	Запрос.УстановитьПараметр("Автомобиль", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаИстория = РезультатЗапроса.Выгрузить();
	
	ТипЗаявкаНаОбслуживание = Тип("ДокументСсылка.ЗаявкаНаОбслуживание");
	Для каждого СтрокаТаблицы Из ТаблицаИстория Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Событие)
			И ТипЗнч(СтрокаТаблицы.Регистратор) <> ТипЗаявкаНаОбслуживание Тогда
			СтрокаТаблицы.Событие = Строка(СтрокаТаблицы.Регистратор);
		КонецЕсли;
		
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма * СтрокаТаблицы.Множитель;
		
	КонецЦикла;	
	
	
	ПлановыеРемонты = дт_Грузоперевозки.ПолучитьТаблицуПлановыхРемонтов(Объект.Ссылка, ТекущаяДата());
	Если ПлановыеРемонты <> Неопределено Тогда
		Для каждого СтрокаТаблицы Из ПлановыеРемонты Цикл
			
			НоваяСтрока = ТаблицаИстория.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.Событие = "Плановый: " + СтрокаТаблицы.ВидОбслуживания;
			НоваяСтрока.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказаНаДоставку.Предварительный");
			
		КонецЦикла;
	КонецЕсли;
	
	История.Загрузить(ТаблицаИстория);
	ИсторияКоличество = История.Количество();
	
КонецПроцедуры // ПолучитьИсторию()

&НаКлиенте
Процедура СсылкаНаФотоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	Режим = РежимДиалогаВыбораФайла.Открытие; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.ПолноеИмяФайла = ""; 
	//Волков ИО 28.02.24 ++ 
	//Фильтр = "Фото Автомобиля (*.png,*.jpg)|*.png;*.jpg";
	Фильтр = "Фото Автомобиля (*.PNG) | *.PNG";  
	//Волков ИО 28.02.24 --
	ДиалогОткрытия.Фильтр = Фильтр; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Выберете файл для загрузки"; 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗагрузкиФайла",ЭтаФорма); 
	ДиалогОткрытия.Показать(ОписаниеОповещения);	
	
КонецПроцедуры


&НаКлиенте 
Процедура ПослеЗагрузкиФайла(ВыбранныйФайл,ДопПараметр) Экспорт 
	Если ВыбранныйФайл = Неопределено Тогда 
		Возврат; 
	КонецЕсли; 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПомещенияФайла", ЭтаФорма); 
	НачатьПомещениеФайла(ОписаниеОповещения,, ВыбранныйФайл[0], Ложь, УникальныйИдентификатор); 
КонецПроцедуры

&НаКлиенте 
Процедура ПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла,ДопПараметры) Экспорт 
	Если Не Результат Тогда 
		Возврат; 
	КонецЕсли; 
	СсылкаНаФотоАвто = Адрес; 
	Модифицированность = Истина; 
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		Если ЭтоАдресВременногоХранилища(СсылкаНаФотоАвто)  Тогда 
		ФайлФото = ПолучитьИзВременногоХранилища(СсылкаНаФотоАвто); 
		ТекущийОбъект.Фото = Новый ХранилищеЗначения(ФайлФото); 
		УдалитьИзВременногоХранилища(СсылкаНаФотоАвто); 
		СсылкаНаФотоАвто = ПолучитьНавигационнуюСсылку(Объект.Ссылка,"Фото"); 
	КонецЕсли;

КонецПроцедуры

#КонецОбласти