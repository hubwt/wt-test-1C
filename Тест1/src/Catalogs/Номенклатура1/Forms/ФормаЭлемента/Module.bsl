//#Область ОбработчикиСобытийФормы

//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	
//	// Форма спецификации открывается в разных режимах. Это зависит от места откуда была открыта форма спецификации:
//	// - если форма была открыта из номенклатуры (по гиперссылке в карточке номенклатуры или из списка спецификаций номенклатуры),
//	//   то форма откроется в режиме Блокировка владельца, чтобы было понятно, к какой продукции она относится.
//	// - если форма была открыта из общего списка спецификации, то режим открытия будет Независимый. 
//	//   Продукция, к которой она относится, отображается на форме.
//	
//	// СтандартныеПодсистемы.ПодключаемыеКоманды
//	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
//	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
//	
//	
//	// СтандартныеПодсистемы.ВерсионированиеОбъектов
//	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
//	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
//	
//	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Объект.НаименованиеПолное,Объект.Наименование);
//	
//	// Обработчик подсистемы "Свойства"
//	ДополнительныеПараметры = Новый Структура;
//	ДополнительныеПараметры.Вставить("Объект", Объект);
//	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
//	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
//	
//	Если Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Параметры.ТекстЗаполнения) И ПустаяСтрока(Объект.НаименованиеПолное) Тогда
//		Объект.НаименованиеПолное = Объект.Наименование;
//	КонецЕсли;
//	
//	Если Параметры.Ключ.Пустая()
//		И Параметры.Свойство("АлкогольнаяПродукцияЕГАИС")
//		И ЗначениеЗаполнено(Параметры.АлкогольнаяПродукцияЕГАИС) Тогда
//		
//		Объект.Наименование       = Параметры.НаименованиеНоменклатурыЕГАИС;
//		Объект.НаименованиеПолное = Параметры.ПолноеНаименованиеНоменклатурыЕГАИС;
//		
//		Если ЗначениеЗаполнено(Параметры.ИмпортерЕГАИС) Тогда
//			ИмпортерЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ИмпортерЕГАИС, "Контрагент");
//			Если ТипЗнч(ИмпортерЕГАИС) = Тип("СправочникСсылка.Контрагенты") Тогда
//				Объект.Импортер = ИмпортерЕГАИС;
//			КонецЕсли;
//		КонецЕсли;
//		Если ЗначениеЗаполнено(Параметры.ПроизводительЕГАИС) Тогда
//			ПроизводительЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПроизводительЕГАИС, "Контрагент");
//			Если ТипЗнч(ПроизводительЕГАИС) = Тип("СправочникСсылка.Контрагенты") Тогда
//				Объект.Производитель = ПроизводительЕГАИС;
//			КонецЕсли;
//		КонецЕсли;
//		
//		ЗаполнитьСведенияОбАлкогольнойПродукции = Истина;
//		Если ЗначениеЗаполнено(Параметры.ВидАлкогольнойПродукцииЕГАИС) Тогда
//			ВидАлкогольнойПродукцииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ВидАлкогольнойПродукцииЕГАИС, "Код, Наименование, Маркируемый");
//			КодВидаАлкогольнойПродукции = ВидАлкогольнойПродукцииЕГАИС.Код;
//			НаименованиеВидаАлкогольнойПродукции = ВидАлкогольнойПродукцииЕГАИС.Наименование;
//			ВидЛицензииАлкогольнойПродукции = ?(ВидАлкогольнойПродукцииЕГАИС.Маркируемый, 
//				Перечисления.ВидыЛицензийНаПродажуАлкоголя.АлкогольнаяПродукция, 
//				Перечисления.ВидыЛицензийНаПродажуАлкоголя.Пиво);
//		КонецЕсли;
//			
//		КоэффПересчетаДал = Параметры.ОбъемЕГАИС;
//		
//	КонецЕсли;
//	
//	Если Параметры.ЗначенияЗаполнения.Свойство("Услуга") Тогда
//		
//		НовыйПараметр = Новый ПараметрВыбора("Отбор.Услуга", Параметры.ЗначенияЗаполнения.Услуга);
//		НовыйМассив = Новый Массив();
//		НовыйМассив.Добавить(НовыйПараметр);
//		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
//		Элементы.ВидНоменклатуры.ПараметрыВыбора = НовыеПараметры;
//		
//	КонецЕсли;
//	
//	Если Объект.Услуга Тогда
//		Объект.СтатьяЗатрат = Неопределено;
//		ОсновнойВидНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойВидНоменклатурыУслуга");
//	Иначе
//		ОсновнойВидНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойВидНоменклатуры");
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
//		ВидНоменклатурыПриИзмененииНаСервере();
//	КонецЕсли;
//	
//	Элементы.СтатьяЗатрат.Видимость = ПравоДоступа("Чтение", Метаданные.Справочники.СтатьиЗатрат);
//	
//	ИспользуетсяПростойИнтерфейс = ОбщегоНазначенияБПВызовСервера.ЭтоПростойИнтерфейс();
//	
//	ИспользуютсяНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладовБухгалтерскийУчет")
//		И ВедетсяСкладскойУчет();
//		
//	ПрочитатьСрокиИспользованияСпецодежды();
//	
//	РаздельныйУчетНДС = УчетНДСРаздельный.ЕстьУчетнаяПолитикаСРаздельнымУчетомНДС();
//	ВИсторииЕстьСтавкаБезНДС = Справочники.Номенклатура.ВИсторииЕстьСтавкаБезНДС(Объект.Ссылка);
//	ЕстьИсторияВидовСтавокНДС = Справочники.Номенклатура.ЕстьИсторияВидовСтавокНДС(Объект.Ссылка);
//	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
//	АктуальнаяСтавкаНДС = Справочники.Номенклатура.СтавкаНДС(Объект.Ссылка, ТекущаяДатаПользователя);
//	
//	ЗаполнитьПолеНаименованияКода("ОКВЭД");
//	ЗаполнитьПолеНаименованияКода("ОКВЭД2");
//	ЗаполнитьПолеНаименованияКода("ТНВЭД");
//	ЗаполнитьПолеНаименованияКода("ОКП");
//	ЗаполнитьПолеНаименованияКода("ОКПД2");
//	ЗаполнитьПолеНаименованияКода("НоменклатурнойКлассификацииККТ");
//	
//	ПоказатьДополнительныеРеквизитыПоПрослеживаемости();
//	УстановитьУчетПодконтрольнойПродукции();
//	
//	Элементы.ГруппаЭлектронныеСертификаты.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуСертификатамиНСПК");
//	
//	УправлениеФормой(ЭтаФорма);
//	
//	УстановитьУсловноеОформление();
//	
//	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
//	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
//	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
//		ЭтаФорма,
//		"БП.Справочник.Номенклатура",
//		"ФормаЭлемента",
//		НСтр("ru='Новости: Номенклатура'"),
//		ИдентификаторыСобытийПриОткрытии
//	);
//	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
//	
//	НастроитьЭлементыУправленияЦенойПродажи();
//	ЗаполнитьПодсказкуПечатиАртикула();
//	
//	Если Объект.Ссылка.Пустая() Тогда
//		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
//		ВалютаЦены         = ВалютаРегламентированногоУчета;
//		ВалютыЦеныБезВалют = ВалютаРегламентированногоУчета;
//		
//		ОтобразитьОсновнуюСпецификацию();
//		
//	КонецЕсли;
//	
//	НастройкиУчетаМСФО.НастроитьФормуОбъектаУчета(ЭтотОбъект, Отказ, СтандартнаяОбработка);
//	
//	Элементы.СтавкаНДС.РежимВыбораИзСписка = Истина;
//	Элементы.СтавкаНДС.СписокВыбора.Очистить();
//	Для Каждого ЗначениеПеречисления Из Перечисления.ВидыСтавокНДС Цикл
//		Элементы.СтавкаНДС.СписокВыбора.Добавить(ЗначениеПеречисления,
//			Строка(Перечисления.СтавкиНДС.СтавкаНДС(ЗначениеПеречисления, ТекущаяДатаПользователя)));
//	КонецЦикла;
//		
//	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
//	СопоставлениеНоменклатурыКонтрагентов.ПриСозданииФормыНоменклатуры(ЭтотОбъект);
//	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
//	
//	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	НастроитьЭлементыУправленияРаботаСНоменклатурой();
//	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПриЧтенииНаСервере(ТекущийОбъект)
//	
//	// СтандартныеПодсистемы.Свойства
//	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
//	// Конец СтандартныеПодсистемы.Свойства
//	
//	ПолучитьЗначениеЦеныПродажи();
//	ОтобразитьОсновнуюСпецификацию();
//	
//	// СтандартныеПодсистемы.ПодключаемыеКоманды
//	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
//	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
//	
//	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	РаботаСНоменклатурой.ПерезаполнитьВстроенныеРеквизиты(ЭтотОбъект);
//	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//			
//	ЗаписатьИзменениеЦеныВРегистр(ТекущийОбъект);	
//	ЗаписатьШтрикходыНоменклатуры(ТекущийОбъект);
//	ЗаписатьСрокИспользованияНоменклатуры(ТекущийОбъект);
//	
//	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	РаботаСНоменклатурой.ПриЗаписиНаСервереФормаНоменклатуры(ЭтотОбъект, ТекущийОбъект, Отказ);
//	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//	
//	// Обработчик подсистемы "Свойства"
//	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
//	
//	Если Не ТекущийОбъект.ЭтоНовый() Тогда
//		НаименованиеДоИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Наименование");
//		ПараметрыЗаписи.Вставить("НаименованиеДоИзменения", НаименованиеДоИзменения);
//		// Для передачи в ИсправитьНаименованиеСпецификации() - см. ПослеЗаписиНаСервере()
//	КонецЕсли;
//	
//	ТекущийОбъект.ПодконтрольнаяПродукцияВЕТИС = (ГосударственныйКонтроль = "ВЕТИС") ИЛИ (ГосударственныйКонтроль = "МолочнаяПродукцияПодконтрольнаяВЕТИС");
//	ТекущийОбъект.ТабачнаяПродукция            = ГосударственныйКонтроль = "МОТП";
//	ТекущийОбъект.ОбувнаяПродукция             = ГосударственныйКонтроль = "ОбувнаяПродукция";
//	ТекущийОбъект.ПродукцияМаркируемаяДляГИСМ  = ГосударственныйКонтроль = "ГИСМ";
//	ТекущийОбъект.ЛегкаяПромышленность         = ГосударственныйКонтроль = "ЛегкаяПромышленность";
//	ТекущийОбъект.МолочнаяПродукцияПодконтрольнаяВЕТИС = ГосударственныйКонтроль = "МолочнаяПродукцияПодконтрольнаяВЕТИС";
//	ТекущийОбъект.МолочнаяПродукцияБезВЕТИС    = ГосударственныйКонтроль = "МолочнаяПродукцияБезВЕТИС";
//	ТекущийОбъект.Шины                         = ГосударственныйКонтроль = "Шины";
//	ТекущийОбъект.АльтернативныйТабак          = ГосударственныйКонтроль = "АльтернативныйТабак";
//	ТекущийОбъект.УпакованнаяВода              = ГосударственныйКонтроль = "УпакованнаяВода";
//	ТекущийОбъект.Духи                         = ГосударственныйКонтроль = "Духи";
//	ТекущийОбъект.Фотоаппараты                 = ГосударственныйКонтроль = "Фотоаппараты";
//	ТекущийОбъект.Велосипеды                   = ГосударственныйКонтроль = "Велосипеды";
//	ТекущийОбъект.КреслаКоляски                = ГосударственныйКонтроль = "КреслаКоляски";
//	ТекущийОбъект.СредствоИндивидуальнойЗащиты = ГосударственныйКонтроль = "СИЗ";
//	ТекущийОбъект.Антисептики 				   = ГосударственныйКонтроль = "Антисептики";
//	ТекущийОбъект.БАДы                         = ГосударственныйКонтроль = "БАДы";
//	ТекущийОбъект.НикотиносодержащаяПродукция  = ГосударственныйКонтроль = "НикотиносодержащаяПродукция";
//	ТекущийОбъект.Пиво                         = ГосударственныйКонтроль = "Пиво";
//	ТекущийОбъект.ПрослеживаемыйТовар          = ГосударственныйКонтроль = "ПрослеживаемыйТовар";
//	ТекущийОбъект.ПрослеживаемыйКомплект       = ГосударственныйКонтроль = "ПрослеживаемыйКомплект";

//	Если НЕ ТекущийОбъект.СредствоИндивидуальнойЗащиты 
//		И ЗначениеЗаполнено(ТекущийОбъект.КодНоменклатурнойКлассификацииККТ) Тогда
//		
//		ТекущийОбъект.КодНоменклатурнойКлассификацииККТ = Неопределено;
//	КонецЕсли; 

//КонецПроцедуры

//&НаКлиенте
//Процедура ПриОткрытии(Отказ)
//	
//	// СтандартныеПодсистемы.Свойства
//	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
//	// Конец СтандартныеПодсистемы.Свойства
//	
//	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
//	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
//	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
//	
//	// СтандартныеПодсистемы.ПодключаемыеКоманды
//	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
//	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
//	
//	Если ИспользоватьПодключаемоеОборудование Тогда
//		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
//		
//		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
//			Неопределено,
//			ЭтотОбъект,
//			ПоддерживаемыеТипыПодключаемогоОборудования);
//	КонецЕсли;
//	
//	Если Не ПустаяСтрока(ИдентификаторСервиса) Тогда
//		ДанныеОбъекта = Новый Структура("Идентификатор", ИдентификаторСервиса);
//		ПодготовитьПараметрыЗаполненияФормыНоменклатуры(ДанныеОбъекта);
//	КонецЕсли;
//	
//	Если ИспользуетсяПростойИнтерфейс
//		И Не Параметры.Ключ.Пустая()
//		И Не Объект.Услуга Тогда
//		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСведенияОбОстатке", 0.1, Истина);
//	КонецЕсли;

//КонецПроцедуры

//&НаКлиенте
//Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
//	
//	// Подсистема "Свойства"
//	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
//		ОбновитьЭлементыДополнительныхРеквизитов();
//		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
//	КонецЕсли;

//	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
//	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
//	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
//	
//	Если ИмяСобытия = "ФормаНастройкаЦеныПродажиИзменена" или ИмяСобытия = "Запись_НаборКонстант" Тогда
//		
//		ИзменениеНастройкиЦеныПродажи();
//		
//	ИначеЕсли ИмяСобытия = "НазначенаПоКнопкеОсновнаяСпецификацияВСпискеСпецификаций" Тогда
//		
//		// Спецификация может быть назначена основной из списка спецификаций, открытого в подчиненной форме.
//		// Информация об основной спецификации хранится в справочнике Номенклатура.
//		// Однако, непосредственно из списка спецификаций менять элемент номенклатуры не следует,
//		// так как это может привести к выдаче пользователю непонятного ему сообщения 
//		// "Данные были изменены другим пользователем".
//		// Поэтому список посылает оповещение форме номенклатуры, которая записывает сама себя.
//		Если Параметр.Номенклатура = Объект.Ссылка Тогда
//			УстановитьОсновнуюСпецификацию(Параметр.ОсновнаяСпецификация);
//			ОповеститьОбИзменении(Параметр.ОсновнаяСпецификация);
//		КонецЕсли;
//		
//	ИначеЕсли ИмяСобытия = "ЗаписанаСпецификацияНоменклатуры" Тогда
//		
//		Если Параметр.Свойство("НоменклатураПредыдущийВладелец") Тогда
//			
//			Если Параметр.НоменклатураВладелец = Объект.Ссылка Или Параметр.НоменклатураПредыдущийВладелец  = Объект.Ссылка Тогда
//				
//				Если Не Модифицированность Тогда 
//					Прочитать();
//				Иначе
//					
//					// Записать изменения уже нельзя.
//					// Предотвратим возможность выполнить явно бесполезные действия,
//					// но оставим возможность скопировать введенные данные в буфер обмена.
//					
//					Если Параметр.НоменклатураПредыдущийВладелец  = Объект.Ссылка Тогда
//						Объект.ОсновнаяСпецификацияНоменклатуры = Неопределено;
//					Иначе
//						Объект.ОсновнаяСпецификацияНоменклатуры = Параметр.ИзмененнаяСпецификация;
//					КонецЕсли;
//					
//					ОтобразитьОсновнуюСпецификацию();
//					
//				КонецЕсли;
//				
//			КонецЕсли;
//				
//		ИначеЕсли Параметр.НоменклатураВладелец = Объект.Ссылка Тогда
//			
//			// Вызывается, в двух случаях
//			// 1. редактируем новую (первую) спецификацию - и записали ее
//			// 2. изменили состав спецификации
//			
//			Если Не ЗначениеЗаполнено(Объект.ОсновнаяСпецификацияНоменклатуры) Тогда
//				// записали новую
//				УстановитьОсновнуюСпецификацию(Параметр.ИзмененнаяСпецификация);
//				ОповеститьОбИзменении(Параметр.ИзмененнаяСпецификация);
//			ИначеЕсли Объект.ОсновнаяСпецификацияНоменклатуры = Параметр.ИзмененнаяСпецификация Тогда
//				// изменили состав существующей
//				ОсновнаяСпецификацияПредставление = Параметр.СпецификацияПредставление;
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	Если ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().ЗагрузкаНоменклатуры
//		ИЛИ ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().СопоставлениеНоменклатуры Тогда
//		
//		ПерезаполнитьВстроенныеРеквизиты();
//	КонецЕсли;
//	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	
//	// ПодключаемоеОборудование
//	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Элементы.ГруппаЗаполнениеПоДаннымСервиса.Видимость Тогда
//		Если ИмяСобытия = "ScanData" Тогда
//			ДанныеСоСканера = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
//			Если ДанныеСоСканера.Количество() > 0 Тогда
//				НайтиЗаполнитьПоШтрихкоду(ДанныеСоСканера[0]);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	// Конец ПодключаемоеОборудование
//	
//КонецПроцедуры

//&НаСервере
//Процедура УстановитьОсновнуюСпецификацию(ИзмененнаяСпецификация)
//	
//	Объект.ОсновнаяСпецификацияНоменклатуры = ИзмененнаяСпецификация;
//	Записать();
//	ОсновнаяСпецификацияПредставление = УправлениеПроизводством.ПредставлениеОсновнойСпецификации(ИзмененнаяСпецификация);
//	
//КонецПроцедуры

//&НаСервере
//Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
//	
//	Если ГосударственныйКонтроль = "СИЗ" 
//		И НЕ ЗначениеЗаполнено(Объект.КодНоменклатурнойКлассификацииККТ) Тогда
//	
//		СообщениеОбОшибке = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Код СИЗ'"));
//		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, , "КодНоменклатурнойКлассификацииККТ", "Объект", Отказ);
//	КонецЕсли; 
//	
//	Если ГосударственныйКонтроль = "ПрослеживаемыйТовар" 
//		И НЕ ЗначениеЗаполнено(Объект.КодТНВЭД) Тогда
//	
//		СообщениеОбОшибке = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'ТН ВЭД'"));
//		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, , "КодТНВЭД", "Объект", Отказ);
//	КонецЕсли; 
//	
//	Если ГосударственныйКонтроль = "ПрослеживаемыйТовар" 
//		И ЗначениеЗаполнено(Объект.КодТНВЭД)
//		И Объект.ВесПоСертификатуТовара = 0 Тогда
//		
//		ЕдиницаПрослеживаемости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодТНВЭД, "ЕдиницаИзмерения");
//		КодОКЕИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаПрослеживаемости, "Код");
//		
//		Если ЕдиницаПрослеживаемости <> Объект.ЕдиницаИзмерения И КодОКЕИ = "166" Тогда
//			
//			СообщениеОбОшибке = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Вес из сертификата'"));
//			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, , "ВесПоСертификатуТовара", "Объект", Отказ);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	// СтандартныеПодсистемы.Свойства
//	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
//	// Конец СтандартныеПодсистемы.Свойства
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПриЗакрытии(ЗавершениеРаботы)
//	
//	Если ЗавершениеРаботы Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если НЕ Объект.Ссылка.Пустая() Тогда
//		Оповестить("ВводНовогоЭлементаСправочникаНоменклатура", ВладелецФормы, Объект.Ссылка);
//		
//		Если ОписаниеОповещенияОЗакрытии <> Неопределено
//			И ТипЗнч(ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры) = Тип("Структура") Тогда
//			ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("Номенклатура", Объект.Ссылка);
//		КонецЕсли;
//	КонецЕсли;
//	
//	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
//	// Выполняем вне транзакции записи, чтобы незначительная проблема
//	// (невозможность уточнить наименование спецификации, которое и так еще не видно пользователю)
//	// не эскалировала более серьезную (невозможность записать номенклатуру)
//	Справочники.СпецификацииНоменклатуры.ИсправитьНаименованиеСпецификации(
//		ТекущийОбъект.ОсновнаяСпецификацияНоменклатуры,
//		ТекущийОбъект.Ссылка,
//		ТекущийОбъект.Наименование,
//		ПараметрыЗаписи);
//		
//	//Запишем сведения об алкогольной продукции
//	
//	Если ЗаполнитьСведенияОбАлкогольнойПродукции Тогда
//		
//		СведенияОбАлкогольнойПродукции = РегистрыСведений.СведенияОбАлкогольнойПродукции.СоздатьМенеджерЗаписи();
//		СведенияОбАлкогольнойПродукции.Номенклатура        = ТекущийОбъект.Ссылка;
//		СведенияОбАлкогольнойПродукции.ВидЛицензии         = ВидЛицензииАлкогольнойПродукции;
//		СведенияОбАлкогольнойПродукции.КодВида169          = КодВидаАлкогольнойПродукции;
//		СведенияОбАлкогольнойПродукции.НаименованиеВида169 = НаименованиеВидаАлкогольнойПродукции;
//		СведенияОбАлкогольнойПродукции.КоэффПересчетаДал   = КоэффПересчетаДал;
//		СведенияОбАлкогольнойПродукции.Записать();
//	
//	КонецЕсли;
//		
//КонецПроцедуры

//&НаКлиенте
//Процедура ПослеЗаписи(ПараметрыЗаписи)
//	
//	// СтандартныеПодсистемы.ПодключаемыеКоманды
//	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
//	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
//	
//	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	РаботаСНоменклатуройКлиент.ПослеЗаписиФормаНоменклатуры(ЭтотОбъект);
//	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	
//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗаполнениеПоДаннымСервиса",
//		"Видимость", Ложь);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
//	
//	Если ОписаниеОповещенияОЗакрытии <> Неопределено 
//		И ТипЗнч(ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры) = Тип("Структура") Тогда
//			ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("НоменклатураСсылка", Объект.Ссылка);
//	КонецЕсли;
//	
//	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	РаботаСНоменклатуройКлиент.ПередЗакрытиемФормыНоменклатуры(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
//	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиСобытийЭлементовШапкиФормы

//&НаКлиенте
//Процедура ПериодичностьУслугиПриИзменении(Элемент)
//	
//	УправлениеФормой(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура НаименованиеПриИзменении(Элемент)
//	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
//		Объект.НаименованиеПолное = Объект.Наименование;
//	КонецЕсли;
//	УправлениеФормой(ЭтотОбъект);
//КонецПроцедуры

//&НаКлиенте
//Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;

//	Список = Новый СписокЗначений();
//	Список.Добавить(Объект.Наименование);

//	// Выбор из списка и обработка выбора.
//	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
//	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.НаименованиеПолное);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура НаименованиеПолноеПриИзменении(Элемент)
//	
//	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(
//		Элементы.НаименованиеПолное,
//		Элементы.Наименование);
//		
//	УправлениеФормой(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ГосударственныйКонтрольПриИзменении(Элемент)
//	
//	Элементы.КодВидаНоменклатурнойКлассификации.Видимость = (ГосударственныйКонтроль = "СИЗ");
//	ПоказатьДополнительныеРеквизитыПоПрослеживаемости();
//	
//	ПараметрыОписанияМаркируемогоТовара = ПараметрыОписанияМаркируемогоТовара(Объект.Ссылка, ГосударственныйКонтроль);
//	ОписаниеМаркируемогоТовара = ИнтеграцияИСМПВызовСервера.ПредставлениеНастройкиПараметровНоменклатуры(ПараметрыОписанияМаркируемогоТовара);
//	ДополнительныеРеквизитыМаркировкиВидимость();

//КонецПроцедуры

//&НаКлиенте
//Процедура ТНВЭДКодПриИзменении(Элемент)
//	
//	ЗаполнитьПолеНаименованияКода("ТНВЭД");
//	ПоказатьДополнительныеРеквизитыПоПрослеживаемости();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОКПКодПриИзменении(Элемент)
//	
//	ЗаполнитьПолеНаименованияКода("ОКП");
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОКПД2КодПриИзменении(Элемент)
//	
//	ЗаполнитьПолеНаименованияКода("ОКПД2");
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура НоменклатурнойКлассификацииКодПриИзменении(Элемент)
//	ЗаполнитьПолеНаименованияКода("НоменклатурнойКлассификацииККТ");
//КонецПроцедуры

//&НаКлиенте
//Процедура ОКВЭДКодПриИзменении(Элемент)
//	
//	ЗаполнитьПолеНаименованияКода("ОКВЭД");
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОКВЭД2КодПриИзменении(Элемент)
//	
//	ЗаполнитьПолеНаименованияКода("ОКВЭД2");
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура РодительПриИзменении(Элемент)
//	
//	Если (НЕ ЗначениеЗаполнено(Объект.ВидНоменклатуры))
//		И (ЗначениеЗаполнено(Объект.Родитель)) Тогда
//		
//		РодительПриИзмененииНаСервере();
//		УправлениеФормой(ЭтаФорма);
//		
//	ИначеЕсли (ЗначениеЗаполнено(Объект.ВидНоменклатуры))
//		И (ЗначениеЗаполнено(Объект.Родитель)) Тогда 
//		
//		ВидНоменклатурыГруппы = ПолучитьВидНоменклатуры(Объект.Родитель);
//		
//		Если ЗначениеЗаполнено(ВидНоменклатурыГруппы) И
//			Объект.ВидНоменклатуры <> ВидНоменклатурыГруппы Тогда		
//		
//			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для группы ""%1"" основной вид номенклатуры ""%2"".'")
//				+ Символы.ПС
//				+ НСтр("ru = 'Заменить текущий вид номенклатуры ""%3"" на ""%2""?'"), 
//				Объект.Родитель, ВидНоменклатурыГруппы, Объект.ВидНоменклатуры);
//			
//			Оповещение = Новый ОписаниеОповещения("ВопросИзменитьВидНоменклатурыЗавершение", ЭтотОбъект);
//			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
//		
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ВопросИзменитьВидНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	Если Результат = КодВозвратаДиалога.Да Тогда
//		РодительПриИзмененииНаСервере();
//		УправлениеФормой(ЭтаФорма);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервереБезКонтекста
//Функция ПолучитьВидНоменклатуры(ГруппаНоменклатуры)
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаНоменклатуры, "ВидНоменклатуры");
//	
//КонецФункции

//&НаСервере
//Процедура РодительПриИзмененииНаСервере()
//	
//	Объект.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Родитель, "ВидНоменклатуры");
//	ВидНоменклатурыПриИзмененииНаСервере();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура СтавкаНДСПриИзменении(Элемент)
//	
//	Если Объект.ВидСтавкиНДС <> ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.БезНДС")
//		И Не ВИсторииЕстьСтавкаБезНДС Тогда
//		Объект.КодРаздел7ДекларацииНДС = Неопределено;
//	КонецЕсли;
//	
//	УправлениеФормой(ЭтаФорма);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_НастройкаМСФОПриИзменении(Элемент)
//	
//	НастройкиУчетаМСФОКлиент.ПриИзмененииПоляФормы(ЭтотОбъект, Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ВесИзСертификатаПриИзменении(Элемент)
//	
//	ПоказатьДополнительныеРеквизитыПоПрослеживаемости();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПолеПоискаШтрихкодНаименованиеПриИзменении(Элемент)
//	
//	Если Не ПустаяСтрока(Объект.Наименование) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗаполнитьРеквизитыФормыПоДаннымСервиса(Неопределено);
//	ОтключитьЗаполнениеПоДаннымСервиса = Истина;
//	ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоДаннымСервиса", 0.1, Истина);
//	
//КонецПроцедуры

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

//&НаСервере
//Процедура ПоказатьДополнительныеРеквизитыПоПрослеживаемости()
//	
//	ПоказыватьВесТовараПоСертификату = Ложь;
//	
//	Если (Объект.ПрослеживаемыйТовар ИЛИ ГосударственныйКонтроль = "ПрослеживаемыйТовар") 
//		И (ЗначениеЗаполнено(Объект.КодТНВЭД)) Тогда
//		
//		ЕдиницаПрослеживаемости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодТНВЭД,"ЕдиницаИзмерения");
//		КодЕдиницыПрослеживаемости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаПрослеживаемости,"Код");
//		НаименованиеЕдиницыПрослеживаемости = ЕдиницаПрослеживаемости;
//		
//		Если ЕдиницаПрослеживаемости <> Объект.ЕдиницаИзмерения
//			И КодЕдиницыПрослеживаемости = "166" Тогда
//				ПоказыватьВесТовараПоСертификату = Истина;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Элементы.ВесИзСертификата.Видимость = ПоказыватьВесТовараПоСертификату;
//	Элементы.НаименованиеЕдиницыПрослеживаемости.Видимость = ПоказыватьВесТовараПоСертификату;
//	Элементы.ВесИзСертификата.АвтоОтметкаНезаполненного = Объект.ВесПоСертификатуТовара = 0;
//	
//КонецПроцедуры

//&НаСервере
//Процедура УстановитьУчетПодконтрольнойПродукции()

//	Если Объект.ПодконтрольнаяПродукцияВЕТИС 
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС")
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИСБП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("ВЕТИС", НСтр("ru = 'Продукция животного происхождения'"));
//	КонецЕсли; 
//	
//	Если Объект.ПродукцияМаркируемаяДляГИСМ
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииГИСМБП")
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("ГИСМ", НСтр("ru = 'Меховые изделия'"));
//	КонецЕсли; 
//	
//	Если Объект.ТабачнаяПродукция
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("МОТП", НСтр("ru = 'Табачная продукция'"));
//	КонецЕсли; 
//	
//	Если Объект.ОбувнаяПродукция
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("ОбувнаяПродукция", НСтр("ru = 'Обувная продукция'"));
//	КонецЕсли; 
//	
//	Если Объект.ЛегкаяПромышленность
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("ЛегкаяПромышленность", НСтр("ru = 'Товары легкой промышленности и одежда'"));
//	КонецЕсли; 
//	
//	Если Объект.МолочнаяПродукцияПодконтрольнаяВЕТИС
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС")
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИСБП") 
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("МолочнаяПродукцияПодконтрольнаяВЕТИС", НСтр("ru = 'Молоко и молочная продукция'"));
//	КонецЕсли;
//	
//	Если Объект.МолочнаяПродукцияБезВЕТИС
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("МолочнаяПродукцияБезВЕТИС", НСтр("ru = 'Молоко и молочная продукция (без ВетИС)'"));
//	КонецЕсли;
//	
//	Если Объект.Шины
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("Шины", НСтр("ru = 'Шины и автопокрышки'"));
//	КонецЕсли; 
//	
//	Если Объект.АльтернативныйТабак
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("АльтернативныйТабак", НСтр("ru = 'Альтернативная табачная продукция'"));
//	КонецЕсли; 
//	
//	Если Объект.УпакованнаяВода
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("УпакованнаяВода", НСтр("ru = 'Упакованная вода'"));
//	КонецЕсли; 
//	
//	Если Объект.Духи
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("Духи", НСтр("ru = 'Духи и туалетная вода'"));
//	КонецЕсли; 
//	
//	Если Объект.Велосипеды
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("Велосипеды", НСтр("ru = 'Велосипеды'"));
//	КонецЕсли; 
//	
//	Если Объект.КреслаКоляски
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("КреслаКоляски", НСтр("ru = 'Кресла-коляски'"));
//	КонецЕсли; 
//	
//	Если Объект.Фотоаппараты
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//	
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("Фотоаппараты", НСтр("ru = 'Фотоаппараты'"));
//	КонецЕсли; 
//	
//	Если Объект.СредствоИндивидуальнойЗащиты
//		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодконтрольныеТоварыККТ") Тогда
//		
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("СИЗ", НСтр("ru = 'Средства индивидуальной защиты'"));
//	КонецЕсли;
//	
//	Если Объект.Антисептики
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//		
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("Антисептики", НСтр("ru = 'Антисептики'"));
//	КонецЕсли;
//	
//	Если Объект.БАДы
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//		
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("БАДы", НСтр("ru = 'БАДы'"));
//	КонецЕсли;
//	
//	Если Объект.НикотиносодержащаяПродукция
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//		
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("НикотиносодержащаяПродукция", НСтр("ru = 'Никотиносодержащая продукция'"));
//	КонецЕсли;
//	
//	Если Объект.Пиво
//		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
//		
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("Пиво", НСтр("ru = 'Пиво'"));
//	КонецЕсли;
//	
//	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров");
//	
//	Если НЕ Объект.Услуга
//		И (Объект.ПрослеживаемыйТовар
//		ИЛИ ВедетсяУчетПрослеживаемыхТоваров) Тогда
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("ПрослеживаемыйТовар", НСтр("ru = 'Прослеживаемый товар'"));
//	КонецЕсли;
//	
//	Если НЕ Объект.Услуга
//		И (Объект.ПрослеживаемыйКомплект
//		ИЛИ ВедетсяУчетПрослеживаемыхТоваров) Тогда
//		Элементы.ГосударственныйКонтроль.СписокВыбора.Добавить("ПрослеживаемыйКомплект", НСтр("ru = 'Прослеживаемый товар(ы) в составе комплекта'"));
//	КонецЕсли;
//		
//	Если Объект.МолочнаяПродукцияБезВЕТИС Тогда
//		ГосударственныйКонтроль = "МолочнаяПродукцияБезВЕТИС";
//	ИначеЕсли Объект.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
//		ГосударственныйКонтроль = "МолочнаяПродукцияПодконтрольнаяВЕТИС";
//	ИначеЕсли Объект.ПодконтрольнаяПродукцияВЕТИС Тогда
//		ГосударственныйКонтроль = "ВЕТИС";
//	ИначеЕсли Объект.ТабачнаяПродукция Тогда
//		ГосударственныйКонтроль = "МОТП";
//	ИначеЕсли Объект.ОбувнаяПродукция Тогда
//		ГосударственныйКонтроль = "ОбувнаяПродукция";
//	ИначеЕсли Объект.ПродукцияМаркируемаяДляГИСМ Тогда
//		ГосударственныйКонтроль = "ГИСМ";
//	ИначеЕсли Объект.СредствоИндивидуальнойЗащиты Тогда
//		ГосударственныйКонтроль = "СИЗ";
//	ИначеЕсли Объект.ЛегкаяПромышленность Тогда
//		ГосударственныйКонтроль = "ЛегкаяПромышленность";
//	ИначеЕсли Объект.Шины Тогда
//		ГосударственныйКонтроль = "Шины";
//	ИначеЕсли Объект.АльтернативныйТабак Тогда
//		ГосударственныйКонтроль = "АльтернативныйТабак";
//	ИначеЕсли Объект.УпакованнаяВода Тогда
//		ГосударственныйКонтроль = "УпакованнаяВода";
//	ИначеЕсли Объект.Фотоаппараты Тогда
//		ГосударственныйКонтроль = "Фотоаппараты";
//	ИначеЕсли Объект.Духи Тогда
//		ГосударственныйКонтроль = "Духи";
//	ИначеЕсли Объект.Велосипеды Тогда
//		ГосударственныйКонтроль = "Велосипеды";
//	ИначеЕсли Объект.КреслаКоляски Тогда
//		ГосударственныйКонтроль = "КреслаКоляски";
//	ИначеЕсли Объект.Антисептики Тогда
//		ГосударственныйКонтроль = "Антисептики";
//	ИначеЕсли Объект.БАДы Тогда
//		ГосударственныйКонтроль = "БАДы";
//	ИначеЕсли Объект.НикотиносодержащаяПродукция Тогда
//		ГосударственныйКонтроль = "НикотиносодержащаяПродукция";
//	ИначеЕсли Объект.Пиво Тогда
//		ГосударственныйКонтроль = "Пиво";
//	ИначеЕсли Объект.ПрослеживаемыйТовар Тогда
//		ГосударственныйКонтроль = "ПрослеживаемыйТовар";
//	ИначеЕсли Объект.ПрослеживаемыйКомплект Тогда
//		ГосударственныйКонтроль = "ПрослеживаемыйКомплект";
//	КонецЕсли;
//	
//	ПараметрыОписанияМаркируемогоТовара = ПараметрыОписанияМаркируемогоТовара(Объект.Ссылка, ГосударственныйКонтроль);
//	ОписаниеМаркируемогоТовара = ИнтеграцияИСМПВызовСервера.ПредставлениеНастройкиПараметровНоменклатуры(ПараметрыОписанияМаркируемогоТовара);
//	
//	ДополнительныеРеквизитыМаркировкиВидимость();
//	
//КонецПроцедуры

//&НаСервере
//Процедура ИзменениеНастройкиЦеныПродажи()
//	
//	ПолучитьЗначениеЦеныПродажи();
//	НастроитьЭлементыУправленияЦенойПродажи();
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаписатьИзменениеЦеныВРегистр(ТекущийОбъект)
//	
//	ПравоНаИзменениеРегистраЦен = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов); 	
//	
//	Если ПравоНаИзменениеРегистраЦен Тогда
//		
//		РедактироватьВКарточкеНоменклатуры = 
//			(Константы.НастройкаЗаполненияЦеныПродажи.Получить() = Перечисления.НастройкаЗаполненияЦеныПродажи.Номенклатура);
//		
//		Если РедактироватьВКарточкеНоменклатуры и ЦенаПродажиМодифицирована Тогда
//			
//			МенеджерЗаписи 						= РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьМенеджерЗаписи();
//			МенеджерЗаписи.Номенклатура 		= ТекущийОбъект.Ссылка;
//			МенеджерЗаписи.СпособЗаполненияЦены = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам;
//			МенеджерЗаписи.Валюта				= ВалютаЦены;
//			МенеджерЗаписи.Цена 				= ЦенаПродажи;
//			МенеджерЗаписи.ЦенаВключаетНДС      = Истина;
//			
//			МенеджерЗаписи.Записать();
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаписатьШтрикходыНоменклатуры(ТекущийОбъект)
//	Если НЕ ЗначениеЗаполнено(Штрихкоды) Тогда
//		Возврат;
//	КонецЕсли;

//	МассивШтрихкодов = СтрРазделить(Штрихкоды, ",", Ложь);
//	Для каждого Штрихкод Из МассивШтрихкодов Цикл
//		МенеджерЗаписи              = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
//		МенеджерЗаписи.Номенклатура = ТекущийОбъект.Ссылка;
//		МенеджерЗаписи.Штрихкод     = Штрихкод;
//		
//		МенеджерЗаписи.Записать();
//	КонецЦикла;
//КонецПроцедуры 

//&НаСервере
//Процедура ЗаписатьСрокИспользованияНоменклатуры(ТекущийОбъект)
//	
//	Если СрокПолезногоИспользования = ПолучитьСрокПолезногоИспользования(ТекущийОбъект.Ссылка) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СрокиИспользованияНоменклатуры) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	МенеджерЗаписи                   = РегистрыСведений.СрокиИспользованияНоменклатуры.СоздатьМенеджерЗаписи();
//	МенеджерЗаписи.Номенклатура      = ТекущийОбъект.Ссылка;
//	МенеджерЗаписи.СрокИспользования = СрокПолезногоИспользования;
//	
//	МенеджерЗаписи.Записать();
//	
//КонецПроцедуры 

//&НаСервере
//Процедура ПолучитьЗначениеЦеныПродажи()
//	
//	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ЦеныНоменклатурыДокументов.Цена КАК Цена,
//	|	ЦеныНоменклатурыДокументов.Валюта КАК Валюта,
//	|	ЦеныНоменклатурыДокументов.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
//	|	ЦеныНоменклатурыДокументов.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС
//	|ИЗ
//	|	РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
//	|ГДЕ
//	|	ЦеныНоменклатурыДокументов.Номенклатура = &Номенклатура
//	|	И ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоПродажнымЦенам)";
//		
//	ВыборкаДанных = Запрос.Выполнить().Выбрать();
//	
//	Если ВыборкаДанных.Следующий() Тогда
//		
//		Если Не ВыборкаДанных.ЦенаВключаетНДС Тогда
//			// В форме номенклатуры цену всегда показываем окончательную для покупателя - т.е. с НДС
//			СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВыборкаДанных.ВидСтавкиНДС, ОбщегоНазначения.ТекущаяДатаПользователя());
//			ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС, Ложь);
//			ЦенаПродажи    = ВыборкаДанных.Цена * (1 + ЗначениеСтавкиНДС / 100);
//		Иначе
//			ЦенаПродажи    = ВыборкаДанных.Цена;
//		КонецЕсли;
//		
//		ВалютаЦены         = ВыборкаДанных.Валюта;
//		ВалютыЦеныБезВалют = ВыборкаДанных.Валюта;
//		
//	Иначе 
//		
//		ЦенаПродажи                    = 0;
//		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
//		ВалютаЦены                     = ВалютаРегламентированногоУчета;
//		ВалютыЦеныБезВалют             = ВалютаРегламентированногоУчета;
//		
//	КонецЕсли;
//	
//	ЦенаПродажиМодифицирована = Ложь;	
//	
//КонецПроцедуры

//&НаСервере
//Процедура НастроитьЭлементыУправленияЦенойПродажи()
//	
//	ЧтениеЦенПродаж = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов);
//	
//	Если Не ЧтениеЦенПродаж Тогда
//		Элементы.ГруппаЦенаПродажи.Видимость = Ложь;
//		Возврат;
//	КонецЕсли;
//	
//	ИзменениеЦенПродаж = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов);
//	
//	Элементы.ГруппаЦенаПродажи.Видимость = Истина;
//	РедактироватьВКарточкеНоменклатуры = (Константы.НастройкаЗаполненияЦеныПродажи.Получить() = Перечисления.НастройкаЗаполненияЦеныПродажи.Номенклатура);
//	ЕстьВалюты = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
//	
//	Если ИзменениеЦенПродаж Тогда
//		
//		Элементы.ЦенаПродажиИзНоменклатуры.ТолькоПросмотр  = Не РедактироватьВКарточкеНоменклатуры;
//			
//		Если РедактироватьВКарточкеНоменклатуры Тогда
//			
//			Элементы.ВалютаЦеныПродажиСВалютами.Видимость = ЕстьВалюты;
//			Элементы.ВалютаЦеныПродажиБезВалют.Видимость  = Не ЕстьВалюты;
//			
//		Иначе
//			
//			Элементы.ВалютаЦеныПродажиСВалютами.Видимость = Ложь;
//			Элементы.ВалютаЦеныПродажиБезВалют.Видимость  = Истина;
//			
//		КонецЕсли;
//		
//	Иначе
//		
//		Элементы.ЦенаПродажиИзНоменклатуры.ТолькоПросмотр = Истина;
//		Элементы.ВалютаЦеныПродажиСВалютами.Видимость     = Ложь;
//		Элементы.ВалютаЦеныПродажиБезВалют.Видимость      = Истина;
//		
//	КонецЕсли;
//	
//	// Установка подсказки
//	
//	ЭлементыСтроки = Новый Массив;
//	
//	Если РедактироватьВКарточкеНоменклатуры Тогда
//		
//		ЭлементыСтроки.Добавить(НСтр("ru = 'По умолчанию цена продажи устанавливается в карточке номенклатуры.'"));
//		
//	Иначе
//		
//		ЭлементыСтроки.Добавить(НСтр("ru = 'По умолчанию цена продажи устанавливается в документах продажи (счетах, актах, накладных).'"));
//		
//	КонецЕсли;
//	
//	Если ПравоДоступа("Редактирование", Метаданные.Константы.НастройкаЗаполненияЦеныПродажи) Тогда
//	
//		ЭлементыСтроки.Добавить(Символы.ПС);
//		ЭлементыСтроки.Добавить(НСтр("ru = 'Изменить настройку можно в форме - '"));
//		ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока("Заполнение цен продажи",,,,"e1cib/data/Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦеныПродажи"));
//		
//	КонецЕсли;
//	
//	ТекстПодсказкиДляЦеныПродажи = Новый ФорматированнаяСтрока(ЭлементыСтроки);
//	
//	Элементы.ВалютаЦеныПродажиСВалютами.РасширеннаяПодсказка.Заголовок = ТекстПодсказкиДляЦеныПродажи;
//	Элементы.ВалютаЦеныПродажиБезВалют. РасширеннаяПодсказка.Заголовок = ТекстПодсказкиДляЦеныПродажи;
//	
//КонецПроцедуры

//// СтандартныеПодсистемы.Свойства
//&НаКлиенте
//Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
//	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
//	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
//КонецПроцедуры

//// Конец СтандартныеПодсистемы.Свойства

//// Процедура показывает новости, требующие прочтения (важные и очень важные)
////
//// Параметры:
////  Нет
////
//&НаКлиенте
//Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

//	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
//	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
//	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

//	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

//КонецПроцедуры

//&НаСервере
//Процедура УстановитьУсловноеОформление()

//	УсловноеОформление.Элементы.Очистить();


//	// ЕдиницаИзмерения

//	ЭлементУО = УсловноеОформление.Элементы.Добавить();

//	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕдиницаИзмерения");

//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
//		"Объект.Услуга", ВидСравненияКомпоновкиДанных.Равно, Истина);

//	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
//	
//	// ГосударственныйКонтроль

//	ЭлементУО = УсловноеОформление.Элементы.Добавить();

//	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГосударственныйКонтроль");

//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
//		"Объект.Услуга", ВидСравненияКомпоновкиДанных.Равно, Истина);

//	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
//	
//	// ВесПоСертификатуТовара

//	ЭлементУО = УсловноеОформление.Элементы.Добавить();

//	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВесИзСертификата");
//	
//	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
//		"ПоказыватьВесТовараПоСертификату", ВидСравненияКомпоновкиДанных.Равно, Ложь);

//	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

//КонецПроцедуры

//// Процедура устанавливает доступность реквизитов формы.
////
//&НаКлиентеНаСервереБезКонтекста
//Процедура УправлениеФормой(Форма)
//	
//	Элементы = Форма.Элементы;
//	Объект = Форма.Объект;
//	
//	Элементы.Импортер.Доступность                    = Не Объект.Услуга;
//	Элементы.НомерГТД.Доступность                    = Не Объект.Услуга;
//	Элементы.СтранаПроисхождения.Доступность         = Не Объект.Услуга;
//	Элементы.СтатьяЗатрат.Доступность                = Не Объект.Услуга;
//	Элементы.ТНВЭДКод.Доступность                    = Не Объект.Услуга;
//	Элементы.ОКПКод.Доступность                      = Не Объект.Услуга;
//	Элементы.ОКПД2Код.Доступность                    = Не Объект.Услуга;
//	Элементы.КодРаздел7ДекларацииНДС.Видимость       = Форма.РаздельныйУчетНДС
//		И (Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.БезНДС")
//		Или Форма.ВИсторииЕстьСтавкаБезНДС);
//		
//	Элементы.СтавкаНДС.Видимость = Не Форма.ЕстьИсторияВидовСтавокНДС;
//	Элементы.АктуальнаяСтавкаНДС.Видимость = Форма.ЕстьИсторияВидовСтавокНДС;

//	Элементы.КодВидаНоменклатурнойКлассификации.Видимость = Форма.ГосударственныйКонтроль = "СИЗ";
//	
//	// В требовании-накладной допускается указывать только статьи с видом "МатериальныеРасходы"
//	ПараметрыВыбораСтатьиЗатрат = Новый Массив;
//	Если Не Объект.Услуга Тогда
//		МатериальныеРасходы = ПредопределенноеЗначение("Перечисление.ВидыРасходовНУ.МатериальныеРасходы");
//		ПараметрыВыбораСтатьиЗатрат.Добавить(Новый ПараметрВыбора("Отбор.ВидРасходовНУ", МатериальныеРасходы));
//		// При изменении флага статья затрат очищается
//	КонецЕсли;
//	
//	Элементы.ГруппаПериодичность.Видимость = Объект.Услуга;
//	Если ЗначениеЗаполнено(Объект.ПериодичностьУслуги) И (ЗначениеЗаполнено(Объект.НаименованиеПолное) ИЛИ ЗначениеЗаполнено(Объект.Наименование)) Тогда
//		НаименованиеНоменклатуры = ?(ПустаяСтрока(Объект.НаименованиеПолное), Объект.Наименование, Объект.НаименованиеПолное);
//		ТекстПодсказки = СтрШаблон(НСтр("ru='Пример: %1'"), РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(
//			НаименованиеНоменклатуры,
//			Объект.ПериодичностьУслуги,
//			ТекущаяДата()));
//		Элементы.ПериодичностьУслуги.Подсказка = ТекстПодсказки;
//		Элементы.ПериодичностьУслуги.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
//	Иначе
//		Элементы.ПериодичностьУслуги.Подсказка = "";
//		Элементы.ПериодичностьУслуги.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
//	КонецЕсли;
//	
//	ШаблонПодсказки = НСтр("ru='Содержание услуги в документе будет дополнено выбранной периодичностью.
//		|Например, ""%1""'");
//		
//	ПериодичностьДляПримера = ?(ЗначениеЗаполнено(Объект.ПериодичностьУслуги),
//		Объект.ПериодичностьУслуги,
//		ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
//	
//	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
//		НаименованиеДляПримера = Объект.НаименованиеПолное;
//	ИначеЕсли ЗначениеЗаполнено(Объект.Наименование) Тогда
//		НаименованиеДляПримера = Объект.Наименование;
//	Иначе
//		НаименованиеДляПримера = НСтр("ru='Оказание услуг'");
//	КонецЕсли;
//	
//	Если Форма.ИспользуетсяПростойИнтерфейс Тогда
//		
//		Элементы.ГруппаОстаток.Видимость = Не Объект.Услуга;
//		
//		Если Форма.ОстатокПолучен Тогда
//			ОстатковНет = Форма.ОбщийОстаток = 0;
//			Элементы.ДекорацияОстатковНет.Видимость = ОстатковНет;
//			Элементы.ГруппаОстатокВсего.Видимость   = Не ОстатковНет;
//			Элементы.ГруппаДетали.Видимость         = Не ОстатковНет;
//		КонецЕсли;
//		
//		Элементы.ГруппаЗаголовокНесколькоСкладов.Видимость = Форма.ИспользуютсяНесколькоСкладов;
//		Элементы.ГруппаЗаголовокОдинСклад.Видимость = Не Форма.ИспользуютсяНесколькоСкладов;
//		
//	КонецЕсли;
//	
//	Элементы.СрокПолезногоИспользования.Видимость = (Форма.ПорядокИспользованияСпецодежды = 1 И Не Объект.Услуга);
//		
//	Элементы.ГруппаПериодичность.Подсказка = СтрШаблон(ШаблонПодсказки, РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(
//		НаименованиеДляПримера,
//		ПериодичностьДляПримера,
//		ТекущаяДата()));
//	
//	Элементы.СтатьяЗатрат.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСтатьиЗатрат);
//	
//КонецПроцедуры

//// и присваивает соответствующее значение переменной ФормироватьНаименованиеПолноеАвтоматически.
////
//// Параметры:
////  Нет.
////
//&НаКлиентеНаСервереБезКонтекста
//Функция УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(НаименованиеПолное,Наименование)
//   
//   Возврат (ПустаяСтрока(НаименованиеПолное) ИЛИ НаименованиеПолное = Наименование);
//   
//КонецФункции // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

//&НаКлиенте
//Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
//	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
//КонецПроцедуры

//&НаСервере
//Процедура ОбновитьЭлементыДополнительныхРеквизитов()
//	
//	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

//КонецПроцедуры

//&НаКлиенте
//Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	Если Результат <> Неопределено Тогда
//		Объект.НаименованиеПолное = Результат.Значение;
//		Модифицированность = Истина;
//		ФормироватьНаименованиеПолноеАвтоматически = Истина;
//		УправлениеФормой(ЭтотОбъект);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьПолеНаименованияКода(ИмяКлассификатора)

//	Классификатор = Объект["Код" + ИмяКлассификатора];
//	ЭтаФорма[ИмяКлассификатора+"Наименование"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Классификатор, "Наименование");

//КонецПроцедуры

//&НаСервере
//Процедура ОтобразитьОсновнуюСпецификацию()
//	
//	Если Не ЗначениеЗаполнено(Объект.ОсновнаяСпецификацияНоменклатуры) Тогда
//		Элементы.ОсновнаяСпецификацияПредставление.Видимость = ПравоДоступа("Редактирование", Метаданные.Справочники.СпецификацииНоменклатуры);
//		ОсновнаяСпецификацияПредставление = НСтр("ru = 'Заполнить'");
//	Иначе
//		ОсновнаяСпецификацияПредставление = УправлениеПроизводством.ПредставлениеОсновнойСпецификации(Объект.ОсновнаяСпецификацияНоменклатуры);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьПодсказкуПечатиАртикула()
//	
//	Если ПравоДоступа("Редактирование", Метаданные.Константы.ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
//		ЭлементыСтроки = Новый Массив;
//		ЭлементыСтроки.Добавить(НСтр("ru = 'Как добавить артикул в печатную форму?'"));
//		ЭлементыСтроки.Добавить(Символы.ПС);
//		Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
//			ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(
//				НСтр("ru = 'Настройки - Ещё - Печать артикулов'"),
//			,
//			,
//			,
//			УправлениеПечатьюБПКлиентСервер.ГиперссылкаФормыНастройкиПечатиАртикулов()));
//		Иначе
//			ЭлементыСтроки.Добавить(Новый ФорматированнаяСтрока(
//				НСтр("ru = 'Администрирование - Параметры учета - Печать артикулов'"),
//			,
//			,
//			,
//			УправлениеПечатьюБПКлиентСервер.ГиперссылкаФормыНастройкиПечатиАртикулов()));
//		КонецЕсли;
//		Элементы.Артикул.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЭлементыСтроки);
//		Элементы.Артикул.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
//	Иначе
//		Элементы.Артикул.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПрочитатьСрокиИспользованияСпецодежды()
//	
//	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СрокиИспользованияНоменклатуры) Тогда
//		Элементы.ГруппаСпецодежда.Видимость = Ложь;
//		Возврат;
//	КонецЕсли;
//	
//	Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СрокиИспользованияНоменклатуры) Тогда
//		Элементы.ПорядокИспользованияСпецодежды.ТолькоПросмотр = Истина;
//		Элементы.СрокПолезногоИспользования.ТолькоПросмотр = Истина;
//	КонецЕсли;
//	
//	СрокПолезногоИспользования = ПолучитьСрокПолезногоИспользования(Объект.Ссылка);
//	ПорядокИспользованияСпецодежды = СрокПолезногоИспользования > 0;
//	
//КонецПроцедуры

//&НаСервереБезКонтекста
//Функция ПолучитьСрокПолезногоИспользования(Номенклатура)
//	
//	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
//		Возврат 0;
//	КонецЕсли;
//	
//	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СрокиИспользованияНоменклатуры) Тогда
//		Возврат 0;
//	КонецЕсли;
//	
//	Возврат РегистрыСведений.СрокиИспользованияНоменклатуры.Получить(
//			Новый Структура("Номенклатура", Номенклатура)).СрокИспользования;
//	
//КонецФункции

//#Область ЭлектронноеВзаимодействиеРаботаСНоменклатурой

//&НаСервере
//Процедура НастроитьЭлементыУправленияРаботаСНоменклатурой()
//	
//	Если Параметры.Ключ.Пустая() Тогда
//		ЗаполнитьПодсказкуСервиса();
//		РаботаСНоменклатуройБП.ЗаполнитьРеквизитыФормыДляРаботыСервиса(ЭтотОбъект);
//	Иначе 
//		Элементы.ГруппаЗаполнениеПоДаннымСервиса.Видимость = Ложь;
//	КонецЕсли;
//	
//	ДобавитьРеквизитыИЭлементыФормыРаботаСНоменклатурой();
//	
//	ИспользоватьПодключаемоеОборудование = ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование);
//	
//	Параметры.Свойство("Штрихкод", ПолеПоискаШтрихкодНаименование);
//	Параметры.Свойство("ИдентификаторСервиса", ИдентификаторСервиса);
//	Если Не ПустаяСтрока(ИдентификаторСервиса) Тогда
//		НастроитьФормуПриДлительнойОперации(ЭтотОбъект, Истина);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ДобавитьРеквизитыИЭлементыФормыРаботаСНоменклатурой()
//	
//	ДополнительныеПараметры = Новый Структура;
//	ДополнительныеПараметры.Вставить("ВыбиратьРежимОбновления", ИспользоватьАвтоматическоеОбновлениеНоменклатуры());
//	
//	РаботаСНоменклатурой.ПриСозданииНаСервереФормаНоменклатуры(ЭтотОбъект, Объект.Ссылка,
//		Элементы.ГруппаРаботаСНоменклатурой, ДополнительныеПараметры);
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьПодсказкуСервиса()
//	
//	ГиперссылкаНаПромоСайтНоменклатура = РаботаСНоменклатурой.ГиперссылкаНаПромоСайтНоменклатура();
//	ГиперссылкаНаОфертуСервисов = РаботаСНоменклатурой.ГиперссылкаНаОфертуСервисов();
//	
//	ТекстПодсказки = СтрШаблон("<span style=""color: ПоясняющийТекст"">%1 </span> <a href = ""%2"">%3</a>.
//		|<span style=""color: ПоясняющийТекст"">%4 </span> <a href = ""%5"">%6</a>.",
//		НСтр("ru='Автоматическое заполнение реквизитов по данным каталога'"),
//		ГиперссылкаНаПромоСайтНоменклатура,
//		НСтр("ru='1С:Номенклатура'"),
//		НСтр("ru='Использование сервиса 1С:Номенклатура означает согласие с'"),
//		ГиперссылкаНаОфертуСервисов,
//		НСтр("ru='Условиями использования сервиса'"));
//	
//	ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(ТекстПодсказки);
//	
//	Элементы.ЗаполнитьРеквизитыПоДаннымСервисаРасширеннаяПодсказка.Заголовок = ТекстПодсказки;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПерезаполнитьВстроенныеРеквизиты()
//	РаботаСНоменклатурой.ПерезаполнитьВстроенныеРеквизиты(ЭтотОбъект);
//КонецПроцедуры

//&НаКлиенте
//Процедура ПодключитьИнтернетПоддержкуПользователейНажатиеПродолжение(Результат, ДополнительныеПараметры) Экспорт 
//	
//	Если Результат = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ВыполнитьПоискДанныхСервиса();
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Процедура НастроитьФормуПриДлительнойОперации(Форма, Знач ДлительнаяОперацияАктивна)
//	
//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "КартинкаОжидание",
//		"Видимость", ДлительнаяОперацияАктивна);
//	
//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЗаполнитьРеквизитыПоДаннымСервиса",
//		"Доступность", Не ДлительнаяОперацияАктивна);
//	
//	Если Форма.ТолькоПросмотр <> ДлительнаяОперацияАктивна Тогда
//		Форма.ТолькоПросмотр = ДлительнаяОперацияАктивна;
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОжидатьЗавершениеДлительнойОперации(ДлительнаяОперация, ОповещениеОЗавершении)
//	
//	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
//	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
//	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
//	ПараметрыОжидания.ВыводитьСообщения = Истина;
//	
//	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ВыполнитьПоискДанныхСервиса()
//	
//	ДлительнаяОперация = ДлительнаяОперацияРезультатПоискаНоменклатурыСервиса();
//		
//	Если ТипЗнч(ДлительнаяОперация) = Тип("Структура") Тогда
//		НастроитьФормуПриДлительнойОперации(ЭтотОбъект, Истина);
//		
//		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПоискДанныхСервисаЗавершение", ЭтотОбъект);
//		
//		ОжидатьЗавершениеДлительнойОперации(ДлительнаяОперация, ОповещениеОЗавершении);
//	Иначе 
//		ОчиститьСообщения();
//		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось подключить сервис 1С:Номенклатура'"));
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Функция ДлительнаяОперацияРезультатПоискаНоменклатурыСервиса()
//	
//	Если Не СервисАктивен Тогда
//		СервисАктивен = РаботаСНоменклатуройБП.СервисУспешноАктивирован();
//		Если СервисАктивен Тогда
//			ДобавитьРеквизитыИЭлементыФормыРаботаСНоменклатурой();
//		Иначе 
//			Возврат Неопределено;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
//	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
//	ПараметрыВыполнения.НаименованиеФоновогоЗадания = 
//		НСтр("ru = '1С:Номенклатура. Поиск номенклатуры по строке.'");
//		
//	ПараметрыФункции = РаботаСНоменклатурой.ПараметрыПоискаНоменклатурыСервиса();
//	ПараметрыФункции.СтрокаПоиска = ПолеПоискаШтрихкодНаименование;
//	ПараметрыФункции.КоличествоЗаписей = 2;
//	
//	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
//		"РаботаСНоменклатурой.РезультатПоискаНоменклатурыСервиса", ПараметрыФункции);
//	
//КонецФункции

//&НаКлиенте
//Процедура ВыполнитьПоискДанныхСервисаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт 
//	
//	Перем РезультатПоиска;
//	
//	Статус = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Статус");
//	Если Статус = "Ошибка" Тогда
//		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
//	ИначеЕсли Статус <> "Выполнено" Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
//		РезультатПоиска = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
//		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
//	КонецЕсли;
//	
//	НайденОдинРезультат = (ТипЗнч(РезультатПоиска) = Тип("Массив") И РезультатПоиска.Количество() = 1);
//	ДлительнаяОперацияЗавершена = Истина;
//	
//	Если НайденОдинРезультат Тогда
//		НоменклатураПоИдентификатору = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПоиска[0], "Номенклатура");
//		Если ЗначениеЗаполнено(НоменклатураПоИдентификатору) Тогда
//			ПоказатьСообщениеОбОшибкеЗаполненияФормыПоДаннымСервиса(НоменклатураПоИдентификатору, 2);
//		Иначе 
//			ПодготовитьПараметрыЗаполненияФормыНоменклатуры(РезультатПоиска[0]);
//			ДлительнаяОперацияЗавершена = Ложь;
//		КонецЕсли;
//	ИначеЕсли Результат.Сообщения <> Неопределено И Результат.Сообщения.Количество() > 0 Тогда 
//		Для каждого Сообщение Из Результат.Сообщения Цикл
//			Сообщение.Сообщить();
//		КонецЦикла;
//	Иначе 
//		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура);
//		СтандартнаяОбработка = Ложь;
//		РаботаСНоменклатуройКлиент.ВыбратьОбъектСервиса(ЭтотОбъект, Элементы.ПолеПоискаШтрихкодНаименование,
//			СтандартнаяОбработка, Ложь, Оповещение);
//	КонецЕсли;
//	
//	Если ДлительнаяОперацияЗавершена Тогда
//		НастроитьФормуПриДлительнойОперации(ЭтотОбъект, Ложь);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервереБезКонтекста
//Функция ИспользоватьАвтоматическоеОбновлениеНоменклатуры()
//	
//	Результат = Ложь;
//	
//	ИмяЗадания = "ОбновлениеНоменклатурыРаботаСНоменклатурой";
//	Отбор = Новый Структура("Метаданные", ИмяЗадания);
//	УстановитьПривилегированныйРежим(Истина);
//	Найденные = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
//	УстановитьПривилегированныйРежим(Ложь);
//	Если Найденные.Количество() > 0 Тогда
//		Результат = Найденные[0].Использование;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыФормыПоДаннымСервиса(Команда)
//	
//	Если ОтключитьЗаполнениеПоДаннымСервиса Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОчиститьСообщения();
//	Если ПустаяСтрока(ПолеПоискаШтрихкодНаименование) Тогда
//		Если Команда <> Неопределено Тогда
//			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Введите штрихкод или наименование товара'"));
//		КонецЕсли;
//		Возврат;
//	КонецЕсли;
//	
//	НоменклатураПоИдентификатору = РаботаСНоменклатуройВызовСервераБП.НоменклатураПоШтрихкоду(
//		ПолеПоискаШтрихкодНаименование);
//	Если Не НоменклатураПоИдентификатору.Пустая() Тогда
//		ПоказатьСообщениеОбОшибкеЗаполненияФормыПоДаннымСервиса(НоменклатураПоИдентификатору);
//		Возврат;
//	КонецЕсли;
//	
//	Если Не СервисДоступен Тогда
//		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нарушение прав доступа'"));
//		Возврат;
//	КонецЕсли;
//	
//	Если ИнтернетПоддержкаПодключена Тогда
//		ВыполнитьПоискДанныхСервиса();
//	Иначе
//		Оповещение = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуПользователейНажатиеПродолжение", ЭтотОбъект);
//		РаботаСНоменклатуройКлиентБП.ПодключитьИнтернетПоддержкуПользователей(Оповещение);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура НайтиЗаполнитьПоШтрихкоду(ДанныеСоСканера)
//	
//	ПолеПоискаШтрихкодНаименование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСоСканера, "Штрихкод");
//	
//	Оповещение = Новый ОписаниеОповещения("НайтиЗаполнитьПоШтрихкодуЗавершение", ЭтотОбъект);
//	Контекст = Новый Структура("ОповещениеОРезультате", Оповещение);
//	Контекст.Вставить("ТекстВопроса",
//		НСтр("ru = 'Номенклатура с таким штрих-кодом не найдена. Проискать в сервисе 1С:Номенклатура?'"));
//	РаботаСНоменклатуройКлиентБП.ПоискНоменклатурыПоШтрихкодуПослеВводаСтроки(ДанныеСоСканера, Контекст);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура НайтиЗаполнитьПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	РезультатШтрихкод      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Штрихкод");
//	РезультатИдентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Идентификатор", "");
//	РезультатНоменклатура  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Номенклатура",
//		ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
//	
//	Если Не РезультатНоменклатура.Пустая() Тогда
//		ПоказатьСообщениеОбОшибкеЗаполненияФормыПоДаннымСервиса(РезультатНоменклатура);
//	ИначеЕсли Не ПустаяСтрока(РезультатИдентификатор) Тогда 
//		НастроитьФормуПриДлительнойОперации(ЭтотОбъект, Истина);
//		
//		ДанныеОбъекта = Новый Структура("Идентификатор", РезультатИдентификатор);
//		ПодготовитьПараметрыЗаполненияФормыНоменклатуры(ДанныеОбъекта);
//	Иначе 
//		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'По штрихкоду %1 номенклатура не найдена.'"), РезультатШтрихкод));
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПодготовитьПараметрыЗаполненияФормыНоменклатуры(ДанныеОбъекта)
//	
//	ПараметрыОбработчика = Новый Структура("ВыводитьОкноОжидания", Ложь);
//	
//	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект);
//	РаботаСНоменклатуройКлиент.ПодготовитьПараметрыЗаполненияФормыНоменклатуры(ЭтотОбъект,
//		ДанныеОбъекта, Оповещение, ПараметрыОбработчика);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ВключитьЗаполнениеПоДаннымСервиса()
//	
//	ОтключитьЗаполнениеПоДаннымСервиса = Ложь;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПоказатьСообщениеОбОшибкеЗаполненияФормыПоДаннымСервиса(НоменклатураСсылка, ТипОшибки = 1)
//	
//	Если ТипОшибки = 1 Тогда
//		ТекстСообщения = НСтр("ru = 'Штрихкод уже используется для другой номенклатуры'");
//	Иначе 
//		ТекстСообщения = НСтр("ru = 'Карточка 1С:Номенклатуры уже используется для другой номенклатуры'");
//	КонецЕсли;
//	
//	ФорматированныйТекст = СтроковыеФункцииКлиент.ФорматированнаяСтрока("%1:%4<a href = %2>%3</a>.", 
//		ТекстСообщения, ПолучитьНавигационнуюСсылку(НоменклатураСсылка), Строка(НоменклатураСсылка), Символы.ПС);
//	
//	ПоказатьПредупреждение(, ФорматированныйТекст);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ОбновитьСведенияОбОстатке()
//	
//	ОбновитьСведенияОбОстаткеНаСервере();
//	
//КонецПроцедуры

//&НаСервере
//Процедура ОбновитьСведенияОбОстаткеНаСервере()
//	
//	ДанныеПоОстаткам = Справочники.Номенклатура.ДанныеПоОстаткам(Объект.Ссылка, ИспользуютсяНесколькоСкладов);
//	ОбщийОстаток = ДанныеПоОстаткам.ОбщийОстаток;

//	СтрокиОписанияОстатка = Новый Массив;
//	СтрокиОписанияОстатка.Добавить(Формат(ОбщийОстаток, "ЧГ=0"));
//	СтрокиОписанияОстатка.Добавить(Строка(Объект.ЕдиницаИзмерения));
//	ОбщийОстатокСтрокой = СтрСоединить(СтрокиОписанияОстатка, " ");
//	
//	Если ИспользуютсяНесколькоСкладов Тогда
//		НоваяДекорация = Элементы.ДекорацияОбщийОстатокНесколькоСкладов;
//	Иначе
//		НоваяДекорация = Элементы.ДекорацияОбщийОстатокОдинСклад;
//	КонецЕсли;
//	
//	НоваяДекорация.Заголовок = Новый ФорматированнаяСтрока(ОбщийОстатокСтрокой, ШрифтыСтиля.ШрифтТекстаБаннера);
//		
//	Если ИспользуютсяНесколькоСкладов 
//		И ДанныеПоОстаткам.ОстаткиПоСкладам.Количество() > 0 Тогда
//		ВывестиОстаткиПоСкладам(ДанныеПоОстаткам.ОстаткиПоСкладам);
//	КонецЕсли;
//	
//	ОстатокПолучен = Истина;
//	
//	УправлениеФормой(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаСервере
//Процедура ВывестиОстаткиПоСкладам(ОстаткиПоСкладам)
//	
//	Для Каждого ОстатокПоСкладу Из ОстаткиПоСкладам Цикл
//		Индекс = ОстаткиПоСкладам.Индекс(ОстатокПоСкладу);
//		СтрокиОписанияОстатка = Новый Массив;
//		СтрокиОписанияОстатка.Добавить(Формат(ОстатокПоСкладу.Количество, "ЧГ=0"));
//		СтрокиОписанияОстатка.Добавить(Строка(ОстатокПоСкладу.ЕдиницаИзмерения));
//		Остаток = СтрСоединить(СтрокиОписанияОстатка, " ");
//		
//		НазваниеСклада = Новый ФорматированнаяСтрока(Строка(ОстатокПоСкладу.Склад), ШрифтыСтиля.ОбычныйШрифтТекста);
//		
//		Группа = Элементы.Найти(СтрШаблон("ГруппаОстатки%1", Индекс));
//		
//		Если Группа = Неопределено Тогда
//			ДобавитьГруппуОстатокНаСкладе(Индекс);
//		Иначе
//			Группа.Видимость = Истина;
//		КонецЕсли;
//		
//		ДекорацияСклад = Элементы.Найти(СтрШаблон("Склад%1", Индекс));
//		ДекорацияОстаток = Элементы.Найти(СтрШаблон("Остаток%1", Индекс));
//		
//		ДекорацияСклад.Заголовок = НазваниеСклада;
//		ДекорацияОстаток.Заголовок = Остаток;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ДобавитьГруппуОстатокНаСкладе(Индекс)
//	
//	Группа = Элементы.Найти(СтрШаблон("ГруппаОстатки%1", Индекс));
//	
//	Если Группа <> Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Группа = Элементы.Добавить(СтрШаблон("ГруппаОстатки%1", Индекс),
//		Тип("ГруппаФормы"), Элементы.ГруппаДетали);
//	
//	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
//	Группа.Заголовок = СтрШаблон(НСтр("ru='Группа остатки %1'"), Индекс);
//	
//	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
//	Группа.ОтображатьЗаголовок = Ложь;
//	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
//	
//	НоваяДекорация = Элементы.Добавить(СтрШаблон("Склад%1", Индекс),
//		Тип("ДекорацияФормы"), Группа);
//	
//	НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
//	НоваяДекорация.АвтоМаксимальнаяШирина = Ложь;
//	НоваяДекорация.МаксимальнаяШирина = 20;
//	НоваяДекорация.РастягиватьПоГоризонтали = Истина;
//	НоваяДекорация.Высота = 1;
//	НоваяДекорация.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
//	
//	НоваяДекорация = Элементы.Добавить(СтрШаблон("Остаток%1", Индекс),
//		Тип("ДекорацияФормы"), Группа);
//	
//	НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
//	НоваяДекорация.АвтоМаксимальнаяШирина = Ложь;
//	НоваяДекорация.МаксимальнаяШирина = 10;
//	НоваяДекорация.РастягиватьПоГоризонтали = Ложь;
//	НоваяДекорация.Высота = 1;
//	НоваяДекорация.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;

//КонецПроцедуры


//#КонецОбласти

//&НаСервереБезКонтекста
//Функция ВедетсяСкладскойУчет()
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Возврат ОбщегоНазначенияБП.ОпределитьПараметрыУчета().СкладскойУчет <> 0;
//КонецФункции 

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункцииБСП


//// СтандартныеПодсистемы.ПодключаемыеКоманды
//&НаКлиенте
//Процедура Подключаемый_ВыполнитьКоманду(Команда)
//	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
//КонецПроцедуры

//&НаСервере
//Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
//	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ОбновитьКоманды()
//	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
//КонецПроцедуры
//// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//&НаКлиенте
//Процедура ВидНоменклатурыПриИзменении(Элемент)
//	
//	ВидНоменклатурыПриИзмененииНаСервере();
//	УправлениеФормой(ЭтаФорма);
//	
//КонецПроцедуры

//&НаСервере
//Процедура ВидНоменклатурыПриИзмененииНаСервере()
//	
//	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
//		Объект.ВидНоменклатуры = ОсновнойВидНоменклатуры;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
//		Объект.Услуга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "Услуга");
//	Иначе
//		Объект.Услуга = Ложь;
//	КонецЕсли;
//	
//	Если Объект.Услуга Тогда
//		Объект.СтатьяЗатрат = Неопределено;
//		Объект.КодОКП = Неопределено;
//		Объект.КодОКПД2 = Неопределено;
//		Объект.КодТНВЭД = Неопределено;
//		ОКПНаименование = "";
//		ОКПД2Наименование = "";
//		ТНВЭДНаименование = "";
//		ВидНоменклатурнойКлассификацииНаименование = "";
//		
//		Объект.ПродукцияМаркируемаяДляГИСМ  = Ложь;
//		Объект.ТабачнаяПродукция            = Ложь;
//		Объект.ОбувнаяПродукция             = Ложь;
//		Объект.СредствоИндивидуальнойЗащиты = Ложь;
//	Иначе
//		Объект.ПериодичностьУслуги = Неопределено;
//	КонецЕсли;
//	
//КонецПроцедуры


//#КонецОбласти

//#Область ОбработчикиКомандФормы

//&НаКлиенте
//Процедура ПоказатьКонтекстныеНовости(Команда)

//	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
//		ЭтаФорма,
//		Команда
//	);

//КонецПроцедуры

//&НаКлиенте
//Процедура ОсновнаяСпецификацияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	УдалосьЗаписатьОбъект = Истина;
//	
//	Если (Объект.Ссылка.Пустая() Или Модифицированность) Тогда
//		УдалосьЗаписатьОбъект = Записать();
//	КонецЕсли;
//	
//	Если УдалосьЗаписатьОбъект Тогда
//		ЗначенияЗаполнения = Новый Структура;
//		ЗначенияЗаполнения.Вставить("Владелец", Объект.Ссылка);
//		
//		ПараметрыФормы = Новый Структура;
//		ПараметрыФормы.Вставить("Ключ",                          Объект.ОсновнаяСпецификацияНоменклатуры);
//		ПараметрыФормы.Вставить("ОткрытоИзКарточкиНоменклатуры", Истина);
//		ПараметрыФормы.Вставить("ЗначенияЗаполнения",            ЗначенияЗаполнения);
//		
//		ОткрытьФорму("Справочник.СпецификацииНоменклатуры.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПодсказкаЦеныПродажиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
//	
//	Если НавигационнаяСсылкаФорматированнойСтроки = "e1cib/data/Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦеныПродажи" Тогда
//		
//		СтандартнаяОбработка = Ложь; // Форму будем открывать с параметром
//		
//		ПараметрыФормы = Новый Структура;
//		ПараметрыФормы.Вставить("ОткрытаИзКарточкиНоменклатуры", Истина);
//		
//		ОткрытьФорму("Обработка.ПанельАдминистрированияБП.Форма.ФормаНастройкиЦеныПродажи", ПараметрыФормы);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЦенаПродажиИзНоменклатурыПриИзменении(Элемент)
//	ЦенаПродажиМодифицирована = Истина;
//КонецПроцедуры

//&НаКлиенте
//Процедура ВалютаЦеныПродажиСВалютамиПриИзменении(Элемент)
//	ЦенаПродажиМодифицирована = Истина;
//КонецПроцедуры

//&НаКлиенте
//Процедура ИсторияСтавкиНДСНажатие(Элемент)
//		
//	ПараметрыФормы = Новый Структура("ТекущийВидСтавкиНДС, ИсторияВидаСтавкиНДС, ТолькоПросмотр", 
//		Объект.ВидСтавкиНДС, Объект.ИсторияВидаСтавкиНДС, ТолькоПросмотр);
//	
//	ОткрытьФорму("Справочник.Номенклатура.Форма.РедактированиеИсторииВидаСтавкиНДС",
//		ПараметрыФормы, ЭтотОбъект);

//КонецПроцедуры

//&НаКлиенте
//Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
//		
//	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Номенклатура.Форма.РедактированиеИсторииВидаСтавкиНДС") Тогда
//		
//		УстановитьВидСтавкиНДСПослеРедактированияИстории(ВыбранноеЗначение.ИсторияВидаСтавкиНДС);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура УстановитьВидСтавкиНДСПослеРедактированияИстории(НаборЗаписей)
//	
//	Модифицированность = Истина;
//	ВИсторииЕстьСтавкаБезНДС = Ложь;
//	ЕстьИсторияВидовСтавокНДС = Ложь;
//	
//	НаборЗаписей.Сортировать("Период");
//	
//	Объект.ИсторияВидаСтавкиНДС.Очистить();
//	Если НаборЗаписей.Количество() > 1 Тогда
//		ЕстьИсторияВидовСтавокНДС = Истина;
//		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
//			ЗаписьИстории = Объект.ИсторияВидаСтавкиНДС.Добавить();
//			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
//			Если ЗаписьНабора.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.БезНДС Тогда
//				ВИсторииЕстьСтавкаБезНДС = Истина;
//			КонецЕсли;
//			Если ЗаписьНабора.Период <= ТекущаяДатаПользователя Тогда
//				АктуальныйВидСтавкиНДС = ЗаписьНабора.ВидСтавкиНДС;
//			КонецЕсли; 
//		КонецЦикла;
//	КонецЕсли;
//	
//	Объект.ВидСтавкиНДС = НаборЗаписей[НаборЗаписей.Количество()-1].ВидСтавкиНДС;
//	
//	Если Не ЗначениеЗаполнено(АктуальныйВидСтавкиНДС) Тогда
//		АктуальныйВидСтавкиНДС = Объект.ВидСтавкиНДС;
//	КонецЕсли;
//	
//	АктуальнаяСтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(АктуальныйВидСтавкиНДС, ТекущаяДатаПользователя);

//	Справочники.Номенклатура.УстановитьАктуальноеЗначениеИсторииВидаСтавкиНДС(
//		Объект.ВидСтавкиНДС , Объект.ИсторияВидаСтавкиНДС);
//		
//	УправлениеФормой(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПорядокИспользованияСпецодеждыПриИзменении(Элемент)
//	
//	УправлениеФормой(ЭтаФорма);
//	Если ПорядокИспользованияСпецодежды = 0 Тогда
//		СрокПолезногоИспользования = 0;
//	ИначеЕсли СрокПолезногоИспользования = 0 Тогда
//		СрокПолезногоИспользования = ПолучитьСрокПолезногоИспользования(Объект.Ссылка);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыПоДаннымСервиса(Команда)
//	
//	ЗаполнитьРеквизитыФормыПоДаннымСервиса(Команда);
//	
//КонецПроцедуры

//#Область ЭлектронноеВзаимодействиеРаботаСНоменклатурой

//// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
//&НаКлиенте
//Процедура Подключаемый_НажатиеРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
//	
//	РаботаСНоменклатуройКлиент.НажатиеГиперссылки(ЭтотОбъект, Элемент, СтандартнаяОбработка,
//		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
//		
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ОбработкаНавигационнойСсылкиРаботаСНоменклатурой(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
//	
//	РаботаСНоменклатуройКлиент.НажатиеГиперссылки(ЭтотОбъект, Элемент, СтандартнаяОбработка,
//		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_НачалоВыбораРаботаСНоменклатурой(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	РаботаСНоменклатуройКлиент.ВыбратьОбъектСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка, Ложь, 
//		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ОчисткаРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
//	
//	РаботаСНоменклатуройКлиент.НажатиеОчиститьНоменклатуру(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_НажатиеРежимОбновленияРаботаСНоменклатурой(Элемент)
//	
//	РаботаСНоменклатуройКлиент.НажатиеРежимОбновления(ЭтотОбъект, ПодготовитьДанныеФормы(), 
//		Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект));
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ОткрытьРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
//	
//	РаботаСНоменклатуройКлиент.ОткрытьКарточкуОбъектаСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ИзменениеТекстаРедактированияРаботаСНоменклатурой(Элемент, Текст, СтандартнаяОбработка)
//	
//	РаботаСНоменклатуройКлиент.ИзменениеТекстаСобратьСтрокуПоиска(ЭтотОбъект, Текст, Элемент, СтандартнаяОбработка)
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПриИзмененииРаботаСНоменклатурой(Элемент)
//	
//	РаботаСНоменклатуройКлиент.ПриИзмененииСобратьСтрокуПоиска(ЭтотОбъект, Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПослеЗаписиРаботаСНоменклатурой()
//	
//	РаботаСНоменклатуройКлиент.ПослеЗаписиФормаНоменклатурыПродолжение(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗакрытиеФормыВыбораОбъектаСервиса(ДанныеОбъекта, ДополнительныеПараметры) Экспорт 
//	
//	ДополнительныеПараметры.Вставить("НеОткрыватьФормуЗаполненияНоменклатуры", Объект.Ссылка.Пустая());
//	
//	РаботаСНоменклатуройКлиент.ОбработкаОповещенияЗакрытиеФормыВыбора(
//		ДанныеОбъекта, ДополнительныеПараметры, ПодготовитьДанныеФормы(),
//			Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект));
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗакрытиеФормыЗаполненияОбъекта(ПараметрыЗакрытияФормы, ДополнительныеПараметры) Экспорт 
//	
//	ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы, ДополнительныеПараметры);
//	
//	НастроитьФормуПриДлительнойОперации(ЭтотОбъект, Ложь);
//	
//КонецПроцедуры

//&НаСервере
//Функция ПодготовитьДанныеФормы()
//	
//	Возврат РаботаСНоменклатурой.ПодготовитьДанныеДляИнтерактивногоЗаполнения(ЭтотОбъект);
//			
//КонецФункции

//&НаСервере
//Процедура ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы, ДополнительныеПараметры)
//	
//	РаботаСНоменклатурой.ЗаполнитьРеквизитыФормы(ЭтотОбъект, ПараметрыЗакрытияФормы);
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Функция ВидПродукцииИС(ГосударственныйКонтроль)
//	
//	Если ГосударственныйКонтроль = "МОТП" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
//	ИначеЕсли ГосударственныйКонтроль = "ОбувнаяПродукция" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
//	ИначеЕсли ГосударственныйКонтроль = "Велосипеды" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды");
//	ИначеЕсли ГосударственныйКонтроль = "Духи" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи");
//	ИначеЕсли ГосударственныйКонтроль = "КреслаКоляски" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски");
//	ИначеЕсли ГосударственныйКонтроль = "ЛегкаяПромышленность" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность");
//	ИначеЕсли ГосударственныйКонтроль = "МолочнаяПродукцияПодконтрольнаяВЕТИС" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС");
//	ИначеЕсли ГосударственныйКонтроль = "МолочнаяПродукцияБезВЕТИС" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС");
//	ИначеЕсли ГосударственныйКонтроль = "Фотоаппараты" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты");
//	ИначеЕсли ГосударственныйКонтроль = "Шины" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
//	ИначеЕсли ГосударственныйКонтроль = "АльтернативныйТабак" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
//	ИначеЕсли ГосударственныйКонтроль = "УпакованнаяВода" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода");
//	ИначеЕсли ГосударственныйКонтроль = "Антисептики" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики");
//	ИначеЕсли ГосударственныйКонтроль = "БАДы" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы");
//	ИначеЕсли ГосударственныйКонтроль = "НикотиносодержащаяПродукция" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция");
//	ИначеЕсли ГосударственныйКонтроль = "Пиво" Тогда
//		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво");
//	КонецЕсли;

//	Возврат ВидПродукцииИС;
//	
//КонецФункции

//&НаКлиентеНаСервереБезКонтекста
//Функция ПараметрыОписанияМаркируемогоТовара(Ссылка, ГосударственныйКонтроль)
//	
//	ПараметрыОписанияМаркируемогоТовара = ИнтеграцияИСМПКлиентСервер.ПараметрыФормированияДанныхПредставленияНастройкиНоменклатуры();
//	ПараметрыОписанияМаркируемогоТовара.СсылкаНаОбъект = Ссылка;
//	ПараметрыОписанияМаркируемогоТовара.ВидПродукции = ВидПродукцииИС(ГосударственныйКонтроль);
//	ПараметрыОписанияМаркируемогоТовара.ДопустимаНастройкаЛогистическойЕдиницы = Ложь;
//	ПараметрыОписанияМаркируемогоТовара.ПредставлениеВНесколькоСтрок = Ложь;

//	Возврат ПараметрыОписанияМаркируемогоТовара;
//	
//КонецФункции

//&НаКлиенте
//Процедура ОписаниеМаркируемогоТовараОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	
//	ПараметрыОбработкиДействия = ИнтеграцияИСМПКлиент.ПараметрыОткрытияФормыНастройкиНоменклатуры();
//	ОповещениеОЗавершении = Новый ОписаниеОповещения("СвойстваМаркируемогоТовараЗавершение", ЭтотОбъект);
//	
//	ПараметрыОбработкиДействия.ФормаВладелец = ЭтотОбъект;
//	ПараметрыОбработкиДействия.Номенклатура = Объект.Ссылка;
//	ПараметрыОбработкиДействия.ВидПродукции = ВидПродукцииИС(ГосударственныйКонтроль);
//	
//	ПараметрыОбработкиДействия.ДопустимоИспользованиеУпаковок = Ложь;
//	ПараметрыОбработкиДействия.ДопустимыУпаковкиМеньшеЕдиницыХранения = Ложь;
//	ПараметрыОбработкиДействия.КарточкаТовараСодержитВесовойПризнак = Неопределено;
//	ПараметрыОбработкиДействия.ДопустимаНастройкаЛогистическойЕдиницы = Ложь;
//	
//	ИнтеграцияИСМПКлиент.ОбработкаДействияНастройкиНоменклатуры(ОповещениеОЗавершении, ПараметрыОбработкиДействия);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура СвойстваМаркируемогоТовараЗавершение(Параметры, ДополнительныеПараметры) Экспорт 
//	
//	ПараметрыОписанияМаркируемогоТовара = ПараметрыОписанияМаркируемогоТовара(Объект.Ссылка, ГосударственныйКонтроль);
//	ОписаниеМаркируемогоТовара = ИнтеграцияИСМПВызовСервера.ПредставлениеНастройкиПараметровНоменклатуры(ПараметрыОписанияМаркируемогоТовара);
//	
//КонецПроцедуры

//&НаСервере
//Процедура ДополнительныеРеквизитыМаркировкиВидимость()
//	
//	Элементы.ОписаниеМаркируемогоТовара.Видимость = ЗначениеЗаполнено(ОписаниеМаркируемогоТовара);
//	
//КонецПроцедуры

//// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

//#КонецОбласти

//#КонецОбласти