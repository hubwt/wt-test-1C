#Область ОписаниеПеременных
//РаботаСВнешнимОборудованием
Перем глПодключаемоеОборудование Экспорт; // для кэширования на клиенте
Перем глПодключаемоеОборудованиеСобытиеОбработано Экспорт; // для предотвращения повторной обработки события
Перем глПодключаемоеОборудованиеСобытиеОбработаноДанные Экспорт; // для предотвращения повторной обработки события
Перем глДоступныеТипыОборудования Экспорт;
//Конец РаботаСВнешнимОборудованием

//++ НЕ ГОСИС
Перем глКомпонентаОбменаСМобильнымиПриложениями Экспорт;
Перем глФормаНачальнойНастройкиПрограммы Экспорт;
//-- НЕ ГОСИС

// СтандартныеПодсистемы

// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие - хранилище переменных, где:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Инициализация (на примере СообщенияДляЖурналаРегистрации):
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Использование (на примере СообщенияДляЖурналаРегистрации):
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
Перем ПараметрыПриложения Экспорт;

// Конец СтандартныеПодсистемы

// ТехнологияСервиса
Перем ОповещениеПриПримененииЗапросовНаИспользованиеВнешнихРесурсовВМоделиСервиса Экспорт;
// Конец ТехнологияСервиса

// Параметры для фоновых заданий
Перем ИдентификаторФоновогоЗадания Экспорт;


// СтандартныеПодсистемы

// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие - хранилище переменных, где:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Инициализация (на примере СообщенияДляЖурналаРегистрации):
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Использование (на примере СообщенияДляЖурналаРегистрации):
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
//Перем ПараметрыПриложения Экспорт;

// Конец СтандартныеПодсистемы

#КонецОбласти

#Область ОбработчикиСобытий



Процедура ПередНачаломРаботыСистемы()
	
	
	
	///+ГомзМА 17.11.2023
	//Временное ограничение на вход в приложение с 2:30 до 3:30 для выгрузки бэкапов
	ВремяНачалаБлокировки 		= НачалоДня(ТекущаяДата()) + 3600 * 2 + 1800;
	ВремяОкончанияБлокировки 	= НачалоДня(ТекущаяДата()) + 3600 * 3 + 1800;
	
	Если ТекущаяДата() > ВремяНачалаБлокировки И ТекущаяДата() < ВремяОкончанияБлокировки Тогда
		ЗавершитьРаботуСистемы();
	Иначе
	///-ГомзМА 17.11.2023
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы();
	// Конец СтандартныеПодсистемы
	
	///+ГомзМА 02.08.2023
	//#Если МобильныйКлиент ИЛИ ВебКлиент Тогда
	//	Константы.ЭтоМобильноеПриложение = Истина;
	//	УстановитьПараметрыФункциональныхОпцийИнтерфейса(ЭтоМобильноеПриложение);
	//#ИначеЕсли МобильныйКлиент ИЛИ ВебКлиент Тогда
	//	
	//#КонецЕсли
	///-ГомзМА 02.08.2023
	КонецЕсли;

	
КонецПроцедуры


Процедура ПриНачалеРаботыСистемы()
	
	//СоединенияИБ.ИнформацияОСоединениях(
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы
	дт_ШрифтРубляКлиент.ПриНачалеРаботыСистемы();
	
	дт_ПоказателиСотрудниковКлиент.ПриНачалеРаботыСистемы();
	//Возврат Ложь;
	
	///+ГомзМА 02.08.2023
	//#Если МобильныйКлиент ИЛИ ВебКлиент Тогда
	// Определить размеры экрана.
	//Экраны = ПолучитьИнформациюЭкрановКлиента();
	//
	//// Для примера допускаем, что экран один.
	//// Но если экранов несколько, нужно анализировать их все.
	//ВысотаЭкрана = Экраны[0].Высота;
	//ШиринаЭкрана = Экраны[0].Ширина;
	//
	//// Если экран маленький, включить только панель инструментов.
	//// Если ... 
	//РаботаСМобильнымПриложениемВызовСервера.ВыполнитьНастройкуПанелей();
	// КонецЕсли;
	
	ОбновитьИнтерфейс();
	//#КонецЕсли
	///-ГомзМА 02.08.2023	
	//ГенераторШтрихКодаКлиент.УстановитьКомпонентуШтрихКодирования("");
	МассивМененджеров = дт_Продажи.ПолучитьМассивМенеджеров();
	Для Каждого Менеджер Из МассивМененджеров Цикл
		Если ПользователиКлиентСервер.ТекущийПользователь() = Менеджер ТОгда
		ФормаМенеджера = ПолучитьФорму("ОбщаяФорма.РейтингМенеджера");
		ФормаМенеджера.Открыть();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	// Конец СтандартныеПодсистемы
	
	//дт_ПоказателиСотрудниковКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
Если глПодключаемоеОборудованиеСобытиеОбработаноДанные <> Неопределено
		И глПодключаемоеОборудованиеСобытиеОбработаноДанные[Данные] <> Неопределено Тогда
		глПодключаемоеОборудованиеСобытиеОбработаноДанные.Удалить(Данные);
		Возврат;
	КонецЕсли;
	
	глПодключаемоеОборудованиеСобытиеОбработано = Ложь;
	
	//РаботаСВнешнимОборудованием
	// Подготовить данные
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";
	
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);
Оповестить(Событие,Данные,Источник);	
	// Передать на обработку данные
	Результат = Истина;
	#Если МобильныйКлиент Тогда
		Выполнить("Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки)");
	#Иначе
		//Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	#КонецЕсли
	Если Не Результат Тогда
		#Если МобильныйКлиент Тогда
			Выполнить("ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(""ru='При обработке внешнего события от устройства произошла ошибка.'"")+ Символы.ПС + ОписаниеОшибки)");
		#Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При обработке внешнего события от устройства произошла ошибка.';
																	|en = 'An error occurred when processing an external event from the device.'")
			+ Символы.ПС + ОписаниеОшибки);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры



#КонецОбласти  

  &НаСервере
Функция  ПроверкаОткрытогоСеансаТекушегоПользователя()   Экспорт
	ТекущийПользовательИБ  =  ПользователиИнформационнойБазы.ТекущийПользователь();
	СоединенияИБ  =  СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей();
	СеансОткрыт   = Ложь;
	Для  каждого  СоединениеИБ  Из  СоединенияИБ  Цикл
		Если  Найти(СоединениеИБ.ИмяПриложения,   "1CV8")   =  0  Тогда
			Продолжить; 
		КонецЕсли;
		Если  СоединениеИБ.Пользователь.УникальныйИдентификатор  =  ТекущийПользовательИБ.УникальныйИдентификатор  Тогда
			Если  СеансОткрыт  Тогда
				Возврат  Истина; 
			Иначе
				СеансОткрыт  =  Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции


