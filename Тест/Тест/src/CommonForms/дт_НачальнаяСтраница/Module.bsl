#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ГруппыКлиентовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// +++ Комлев АА +++ 17/10/24 
	Если ТекущаяСтраница = Элементы.Активные Тогда
		ДатаНачалаАКБ = НачалоДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 30);
		ДатаОкончанияАКБ = КонецДня(Дата(ТекущаяДата()));
		СписокАктивные.Параметры.УстановитьЗначениеПараметра("ДатаНачалаАКБ", ДатаНачалаАКБ);
		СписокАктивные.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияАКБ", ДатаОкончанияАКБ);
		СписокАктивные.Параметры.УстановитьЗначениеПараметра("ОбщийКлиент", ПолучитьОбщегоКлиентаПользователя());
		КоличествоАктивных = КоличествоСтрокВСписке("СписокАктивные");
		РассчитатьИтогиАктивные();
	ИначеЕсли ТекущаяСтраница = Элементы.ГорячиеКлиенты Тогда
		ДатаВПрошлом  = НачалоДня(ТекущаяДата() - (24 * 60 * 60) * 10);
		СписокГорячие.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ДатаВПрошлом);
		СписокГорячие.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ТекущаяДата()));
		СписокГорячие.Параметры.УстановитьЗначениеПараметра("ОбщийКлиент", ПолучитьОбщегоКлиентаПользователя());
		РассчитатьИтогиГорячие();
		КоличествоГорячих = КоличествоСтрокВСписке("СписокГорячие");
	ИначеЕсли ТекущаяСтраница = Элементы.Теплые Тогда
		ДатаНачалаАКБ = НачалоДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 30);
		ДатаОкончанияАКБ = КонецДня(Дата(ТекущаяДата()));
		СписокТеплые.Параметры.УстановитьЗначениеПараметра("ДатаНачалаАКБ", ДатаНачалаАКБ);
		СписокТеплые.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияАКБ", ДатаОкончанияАКБ);
		ДатаНачалаТеплые = НачалоДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 90);
		ДатаОкончанияТеплые = КонецДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 31);
		СписокТеплые.Параметры.УстановитьЗначениеПараметра("ДатаНачалаТеплые", ДатаНачалаТеплые);
		СписокТеплые.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияТеплые", ДатаОкончанияТеплые);
		СписокТеплые.Параметры.УстановитьЗначениеПараметра("ОбщийКлиент", ПолучитьОбщегоКлиентаПользователя());
		КоличествоТеплых = КоличествоСтрокВСписке("СписокТеплые");
		РассчитатьИтогиТеплые();
	ИначеЕсли ТекущаяСтраница = Элементы.Потенциальные Тогда
		ДатаНачалаАКБ = НачалоДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 30);
		ДатаОкончанияАКБ = КонецДня(Дата(ТекущаяДата()));
		СписокПотенциальные.Параметры.УстановитьЗначениеПараметра("ДатаНачалаАКБ", ДатаНачалаАКБ);
		СписокПотенциальные.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияАКБ", ДатаОкончанияАКБ);

		ДатаНачалаТеплые = НачалоДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 90);
		ДатаОкончанияТеплые = КонецДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 31);
		СписокПотенциальные.Параметры.УстановитьЗначениеПараметра("ДатаНачалаТеплые", ДатаНачалаТеплые);
		СписокПотенциальные.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияТеплые", ДатаОкончанияТеплые);

		ДатаНачалаПотенциальные = НачалоДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 90);
		ДатаОкончанияПотенциальные = КонецДня(Дата(ТекущаяДата()));
		СписокПотенциальные.Параметры.УстановитьЗначениеПараметра("ДатаНачалаПотенциальные", ДатаНачалаПотенциальные);
		СписокПотенциальные.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияПотенциальные",
			ДатаОкончанияПотенциальные);
		СписокПотенциальные.Параметры.УстановитьЗначениеПараметра("ОбщийКлиент", ПолучитьОбщегоКлиентаПользователя());
		КоличествоПотенциальных = КоличествоСтрокВСписке("СписокПотенциальные");
		РассчитатьИтогиПотенциальные();
	ИначеЕсли ТекущаяСтраница = Элементы.Холодные Тогда
		ДатаНачалаАКБ = НачалоДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 30);
		ДатаОкончанияАКБ = КонецДня(Дата(ТекущаяДата()));
		СписокХолодные.Параметры.УстановитьЗначениеПараметра("ДатаНачалаАКБ", ДатаНачалаАКБ);
		СписокХолодные.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияАКБ", ДатаОкончанияАКБ);

		ДатаНачалаТеплые = НачалоДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 90);
		ДатаОкончанияТеплые = КонецДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 31);
		СписокХолодные.Параметры.УстановитьЗначениеПараметра("ДатаНачалаТеплые", ДатаНачалаТеплые);
		СписокХолодные.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияТеплые", ДатаОкончанияТеплые);

		ДатаНачалаПотенциальные = НачалоДня(Дата(ТекущаяДата()) - (24 * 60 * 60) * 90);
		ДатаОкончанияПотенциальные = КонецДня(Дата(ТекущаяДата()));
		СписокХолодные.Параметры.УстановитьЗначениеПараметра("ДатаНачалаПотенциальные", ДатаНачалаПотенциальные);
		СписокХолодные.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияПотенциальные", ДатаОкончанияПотенциальные);
		СписокХолодные.Параметры.УстановитьЗначениеПараметра("ОбщийКлиент", ПолучитьОбщегоКлиентаПользователя());
		КоличествоХолодных = КоличествоСтрокВСписке("СписокХолодные");
		РассчитатьИтогиХолодные();
	КонецЕсли;
	// --- Комлев АА --- 17/10/24 
КонецПроцедуры


&НаСервереБезКонтекста
Процедура СписокАктивныеПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныеОбработкаЗапросаОбновления(Элемент)

КонецПроцедуры

&НаСервере
Процедура СписокАктивныеПриОбновленииСоставаПользовательскихНастроекНаСервере(Элемент, СтандартнаяОбработка)

КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

КонецПроцедуры





///+ГомзМА 27.03.2023

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	////// Доработка вкладка ДанныеСотрудника (Мазин)________________________________________НАЧАЛО 
 	// ++МазинЕС 28-05-24
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("Практикант")) Тогда
		Элементы.ГруппаСтраницы.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	// --МазинЕС 28-05-24

	ВкладкаДанныеСотрудникаЗаполнение(); // Мазин 22.04.24
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);
	СсылкаТекПользователяПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяТекПользователя);
	СписокПомощьВПродажеМой.Параметры.УстановитьЗначениеПараметра("Сотрудник", СсылкаТекПользователя);
	ДатаНачала=Период.ДатаНачала;
	ДатаОкончания=Период.ДатаОкончания;  
	
	// Задание Параметров динамических списков (Перенос информации из справочника сотрудника)
	СписокПомощьВПродажеМой.Параметры.УстановитьЗначениеПараметра	("НачалоПериода", ДатаНачала);
	СписокПомощьВПродажеМой.Параметры.УстановитьЗначениеПараметра	("КонецПериода", ДатаОкончания);
	СписокКлиенты.Параметры.УстановитьЗначениеПараметра				("Пользователь",
		СсылкаТекПользователяПользователь);
	СписокКлиенты.Параметры.УстановитьЗначениеПараметра				("Сотрудник", СсылкаТекПользователя);
	СписокПродажиПользователь.Параметры.УстановитьЗначениеПараметра ("Пользователь", СсылкаТекПользователяПользователь);
	СписокДоставки.Параметры.УстановитьЗначениеПараметра			("Сотрудник", СсылкаТекПользователя);
	СписокПеремещениеТовара.Параметры.УстановитьЗначениеПараметра	("Ответственный",
		СсылкаТекПользователяПользователь);
	СписокУчетТоваров.Параметры.УстановитьЗначениеПараметра			("Ответственный",
		СсылкаТекПользователяПользователь);
	СписокПриёмкаТовара.Параметры.УстановитьЗначениеПараметра		("Пользователь", СсылкаТекПользователяПользователь);
	СписокУстановкаМестаХранения.Параметры.УстановитьЗначениеПараметра("Пользователь",
		СсылкаТекПользователяПользователь);
	СписокВыполненныеРаботы.Параметры.УстановитьЗначениеПараметра	("Пользователь", СсылкаТекПользователяПользователь);
	СписокСозданныеЗакзНаряды.Параметры.УстановитьЗначениеПараметра ("Пользователь", СсылкаТекПользователяПользователь);
	СписокУщербы.Параметры.УстановитьЗначениеПараметра				("Сотрудник", СсылкаТекПользователя);
	СписокТабель.Параметры.УстановитьЗначениеПараметра				("Сотрудник", СсылкаТекПользователя);
	СписокТабель.Параметры.УстановитьЗначениеПараметра				("НачалоПериода", Период.ДатаНачала);
	СписокТабель.Параметры.УстановитьЗначениеПараметра				("КонецПериода", Период.ДатаОкончания);
	СписокВыплаты.Параметры.УстановитьЗначениеПараметра				("Пользователь",
		СсылкаТекПользователяПользователь);
	СприсокПоказателиНастройка.Параметры.УстановитьЗначениеПараметра("Пользователь", СсылкаТекПользователяПользователь);
	СписокПоказатели.Параметры.УстановитьЗначениеПараметра			("Сотрудник", СсылкаТекПользователя);
	СписокДети.Параметры.УстановитьЗначениеПараметра				("Пользователь", СсылкаТекПользователяПользователь);
	//СписокТМЦ.Параметры.УстановитьЗначениеПараметра					("Пользователь",СсылкаТекПользователяПользователь);
	//ТМЦ.Параметры.УстановитьЗначениеПараметра						("Ответственный",СсылкаТекПользователяПользователь);
	БанковскиеСчетаСотрудников.Параметры.УстановитьЗначениеПараметра("Пользователь", СсылкаТекПользователяПользователь);
	//СписокРасходники.Параметры.УстановитьЗначениеПараметра			("Ответственный",СсылкаТекПользователяПользователь);
	СписокНадбавки.Параметры.УстановитьЗначениеПараметра			("Сотрудник", СсылкаТекПользователя);
	СписокПоказателиЗП.Параметры.УстановитьЗначениеПараметра		("Сотрудник", СсылкаТекПользователя);
	СписокМоиЗадачи.Параметры.УстановитьЗначениеПараметра			("Исполнитель", СсылкаТекПользователяПользователь);
	СписокАдминистративных.Параметры.УстановитьЗначениеПараметра	("Сотрудник", СсылкаТекПользователя);
	СписокОтпусков.Параметры.УстановитьЗначениеПараметра			("Сотрудник", СсылкаТекПользователя);
	СписокОбязанностей.Параметры.УстановитьЗначениеПараметра		("Сотрудник", СсылкаТекПользователя);
	СписокОбязанностей.Параметры.УстановитьЗначениеПараметра		("Должность", ТекДолжностьСотрудника());
	ДолженЗнать.Параметры.УстановитьЗначениеПараметра				("Сотрудник", СсылкаТекПользователя);
	СписокКвалификаций.Параметры.УстановитьЗначениеПараметра		("Сотрудник", СсылкаТекПользователя);
	СписокКадровыхДвижений.Параметры.УстановитьЗначениеПараметра	("Сотрудник", СсылкаТекПользователя);
	РолиWT10.Параметры.УстановитьЗначениеПараметра					("Пользователь",
		СсылкаТекПользователяПользователь);

	СсылкаНаФото = ПолучитьНавигационнуюСсылку(Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя).Ссылка,
		"Фото");
	Элементы.СсылкаНаФото.РазмерКартинки = РазмерКартинки.АвтоРазмер;   
	
	////// МАЗИН________________________________________________________________________________КОНЕЦ
	//
	//////++++ Форма МоиНапоминания ++++//////
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());
	//////---- Форма МоиНапоминания ----//////

	УстановитьВидимость();
	
	//////++++ Форма ДенежныеПоказатели ++++//////
	///+ГомзМА 31.08.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_Зарплата"))
		Или ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава"))
		Или ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти(
		"ПомощникБухгалтера")) Тогда
		ПериодДенеджыеПоказатели.ДатаНачала 		= НачалоДня(ТекущаяДатаСеанса());
		ПериодДенеджыеПоказатели.ДатаОкончания 	= КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	///-ГомзМА 31.08.2023
	
	/////+ГомзМА 15.09.2023
	//Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПомощникБухгалтера")) Тогда
	//	ИзменитьТекстЗапросаДинамическогоСпискаСписокДетализацияРасходов();
	//КонецЕсли;
	/////-ГомзМА 15.09.2023
	
	///+ГомзМА 31.08.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_Зарплата"))
		Или ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава"))
		Или ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти(
		"ПомощникБухгалтера")) Тогда

		СписокДенежныеПоказатели.Параметры.УстановитьЗначениеПараметра("ДатаНачалаДП",
			ПериодДенеджыеПоказатели.ДатаНачала);
		СписокДенежныеПоказатели.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияДП",
			ПериодДенеджыеПоказатели.ДатаОкончания);

		МассивСчетаООО = Новый Массив;
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000003"));
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000010"));
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000011"));
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000013"));
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000014"));
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000015"));
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000023"));
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000025"));
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000039"));
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000042"));
		МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000043"));

		МассивСчетаИП = Новый Массив;
		МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000002"));
		МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000009"));
		МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000021"));
		МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000029"));
		МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000030"));
		МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000032"));
		МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000037"));
		//Волков ИО 01.12.23 ++
		МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000040"));
		//Волков ИО 01.12.23 --
		МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000046"));
		МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000052"));
		МассивСчетаКарта = Новый Массив;
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000004"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000006"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000012"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000017"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000022"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000024"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000026"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000027"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000031"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000033"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000035"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000041"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000045"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000049"));
		МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000051"));
		МассивСчетаНаличка = Новый Массив;
		МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000001"));
		МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000005"));
		МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000034"));
		МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000036"));
		МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000047"));
		МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000048"));
		/// Комлев 21/05/24 +++
		МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000038"));
		/// Комлев 21/05/24 ---
		СписокДенежныеПоказатели.Параметры.УстановитьЗначениеПараметра("СчетООО", МассивСчетаООО);
		СписокДенежныеПоказатели.Параметры.УстановитьЗначениеПараметра("СчетИП", МассивСчетаИП);
		СписокДенежныеПоказатели.Параметры.УстановитьЗначениеПараметра("СчетКарта", МассивСчетаКарта);
		СписокДенежныеПоказатели.Параметры.УстановитьЗначениеПараметра("СчетНаличка", МассивСчетаНаличка);
		
		///+ГомзМА 07.09.2023
		СписокНеоплаченныеЗаявкиНаРасход.Параметры.УстановитьЗначениеПараметра("ДатаНачалаДП", '00010101');
		СписокНеоплаченныеЗаявкиНаРасход.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияДП",
			ПериодДенеджыеПоказатели.ДатаОкончания);

		СписокНеоплаченныеЗаявкиНаРасход.Параметры.УстановитьЗначениеПараметра("СчетООО", МассивСчетаООО);
		СписокНеоплаченныеЗаявкиНаРасход.Параметры.УстановитьЗначениеПараметра("СчетИП", МассивСчетаИП);
		СписокНеоплаченныеЗаявкиНаРасход.Параметры.УстановитьЗначениеПараметра("СчетКарта", МассивСчетаКарта);
		СписокНеоплаченныеЗаявкиНаРасход.Параметры.УстановитьЗначениеПараметра("СчетНаличка", МассивСчетаНаличка);
		///-ГомзМА 07.09.2023
		
		///+ГомзМА 14.09.2023
		СписокОжидаемыйПриходДенег.Параметры.УстановитьЗначениеПараметра("СчетООО", МассивСчетаООО);
		СписокОжидаемыйПриходДенег.Параметры.УстановитьЗначениеПараметра("СчетИП", МассивСчетаИП);
		СписокОжидаемыйПриходДенег.Параметры.УстановитьЗначениеПараметра("СчетКарта", МассивСчетаКарта);
		СписокОжидаемыйПриходДенег.Параметры.УстановитьЗначениеПараметра("СчетНаличка", МассивСчетаНаличка);
		///-ГомзМА 14.09.2023
		
		///+ГомзМА 15.09.2023
		СписокДетализацияРасходов.Параметры.УстановитьЗначениеПараметра("ДатаНачалаДП",
			ПериодДенеджыеПоказатели.ДатаНачала);
		СписокДетализацияРасходов.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияДП",
			ПериодДенеджыеПоказатели.ДатаОкончания);

		СписокДетализацияРасходов.Параметры.УстановитьЗначениеПараметра("СчетООО", МассивСчетаООО);
		СписокДетализацияРасходов.Параметры.УстановитьЗначениеПараметра("СчетИП", МассивСчетаИП);
		СписокДетализацияРасходов.Параметры.УстановитьЗначениеПараметра("СчетКарта", МассивСчетаКарта);
		СписокДетализацияРасходов.Параметры.УстановитьЗначениеПараметра("СчетНаличка", МассивСчетаНаличка);
		///-ГомзМА 15.09.2023
		
		///+ГомзМА 21.09.2023
		СписокДенежныйПоток.Параметры.УстановитьЗначениеПараметра("ДатаНачалаДП", ПериодДенеджыеПоказатели.ДатаНачала);
		СписокДенежныйПоток.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияДП",
			ПериодДенеджыеПоказатели.ДатаОкончания);

		СписокДенежныйПоток.Параметры.УстановитьЗначениеПараметра("СчетООО", МассивСчетаООО);
		СписокДенежныйПоток.Параметры.УстановитьЗначениеПараметра("СчетИП", МассивСчетаИП);
		СписокДенежныйПоток.Параметры.УстановитьЗначениеПараметра("СчетКарта", МассивСчетаКарта);
		СписокДенежныйПоток.Параметры.УстановитьЗначениеПараметра("СчетНаличка", МассивСчетаНаличка);
		///-ГомзМА 21.09.2023
	КонецЕсли;
	//////---- Форма ДенежныеПоказатели ----//////
	///-ГомзМА 31.08.2023

КонецПроцедуры

//МАЗИН______________________________________________________________НАЧАЛО 

&НаСервере
Функция ПолучитьДанныеСправочникСотрудник()

	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Наименование,
	|	Сотрудники.Фамилия,
	|	Сотрудники.Имя,
	|	Сотрудники.Отчество,
	|	Сотрудники.ДатаРождения,
	|	Сотрудники.Штатный,
	|	Сотрудники.ДатаНачалаРаботы,
	|	Сотрудники.Код,
	|	Сотрудники.Руководитель,
	|	Сотрудники.ОтправлятьСМС
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", СсылкаТекПользователя);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Массив = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Массив.Добавить(ВыборкаДетальныеЗаписи.Наименование);
		Массив.Добавить(ВыборкаДетальныеЗаписи.Фамилия);
		Массив.Добавить(ВыборкаДетальныеЗаписи.Имя);
		Массив.Добавить(ВыборкаДетальныеЗаписи.Отчество);
		Массив.Добавить(ВыборкаДетальныеЗаписи.ДатаРождения);
		Массив.Добавить(ВыборкаДетальныеЗаписи.Штатный);
		Массив.Добавить(ВыборкаДетальныеЗаписи.ДатаНачалаРаботы);
		Массив.Добавить(ВыборкаДетальныеЗаписи.Код);
		Массив.Добавить(ВыборкаДетальныеЗаписи.Руководитель);
		Массив.Добавить(ВыборкаДетальныеЗаписи.ОтправлятьСМС);
	КонецЦикла;
	Возврат Массив;
КонецФункции
&НаСервере
Функция ПолучитьДанныеКадровогоПриказа()
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыйПриказ.Оклад,
	|	КадровыйПриказ.Ссылка
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|ГДЕ
	|	КадровыйПриказ.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", СсылкаТекПользователя);

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		М = Новый Массив;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			М.Добавить(ВыборкаДетальныеЗаписи.Оклад);
			М.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;

		Возврат М;
	КонецЕсли;
КонецФункции
&НаСервере
Процедура ВкладкаДанныеСотрудникаЗаполнение()

	//Данные из справочника сотрудники

	Массив = ПолучитьДанныеСправочникСотрудник();

	Если Массив.Количество() <> 0 Тогда
		ФИО = Массив[0];
		Фамилия = Массив[1];
		Имя = Массив[2];
		Отчество = Массив[3];
		ДатаРождения = Массив[4];
		Штатный = Массив[5];
		ДатаНачалаРаботы = Массив[6];
		КодСправочника = Массив[7];
		Руководитель = Массив[8];
		ОтправлятьСМС = Массив[9];
	КонецЕсли;
	
	// Данные из документа Кадровый Приказ 
	М = ПолучитьДанныеКадровогоПриказа();
	ОкладСотрудника = М[0];
	КадровыйПриказ = М[1];

	М2 = ЗапросКадровыйДоговор();
	Если М2.Количество() <> 0 Тогда
		ТипДоговора = М2[0];
		ЦФО = М2[3];
		Должность = М2[3];
		Организация = М2[4];
		ДатаПриёма =  М2[7];
		ДатаПриказа = М2[5];
		Подразделение = М2[6];
		МестоРаботыСотрудника = М2[8];
		М3 = ДанныеСправочникаПользователи(); // Справочник Пользователи
		ТекущийПользователь = М3[0]; 
	 	// Заполнение Вкладки ЛИЧНЫЕ ДАННЫЕ
		М4 = ЗапросЛичныеДанные();
		НомерБанковскойКарты = М4[0];
		НомерТелефонаДляПлатежей = М4[1];
		Банк = М4[2];
		ПаспортСерияНомер = М4[3];
		ПаспортКемВыдан =М4[4];
		ПаспортДатаВыдачи = М4[5];
		ПаспортКодПодразделения =М4[6];
		СемейноеПоложение = М4[7];
		ВоинскаяОбязанность = М4[8];
		Комментарий = М4[9];
	КонецЕсли;

	//Получить данные по окладу во вкладке Зарплата
	РассчётОкладаиАванса();
	//Расчет количества административных дней
	РассчётАдминов();
	//Расчет количества отпускных дней
	РассчётОтпусков();
	// Заполняем данные по реквизиту Тележка и ДолжностьДляУК
	ЗапросСпСотрудники();
	//Фото 

КонецПроцедуры
&НаСервере
Функция ДанныеСправочникаПользователи()

	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Пользователи.НайтиПоНаименованию(ИмяТекПользователя);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", СсылкаТекПользователя);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	М = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		М.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Возврат М;

КонецФункции
&НаСервере
Функция ЗапросКадровыйДоговор()
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КадровыйПриказ.ТипДоговора,
	|	КадровыйПриказ.Сотрудник,
	|	КадровыйПриказ.ДатаНачалаРаботы,
	|	КадровыйПриказ.ЦФО,
	|	КадровыйПриказ.Должность,
	|	КадровыйПриказ.Организация,
	|	КадровыйПриказ.ДатаДоговора,
	|	КадровыйПриказ.Дата КАК Дата,
	|	КадровыйПриказ.Отдел,
	|	КадровыйПриказ.Город
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|ГДЕ
	|	КадровыйПриказ.Сотрудник.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";

	Запрос.УстановитьПараметр("Ссылка", СсылкаТекПользователя);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	М = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		М.Добавить(ВыборкаДетальныеЗаписи.ТипДоговора);
		М.Добавить(ВыборкаДетальныеЗаписи.ДатаНачалаРаботы);
		М.Добавить(ВыборкаДетальныеЗаписи.ЦФО);
		М.Добавить(ВыборкаДетальныеЗаписи.Должность);
		М.Добавить(ВыборкаДетальныеЗаписи.Организация);
		М.Добавить(ВыборкаДетальныеЗаписи.Дата);
		М.Добавить(ВыборкаДетальныеЗаписи.Отдел);
		М.Добавить(ВыборкаДетальныеЗаписи.ДатаДоговора);
		М.Добавить(ВыборкаДетальныеЗаписи.Город);

	КонецЦикла;

	Возврат М;

КонецФункции
&НаСервере
Функция ЗапросЛичныеДанные()
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);
	СсылкаТекПользователяПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяТекПользователя);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.НомерБанковскойКарты КАК НомерБанковскойКарты,
	|	Сотрудники.НомерТелефонаДляПлатежей КАК НомерТелефонаДляПлатежей,
	|	Сотрудники.Банк КАК Банк,
	|	Сотрудники.ПаспортСерияНомер КАК ПаспортСерияНомер,
	|	Сотрудники.ПаспортКемВыдан КАК ПаспортКемВыдан,
	|	Сотрудники.ПаспортДатаВыдачи КАК ПаспортДатаВыдачи,
	|	Сотрудники.ПаспортКодПодразделения КАК ПаспортКодПодразделения,
	|	Сотрудники.СемейноеПоложение КАК СемейноеПоложение,
	|	Сотрудники.ВоинскаяОбязанность КАК ВоинскаяОбязанность,
	|	Сотрудники.Комментарий КАК Комментарий
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Пользователь = &Пользователь";

	Запрос.УстановитьПараметр("Пользователь", СсылкаТекПользователяПользователь);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	М = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		М.Добавить (ВыборкаДетальныеЗаписи.НомерБанковскойКарты);
		М.Добавить (ВыборкаДетальныеЗаписи.НомерТелефонаДляПлатежей);
		М.Добавить (ВыборкаДетальныеЗаписи.Банк);
		М.Добавить (ВыборкаДетальныеЗаписи.ПаспортСерияНомер);
		М.Добавить (ВыборкаДетальныеЗаписи.ПаспортКемВыдан);
		М.Добавить (ВыборкаДетальныеЗаписи.ПаспортДатаВыдачи);
		М.Добавить (ВыборкаДетальныеЗаписи.ПаспортКодПодразделения);
		М.Добавить (ВыборкаДетальныеЗаписи.СемейноеПоложение);
		М.Добавить (ВыборкаДетальныеЗаписи.ВоинскаяОбязанность);
		М.Добавить (ВыборкаДетальныеЗаписи.Комментарий);

		Возврат М;
	КонецЦикла;
КонецФункции
&НаСервере
Процедура РассчётОкладаиАванса()
		// ++МазинЕС 28-05-24
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("Практикант")) Тогда
		Возврат;
	КонецЕсли;
	// --МазинЕС 28-05-24
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);
	//СсылкаТекПользователяПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяТекПользователя);	
	ЗапросРабДней = Новый Запрос;
	ЗапросРабДней.Текст = "ВЫБРАТЬ
						  |	КОЛИЧЕСТВО(МЕСЯЦ(ДанныеПроизводственногоКалендаря.Дата)) КАК Дни,
						  |	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
						  |ИЗ
						  |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
						  |ГДЕ
						  |	ДанныеПроизводственногоКалендаря.ВидДня = &ВидДня
						  |	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
						  |
						  |СГРУППИРОВАТЬ ПО
						  |	ДанныеПроизводственногоКалендаря.ВидДня";

	ЗапросРабДней.УстановитьПараметр("ДатаНачала", НачалоМесяца(ТекущаяДата()));
	ЗапросРабДней.УстановитьПараметр("ДатаОкончания", КонецМесяца(ТекущаяДата()));
	ЗапросРабДней.УстановитьПараметр("ВидДня", Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);

	ВыборкаДней = ЗапросРабДней.Выполнить().Выбрать();
	ВыборкаДней.Следующий();
	запросОклада = Новый запрос;
	запросОклада.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
						 |	ПоказателиЗП.Аванс КАК Аванс,
						 |	ПоказателиЗП.Подсчёт КАК Подсчёт,
						 |	ПоказателиЗП.ООклад КАК ООклад,
						 |	ПоказателиЗП.НОклад КАК НОклад,
						 |	ПоказателиЗП.Оклад КАК Оклад,
						 |	ПоказателиЗП.ДогАванс КАК ДогАванс
						 |ИЗ
						 |	РегистрСведений.ПоказателиЗП КАК ПоказателиЗП
						 |ГДЕ
						 |	ПоказателиЗП.Сотрудник = &Сотрудник
						 |	И ПоказателиЗП.Дата <= &Дата
						 |
						 |УПОРЯДОЧИТЬ ПО
						 |	ПоказателиЗП.Дата УБЫВ";
	запросОклада.УстановитьПараметр("Сотрудник", СсылкаТекПользователя);
	запросОклада.УстановитьПараметр("Дата", НачалоМесяца(ТекущаяДата()));
	СтрокаРегистра = ЗапросОклада.Выполнить().Выбрать();
	СтрокаРегистра.Следующий();
	Попытка
		Оклад 		 = СтрокаРегистра.Оклад;
		Аванс 		  = СтрокаРегистра.ДогАванс;
		СтоимостьДня  = СтрокаРегистра.Оклад / ВыборкаДней.Дни;
		СтоимостьЧаса = СтоимостьДня / 8;
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ПериодПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()

	СписокТабель.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
	СписокТабель.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);

	СписокПомощьВПродажеМой.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
	СписокПомощьВПродажеМой.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);

	СписокПоказатели.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
	СписокПоказатели.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);

	СписокНадбавки.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);

	СписокМоиЗадачи.Параметры.УстановитьЗначениеПараметра("ДатаНач", Период.ДатаНачала);
	СписокМоиЗадачи.Параметры.УстановитьЗначениеПараметра("ДатаКон", Период.ДатаОкончания);

	СписокАдминистративных.Параметры.УстановитьЗначениеПараметра("ДатаНач", Период.ДатаНачала);
	СписокАдминистративных.Параметры.УстановитьЗначениеПараметра("ДатаКон", Период.ДатаОкончания);

	СписокОтпусков.Параметры.УстановитьЗначениеПараметра("ДатаНач", Период.ДатаНачала);
	СписокОтпусков.Параметры.УстановитьЗначениеПараметра("ДатаКон", Период.ДатаОкончания);

КонецПроцедуры
/// Вкладка зарплата запрос данных о зарплате 
&НаСервере
Функция ПолучениеТекущегоПользователяНАСервере(Пользователь)
//Если 	Пользователь = Истина тогда возвращаем ссылку из справочника пользователи Иначе 
// Возвращаем ссылку из справочника сотрудника
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);
	СсылкаТекПользователяПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяТекПользователя);

	Если Пользователь Тогда
		Возврат СсылкаТекПользователяПользователь;
	Иначе
		Возврат СсылкаТекПользователя;
	КонецЕсли;

КонецФункции
&НаКлиенте
Функция ПолучениеТекущегоПользователяНАКлиенте(Пользователь)
	Буф = ПолучениеТекущегоПользователяНАСервере(Пользователь);
	Возврат Буф;
КонецФункции
&НаСервере
Процедура РассчётАдминов()
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);
	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(Административный.ЧасыОтсутствия) КАК ЧасыОтсутствия
	|ИЗ
	|	Документ.Административный КАК Административный
	|ГДЕ
	|	Административный.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", СсылкаТекПользователя);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ОбщееВремяАдминистративных = Выборка.ЧасыОтсутствия;

КонецПроцедуры
&НаСервере
Процедура РассчётОтпусков()

	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);

	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(Отпускные.ДниОтсутствия) КАК ДниОтсутствия
	|ИЗ
	|	Документ.Отпускные КАК Отпускные
	|ГДЕ
	|	Отпускные.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", СсылкаТекПользователя);

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ОбщееКоличествоОтпусков = Выборка.ДниОтсутствия;
КонецПроцедуры
&НаСервере
Функция ТекДолжностьСотрудника()
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	МАКСИМУМ(ДолжностиСотрудниковСрезПоследних.Должность) КАК Должность,
				   |	МАКСИМУМ(ДолжностиСотрудниковСрезПоследних.Период) КАК Период
				   |ИЗ
				   |	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
				   |ГДЕ
				   |	ДолжностиСотрудниковСрезПоследних.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", СсылкаТекПользователя);
	Выборка = запрос.Выполнить().Выбрать();
	ВЫборка.Следующий();

	Возврат Выборка.Должность;

КонецФункции
&НаСервере
Процедура ЗапросСпСотрудники() 

// Получаем данные по реквизиту Тележка и ДолжностьДляУК
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Пользователи.НайтиПоНаименованию(ИмяТекПользователя);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.ДолжностьДляУК,
	|	Сотрудники.Тележка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Пользователь = &Пользователь";

	Запрос.УстановитьПараметр("Пользователь", СсылкаТекПользователя);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДолжностьДляУК = ВыборкаДетальныеЗаписи.ДолжностьДляУК;
		Тележка = ВыборкаДетальныеЗаписи.Тележка;
	КонецЦикла;

КонецПроцедуры
&НаСервере
Процедура ФотоСотрудника()
	ИмяТекПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	СсылкаТекПользователя = Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя);
	СсылкаТекПользователяПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяТекПользователя);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Фото
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Пользователь = &Пользователь";

	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	М = Новый Массив;
	Выборка= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		М.Добавить(Выборка.Фото);
	КонецЦикла;
	СсылкаНаФото = ПолучитьНавигационнуюСсылку(Справочники.Сотрудники.НайтиПоНаименованию(ИмяТекПользователя).Ссылка,
		"Фото");

КонецПроцедуры

//
// МАЗИН _____________________________________________________________КОНЕЦ

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ТекущаяСтраница = Элементы.СтраницаОбязанности Тогда
		ГруппаСтраницыПриСменеСтраницыОбязанности();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПродажиЗапчастейВРаботе Тогда
		ГруппаСтраницыПриСменеСтраницыПродажиЗапчастейВРаботе();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗарплатаПоМесяцам Тогда
		ГруппаСтраницыПриСменеСтраницыЗарплатаПоМесяцам();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтчетПоРасходам Тогда
		//////++++ Форма ОтчетПоРасходам ++++//////
		УстановитьФункциональныеОпцииФормы();
		СформироватьОтчеты();

		ГодОР 	= Год(ТекущаяДата());
		МесяцОР = Месяц(ТекущаяДата());
		ПосчитатьИтоги();

		УстановитьВидимостьИДоступность();
		//////---- Форма ОтчетПоРасходам ----//////
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПосещаемость Тогда
		//////++++ Форма Посещаемость ++++//////
		АвтоОтображениеСостояния = РежимАвтоОтображенияСостояния.НеОтображать;
		СформироватьОтчетНаСервере();
		//////---- Форма Посещаемость ----//////
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаИнвентарь Тогда
		ГруппаСтраницыПриСменеСтраницыИнвентарь();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЖурналПродажи Тогда
		ГруппаСтраницыПриСменеСтраницыЖурналПродажи();

	КонецЕсли;
	Если ТекущаяСтраница = Элементы.МоиЗадачи Тогда
		СписокМоиЗадачи.Параметры.УстановитьЗначениеПараметра("ДатаНач", Период.ДатаНачала);
		СписокМоиЗадачи.Параметры.УстановитьЗначениеПараметра("ДатаКон", Период.ДатаОкончания);
	КонецЕсли;

	Если ТекущаяСтраница = Элементы.МоиАдминистративные Тогда
		СписокАдминистративных.Параметры.УстановитьЗначениеПараметра("ДатаНач", Период.ДатаНачала);
		СписокАдминистративных.Параметры.УстановитьЗначениеПараметра("ДатаКон", Период.ДатаОкончания);
	КонецЕсли;
	Если ТекущаяСтраница = Элементы.Отпуска Тогда
		СписокОтпусков.Параметры.УстановитьЗначениеПараметра("ДатаНач", Период.ДатаНачала);
		СписокОтпусков.Параметры.УстановитьЗначениеПараметра("ДатаКон", Период.ДатаОкончания);
	КонецЕсли;

	СписокОтпусков.Параметры.УстановитьЗначениеПараметра("ДатаНач", Период.ДатаНачала);
	СписокОтпусков.Параметры.УстановитьЗначениеПараметра("ДатаКон", Период.ДатаОкончания);
	
	Если ТекущаяСтраница = Элементы.СпискиКлиентов Тогда
		ОбновитьГорячиеКлиенты();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	Если ИмяСобытия = "ОстаткиБалансИзменение" Тогда
		Элементы.СписокОстатковНаСчёте.Обновить();
		СформироватьОтчеты();
	ИначеЕсли ИмяСобытия = "РаботыИзменение" Тогда
		СформироватьОтчеты();
	КонецЕсли;
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры
///-ГомзМА 27.03.2023
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблиц

///+ГомзМА 27.03.2023
&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	
	//////++++ Форма МоиНапоминания ++++//////
	Отказ = Истина;
	ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.Напоминание", Новый Структура("Ключ",
		Элементы.Список.ТекущаяСтрока));
	//////---- Форма МоиНапоминания ----//////

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	//////++++ Форма МоиНапоминания ++++//////
	СтрокаВыбрана = Не Элемент.ТекущаяСтрока = Неопределено;
	Элементы.КнопкаУдалить.Доступность  = СтрокаВыбрана;
	Элементы.КнопкаИзменить.Доступность = СтрокаВыбрана;
	//////---- Форма МоиНапоминания ----//////

КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	//////++++ Форма МоиНапоминания ++++//////
	Отказ = Истина;
	УдалитьНапоминание();
	//////---- Форма МоиНапоминания ----//////

КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//////++++ Форма МоиНапоминания ++++//////
	Если Поле.Имя = "Источник" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Источник) Тогда
			ПоказатьЗначение( , Элементы.Список.ТекущиеДанные.Источник);
		Иначе
			ПоказатьПредупреждение( , НСтр("ru = 'Источник напоминания не задан.'"));
		КонецЕсли;
	КонецЕсли;
	//////---- Форма МоиНапоминания ----//////

КонецПроцедуры
&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	//////++++ Форма ПродажиЗапчастейВРаботе ++++//////
	УстановитьОтбор(СписокПродажи, Ответственный);
	//////---- Форма ПродажиЗапчастейВРаботе ----//////

КонецПроцедуры
&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	//////++++ Форма ЗарплатаПоМесяцам ++++//////
	ОбновитьСуммы();
	//////---- Форма ЗарплатаПоМесяцам ----//////

КонецПроцедуры

&НаКлиенте
Процедура МесяцПриИзменении(Элемент)
	
	//////++++ Форма ЗарплатаПоМесяцам ++++//////
	ОбновитьСуммы();
	//////---- Форма ЗарплатаПоМесяцам ----//////

КонецПроцедуры
&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	
	//////++++ Форма ЗарплатаПоМесяцам ++++//////
	ОбновитьСуммы();
	//////---- Форма ЗарплатаПоМесяцам ----//////

КонецПроцедуры

&НаКлиенте
Процедура МесяцОРПриИзменении(Элемент)
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	ПосчитатьИтоги();
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры

&НаКлиенте
Процедура ГодОРПриИзменении(Элемент)
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	ПосчитатьИтоги();
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры
&НаКлиенте
Процедура ОтветственныйЖурналПриИзменении(Элемент)
	
	//////++++ Форма ЖурналПродажи ++++//////
	ОбновитьСписок();
	//////---- Форма ЖурналПродажи ----//////

КонецПроцедуры
///-ГомзМА 27.03.2023
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок1(Команда)
	КоличествоАктивных = КоличествоСтрокВСписке("СписокАктивные");
	РассчитатьИтогиАктивные();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТеплые(Команда)
	КоличествоТеплых = КоличествоСтрокВСписке("СписокТеплые");
	РассчитатьИтогиТеплые();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПотенц(Команда)
	КоличествоПотенциальных = КоличествоСтрокВСписке("СписокПотенциальные");
	РассчитатьИтогиПотенциальные();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьХолодные(Команда)
	КоличествоХолодных = КоличествоСтрокВСписке("СписокХолодные");
	РассчитатьИтогиХолодные();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрячие(Команда)
	КоличествоГорячих = КоличествоСтрокВСписке("СписокГорячие");
	РассчитатьИтогиГорячие();
КонецПроцедуры

///+ГомзМА 27.03.2023
&НаКлиенте
Процедура Изменить(Команда)

	//////++++ Форма МоиНапоминания ++++//////
	ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.Напоминание", Новый Структура("Ключ",
		Элементы.Список.ТекущаяСтрока));
	//////---- Форма МоиНапоминания ----//////

КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	//////++++ Форма МоиНапоминания ++++//////
	УдалитьНапоминание();
	//////---- Форма МоиНапоминания ----//////

КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)

	//////++++ Форма МоиНапоминания ++++//////
	ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.Напоминание");
	//////---- Форма МоиНапоминания ----//////

КонецПроцедуры
&НаКлиенте
Процедура Команда1(Команда)
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	СформироватьОтчетЗарплатаАвтосервис();
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры
&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	//////++++ Форма Посещаемость ++++//////
	СформироватьОтчетНаСервере();
	//////---- Форма Посещаемость ----//////	

КонецПроцедуры

&НаКлиенте
Процедура ТаблицыДенежныхПоказателей(Команда)
	
	//////++++ Форма ДенежныеПоказатели ++++//////
	///+ГомзМА 31.08.2023
	//ТабДок = ТаблицыДенежныхПоказателейНаСервере();
	//ТабДок.Показать();
	///-ГомзМА 31.08.2023
	
	///+ГомзМА 20.09.2023
	ТабДок = ПечатьТаблицыДенежныхПоказателейНаСервере();
	
	// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ТаблицыДенежныхПоказателей");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "ТаблицыДенежныхПоказателей";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, Неопределено, ЭтаФорма);
	///-ГомзМА 20.09.2023
	
	//////---- Форма ДенежныеПоказатели ----//////

КонецПроцедуры

///-ГомзМА 27.03.2023
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
	
Процедура ОбновитьГорячиеКлиенты() Экспорт
	ДатаВПрошлом  = НачалоДня(ТекущаяДата() - (24 * 60 * 60) * 10);
	СписокГорячие.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ДатаВПрошлом);
	СписокГорячие.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ТекущаяДата()));
	СписокГорячие.Параметры.УстановитьЗначениеПараметра("ОбщийКлиент", ПолучитьОбщегоКлиентаПользователя());
	РассчитатьИтогиГорячие();
	КоличествоГорячих = КоличествоСтрокВСписке("СписокГорячие");
КонецПроцедуры
Функция ПолучитьОбщегоКлиентаПользователя()
	Возврат Справочники.Пользователи.НайтиПоНаименованию("Общий Клиент");
КонецФункции

Процедура СкрытьСтраницыДляМенеджеров()
	Если (ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("МенеджерПоПродажам")) Или 
	 ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя = "Трофимов Василий Юрьевич") И 
	  ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя <> "Вадяева Дарья Викторовна"
		И  ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя <> "Лазарева Алёна Владимировна"
		И ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя <> "Панькина Ольга Сергеевна" Тогда
		Элементы.ГруппаСтраницы.Видимость = Ложь;
		Элементы.Период2.Видимость = Ложь;
	КонецЕсли;
	Если  ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя = "Вадяева Дарья Викторовна"
		ИЛИ  ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя = "Лазарева Алёна Владимировна"
		ИЛИ ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя = "Панькина Ольга Сергеевна" ИЛИ 
		ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя = "Рожков Александр Евгеньевич" Тогда
		Элементы.ГруппыКлиентов.Видимость = Ложь;
		Элементы.ГруппаСтраницы.Видимость = Истина;
		Элементы.Период2.Видимость = Истина;;
	КонецЕсли;
КонецПроцедуры

Процедура РассчитатьИтогиАктивные() 
	// Комлев АА 21/10/24 +++
	СКД = Элементы.СписокАктивные.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКД = Элементы.СписокАктивные.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикКД.Выполнить(СКД, НастройкиКД, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД);
	ПроцессорВыводаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатКД_ТЗ = ПроцессорВыводаКД.Вывести(ПроцессорКД);

	Элементы.СписокАктивныеКоличествоАвтомобилей.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоАвтомобилей"), "ЧДЦ=2; ЧН=-");
	Элементы.СписокАктивныеКоличествоЗаказов.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоЗаказов"), "ЧДЦ=2; ЧН=-");
	Элементы.СписокАктивныеКоличествоПродаж.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоПродаж"), "ЧДЦ=2; ЧН=-");
	Элементы.СписокАктивныеСуммаПродаж.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"СуммаПродаж"), "ЧДЦ=2; ЧН=-");		
// Комлев АА 21/10/24 ---
КонецПроцедуры

Процедура РассчитатьИтогиТеплые() 
	// Комлев АА 21/10/24 +++
	СКД = Элементы.СписокТеплые.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКД = Элементы.СписокТеплые.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикКД.Выполнить(СКД, НастройкиКД, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД);
	ПроцессорВыводаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатКД_ТЗ = ПроцессорВыводаКД.Вывести(ПроцессорКД);

	Элементы.СписокТеплыеКоличествоАвтомобилей.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоАвтомобилей"), "ЧДЦ=2; ЧН=-");
	Элементы.СписокТеплыеКоличествоЗаказов.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоЗаказов"), "ЧДЦ=2; ЧН=-");
	Элементы.СписокТеплыеКоличествоПродаж.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоПродаж"), "ЧДЦ=2; ЧН=-");
	Элементы.СписокТеплыеСуммаПродаж.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"СуммаПродаж"), "ЧДЦ=2; ЧН=-");		
// Комлев АА 21/10/24 ---
КонецПроцедуры

Процедура РассчитатьИтогиПотенциальные() 
	// Комлев АА 21/10/24 +++
	СКД = Элементы.СписокПотенциальные.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКД = Элементы.СписокПотенциальные.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикКД.Выполнить(СКД, НастройкиКД, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД);
	ПроцессорВыводаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатКД_ТЗ = ПроцессорВыводаКД.Вывести(ПроцессорКД);

	Элементы.СписокПотенциальныеКоличествоАвтомобилей.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоАвтомобилей"), "ЧДЦ=2; ЧН=-");
	Элементы.СписокПотенциальныеКоличествоЗаказов.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоЗаказов"), "ЧДЦ=2; ЧН=-");
	Элементы.СписокПотенциальныеКоличествоПродаж.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоПродаж"), "ЧДЦ=2; ЧН=-");
	Элементы.СписокПотенциальныеСуммаПродаж.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"СуммаПродаж"), "ЧДЦ=2; ЧН=-");		
// Комлев АА 21/10/24 ---
КонецПроцедуры

Процедура РассчитатьИтогиХолодные() 
	// Комлев АА 21/10/24 +++
	СКД = Элементы.СписокХолодные.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКД = Элементы.СписокХолодные.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикКД.Выполнить(СКД, НастройкиКД, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД);
	ПроцессорВыводаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатКД_ТЗ = ПроцессорВыводаКД.Вывести(ПроцессорКД);

	Элементы.СписокХолодныеКоличествоАвтомобилей.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоАвтомобилей"), "ЧДЦ=2; ЧН=-");
		Элементы.СписокХолодныеКоличествоЗаказов.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоЗаказов"), "ЧДЦ=2; ЧН=-");
		Элементы.СписокХолодныеКоличествоПродаж.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоПродаж"), "ЧДЦ=2; ЧН=-");
		Элементы.СписокХолодныеСуммаПродаж.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"СуммаПродаж"), "ЧДЦ=2; ЧН=-");		
// Комлев АА 21/10/24 ---
КонецПроцедуры

Процедура РассчитатьИтогиГорячие() 
	// Комлев АА 21/10/24 +++
	СКД = Элементы.СписокГорячие.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКД = Элементы.СписокГорячие.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикКД.Выполнить(СКД, НастройкиКД, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД);
	ПроцессорВыводаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатКД_ТЗ = ПроцессорВыводаКД.Вывести(ПроцессорКД);

	Элементы.СписокГорячиеКоличествоМашин.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоМашин"), "ЧДЦ=2; ЧН=-");
		Элементы.СписокГорячиеКоличествоЗаказов.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоЗаказов"), "ЧДЦ=2; ЧН=-");
		Элементы.СписокГорячиеКоличествоПродаж.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"КоличествоПродаж"), "ЧДЦ=2; ЧН=-");
		Элементы.СписокГорячиеСуммаПродаж.ТекстПодвала =  "Итого: " + Формат(РезультатКД_ТЗ.Итог(
		"СуммаПродаж"), "ЧДЦ=2; ЧН=-");		
// Комлев АА 21/10/24 ---
КонецПроцедуры

&НаСервере
Функция КоличествоСтрокВСписке(НазваниеСписка) // Строка 
	// Комлев АА 17/10/24 +++ 
	СКД = Элементы[НазваниеСписка].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКД = Элементы[НазваниеСписка].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикКД.Выполнить(СКД, НастройкиКД, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД);
	ПроцессорВыводаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатКД_ТЗ = ПроцессорВыводаКД.Вывести(ПроцессорКД);

	Возврат РезультатКД_ТЗ.Количество();
	
	// Комлев АА 17/10/24 --- 
КонецФункции



///+ГомзМА 27.03.2023
&НаСервере
Процедура ОтключитьНапоминание(ПараметрыНапоминания)
	
	//////++++ Форма МоиНапоминания ++++//////
	НапоминанияПользователяСлужебный.ОтключитьНапоминание(ПараметрыНапоминания, Ложь);
	//////---- Форма МоиНапоминания ----//////

КонецПроцедуры

&НаКлиенте
Процедура УдалитьНапоминание()
	
	//////++++ Форма МоиНапоминания ++++//////
	КнопкиДиалога = Новый СписокЗначений;
	КнопкиДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
	КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Не удалять'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьНапоминаниеЗавершение", ЭтотОбъект);

	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить напоминание?'"), КнопкиДиалога);
	//////---- Форма МоиНапоминания ----//////

КонецПроцедуры

&НаКлиенте
Процедура УдалитьНапоминаниеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	// --МазинЕС 28-05-24
	//////++++ Форма МоиНапоминания ++++//////
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	КлючЗаписи = Элементы.Список.ТекущаяСтрока;
	ПараметрыНапоминания = Новый Структура("Пользователь,ВремяСобытия,Источник");
	ЗаполнитьЗначенияСвойств(ПараметрыНапоминания, Элементы.Список.ТекущиеДанные);

	ОтключитьНапоминание(ПараметрыНапоминания);
	НапоминанияПользователяКлиент.УдалитьЗаписьИзКэшаОповещений(ПараметрыНапоминания);
	Оповестить("Запись_НапоминанияПользователя", Новый Структура, КлючЗаписи);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.НапоминанияПользователя"));
	//////---- Форма МоиНапоминания ----//////

КонецПроцедуры


//////++++ Форма ПродажиЗапчастейВРаботе ++++//////
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтбор(СписокПродажи, Ответственный)

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродажи, "Ответственный", Ответственный,
		Истина);

КонецПроцедуры // УстановитьОтбор()
//////---- Форма ПродажиЗапчастейВРаботе ----//////

//////++++ Форма ЗарплатаПоМесяцам ++++//////
&НаСервере
Процедура ОбновитьСуммы()

	НачалоПериода = Дата(Год, Месяц, 1);
	КонецПериода = КонецМесяца(НачалоПериода);
	СписокПродажДляЗП.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	СписокПродажДляЗП.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецПериода);
	податам = Ложь;
	// ++ obrv 03.12.19
	Текст2 = СписокПродажДляЗП.ТекстЗапроса;
	// -- obrv 03.12.19

	Если Год >= 2011 Или Месяц > 0 Тогда
		податам = Истина;
		Если Месяц > 0 И Год < 2011 Тогда
			Год = Год(ТекущаяДата());
		КонецЕсли;
	КонецЕсли;
	Запрос = Новый Запрос;
	// ++ obrv 03.12.19
	Текст = СписокПродажДляЗП.ТекстЗапроса;
	// -- obrv 03.12.19

	Если податам Тогда
		Если Месяц > 0 Тогда
			Дат1 = Дата(Год, Месяц, 1);
			Дат2 = КонецМесяца(Дат1);
		Иначе
			Дат1 = Дата(Год, 1, 1);
			Дат2 = КонецГода(Дат1);
		КонецЕсли;

		Запрос.Текст = Текст;

		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Иначе
		Запрос.Текст = Текст;
		СписокПродажДляЗП.ТекстЗапроса = Текст2;
	КонецЕсли;

	Запрос.УстановитьПараметр("КтоПродал", Пользователь);
	Итого = Запрос.Выполнить().Выгрузить().Итог("Заработано");

	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Расходы.Сумма
			|ИЗ
			|	Документ.Расходы КАК Расходы
			|ГДЕ
			|	Расходы.Зарплата = ИСТИНА
			|	И Расходы.Работник = &Пользователь";
	Запрос.Текст = Текст;
	Если податам Тогда
		Если Месяц > 0 Тогда
			Текст = Текст + " И Расходы.Месяц = " + Месяц + " И Расходы.Год = &Год";
		Иначе
			Текст = Текст + " И Расходы.Год = &Год";
		КонецЕсли;
		Запрос.Текст = Текст;
		Запрос.УстановитьПараметр("Год", Год);
	КонецЕсли;

	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выдано = Запрос.Выполнить().Выгрузить().Итог("Сумма");
	Если Итого > 0 Тогда
		Осталось = Итого - Выдано;
	Иначе
		Осталось = 0;
	КонецЕсли;

	Если податам И Месяц > 0 Тогда
		Осталось = Осталось + Пользователь.ФиксированаяЧастьЗарплаты;
	КонецЕсли;

КонецПроцедуры
//////---- Форма ЗарплатаПоМесяцам ----//////

//////++++ Форма ЗарплатаПоМесяцам ++++//////	
&НаКлиенте
Процедура ПоказателиРаботы(Команда)
	ОткрытьФорму("Обработка.УстановкаПоказателейСотрудников.Форма");
КонецПроцедуры
//////---- Форма ЗарплатаПоМесяцам ----//////


//////++++ Форма ЗарплатаПоМесяцам ++++//////	
&НаКлиенте
Процедура ОткрытьПродажу(Команда)

	стр = Элементы.СписокПродаж.ТекущиеДанные;
	стр.Ссылка.ПолучитьФорму().ОткрытьМодально();

КонецПроцедуры
//////---- Форма ЗарплатаПоМесяцам ----//////


//////++++ Форма ЗарплатаПоМесяцам ++++//////	
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Элементы.Пользователь.ТолькоПросмотр = Не Форма.ЭтоПолноправныйПользователь;

КонецПроцедуры // УправлениеФормой()
//////---- Форма ЗарплатаПоМесяцам ----//////
&НаСервере
Процедура ПосчитатьИтоги()
		
		// ++МазинЕС 28-05-24
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("Практикант")) Тогда
		Возврат;
	КонецЕсли;
	// --МазинЕС 28-05-24
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	РасчетОтданоБанку();
	РасчетВложено();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	СУММА(РасходыОстатки.СуммаОстаток) КАК СуммаОстаток
				   |ИЗ
				   |	РегистрНакопления.Расходы.Остатки КАК РасходыОстатки
				   |ГДЕ
				   |	РасходыОстатки.ВидРасхода = &ВидРасхода";
	Запрос.УстановитьПараметр("ВидРасхода", Справочники.ВидыРасходов.НайтиПоНаименованию("Расходы на доставку"));

	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	РасхДост = Таблица.Итог("СуммаОстаток");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	СУММА(Расходы.Сумма) КАК СуммаОстаток
				   |ИЗ
				   |	Документ.Расходы КАК Расходы
				   |ГДЕ
				   |	Расходы.Проведен = ИСТИНА
				   |	И Расходы.Новые = ЛОЖЬ";

	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	ИтогоРасходов = Таблица.Итог("СуммаОстаток") - РасхДост;
	
	// ++ obrv 18.10.19
	ИтогоДоходов = 0;

	ТекстЗапроса = ТекстЗапросаОплаты();

	Если Не ПустаяСтрока(ТекстЗапроса) Тогда

		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Оплаты.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	ВТ_Оплаты КАК ВТ_Оплаты
		|ГДЕ
		|	ВТ_Оплаты.СуммаОплаты >= ВТ_Оплаты.СуммаДокумента";
		Реультат = Запрос.Выполнить();
		Таблица = Реультат.Выгрузить();
		ИтогоДоходов = Таблица.Итог("СуммаДокумента");

	КонецЕсли;
	// -- obrv 18.10.19

	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ПродажаЗапчастей.Откат) КАК Откат
				   |ИЗ
				   |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
				   |ГДЕ
				   |	ПродажаЗапчастей.Новые = ЛОЖЬ";

	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	отк = Таблица.Итог("Откат");
	ИтогоДоходов = ИтогоДоходов - Таблица.Итог("Откат");

	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ЛичныеРасходыОстатки.СуммаОстаток) КАК СуммаОстаток
				   |ИЗ
				   |	РегистрНакопления.ЛичныеРасходы.Остатки КАК ЛичныеРасходыОстатки";
	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	ЛичныеРасходы = Таблица.Итог("СуммаОстаток");

	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ПриходДенегОстатки.СуммаОстаток) КАК СуммаОстаток
				   |ИЗ
				   |	РегистрНакопления.ПриходДенег.Остатки КАК ПриходДенегОстатки";
	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	НаличныеДеньги = Таблица.Итог("СуммаОстаток");

	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ОтданоСМашиныОстатки.СуммаОстаток) КАК СуммаОстаток
				   |ИЗ
				   |	РегистрНакопления.ОтданоСМашины.Остатки КАК ОтданоСМашиныОстатки
				   |ГДЕ
				   |	ОтданоСМашиныОстатки.Кто = 1";
	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	ОтданоКазанцам = Таблица.Итог("СуммаОстаток");

	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ОтданоСМашиныОстатки.СуммаОстаток) КАК СуммаОстаток
				   |ИЗ
				   |	РегистрНакопления.ОтданоСМашины.Остатки КАК ОтданоСМашиныОстатки
				   |ГДЕ
				   |	ОтданоСМашиныОстатки.Кто = 2";
	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	ВыведеноНам = Таблица.Итог("СуммаОстаток");

	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ОтданоСМашиныОстатки.СуммаОстаток) КАК СуммаОстаток
				   |ИЗ
				   |	РегистрНакопления.ОтданоСМашины.Остатки КАК ОтданоСМашиныОстатки
				   |ГДЕ
				   |	ОтданоСМашиныОстатки.Кто = 3";
	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	Артем = Таблица.Итог("СуммаОстаток");

	НаличныеДеньги = НаличныеДеньги;

	ДенегНаРуках = НаличныеДеньги - ЛичныеРасходы;

	Запрос.Текст =
	// ++ obrv 18.10.19
	"ВЫБРАТЬ
	|	ВТ_Оплаты.СуммаОплаты КАК СуммаОплаты,
	|	ВТ_Оплаты.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	ВТ_Оплаты КАК ВТ_Оплаты
	|ГДЕ
	|	ВТ_Оплаты.СуммаОплаты < ВТ_Оплаты.СуммаДокумента";
	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	часть = Таблица.Итог("СуммаОплаты");
	// -- obrv 18.10.19

	РазборДолг = Таблица.Итог("СуммаДокумента") - часть;

	РазборДенегНаРуках = ИтогоДоходов + часть - ОтданоКазанцам - ИтогоРасходов - ВыведеноНам - Артем;

	Запрос.Текст = "ВЫБРАТЬ
				   |	ОбработанныеРасходыОстатки.суммаОстаток
				   |ИЗ
				   |	РегистрНакопления.ОбработанныеРасходы.Остатки КАК ОбработанныеРасходыОстатки";
	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	ВремРезультат = Таблица.Итог("суммаОстаток");
	НеобработанныеРасходы = ИтогоРасходов - ВремРезультат;

	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(РасходыНовые.Остаток) КАК Остаток
				   |ИЗ
				   |	Документ.РасходыНовые КАК РасходыНовые
				   |ГДЕ
				   |	РасходыНовые.Остаток > 0";
	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	НеобработанныеРасходыН = Таблица.Итог("Остаток");	
	
	//=======================================================
	// ++ obrv 05.10.18
	КредитВБанке = 0;
	ПравоДоступаКредиты = ПравоДоступа("Чтение", Метаданные.Справочники.ВложенияВолжска);
	Если ПравоДоступаКредиты Тогда
		// -- obrv 05.10.18
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	СУММА(ВложенияВолжска.Сумма) КАК Сумма
					   |ИЗ
					   |	Справочник.ВложенияВолжска КАК ВложенияВолжска";
		КредитВБанке = Запрос.Выполнить().Выгрузить().Итог("Сумма");
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	Расходы.Сумма
				   |ИЗ
				   |	Документ.Расходы КАК Расходы
				   |ГДЕ
				   |	Расходы.ВидРасхода = &ВидРасхода
				   |	И Расходы.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("ВидРасхода", Справочники.ВидыРасходов.НайтиПоКоду("000000010"));
	отдано_кредитов = запрос.Выполнить().Выгрузить().Итог("Сумма");
	
	// ++ obrv 05.10.18
	ОсталосьОтбить = 0;
	Если ПравоДоступаКредиты Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	ВложенияВолжска.СуммаДолга
					   |ИЗ
					   |	Справочник.ВложенияВолжска КАК ВложенияВолжска";

		;
		
		ОсталосьОтбить = Запрос.Выполнить().Выгрузить().Итог("СуммаДолга") - отдано_кредитов;
	КонецЕсли;
	// -- obrv 05.10.18

	РасчетГрафика();
	ПосчитатьИтогиМ();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	СУММА(Расходы.Сумма) КАК СуммаОстаток
				   |ИЗ
				   |	Документ.Расходы КАК Расходы
				   |ГДЕ
				   |	Расходы.Проведен = ИСТИНА
				   |	И Расходы.Новые = ИСТИНА";

	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	РасходыНовых = Таблица.Итог("СуммаОстаток");

	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ПродажаЗапчастей.ИтогоРекв) КАК Поле1
				   |ИЗ
				   |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
				   |ГДЕ
				   |	ПродажаЗапчастей.Оплачено = ИСТИНА
				   |	И ПродажаЗапчастей.Новые = ИСТИНА";
	Реультат = Запрос.Выполнить();
	Таблица = Реультат.Выгрузить();
	ПродажиНовых = Таблица.Итог("Поле1");
	НаРукахНовые = ПродажиНовых - РасходыНовых;
	//================================================
	ЗапчастейНаСумму = 0;
	Запрос.Текст = "ВЫБРАТЬ
				   |	РегистрНакопления1Остатки.Товар,
				   |	РегистрНакопления1Остатки.машина,
				   |	ИндНомер.Цена КАК цена,
				   |	РегистрНакопления1Остатки.КолвоОстаток,
				   |	Комментарии.Комментарий,
				   |	ИндНомер.Код,
				   |	(ВЫРАЗИТЬ(РегистрНакопления1Остатки.Товар.РекомендованаяЦена * ИндНомер.наценка.Коофициент / 10 КАК ЧИСЛО(10, 0))) * 10 * РегистрНакопления1Остатки.КолвоОстаток КАК наценкаФ
				   |ИЗ
				   |	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарии
				   |		ПО (Комментарии.Товар = РегистрНакопления1Остатки.Товар)
				   |			И (Комментарии.Машина = РегистрНакопления1Остатки.машина)
				   |			И (Комментарии.индкод = РегистрНакопления1Остатки.индкод)
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
				   |		ПО (ИндНомер.индкод = РегистрНакопления1Остатки.индкод)";
	ЗапчастейНаСумму = Запрос.Выполнить().Выгрузить().Итог("наценкаФ");
	запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ПродажаЗапчастей.ОстатокДенег) КАК ОстатокДенег
				   |ИЗ
				   |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
				   |ГДЕ
				   |	ПродажаЗапчастей.Проведен = ИСТИНА
				   |	И ПродажаЗапчастей.Новые <> ИСТИНА";
	ПоЧастямВсего = Запрос.Выполнить().Выгрузить().Итог("ОстатокДенег");
	
	
	//=======================================================
	запрос.Текст = "ВЫБРАТЬ
				   |	ВыводС1ЯнваряОстатки.СуммаОстаток
				   |ИЗ
				   |	РегистрНакопления.ВыводС1Января.Остатки КАК ВыводС1ЯнваряОстатки
				   |ГДЕ
				   |	ВыводС1ЯнваряОстатки.Кто = 2";
	НасС1Января = запрос.Выполнить().Выгрузить().Итог("СуммаОстаток");
	запрос.Текст = "ВЫБРАТЬ
				   |	ВыводС1ЯнваряОстатки.СуммаОстаток
				   |ИЗ
				   |	РегистрНакопления.ВыводС1Января.Остатки КАК ВыводС1ЯнваряОстатки
				   |ГДЕ
				   |	ВыводС1ЯнваряОстатки.Кто = 1";
	МаратуС1Января = запрос.Выполнить().Выгрузить().Итог("СуммаОстаток");

	ДеньгиНаЗакупку = Макс(ОсталосьОтбить, -ОсталосьОтбить) - ВыведеноНам + НасС1Января;
	РазборДенегНаруках = РазборДенегНаруках - МаратуС1Января + КредитВБанке - Вложено;
	ОсталосьОтдатьМарату = НасС1Января - МаратуС1Января;

	запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	БалансОстатки.БалансОстаток
				   |ИЗ
				   |	РегистрНакопления.Баланс.Остатки КАК БалансОстатки";
	РазборДенегНаруках = запрос.Выполнить().Выгрузить().Итог("БалансОстаток");

	запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ЛичныйВывод.Сумма) как сумма1
				   |ИЗ
				   |	Документ.ЛичныйВывод КАК ЛичныйВывод
				   |ГДЕ
				   |	ЛичныйВывод.Проведен = ИСТИНА";
	
	// ++ obrv 11.08.20
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЛичныйВывод) Тогда
		ВыведеноНам = запрос.Выполнить().Выгрузить().Итог("сумма1");
	Иначе
		ВыведеноНам = 0;
	КонецЕсли;
	// -- obrv 11.08.20
	
	
	
	// Показатели для автосервиса
	Если ИспользоватьАвтосервис Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ПродажиОбороты.СуммаОборот) - СУММА(ЕСТЬNULL(ПродажиСебестоимостьОбороты.СтоимостьОборот, 0)) КАК СуммаВаловаяПрибыль,
		|	ПродажиОбороты.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_ВаловаяПрибыль
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(, , Регистратор, ) КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(, , Регистратор, ) КАК ПродажиСебестоимостьОбороты
		|		ПО ПродажиОбороты.Регистратор = ПродажиСебестоимостьОбороты.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажиОбороты.Регистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Оплаты.СуммаТовары КАК СуммаТоварыВыручка,
		|	ВТ_ВаловаяПрибыль.СуммаВаловаяПрибыль КАК СуммаТоварыВаловаяПрибыль
		|ИЗ
		|	ВТ_Оплаты КАК ВТ_Оплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВаловаяПрибыль КАК ВТ_ВаловаяПрибыль
		|		ПО ВТ_Оплаты.Документ = ВТ_ВаловаяПрибыль.Регистратор
		|			И ВТ_Оплаты.СуммаОплаты >= ВТ_Оплаты.СуммаДокумента";

		ТаблицаРезультат =  Запрос.Выполнить().Выгрузить();
		ТоварыВыручка = ТаблицаРезультат.Итог("СуммаТоварыВыручка");
		ТоварыСебестоимость = ТоварыВыручка - ТаблицаРезультат.Итог("СуммаТоварыВаловаяПрибыль");

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыОрганизацийОбороты.Регистратор КАК Регистратор,
		|	ТоварыОрганизацийОбороты.Склад КАК Склад,
		|	ТоварыОрганизацийОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыОрганизацийОбороты.Партия КАК Партия,
		|	ТоварыОрганизацийОбороты.СтоимостьРасход КАК Стоимость,
		|	ТоварыОрганизацийОбороты.КоличествоРасход КАК КоличествоРасход,
		|	ВЫБОР
		|		КОГДА ТоварыОрганизацийОбороты.Партия.ДокументПоступления.Контрагенты ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		КОГДА ТоварыОрганизацийОбороты.Партия.ДокументПоступления.Контрагенты В (&ПоставщикиБУ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоБУ
		|ПОМЕСТИТЬ ВТ_СебестоимостьТоваровПоПоставщикам
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Обороты(, , Регистратор, ) КАК ТоварыОрганизацийОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Оплаты КАК ВТ_Оплаты
		|		ПО 	ВТ_Оплаты.Документ = ТоварыОрганизацийОбороты.Регистратор
		|			И ВТ_Оплаты.СуммаОплаты >= ВТ_Оплаты.СуммаДокумента
		|ГДЕ
		|	НЕ ТоварыОрганизацийОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ПродажиОбороты.КоличествоОборот = 0
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(ВТ_СебестоимостьТоваровПоПоставщикам.КоличествоРасход, 0) * ПродажиОбороты.СуммаОборот / ПродажиОбороты.КоличествоОборот
		|		КОНЕЦ) КАК СуммаВыручка,
		|	ЕСТЬNULL(ВТ_СебестоимостьТоваровПоПоставщикам.ЭтоБУ, ЛОЖЬ) КАК ЭтоБУ
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(, , Регистратор, ) КАК ПродажиОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Оплаты КАК ВТ_Оплаты
		|		ПО 	ВТ_Оплаты.Документ = ПродажиОбороты.Регистратор
		|			И ВТ_Оплаты.СуммаОплаты >= ВТ_Оплаты.СуммаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СебестоимостьТоваровПоПоставщикам КАК ВТ_СебестоимостьТоваровПоПоставщикам
		|		ПО ПродажиОбороты.Регистратор = ВТ_СебестоимостьТоваровПоПоставщикам.Регистратор
		|			И ПродажиОбороты.Номенклатура = ВТ_СебестоимостьТоваровПоПоставщикам.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СебестоимостьТоваровПоПоставщикам.ЭтоБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СебестоимостьТоваровПоПоставщикам.ЭтоБУ КАК ЭтоБУ,
		|	СУММА(ВТ_СебестоимостьТоваровПоПоставщикам.Стоимость) КАК Стоимость
		|ИЗ
		|	ВТ_СебестоимостьТоваровПоПоставщикам КАК ВТ_СебестоимостьТоваровПоПоставщикам
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СебестоимостьТоваровПоПоставщикам.ЭтоБУ";
		ПоставщикиБУ = Новый Массив;
		дт_ОбщегоНазначения.ДобавитьСсылкуВКоллекцию(ПоставщикиБУ, "Контрагенты", "525620015122", "ИНН");// ИП Рожков
		дт_ОбщегоНазначения.ДобавитьСсылкуВКоллекцию(ПоставщикиБУ, "Контрагенты", "5252044090", "ИНН");// Ворктрак

		Запрос.УстановитьПараметр("ПоставщикиБУ", ПоставщикиБУ);

		РезультатЗапроса = Запрос.ВыполнитьПакет();

		Выборка = РезультатЗапроса[1].Выбрать();
		ТоварыНовыеПрибыль = 0;
		ТоварыБУПрибыль = 0;

		Пока Выборка.Следующий() Цикл
			Если Выборка.ЭтоБУ Тогда
				ТоварыБУПрибыль = ТоварыБУПрибыль + Выборка.СуммаВыручка;
			Иначе
				ТоварыНовыеПрибыль = ТоварыНовыеПрибыль + Выборка.СуммаВыручка;
			КонецЕсли;
		КонецЦикла;

		Выборка = РезультатЗапроса[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЭтоБУ Тогда
				ТоварыБУПрибыль = ТоварыБУПрибыль - Выборка.Стоимость;
			Иначе
				ТоварыНовыеПрибыль = ТоварыНовыеПрибыль - Выборка.Стоимость;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕжедневныеРасходы.ПредельныйРасход КАК ПредельныйРасход,
	|	ЕжедневныеРасходы.Период КАК Период
	|ИЗ
	|	РегистрСведений.ЕжедневныеРасходы КАК ЕжедневныеРасходы
	|ГДЕ
	|	ЕжедневныеРасходы.Период = &Период";
	запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЕжедневныеРасходы = выборка.ПредельныйРасход;
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры

&НаСервере
Процедура РасчетГрафика()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	Графики.ТипДиаграммы = ТипДиаграммы.Гистограмма;
	
	// ++ obrv 11.05.18
	ПоказатьЛичныеПродажи = Не РазрешеныОтчетыРуководителю;
	// -- obrv 11.05.18

	Если ИспользоватьАвтосервис Тогда
		СерияУслуги = Графики.УстановитьСерию("Услуги");
		СерияУслуги.Цвет = Новый Цвет(85, 116, 78);

		СерияТовары = Графики.УстановитьСерию("Товары (прибыль)");
		СерияТовары.Цвет = Новый Цвет(123, 255, 5);
	Иначе
		сер1 = Графики.УстановитьСерию("Продажи");
		сер1.Цвет = Новый Цвет(85, 116, 78);
	КонецЕсли;
	
	// ++ obrv 11.05.18 
	Если ПоказатьЛичныеПродажи Тогда

		СерияЛичныеПродажи = Графики.УстановитьСерию("Продажи личные");
		СерияЛичныеПродажи.Цвет = WebЦвета.БледноЗеленый;

	КонецЕсли;
	// -- obrv 11.05.18
	сер3 = Графики.УстановитьСерию("Расходы");
	сер3.Цвет = Новый Цвет(208, 42, 53); 
	
	// ++ obrv 11.05.18
	Если РазрешеныОтчетыРуководителю Тогда

		сер2 = Графики.УстановитьСерию("Отдано в Банк");
		сер2.Цвет = Новый Цвет(14, 37, 99);

	КонецЕсли;
	// -- obrv 11.05.18
	
	// ++ obrv 12.09.19
	Текст = ТекстЗапросаОплаты();
	Если Не ПустаяСтрока(Текст) Тогда

		Текст = Текст + ";" + Символы.ПС + "ВЫБРАТЬ
										   |	СУММА(ПродажиОбороты.СуммаОборот) - СУММА(ЕСТЬNULL(ПродажиСебестоимостьОбороты.СтоимостьОборот, 0)) КАК СуммаВаловаяПрибыль,
										   |   СУММА(ПродажиОбороты.СуммаОборот) КАК СуммаВыручка,
										   |	ПродажиОбороты.Регистратор КАК Регистратор
										   |ПОМЕСТИТЬ ВТ_ВаловаяПрибыль
										   |ИЗ
										   |	РегистрНакопления.Продажи.Обороты(&Дата1, &Дата2, Регистратор, &Условие) КАК ПродажиОбороты
										   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&Дата1, &Дата2, Регистратор, ) КАК ПродажиСебестоимостьОбороты
										   |		ПО ПродажиОбороты.Регистратор = ПродажиСебестоимостьОбороты.Регистратор
										   |
										   |СГРУППИРОВАТЬ ПО
										   |	ПродажиОбороты.Регистратор
										   |;
										   |
										   |////////////////////////////////////////////////////////////////////////////////
										   |ВЫБРАТЬ
										   |	ВТ_Оплаты.СуммаТовары КАК СуммаТоварыВыручка,
										   |	ВТ_Оплаты.СуммаУслуги КАК СуммаУслугиВыручка,
										   |	ВТ_Оплаты.СуммаДокумента КАК СуммаДокумента,
										   |	ВЫБОР
										   |		КОГДА ВТ_Оплаты.СуммаОплаты > ВТ_ВаловаяПрибыль.СуммаВаловаяПрибыль
										   |			ТОГДА ВТ_ВаловаяПрибыль.СуммаВаловаяПрибыль
										   |		ИНАЧЕ ВТ_Оплаты.СуммаОплаты
										   |	КОНЕЦ КАК СуммаВаловаяПрибыльОплаченная,
										   |	ВЫБОР
										   |		КОГДА ВТ_Оплаты.СуммаОплаты > ВТ_ВаловаяПрибыль.СуммаВыручка
										   |			ТОГДА ВТ_ВаловаяПрибыль.СуммаВыручка
										   |		ИНАЧЕ ВТ_Оплаты.СуммаОплаты
										   |	КОНЕЦ КАК СуммаВыручкаОплаченная,
										   |	ВТ_ВаловаяПрибыль.СуммаВаловаяПрибыль КАК СуммаТоварыВаловаяПрибыль
										   |ИЗ
										   |	ВТ_Оплаты КАК ВТ_Оплаты
										   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВаловаяПрибыль КАК ВТ_ВаловаяПрибыль
										   |		ПО ВТ_Оплаты.Документ = ВТ_ВаловаяПрибыль.Регистратор
										   |			И (ВТ_Оплаты.СуммаОплаты > 0)";

		Если РольДоступна("дт_ЧтениеВсехПродажВГрафике") Или Пользователи.ЭтоПолноправныйПользователь() Тогда
			Условие = "";
		Иначе
			Условие = "Подразделение = &Подразделение";
		КонецЕсли;
		Текст = СтрЗаменить(Текст, "&Условие", Условие);

	КонецЕсли;
	// -- obrv 12.09.19
	
	// ++ obrv 20.11.19
	ВидРасходаКредитПлатеж = Справочники.ВидыРасходов.КредитПлатеж;
	// -- obrv 20.11.19

	Текст2 = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
			 |	СУММА(Расходы.Сумма) как сумма
			 |ИЗ
			 |	Документ.Расходы КАК Расходы
			 |ГДЕ
			 |	Расходы.ВидРасхода = &ВидРасхода И Расходы.Дата МЕЖДУ &Дата1 И &Дата2
			 |	И Расходы.Проведен = ИСТИНА";
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Подразделение", дт_ПраваДоступа.ТекущееПодразделение());

	Марату = Новый Запрос;
	Марату.Текст = Текст2;
	// ++ obrv 20.11.19
	Марату.УстановитьПараметр("ВидРасхода", ВидРасходаКредитПлатеж);
	// -- obrv 20.11.19

	ЗапрРасход = Новый Запрос;
	ЗапрРасход.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	Расходы.Сумма
					   |ИЗ
					   |	Документ.Расходы КАК Расходы
					   |ГДЕ
					   |	Расходы.Дата МЕЖДУ &Дата1 И &Дата2";
	
	// ++ obrv 05.10.18
	// Добавить к расходам Личный вывод. Исключим расходы вида Кредит платеж
	ЗапрРасход.Текст  =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Расходы.Сумма КАК Сумма
	|ИЗ
	|	Документ.Расходы КАК Расходы
	|ГДЕ
	|	Расходы.Дата МЕЖДУ &Дата1 И &Дата2
	|	И Расходы.Проведен
	|	И НЕ Расходы.ВидРасхода В (&ВидыРасходаИсключить)";

	Если ПравоДоступа("Чтение", Метаданные.Документы.ЛичныйВывод) Тогда
		ЗапрРасход.Текст = ЗапрРасход.Текст + "
											  |
											  |ОБЪЕДИНИТЬ ВСЕ
											  |
											  |ВЫБРАТЬ
											  |	ЛичныйВывод.Сумма
											  |ИЗ
											  |	Документ.ЛичныйВывод КАК ЛичныйВывод
											  |ГДЕ
											  |	ЛичныйВывод.Дата МЕЖДУ &Дата1 И &Дата2
											  |	И ЛичныйВывод.Проведен";

	КонецЕсли;
	ВидыРасходаИсключить = Новый Массив;
	ВидыРасходаИсключить.Добавить(ВидРасходаКредитПлатеж);
	
	// Для автосервиса расходы выводим без затрат на покупку з/ч
	Если ИспользоватьАвтосервис Тогда
		ВидыРасходаИсключить = Справочники.ВидыРасходов.ВидыРасходовЗакупкаНовые(ВидыРасходаИсключить);
		ВидыРасходаИсключить = Справочники.ВидыРасходов.ВидыРасходовЗакупкаБУ(ВидыРасходаИсключить);
	КонецЕсли;

	ЗапрРасход.УстановитьПараметр("ВидыРасходаИсключить", ВидыРасходаИсключить);
	// -- obrv 05.10.18

	ДатаНачала = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -11));
	ДатаОкончания = ТекущаяДата();

	Периоды = Новый ТаблицаЗначений;
	Периоды.Колонки.Добавить("Период");
	Периоды.Колонки.Добавить("ДатаНачала");
	Периоды.Колонки.Добавить("ДатаОкончания");
	Периоды.Колонки.Добавить("Точка");
	
	// ++ obrv 11.05.18
	// Получим данные по личным продажам
	Если ПоказатьЛичныеПродажи Тогда

		Ответственный = Пользователи.ТекущийПользователь();

		ЗапросЛичныеПродажи = Новый Запрос;
		ЗапросЛичныеПродажи.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросЛичныеПродажи.УстановитьПараметр("КтоПродал", Ответственный);
		ЗапросЛичныеПродажи.УстановитьПараметр("НачалоПериода", ДатаНачала);
		ЗапросЛичныеПродажи.УстановитьПараметр("КонецПериода", ДатаОкончания);

		СформироватьВТДокументыПоОтветственному(ДатаНачала, ДатаОкончания, Ответственный,
			ЗапросЛичныеПродажи.МенеджерВременныхТаблиц);

		ТекстЗапроса = ТекстЗапросаОплаты(
			"(&НачалоПериода, &КонецПериода, Месяц, Документ В (ВЫБРАТЬ втДокументыПоОтветственному.Ссылка ИЗ втДокументыПоОтветственному))",
			Истина, Ложь);

		ТаблицаЛичныеПродажи = Неопределено;

		Если Не ПустаяСтрока(ТекстЗапроса) Тогда

			ЗапросЛичныеПродажи.Текст = ТекстЗапроса;
			ЗапросЛичныеПродажи.Выполнить();

			ЗапросЛичныеПродажи.Текст =
			"ВЫБРАТЬ
			|	ВТ_Оплаты.СуммаТовары КАК СуммаТовары,
			|	ВТ_Оплаты.Период КАК Период
			|ПОМЕСТИТЬ ВТ_ОплаченныеСделки
			|ИЗ
			|	ВТ_Оплаты КАК ВТ_Оплаты
			|ГДЕ
			|	ВТ_Оплаты.СуммаОплаты >= ВТ_Оплаты.СуммаДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ОплаченныеСделки.Период КАК Период,
			|	СУММА(ВТ_ОплаченныеСделки.СуммаТовары) КАК Сумма
			|ИЗ
			|	ВТ_ОплаченныеСделки КАК ВТ_ОплаченныеСделки
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ОплаченныеСделки.Период";
			ТаблицаЛичныеПродажи = ЗапросЛичныеПродажи.Выполнить().Выгрузить();

		КонецЕсли;
	КонецЕсли;
	// -- obrv 11.05.18

	Пока ДатаНачала < ДатаОкончания Цикл
		Строка = Периоды.Добавить();
		Строка.Период = Формат(ДатаНачала, "ДФ=ММ");
		Строка.ДатаНачала = ДатаНачала;
		Строка.ДатаОкончания = Мин(ДатаОкончания, КонецМесяца(ДатаНачала));
		Если Строка.Период = "01" Тогда
			Строка.Точка = Графики.УстановитьТочку("Январь " + Формат(ДатаНачала, "ДФ=гггг"));
			;
		КонецЕсли;
		Если Строка.Период = "02" Тогда
			Строка.Точка = Графики.УстановитьТочку("Февраль " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		Если Строка.Период = "03" Тогда
			Строка.Точка = Графики.УстановитьТочку("Март " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		Если Строка.Период = "04" Тогда
			Строка.Точка = Графики.УстановитьТочку("Апрель " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		Если Строка.Период = "05" Тогда
			Строка.Точка = Графики.УстановитьТочку("Май " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		Если Строка.Период = "06" Тогда
			Строка.Точка = Графики.УстановитьТочку("Июнь " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		Если Строка.Период = "07" Тогда
			Строка.Точка = Графики.УстановитьТочку("Июль " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		Если Строка.Период = "08" Тогда
			Строка.Точка = Графики.УстановитьТочку("Август " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		Если Строка.Период = "09" Тогда
			Строка.Точка = Графики.УстановитьТочку("Сентябрь " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		Если Строка.Период = "10" Тогда
			Строка.Точка = Графики.УстановитьТочку("Октябрь " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		Если Строка.Период = "11" Тогда
			Строка.Точка = Графики.УстановитьТочку("Ноябрь " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		Если Строка.Период = "12" Тогда
			Строка.Точка = Графики.УстановитьТочку("Декабрь " + Формат(ДатаНачала, "ДФ=гггг"));
			;;
		КонецЕсли;
		ДатаНачала = Строка.ДатаОкончания + 1;
	КонецЦикла;
	Для Каждого стр Из Периоды Цикл
		Запрос.УстановитьПараметр("Дата1", стр.ДатаНачала);
		Запрос.УстановитьПараметр("Дата2", стр.ДатаОкончания);
		Марату.УстановитьПараметр("Дата1", стр.ДатаНачала);
		Марату.УстановитьПараметр("Дата2", стр.ДатаОкончания);
		ЗапрРасход.УстановитьПараметр("Дата1", стр.ДатаНачала);
		ЗапрРасход.УстановитьПараметр("Дата2", стр.ДатаОкончания);
		// ++ obrv 11.05.18
		//ЯнварьМ = Марату.Выполнить().Выгрузить().Итог("сумма");
		// -- obrv 11.05.18
		ЯнварьР = ЗапрРасход.Выполнить().Выгрузить().Итог("Сумма");
		
		// Продажи
		Если ИспользоватьАвтосервис Тогда
			СуммаУслуги = Запрос.Выполнить().Выгрузить().Итог("СуммаУслугиВыручка");
			СуммаТовары = Запрос.Выполнить().Выгрузить().Итог("СуммаТоварыВаловаяПрибыль");
			Графики.УстановитьЗначение(стр.Точка, СерияУслуги, СуммаУслуги);
			Графики.УстановитьЗначение(стр.Точка, СерияТовары, СуммаТовары);
		Иначе
			Январь = Запрос.Выполнить().Выгрузить().Итог("СуммаВыручкаОплаченная");
			Графики.УстановитьЗначение(стр.Точка, сер1, Январь);
		КонецЕсли;
		
		
		// ++ obrv 11.05.18
		//Графики.УстановитьЗначение(стр.Точка,сер2,ЯнварьМ);

		Если ПоказатьЛичныеПродажи Тогда
			СуммаЛичныеПродажи = 0;

			Если ТаблицаЛичныеПродажи <> Неопределено Тогда

				СтрокаТаблицыЛичныеПродажи = ТаблицаЛичныеПродажи.Найти(стр.ДатаНачала, "Период");
				Если СтрокаТаблицыЛичныеПродажи <> Неопределено Тогда
					СуммаЛичныеПродажи = СтрокаТаблицыЛичныеПродажи.Сумма;
				КонецЕсли;

			КонецЕсли;

			Графики.УстановитьЗначение(стр.Точка, СерияЛичныеПродажи, СуммаЛичныеПродажи);

		КонецЕсли;
		// -- obrv 11.05.18
		Графики.УстановитьЗначение(стр.Точка, сер3, ЯнварьР);
		
		// ++ obrv 11.05.18
		Если РазрешеныОтчетыРуководителю Тогда

			ЯнварьМ = Марату.Выполнить().Выгрузить().Итог("сумма");
			Графики.УстановитьЗначение(стр.Точка, сер2, ЯнварьМ);

		КонецЕсли;
		// -- obrv 11.05.18
	КонецЦикла;
	
	// Легенда перекрывает график
	Графики.ОтображатьЛегенду = Ложь;
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры

&НаСервере
Процедура ПосчитатьИтогиМ()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	Если ГодОР >= 2011 Или МесяцОР > 0 Тогда
		податам = Истина;
		Если МесяцОР > 0 И ГодОР < 2011 Тогда
			ГодОР = Год(ТекущаяДата());
		КонецЕсли;
		Если МесяцОР > 0 Тогда
			Дат1 = Дата(ГодОР, МесяцОР, 1);
			Дат2 = КонецМесяца(Дат1);
		Иначе
			Дат1 = Дата(ГодОР, 1, 1);
			Дат2 = КонецГода(Дат1);
		КонецЕсли;
	КонецЕсли;

	Текст = "ВЫБРАТЬ
			|	ПродажаЗапчастей.ИтогоРекв
			|ИЗ
			|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
			|ГДЕ
			|	ПродажаЗапчастей.Дата МЕЖДУ &Дата1 И &Дата2
			|	И ПродажаЗапчастей.Оплачено = ИСТИНА";
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	ЗапрРасход = Новый Запрос;
	ЗапрРасход.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	Расходы.Сумма
					   |ИЗ
					   |	Документ.Расходы КАК Расходы
					   |ГДЕ
					   |	Расходы.Дата МЕЖДУ &Дата1 И &Дата2";
	//===============================================================
	Запрос.УстановитьПараметр("Дата1", Дат1);
	Запрос.УстановитьПараметр("Дата2", Дат2);
	ЗапрРасход.УстановитьПараметр("Дата1", Дат1);
	ЗапрРасход.УстановитьПараметр("Дата2", Дат2);
	ИтогоМесяц = Запрос.Выполнить().Выгрузить().Итог("ИтогоРекв");
	РасходовМесяц = ЗапрРасход.Выполнить().Выгрузить().Итог("Сумма");

	Запрос.Текст = "ВЫБРАТЬ
				   |	ВыводДенегИзРазборки.Нам,
				   |	ВыводДенегИзРазборки.Марату
				   |ИЗ
				   |	Документ.ВыводДенегИзРазборки КАК ВыводДенегИзРазборки
				   |ГДЕ
				   |	ВыводДенегИзРазборки.Дата МЕЖДУ &Дата1 И &Дата2";
	Запрос.УстановитьПараметр("Дата1", Дат1);
	Запрос.УстановитьПараметр("Дата2", Дат2);
	МаратуМесяц = Запрос.Выполнить().Выгрузить().Итог("Марату");
	НамМесяц = Запрос.Выполнить().Выгрузить().Итог("Нам");
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры
&НаСервере
Процедура РасчетОтданоБанку()
	//////++++ Форма ОтчетПоРасходам ++++//////
	запрос = Новый запрос;
	запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	СУММА(Расходы.Сумма) как сумма
				   |ИЗ
				   |	Документ.Расходы КАК Расходы
				   |ГДЕ
				   |	Расходы.ВидРасхода = &ВидРасхода";
	запрос.УстановитьПараметр("ВидРасхода", Справочники.ВидыРасходов.НайтиПоКоду("000000010"));
	ОтданоБанку = запрос.Выполнить().Выгрузить().Итог("сумма");
	//////---- Форма ОтчетПоРасходам ----//////
КонецПроцедуры
&НаСервере
Процедура РасчетВложено()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	запрос = Новый запрос;
	запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	СУММА(Расходы.Сумма) КАК сумма
				   |ИЗ
				   |	Документ.Расходы КАК Расходы
				   |ГДЕ
				   |	Расходы.ВидРасхода.Наименование В(&ВидыРасхода)";
	// ++ obrv 20.11.19

	ВидыРасхода = Справочники.ВидыРасходов.ВидыРасходовЗакупкаБУ();

	запрос.УстановитьПараметр("ВидыРасхода", ВидыРасхода);
	
	// -- obrv 20.11.19

	Вложено = запрос.Выполнить().Выгрузить().Итог("сумма");
	запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	СУММА(Расходы.Сумма) как сумма
				   |ИЗ
				   |	Документ.Расходы КАК Расходы
				   |ГДЕ
				   |	Расходы.ВидРасхода В(&ВидыРасхода)";

	ВидыРасхода = Справочники.ВидыРасходов.ВидыРасходовЗакупкаНовые();
	запрос.УстановитьПараметр("ВидыРасхода", ВидыРасхода);

	ВложеноНовые = запрос.Выполнить().Выгрузить().Итог("сумма");
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры
&НаКлиенте
Процедура УстановитьВидимостьИДоступность()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	Элементы.ГруппаРасходыКомпании.Видимость =  ПолныеПрава Или Финансы() Или ПомощникБухгалтера();

	Элементы.ГруппаСетка.Видимость = РазрешеныОтчетыРуководителю;
	Элементы.ГруппаОстатокДС.Видимость = РазрешеныОтчетыРуководителю Или ДопустимыеПользователи()
		Или ПомощникБухгалтера(); //Москвичи() ИЛИ ПомощникБухгалтера();

	Элементы.ГруппаПоказателиСтраницы.ТекущаяСтраница = ?(ИспользоватьАвтосервис, Элементы.ГруппаАвтосервис,
		Элементы.ГруппаОсновные);
	Элементы.ГруппаПоказателиСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

	Элементы.ГруппаЗарплатаАвтосервис.Видимость = ИспользоватьАвтосервис И РазрешеныОтчетыРуководителю;
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры // УстановитьВидимостьИДоступность()
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	ПолныеПрава = пользователи.РолиДоступны("ПолныеПрава");
	РазрешеныОтчетыРуководителю = РольДоступна("дт_ОтчетыРуководителю");
	ИспользоватьАвтосервис = ПолучитьФункциональнуюОпцию("дт_ИспользоватьАвтосервис");
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры // УстановитьФункциональныеОпцииФормы()

&НаСервере
Функция ПомощникБухгалтера()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	Возврат Пользователи.РолиДоступны("ПомощникБухгалтера");
	//////---- Форма ОтчетПоРасходам ----//////

КонецФункции
&НаСервере
Функция Москвичи()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	Возврат Пользователи.РолиДоступны("Москва");
	//////---- Форма ОтчетПоРасходам ----//////

КонецФункции

&НаСервере
Функция ДопустимыеПользователи()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	///+ГомзМА 06.02.2024
	РезультатФункции = Ложь;
	Если Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию(
		"Мустяца Роман Павлович") Или Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию(
		"Ягофаров Николай Дмитриевич") Тогда
		РезультатФункции = Истина;
	КонецЕсли;

	Возврат РезультатФункции;
	///-ГомзМА 06.02.2024
	//////---- Форма ОтчетПоРасходам ----//////

КонецФункции

&НаСервере
Функция Финансы()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	Возврат Пользователи.РолиДоступны("дт_Зарплата") Или Пользователи.РолиДоступны("МенеджерПоПродажам");
	//////---- Форма ОтчетПоРасходам ----//////

КонецФункции
&НаСервереБезКонтекста
Функция ТекстЗапросаОплаты(ПараметрыВиртТабл = "", Разрешенные = Истина, ИсключитьПродажиЗЧ = Ложь)
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	ВидыДокументов = Новый Массив;
	Если Не ИсключитьПродажиЗЧ Тогда
		ВидыДокументов.Добавить("ПродажаЗапчастей");
	КонецЕсли;
	ВидыДокументов.Добавить("ЗаказНаряд");
	ВидыДокументов.Добавить("ЗаказНаДоставку");

	ЕстьПериод = Ложь;

	Если Не ПустаяСтрока(ПараметрыВиртТабл) Тогда
		КлючевыеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Месяц,День,Год,Регистратор");
		Для Каждого КлючевоеСлово Из КлючевыеСлова Цикл

			ЕстьПериод = СтрНайти(ПараметрыВиртТабл, КлючевоеСлово) <> 0;
			Если ЕстьПериод Тогда
				Прервать;
			КонецЕсли
			;

		КонецЦикла;
	КонецЕсли;

	ТекстЗапроса = "";
	ПервыйВид = Истина;

	Для Каждого ВидДокумента Из ВидыДокументов Цикл

		Если Не ПравоДоступа("Чтение", Метаданные.Документы[ВидДокумента]) Тогда
			Продолжить;
		КонецЕсли
		;
		ИмяПоляСумма = ?(ВидДокумента = "ПродажаЗапчастей", "ИтогоРекв", "СуммаДокумента");
		ИмяПоляСуммаУслуги = ?(ВидДокумента = "ЗаказНаряд", "Док.СуммаРаботы", "0");
		ИмяПоляСуммаТовары = ?(ВидДокумента = "ЗаказНаряд", "СуммаТовары", ИмяПоляСумма);

		ТекстЗапроса = ТекстЗапроса + ?(ПервыйВид, "ВЫБРАТЬ " + ?(Разрешенные, "РАЗРЕШЕННЫЕ", ""), Символы.ПС
			+ "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + "ВЫБРАТЬ") + "
														   |	" + ?(ЕстьПериод,
			"ОплатыПоСделкамОбороты.Период КАК Период,", "") + "
															   |	ОплатыПоСделкамОбороты.Документ КАК Документ,
															   |	ОплатыПоСделкамОбороты.СуммаОборот КАК СуммаОплаты,
															   |	Док." + ИмяПоляСумма + " КАК СуммаДокумента,
																						   |	Док."
			+ ИмяПоляСуммаТовары + " КАК СуммаТовары,
								   |	" + ИмяПоляСуммаУслуги + " КАК СуммаУслуги
																 | " + ?(ПервыйВид, "ПОМЕСТИТЬ ВТ_Оплаты", "") + "
																												 |ИЗ
																												 |	РегистрНакопления.ОплатыПоСделкам.Обороты"
			+ ПараметрыВиртТабл + " КАК ОплатыПоСделкамОбороты
								  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + ВидДокумента + " КАК Док
																							 |		ПО ОплатыПоСделкамОбороты.Документ = Док.Ссылка";

		ПервыйВид = Ложь;

	КонецЦикла;

	Возврат ТекстЗапроса;
	//////---- Форма ОтчетПоРасходам ----//////

КонецФункции // ТекстЗапросаОплаты()
Процедура СформироватьВТДокументыПоОтветственному(НачалоПериода, КонецПериода, Ответственный, МВТ, Разрешенные = Истина)
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить("ПродажаЗапчастей");
	ВидыДокументов.Добавить("ЗаказНаряд");
	ТекстЗапроса = "";
	ПервыйВид = Истина;

	Для Каждого ВидДокумента Из ВидыДокументов Цикл

		Если Не ПравоДоступа("Чтение", Метаданные.Документы[ВидДокумента]) Тогда
			Продолжить;
		КонецЕсли
		;
		ТекстЗапроса = ТекстЗапроса + ?(ПервыйВид, "ВЫБРАТЬ " + ?(Разрешенные, "РАЗРЕШЕННЫЕ", ""), Символы.ПС
			+ "ОБЪЕДИНИТЬ" + Символы.ПС + "ВЫБРАТЬ") + "
													   |	Док.Ссылка КАК Ссылка
													   | " + ?(ПервыйВид, "ПОМЕСТИТЬ втДокументыПоОтветственному", "")
			+ "
			  |ИЗ
			  |	Документ." + ВидДокумента + ".Ответственные КАК Док
											   |ГДЕ Док.Сотрудник = &Ответственный 
											   |	И Док.Роль = ЗНАЧЕНИЕ(Перечисление.дт_РолиВПродаже.Продавец)
											   |	И Док.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода";

		Если ВидДокумента = "ПродажаЗапчастей" Тогда
			ТекстЗапроса = ТекстЗапроса + "
										  |ОБЪЕДИНИТЬ
										  |ВЫБРАТЬ
										  |	Док.Ссылка
										  |ИЗ
										  |	Документ.ПродажаЗапчастей КАК Док
										  |ГДЕ Док.КтоПродал = &Ответственный 
										  |	И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
		КонецЕсли;

		ПервыйВид = Ложь;

	КонецЦикла;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);

	Запрос.Выполнить();
	//////---- Форма ОтчетПоРасходам ----//////

КонецПроцедуры

&НаСервере
Функция СформироватьОтчеты()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	Если Элементы.ГруппаЗарплатаАвтосервис.Видимость Тогда

		СформироватьОтчетЗарплатаАвтосервис();

	КонецЕсли;

	Если ДопустимыеПользователи() И Не ПолныеПрава Тогда //Москвичи() И НЕ ПолныеПрава тогда
		ТекстЗапроса = "ВЫБРАТЬ
					   |РегистрНакопленияБалансОстатки.Измерение1,
					   |РегистрНакопленияБалансОстатки.БалансОстаток
					   |ИЗ
					   |РегистрНакопления.Баланс.Остатки КАК РегистрНакопленияБалансОстатки";

		Текстзапроса = ТекстЗапроса + " ГДЕ РегистрНакопленияБалансОстатки.Измерение1.Подразделение = &Подразделение";
		СписокОстатковНаСчёте.ТекстЗапроса = Текстзапроса;

		Если Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию(
			"Мустяца Роман Павлович") Тогда
			СписокОстатковНаСчёте.Параметры.УстановитьЗначениеПараметра("Подразделение",
				Справочники.Подразделения.НайтиПоКоду("000000029")); //Филиал Москва - Действующий
		ИначеЕсли Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию(
			"Ягофаров Николай Дмитриевич") Тогда
			СписокОстатковНаСчёте.Параметры.УстановитьЗначениеПараметра("Подразделение",
				Справочники.Подразделения.НайтиПоКоду("000000060")); //Филиал Екатеринбург - Действующий
		КонецЕсли;
	КонецЕсли;
	//////---- Форма ОтчетПоРасходам ----//////	

КонецФункции // СформироватьОтчеты()

&НаСервере
Процедура СформироватьОтчетЗарплатаАвтосервис()
	
	//////++++ Форма ОтчетПоРасходам ++++//////
	ТаблицаОтчетЗарплатаАвтосервис.Очистить();

	Если Не ПравоДоступа("Использование", Метаданные.Отчеты.ЗарплатаАвтосервис) Тогда
		Возврат;
	КонецЕсли
	;

	ОтчетОбъект = РеквизитФормыВЗначение("ОтчетЗарплатаАвтосервис");

	Схема = ОтчетОбъект.ПолучитьМакет("ЗарплатаАвтосервис");
	ИмяВариантаНастроек = "Основной";

	ВариантНастроек = Схема.ВариантыНастроек.Найти(ИмяВариантаНастроек);

	Если ВариантНастроек <> Неопределено Тогда
		Настройки = ВариантНастроек.Настройки;
	Иначе
		Настройки = Схема.НастройкиПоУмолчанию;
	КонецЕсли;

	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);

	Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", НачалоМесяца(ТекущаяДата()));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", КонецМесяца(ТекущаяДата()));
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);

	ОтчетОбъект.СкомпоноватьРезультат(ТаблицаОтчетЗарплатаАвтосервис);
	//////---- Форма ОтчетПоРасходам ----//////	
КонецПроцедуры // СформироватьОтчетЗарплатаАвтосервис()
&НаСервере
Процедура ОбновитьСписок()
	
	//////++++ Форма ЖурналПродажи ++++//////
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЖурналПродажи, "Ответственный",
		ОтветственныйЖурнал, Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	ЖурналПродажи, "Закрыто", Истина, // Значение отбора

		ВидСравненияКомпоновкиДанных.НеРавно, , РежимВРаботе);
	//////---- Форма ЖурналПродажи ----//////

КонецПроцедуры // УстановитьОтбор()
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//////++++ Форма ЖурналПродажи ++++//////
	// Состояние
	ЭлементУО = ЖурналПродажи.УсловноеОформление.Элементы.Добавить();
	
	// ЗН.В работе, Продажа.Собран  -Зеленый
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы, "ИЛИ",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "Состояние", ВидСравненияКомпоновкиДанных.Равно,
		ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.ВРаботе"));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "Состояние", ВидСравненияКомпоновкиДанных.Равно,
		ПредопределенноеЗначение("Перечисление.СтатусОтправки.Собран"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);
	
	
	// Продажа.Сборка - Желтый
	ЭлементУО = ЖурналПродажи.УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "Состояние",
		ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтатусОтправки.Сборка"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Желтый);
	
	// Сумма оплаты не совпадает с суммой документа - оранжевый
	ЭлементУО = ЖурналПродажи.УсловноеОформление.Элементы.Добавить();
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы, "И",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ, "СуммаОплачено",
		ВидСравненияКомпоновкиДанных.НеРавно, 0);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ, "СуммаОплачено",
		ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных("Сумма"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Оранжевый);
	//////---- Форма ЖурналПродажи ----//////

КонецПроцедуры
&НаСервере
Процедура УстановитьВидимость()
	
	///+ГомзМА 29.03.2023
	//Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПомощникБухгалтера")) Тогда
		//Элементы.СтраницаОтчетПоРасходам.Видимость 			= Истина;
	Если Не (ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти(
		"дт_ПолныеПрава")) Или ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти(
		"ПолныеПрава")) Или ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти(
		"дт_Зарплата")) Или ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти(
		"МенеджерПоПродажам")) Или ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(
		Метаданные.Роли.Найти("ПомощникБухгалтера"))) Тогда

		Элементы.СтраницаПродажиЗапчастейВРаботе.Видимость  = Ложь;
		Элементы.СтраницаЖурналПродажи.Видимость 			= Ложь;
		Элементы.СтраницаОтчетПоРасходам.Видимость 			= Ложь;
	Иначе
		Элементы.СтраницаПродажиЗапчастейВРаботе.Видимость  = Истина;
		Элементы.СтраницаЖурналПродажи.Видимость 			= Истина;
		Элементы.СтраницаОтчетПоРасходам.Видимость 			= Истина;
	КонецЕсли;	
	///-ГомзМА 29.03.2023
	
	///+ГомзМА 31.08.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_Зарплата"))
		Или ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава"))
		Или ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти(
		"ПомощникБухгалтера")) Тогда

		Элементы.СтраницаДенежныеПоказатели.Видимость = Истина;
	Иначе
		Элементы.СтраницаДенежныеПоказатели.Видимость = Ложь;
	КонецЕсли;
	 ///-ГомзМА 31.08.2023

КонецПроцедуры
&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	//////++++ Форма Посещаемость ++++//////
	Результат.Очистить();
	ОтчетПосещаемость = РеквизитФормыВЗначение("Отчет");
	ОтчетПосещаемость.СкомпоноватьРезультат(Результат);
	//////---- Форма Посещаемость ----//////

КонецПроцедуры
&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыОбязанности()
	
	//////++++ Форма Обязанности ++++//////
	Если Не Пользователи.РолиДоступны("ПолныеПрава") Тогда 
		//ТекстЗапроса = СписокОбязанности.ТекстЗапроса;
		//ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ГДЕ" + Символы.ПС + "Обязанности.Кураторы.Сотрудник = &Сотрудник";
		//СписокОбязанности.ТекстЗапроса = ТекстЗапроса;
		СписокОбязанности.Параметры.УстановитьЗначениеПараметра("Сотрудник", Справочники.Сотрудники.НайтиПоРеквизиту(
			"Пользователь", Пользователи.ТекущийПользователь()));
	КонецЕсли;
	//////---- Форма Обязанности ----//////

КонецПроцедуры

&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыПродажиЗапчастейВРаботе()
	
	//////++++ Форма ПродажиЗапчастейВРаботе ++++//////
	Ответственный = Пользователи.ТекущийПользователь();
	УстановитьОтбор(СписокПродажи, Ответственный);
	//////---- Форма ПродажиЗапчастейВРаботе ----//////

КонецПроцедуры
&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыЗарплатаПоМесяцам()
	
	//////++++ Форма ЗарплатаПоМесяцам ++++//////
	// ++ obrv 12.11.18
	ЭтаФорма.Год 	= Год(ТекущаяДата());
	ЭтаФорма.Месяц 	= Месяц(ТекущаяДата());
	// -- obrv 12.11.18
	
	// ++ obrv 16.01.18
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	СписокПродажДляЗП.Параметры.УстановитьЗначениеПараметра("КтоПродал", Пользователь);

	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь() Или РольДоступна("дт_Зарплата");

	УправлениеФормой(ЭтаФорма);	
	// -- obrv 16.01.18
	ОбновитьСуммы();
	//////---- Форма ЗарплатаПоМесяцам ----//////

КонецПроцедуры
&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыИнвентарь()
	
	//////++++ Форма Инвентарь ++++//////
	ТекущийПользователь = Пользователи.ТекущийПользователь();

	ЭлементОтбора = Инвентарь.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ответственный");
	ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ТекущийПользователь;
	//////---- Форма Инвентарь ----//////

КонецПроцедуры
&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыЖурналПродажи()
	
	//////++++ Форма ЖурналПродажи ++++//////
	Если Не Параметры.Свойство("РежимВРаботе", РежимВРаботе) Тогда
		РежимВРаботе = Истина;
	КонецЕсли;

	ЭтаФорма.АвтоЗаголовок = Не РежимВРаботе;
	Если РежимВРаботе Тогда
		Заголовок = "Продажи в работе";
	КонецЕсли;

	ОтветственныйЖурнал = Пользователи.ТекущийПользователь();
	ОбновитьСписок();

	УстановитьУсловноеОформление();
	//////---- Форма ЖурналПродажи ----//////

КонецПроцедуры

&НаСервере
Функция ПриОткрытииНаСервере()
	ТекушийПользовательИБ  =  ПользователиИнформационнойБазы.ТекущийПользователь();
	СоединенияИБт  =  ПолучитьСоединенияИнформационнойБазы();
	СеансОткрыт   = 0;
	Для Каждого СоединениеИБтр Из СоединенияИБт Цикл
		Сообщить( СоединениеИБтр.Пользователь.Имя);
		Если Найти(СоединениеИБтр.ИмяПриложения, "1CV8") = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если СоединениеИБтр.Пользователь = ТекушийПользовательИБ Тогда
			//Если  СеансОткрыт  Тогда
			//Возврат  Истина; 
			//Иначе
			СеансОткрыт  =  СеансОткрыт + 1;
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СеансОткрыт > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ПриОткрытииНаСервере() и НЕ ПроверкаПользователя()  Тогда
	//	Предупреждение("В системе уже авторизован пользователь с таким именем!");
	//	ЗавершитьРаботуСистемы(Ложь);
	//КонецЕсли;
КонецПроцедуры

Функция ПроверкаПользователя()
	Возврат Пользователи.ЭтоПолноправныйПользователь();
КонецФункции

&НаКлиенте
Процедура ПериодДенеджыеПоказателиПриИзменении(Элемент)
	
	//////++++ Форма ДенежныеПоказатели ++++//////
	///+ГомзМА 31.08.2023
	ПериодДенеджыеПоказателиПриИзмененииНаСервере();
	///-ГомзМА 31.08.2023
		
	//////---- Форма ДенежныеПоказатели ----//////

КонецПроцедуры
&НаКлиенте
Процедура ПериодДенеджыеПоказателиПриИзмененииНаСервере()
	
	//////++++ Форма ДенежныеПоказатели ++++//////
	///+ГомзМА 31.08.2023
	СписокДенежныеПоказатели.Параметры.УстановитьЗначениеПараметра("ДатаНачалаДП", ПериодДенеджыеПоказатели.ДатаНачала);
	СписокДенежныеПоказатели.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияДП",
		ПериодДенеджыеПоказатели.ДатаОкончания);
	///-ГомзМА 31.08.2023
	
	///+ГомзМА 21.09.2023
	СписокНеоплаченныеЗаявкиНаРасход.Параметры.УстановитьЗначениеПараметра("ДатаНачалаДП", '00010101');
	СписокНеоплаченныеЗаявкиНаРасход.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияДП",
		ПериодДенеджыеПоказатели.ДатаОкончания);

	СписокДетализацияРасходов.Параметры.УстановитьЗначениеПараметра("ДатаНачалаДП", ПериодДенеджыеПоказатели.ДатаНачала);
	СписокДетализацияРасходов.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияДП",
		ПериодДенеджыеПоказатели.ДатаОкончания);

	СписокДенежныйПоток.Параметры.УстановитьЗначениеПараметра("ДатаНачалаДП", ПериодДенеджыеПоказатели.ДатаНачала);
	СписокДенежныйПоток.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияДП", ПериодДенеджыеПоказатели.ДатаОкончания);
	///-ГомзМА 21.09.2023
	//////---- Форма ДенежныеПоказатели ----//////

КонецПроцедуры

&НаСервере
Функция ТаблицыДенежныхПоказателейНаСервере()
	
	//////++++ Форма ДенежныеПоказатели ++++//////

	ТабДок = Новый ТабличныйДокумент;
	
	///+ГомзМА 31.08.2023
	//Вывод в табличный документ динамический список СписокДенежныеПоказатели
	СписокФормыДП = Элементы.СписокДенежныеПоказатели;

	СхемаДП = СписокФормыДП.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	//КомпоновщикНастроекДП = Новый КомпоновщикНастроекКомпоновкиДанных;
	//ЗначениеПараметраДП = КомпоновщикНастроекДП.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
	//ЗначениеПараметраДП.Значение = "Баланс";
	//ЗначениеПараметраДП.Использование = Истина;
	
	//НастройкиДП = КомпоновщикНастроекДП.Настройки;
	НастройкиДП = СписокФормыДП.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	КомпоновщикМакетаДП = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДП = КомпоновщикМакетаДП.Выполнить(СхемаДП, НастройкиДП);

	ПроцессорКомпоновкиДП = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДП.Инициализировать(МакетКомпоновкиДП);

	ПроцессорВыводаДП = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаДП.УстановитьДокумент(ТабДок);
	ПроцессорВыводаДП.Вывести(ПроцессорКомпоновкиДП);

	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	///-ГомзМА 31.08.2023
	
	///+ГомзМА 19.09.2023
	//Вывод в табличный документ динамический список СписокДетализацияРасходов
	СписокФормыДР = Элементы.СписокДетализацияРасходов;

	СхемаДР = СписокФормыДР.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	//КомпоновщикНастроекДР = Новый КомпоновщикНастроекКомпоновкиДанных;
	//ЗначениеПараметраДР = КомпоновщикНастроекДР.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
	//ЗначениеПараметраДР.Значение = "Детализация расходов";
	//ЗначениеПараметраДР.Использование = Истина;
	
	//НастройкиДР = КомпоновщикНастроекДР.Настройки;
	НастройкиДР = СписокФормыДР.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	КомпоновщикМакетаДР = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДР = КомпоновщикМакетаДР.Выполнить(СхемаДР, НастройкиДР);

	ПроцессорКомпоновкиДР = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДР.Инициализировать(МакетКомпоновкиДР);

	ПроцессорВыводаДР = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаДР.УстановитьДокумент(ТабДок);
	ПроцессорВыводаДР.Вывести(ПроцессорКомпоновкиДР);

	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	//Вывод в табличный документ динамический список СписокТекущиеПоказатели
	СписокФормыТП = Элементы.СписокТекущиеПоказатели;

	СхемаТП = СписокФормыТП.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	//КомпоновщикНастроекТП = Новый КомпоновщикНастроекКомпоновкиДанных;
	//ЗначениеПараметраТП = КомпоновщикНастроекТП.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
	//ЗначениеПараметраТП.Значение = "Текущие показатели";
	//ЗначениеПараметраТП.Использование = Истина;
	
	//НастройкиТП = КомпоновщикНастроекТП.Настройки;
	НастройкиТП = СписокФормыТП.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	КомпоновщикМакетаТП = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиТП = КомпоновщикМакетаТП.Выполнить(СхемаТП, НастройкиТП);

	ПроцессорКомпоновкиТП = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиТП.Инициализировать(МакетКомпоновкиТП);

	ПроцессорВыводаТП = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаТП.УстановитьДокумент(ТабДок);
	ПроцессорВыводаТП.Вывести(ПроцессорКомпоновкиТП);

	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	//Вывод в табличный документ динамический список СписокОжидаемыйПриходДенег
	СписокФормыОПД = Элементы.СписокОжидаемыйПриходДенег;

	СхемаОПД = СписокФормыОПД.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	//КомпоновщикНастроекОПД = Новый КомпоновщикНастроекКомпоновкиДанных;
	//ЗначениеПараметраОПД = КомпоновщикНастроекОПД.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
	//ЗначениеПараметраОПД.Значение = "Ожидаемый приход денег";
	//ЗначениеПараметраОПД.Использование = Истина;
	
	//НастройкиОПД = КомпоновщикНастроекОПД.Настройки;
	НастройкиОПД = СписокФормыОПД.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	КомпоновщикМакетаОПД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиОПД = КомпоновщикМакетаОПД.Выполнить(СхемаОПД, НастройкиОПД);

	ПроцессорКомпоновкиОПД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиОПД.Инициализировать(МакетКомпоновкиОПД);

	ПроцессорВыводаОПД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаОПД.УстановитьДокумент(ТабДок);
	ПроцессорВыводаОПД.Вывести(ПроцессорКомпоновкиОПД);

	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	//Вывод в табличный документ динамический список СписокНеоплаченныеЗаявкиНаРасход
	СписокФормыНЗ = Элементы.СписокНеоплаченныеЗаявкиНаРасход;

	СхемаНЗ = СписокФормыНЗ.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	//КомпоновщикНастроекНЗ = Новый КомпоновщикНастроекКомпоновкиДанных;
	//ЗначениеПараметраНЗ = КомпоновщикНастроекНЗ.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
	//ЗначениеПараметраНЗ.Значение = "Неоплаченные заявки на расход";
	//ЗначениеПараметраНЗ.Использование = Истина;
	
	//НастройкиНЗ = КомпоновщикНастроекНЗ.Настройки;
	НастройкиНЗ = СписокФормыНЗ.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	КомпоновщикМакетаНЗ = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиНЗ = КомпоновщикМакетаНЗ.Выполнить(СхемаНЗ, НастройкиНЗ);

	ПроцессорКомпоновкиНЗ = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиНЗ.Инициализировать(МакетКомпоновкиНЗ);

	ПроцессорВыводаНЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаНЗ.УстановитьДокумент(ТабДок);
	ПроцессорВыводаНЗ.Вывести(ПроцессорКомпоновкиНЗ);

	Возврат ТабДок;
	///-ГомзМА 19.09.2023
	//////---- Форма ДенежныеПоказатели ----//////

КонецФункции
&НаСервере
Функция ПечатьТаблицыДенежныхПоказателейНаСервере()

	///+ГомзМА 20.09.2023 
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ТаблицыДенежныхСредств");

	МассивСчетаООО = Новый Массив;
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000003"));
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000010"));
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000011"));
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000013"));
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000014"));
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000015"));
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000023"));
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000025"));
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000039"));
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000042"));
	МассивСчетаООО.Добавить(Справочники.Счета.НайтиПоКоду("000000043"));

	МассивСчетаИП = Новый Массив;
	МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000002"));
	МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000009"));
	МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000021"));
	МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000029"));
	МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000030"));
	МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000032"));
	МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000037"));
		//Волков ИО 01.12.23 ++
	МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000040"));
		//Волков ИО 01.12.23 --
	МассивСчетаИП.Добавить(Справочники.Счета.НайтиПоКоду("000000046"));
	МассивСчетаКарта = Новый Массив;
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000004"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000006"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000012"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000017"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000022"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000024"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000026"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000027"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000031"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000033"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000035"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000041"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000045"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000049"));
	МассивСчетаКарта.Добавить(Справочники.Счета.НайтиПоКоду("000000051"));
	МассивСчетаНаличка = Новый Массив;
	МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000001"));
	МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000005"));
	МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000034"));
	МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000036"));
	МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000047"));
	МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000048"));
		/// Комлев 21/05/24 +++
		//МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000050"));
	МассивСчетаНаличка.Добавить(Справочники.Счета.НайтиПоКоду("000000038"));
		/// Комлев 21/05/24 ---
	//Заполняем таблицу Баланс
	ЗапросДП = Новый Запрос;
	ЗапросДП.Текст =
	"ВЫБРАТЬ
	|	""Приход"" КАК Показатели,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетООО)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК ООО,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетИП)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК ИП,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетКарта)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК КАРТА,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетНаличка)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК НАЛИЧКА,
	|	"""" КАК ПустаяСтрока
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	РегистрНакопления.Баланс КАК регБаланс
	|ГДЕ
	|	регБаланс.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И регБаланс.Регистратор ССЫЛКА Документ.ПриходДенегНаСчет
	|	И регБаланс.Период МЕЖДУ &ДатаНачалаДП И &ДатаОкончанияДП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Расход"",
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетООО)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетИП)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетКарта)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетНаличка)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ),
	|	""""
	|ИЗ
	|	РегистрНакопления.Баланс КАК регБаланс
	|ГДЕ
	|	(регБаланс.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И регБаланс.Регистратор ССЫЛКА Документ.Расходы
	|			ИЛИ регБаланс.Регистратор ССЫЛКА Документ.ЛичныйВывод)
	|	И регБаланс.Период МЕЖДУ &ДатаНачалаДП И &ДатаОкончанияДП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""В КАССЕ (на текущий момент)"",
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетООО)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетИП)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетКарта)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетНаличка)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ),
	|	""""
	|ИЗ
	|	РегистрНакопления.Баланс.Остатки КАК БалансОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.Показатели КАК Показатели,
	|	ВТ_Показатели.ООО КАК ООО,
	|	ВТ_Показатели.ИП КАК ИП,
	|	ВТ_Показатели.КАРТА КАК КАРТЫ,
	|	ВТ_Показатели.НАЛИЧКА КАК НАЛИЧКА,
	|	ЕСТЬNULL(ВТ_Показатели.ООО, 0) + ЕСТЬNULL(ВТ_Показатели.ИП, 0) + ЕСТЬNULL(ВТ_Показатели.КАРТА, 0) + ЕСТЬNULL(ВТ_Показатели.НАЛИЧКА, 0) КАК СУММАИТОГО,
	|	ВТ_Показатели.ПустаяСтрока КАК ПустаяСтрока
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели";

	ЗапросДП.УстановитьПараметр("ДатаНачалаДП", ПериодДенеджыеПоказатели.ДатаНачала);
	ЗапросДП.УстановитьПараметр("ДатаОкончанияДП", ПериодДенеджыеПоказатели.ДатаОкончания);

	ЗапросДП.УстановитьПараметр("СчетООО", МассивСчетаООО);
	ЗапросДП.УстановитьПараметр("СчетИП", МассивСчетаИП);
	ЗапросДП.УстановитьПараметр("СчетКарта", МассивСчетаКарта);
	ЗапросДП.УстановитьПараметр("СчетНаличка", МассивСчетаНаличка);

	ВыборкаЗапросДП = ЗапросДП.Выполнить().Выбрать();

	ОбластьШапкаДП   = Макет.ПолучитьОбласть("ОбластьШапкаДП");
	ОбластьТаблицаДП = Макет.ПолучитьОбласть("ОбластьТаблицаДП");
	ТабДок.Очистить();

	ВыборкаЗапросДП.Следующий();

	Если ПериодДенеджыеПоказатели.ДатаНачала = НачалоДня(ПериодДенеджыеПоказатели.ДатаОкончания) Тогда
		СтрукПериодДенежныеПоказатели = Новый Структура("Дата", Формат(ПериодДенеджыеПоказатели.ДатаОкончания,
			"ДФ=dd.MM.yyyy"));
		ОбластьШапкаДП.Параметры.Заполнить(СтрукПериодДенежныеПоказатели);
	Иначе
		СтрукПериодДенежныеПоказатели = Новый Структура("ПериодДенеджыеПоказатели", ПериодДенеджыеПоказатели);
		ОбластьШапкаДП.Параметры.Заполнить(СтрукПериодДенежныеПоказатели);
	КонецЕсли;

	ТабДок.Вывести(ОбластьШапкаДП);

	ОбластьТаблицаДП.Параметры.Заполнить(ВыборкаЗапросДП);
	ТабДок.Вывести(ОбластьТаблицаДП, ВыборкаЗапросДП.Уровень());

	Пока ВыборкаЗапросДП.Следующий() Цикл
		ОбластьТаблицаДП.Параметры.Заполнить(ВыборкаЗапросДП);
		ТабДок.Вывести(ОбластьТаблицаДП, ВыборкаЗапросДП.Уровень());
	КонецЦикла;
	
	//Заполняем таблицу Денежный поток
	ЗапросДПот = Новый Запрос;
	ЗапросДПот.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетООО)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК ООО,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетИП)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК ИП,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетКарта)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК КАРТЫ,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетНаличка)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК НАЛИЧКА
	|ПОМЕСТИТЬ ВТ_Приход
	|ИЗ
	|	РегистрНакопления.Баланс КАК регБаланс
	|ГДЕ
	|	регБаланс.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И регБаланс.Регистратор ССЫЛКА Документ.ПриходДенегНаСчет
	|	И регБаланс.Период МЕЖДУ &ДатаНачалаДП И &ДатаОкончанияДП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетООО)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК ООО,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетИП)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК ИП,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетКарта)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК КАРТЫ,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетНаличка)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК НАЛИЧКА
	|ПОМЕСТИТЬ ВТ_Расход
	|ИЗ
	|	РегистрНакопления.Баланс КАК регБаланс
	|ГДЕ
	|	(регБаланс.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И регБаланс.Регистратор ССЫЛКА Документ.Расходы
	|			ИЛИ регБаланс.Регистратор ССЫЛКА Документ.ЛичныйВывод)
	|	И регБаланс.Период МЕЖДУ &ДатаНачалаДП И &ДатаОкончанияДП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""В КАССЕ (на начало периода)"" КАК Показатели,
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетООО)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ) КАК ООО,
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетИП)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ) КАК ИП,
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетКарта)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ) КАК КАРТА,
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетНаличка)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ) КАК НАЛИЧКА,
	|	"""" КАК ПустаяСтрока
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	РегистрНакопления.Баланс.Остатки(&ДатаНачалаДП, ) КАК БалансОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Дельта"",
	|	ЕСТЬNULL(ВТ_Приход.ООО, 0) - ЕСТЬNULL(ВТ_Расход.ООО, 0),
	|	ЕСТЬNULL(ВТ_Приход.ИП, 0) - ЕСТЬNULL(ВТ_Расход.ИП, 0),
	|	ЕСТЬNULL(ВТ_Приход.КАРТЫ, 0) - ЕСТЬNULL(ВТ_Расход.КАРТЫ, 0),
	|	ЕСТЬNULL(ВТ_Приход.НАЛИЧКА, 0) - ЕСТЬNULL(ВТ_Расход.НАЛИЧКА, 0),
	|	""""
	|ИЗ
	|	ВТ_Приход КАК ВТ_Приход,
	|	ВТ_Расход КАК ВТ_Расход
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""В КАССЕ (на конец периода)"",
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетООО)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетИП)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетКарта)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА БалансОстатки.Измерение1 В (&СчетНаличка)
	|				ТОГДА БалансОстатки.БалансОстаток
	|		КОНЕЦ),
	|	""""
	|ИЗ
	|	РегистрНакопления.Баланс.Остатки(&ДатаОкончанияДП, ) КАК БалансОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.Показатели КАК Показатели,
	|	ВТ_Показатели.ООО КАК ООО,
	|	ВТ_Показатели.ИП КАК ИП,
	|	ВТ_Показатели.КАРТА КАК КАРТЫ,
	|	ВТ_Показатели.НАЛИЧКА КАК НАЛИЧКА,
	|	ЕСТЬNULL(ВТ_Показатели.ООО, 0) + ЕСТЬNULL(ВТ_Показатели.ИП, 0) + ЕСТЬNULL(ВТ_Показатели.КАРТА, 0) + ЕСТЬNULL(ВТ_Показатели.НАЛИЧКА, 0) КАК СУММАИТОГО,
	|	ВТ_Показатели.ПустаяСтрока КАК ПустаяСтрока
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели";

	ЗапросДПот.УстановитьПараметр("ДатаНачалаДП", ПериодДенеджыеПоказатели.ДатаНачала);
	ЗапросДПот.УстановитьПараметр("ДатаОкончанияДП", ПериодДенеджыеПоказатели.ДатаОкончания);

	ЗапросДПот.УстановитьПараметр("СчетООО", МассивСчетаООО);
	ЗапросДПот.УстановитьПараметр("СчетИП", МассивСчетаИП);
	ЗапросДПот.УстановитьПараметр("СчетКарта", МассивСчетаКарта);
	ЗапросДПот.УстановитьПараметр("СчетНаличка", МассивСчетаНаличка);

	ВыборкаЗапросДПот = ЗапросДПот.Выполнить().Выбрать();

	ОбластьШапкаДПот   = Макет.ПолучитьОбласть("ОбластьШапкаДПот");
	ОбластьТаблицаДПот = Макет.ПолучитьОбласть("ОбластьТаблицаДПот");

	ВыборкаЗапросДПот.Следующий();

	ТабДок.Вывести(ОбластьШапкаДПот);

	ОбластьТаблицаДПот.Параметры.Заполнить(ВыборкаЗапросДПот);
	ТабДок.Вывести(ОбластьТаблицаДПот, ВыборкаЗапросДПот.Уровень());

	Пока ВыборкаЗапросДПот.Следующий() Цикл
		ОбластьТаблицаДПот.Параметры.Заполнить(ВыборкаЗапросДПот);
		ТабДок.Вывести(ОбластьТаблицаДПот, ВыборкаЗапросДПот.Уровень());
	КонецЦикла;
	
	//Заполняем таблицу Детализация расходов
	ЗапросДР = Новый Запрос;
	ЗапросДР.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА регБаланс.Регистратор ССЫЛКА Документ.ЛичныйВывод
	|			ТОГДА ""Доп. траты""
	|		ИНАЧЕ регБаланс.Регистратор.ВидОперации
	|	КОНЕЦ КАК Расход,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетООО)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК ООО,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетИП)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК ИП,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетКарта)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК КАРТА,
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетНаличка)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ) КАК НАЛИЧКА,
	|	"""" КАК ПустаяСтрока
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	РегистрНакопления.Баланс КАК регБаланс
	|ГДЕ
	|	(регБаланс.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И регБаланс.Регистратор ССЫЛКА Документ.Расходы
	|			ИЛИ регБаланс.Регистратор ССЫЛКА Документ.ЛичныйВывод)
	|	И регБаланс.Период МЕЖДУ &ДатаНачалаДП И &ДатаОкончанияДП
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА регБаланс.Регистратор ССЫЛКА Документ.ЛичныйВывод
	|			ТОГДА ""Доп. траты""
	|		ИНАЧЕ регБаланс.Регистратор.ВидОперации
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Итого"",
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетООО)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетИП)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетКарта)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА регБаланс.Измерение1 В (&СчетНаличка)
	|				ТОГДА регБаланс.Баланс
	|		КОНЕЦ),
	|	""""
	|ИЗ
	|	РегистрНакопления.Баланс КАК регБаланс
	|ГДЕ
	|	(регБаланс.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И регБаланс.Регистратор ССЫЛКА Документ.Расходы
	|			ИЛИ регБаланс.Регистратор ССЫЛКА Документ.ЛичныйВывод)
	|	И регБаланс.Период МЕЖДУ &ДатаНачалаДП И &ДатаОкончанияДП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.ООО КАК ООО,
	|	ВТ_Показатели.ИП КАК ИП,
	|	ВТ_Показатели.КАРТА КАК КАРТЫ,
	|	ВТ_Показатели.НАЛИЧКА КАК НАЛИЧКА,
	|	ЕСТЬNULL(ВТ_Показатели.ООО, 0) + ЕСТЬNULL(ВТ_Показатели.ИП, 0) + ЕСТЬNULL(ВТ_Показатели.КАРТА, 0) + ЕСТЬNULL(ВТ_Показатели.НАЛИЧКА, 0) КАК СУММАИТОГО,
	|	ВТ_Показатели.ПустаяСтрока КАК ПустаяСтрока,
	|	ВТ_Показатели.Расход КАК Расход
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели";

	ЗапросДР.УстановитьПараметр("ДатаНачалаДП", ПериодДенеджыеПоказатели.ДатаНачала);
	ЗапросДР.УстановитьПараметр("ДатаОкончанияДП", ПериодДенеджыеПоказатели.ДатаОкончания);

	ЗапросДР.УстановитьПараметр("СчетООО", МассивСчетаООО);
	ЗапросДР.УстановитьПараметр("СчетИП", МассивСчетаИП);
	ЗапросДР.УстановитьПараметр("СчетКарта", МассивСчетаКарта);
	ЗапросДР.УстановитьПараметр("СчетНаличка", МассивСчетаНаличка);

	ВыборкаЗапросДР = ЗапросДР.Выполнить().Выбрать();

	ОбластьШапкаДР   = Макет.ПолучитьОбласть("ОбластьШапкаДР");
	ОбластьТаблицаДР = Макет.ПолучитьОбласть("ОбластьТаблицаДР");

	ВыборкаЗапросДР.Следующий();

	ТабДок.Вывести(ОбластьШапкаДР);

	ОбластьТаблицаДР.Параметры.Заполнить(ВыборкаЗапросДР);
	ТабДок.Вывести(ОбластьТаблицаДР, ВыборкаЗапросДР.Уровень());

	Пока ВыборкаЗапросДР.Следующий() Цикл
		ОбластьТаблицаДР.Параметры.Заполнить(ВыборкаЗапросДР);
		ТабДок.Вывести(ОбластьТаблицаДР, ВыборкаЗапросДР.Уровень());
	КонецЦикла;
	
	
	//Заполняем таблицу Ожидаемый приход денег
	ЗапросОПД = Новый Запрос;
	ЗапросОПД.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ПродажаЗапчастей.TipOplati.Счет В (&СчетООО)
	|				ТОГДА ПродажаЗапчастей.ИтогоРекв
	|		КОНЕЦ) КАК ООО,
	|	СУММА(ВЫБОР
	|			КОГДА ПродажаЗапчастей.TipOplati.Счет В (&СчетИП)
	|				ТОГДА ПродажаЗапчастей.ИтогоРекв
	|		КОНЕЦ) КАК ИП,
	|	СУММА(ВЫБОР
	|			КОГДА ПродажаЗапчастей.TipOplati.Счет В (&СчетКарта)
	|				ТОГДА ПродажаЗапчастей.ИтогоРекв
	|		КОНЕЦ) КАК КАРТЫ,
	|	СУММА(ВЫБОР
	|			КОГДА ПродажаЗапчастей.TipOplati.Счет В (&СчетНаличка)
	|				ТОГДА ПродажаЗапчастей.ИтогоРекв
	|		КОНЕЦ) КАК НАЛИЧКА,
	|	"""" КАК ПустоеПоле,
	|	ВЫБОР
	|		КОГДА ПродажаЗапчастей.Проект <> ЗНАЧЕНИЕ(Справочник.ПроектыРазработки.ПустаяСсылка)
	|			ТОГДА ПродажаЗапчастей.Проект.Ссылка
	|		ИНАЧЕ ""Текущие""
	|	КОНЕЦ КАК Показатели
	|ПОМЕСТИТЬ ВТ_ПродажиЖдемДенег
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.СтатусПродажи = ЗНАЧЕНИЕ(Перечисление.СтатусыПродажи.Актуальная)
	|	И ПродажаЗапчастей.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПродажаЗапчастей.Проект <> ЗНАЧЕНИЕ(Справочник.ПроектыРазработки.ПустаяСсылка)
	|			ТОГДА ПродажаЗапчастей.Проект.Ссылка
	|		ИНАЧЕ ""Текущие""
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПродажиЖдемДенег.ООО КАК ООО,
	|	ВТ_ПродажиЖдемДенег.ИП КАК ИП,
	|	ВТ_ПродажиЖдемДенег.КАРТЫ КАК КАРТЫ,
	|	ВТ_ПродажиЖдемДенег.НАЛИЧКА КАК НАЛИЧКА,
	|	ЕСТЬNULL(ВТ_ПродажиЖдемДенег.ООО, 0) + ЕСТЬNULL(ВТ_ПродажиЖдемДенег.ИП, 0) + ЕСТЬNULL(ВТ_ПродажиЖдемДенег.КАРТЫ, 0) + ЕСТЬNULL(ВТ_ПродажиЖдемДенег.НАЛИЧКА, 0) КАК СУММАИТОГО,
	|	ВТ_ПродажиЖдемДенег.ПустоеПоле КАК ПустоеПоле,
	|	ВТ_ПродажиЖдемДенег.Показатели КАК Показатели
	|ИЗ
	|	ВТ_ПродажиЖдемДенег КАК ВТ_ПродажиЖдемДенег";

	ЗапросОПД.УстановитьПараметр("СчетООО", МассивСчетаООО);
	ЗапросОПД.УстановитьПараметр("СчетИП", МассивСчетаИП);
	ЗапросОПД.УстановитьПараметр("СчетКарта", МассивСчетаКарта);
	ЗапросОПД.УстановитьПараметр("СчетНаличка", МассивСчетаНаличка);

	ВыборкаЗапросОПД = ЗапросОПД.Выполнить().Выбрать();

	ОбластьШапкаОПД   = Макет.ПолучитьОбласть("ОбластьШапкаОПД");
	ОбластьТаблицаОПД = Макет.ПолучитьОбласть("ОбластьТаблицаОПД");

	ВыборкаЗапросОПД.Следующий();

	ТабДок.Вывести(ОбластьШапкаОПД);

	ОбластьТаблицаОПД.Параметры.Заполнить(ВыборкаЗапросОПД);
	ТабДок.Вывести(ОбластьТаблицаОПД, ВыборкаЗапросОПД.Уровень());

	Пока ВыборкаЗапросОПД.Следующий() Цикл
		ОбластьТаблицаОПД.Параметры.Заполнить(ВыборкаЗапросОПД);
		ТабДок.Вывести(ОбластьТаблицаОПД, ВыборкаЗапросОПД.Уровень());
	КонецЦикла;

	//Заполняем таблицу Неоплаченные заявки на расход
	ЗапросНЗ = Новый Запрос;
	ЗапросНЗ.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеМеждуСчетами.Сумма КАК Сумма,
	|	ПеремещениеМеждуСчетами.ЗаявкаНаРасход КАК ЗаявкаНаРасход
	|ПОМЕСТИТЬ ВТ_ПеремещениеПоЗаявкам
	|ИЗ
	|	Документ.ПеремещениеМеждуСчетами КАК ПеремещениеМеждуСчетами
	|ГДЕ
	|	ПеремещениеМеждуСчетами.Проведен
	|	И ПеремещениеМеждуСчетами.ЗаявкаНаРасход <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасход.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.ЗаявкаНаРасход КАК ЗаявкаНаРасход,
	|	СУММА(Расходы.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втОплатыПоЗаявкам
	|ИЗ
	|	Документ.Расходы КАК Расходы
	|ГДЕ
	|	Расходы.Проведен
	|	И Расходы.ЗаявкаНаРасход <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасход.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расходы.ЗаявкаНаРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	докЗаявкаНаРасход.ВидРасхода.ВидОперацииСписаниеДенежныхСредств КАК ВидОперации,
	|	СУММА(ВЫБОР
	|			КОГДА докЗаявкаНаРасход.Счет В (&СчетООО)
	|				ТОГДА ЕСТЬNULL(докЗаявкаНаРасход.СуммаДокумента, 0) - ЕСТЬNULL(втОплатыПоЗаявкам.Сумма, 0)
	|		КОНЕЦ) КАК ООО,
	|	СУММА(ВЫБОР
	|			КОГДА докЗаявкаНаРасход.Счет В (&СчетИП)
	|				ТОГДА ЕСТЬNULL(докЗаявкаНаРасход.СуммаДокумента, 0) - ЕСТЬNULL(втОплатыПоЗаявкам.Сумма, 0)
	|		КОНЕЦ) КАК ИП,
	|	СУММА(ВЫБОР
	|			КОГДА докЗаявкаНаРасход.Счет В (&СчетКарта)
	|				ТОГДА ЕСТЬNULL(докЗаявкаНаРасход.СуммаДокумента, 0) - ЕСТЬNULL(втОплатыПоЗаявкам.Сумма, 0)
	|		КОНЕЦ) КАК КАРТЫ,
	|	СУММА(ВЫБОР
	|			КОГДА докЗаявкаНаРасход.Счет В (&СчетНаличка)
	|				ТОГДА ЕСТЬNULL(докЗаявкаНаРасход.СуммаДокумента, 0) - ЕСТЬNULL(втОплатыПоЗаявкам.Сумма, 0)
	|		КОНЕЦ) КАК НАЛИЧКА
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Документ.ЗаявкаНаРасход КАК докЗаявкаНаРасход
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПеремещениеПоЗаявкам КАК ВТ_ПеремещениеПоЗаявкам
	|		ПО докЗаявкаНаРасход.Ссылка = ВТ_ПеремещениеПоЗаявкам.ЗаявкаНаРасход
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыПоЗаявкам КАК втОплатыПоЗаявкам
	|		ПО докЗаявкаНаРасход.Ссылка = втОплатыПоЗаявкам.ЗаявкаНаРасход
	|ГДЕ
	|	НЕ(ЕСТЬNULL(втОплатыПоЗаявкам.Сумма, 0) >= докЗаявкаНаРасход.СуммаДокумента
	|				ИЛИ ЕСТЬNULL(ВТ_ПеремещениеПоЗаявкам.Сумма, 0) >= докЗаявкаНаРасход.СуммаДокумента)
	|	И докЗаявкаНаРасход.Статус <> ЗНАЧЕНИЕ(Перечисление.дт_СтатусыЗаявокНаРасход.Отклонено)
	|	И докЗаявкаНаРасход.Дата МЕЖДУ &ДатаНачалаДП И &ДатаОкончанияДП
	|
	|СГРУППИРОВАТЬ ПО
	|	докЗаявкаНаРасход.ВидРасхода.ВидОперацииСписаниеДенежныхСредств
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Итого"",
	|	СУММА(ВЫБОР
	|			КОГДА докЗаявкаНаРасход.Счет В (&СчетООО)
	|				ТОГДА ЕСТЬNULL(докЗаявкаНаРасход.СуммаДокумента, 0) - ЕСТЬNULL(втОплатыПоЗаявкам.Сумма, 0)
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА докЗаявкаНаРасход.Счет В (&СчетИП)
	|				ТОГДА ЕСТЬNULL(докЗаявкаНаРасход.СуммаДокумента, 0) - ЕСТЬNULL(втОплатыПоЗаявкам.Сумма, 0)
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА докЗаявкаНаРасход.Счет В (&СчетКарта)
	|				ТОГДА ЕСТЬNULL(докЗаявкаНаРасход.СуммаДокумента, 0) - ЕСТЬNULL(втОплатыПоЗаявкам.Сумма, 0)
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА докЗаявкаНаРасход.Счет В (&СчетНаличка)
	|				ТОГДА ЕСТЬNULL(докЗаявкаНаРасход.СуммаДокумента, 0) - ЕСТЬNULL(втОплатыПоЗаявкам.Сумма, 0)
	|		КОНЕЦ)
	|ИЗ
	|	Документ.ЗаявкаНаРасход КАК докЗаявкаНаРасход
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПеремещениеПоЗаявкам КАК ВТ_ПеремещениеПоЗаявкам
	|		ПО докЗаявкаНаРасход.Ссылка = ВТ_ПеремещениеПоЗаявкам.ЗаявкаНаРасход
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыПоЗаявкам КАК втОплатыПоЗаявкам
	|		ПО докЗаявкаНаРасход.Ссылка = втОплатыПоЗаявкам.ЗаявкаНаРасход
	|ГДЕ
	|	НЕ(ЕСТЬNULL(втОплатыПоЗаявкам.Сумма, 0) >= докЗаявкаНаРасход.СуммаДокумента
	|				ИЛИ ЕСТЬNULL(ВТ_ПеремещениеПоЗаявкам.Сумма, 0) >= докЗаявкаНаРасход.СуммаДокумента)
	|	И докЗаявкаНаРасход.Статус <> ЗНАЧЕНИЕ(Перечисление.дт_СтатусыЗаявокНаРасход.Отклонено)
	|	И докЗаявкаНаРасход.Дата МЕЖДУ &ДатаНачалаДП И &ДатаОкончанияДП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.ВидОперации КАК ВидОперации,
	|	ВТ_Показатели.ООО КАК ООО,
	|	ВТ_Показатели.ИП КАК ИП,
	|	ВТ_Показатели.КАРТЫ КАК КАРТЫ,
	|	ВТ_Показатели.НАЛИЧКА КАК НАЛИЧКА,
	|	ЕСТЬNULL(ВТ_Показатели.ООО, 0) + ЕСТЬNULL(ВТ_Показатели.ИП, 0) + ЕСТЬNULL(ВТ_Показатели.КАРТЫ, 0) + ЕСТЬNULL(ВТ_Показатели.НАЛИЧКА, 0) КАК СУММАИТОГО,
	|	"""" КАК ПустоеПоле
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели";

	ЗапросНЗ.УстановитьПараметр("ДатаНачалаДП", '00010101');
	ЗапросНЗ.УстановитьПараметр("ДатаОкончанияДП", ПериодДенеджыеПоказатели.ДатаОкончания);

	ЗапросНЗ.УстановитьПараметр("СчетООО", МассивСчетаООО);
	ЗапросНЗ.УстановитьПараметр("СчетИП", МассивСчетаИП);
	ЗапросНЗ.УстановитьПараметр("СчетКарта", МассивСчетаКарта);
	ЗапросНЗ.УстановитьПараметр("СчетНаличка", МассивСчетаНаличка);

	ВыборкаЗапросНЗ = ЗапросНЗ.Выполнить().Выбрать();

	ОбластьШапкаНЗ   = Макет.ПолучитьОбласть("ОбластьШапкаНЗ");
	ОбластьТаблицаНЗ = Макет.ПолучитьОбласть("ОбластьТаблицаНЗ");

	ВыборкаЗапросНЗ.Следующий();

	ТабДок.Вывести(ОбластьШапкаНЗ);

	ОбластьТаблицаНЗ.Параметры.Заполнить(ВыборкаЗапросНЗ);
	ТабДок.Вывести(ОбластьТаблицаНЗ, ВыборкаЗапросНЗ.Уровень());

	Пока ВыборкаЗапросНЗ.Следующий() Цикл
		ОбластьТаблицаНЗ.Параметры.Заполнить(ВыборкаЗапросНЗ);
		ТабДок.Вывести(ОбластьТаблицаНЗ, ВыборкаЗапросНЗ.Уровень());
	КонецЦикла;
	
	
	//ТабДок.ВывестиГоризонтальныйРазделительСтраниц();

	Возврат ТабДок;
	///-ГомзМА 20.09.2023

КонецФункции // ПечатьТаблицыДенежныхПоказателейНаСервере()


///-ГомзМА 27.03.2023

&НаСервере
Процедура ИзменитьТекстЗапросаДинамическогоСпискаСписокДетализацияРасходов()

	///+ГомзМА 15.09.2023
	Текст = "ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА регБаланс.Регистратор ССЫЛКА Документ.ЛичныйВывод
			|			ТОГДА ""Доп. траты""
			|		ИНАЧЕ регБаланс.Регистратор.ВидОперации
			|	КОНЕЦ КАК Расход,
			|	СУММА(ВЫБОР
			|			КОГДА регБаланс.Измерение1 В (&СчетООО)
			|				ТОГДА регБаланс.Баланс
			|		КОНЕЦ) КАК ООО,
			|	СУММА(ВЫБОР
			|			КОГДА регБаланс.Измерение1 В (&СчетИП)
			|				ТОГДА регБаланс.Баланс
			|		КОНЕЦ) КАК ИП,
			|	СУММА(ВЫБОР
			|			КОГДА регБаланс.Измерение1 В (&СчетКарта)
			|				ТОГДА регБаланс.Баланс
			|		КОНЕЦ) КАК КАРТА,
			|	СУММА(ВЫБОР
			|			КОГДА регБаланс.Измерение1 В (&СчетНаличка)
			|				ТОГДА регБаланс.Баланс
			|		КОНЕЦ) КАК НАЛИЧКА,
			|	"""" КАК ПустаяСтрока
			|ПОМЕСТИТЬ ВТ_Показатели
			|ИЗ
			|	РегистрНакопления.Баланс КАК регБаланс
			|ГДЕ
			|	регБаланс.Регистратор.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.Зарплата)
			|	И регБаланс.Период МЕЖДУ &ДатаНачалаДП И &ДатаОкончанияДП
			|	И (регБаланс.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				И регБаланс.Регистратор ССЫЛКА Документ.Расходы
			|			ИЛИ регБаланс.Регистратор ССЫЛКА Документ.ЛичныйВывод)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА регБаланс.Регистратор ССЫЛКА Документ.ЛичныйВывод
			|			ТОГДА ""Доп. траты""
			|		ИНАЧЕ регБаланс.Регистратор.ВидОперации
			|	КОНЕЦ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""Итого"",
			|	СУММА(ВЫБОР
			|			КОГДА регБаланс.Измерение1 В (&СчетООО)
			|				ТОГДА регБаланс.Баланс
			|		КОНЕЦ),
			|	СУММА(ВЫБОР
			|			КОГДА регБаланс.Измерение1 В (&СчетИП)
			|				ТОГДА регБаланс.Баланс
			|		КОНЕЦ),
			|	СУММА(ВЫБОР
			|			КОГДА регБаланс.Измерение1 В (&СчетКарта)
			|				ТОГДА регБаланс.Баланс
			|		КОНЕЦ),
			|	СУММА(ВЫБОР
			|			КОГДА регБаланс.Измерение1 В (&СчетНаличка)
			|				ТОГДА регБаланс.Баланс
			|		КОНЕЦ),
			|	""""
			|ИЗ
			|	РегистрНакопления.Баланс КАК регБаланс
			|ГДЕ
			|	регБаланс.Регистратор.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.Зарплата)
			|	И регБаланс.Период МЕЖДУ &ДатаНачалаДП И &ДатаОкончанияДП
			|	И (регБаланс.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|				И регБаланс.Регистратор ССЫЛКА Документ.Расходы
			|			ИЛИ регБаланс.Регистратор ССЫЛКА Документ.ЛичныйВывод)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Показатели.ООО КАК ООО,
			|	ВТ_Показатели.ИП КАК ИП,
			|	ВТ_Показатели.КАРТА КАК КАРТЫ,
			|	ВТ_Показатели.НАЛИЧКА КАК НАЛИЧКА,
			|	ЕСТЬNULL(ВТ_Показатели.ООО, 0) + ЕСТЬNULL(ВТ_Показатели.ИП, 0) + ЕСТЬNULL(ВТ_Показатели.КАРТА, 0) + ЕСТЬNULL(ВТ_Показатели.НАЛИЧКА, 0) КАК СУММАИТОГО,
			|	ВТ_Показатели.ПустаяСтрока КАК ПустаяСтрока,
			|	ВТ_Показатели.Расход КАК Расход
			|ИЗ
			|	ВТ_Показатели КАК ВТ_Показатели";

	СписокДетализацияРасходов.ТекстЗапроса = Текст;
	СписокДетализацияРасходов.Параметры.УстановитьЗначениеПараметра("ДатаНачалаДП", ПериодДенеджыеПоказатели.ДатаНачала);
	СписокДетализацияРасходов.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияДП",
		ПериодДенеджыеПоказатели.ДатаОкончания);
	///-ГомзМА 15.09.2023

КонецПроцедуры
#КонецОбласти