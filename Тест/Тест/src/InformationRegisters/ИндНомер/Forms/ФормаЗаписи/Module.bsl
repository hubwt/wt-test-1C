
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписьИсторииЦен = РегистрыСведений.ИсторияИзмененияЦен.СоздатьМенеджерЗаписи();
	ЗаписьИсторииЦен.Дата = ТекущаяДата();
	ЗаписьИсторииЦен.ИндНомер = запись.индкод;
	ЗаписьИсторииЦен.Ответственный = Пользователи.ТекущийПользователь();
	ЗаписьИсторииЦен.Записать();
КонецПроцедуры

&НаСервере
Функция СоздатьПеремещениеНаСервере()
	
	///+ГомзМА 01.09.2023
	НовыйДокумент = Документы.УстановкаМестХранения.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	НовыйДокумент.Склад = Справочники.Склады.НайтиПоКоду("000000002");
	НовыйДокумент.Ответственный = Пользователи.ТекущийПользователь();
	НоваяСтрока = НовыйДокумент.Товары.Добавить();
	НоваяСтрока.Номенклатура = Запись.индкод.Владелец;
	НоваяСтрока.МестоХраненияПолучатель = МестоХранения;
	НовыйДокумент.Записать();
	
	Возврат НовыйДокумент.Ссылка;
	///-ГомзМА 01.09.2023
	
КонецФункции

&НаКлиенте
Процедура СоздатьПеремещение(Команда)
	
	///+ГомзМА 01.09.2023
	СсылкаНаДокумент = СоздатьПеремещениеНаСервере();
	//ОткрытьЗначение(СсылкаНаДокумент);
	
	ПараметрыОткрытия = Новый Структура("Ключ", СсылкаНаДокумент);
	
	ОткрытьФорму("Документ.УстановкаМестХранения.ФормаОбъекта", ПараметрыОткрытия);
	///-ГомзМА 01.09.2023
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьГексагон(Команда)
	Отказ = истина;
	
	ВыполняемаяКоманда = Новый Структура("ЭтоОтчет, Ссылка, Идентификатор", ложь);
	ВыполняемаяКоманда.Ссылка = получитьВнешку();
	
	Если ВыполняемаяКоманда.Ссылка = Неопределено Тогда
		// ПоказатьПредупреждение(, «Не найдена дополнительная внешняя обработка с именем объекта КлиентБанк!»);
		Возврат;
	КонецЕсли;
	
	ОбъектыНазначения = Неопределено;
	ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьОткрытиеФормыОбработки(ВыполняемаяКоманда, ЭтаФорма, ОбъектыНазначения);КонецПроцедуры

Функция получитьВнешку()
	Возврат	Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Гексагон Печать этикеток");
КонецФункции

&НаКлиенте
Процедура АвитоЧастникПриИзменении(Элемент)
	
#Область ПопыткаСделатьЗадачуКузмичевИван_Волков1
	//Волков ИО 15.02.24 ++
	//Пользователь может устанавливать галку "Прошел конвеер" только когда Место работы сотрудника = Месту хранения номенклатуры
	//Сотрудник = ПроверитьСотрудника(Элементы.индкод.ВыделенныйТекст);	
	//Если Не Сотрудник Тогда 
	//	Сообщить("Для установки галки `Прошел Конвеер` сотрудник должен находиться в городе");
	//	Возврат; 
	//КонецЕсли;
	//Волков ИО 15.02.24 --
#КонецОбласти	

	Если ПроверкаИндКода() > 1 и НЕ ПроверкаВладельца() Тогда
		Сообщить("Стоп! На один Инд. код можно учесть только ОДНУ деталь.");
		Запись.АвитоЧастник = Ложь;
		Возврат;
		//Прервать;
	КонецЕсли;
	
	Если Запись.АвитоЧастник Тогда
		запись.ДатаИзмененияКонвеера = ТекущаяДата();
		запись.Ответственный = НашПользователь();
		АвитоЧастникПриИзмененииНаСервере();
	КонецЕсли;
	
	///+ГомзМА 13.12.2023
	Событие = "Установил галочку " + Элементы.АвитоЧастник.Заголовок;
	ЗаписьЛога(Событие, ТекущаяДата());
	
	Событие = "Сменил цену на: " + запись.Цена;
	ЗаписьЛога(Событие, ТекущаяДата() + 1);
	
	Событие = "Сменил стеллаж на: " + запись.Стеллаж;
	ЗаписьЛога(Событие, ТекущаяДата() + 2);
	
	Событие = "Сменил состояние на: " + запись.Состояние;
	ЗаписьЛога(Событие, ТекущаяДата() + 3);
	///-ГомзМА 13.12.2023
	
КонецПроцедуры

#Область ПопыткаСделатьЗадачуКузмичевИван_Волков2
//Волков ИО 15.02.24 ++
//Функция ПроверитьСотрудника(индкод)
//	//Волков ИО 15.02.24 ++ 
//	//Пользователи
//	Пользователь = Пользователи.ТекущийПользователь();
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Сотрудники.Ссылка КАК Сотрудник,
//	|	Сотрудники.МестоРаботы КАК МестоРаботы
//	|ИЗ
//	|	Справочник.Пользователи КАК Пользователи
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
//	|		ПО Пользователи.Ссылка = Сотрудники.Пользователь
//	|ГДЕ
//	|	Пользователи.Ссылка = &Пользователь";
//	
//	Запрос.УстановитьПараметр("Пользователь", Пользователь);
//	
//	РезультатЗапроса = Запрос.Выполнить().Выбрать();
//	
//	Если РезультатЗапроса.Количество() > 0 Тогда
//		
//		РезультатЗапроса.Следующий();
//		//РезультатЗапроса;
//		 
//		 СотрудникФИО = РезультатЗапроса.Сотрудник;
//		 СотрудникМестоРаботы = РезультатЗапроса.МестоРаботы;
//		 
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	РегистрНакопления1Остатки.индкод КАК индкод,
//	|	РегистрНакопления1Остатки.Склад КАК Склад
//	|ИЗ
//	|	РегистрНакопления.РегистрНакопления1.Остатки(, ) КАК РегистрНакопления1Остатки
//	|ГДЕ
//	|	РегистрНакопления1Остатки.индкод = &индкод";
//	
//	Запрос.УстановитьПараметр("индкод",индкод);
//	
//	Если РезультатЗапроса.Пустой() Тогда
//		
//		Возврат Ложь;
//		
//	Иначе
//		
//		РезультатЗапроса.Выбрать().Следующий();
//		 
//		МестоХраненияНоменклатуры  = РезультатЗапроса.индкод;

//	КонецЕсли;
//		
//	Если НЕ СотрудникМестоРаботы = МестоХраненияНоменклатуры Тогда 
//		
//		Возврат Ложь;
//	 
//	КонецЕсли;	 
//	
//	П = 1;
//		
//	Иначе    
//		
//		Возврат Ложь;
//		
//	КонецЕсли;
//		
//КонецФункции
#КонецОбласти


&НаСервере
Функция ПроверкаИндКода() 
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|ГДЕ
	|	РегистрНакопления1Остатки.индкод = &ПроверкаКода";
	Запрос.УстановитьПараметр("ПроверкаКода", Запись.индкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат выборка.КолвоОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция ПроверкаВладельца() 
	Возврат Запись.индкод.Владелец.Комплектация;
КонецФункции


&НаСервере
Процедура АвитоЧастникПриИзмененииНаСервере()
	
	Запись.Стеллаж = Справочники.Стеллаж.НайтиПоКоду("000001072");
	Запись.Цена = Запись.индкод.Владелец.РекомендованаяЦена;
	Запись.Состояние = Перечисления.Состояние.БУ;
	
КонецПроцедуры


Функция НашПользователь()
	Возврат Пользователи.ТекущийПользователь();
КонецФункции


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	///+ГомзМА 13.12.2023
	УстановитьВидимостьИДоступностьЭлементов();
	///-ГомзМА 13.12.2023
	///+ГомзМА 08.09.2023
	//Если Запись.Цена = 0 Тогда
	//	Элементы.ЦенаПроверена.ТолькоПросмотр = Истина;
	//КонецЕсли;
	///-ГомзМА 08.09.2023
	ВыводЛога();	
КонецПроцедуры


&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	///+ГомзМА 08.09.2023
	Если Запись.Цена = 0 Тогда
		Элементы.ЦенаПроверена.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ЦенаПроверена.ТолькоПросмотр = Ложь;
	КонецЕсли;
	///-ГомзМА 08.09.2023
	Событие = "Сменил цену на: " + запись.Цена;
	ЗаписьЛога(Событие, ТекущаяДата());	
КонецПроцедуры



&НаКлиенте
Процедура Печатьэтикетки(Команда) 
	Запись.АвитоЧастник = Истина;
	Если ПроверкаИндКода() > 1 и НЕ ПроверкаВладельца() Тогда
		Сообщить("Стоп! На один Инд. код можно учесть только ОДНУ деталь.");
		Запись.АвитоЧастник = Ложь;
		Возврат;
		//Прервать;
	КонецЕсли;
	
	Если  НЕ ПроверкаПользователя() Тогда
		Сообщить("Не-не-не. Проводим через конвейер только товары из своего региона!");
		Запись.АвитоЧастник = Ложь;
		Возврат;
		//Прервать;
	КонецЕсли;	
	
	Если Запись.АвитоЧастник Тогда
		запись.ДатаИзмененияКонвеера = ТекущаяДата();
		запись.Ответственный = НашПользователь();
		АвитоЧастникПриИзмененииНаСервере();
	КонецЕсли;
	
	
	///+ГомзМА 13.12.2023

	
	ТабДок = ПечатьэтикеткиСерв(запись.индкод);
	
		Событие = "Установил галочку " + Элементы.АвитоЧастник.Заголовок;
	ЗаписьЛога(Событие, ТекущаяДата());
	
	Событие = "Сменил цену на: " + запись.Цена;
	ЗаписьЛога(Событие, ТекущаяДата() + 1);
	
	Событие = "Сменил стеллаж на: " + запись.Стеллаж;
	ЗаписьЛога(Событие, ТекущаяДата() + 2);
	
	Событие = "Сменил состояние на: " + запись.Состояние;
	ЗаписьЛога(Событие, ТекущаяДата() + 3);
	
	ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
	//// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
	//КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ПечатьэтикеткиСерв");
	//// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	//КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	//// если требуется устанавливаем параметры печати
	//КоллекцияПечатныхФорм[0].Экземпляров=1;
	//КоллекцияПечатныхФорм[0].СинонимМакета = "ПечатьэтикеткиСерв";  // используется для формирования имени файла при сохранении из общей формы печати документов
	//// .. и выводим стандартной процедурой БСП
	//УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
	
	///+ГомзМА 13.12.2023
	Событие = "Распечатал бирку";
	ЗаписьЛога(Событие, ТекущаяДата());
	///-ГомзМА 13.12.2023
	
КонецПроцедуры

Функция ПроверкаПользователя()
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.МестоРаботы КАК МестоРаботы
	               |ПОМЕСТИТЬ ВТ_МестоРаботы
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Пользователь = &Пользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РегистрНакопления1Остатки.Склад.Город КАК СкладГород,
	               |	ВТ_МестоРаботы.МестоРаботы КАК МестоРаботы
	               |ИЗ
	               |	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки,
	               |	ВТ_МестоРаботы КАК ВТ_МестоРаботы
	               |ГДЕ
	               |	РегистрНакопления1Остатки.индкод = &индкод";
	Запрос.УстановитьПараметр("Пользователь",Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("индкод",Запись.индкод);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если выборка.МестоРаботы.наименование <> выборка.СкладГород.наименование Тогда
		Возврат Ложь;
	Иначе
		возврат Истина;
	КонецЕсли;
	

КонецФункции


Функция ПечатьэтикеткиСерв(Ссылка)
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Справочники.Номенклатура.ПолучитьМакет("Этикетка");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндКодc.Наименование КАК Наименование,
	|	ИндКодc.Владелец КАК Владелец,
	|	ВЫРАЗИТЬ(ИндКодc.Владелец.Наименование КАК СТРОКА(39)) КАК Название,
	|	ИндКодc.Владелец.МестоНаСкладе2 КАК ВладелецМестоНаСкладе2,
	|	ИндКодc.Владелец.Бренд КАК Бренд,
	|	ИндКодc.Владелец.НомерПроизводителя КАК НомерПроизводителя,
	|	ИндКодc.Владелец.Производитель КАК Производитель,
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИндКод КАК ИндКодc
	|		ПО ИндНомер.индкод = ИндКодc.Ссылка
	|ГДЕ
	|	ИндНомер.индкод = &Ссылка";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШтрихКод");
	ТабДок.Очистить();  
	
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(""); 
	Штрихкод.Ширина = 250; 
	Штрихкод.Высота = 250;
	Штрихкод.ТипКода = 16;
	Штрихкод.УровеньКоррекцииQR = 3;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = Строка(Ссылка);
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод,Истина);
	ФайлКартинки 			             = КартинкаШтрихКод;
	ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаШтрихКод;
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		ОбластьМакета.Параметры.Название = Выборка.Название;
		ОбластьМакета.Параметры.Код = Выборка.Наименование;
		//ОбластьМакета.Параметры.Место = Выборка.Стеллаж;
	КонецЦикла;   
	Запись.Поддон = Справочники.Поддоны.ПустаяСсылка();
	Запись.Стеллаж = Справочники.Стеллаж.НайтиПоКоду("000001072");
	ТабДок.АвтоМасштаб = Истина; 
	ТабДок.Вывести(ОбластьМакета);
	Возврат табдок; 
	
КонецФункции

&НаКлиенте
Процедура ПоддонПриИзменении(Элемент)
	сменаПолки(); 
	Событие = "Сменил поддон на: " + запись.Поддон;
	ЗаписьЛога(Событие, ТекущаяДата());
КонецПроцедуры   

&НаСервере
процедура сменаПолки()
	Если запись.Поддон.владелец <>Справочники.Стеллаж.ПустаяСсылка() Тогда
		запись.Стеллаж = запись.Поддон.стеллаж; 
	КонецЕсли;
КонецПроцедуры 




Процедура ЗаписьЛога(Событие, Дата)
	
	ТекстЛога =  "----------------------------------------------------" + Символы.ПС + Дата + Символы.ПС + Пользователи.ТекущийПользователь() + Символы.ПС +" "+ Событие + Символы.ПС ;
	
	ЗаписьЛога = РегистрыСведений.ЛогИндНомера.СоздатьМенеджерЗаписи();
	ЗаписьЛога.индкод 		 = запись.индкод;
	ЗаписьЛога.Дата 		 = Дата;
	ЗаписьЛога.Период 		 = Дата;
	ЗаписьЛога.Текст         = ТекстЛога;
	ЗаписьЛога.Записать();
	ВыводЛога();	
КонецПроцедуры     

Процедура ВыводЛога()
	
	НаборЛогов = "";
	Запрос = Новый запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ЛогИндНомера.Текст КАК Текст,
	                |	ЛогИндНомера.Период КАК Период
	                |ИЗ
	                |	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	                |ГДЕ
	                |	ЛогИндНомера.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", запись.индкод);
	
	Логи = Запрос.Выполнить().Выбрать();
	
	Пока Логи.Следующий() Цикл
		Текст = СтрЗаменить(Логи.Текст,Строка(Логи.Период),"");
		НаборЛогов = НаборЛогов + Строка(Логи.Период) + Текст;
	КонецЦикла;
	Лог = НаборЛогов;
КонецПроцедуры

&НаКлиенте
Процедура СтеллажПриИзменении(Элемент)
	Событие = "Сменил стеллаж на: " + запись.Стеллаж;
	ЗаписьЛога(Событие, ТекущаяДата());
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	Событие = "Сменил состояние на: " + запись.Состояние;
	ЗаписьЛога(Событие, ТекущаяДата());
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	///+ГомзМА 13.12.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава")) Тогда
		
		Элементы.ЕстьФото.Видимость = Истина;
	Иначе
		Элементы.ЕстьФото.Видимость = Ложь;
	КонецЕсли;
	///-ГомзМА 13.12.2023
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьСПросмотром(Команда)
	
	//Волков ИО Наряд 000005347 16.02.24 ++ 
		//Запись.АвитоЧастник = Истина;
		//Если ПроверкаИндКода() > 1 и НЕ ПроверкаВладельца() Тогда
		//	Сообщить("Стоп! На один Инд. код можно учесть только ОДНУ деталь.");
		//	Запись.АвитоЧастник = Ложь;
		//	Возврат;
		//	//Прервать;
		//КонецЕсли;
		//
		//Если Запись.АвитоЧастник Тогда
		//	запись.ДатаИзмененияКонвеера = ТекущаяДата();
		//	запись.Ответственный = НашПользователь();
		//	АвитоЧастникПриИзмененииНаСервере();
		//КонецЕсли; 
	//Волков ИО Наряд 000005347 16.02.24 -- 
	 
	//Волков ИО Наряд 000005347 16.02.24 ++ 
		///+ГомзМА 13.12.2023
		//Событие = "Установил галочку " + Элементы.АвитоЧастник.Заголовок;
		//ЗаписьЛога(Событие, ТекущаяДата());
		//
		//Событие = "Сменил цену на: " + запись.Цена;
		//ЗаписьЛога(Событие, ТекущаяДата() + 1);
		//
		//Событие = "Сменил стеллаж на: " + запись.Стеллаж;
		//ЗаписьЛога(Событие, ТекущаяДата() + 2);
		//
		//Событие = "Сменил состояние на: " + запись.Состояние;
		//ЗаписьЛога(Событие, ТекущаяДата() + 3);
	//Волков ИО Наряд 000005347 16.02.24 -- 
	
	ТабДок = ПечатьэтикеткиСерв(запись.индкод);
	
	//ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
	// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ПечатьэтикеткиСерв");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "ПечатьэтикеткиСерв";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
	
	///+ГомзМА 13.12.2023
	Событие = "Распечатал бирку";
	ЗаписьЛога(Событие, ТекущаяДата());
	///-ГомзМА 13.12.2023
	
	
КонецПроцедуры

