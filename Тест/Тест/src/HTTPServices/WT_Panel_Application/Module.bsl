#Область ОбработчикиСобытий
Функция СоздатьЗаявкуcreateapplication(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	НомерТелефона = Массив.phone;
	НомерТелефона = ПолучитьНормализованныйНомер(НомерТелефона);

	КодМенеджера = Массив.manager;
	ИмяКлиента 	 = Массив.client_name;
	Попытка
		НоваяЗаявка = Документы.ЗаказКлиента.СоздатьДокумент();
		НоваяЗаявка.Дата = ТекущаяДатаСеанса();
		НоваяЗаявка.НомерТелефона = НомерТелефона;
		НоваяЗаявка.WTPanel = Справочники.СтатусыWT.НайтиПоКоду("000000017"); //Ожидание
		НоваяЗаявка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Ожидание;
		НоваяЗаявка.ПодстатусОбработки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
		НоваяЗаявка.Ответственный = Справочники.Сотрудники.НайтиПоКоду(КодМенеджера).Пользователь;
		НоваяЗаявка.КлиентНаименование = ИмяКлиента;
		НоваяЗаявка.Клиент = ПолучитьКлиентаПоТелефону(НомерТелефона);
		
		МассивОшибок = Новый Массив;
		
		Для Каждого покупка Из Массив.products Цикл
			//@skip-check query-in-loop
			ИнформацияОпартии = ПолучитьИнформациюОПартии(покупка);

			Если ИнформацияОпартии.Партия <> 0 Тогда
				СтрокаТоваров = НоваяЗаявка.Товары.Добавить();
				СтрокаТоваров.Количество = 1;
				//@skip-check wrong-type-expression
				СтрокаТоваров.Партия = ИнформацияОпартии.Партия;
				//@skip-check wrong-type-expression
				СтрокаТоваров.Склад  = ИнформацияОпартии.Склад;
				СтрокаТоваров.Цена   = ИнформацияОпартии.Цена;
				//@skip-check wrong-type-expression
				СтрокаТоваров.Номенклатура   = ИнформацияОпартии.Товар;
			Иначе

				МассивОшибок.Добавить(покупка);
			КонецЕсли;

		КонецЦикла;

		НоваяЗаявка.Записать();

//Если МассивОшибок.Количество() = 0 тогда
//		Ответ = Новый HTTPСервисОтвет(200);
//		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", НоваяЗаявка.Номер,));
//Иначе
//		СтруктураОтвета = Новый Структура;
//		СтруктураОтвета.Вставить("application", Строка(НоваяЗаявка.Номер));
//		СтруктураОтвета.Вставить("products", МассивОшибок);
//		Ответ = Новый HTTPСервисОтвет(200);
//		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//		Ответ.УстановитьТелоИзСтроки( СтруктураОтвета);
//КонецЕсли;

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("id",НоваяЗаявка.Номер);
	СтруктураКлиента = Новый Структура;
	СтруктураКлиента.Вставить("name",ИмяКлиента );
	СтруктураКлиента.Вставить("phone",НомерТелефона );
	
	СтруктураОтвета.Вставить("client",СтруктураКлиента);
    ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	
	Исключение

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);

	КонецПопытки;

	Возврат Ответ;
	

КонецФункции

Функция СменаКлиентаВЗаявкеeditclientapplication(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	НомерТелефона = Массив.phone;
	НомерТелефона = ПолучитьНормализованныйНомер(НомерТелефона);
	ИмяКлиента 	 = Массив.client_name;
	Попытка
		Заявка = Документы.ЗаказКлиента.НайтиПоНомеру( Массив.id).ПолучитьОбъект();
		Заявка.НомерТелефона = НомерТелефона;
		Заявка.КлиентНаименование = ИмяКлиента;
		Заявка.Клиент = ПолучитьКлиентаПоТелефону(НомерТелефона);

		
		Заявка.Записать();

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("id",Заявка.Номер);
	СтруктураКлиента = Новый Структура;
	СтруктураКлиента.Вставить("name",ИмяКлиента );
	СтруктураКлиента.Вставить("phone",НомерТелефона );
	
	СтруктураОтвета.Вставить("client",СтруктураКлиента);
    ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	
	Исключение

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);

	КонецПопытки;

	Возврат Ответ;
КонецФункции

Функция ВзятьВРаботуКладощикtakeappstorager(Запрос)
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	//состояниеСборки = Справочники.СтатусыWT.НайтиПоНаименованию(Массив.processing);
//	Если число(Массив.sub_processing) = 1 Тогда
//		подсостояниеСборки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
//	ИначеЕсли число(Массив.sub_processing) = 2 Тогда
//		подсостояниеСборки = Перечисления.ПодстатусыОбработкиЗаявок.Выполняется;
//	ИначеЕсли число(Массив.sub_processing) = 3 Тогда
//		подсостояниеСборки = Перечисления.ПодстатусыОбработкиЗаявок.Готов;
//	КонецЕсли;

	запросзаявки.УстановитьПараметр("Номер", Массив.id);
	Выборка = запросзаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Пока выборка.Следующий() Цикл
		ТекстЛога =  " Взял в работу: "; 
		//Если число(Массив.processing) = 1 тогда 
		//	//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001905387489","для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		//КонецЕсли;
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.Ответственный),"для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектЗаявки = Документы.ЗаказКлиента.НайтиПоНомеру().ПолучитьОбъект();
		//ОбъектЗаявки.WTPanel = состояниеСборки;
		//ОбъектЗаявки.ПодстатусОбработки = подсостояниеСборки;
			Отбор = Новый Структура;
	Отбор.Вставить("Сотрудник", Ответственный);
	//Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());

		НайденныеСтроки = ОбъектЗаявки.Ответственные.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаОтветственного = ОбъектЗаявки.Ответственные.Добавить();
		СтрокаОтветственного.Сотрудник = Ответственный;
		КонецЕсли;
		//Если Массив.person <> Неопределено и Массив.person <> Справочники.Пользователи.ПустаяСсылка() Тогда
		ОбъектЗаявки.ОтветственныйЗаОбработку = Ответственный;
		
		//	КонецЕсли; 

		ОбъектЗаявки.Записать();
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции

Функция ВзятьЗаявкуtakeapp(Запрос)

	ЗапросЗаявки = Новый Запрос;
	ЗапросЗаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	ЗапросЗаявки.УстановитьПараметр("Номер", Массив.id);
	Выборка = ЗапросЗаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если ответственный = Неопределено Тогда
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	Роли = ПолучитьРолиПользователя(Справочники.Сотрудники.НайтиПоКоду(Массив.author));
	Пока выборка.Следующий() Цикл
	
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено  
		ИЛИ Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) <> Неопределено Тогда
			ОбъектЗаявки.Ответственный = Ответственный;
		Иначе
			ОбъектЗаявки.ОтветственныйЗаОбработку = Ответственный;
		КонецЕсли;
		
		

		ОбъектЗаявки.Записать();
		ТекстЛога =  " Взял в работу: " + ОбъектЗаявки.Номер;
		ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога); 
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции

Функция ПолучитьЗаявкуgetapplication(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Попытка 
		Выборка = Запросзаявки.Выполнить().Выбрать();
		КоличествоСФото   = 0;
		КоличествоТоваров = 0;
		МассивТоваров = Новый Массив;
		СтруктураИнфо = Новый Структура;
	
	//Пока выборка.Следующий() Цикл 
		выборка.Следующий();

		Счет = ПроверкаСчета(Выборка.Ссылка);

		СтруктураИнфо.Вставить("id", Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
		СтруктураИнфо.Вставить("condition", Строка(выборка.Состояние));

	СтруктураИнфо.Вставить("id", Строка(выборка.НомерЗаявки));
	СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
	СтруктураИнфо.Вставить("condition", Строка(выборка.Состояние));
	
	СтруктураКлиента = Новый Структура;
	СтруктураКлиента.Вставить("name", Строка(выборка.Клиент));
	СтруктураКлиента.Вставить("id", выборка.КлиентКод);
	СтруктураКлиента.Вставить("phone", выборка.Телефон);
	СтруктураИнфо.Вставить("client", СтруктураКлиента);

		СтруктураМенеджера = Новый Структура;
		СтруктураМенеджера.Вставить("name", Строка(выборка.Ответственный));
	//Менеджер = Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь", выборка.Ответственный).Код;
	СтруктураМенеджера.Вставить("id", Строка(выборка.КодСотрудника));
	СтруктураМенеджера.Вставить("phone", Строка(выборка.ТелефонСлужебный));
	СтруктураИнфо.Вставить("manager", СтруктураМенеджера);
	СтруктураИнфо.Вставить("sale", Строка(выборка.НомерПродажи));
		
	СтруктураИнфо.Вставить("sum", выборка.СуммаДокумента);
	СтруктураИнфо.Вставить("callDate", Строка(выборка.ДатаСвязи));
	СтруктураИнфо.Вставить("processing", Строка(выборка.СтатусОбработки));
	СтруктураИнфо.Вставить("sub_processing", Строка(выборка.подСтатусОбработки));
	СтруктураИнфо.Вставить("porter", Строка(выборка.ОтветственныйЗаОбработку));
	СтруктураИнфо.Вставить("comment", Строка(выборка.Комментарий));
	СтруктураИнфо.Вставить("numCheck", Строка(?(Счет.Ссылка = Неопределено, "", Счет.Ссылка.Номер)));
	//ВыборкаТоваров = выборка.Товары.Выбрать();
	
	
	ТЗ_Ответственные = выборка.Ответственные.Выгрузить();
	МассивОтветственных = Новый Массив;
	Для Каждого стр Из ТЗ_Ответственные Цикл
		
		СтруктураОтветственные = Новый Структура;
		СтруктураОтветственные.Вставить("name", Строка(стр.Сотрудник));
		//@skip-check reading-attribute-from-database
		СтруктураОтветственные.Вставить("id", Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",стр.Сотрудник).Код);
		СтруктураОтветственные.Вставить("role", Строка(стр.Роль));
		МассивОтветственных.Добавить(СтруктураОтветственные);
	КонецЦикла;
	СтруктураИнфо.Вставить("workers", МассивОтветственных);
		ТЗ = выборка.Товары.Выгрузить();

		ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;

		ИндКоды = тз.ВыгрузитьКолонку("Партия2");
		Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
		Итер = 0;
	СуммаТоваров = 0; 
		Для Каждого стр Из ТЗ Цикл
			МассивФото = Новый массив;
			Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
				Если фотки <> Неопределено И фотки.Количество() > 0 Тогда
					НайденныеФотки = Новый Массив;
					КоличествоСФото = КоличествоСФото + 1;
					НайденныеФотки = Фотки[итер].urls;
					МассивФото = Новый массив;
					Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

						стр.колфото = 1;

						Для Каждого Фотка Из НайденныеФотки Цикл
							Текст = "";
						//Текст = "https://wt10.ru" + Фотка;
							Текст = Фотка;
							МассивФото.Добавить(Текст);
						КонецЦикла;
					КонецЕсли;
					итер = итер + 1;

				КонецЕсли;

			КонецЕсли;

			Код = стр.Код;
			Пока Лев(Код, 1) = "0" Цикл
				Код = Прав(Код, СтрДлина(Код) - 1);
			КонецЦикла;
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
			СтруктураТоваров.Вставить("name", Строка(стр.Номенклатура));
			СтруктураТоваров.Вставить("article", Строка(стр.Номенклатура.Артикул));
			СтруктураТоваров.Вставить("cost", стр.Цена);
			СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
			СтруктураТоваров.Вставить("code", Строка("00" + Код));
			СтруктураТоваров.Вставить("id", Строка(стр.Партия));
			СтруктураТоваров.Вставить("stat", стр.Отменено);
			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад)); 
		СуммаТоваров = СуммаТоваров + (стр.Цена*стр.Количество);
		//СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
		//@skip-check query-in-loop
			СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
		//@skip-check query-in-loop
			СтруктураТоваров.Вставить("k", ЕстьНаКСкладе(стр.Номенклатура));
			Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
				НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.индкод.Установить(стр.Партия);
				НаборЗаписей.Прочитать();
				Товар = НаборЗаписей[0];
				СтруктураТоваров.Вставить("place", Строка(Товар.стеллаж));
			Иначе
				СтруктураТоваров.Вставить("place", Строка(стр.Номенклатура.МестоНаСкладе2));
			КонецЕсли;

			Если Не стр.Отменено Тогда
				КоличествоТоваров = КоличествоТоваров + 1;
			КонецЕсли;
			СтруктураТоваров.Вставить("photos", МассивФото);
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;

		Если КоличествоТоваров <= КоличествоСФото И КоличествоТоваров > 0 Тогда
			СтруктураИнфо.Вставить("stat", Истина);
		Иначе
			СтруктураИнфо.Вставить("stat", Ложь);
		КонецЕсли;
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	СтруктураИнфо.Вставить("sum", СуммаТоваров);
	Если КоличествоТоваров <= КоличествоСФото И КоличествоТоваров > 0 Тогда
		СтруктураИнфо.Вставить("stat", Истина);
	Иначе
		СтруктураИнфо.Вставить("stat", Ложь);
	КонецЕсли;
	
	//КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураИнфо.Вставить("products", МассивТоваров);

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

		Возврат Ответ;

	Исключение
		
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
Информация = ИнформацияОбОшибке();
	ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки(, "Ошибка выполнения запроса", Информация.Описание));

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Ответ = Новый HTTPСервисОтвет(500);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета );
	Возврат Ответ;	
	КонецПопытки;

КонецФункции

Функция ОтменитьЗаявкуcancelapplication(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	Запросзаявки.УстановитьПараметр("Номер", Массив.id);
	Попытка
		Выборка = Запросзаявки.Выполнить().Выбрать();
		Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
		Пока выборка.Следующий() Цикл
			ТекстЛога =  " Отменил " + Ответственный; 
		//Если число(Массив.processing) = 1 тогда 
		//	//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001905387489","Заявку "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		//КонецЕсли;
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.Ответственный),"для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
			ЛогированиеWT10(Выборка.ссылка, Массив.person, ТекстЛога);
			ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
			ОбъектЗаявки.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Отказ;
		//	Если Массив.person <> Неопределено и Массив.person <> Справочники.Пользователи.ПустаяСсылка() Тогда
		//ОбъектЗаявки.ОтветственныйЗаОбработку = Ответственный;
		
		//КонецЕсли; 

			ОбъектЗаявки.Записать();
		КонецЦикла;

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех");
		Возврат Ответ;

	Исключение
		Информация = ИнформацияОбОшибке();
		Ответ.УстановитьТелоИзСтроки( СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		Возврат Ответ;
	КонецПопытки;
КонецФункции

Функция НаполнитьЗаявкуfillingapplication(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Попытка
		Выборка = Запросзаявки.Выполнить().Выбрать();
		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);

		Массив  = ПрочитатьJSON(ЧтениеJSON);

		ИндКод  = Массив.id;
		Автор 	= Массив.author;
		Партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);

		Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Номенклатура);
		Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
		Пока выборка.Следующий() Цикл
			ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
			НайденныеСтроки = ОбъектЗаявки.Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.количество() > 0 Тогда 
			//Если Массив.type = 0 Тогда
				СтрокаТЧ = ОбъектЗаявки.Товары[НайденныеСтроки[0].НомерСтроки - 1]; 
			//СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
				СтрокаТЧ.партия = партия; 
			//@skip-check query-in-loop
			//СтрокаТЧ.машина = ПолучитьМашину(партия);
				СтрокаТЧ.Склад = ОбъектЗаявки.склад; 
			//СтрокаТЧ.СтатусТовара = Истина;
			//СтрокаТЧ.Артикул = Номенклатура.Артикул; 
			ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил партию в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектЗаявки.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех. Партия установлена для " + строка(СтрокаТЧ.Номенклатура) );
			//Возврат Ответ;
			Иначе
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура", Номенклатура);
				Отбор.Вставить("Партия", партия);
				НайденныеСтроки = ОбъектЗаявки.Товары.НайтиСтроки(Отбор);

				Если НайденныеСтроки.количество() > 0 Тогда
					СтрокаТЧ = ОбъектЗаявки.Товары[НайденныеСтроки[0].НомерСтроки - 1]; 
				//СтрокаТЧ.СтатусТовара = Истина;
				
				ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил выдал партию в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 
				ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);	 
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех. Партия Выдана для " + строка(СтрокаТЧ.Номенклатура) );
				//Возврат Ответ;

				Иначе

					Новаястрока = ОбъектЗаявки.Товары.Добавить();
					Новаястрока.Партия = партия;
					Новаястрока.Номенклатура = Номенклатура;
					Новаястрока.Количество = 1;
				//@skip-check query-in-loop
				//Новаястрока.машина = ПолучитьМашину(партия);
				//Новаястрока.СтатусТовара = Истина;
				//@skip-check reading-attribute-from-database
					Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
					Новаястрока.Склад = ОбъектЗаявки.склад; 	
				//Новаястрока.Артикул = Номенклатура.Артикул;
					ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " добавил партию в товаре "
						+ Новаястрока.Номенклатура + " " + Новаястрока.Партия;
					ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
					ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);

					Ответ = Новый HTTPСервисОтвет(200);
					Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки("Успех. Строка добавлена");

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПересчётСуммыЗаявки(Выборка.ссылка);
	КонецЦикла;
	
	Возврат Ответ;
	Исключение
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	Информация = ИнформацияОбОшибке();
	ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки(, "Ошибка выполнения запроса", Информация.Описание));

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(500);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
	Возврат Ответ;	
	КонецПопытки;
КонецФункции

Процедура ПересчётСуммыЗаявки(СсылкаНаЗаявку)
	ОбъектЗаявки = СсылкаНаЗаявку.ПолучитьОбъект();
	Товары = ОбъектЗаявки.Товары;
	ОбщСумма = 0;

	Для Каждого Стр Из товары Цикл
		Стр.Сумма = Стр.Количество * стр.Цена;
		ОбщСумма = ОбщСумма + Стр.Сумма;
	КонецЦикла;
	ОбъектЗаявки.СуммаДокумента = ОбщСумма;
	ОбъектЗаявки.Записать();
КонецПроцедуры

Функция УдалитьТоварИзЗаявкиdeleteproductapplication(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Попытка
		Выборка = Запросзаявки.Выполнить().Выбрать();
		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);

		Массив  = ПрочитатьJSON(ЧтениеJSON);
	//ИндКод  = Массив.IndCode;
	Позиция = Число(Запрос.ПараметрыURL["pose"]);
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		
		Возврат Ответ;
		
	КонецЕсли;	
	
	Пока выборка.Следующий() Цикл
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " удалил товар " + ОбъектЗаявки.Товары[Позиция-1].Номенклатура + " "+ ОбъектЗаявки.Товары[Позиция-1].Партия;
		ОбъектЗаявки.Товары.удалить(Позиция-1);
		 
		ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
		ОбъектЗаявки.записать();
		ПересчётСуммыЗаявки(Выборка.ссылка);
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	
	Исключение
	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		
	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ИзменитьКлиентаВЗаявкеeditgapplication(Запрос)
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	ИмяКлиента = Массив.name;
	Телефон = Массив.num;

	запросзаявки.УстановитьПараметр("Номер", Массив.id);
	Попытка
		Выборка = запросзаявки.Выполнить().Выбрать();
	//Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
		Пока выборка.Следующий() Цикл
			ТекстЛога =  " установил данные клиента: " + ИмяКлиента + " и " + Телефон; 
		//Если число(Массив.processing) = 1 тогда 
		//	//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001905387489","для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		//КонецЕсли;
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.Ответственный),"для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		//ЛогированиеWT10(Выборка.ссылка, Массив.person, ТекстЛога);
			ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
			ОбъектЗаявки.КлиентНаименование = ИмяКлиента;
			ОбъектЗаявки.НомерТелефона = Телефон;
		
		//Если Массив.person <> Неопределено и Массив.person <> Справочники.Пользователи.ПустаяСсылка() Тогда
		//ОбъектЗаявки.ОтветственныйЗаОбработку = Ответственный;
		
		//	КонецЕсли; 

			ОбъектЗаявки.Записать();
		КонецЦикла;

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех");
		Возврат Ответ;
	Исключение
		Информация = ИнформацияОбОшибке();
		Ответ.УстановитьТелоИзСтроки( СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));

	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ПолучитьДашбордДляСкладаGetDashStorage(Запрос)
//ПолнотекстовыйПоиск.ОбновитьИндекс();
//ПолнотекстовыйПоиск.УстановитьКоличествоЗаданийИндексирования(5);
	Попытка
		ПоисковаяСтрока = Строка(Запрос.ПараметрыURL["state"]);

//	СписокПоиска=ПолнотекстовыйПоиск.СоздатьСписок();
//	СписокПоиска.ПолучатьОписание = Ложь;
//	МассивОтбор = Новый Массив;
		МассивТоваров = Новый Массив;
//	СписокПоиска.РазмерПорции = КолВо;
//
//	ТекущаяПозиция = КолВо * (Страница - 1);
//	//Если ЕстьНижнийПробел(ПоисковаяСтрока) Тогда
//	МассивОтбор.Добавить(Метаданные.Документы.ЗаказКлиента);
//	СписокПоиска.ОбластьПоиска = МассивОтбор;
//	
//	СписокПоиска.СтрокаПоиска=ПоисковаяСтрока;
//
//	Если Страница = 1 Тогда
//		СписокПоиска.ПерваяЧасть();
//	Иначе
//		СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
//	КонецЕсли;
//
//	ОбщееКолво = СписокПоиска.ПолноеКоличество();
		СостояниеСборки = Справочники.СтатусыWT.НайтиПоНаименованию(ПоисковаяСтрока);
		ЗапросЗаявок = Новый Запрос;

		Текст = "ВЫБРАТЬ ПЕРВЫЕ 100000
				|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
				|	ЗаказКлиента.Состояние КАК Состояние,
				|	ЗаказКлиента.Ссылка КАК Ссылка,
				|	ЗаказКлиента.Номер КАК Номер,
				|	ЗаказКлиента.Дата КАК Дата,
				|	ЗаказКлиента.Клиент КАК Клиент,
				|	ЗаказКлиента.Ответственный КАК Ответственный,
				|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
				|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
				|	ЗаказКлиента.Комментарий КАК Комментарий,
				|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ЗаказКлиента.WTPanel КАК WTPanel
				|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|ГДЕ
				|	ЗаказКлиента.WTPanel = &СостояниеСборки
				|
				|УПОРЯДОЧИТЬ ПО
				|	Номер УБЫВ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ %1
				|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
				|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
				|	ВТ_ДанныеЗаявки.Номер КАК Номер,
				|	ВТ_ДанныеЗаявки.Дата КАК Дата,
				|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
				|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
				|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
				|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
				|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
				|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
				|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ВТ_ДанныеЗаявки.СтатусОбработки КАК СтатусОбработки,
				|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ВТ_ДанныеЗаявки.WTPanel КАК WTPanel
				|ИЗ
				|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
				|ГДЕ
				|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи";

		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="));
		ЗапросЗаявок.УстановитьПараметр("СостояниеСборки", состояниеСборки);
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);

		ОбщееКолво = ЗапросЗаявок.Выполнить().Выбрать().Количество();

		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
			Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
		ЗапросЗаявок.УстановитьПараметр("СостояниеСборки", состояниеСборки);
		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));

		Иначе
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;
		СписокПоиска = ЗапросЗаявок.Выполнить().Выгрузить();
		Для Каждого Результат Из СписокПоиска Цикл

			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("num", Строка(Результат.Номер));
			СтруктураТоваров.Вставить("date", Строка(Результат.Дата));
			СтруктураТоваров.Вставить("state", Строка(Результат.WTPanel));
			СтруктураТоваров.Вставить("saler", Строка(Результат.Ответственный));
			СтруктураТоваров.Вставить("client", Строка(Результат.Клиент));
		//@skip-check query-in-loop
			СтруктураВремени = ПолучитьВремяЗК(Результат.Ссылка);
			СтруктураТоваров.Вставить("time_work", СтруктураВремени.time_work);
			СтруктураТоваров.Вставить("time_wait", СтруктураВремени.time);
			СтруктураТоваров.Вставить("workers", СтруктураВремени.workers);
			СтруктураТоваров.Вставить("in_work", СтруктураВремени.in_work);
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураОтвета.Вставить("data", МассивТоваров);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтруктураОтвета);

		Возврат Ответ;

	Возврат Ответ;
	
Исключение
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		Ответ.УстановитьТелоИзСтроки( СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));

	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция СменаСтатусаЗаявкиChangeStateApp(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);
	Попытка
		Заявка  = Документы.ЗаказКлиента.НайтиПоНомеру(Массив.id).ПолучитьОбъект();
		Автор   = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
		Статус  = Массив.state;

		Если Статус = 1 Тогда
			ЗакрытьВремяЗК(Автор);
			ОткрытьВремяЗК(Заявка.Ссылка, Автор, Справочники.СтатусыWT.НайтиПоКоду("000000010"));
		КонецЕсли;

		Если Статус = 2 Тогда
			ЗакрытьВремяЗК(Автор);
			Если Не ПолучитьВремяЗК(Заявка.Ссылка).in_work И Не (Заявка.Номер = "000054204" Или Заявка.Номер = "000054206"
				Или Заявка.Номер = "000054207" Или Заявка.Номер = "000054208" Или Заявка.Номер = "000054195"
				Или Заявка.Номер = "000054321" Или Заявка.Номер = "000054334" Или Заявка.Номер = "000054332"
				Или Заявка.Номер = "000054331" Или Заявка.Номер = "000054333" Или Заявка.Номер = "000054354") Тогда
				Заявка.WTPanel = Справочники.СтатусыWT.НайтиПоКоду("000000011");
			КонецЕсли;
		КонецЕсли;

		Если Статус = 3 И Не (Заявка.Номер = "000054204" Или Заявка.Номер = "000054206" Или Заявка.Номер = "000054207"
			Или Заявка.Номер = "000054208" Или Заявка.Номер = "000054195" Или Заявка.Номер = "000054321"
			Или Заявка.Номер = "000054334" Или Заявка.Номер = "000054332" Или Заявка.Номер = "000054331"
			Или Заявка.Номер = "000054333" Или Заявка.Номер = "000054354") Тогда
			ЗакрытьВремяЗКОбщ(Заявка.Ссылка);
			Заявка.WTPanel = Справочники.СтатусыWT.НайтиПоКоду("000000011");
		КонецЕсли;

		Заявка.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Возврат Ответ;
	Исключение
		Информация = ИнформацияОбОшибке();
		Ответ.УстановитьТелоИзСтроки( СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));

	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция КоличествоЗаявокПоСтатусамgetcountapp(Запрос)

	МассивОтбор = Новый Массив;

	МассивЗаявок = Новый Массив;
	МассивЗаявок = Новый Массив;
	ЗапросГруппЗаявок = Новый Запрос;
	Попытка
		ЗапросГруппЗаявок.Текст = "ВЫБРАТЬ
								  |	ЗаказКлиента.Ссылка КАК Ссылка,
								  |	ЗаказКлиента.WTPanel КАК СтатусОбработки
								  |ПОМЕСТИТЬ ВТ_ЗаявкиИПродажи
								  |ИЗ
								  |	Документ.ЗаказКлиента КАК ЗаказКлиента
								  |ГДЕ
								  |	ЗаказКлиента.WTPanel В (&ПроверкаПродажи)
								  |;
								  |
								  |////////////////////////////////////////////////////////////////////////////////
								  |ВЫБРАТЬ
								  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ЗаявкиИПродажи.Ссылка) КАК Количество,
								  |	СтатусыWT.Ссылка КАК СтатусОбработки,
								  |	СтатусыWT.Код КАК КодСтатуса
								  |ПОМЕСТИТЬ ВТ_Итоги
								  |ИЗ
								  |	Справочник.СтатусыWT КАК СтатусыWT
								  |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаявкиИПродажи КАК ВТ_ЗаявкиИПродажи
								  |		ПО СтатусыWT.Ссылка = ВТ_ЗаявкиИПродажи.СтатусОбработки
								  |ГДЕ
								  |	НЕ СтатусыWT.ПометкаУдаления
								  |	И СтатусыWT.Ссылка В (&ПроверкаПродажи)
								  |СГРУППИРОВАТЬ ПО
								  |	СтатусыWT.Ссылка,
								  |	СтатусыWT.Код
								  |;
								  |
								  |////////////////////////////////////////////////////////////////////////////////
								  |ВЫБРАТЬ
								  |	ВТ_Итоги.Количество КАК Количество,
								  |	ВТ_Итоги.СтатусОбработки.Наименование КАК СтатусОбработки,
								  |	ВТ_Итоги.КодСтатуса КАК КодСтатуса
								  |ИЗ
								  |	ВТ_Итоги КАК ВТ_Итоги
								  |
								  |УПОРЯДОЧИТЬ ПО
								  |	ВТ_Итоги.СтатусОбработки.Код";

		МассивОтбор.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000009"));
		МассивОтбор.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000010"));
		МассивОтбор.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000011"));
		МассивОтбор.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000012"));
		МассивОтбор.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000013"));
		ПустойМассив = Новый Массив;
		ЗапросГруппЗаявок.УстановитьПараметр("ПроверкаПродажи", МассивОтбор);
		Выборка = ЗапросГруппЗаявок.Выполнить().Выбрать();

		Пока ВЫборка.Следующий() Цикл
			СтруктураТоваров = Новый Структура;

			СтруктураТоваров.Вставить("state", Строка(Выборка.СтатусОбработки));
			СтруктураТоваров.Вставить("id", Выборка.КодСтатуса);

			Если Выборка.КодСтатуса = "000000014" Тогда
				СтруктураТоваров.Вставить("sub_state", Ложь);
				СтруктураТоваров.Вставить("sub_states", ПустойМассив);
			Иначе
				СтруктураТоваров.Вставить("sub_state", Истина);	
			//@skip-check query-in-loop
				СтруктураТоваров.Вставить("sub_states", ПолучитьПодстатусы(Выборка.КодСтатуса));
			КонецЕсли;

			СтруктураТоваров.Вставить("count", Выборка.Количество);

			МассивЗаявок.Добавить(СтруктураТоваров);
		КонецЦикла;

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен",
			МассивЗаявок, ));

		Возврат Ответ;
	Исключение
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ПолучитьЗаявкиДляМенеджераGetDashSalers(Запрос)

	ПодСостояниеСборки = Новый Массив;
	МассивЗаявок = Новый Массив;
	Попытка
//	СостояниеСборки = Справочники.СтатусыWT.НайтиПоКоду(Строка(Запрос.ПараметрыURL["state"])); 
//	Если Запрос.ПараметрыURL["sub_state"] = "1" Тогда
//		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Ожидание);
//	КонецЕсли;
//	Если Запрос.ПараметрыURL["sub_state"] = "2" Тогда
//		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Выполняется);
//	КонецЕсли;
//	Если Запрос.ПараметрыURL["sub_state"] = "3" Тогда
//		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Готов);
//	КонецЕсли;
//	Если Запрос.ПараметрыURL["sub_state"] = "4" Тогда
//		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Ожидание);
//		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Выполняется);
//		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Готов);
//		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.ПустаяСсылка());
//	КонецЕсли;
//	
СтрокаПоиска = "	И (ЗаказКлиента.Номер ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"""+ Символы.ПС+
" ИЛИ ЗаказКлиента.КлиентНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"""+ Символы.ПС+
" ИЛИ ЗаказКлиента.Клиент.ПолноеНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"""+ Символы.ПС+
" ИЛИ ЗаказКлиента.НомерТелефона ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")";			
ЗапросЗаявок = Новый Запрос;

Текст = "ВЫБРАТЬ
|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
|ПОМЕСТИТЬ ТелефоныСлужебные
|ИЗ
|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
|ГДЕ
|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
|;
|/////////////////////////////////////////
|ВЫБРАТЬ ПЕРВЫЕ 100000
|	ЗаказКлиента.Номер КАК Номер,
|	ЗаказКлиента.Дата КАК Дата,
|	Выбор
|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
|			Тогда ЗаказКлиента.Клиент
|		Иначе ЗаказКлиента.КлиентНаименование
|	Конец КАК Клиент,
|	Выбор
|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
|			Тогда ЗаказКлиента.Клиент.Код
|		Иначе ""Не авторизован""
|	Конец КАК КлиентКод,
|	ЗаказКлиента.Состояние КАК Состояние,
|	ЗаказКлиента.Ответственный КАК Ответственный,
|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
|	ТелефоныСлужебные.Ссылка.Код КАК КодСотрудника,
|	ЗаказКлиента.Ссылка КАК Ссылка,
|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
|	ЗаказКлиента.Комментарий КАК Комментарий,
|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
|	ЗаказКлиента.НомерТелефона КАК Телефон,
|	ЗаказКлиента.WTPanel КАК WTPanel,
|	АвтономерЗаписи() КАК НомерЗаписи
|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
|ИЗ
|	Документ.ЗаказКлиента КАК ЗаказКлиента
|		ЛЕВОЕ Соединение ТелефоныСлужебные КАк ТелефоныСлужебные
|		По ЗаказКлиента.Ответственный = ТелефоныСлужебные.ссылка.пользователь
|ГДЕ
|	ЗаказКлиента.Ответственный = &Ответственный
|%2
|
|УПОРЯДОЧИТЬ ПО
|	Номер УБЫВ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ ПЕРВЫЕ %1
|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
|	ВТ_ДанныеЗаявки.Номер КАК Номер,
|	ВТ_ДанныеЗаявки.Дата КАК Дата,
|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
|	ВТ_ДанныеЗаявки.СтатусОбработки КАК СтатусОбработки,
|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
|	ВТ_ДанныеЗаявки.ТелефонСлужебный КАК ТелефонСлужебный,
|	ВТ_ДанныеЗаявки.КодСотрудника КАК КодСотрудника,
|	ВТ_ДанныеЗаявки.WTPanel КАК WTPanel,
|	ВТ_ДанныеЗаявки.КлиентКод КАК КлиентКод,
|	ВТ_ДанныеЗаявки.Телефон КАК Телефон
|ИЗ
|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
|ГДЕ
|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи";
		Если Запрос.ПараметрыURL["text"] = "00" Тогда
		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ=")," ");
		Иначе
		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="),СтрокаПоиска);
		ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
		Запрос.ПараметрыURL["text"])) + "%");	
		КонецЕсли;
		ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["saler"]).пользователь);

	
	//ЗапросЗаявок.УстановитьПараметр("СостояниеСборки", состояниеСборки);
	//ЗапросЗаявок.УстановитьПараметр("ПодстатусОбработки", ПодСостояниеСборки);
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);

		ОбщееКолво = ЗапросЗаявок.Выполнить().Выбрать().Количество();
	
	//Если Запрос.ПараметрыURL["saler"]<>"0" Тогда	
		Если Запрос.ПараметрыURL["text"] = "00" Тогда
						ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ=")," ");
		Иначе
				ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="),СтрокаПоиска);
		ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
		Запрос.ПараметрыURL["text"])) + "%");	
		КонецЕсли;	

		ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["saler"]).пользователь);
//	Иначе
//		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
//		Запрос.ПараметрыURL["count"], 10000), "ЧГ="),"");
//	КонецЕсли;
		
	//ЗапросЗаявок.УстановитьПараметр("СостояниеСборки", состояниеСборки);
	//ЗапросЗаявок.УстановитьПараметр("ПодстатусОбработки", ПодСостояниеСборки);
		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));

		Иначе
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;
		
	/// Комлев 22/07/24 +++
	/// Отбор по статусу действия
		Если Число(Запрос.ПараметрыURL["action_status"]) = 1 И Число(Запрос.ПараметрыURL["fin_status"]) = 0 Тогда
			ЗапросЗаявок.Текст = СтрШаблон(Текст, Формат(10000, "ЧГ="), ТекстЗаменыОтборПоСтатусуДействия);
			ЗапросЗаявок.УстановитьПараметр("СтатусыДействия", Перечисления.дт_СостоянияЗаказовКлиента.Ожидание);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
				Запрос.ПараметрыURL["saler"]).пользователь);

		ИначеЕсли Число(Запрос.ПараметрыURL["action_status"]) = 2 И Число(Запрос.ПараметрыURL["fin_status"]) = 0 Тогда
			ЗапросЗаявок.Текст = СтрШаблон(Текст, Формат(10000, "ЧГ="), ТекстЗаменыОтборПоСтатусуДействия);
			ЗапросЗаявок.УстановитьПараметр("СтатусыДействия", Перечисления.дт_СостоянияЗаказовКлиента.Думает);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
				Запрос.ПараметрыURL["saler"]).пользователь);

		ИначеЕсли Число(Запрос.ПараметрыURL["action_status"]) = 3 И Число(Запрос.ПараметрыURL["fin_status"]) = 0 Тогда
			ЗапросЗаявок.Текст = СтрШаблон(Текст, Формат(10000, "ЧГ="), ТекстЗаменыОтборПоСтатусуДействия);
			ЗапросЗаявок.УстановитьПараметр("СтатусыДействия", Перечисления.дт_СостоянияЗаказовКлиента.Отказ);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
				Запрос.ПараметрыURL["saler"]).пользователь);
		ИначеЕсли Число(Запрос.ПараметрыURL["action_status"]) = 4 И Число(Запрос.ПараметрыURL["fin_status"]) = 0 Тогда
			ЗапросЗаявок.Текст = СтрШаблон(Текст, Формат(10000, "ЧГ="), ТекстЗаменыОтборПоСтатусуДействия);
			ЗапросЗаявок.УстановитьПараметр("СтатусыДействия", Перечисления.дт_СостоянияЗаказовКлиента.Спам);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
				Запрос.ПараметрыURL["saler"]).пользователь);
		ИначеЕсли Число(Запрос.ПараметрыURL["action_status"]) = 5 И Число(Запрос.ПараметрыURL["fin_status"]) = 0 Тогда
			ЗапросЗаявок.Текст = СтрШаблон(Текст, Формат(10000, "ЧГ="), ТекстЗаменыОтборПоСтатусуДействия);
			ЗапросЗаявок.УстановитьПараметр("СтатусыДействия", Перечисления.дт_СостоянияЗаказовКлиента.НетВНаличии);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
				Запрос.ПараметрыURL["saler"]).пользователь);
		Иначе
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
		Запрос.ПараметрыURL["saler"]).пользователь);
		КонецЕсли;
		
	 /// Отбор по статусу финансовому
		Если Число(Запрос.ПараметрыURL["fin_status"]) = 1 И Число(Запрос.ПараметрыURL["action_status"]) = 0 Тогда
			ЗапросЗаявок.Текст = СтрШаблон(Текст, Формат(10000, "ЧГ="), ТекстЗаменыОтборПоФинансовомуСтатусу);
			ЗапросЗаявок.УстановитьПараметр("ФинансовыеСтатусы",
				Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.ЖдемДенег);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
				Запрос.ПараметрыURL["saler"]).пользователь);

		ИначеЕсли Число(Запрос.ПараметрыURL["fin_status"]) = 2 И Число(Запрос.ПараметрыURL["action_status"]) = 0 Тогда
			ЗапросЗаявок.Текст = СтрШаблон(Текст, Формат(10000, "ЧГ="), ТекстЗаменыОтборПоФинансовомуСтатусу);
			ЗапросЗаявок.УстановитьПараметр("ФинансовыеСтатусы",
				Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.ЧастичноОплачено);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
				Запрос.ПараметрыURL["saler"]).пользователь);

		ИначеЕсли Число(Запрос.ПараметрыURL["fin_status"]) = 3 И Число(Запрос.ПараметрыURL["action_status"]) = 0 Тогда
			ЗапросЗаявок.Текст = СтрШаблон(Текст, Формат(10000, "ЧГ="), ТекстЗаменыОтборПоФинансовомуСтатусу);
			ЗапросЗаявок.УстановитьПараметр("ФинансовыеСтатусы",
				Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.Оплачено);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
				Запрос.ПараметрыURL["saler"]).пользователь);
		ИначеЕсли Число(Запрос.ПараметрыURL["fin_status"]) = 4 И Число(Запрос.ПараметрыURL["action_status"]) = 0 Тогда
			ЗапросЗаявок.Текст = СтрШаблон(Текст, Формат(10000, "ЧГ="), ТекстЗаменыОтборПоФинансовомуСтатусу);
			ЗапросЗаявок.УстановитьПараметр("ФинансовыеСтатусы",
				Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.НеБудетОплачено);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
				Запрос.ПараметрыURL["saler"]).пользователь);
		ИначеЕсли Число(Запрос.ПараметрыURL["fin_status"]) = 5 И Число(Запрос.ПараметрыURL["action_status"]) = 0 Тогда
			ЗапросЗаявок.Текст = СтрШаблон(Текст, Формат(10000, "ЧГ="), ТекстЗаменыОтборПоФинансовомуСтатусу);
			ЗапросЗаявок.УстановитьПараметр("ФинансовыеСтатусы",
				Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.НеОплачено);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
				Запрос.ПараметрыURL["saler"]).пользователь);
		Иначе
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(
		Запрос.ПараметрыURL["saler"]).пользователь);
		КонецЕсли;
	 
	 /// Комлев 22/07/24 ---
		СписокПоиска = ЗапросЗаявок.Выполнить().Выгрузить();
		Для Каждого Результат Из СписокПоиска Цикл

			СтруктураЗаявок = Новый Структура;
			СтруктураЗаявок.Вставить("id", Строка(Результат.Номер));
			СтруктураЗаявок.Вставить("date", Строка(Результат.Дата));
			СтруктураЗаявок.Вставить("state", Строка(Результат.WTPanel));
			СтруктураЗаявок.Вставить("sub_state", Строка(Результат.ПодстатусОбработки));
			СтруктураТоваров.Вставить("action_status", Строка(Результат.СтатусДействия));
			СтруктураТоваров.Вставить("fin_status", Строка(Результат.ФинансовыйСтатус));
			СтруктураТоваров.Вставить("saler", Строка(Запрос.ПараметрыURL["saler"]));
			
			СтруктураКлиента = Новый Структура;
			СтруктураКлиента.Вставить("name", Строка(Результат.Клиент));
			СтруктураКлиента.Вставить("id", Результат.КлиентКод);
			СтруктураКлиента.Вставить("phone", Результат.Телефон);
			СтруктураЗаявок.Вставить("client", СтруктураКлиента);

			СтруктураМенеджера = Новый Структура;
			СтруктураМенеджера.Вставить("name", Строка(Результат.Ответственный));
	//Менеджер = Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь", выборка.Ответственный).Код;
			СтруктураМенеджера.Вставить("id", Строка(Результат.КодСотрудника));
			СтруктураМенеджера.Вставить("phone", Строка(Результат.ТелефонСлужебный));
			СтруктураЗаявок.Вставить("manager", СтруктураМенеджера);
	
		//@skip-check query-in-loop
			СтруктураВремени = ПолучитьВремяЗК(Результат.Ссылка);
			СтруктураЗаявок.Вставить("time_work", СтруктураВремени.time_work);
			СтруктураЗаявок.Вставить("time_wait", СтруктураВремени.time);
			СтруктураЗаявок.Вставить("workers", СтруктураВремени.workers);
			СтруктураЗаявок.Вставить("in_work", СтруктураВремени.in_work);
			//@skip-check query-in-loop
			СтруктураТоваров = ПолучитьТоварыЗаявки(Результат.Номер);
			СтруктураЗаявок.Вставить("productsIds",СтруктураТоваров.Товары );
			СтруктураЗаявок.Вставить("summ",СтруктураТоваров.СуммаТоваров );
			МассивЗаявок.Добавить(СтруктураЗаявок);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);
		СтруктураИнфо.Вставить("applications", МассивТоваров);

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", ОбщееКолво);
	СтруктураИнфо.Вставить("applications", МассивЗаявок);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("applications", МассивЗаявок);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
КонецФункции
#КонецОбласти
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПодстатусы(КодСтатуса)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЗаказКлиента.ПодстатусОбработки,
				   |	КОЛИЧЕСТВО(ЗаказКлиента.Ссылка) КАК Количество
				   |ПОМЕСТИТЬ ВТ_Итоги
				   |ИЗ
				   |	Документ.ЗаказКлиента КАК ЗаказКлиента
				   |ГДЕ
				   |	ЗаказКлиента.WTPanel = &WTPanel
				   |СГРУППИРОВАТЬ ПО
				   |	ЗаказКлиента.ПодстатусОбработки
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЕстьNULL(ВТ_Итоги.Количество, 0) КАК Количество,
				   |	ПодстатусыОбработкиЗаявок.Ссылка,
				   |	ПодстатусыОбработкиЗаявок.Порядок
				   |ИЗ
				   |	Перечисление.ПодстатусыОбработкиЗаявок КАК ПодстатусыОбработкиЗаявок
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Итоги КАК ВТ_Итоги
				   |		ПО ВТ_Итоги.ПодстатусОбработки = ПодстатусыОбработкиЗаявок.Ссылка
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	ПодстатусыОбработкиЗаявок.Порядок";

	Запрос.УстановитьПараметр("WTPanel", Справочники.СтатусыWT.НайтиПоКоду(КодСтатуса));
	Выборка = Запрос.Выполнить().Выбрать();
	МассивОтвета = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("sub_state", Строка(Выборка.Ссылка));
		СтруктураОтвета.Вставить("id", Выборка.Порядок + 1);
		СтруктураОтвета.Вставить("count", Выборка.Количество);
		МассивОтвета.Добавить(СтруктураОтвета);
	КонецЦикла;
	Возврат МассивОтвета;

КонецФункции

Процедура ЗакрытьВремяЗКОбщ(ЗаявкаПродажа)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВремяВыполненияЗаявок.ЗаявкаПродажа КАК Задача,
				   |	ВремяВыполненияЗаявок.Период КАК ДатаСреза
				   |ИЗ
				   |	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗаявок
				   |ГДЕ
				   |	 ВремяВыполненияЗаявок.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
				   |И ВремяВыполненияЗаявок.ЗаявкаПродажа = &ЗаявкаПродажа
				   |УПОРЯДОЧИТЬ ПО
				   |	ВремяВыполненияЗаявок.Период УБЫВ";
	Запрос.УстановитьПараметр("ЗаявкаПродажа", ЗаявкаПродажа);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ВремяВыполненияЗаявок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаявкаПродажа.Установить(Выборка.Задача);
			НаборЗаписей.Отбор.Период.Установить(Выборка.ДатаСреза);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				НашЗамер = НаборЗаписей[0];
				НашЗамер.КонецЗамера = ТекущаяДата();
				НашЗамер.Срок		 = НашЗамер.КонецЗамера - НашЗамер.НачалоЗамера;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры
Процедура ЗакрытьВремяЗК(Ответственный)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВремяВыполненияЗаявок.ЗаявкаПродажа КАК Задача,
				   |	ВремяВыполненияЗаявок.Период КАК ДатаСреза
				   |ИЗ
				   |	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗаявок
				   |ГДЕ
				   |	 ВремяВыполненияЗаявок.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
				   |И ВремяВыполненияЗаявок.Ответственный = &Ответственный
				   |УПОРЯДОЧИТЬ ПО
				   |	ВремяВыполненияЗаявок.Период УБЫВ";
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		НаборЗаписей = РегистрыСведений.ВремяВыполненияЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаявкаПродажа.Установить(Выборка.Задача);
		НаборЗаписей.Отбор.Период.Установить(Выборка.ДатаСреза);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда
			НашЗамер = НаборЗаписей[0];
			НашЗамер.КонецЗамера = ТекущаяДата();
			НашЗамер.Срок		 = НашЗамер.КонецЗамера - НашЗамер.НачалоЗамера;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьВремяЗК(ЗК, Ответственный, Статус)

	НаборЗаписей = РегистрыСведений.ВремяВыполненияЗаявок.СоздатьМенеджерЗаписи();

	НаборЗаписей.ЗаявкаПродажа = ЗК;
	НаборЗаписей.Период = ТекущаяДата();
	НаборЗаписей.НачалоЗамера = ТекущаяДата();
	НаборЗаписей.Ответственный = Ответственный;
	НаборЗаписей.Статус = Статус;
	НаборЗаписей.Записать();

КонецПроцедуры

Функция ПолучитьВремяЗК(ЗаказКлиента)
	ЗапросРаботника = Новый запрос;
	ЗапросРаботника.Текст = "ВЫБРАТЬ
							|	СУММА(ВремяВыполненияЗН.Срок) КАК Срок,
							|	ВремяВыполненияЗН.Ответственный КАК Ответственный
							|ИЗ
							|	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗН
							|ГДЕ
							|	ВремяВыполненияЗН.ЗаявкаПродажа = &ЗаказНаряд
							|	И ВремяВыполненияЗН.Ответственный <> Значение(Справочник.Пользователи.ПустаяСсылка)
							|СГРУППИРОВАТЬ ПО
							|	ВремяВыполненияЗН.Ответственный";

	ЗапросРаботника.УстановитьПараметр("ЗаказНаряд", ЗаказКлиента);
	ВыборкаРаботника = ЗапросРаботника.Выполнить().Выбрать();
	Время = 0;
	ВремяОбщ = 0;
	ВРаботе = 0;
	МассивРаботников = Новый Массив;
	Если ВыборкаРаботника.Количество() > 0 Тогда

		Пока ВыборкаРаботника.Следующий() Цикл
			СтруктураРаботника = Новый Структура;
			СтруктураРаботника.Вставить("worker", Строка(ВыборкаРаботника.Ответственный));
				//@skip-check reading-attribute-from-database
			СтруктураРаботника.Вставить("id_worker", Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",
				ВыборкаРаботника.Ответственный).Код);
			Запрос = Новый запрос;
			Запрос.Текст = "ВЫБРАТЬ
						   |	ВремяВыполненияЗН.ЗаявкаПродажа КАК Задача,
						   |	ВремяВыполненияЗН.НачалоЗамера КАК НачалоЗамера
						   |ИЗ
						   |	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗН
						   |ГДЕ
						   |	ВремяВыполненияЗН.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
						   |	И ВремяВыполненияЗН.Ответственный = &Ответственный
						   |	И ВремяВыполненияЗН.ЗаявкаПродажа = &ЗаказНаряд";
			Запрос.УстановитьПараметр("Ответственный", ВыборкаРаботника.Ответственный);
			Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказКлиента);
			//@skip-check query-in-loop
			Выборка = Запрос.Выполнить().Выбрать();

			Статус = Ложь;
			Время = ВыборкаРаботника.Срок;
			Если Выборка.Количество() > 0 Тогда
				Выборка.Следующий();
				Время =  (ТекущаяДата() - Выборка.НачалоЗамера);
				Статус = Истина;
				ВРаботе = ВРаботе + 1;
			КонецЕсли;
			ВремяОбщ = ВремяОбщ + Время;
			СтруктураРаботника.Вставить("time", Время);
			СтруктураРаботника.Вставить("state", Статус);
			//Время = выборка.срок;
			МассивРаботников.Добавить(СтруктураРаботника);
		КонецЦикла;

	КонецЕсли;

	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВремяВыполненияЗН.ЗаявкаПродажа КАК Задача,
				   |	ВремяВыполненияЗН.НачалоЗамера КАК НачалоЗамера,
				   |	ВремяВыполненияЗН.ЗаявкаПродажа.Дата КАК Дата,
				   |	ВремяВыполненияЗН.КонецЗамера,
				   |	ВремяВыполненияЗН.Ответственный
				   |ИЗ
				   |	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗН
				   |ГДЕ
				   |	ВремяВыполненияЗН.ЗаявкаПродажа = &ЗаказКлиента
				   |	И ВремяВыполненияЗН.Статус = &Статус
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НачалоЗамера";

	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("Статус", Справочники.СтатусыWT.НайтиПоКоду("000000010"));
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Если Выборка.Ответственный = Справочники.Пользователи.ПустаяСсылка() Тогда
			Время =  ТекущаяДата() - Выборка.НачалоЗамера;
		ИначеЕсли Выборка.Количество() > 1 Тогда

			Если Выборка.КонецЗамера < Дата(2000, 01, 01) Тогда
				Время =  Выборка.НачалоЗамера - ЗаказКлиента.Дата;
			Иначе
				Время =  Выборка.КонецЗамера - ЗаказКлиента.Дата;
			КонецЕсли;
		КонецЕсли;

	Иначе
		Время = ТекущаяДата() - ЗаказКлиента.Дата;

	КонецЕсли;

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("time_work", ВремяОбщ);
	СтруктураОтвета.Вставить("time", Время);
	СтруктураОтвета.Вставить("workers", МассивРаботников);
	СтруктураОтвета.Вставить("in_work", ?(ВРаботе > 0, Истина, Ложь));
	Возврат СтруктураОтвета;

КонецФункции

#Область ТекстыЗапросов

Функция текстДляСпискаЗаявок()
	Текст = "ВЫБРАТЬ
			|	ИндНомер.индкод.Владелец КАК индкодВладелец,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ИндНомер.Стеллаж.Наименование ПОДОБНО &кСклады
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Поле1
			|ПОМЕСТИТЬ ВТ_КСклад
			|ИЗ
			|	РегистрСведений.ИндНомер КАК ИндНомер
			|ГДЕ
			|	ИндНомер.Стеллаж.Наименование ПОДОБНО &кСклады
			|
			|СГРУППИРОВАТЬ ПО
			|	ИндНомер.индкод.Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
			|	МАКСИМУМ(ВТ_КСклад.Поле1) КАК Поле1
			|ПОМЕСТИТЬ ВТ_НаКСкладе
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КСклад КАК ВТ_КСклад
			|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_КСклад.индкодВладелец
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказКлиентаТовары.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 100000
			|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
			|	ЗаказКлиента.Состояние КАК Состояние,
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.Номер КАК Номер,
			|	ЗаказКлиента.Дата КАК Дата,
			|	ЗаказКлиента.Клиент КАК Клиент,
			|	ЗаказКлиента.Ответственный КАК Ответственный,
			|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
			|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
			|	ЗаказКлиента.Комментарий КАК Комментарий,
			|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
			|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки
			|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|ГДЕ
			|	ЗаказКлиента.WTPanel В (&СостояниеСборки)  
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номер УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ %1
			|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
			|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
			|	ВТ_ДанныеЗаявки.Номер КАК Номер,
			|	ВТ_ДанныеЗаявки.Дата КАК Дата,
			|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
			|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
			|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
			|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
			|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
			|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ВТ_ДанныеЗаявки.СтатусОбработки КАК СтатусОбработки,
			|	ВТ_НаКСкладе.Поле1 КАК НаКскладе,
			|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки
			|ИЗ
			|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаКСкладе КАК ВТ_НаКСкладе
			|		ПО ВТ_ДанныеЗаявки.Ссылка = ВТ_НаКСкладе.Ссылка
			|ГДЕ
			|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи";
	Возврат текст;
КонецФункции

Функция текстДляЗаявки()
	Текст = "ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|/////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентас.Номер КАК НомерЗаявки,
	|	ЗаказКлиентас.Дата КАК Дата,
	|	Выбор
	|		Когда ЗаказКлиентас.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
	|			Тогда ЗаказКлиентас.Клиент
	|		Иначе ЗаказКлиентас.КлиентНаименование
	|	Конец КАК Клиент,
	|	Выбор
	|		Когда ЗаказКлиентас.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
	|			Тогда ЗаказКлиентас.Клиент.Код
	|		Иначе ""Не авторизован""
	|	Конец КАК КлиентКод,
	|	ЗаказКлиентас.Состояние КАК Состояние,
	|	ЗаказКлиентас.Ответственный КАК Ответственный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	ЗаказКлиентас.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказКлиентас.ДатаСвязи КАК ДатаСвязи,
	|	ТелефоныСлужебные.Ссылка.Код КАК КодСотрудника,
	|	ЗаказКлиентас.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ЦенаОригинала КАК ЦенаОригинала,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		Отменено КАК Отменено,
	|		Склад КАК Склад,
	|		СуммаНДС КАК СуммаНДС,
	|		Комментарий КАК Комментарий,
	|		ПредлагаемаяЦена КАК ПредлагаемаяЦена,
	|		Партия КАК Партия,
	|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиентас.Товары.Партия) КАК Партия2,
	|		Номенклатура.Код КАК Код) КАК Товары,
	|	ЗаказКлиентас.Ссылка КАК Ссылка,
	|	ЗаказКлиентас.WTPanel КАК СтатусОбработки,
	|	ЗаказКлиентас.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ЗаказКлиентас.Комментарий КАК Комментарий,
	|	ЗаказКлиентас.ПодстатусОбработки КАК ПодстатусОбработки,
	|	ЗаказКлиентас.НомерТелефона КАК Телефон,
	|	ПродажаЗапчастей.Номер КАК номерпродажи,
	|	ПродажаЗапчастей.Ссылка КАК Ссылканапродажу,
	|	ЗаказКлиентас.Ответственные.(
	|		Ссылка,
	|		НомерСтроки,
	|		Сотрудник,
	|		Роль)
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиентас
	|		ЛЕВОЕ Соединение ТелефоныСлужебные КАк ТелефоныСлужебные
	|		По ЗаказКлиентас.Ответственный = ТелефоныСлужебные.ссылка.пользователь
	|		ЛЕВОЕ Соединение Документ.ПродажаЗапчастей КАк ПродажаЗапчастей
	|		ПО ПродажаЗапчастей.ЗаказКлиента = ЗаказКлиентас.Ссылка
	|ГДЕ
	|	ЗаказКлиентас.Номер = &Номер";
	Возврат Текст;
КонецФункции

#КонецОбласти

Функция ПроверкаСчета(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	ПредварительныйСчет.Ссылка КАК Ссылка
				   |ИЗ
				   |	Документ.ПредварительныйСчет КАК ПредварительныйСчет
				   |ГДЕ
				   |	ПредварительныйСчет.Основание = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

КонецФункции

Функция ПолучитьПоддон(Партия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.поддон КАК поддон
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.поддон;
КонецФункции

Функция ЕстьНаКСкладе(Номенклатура)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""%K-%""
				   |			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО ""%К-%"")
				   |	И ИндНомер.индкод.Владелец = &Владелец
				   |	И РегистрНакопления1Остатки.КолвоОстаток > 0";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьНормализованныйНомер(Номер)

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	ПромежуточныйНомер = "";
	ДопустимыеСимволы = "0123456789";
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	Для Сч1 = 1 По ДлинаНомера Цикл
		ТекСимвол = Сред(СокрЛП(Номер), Сч1, 1);
		Если СтрНайти(ДопустимыеСимволы, ТекСимвол) > 0 Тогда
			ПромежуточныйНомер = ПромежуточныйНомер + ТекСимвол;
			Если Лев(ПромежуточныйНомер, 1) = "8" Тогда
				ПромежуточныйНомер = "7";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Лев(ПромежуточныйНомер, 1) = "7" Тогда
		ПромежуточныйНомер = "+" + ПромежуточныйНомер;
	КонецЕсли;

	ФорматированныйНомер = Лев(ПромежуточныйНомер, 2) + " " + Сред(ПромежуточныйНомер, 3, 3) + " " + Сред(
		ПромежуточныйНомер, 6, 3) + "-" + Сред(ПромежуточныйНомер, 9, 2) + "-" + Сред(ПромежуточныйНомер, 11);

	Возврат ФорматированныйНомер;
	//Сергеев Ф.В. -- Дата: 14.05.2024

КонецФункции

Функция ПолучитьКлиентаПоТелефону(Номер)

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	Результат = Справочники.Клиенты.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Клиенты.Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Телефон = &Телефон";

	Запрос.УстановитьПараметр("Телефон", Номер);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.Ссылка;
	КонецЕсли;
	Возврат Результат;
	//Сергеев Ф.В. -- Дата: 14.05.2024

КонецФункции
//
//Функция СформироватьОтвет(Заголовок,Значение)
//	
//	СтруктураОтвета = Новый Структура;
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();                                    
//	СтруктураОтвета.Вставить(Заголовок,Значение);
//	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
//	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
//	Возврат СтрокаДляОтвета;
//КонецФункции
Функция СформироватьОтветСтруктурой(Success, Message, Data = "", Error = "")

	СтруктураОтвета = Новый Структура;
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтруктураОтвета.Вставить("success", Success);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("data", Data);
	СтруктураОтвета.Вставить("error", Error);
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Возврат СтрокаДляОтвета;
КонецФункции

Функция СформироватьСтруктуруОшибки(Сode, Message, Details)

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("code", Сode);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("details", Details);

	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучитьИнформациюОПартии(Ind_code)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	РегистрНакопления1Остатки.Склад КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
	|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
	|	РегИндНомер.индкод.Владелец.выс КАК выс,
	|	РегИндНомер.индкод.Владелец.длин КАК длин,
	|	РегИндНомер.индкод.Владелец.шир КАК шир,
	|	РегистрНакопления1Остатки.машина
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод";
	
	Запрос.УстановитьПараметр("Наименование", Ind_code);
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтвета = Новый Структура;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		СтруктураОтвета.Вставить("Цена", Выборка.Цена);
		СтруктураОтвета.Вставить("Склад", Выборка.Склад);
		СтруктураОтвета.Вставить("Партия", Выборка.индкод);
		СтруктураОтвета.Вставить("Машина", Выборка.Машина);
		СтруктураОтвета.Вставить("Товар", Выборка.Наименование);
	Иначе
		СтруктураОтвета.Вставить("Цена", 0);
		СтруктураОтвета.Вставить("Склад", 0);
		СтруктураОтвета.Вставить("Партия", 0);
		СтруктураОтвета.Вставить("Машина", 0);
		СтруктураОтвета.Вставить("Товар", 0);
	КонецЕсли;

	Возврат СтруктураОтвета;
КонецФункции

Процедура ЛогированиеWT10(Заявка, Автор, Лог)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогWT10.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.Источник = Заявка;
	МенеджерЗаписиЛога.Пользователь = Автор;
	МенеджерЗаписиЛога.Лог = "--------------------------" + Символы.ПС + Автор + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Функция ПолучитьМашину(ИндКодДетали)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	РегистрНакопления1.машина КАК машина
				   |ИЗ
				   |	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1
				   |ГДЕ
				   |	РегистрНакопления1.индкод = &индкод";
	Запрос.УстановитьПараметр("ИндКод", ИндКодДетали);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат выборка.машина;
КонецФункции

Функция ПолучитьТоварыЗаявки(НомерЗаявки)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", НомерЗаявки);
	 
	Выборка = Запросзаявки.Выполнить().Выбрать();
	КоличествоСФото   = 0;
	КоличествоТоваров = 0;
	МассивТоваров = Новый Массив;
	СтруктураИнфо = Новый Структура;
	
	//Пока выборка.Следующий() Цикл 
	выборка.Следующий();

	//Счет = ПроверкаСчета(Выборка.Ссылка);

//	СтруктураИнфо.Вставить("id", Строка(выборка.Номер));
//	СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
//	СтруктураИнфо.Вставить("condition", Строка(выборка.Состояние));
//	
//	СтруктураКлиента = Новый Структура;
//	СтруктураКлиента.Вставить("name", Строка(выборка.Клиент));
//	СтруктураКлиента.Вставить("id", выборка.КлиентКод);
//	СтруктураКлиента.Вставить("phone", выборка.Телефон);
//	СтруктураИнфо.Вставить("client", СтруктураКлиента);
//
//	СтруктураМенеджера = Новый Структура;
//	СтруктураМенеджера.Вставить("name", Строка(выборка.Ответственный));
//	//Менеджер = Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь", выборка.Ответственный).Код;
//	СтруктураМенеджера.Вставить("id", Строка(выборка.КодСотрудника));
//	СтруктураМенеджера.Вставить("phone", Строка(выборка.ТелефонСлужебный));
//	СтруктураИнфо.Вставить("manager", СтруктураМенеджера);
//		
//	СтруктураИнфо.Вставить("sum", выборка.СуммаДокумента);
//	СтруктураИнфо.Вставить("callDate", Строка(выборка.ДатаСвязи));
//	СтруктураИнфо.Вставить("processing", Строка(выборка.СтатусОбработки));
//	СтруктураИнфо.Вставить("sub_processing", Строка(выборка.подСтатусОбработки));
//	СтруктураИнфо.Вставить("porter", Строка(выборка.ОтветственныйЗаОбработку));
//	СтруктураИнфо.Вставить("comment", Строка(выборка.Комментарий));
	//СтруктураИнфо.Вставить("numCheck", Строка(?(Счет.Ссылка = Неопределено, "", Счет.Ссылка.Номер)));
	//ВыборкаТоваров = выборка.Товары.Выбрать();

	ТЗ = выборка.Товары.Выгрузить();

	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("Партия2");
	Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
	Итер = 0;
	СуммаТоваров = 0; 
	Для Каждого стр Из ТЗ Цикл
//		МассивФото = Новый массив;
//		Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
//			Если фотки <> Неопределено И фотки.Количество() > 0 Тогда
//				НайденныеФотки = Новый Массив;
//				КоличествоСФото = КоличествоСФото + 1;
//				НайденныеФотки = Фотки[итер].urls;
//				МассивФото = Новый массив;
//				Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда
//
//					стр.колфото = 1;
//
//					Для Каждого Фотка Из НайденныеФотки Цикл
//						Текст = "";
//						//Текст = "https://wt10.ru" + Фотка;
//						Текст = Фотка;
//						МассивФото.Добавить(Текст);
//					КонецЦикла;
//				КонецЕсли;
//				итер = итер + 1;
//
//			КонецЕсли;
//
//		КонецЕсли;
//
//		Код = стр.Код;
//		Пока Лев(Код, 1) = "0" Цикл
//			Код = Прав(Код, СтрДлина(Код) - 1);
//		КонецЦикла;
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
//		СтруктураТоваров.Вставить("name", Строка(стр.Номенклатура));
//		СтруктураТоваров.Вставить("article", Строка(стр.Номенклатура.Артикул));
//		СтруктураТоваров.Вставить("cost", стр.Цена);
//		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
//		СтруктураТоваров.Вставить("code", Строка("00" + Код));
		СтруктураТоваров.Вставить("id", Строка(стр.Партия));
//		СтруктураТоваров.Вставить("stat", стр.Отменено);
//		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад)); 
		СуммаТоваров = СуммаТоваров + (стр.Цена*стр.Количество);
//		//СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
//		//@skip-check query-in-loop
//		СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
//		//@skip-check query-in-loop
//		СтруктураТоваров.Вставить("k", ЕстьНаКСкладе(стр.Номенклатура));
//		Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
//			НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
//			НаборЗаписей.Отбор.индкод.Установить(стр.Партия);
//			НаборЗаписей.Прочитать();
//			Товар = НаборЗаписей[0];
//			СтруктураТоваров.Вставить("place", Строка(Товар.стеллаж));
//		Иначе
//			СтруктураТоваров.Вставить("place", Строка(стр.Номенклатура.МестоНаСкладе2));
//		КонецЕсли;
//
//		Если Не стр.Отменено Тогда
//			КоличествоТоваров = КоличествоТоваров + 1;
//		КонецЕсли;
//		СтруктураТоваров.Вставить("photos", МассивФото);
//		
		МассивТоваров.Добавить(СтруктураТоваров);

		//МассивТоваров.Добавить(Строка(стр.Партия));
	КонецЦикла;

			СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("Товары", МассивТоваров); 
		СтруктураОтвета.Вставить("СуммаТоваров", СуммаТоваров);


	Возврат СтруктураОтвета;
	 
	
	
	
КонецФункции

Функция ПолучитьРолиПользователя(Сотрудник)
	
	///+ГомзМА 15.12.2023
	Результат = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиРолиWT10.Роль КАК Роль
	|ИЗ
	|	Справочник.Сотрудники.РолиWT10 КАК СотрудникиРолиWT10
	|ГДЕ
	|	СотрудникиРолиWT10.Ссылка.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Сотрудник);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Количество() > 0 Тогда
		МассивРолей = Новый Массив;
		Пока РезультатЗапроса.Следующий() Цикл
			МассивРолей.Добавить(РезультатЗапроса.Роль);
		КонецЦикла;
		Результат = МассивРолей;
	КонецЕсли;

	Возврат Результат;
	///-ГомзМА 15.12.2023

КонецФункции // ПолучитьРолиПользователя(Пользователь)

#КонецОбласти
Функция ПолучитьЗаявкиДляМенеджераGetDashSalers(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

Функция ПолучитьЗаявкиДляМенеджераGetDashSalers(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

Функция ПолучитьЗаявкиДляМенеджераGetDashSalers(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

Функция ПолучитьЗаявкиДляМенеджераGetDashSalers(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции
