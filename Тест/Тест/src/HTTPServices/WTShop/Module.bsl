#Область ОбработчикиСобытий

Функция ПолучитьАвторизациюAuthorization(Запрос)
	ЗапросСотрудника = Новый запрос;
	ЗапросСотрудника.Текст = "ВЫБРАТЬ
	|
	|	ПользователиWTShop.НомерТелефона,
	|	ПользователиWTShop.СвязьСКлиентом,
	|	ПользователиWTShop.Наименование,
	|	ПользователиWTShop.Код
	|ИЗ
	|	Справочник.ПользователиWTShop КАК ПользователиWTShop
	|ГДЕ
	|	ПользователиWTShop.НомерТелефона = &НомерТелефона";
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	ЗапросСотрудника.УстановитьПараметр("НомерТелефона", Строка(Массив.phone));
	
	ВыборкаСотрудника = ЗапросСотрудника.Выполнить().Выбрать();
	Если ВыборкаСотрудника.Количество() > 0 Тогда
		ВыборкаСотрудника.Следующий();

			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("id",        Строка(ВыборкаСотрудника.Код));
			СтруктураОтвета.Вставить("name",      Строка(ВыборкаСотрудника.Наименование));
			СтруктураОтвета.Вставить("client",    Строка(ВыборкаСотрудника.СвязьСКлиентом));
			СтруктураОтвета.Вставить("phone",     Строка(ВыборкаСотрудника.НомерТелефона));

			//СтруктураОтвета.Вставить("Photo",ДвоичныеДанные ); 
			//signin
         	ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			
			ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			
			Ответ = Новый HTTPСервисОтвет(200);	
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Истина,"Запрос успешно выполнен",СтрокаДляОтвета,));
			Возврат Ответ;
	Иначе 
		
		ОбъектПользователя = Справочники.ПользователиWTShop.СоздатьЭлемент();
		ОбъектПользователя.НомерТелефона = Массив.phone;
		ОбъектПользователя.Записать();
		
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("id",        Строка(ОбъектПользователя.Код));
			СтруктураОтвета.Вставить("name",      Строка(ОбъектПользователя.Наименование));
			СтруктураОтвета.Вставить("client",    Строка(ОбъектПользователя.СвязьСКлиентом));
			СтруктураОтвета.Вставить("phone",     Строка(ОбъектПользователя.НомерТелефона));

		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Истина,"Пользователь успешно зарегестрирован",СтрокаДляОтвета,));
		Возврат Ответ;
		КонецЕсли;
		
КонецФункции

Функция ПолучитьСписокКатегорийgetCategories(Запрос)	
	МассивКатегорий= Новый Массив;
	Дерево = Новый ДеревоЗначений;
	ЗапросКатегорий = Новый Запрос;
	ЗапросКатегорий.Текст = "ВЫБРАТЬ
	                        |	Категории.Ссылка КАК Ссылка,
	                        |	Категории.Код КАК Код
	                        |ИЗ
	                        |	Справочник.Категории КАК Категории
	                        |ИТОГИ ПО
	                        |	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	Дерево = ЗапросКатегорий.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	МассивКатегорий= Новый Массив;
	ПустойМассив = новый массив;
	Для Каждого СтрПервогоУровня из Дерево.Строки Цикл
		СтруктураКатегорий1 = Новый Структура;
		СтруктураКатегорий1.Вставить("category",Строка(СтрПервогоУровня.Ссылка));
		СтруктураКатегорий1.Вставить("id",Строка(СтрПервогоУровня.Код));
		МассивКатегорий2 = Новый массив;
		Для Каждого стрВторогоУровня из СтрПервогоУровня.Строки Цикл 
			МассивКатегорий3 = Новый массив;
			
			Для Каждого стрТретьегоУровня из СтрВторогоУровня.Строки Цикл
				СтруктураКатегорий3 = Новый Структура;
				СтруктураКатегорий3.Вставить("category","");
				
				СтруктураКатегорий3.Вставить("category",Строка(стрТретьегоУровня.Ссылка));
				СтруктураКатегорий3.Вставить("id",Строка(стрТретьегоУровня.Код));
				СтруктураКатегорий3.Вставить("subcategory",ПустойМассив);
				МассивКатегорий3.Добавить(СтруктураКатегорий3);
				//МассивКатегорий4 = Новый массив;
			КонецЦикла;	
			СтруктураКатегорий2 = новый Структура;
			СтруктураКатегорий2.Вставить("category",Строка(стрВторогоУровня.Ссылка));
			СтруктураКатегорий2.Вставить("id",Строка(стрВторогоУровня.Код));
			//Если МассивКатегорий3.Количество()>0 Тогда
				
				СтруктураКатегорий2.Вставить("subcategory",МассивКатегорий3);
				
			//КонецЕсли;
			МассивКатегорий2.Добавить(СтруктураКатегорий2);
		КонецЦикла;
		//Если МассивКатегорий2.Количество()>0 Тогда
			СтруктураКатегорий1.Вставить("subcategory",МассивКатегорий2);
			
		//КонецЕсли;
		МассивКатегорий.Добавить(СтруктураКатегорий1);
	КонецЦикла;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция СоздатьЗаявкуcreateapplication(Запрос)
	
	///+ГомзМА 03.05.2024
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	
	НомерТелефона = Массив.number;
	НомерТелефона = ПолучитьНормализованныйНомер(НомерТелефона); 
	
	Попытка
		НоваяЗаявка = Документы.ЗаказКлиента.СоздатьДокумент(); 
		НоваяЗаявка.Дата = ТекущаяДатаСеанса();
		НоваяЗаявка.НомерТелефона = НомерТелефона;
		НоваяЗаявка.WTPanel = Справочники.СтатусыWT.НайтиПоКоду("000000017"); //Ожидание
		НоваяЗаявка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Ожидание;
		НоваяЗаявка.ПодстатусОбработки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
		НоваяЗаявка.Клиент = ПолучитьКлиентаПоТелефону(НомерТелефона);
		НоваяЗаявка.Записать();
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Истина,"Запрос успешно выполнен",НоваяЗаявка.Номер,));
	Исключение
		Информация = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Ложь,"Ошибка выполнения запроса",,СформироватьСтруктуруОшибки(500,"Заявку создать не удалось",Информация.Описание)));
	КонецПопытки; 

	Возврат Ответ;
	///-ГомзМА 03.05.2024
	
КонецФункции 

Функция ПолучитьСписокТоваровGetProductsList(Запрос)
	
	ЗапросТовара = Новый Запрос;
	//запросТовара.Текст =  текстДляТиповТоваров();  
	//если Строка(Запрос.ПараметрыURL["pk"]) = "1" Тогда
	//	запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = ИСТИНА");	
	//Иначеесли Строка(Запрос.ПараметрыURL["pk"]) = "2" Тогда 
	//			запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = Ложь");
	//конецЕсли;
	ЗапросТовара.Текст = текстДляТиповТоваров2();
	ЗапросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["id"]))+"%" );
	
	если Строка(Запрос.ПараметрыURL["pk"]) = "1" Тогда
		запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = ИСТИНА");	
	Иначеесли Строка(Запрос.ПараметрыURL["pk"]) = "2" Тогда 
		запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = Ложь");
	конецЕсли;
	
	ТЗТоваров = запросТовара.Выполнить().Выгрузить(); 
	ТЗТоваров.Итог("Колво"); 
	
	если Строка(Запрос.ПараметрыURL["pk"]) = "1" Тогда
		Выборкаобщ = ТЗТоваров.Найти(1,"id").Колво;	
	Иначеесли Строка(Запрос.ПараметрыURL["pk"]) = "2" Тогда
		Выборкаобщ = ТЗТоваров.Найти(2,"id").Колво;
	Иначе
		Выборкаобщ =ТЗТоваров.Итог("Колво");	
	конецЕсли;
	
	
	
	//	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
	
	запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["id"]))+"%" );
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли; 
	если Строка(Запрос.ПараметрыURL["pk"]) = "1" Тогда
		запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = ИСТИНА");	
	Иначеесли Строка(Запрос.ПараметрыURL["pk"]) = "2" Тогда 
		запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = Ложь");
	конецЕсли;
	
	ТЗТоваров = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	
	ТЗТоваров.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗТоваров.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = ТЗТоваров.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;
	
	Для каждого стр из ТЗТоваров Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		итер = итер+1;
		ТЗТоваров.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place",   Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",   Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("pk",    	 стр.АвитоЧастник); 
		СтруктураТоваров.Вставить("chek_size",      стр.Размеры);
		СтруктураТоваров.Вставить("length",      стр.длин);
		СтруктураТоваров.Вставить("width",      стр.шир);
		СтруктураТоваров.Вставить("height",      стр.выс);
		СтруктураТоваров.Вставить("weight",      стр.Вес);
		
		
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();                                    
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция текстДляНоменклатуры()
	Текстзапроса ="ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод) КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.Поддон) КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
	|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
	|	РегИндНомер.индкод.Владелец.выс КАК выс,
	|	РегИндНомер.индкод.Владелец.длин КАК длин,
	|	РегИндНомер.индкод.Владелец.шир КАК шир
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	| {Где РегИндНомер.АвитоЧастник = &Ач}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ВТ_данныеНоменклатур.индкод КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
	|	ВТ_данныеНоменклатур.Размеры КАК Размеры,
	|	ВТ_данныеНоменклатур.Вес КАК Вес,
	|	ВТ_данныеНоменклатур.выс КАК выс,
	|	ВТ_данныеНоменклатур.длин КАК длин,
	|	ВТ_данныеНоменклатур.шир КАК шир
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи" ; 
	Возврат Текстзапроса;
КонецФункции     

Функция текстДляТиповТоваров2() 
	Текст =  "ВЫБРАТЬ
	         |	ВЫБОР
	         |		КОГДА РегИндНомер.АвитоЧастник
	         |			ТОГДА ""Прошли конвеер""
	         |		ИНАЧЕ ""Не прошли конвеер""
	         |	КОНЕЦ КАК АвитоЧастник,
	         |	ВЫБОР
	         |		КОГДА РегИндНомер.АвитоЧастник
	         |			ТОГДА 1
	         |		ИНАЧЕ 2
	         |	КОНЕЦ КАК id,
	         |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегИндНомер.индкод) КАК Колво
	         |ИЗ
	         |	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	         |		ПО (РегИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	         |ГДЕ
	         |	РегистрНакопления1Остатки.КолвоОстаток > 0
	         |	И (РегИндНомер.индкод.Владелец.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	         |			ИЛИ РегИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	         |			ИЛИ РегИндНомер.индкод.Владелец.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	         |			ИЛИ РегИндНомер.индкод.Владелец.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	         |			ИЛИ РегИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")
	         |{ГДЕ
	         |	(РегИндНомер.АвитоЧастник = &АЧ) КАК Поле2}
	         |
	         |СГРУППИРОВАТЬ ПО
	         |	ВЫБОР
	         |		КОГДА РегИндНомер.АвитоЧастник
	         |			ТОГДА ""Прошли конвеер""
	         |		ИНАЧЕ ""Не прошли конвеер""
	         |	КОНЕЦ,
	         |	ВЫБОР
	         |		КОГДА РегИндНомер.АвитоЧастник
	         |			ТОГДА 1
	         |		ИНАЧЕ 2
	         |	КОНЕЦ";
	Возврат Текст;
КонецФункции


Функция ПолучитьНормализованныйНомер(Номер)

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	ПромежуточныйНомер = "";
	ДопустимыеСимволы = "0123456789";
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	Для Сч1 = 1 По ДлинаНомера Цикл
		ТекСимвол = Сред(СокрЛП(Номер), Сч1, 1);
		Если СтрНайти(ДопустимыеСимволы, ТекСимвол) > 0 Тогда
			ПромежуточныйНомер = ПромежуточныйНомер + ТекСимвол;
			Если Лев(ПромежуточныйНомер, 1) = "8" Тогда
				ПромежуточныйНомер = "7";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Лев(ПромежуточныйНомер, 1) = "7" Тогда
		ПромежуточныйНомер = "+" + ПромежуточныйНомер;
	КонецЕсли;
	
	ФорматированныйНомер = Лев(ПромежуточныйНомер, 2) + " " + Сред(ПромежуточныйНомер, 3, 3) + " " + Сред(ПромежуточныйНомер, 6, 3) + "-" + Сред(ПромежуточныйНомер, 9, 2) + "-" + Сред(ПромежуточныйНомер, 11);
	
	Возврат ФорматированныйНомер;
	//Сергеев Ф.В. -- Дата: 14.05.2024
		
КонецФункции

Функция ПолучитьКлиентаПоТелефону(Номер)

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	Результат = Справочники.Клиенты.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Клиенты.Ссылка
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Телефон = &Телефон";
	
	Запрос.УстановитьПараметр("Телефон", Номер);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.Ссылка;
	КонецЕсли;
	Возврат Результат;
	//Сергеев Ф.В. -- Дата: 14.05.2024
		
КонецФункции
//
//Функция СформироватьОтвет(Заголовок,Значение)
//	
//	СтруктураОтвета = Новый Структура;
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();                                    
//	СтруктураОтвета.Вставить(Заголовок,Значение);
//	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
//	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
//	Возврат СтрокаДляОтвета;
//КонецФункции

Функция СформироватьОтветСтруктурой(Success,Message,Data="",Error="")
	
	СтруктураОтвета = Новый Структура;
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();                                    
	СтруктураОтвета.Вставить("success",Success);
	СтруктураОтвета.Вставить("message",Message);
	СтруктураОтвета.Вставить("data",   Data);
	СтруктураОтвета.Вставить("error",  Error);
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Возврат СтрокаДляОтвета;
КонецФункции

Функция СформироватьСтруктуруОшибки(Сode,Message,Details)
	
	СтруктураОтвета = Новый Структура;                                   
	СтруктураОтвета.Вставить("code",      Сode);
	СтруктураОтвета.Вставить("message",   Message);
	СтруктураОтвета.Вставить("details",   Details);

	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучениеФото(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245",8085);
		
		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);	
		ЗапросСтруктура = Новый Структура();
		
		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON();
		ПотокJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		
		МассивПустыхФото = новый массив; 
		
		Для каждого Стр из ИндКод Цикл 
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);
			
		КонецЦикла;
		
		Возврат МассивПустыхФото;
	КонецПопытки;
	
КонецФункции

#КонецОбласти