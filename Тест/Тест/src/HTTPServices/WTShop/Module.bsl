#Область ОбработчикиСобытий

Функция ПолучитьАвторизациюAuthorization(Запрос)
	ЗапросСотрудника = Новый запрос;
	ЗапросСотрудника.Текст = "ВЫБРАТЬ
							 |
							 |	ПользователиWTShop.НомерТелефона,
							 |	ПользователиWTShop.СвязьСКлиентом,
							 |	ПользователиWTShop.Наименование,
							 |	ПользователиWTShop.Код
							 |ИЗ
							 |	Справочник.ПользователиWTShop КАК ПользователиWTShop
							 |ГДЕ
							 |	ПользователиWTShop.НомерТелефона = &НомерТелефона";

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	ЗапросСотрудника.УстановитьПараметр("НомерТелефона", Строка(Массив.phone));

	ВыборкаСотрудника = ЗапросСотрудника.Выполнить().Выбрать();
	Если ВыборкаСотрудника.Количество() > 0 Тогда
		ВыборкаСотрудника.Следующий();

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("id", Строка(ВыборкаСотрудника.Код));
		СтруктураОтвета.Вставить("name", Строка(ВыборкаСотрудника.Наименование));
		СтруктураОтвета.Вставить("client", Строка(ВыборкаСотрудника.СвязьСКлиентом));
		СтруктураОтвета.Вставить("phone", Строка(ВыборкаСотрудника.НомерТелефона));

			//signin
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", СтруктураОтвета, ));
		Возврат Ответ;
	Иначе

		ОбъектПользователя = Справочники.ПользователиWTShop.СоздатьЭлемент();
		ОбъектПользователя.НомерТелефона = Массив.phone;
		ОбъектПользователя.Записать();

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("id", Строка(ОбъектПользователя.Код));
		СтруктураОтвета.Вставить("name", Строка(ОбъектПользователя.Наименование));
		СтруктураОтвета.Вставить("client", Строка(ОбъектПользователя.СвязьСКлиентом));
		СтруктураОтвета.Вставить("phone", Строка(ОбъектПользователя.НомерТелефона));

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Пользователь успешно зарегестрирован",
			СтруктураОтвета, ));
		Возврат Ответ;
	КонецЕсли;

КонецФункции

Функция ПолучитьСессиюgetsession(Запрос)
	ЗапросСотрудника = Новый запрос;
	ЗапросСотрудника.Текст = "ВЫБРАТЬ
							 |
							 |	ПользователиWTShop.НомерТелефона,
							 |	ПользователиWTShop.СвязьСКлиентом,
							 |	ПользователиWTShop.Наименование,
							 |	ПользователиWTShop.Код
							 |ИЗ
							 |	Справочник.ПользователиWTShop КАК ПользователиWTShop
							 |ГДЕ
							 |	ПользователиWTShop.Код = &Код";

//	Тело = Запрос.ПолучитьТелоКакстроку();
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Тело);
//
//	Массив = ПрочитатьJSON(ЧтениеJSON);

	ЗапросСотрудника.УстановитьПараметр("Код", Строка(Запрос.ПараметрыURL["id"]));

	ВыборкаСотрудника = ЗапросСотрудника.Выполнить().Выбрать();
	Если ВыборкаСотрудника.Количество() > 0 Тогда
		ВыборкаСотрудника.Следующий();

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("id", Строка(ВыборкаСотрудника.Код));
		СтруктураОтвета.Вставить("name", Строка(ВыборкаСотрудника.Наименование));
		СтруктураОтвета.Вставить("client", Строка(ВыборкаСотрудника.СвязьСКлиентом));
		СтруктураОтвета.Вставить("phone", Строка(ВыборкаСотрудника.НомерТелефона));

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", СтруктураОтвета, ));
		Возврат Ответ;
	Иначе

		Ответ = Новый HTTPСервисОтвет(401);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Ложь, "Ошибка!", , РаботаССайтомWT.СформироватьСтруктуруОшибки(401,
			"Пользователь не найден.", "Данный идентификатор не обнаржен в базе или введён не корректно.")));
		Возврат Ответ;
	КонецЕсли;

КонецФункции

Функция ПолучитьСписокКатегорийgetCategories(Запрос)
	МассивКатегорий= Новый Массив;
	Дерево = Новый ДеревоЗначений;
	ЗапросКатегорий = Новый Запрос;
	ЗапросКатегорий.Текст = "ВЫБРАТЬ
							|	Категории.Ссылка КАК Ссылка,
							|	Категории.Код КАК Код
							|ИЗ
							|	Справочник.Категории КАК Категории
							|ИТОГИ ПО
							|	Ссылка ТОЛЬКО ИЕРАРХИЯ";

	Дерево = ЗапросКатегорий.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	МассивКатегорий= Новый Массив;
	ПустойМассив = Новый массив;
	Для Каждого СтрПервогоУровня Из Дерево.Строки Цикл
		СтруктураКатегорий1 = Новый Структура;
		СтруктураКатегорий1.Вставить("category", Строка(СтрПервогоУровня.Ссылка));
		СтруктураКатегорий1.Вставить("id", Строка(СтрПервогоУровня.Код));
		МассивКатегорий2 = Новый массив;
		Для Каждого стрВторогоУровня Из СтрПервогоУровня.Строки Цикл
			МассивКатегорий3 = Новый массив;

			Для Каждого стрТретьегоУровня Из СтрВторогоУровня.Строки Цикл

				Если СтрВторогоУровня.ссылка <> стрТретьегоУровня.ссылка Тогда
					СтруктураКатегорий3 = Новый Структура;
					СтруктураКатегорий3.Вставить("category", "");

					СтруктураКатегорий3.Вставить("category", Строка(стрТретьегоУровня.Ссылка));
					СтруктураКатегорий3.Вставить("id", Строка(стрТретьегоУровня.Код));
					СтруктураКатегорий3.Вставить("subcategory", ПустойМассив);
					МассивКатегорий3.Добавить(СтруктураКатегорий3);
				КонецЕсли;
				//МассивКатегорий4 = Новый массив;
			КонецЦикла;
			Если СтрПервогоУровня.ссылка <> СтрВторогоУровня.ссылка Тогда
				СтруктураКатегорий2 = Новый Структура;
				СтруктураКатегорий2.Вставить("category", Строка(стрВторогоУровня.Ссылка));
				СтруктураКатегорий2.Вставить("id", Строка(стрВторогоУровня.Код));
			//Если МассивКатегорий3.Количество()>0 Тогда

				СтруктураКатегорий2.Вставить("subcategory", МассивКатегорий3);
				МассивКатегорий2.Добавить(СтруктураКатегорий2);
			КонецЕсли;	
			//КонецЕсли;

		КонецЦикла;
		//Если МассивКатегорий2.Количество()>0 Тогда
		СтруктураКатегорий1.Вставить("subcategory", МассивКатегорий2);
			
		//КонецЕсли;
		МассивКатегорий.Добавить(СтруктураКатегорий1);
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", МассивКатегорий, ));

	Возврат Ответ;
КонецФункции

Функция СоздатьЗаявкуcreateapplication(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	НомерТелефона = Массив.phone;
	НомерТелефона = ПолучитьНормализованныйНомер(НомерТелефона);

	Попытка
		НоваяЗаявка = Документы.ЗаказКлиента.СоздатьДокумент();
		НоваяЗаявка.Дата = ТекущаяДатаСеанса();
		НоваяЗаявка.НомерТелефона = НомерТелефона;
		НоваяЗаявка.WTPanel = Справочники.СтатусыWT.НайтиПоКоду("000000017"); //Ожидание
		НоваяЗаявка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Ожидание;
		НоваяЗаявка.ПодстатусОбработки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
		НоваяЗаявка.Ответственный = Справочники.Сотрудники.НайтиПоКоду("000000182").Пользователь;
		//НоваяЗаявка.Клиент = ПолучитьКлиентаПоТелефону(НомерТелефона);
		МассивОшибок = Новый Массив;
		Для Каждого покупка Из Массив.products Цикл
			//@skip-check query-in-loop
			ИнформацияОпартии = ПолучитьИнформациюОПартии(покупка);

			Если ИнформацияОпартии.Партия <> 0 Тогда
				СтрокаТоваров = НоваяЗаявка.Товары.Добавить();
				СтрокаТоваров.Количество = 1;
				//@skip-check wrong-type-expression
				СтрокаТоваров.Партия = ИнформацияОпартии.Партия;
				//@skip-check wrong-type-expression
				СтрокаТоваров.Склад  = ИнформацияОпартии.Склад;
				СтрокаТоваров.Цена   = ИнформацияОпартии.Цена;
				//@skip-check wrong-type-expression
				СтрокаТоваров.Номенклатура   = ИнформацияОпартии.Товар;
			Иначе

				МассивОшибок.Добавить(покупка);
			КонецЕсли;

		КонецЦикла;

		НоваяЗаявка.Записать();

Если МассивОшибок.Количество() = 0 тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", НоваяЗаявка.Номер,));
Иначе
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("application", Строка(НоваяЗаявка.Номер));
		СтруктураОтвета.Вставить("products", МассивОшибок);
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос частично выполнен", СтруктураОтвета, ));
КонецЕсли;

	Исключение
		Информация = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Ложь, "Ошибка выполнения запроса", ,
			РаботаССайтомWT.СформироватьСтруктуруОшибки(500, "Заявку создать не удалось", Информация.Описание)));
	КонецПопытки;

	Возврат Ответ;
	

КонецФункции

Функция ПолучитьСписокТоваровGetProductsList(Запрос)

	ЗапросТовара = Новый Запрос;

//	ЗапросТовара.Текст = текстДляТиповТоваров2();
//	ЗапросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
//	Запрос.ПараметрыURL["text"])) + "%");
//
//	запросТовара.текст = СтрЗаменить(запростовара.Текст, "{Где РегИндНомер.АвитоЧастник = &Ач}",
//		"И РегИндНомер.АвитоЧастник = ИСТИНА");
	//запросТовара.УстановитьПараметр("Категория", Справочники.Категории.НайтиПоКоду(Запрос.ПараметрыURL["id_cat"]));
//	ТЗТоваров = запросТовара.Выполнить().Выгрузить();
//	Выборкаобщ = ТЗТоваров.Итог("Колво");
	
	//	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();

	запросТовара.Текст =  текстДляНоменклатуры();//, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
	//	Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
		Запрос.ПараметрыURL["text"])) + "%"+"#3");
//	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
//		Запрос.ПараметрыURL["page"]) > 1 Тогда
//		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
//			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
//	Иначе
//		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
//	КонецЕсли;

//	запросТовара.текст = СтрЗаменить(запростовара.Текст, "{Где РегИндНомер.АвитоЧастник = &Ач}",
//		"И РегИндНомер.АвитоЧастник = ИСТИНА");

	ТЗТоваров = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();

	ТЗТоваров.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗТоваров.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = ТЗТоваров.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;

	Для Каждого стр Из ТЗТоваров Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;	
			КонецЦикла;
			МассивФото.Добавить(Текст);
		КонецЕсли;
		итер = итер + 1;
		//ТЗТоваров.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("category", Строка(стр.Категория));
//		СтруктураТоваров.Вставить("cost", Строка(стр.Цена));
//		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
//		СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
//		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
//		СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
//		СтруктураТоваров.Вставить("chek_size", стр.Размеры);
//		СтруктураТоваров.Вставить("length", стр.длин);
//		СтруктураТоваров.Вставить("width", стр.шир);
//		СтруктураТоваров.Вставить("height", стр.выс);
//		СтруктураТоваров.Вставить("weight", стр.Вес);
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
//	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
//	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	//СтруктураИнфо= Новый Структура;
//	СтруктураИнфо.Вставить("pages", Итог);
	//СтруктураИнфо.Вставить("count", МассивТоваров.Количество());

//	СтруктураОтвета = Новый Структура;
//	СтруктураОтвета.Вставить("info", СтруктураИнфо);
//	СтруктураОтвета.Вставить("data", МассивТоваров);

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", МассивТоваров, ));

	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокТоваровПоКатегориямGetProductsList(Запрос)

	ЗапросТовара = Новый Запрос;

	Текстзапроса = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод,
	|	РегИндНомер.индкод,
	|	РегИндНомер.Код,
	|	РегИндНомер.наценка,
	|	РегИндНомер.Цена,
	|	РегИндНомер.цп,
	|	РегИндНомер.дн,
	|	РегИндНомер.п,
	|	РегИндНомер.АвитоЧастник,
	|	РегИндНомер.Стеллаж,
	|	РегИндНомер.Комментарий,
	|	РегИндНомер.ЦенаПроверена,
	|	РегИндНомер.Модель,
	|	РегИндНомер.ДатаИзмененияКонвеера,
	|	РегИндНомер.Ответственный,
	|	РегИндНомер.ЕстьФото,
	|	РегИндНомер.Состояние,
	|	РегИндНомер.Поддон
	|ПОМЕСТИТЬ ВТ_Категории
	|ИЗ
	|	РегистрСведений.ИндНомер КАК РегИндНомер
	|ГДЕ
	|	(РегИндНомер.индкод.Владелец.Подкатегория2 = &Категория
	|	ИЛИ РегИндНомер.индкод.Владелец.Подкатегория2.Родитель = &Категория
	|	ИЛИ РегИндНомер.индкод.Владелец.Подкатегория2.Родитель.Родитель = &Категория
	|	ИЛИ РегИндНомер.индкод.Владелец.Подкатегория2.Родитель.Родитель.Родитель = &Категория)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод) КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.Поддон) КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
	|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
	|	РегИндНомер.индкод.Владелец.выс КАК выс,
	|	РегИндНомер.индкод.Владелец.длин КАК длин,
	|	РегИндНомер.индкод.Владелец.шир КАК шир
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Категории КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|	И РегИндНомер.АвитоЧастник = Истина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ВТ_данныеНоменклатур.индкод КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
	|	ВТ_данныеНоменклатур.Размеры КАК Размеры,
	|	ВТ_данныеНоменклатур.Вес КАК Вес,
	|	ВТ_данныеНоменклатур.выс КАК выс,
	|	ВТ_данныеНоменклатур.длин КАК длин,
	|	ВТ_данныеНоменклатур.шир КАК шир
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";
	ЗапросТовара.Текст = текстДляТиповТоваров2();
	ЗапросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
	Запрос.ПараметрыURL["text"])) + "%");

	запросТовара.текст = СтрЗаменить(запростовара.Текст, "{Где РегИндНомер.АвитоЧастник = &Ач}",
		"И РегИндНомер.АвитоЧастник = ИСТИНА");
	запросТовара.УстановитьПараметр("Категория", Справочники.Категории.НайтиПоКоду(Запрос.ПараметрыURL["id_cat"]));
	ТЗТоваров = запросТовара.Выполнить().Выгрузить();
	Выборкаобщ = ТЗТоваров.Итог("Колво");

	//	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();

	запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
		Запрос.ПараметрыURL["text"])) + "%");
	запросТовара.УстановитьПараметр("Категория", Справочники.Категории.НайтиПоКоду(Запрос.ПараметрыURL["id_cat"]));
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
//	Если Строка(Запрос.ПараметрыURL["pk"]) = "1" Тогда
//		запросТовара.текст = СтрЗаменить(запростовара.Текст, "{Где РегИндНомер.АвитоЧастник = &Ач}",
//			"И РегИндНомер.АвитоЧастник = ИСТИНА");
//	ИначеЕсли Строка(Запрос.ПараметрыURL["pk"]) = "2" Тогда
//		запросТовара.текст = СтрЗаменить(запростовара.Текст, "{Где РегИндНомер.АвитоЧастник = &Ач}",
//			"И РегИндНомер.АвитоЧастник = Ложь");
//	КонецЕсли;

	ТЗТоваров = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();

	ТЗТоваров.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗТоваров.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = ТЗТоваров.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;

	Для Каждого стр Из ТЗТоваров Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		итер = итер + 1;
		ТЗТоваров.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost", стр.Цена);
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
		СтруктураТоваров.Вставить("chek_size", стр.Размеры);
		СтруктураТоваров.Вставить("length", стр.длин);
		СтруктураТоваров.Вставить("width", стр.шир);
		СтруктураТоваров.Вставить("height", стр.выс);
		СтруктураТоваров.Вставить("weight", стр.Вес);
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", СтруктураОтвета, ));

	Возврат Ответ;
КонецФункции

Функция ПолучитьТоварGetProduct(Запрос)

	ЗапросТовара = Новый Запрос;
	ЗапросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));
	ЗапросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	ЗапросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	ТЗ_Товар = ЗапросТовара.Выполнить().Выгрузить();

	ТЗ_Товар.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ_Товар.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = ТЗ_Товар.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;
	


	Для Каждого Стр Из ТЗ_Товар Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[Итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		Итер = Итер + 1;
		ТЗ_Товар.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost", стр.Цена);
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("uchetchik", Строка(стр.Учетчик));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("state", Строка(стр.Состояние));
		СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
		СтруктураТоваров.Вставить("chek_size", стр.Размеры);
		СтруктураТоваров.Вставить("availability", стр.ФактНаличия);

		СтруктураТоваров.Вставить("length", стр.длин);
		СтруктураТоваров.Вставить("width", стр.шир);
		СтруктураТоваров.Вставить("height", стр.выс);
		СтруктураТоваров.Вставить("weight", стр.Вес);

		СтруктураТоваров.Вставить("code", Строка(стр.код));
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ПравильныйПоискНоменклатурыGetProductsList(Запрос)
	//ПолнотекстовыйПоиск.ОбновитьИндекс();
	ПолнотекстовыйПоиск.УстановитьКоличествоЗаданийИндексирования(5);
	Страница = Число(Запрос.ПараметрыURL["page"]);
	КолВо    = Число(Запрос.ПараметрыURL["count"]);
	ПоисковаяСтрока = Строка(Запрос.ПараметрыURL["text"]);

	СписокПоиска=ПолнотекстовыйПоиск.СоздатьСписок();
	СписокПоиска.ПолучатьОписание = Ложь;
	МассивОтбор = Новый Массив;
	МассивТоваров = Новый Массив;
	СписокПоиска.РазмерПорции = КолВо;

	ТекущаяПозиция = КолВо * (Страница - 1);
	//Если ЕстьНижнийПробел(ПоисковаяСтрока) Тогда
	МассивОтбор.Добавить(Метаданные.РегистрыСведений.ИндНомер);
	СписокПоиска.ОбластьПоиска = МассивОтбор;
	ЛимитОшибок = Цел(СтрДлина(ПоисковаяСтрока) / 2);
	
	
	Если ЕстьКириллица(ПоисковаяСтрока) Тогда
		СписокПоиска.СтрокаПоиска=ПоисковаяСтрока + "#" + Строка(ЛимитОшибок - 1);
	Иначе
		СписокПоиска.СтрокаПоиска=ПоисковаяСтрока;
	КонецЕсли;

	Если Страница = 1 Тогда
		СписокПоиска.ПерваяЧасть();
	Иначе
		СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
	КонецЕсли;

	ОбщееКолво = СписокПоиска.ПолноеКоличество();
	ИндКоды = Новый массив;

	Для Каждого Результат Из СписокПоиска Цикл
		ИндКоды.Добавить(Строка(Результат.Значение.индкод));
	КонецЦикла;

	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;
	Для Каждого Результат Из СписокПоиска Цикл

		НайденныеФотки = Новый Массив;
		НайденныеФотки = Фотки[Итер].urls;

		МассивФото = Новый массив;

		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;

		КонецЕсли;
		Итер = Итер + 1;

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("indcode", Строка(Результат.Значение.индкод));
		СтруктураТоваров.Вставить("article", Строка(Результат.Значение.индкод.Владелец.Артикул));
		СтруктураТоваров.Вставить("category", Строка(Результат.Значение.индкод.Владелец.Подкатегория2));
		СтруктураТоваров.Вставить("name", Строка(Результат.Значение.индкод.Владелец));
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;

	Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", ОбщееКолво);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", МассивТоваров, ));

	Возврат Ответ;
КонецФункции

Функция ПолучитьТоварыВКорзинеКлиентаGetProductInCart(Запрос)

	ЗапросТовара = Новый Запрос;
	Текстзапроса = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование В (&Наименование)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	РегИндНомер.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	РегИндНомер.Ответственный КАК Учетчик,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	Номенклатура.Размеры КАК Размеры,
	|	Номенклатура.Вес КАК Вес,
	|	Номенклатура.выс КАК выс,
	|	Номенклатура.длин КАК длин,
	|	Номенклатура.шир КАК шир,
	|	РегИндНомер.индкод.Владелец.Код КАК Код,
	|	ВЫБОР
	|		Когда регистрНакопления1Остатки.КолвоОстаток > 0
	|			Тогда ""Есть в наличии""
	|		Иначе ""Товар продан""
	|	КОНЕЦ КАК ФактНаличия
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ИндНомер.индкод.Владелец.Ссылка = Номенклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Состояние КАК Состояние,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Учетчик КАК Учетчик,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
	|	ВТ_данныеНоменклатур.ФактНаличия КАК ФактНаличия,
	|	ВТ_данныеНоменклатур.Код КАК Код,
	|	ВТ_данныеНоменклатур.Размеры КАК Размеры,
	|	ВТ_данныеНоменклатур.Вес КАК Вес,
	|	ВТ_данныеНоменклатур.выс КАК выс,
	|	ВТ_данныеНоменклатур.длин КАК длин,
	|	ВТ_данныеНоменклатур.шир КАК шир
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	ЗапросТовара.Текст =  Текстзапроса;
	ЗапросТовара.УстановитьПараметр("Наименование", Массив.id);
	//ЗапросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	ТЗ_Товар = ЗапросТовара.Выполнить().Выгрузить();

	ТЗ_Товар.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ_Товар.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	//ИндКоды = ТЗ_Товар.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(Массив.id);
	Итер = 0;
	
	Для Каждого Стр Из ТЗ_Товар Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[Итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		Итер = Итер + 1;
	

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost", стр.Цена);
		//СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		//СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
		//СтруктураТоваров.Вставить("uchetchik", Строка(стр.Учетчик));
		//СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		//СтруктураТоваров.Вставить("state", Строка(стр.Состояние));
		//СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
		//СтруктураТоваров.Вставить("chek_size", стр.Размеры);
		СтруктураТоваров.Вставить("availability", стр.ФактНаличия);

		СтруктураТоваров.Вставить("length", стр.длин);
		СтруктураТоваров.Вставить("width", стр.шир);
		СтруктураТоваров.Вставить("height", стр.выс);
		СтруктураТоваров.Вставить("weight", стр.Вес);

		СтруктураТоваров.Вставить("code", Строка(стр.код));
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));
		//СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", МассивТоваров, ));

	Возврат Ответ;
КонецФункции

Функция ПолучитьЗаявкуgetapplication(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["Num"]);
	Выборка = Запросзаявки.Выполнить().Выбрать();
	КоличествоСФото   = 0;
	КоличествоТоваров = 0;
	МассивТоваров = Новый Массив;
	СтруктураИнфо = Новый Структура;
	
	//Пока выборка.Следующий() Цикл 
	выборка.Следующий();

	Счет = ПроверкаСчета(Выборка.Ссылка);

	СтруктураИнфо.Вставить("id", Строка(выборка.Номер));
	СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
	СтруктураИнфо.Вставить("client", Строка(выборка.Клиент));
	СтруктураИнфо.Вставить("condition", Строка(выборка.Состояние));
	СтруктураИнфо.Вставить("responsible", Строка(выборка.Ответственный));
	СтруктураИнфо.Вставить("sum", Строка(выборка.СуммаДокумента));
	СтруктураИнфо.Вставить("callDate", Строка(выборка.ДатаСвязи));
	СтруктураИнфо.Вставить("processing", Строка(выборка.СтатусОбработки));
	СтруктураИнфо.Вставить("sub_processing", Строка(выборка.подСтатусОбработки));
	СтруктураИнфо.Вставить("porter", Строка(выборка.ОтветственныйЗаОбработку));
	СтруктураИнфо.Вставить("comment", Строка(выборка.Комментарий));
	СтруктураИнфо.Вставить("numCheck", Строка(?(Счет.Ссылка = Неопределено, "", Счет.Ссылка.Номер)));

	ТЗ_Товары = выборка.Товары.Выгрузить();

	ТЗ_Товары.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ_Товары.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = ТЗ_Товары.ВыгрузитьКолонку("Партия2");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;

	Для Каждого стр Из ТЗ_Товары Цикл
		МассивФото = Новый массив;
		Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
			Если фотки <> Неопределено И фотки.Количество() > 0 Тогда
				НайденныеФотки = Новый Массив;
				КоличествоСФото = КоличествоСФото + 1;
				НайденныеФотки = Фотки[итер].urls;
				МассивФото = Новый массив;
				Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

					стр.колфото = 1;

					Для Каждого Фотка Из НайденныеФотки Цикл
						Текст = "";
						//Текст = "https://wt10.ru" + Фотка;
						Текст = Фотка;
						МассивФото.Добавить(Текст);
					КонецЦикла;
				КонецЕсли;
				Итер = Итер + 1;

			КонецЕсли;

		КонецЕсли;

		Код = стр.Код;
		Пока Лев(Код, 1) = "0" Цикл
			Код = Прав(Код, СтрДлина(Код) - 1);
		КонецЦикла;
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
		СтруктураТоваров.Вставить("name", Строка(стр.Номенклатура));
		СтруктураТоваров.Вставить("article", Строка(стр.Номенклатура.Артикул));
		СтруктураТоваров.Вставить("cost", стр.Цена);
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("code", Строка("00" + Код));
		СтруктураТоваров.Вставить("id", Строка(стр.Партия));
		СтруктураТоваров.Вставить("stat", стр.Отменено);
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад)); 
		//СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
		//@skip-check query-in-loop
		СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
		//@skip-check query-in-loop
		СтруктураТоваров.Вставить("k", ЕстьНаКСкладе(стр.Номенклатура));
		Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
			НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.индкод.Установить(стр.Партия);
			НаборЗаписей.Прочитать();
			Товар = НаборЗаписей[0];
			СтруктураТоваров.Вставить("place", Строка(Товар.стеллаж));
		Иначе
			СтруктураТоваров.Вставить("place", Строка(стр.Номенклатура.МестоНаСкладе2));
		КонецЕсли;

		Если Не стр.Отменено Тогда
			КоличествоТоваров = КоличествоТоваров + 1;
		КонецЕсли;
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;

	Если КоличествоТоваров <= КоличествоСФото И КоличествоТоваров > 0 Тогда
		СтруктураИнфо.Вставить("stat", Истина);
	Иначе
		СтруктураИнфо.Вставить("stat", Ложь);
	КонецЕсли;
	
	//КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", СтрокаДляОтвета, ));

	Возврат Ответ;
КонецФункции

Функция ОтправитьСМСsendSMS(Запрос)
	
	//Сергеев Ф.В. ++ Дата: 16.05.2024

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);



	ТекстСообщения = Массив.message;

	НомерТелефона = Массив.phone;
	Попытка
		дт_УведомленияСМС.ОтправитьСМС(НомерТелефона, ТекстСообщения, Константы.дт_SMS_Подпись.Получить());

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Истина, "Сообщение успешно отправлено!", , ));
		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(401);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Ложь, "Сообщение успешно НЕ отправлено!", ,
			СформироватьСтруктуруОшибки(401, "Скорее всего беда с инетом", "ХЗ")));
		Возврат Ответ;
	КонецПопытки;
	//Сергеев Ф.В. -- Дата: 16.05.2024

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ТекстДляТовара()
	Текстзапроса = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	РегИндНомер.Состояние КАК Состояние,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	РегИндНомер.Ответственный КАК Учетчик,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
				   |	Номенклатура.Размеры КАК Размеры,
				   |	Номенклатура.Вес КАК Вес,
				   |	Номенклатура.выс КАК выс,
				   |	Номенклатура.длин КАК длин,
				   |	Номенклатура.шир КАК шир,
				   |	РегИндНомер.индкод.Владелец.Код КАК Код,
				   |ВЫБОР
				   |Когда регистрНакопления1Остатки.КолвоОстаток > 0 Тогда
				   |""Есть в наличии""
				   |Иначе
				   |""Товар продан""
				   |КОНЕЦ КАК ФактНаличия
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		Левое СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
				   |		ПО ИндНомер.индкод.Владелец.Ссылка = Номенклатура.Ссылка
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |{ГДЕ
				   |	(РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Состояние КАК Состояние,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Учетчик КАК Учетчик,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
				   |	ВТ_данныеНоменклатур.ФактНаличия КАК ФактНаличия,
				   |	ВТ_данныеНоменклатур.Код КАК Код,
				   |	ВТ_данныеНоменклатур.Размеры КАК Размеры,
				   |	ВТ_данныеНоменклатур.Вес КАК Вес,
				   |	ВТ_данныеНоменклатур.выс КАК выс,
				   |	ВТ_данныеНоменклатур.длин КАК длин,
				   |	ВТ_данныеНоменклатур.шир КАК шир
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";

	Возврат Текстзапроса;
КонецФункции

Функция текстДляНоменклатуры()
	Текстзапроса = "ВЫБРАТЬ ПЕРВЫЕ 50
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Подкатегория2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод) КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.Поддон) КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
	|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
	|	РегИндНомер.индкод.Владелец.выс КАК выс,
	|	РегИндНомер.индкод.Владелец.длин КАК длин,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Категория,
	|	РегИндНомер.индкод.Владелец.шир КАК шир
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|	И РегИндНомер.АвитоЧастник = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ВТ_данныеНоменклатур.индкод КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
	|	ВТ_данныеНоменклатур.Размеры КАК Размеры,
	|	ВТ_данныеНоменклатур.Вес КАК Вес,
	|	ВТ_данныеНоменклатур.выс КАК выс,
	|	ВТ_данныеНоменклатур.длин КАК длин,
	|	ВТ_данныеНоменклатур.Категория КАК Категория,
	|	ВТ_данныеНоменклатур.шир КАК шир
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";
	Возврат Текстзапроса;
КонецФункции

Функция текстДляТиповТоваров2()

	Текст = "ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА РегИндНомер.АвитоЧастник
			|			ТОГДА ""Прошли конвеер""
			|		ИНАЧЕ ""Не прошли конвеер""
			|	КОНЕЦ КАК АвитоЧастник,
			|	ВЫБОР
			|		КОГДА РегИндНомер.АвитоЧастник
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК id,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегИндНомер.индкод) КАК Колво
			|ИЗ
			|	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
			|		ПО (РегИндНомер.индкод = РегистрНакопления1Остатки.индкод)
			|ГДЕ
			|	РегистрНакопления1Остатки.КолвоОстаток > 0
			|	И (РегИндНомер.индкод.Владелец.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
			|	ИЛИ РегИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
			|	ИЛИ РегИндНомер.индкод.Владелец.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
			|	ИЛИ РегИндНомер.индкод.Владелец.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
			|	ИЛИ РегИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")
			|{Где
			|	(РегИндНомер.индкод.Владелец.Подкатегория2 = &Категория
			|	ИЛИ РегИндНомер.индкод.Владелец.Подкатегория2.Родитель = &Категория
			|	ИЛИ РегИндНомер.индкод.Владелец.Подкатегория2.Родитель.Родитель = &Категория
			|	ИЛИ РегИндНомер.индкод.Владелец.Подкатегория2.Родитель.Родитель.Родитель = &Категория)}
			|{ГДЕ
			|	(РегИндНомер.АвитоЧастник = &АЧ) КАК Поле2}
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА РегИндНомер.АвитоЧастник
			|			ТОГДА ""Прошли конвеер""
			|		ИНАЧЕ ""Не прошли конвеер""
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА РегИндНомер.АвитоЧастник
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ";
	Возврат Текст;
КонецФункции

Функция текстДляЗаявки()
	Текст = "ВЫБРАТЬ
			|	ЗаказКлиента.Номер КАК Номер,
			|	ЗаказКлиента.Дата КАК Дата,
			|	ЗаказКлиента.Клиент КАК Клиент,
			|	ЗаказКлиента.Состояние КАК Состояние,
			|	ЗаказКлиента.Ответственный КАК Ответственный,
			|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
			|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
			|	ЗаказКлиента.Товары.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура КАК Номенклатура,
			|		ЦенаОригинала КАК ЦенаОригинала,
			|		Количество КАК Количество,
			|		Цена КАК Цена,
			|		Сумма КАК Сумма,
			|		Отменено КАК Отменено,
			|		Склад КАК Склад,
			|		СуммаНДС КАК СуммаНДС,
			|		Комментарий КАК Комментарий,
			|		ПредлагаемаяЦена КАК ПредлагаемаяЦена,
			|		Партия КАК Партия,
			|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Товары.Партия) КАК Партия2,
			|		Номенклатура.Код КАК Код
			|	) КАК Товары,
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
			|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ЗаказКлиента.Комментарий КАК Комментарий,
			|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|ГДЕ
			|	ЗаказКлиента.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция ТекстДляСпискаЗаявок()
	Текст = "ВЫБРАТЬ
			|	ИндНомер.индкод.Владелец КАК индкодВладелец,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ИндНомер.Стеллаж.Наименование ПОДОБНО &кСклады
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Поле1
			|ПОМЕСТИТЬ ВТ_КСклад
			|ИЗ
			|	РегистрСведений.ИндНомер КАК ИндНомер
			|ГДЕ
			|	ИндНомер.Стеллаж.Наименование ПОДОБНО &кСклады
			|
			|СГРУППИРОВАТЬ ПО
			|	ИндНомер.индкод.Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
			|	МАКСИМУМ(ВТ_КСклад.Поле1) КАК Поле1
			|ПОМЕСТИТЬ ВТ_НаКСкладе
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КСклад КАК ВТ_КСклад
			|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_КСклад.индкодВладелец
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказКлиентаТовары.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 100000
			|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
			|	ЗаказКлиента.Состояние КАК Состояние,
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.Номер КАК Номер,
			|	ЗаказКлиента.Дата КАК Дата,
			|	ЗаказКлиента.Клиент КАК Клиент,
			|	ЗаказКлиента.Ответственный КАК Ответственный,
			|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
			|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
			|	ЗаказКлиента.Комментарий КАК Комментарий,
			|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
			|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки
			|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|ГДЕ
			|	
			|	 ЗаказКлиента.Дата > &Дата
			|  
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номер УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ %1
			|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
			|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
			|	ВТ_ДанныеЗаявки.Номер КАК Номер,
			|	ВТ_ДанныеЗаявки.Дата КАК Дата,
			|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
			|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
			|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
			|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
			|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
			|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ВТ_ДанныеЗаявки.СтатусОбработки КАК СтатусОбработки,
			|	ВТ_НаКСкладе.Поле1 КАК НаКскладе,
			|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки
			|ИЗ
			|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаКСкладе КАК ВТ_НаКСкладе
			|		ПО ВТ_ДанныеЗаявки.Ссылка = ВТ_НаКСкладе.Ссылка
			|ГДЕ
			|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи";
	Возврат текст;
КонецФункции
#КонецОбласти

Функция ЕстьКириллица(ИсходнаяСтрока) Экспорт
	ИсходнаяСтрока=СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока) > 0 Тогда
		Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
//@skip-check use-non-recommended-method
			Если Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ЕстьНижнийПробел(ИсходнаяСтрока) Экспорт

	ИсходнаяСтрока=СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока) > 0 Тогда
		Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
			//@skip-check use-non-recommended-method
			Если Найти("_SsVv", Символ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Ложь;
КонецФункции


Функция ПолучитьНормализованныйНомер(Номер)

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	ПромежуточныйНомер = "";
	ДопустимыеСимволы = "0123456789";
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	Для Сч1 = 1 По ДлинаНомера Цикл
		ТекСимвол = Сред(СокрЛП(Номер), Сч1, 1);
		Если СтрНайти(ДопустимыеСимволы, ТекСимвол) > 0 Тогда
			ПромежуточныйНомер = ПромежуточныйНомер + ТекСимвол;
			Если Лев(ПромежуточныйНомер, 1) = "8" Тогда
				ПромежуточныйНомер = "7";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Лев(ПромежуточныйНомер, 1) = "7" Тогда
		ПромежуточныйНомер = "+" + ПромежуточныйНомер;
	КонецЕсли;

	ФорматированныйНомер = Лев(ПромежуточныйНомер, 2) + " " + Сред(ПромежуточныйНомер, 3, 3) + " " + Сред(
		ПромежуточныйНомер, 6, 3) + "-" + Сред(ПромежуточныйНомер, 9, 2) + "-" + Сред(ПромежуточныйНомер, 11);

	Возврат ФорматированныйНомер;
	//Сергеев Ф.В. -- Дата: 14.05.2024

КонецФункции

Функция ПолучитьКлиентаПоТелефону(Номер)

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	Результат = Справочники.Клиенты.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Клиенты.Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Телефон = &Телефон";

	Запрос.УстановитьПараметр("Телефон", Номер);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.Ссылка;
	КонецЕсли;
	Возврат Результат;
	//Сергеев Ф.В. -- Дата: 14.05.2024

КонецФункции
//
//Функция СформироватьОтвет(Заголовок,Значение)
//	
//	СтруктураОтвета = Новый Структура;
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();                                    
//	СтруктураОтвета.Вставить(Заголовок,Значение);
//	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
//	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
//	Возврат СтрокаДляОтвета;
//КонецФункции


Функция СформироватьОтветСтруктурой(Success, Message, Data = "", Error = "")

	СтруктураОтвета = Новый Структура;
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтруктураОтвета.Вставить("success", Success);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("data", Data);
	СтруктураОтвета.Вставить("error", Error);
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Возврат СтрокаДляОтвета;
КонецФункции

Функция СформироватьСтруктуруОшибки(Сode, Message, Details)

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("code", Сode);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("details", Details);

	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучитьИнформациюОПартии(Ind_code)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	РегистрНакопления1Остатки.Склад КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
	|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
	|	РегИндНомер.индкод.Владелец.выс КАК выс,
	|	РегИндНомер.индкод.Владелец.длин КАК длин,
	|	РегИндНомер.индкод.Владелец.шир КАК шир,
	|	РегистрНакопления1Остатки.машина
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0";
	
	Запрос.УстановитьПараметр("Наименование", Ind_code);
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтвета = Новый Структура;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		СтруктураОтвета.Вставить("Цена",   Выборка.Цена);
		СтруктураОтвета.Вставить("Склад",  Выборка.Склад);
		СтруктураОтвета.Вставить("Партия", Выборка.индкод);
		СтруктураОтвета.Вставить("Машина", Выборка.Машина);
		СтруктураОтвета.Вставить("Товар",  Выборка.Наименование);
	Иначе
		СтруктураОтвета.Вставить("Цена",   0);
		СтруктураОтвета.Вставить("Склад",  0);
		СтруктураОтвета.Вставить("Партия", 0);
		СтруктураОтвета.Вставить("Машина", 0);
		СтруктураОтвета.Вставить("Товар",  0);
	КонецЕсли;

	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучениеФото(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		//@skip-check module-unused-local-variable
		Для Каждого Стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;

КонецФункции

Функция ЕстьНаКСкладе(Номенклатура)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""%K-%""
				   |			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО ""%К-%"")
				   |	И ИндНомер.индкод.Владелец = &Владелец
				   |	И РегистрНакопления1Остатки.КолвоОстаток > 0";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПроверкаСчета(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	ПредварительныйСчет.Ссылка КАК Ссылка
				   |ИЗ
				   |	Документ.ПредварительныйСчет КАК ПредварительныйСчет
				   |ГДЕ
				   |	ПредварительныйСчет.Основание = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

КонецФункции

Функция ПолучитьПоддон(Партия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.поддон КАК поддон
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.поддон;
КонецФункции

#КонецОбласти




