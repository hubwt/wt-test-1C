#Область ОбработчикиСобытий
Функция ПолучитьСтатусыЗаявкиgetstatusapp(Запрос)
	
	///+ТатарМА 25.10.2024
	ЗапросСтатусов = Новый Запрос;
	ЗапросСтатусов.Текст = "ВЫБРАТЬ
	|	дт_СостоянияЗаказовКлиента.Ссылка КАК Статус
	|ИЗ
	|	Перечисление.дт_СостоянияЗаказовКлиента КАК дт_СостоянияЗаказовКлиента
	|ГДЕ
	|	НЕ дт_СостоянияЗаказовКлиента.Ссылка В (&МассивСтарыхСтатусов)";
	
	МассивСтарыхСтатусов = Новый Массив;
	МассивСтарыхСтатусов.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Дубль);
	МассивСтарыхСтатусов.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Срочно);
	МассивСтарыхСтатусов.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ЖдёмДенег);
	МассивСтарыхСтатусов.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Свободная);
	МассивСтарыхСтатусов.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ПропущенныйЗвонок);
	
	ЗапросСтатусов.УстановитьПараметр("МассивСтарыхСтатусов", МассивСтарыхСтатусов);
	
	Выборка = ЗапросСтатусов.Выполнить().Выгрузить();
	
	МассивСтатусов = Новый Массив;
	
	Для Каждого Статус Из Выборка Цикл
		МассивСтатусов.Добавить(Строка(Статус.Статус));
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивСтатусов);
	СтруктураОтвета = ЗаписьJSON.Закрыть();
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтруктураОтвета);
	Возврат Ответ;
	///-ТатарМА 25.10.2024
	
КонецФункции

Функция ПолучитьГлавныеСтатусыЗаявкиgetmainstatusapp(Запрос)
	
	///+ТатарМА 29.11.2024
	МассивГлавныхСтатусов = Новый Массив;
	
	СтруктураОжидание = Новый Структура;
	СтруктураОжидание.Вставить("id", 	"Ожидание");
	СтруктураОжидание.Вставить("title", "Новые заявки");
	МассивГлавныхСтатусов.Добавить(СтруктураОжидание);
	
	СтруктураВРаботе = Новый Структура;
	СтруктураВРаботе.Вставить("id", 	"ВРаботе");
	СтруктураВРаботе.Вставить("title", 	"В работе");
	МассивГлавныхСтатусов.Добавить(СтруктураВРаботе);
	
	СтруктураСобираетсяНаСкладе = Новый Структура;
	СтруктураСобираетсяНаСкладе.Вставить("id", 		"СобираетсяНаСкладе");
	СтруктураСобираетсяНаСкладе.Вставить("title", 	"Собирается на складе");
	МассивГлавныхСтатусов.Добавить(СтруктураСобираетсяНаСкладе);
	
	СтруктураДумает = Новый Структура;
	СтруктураДумает.Вставить("id", 		"Думает");
	СтруктураДумает.Вставить("title", 	"Клиент думает");
	МассивГлавныхСтатусов.Добавить(СтруктураДумает);
	
	СтруктураПродажа = Новый Структура;
	СтруктураПродажа.Вставить("id", 	"Продажа");
	СтруктураПродажа.Вставить("title", 	"Продажа");
	МассивГлавныхСтатусов.Добавить(СтруктураПродажа);
	
	СтруктураЗавершенные = Новый Структура;
	СтруктураЗавершенные.Вставить("id", 	"Завершенные");
	СтруктураЗавершенные.Вставить("title", 	"Завершенные");
	МассивГлавныхСтатусов.Добавить(СтруктураЗавершенные);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивГлавныхСтатусов);
	СтруктураОтвета = ЗаписьJSON.Закрыть();
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтруктураОтвета);
	Возврат Ответ;
	///-ТатарМА 29.11.2024
	
КонецФункции

Функция ПолучитьВторостепенныеСтатусыЗаявкиgetsecondarystatusapp(Запрос)
	
	///+ТатарМА 29.11.2024
	МассивВторостепенныхСтатусов = Новый Массив;
	
	СтруктураКонсультация = Новый Структура;
	СтруктураКонсультация.Вставить("id", 	"Консультация");
	СтруктураКонсультация.Вставить("title", "Консультация");
	МассивВторостепенныхСтатусов.Добавить(СтруктураКонсультация);
	
	СтруктураОжидаетПриход = Новый Структура;
	СтруктураОжидаетПриход.Вставить("id", 	"ОжидаетПриход");
	СтруктураОжидаетПриход.Вставить("title", "Ожидает поставку");
	МассивВторостепенныхСтатусов.Добавить(СтруктураОжидаетПриход);
	
	СтруктураНетВНаличии = Новый Структура;
	СтруктураНетВНаличии.Вставить("id", 	"НетВНаличии");
	СтруктураНетВНаличии.Вставить("title", "Нет в наличии");
	МассивВторостепенныхСтатусов.Добавить(СтруктураНетВНаличии);
	
	СтруктураДорого = Новый Структура;
	СтруктураДорого.Вставить("id", 	"Дорого");
	СтруктураДорого.Вставить("title", "Дорого");
	МассивВторостепенныхСтатусов.Добавить(СтруктураДорого);
	
	СтруктураОтказ = Новый Структура;
	СтруктураОтказ.Вставить("id", 	"Отказ");
	СтруктураОтказ.Вставить("title", "Отказы");
	МассивВторостепенныхСтатусов.Добавить(СтруктураОтказ);
	
	СтруктураДругаяМарка = Новый Структура;
	СтруктураДругаяМарка.Вставить("id", 	"ДругаяМарка");
	СтруктураДругаяМарка.Вставить("title", "Другая марка");
	МассивВторостепенныхСтатусов.Добавить(СтруктураДругаяМарка);
	
	СтруктураСпам = Новый Структура;
	СтруктураСпам.Вставить("id", 	"Спам");
	СтруктураСпам.Вставить("title", "Спам");
	МассивВторостепенныхСтатусов.Добавить(СтруктураСпам);
	
	СтруктураПерекупка = Новый Структура;
	СтруктураПерекупка.Вставить("id", 	"Перекупка");
	СтруктураПерекупка.Вставить("title", "Перекупка");
	МассивВторостепенныхСтатусов.Добавить(СтруктураПерекупка);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивВторостепенныхСтатусов);
	СтруктураОтвета = ЗаписьJSON.Закрыть();
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтруктураОтвета);
	Возврат Ответ;
	///-ТатарМА 29.11.2024
	
КонецФункции


Функция ПолучитьЗаявкиПоСтатусуgetappbystatus(Запрос)
	
	///+ТатарМА 25.10.2024
	МассивЗаявок = Новый Массив;
	
	КодМенеджера = Запрос.ПараметрыURL["manager"];
	
	Попытка
		Для Каждого Перечисление Из Перечисления.дт_СостоянияЗаказовКлиента Цикл
			Если Строка(Перечисление) = Запрос.ПараметрыURL["status"] Тогда
				Статус = Перечисление;
			КонецЕсли;
		КонецЦикла;
				
		ЗапросЗаявок = Новый Запрос;
		
		Если Число(КодМенеджера) = 0 Тогда
		Текст = "ВЫБРАТЬ ПЕРВЫЕ 100000
		|	ЗаказКлиента.Номер КАК Номер,
		|	ЗаказКлиента.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
		|			ТОГДА ЗаказКлиента.Клиент
		|		ИНАЧЕ ЗаказКлиента.КлиентНаименование
		|	КОНЕЦ КАК Клиент,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
		|			ТОГДА ЗаказКлиента.Клиент.Код
		|		ИНАЧЕ ""Не авторизован""
		|	КОНЕЦ КАК КлиентКод,
		|	ЗаказКлиента.Состояние КАК Состояние,
		|	ЗаказКлиента.Ответственный КАК Ответственный,
		|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
		|	ЗаказКлиента.Комментарий КАК Комментарий,
		|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
		|	ЗаказКлиента.НомерТелефона КАК Телефон,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	ПорядокЗаявок.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЗаказКлиента.Клиент.Город2 КАК КлиентГород,
		|	ЗаказКлиента.Клиент.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
		|	Сотрудники.Код КАК КодСотрудника
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЗаявок КАК ПорядокЗаявок
		|ПО ЗаказКлиента.Ссылка = ПорядокЗаявок.Заявка
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|ПО ЗаказКлиента.Ответственный = Сотрудники.Пользователь
		|ГДЕ
		|	ЗаказКлиента.Состояние = &Состояние
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ответственный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ %1
		|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
		|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Номер КАК Номер,
		|	ВТ_ДанныеЗаявки.Дата КАК Дата,
		|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
		|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
		|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
		|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
		|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
		|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
		|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
		|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
		|	ВТ_ДанныеЗаявки.КлиентКод КАК КлиентКод,
		|	ВТ_ДанныеЗаявки.Телефон КАК Телефон,
		|	ВТ_ДанныеЗаявки.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ВТ_ДанныеЗаявки.КлиентГород КАК КлиентГород,
		|	ВТ_ДанныеЗаявки.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
		|	ВТ_ДанныеЗаявки.КодСотрудника КАК КодСотрудника
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|ГДЕ
		|	ВТ_ДанныеЗаявки.ПорядковыйНомер >= &НачинаяСЗаписи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядковыйНомер";
		
		Иначе
			Текст = "ВЫБРАТЬ ПЕРВЫЕ 100000
			|	ЗаказКлиента.Номер КАК Номер,
			|	ЗаказКлиента.Дата КАК Дата,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
			|			ТОГДА ЗаказКлиента.Клиент
			|		ИНАЧЕ ЗаказКлиента.КлиентНаименование
			|	КОНЕЦ КАК Клиент,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
			|			ТОГДА ЗаказКлиента.Клиент.Код
			|		ИНАЧЕ ""Не авторизован""
			|	КОНЕЦ КАК КлиентКод,
			|	ЗаказКлиента.Состояние КАК Состояние,
			|	ЗаказКлиента.Ответственный КАК Ответственный,
			|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
			|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ЗаказКлиента.Комментарий КАК Комментарий,
			|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ЗаказКлиента.НомерТелефона КАК Телефон,
			|	ПорядокЗаявок.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ЗаказКлиента.Клиент.Город2 КАК КлиентГород,
			|	ЗаказКлиента.Клиент.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
			|	Сотрудники.Код КАК КодСотрудника
			|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЗаявок КАК ПорядокЗаявок
			|		ПО (ЗаказКлиента.Ссылка = ПорядокЗаявок.Заявка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО (ЗаказКлиента.Ответственный = Сотрудники.Пользователь)
			|ГДЕ
			|	ЗаказКлиента.Состояние = &Состояние
			|	И Сотрудники.Код = &КодМенеджера
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПорядковыйНомер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 100000
			|	ВТ_ДанныеЗаявки.Номер КАК Номер,
			|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
			|	ВТ_ДанныеЗаявки.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ВТ_ДанныеЗаявки.Дата КАК Дата,
			|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
			|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
			|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
			|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
			|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
			|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ВТ_ДанныеЗаявки.КлиентКод КАК КлиентКод,
			|	ВТ_ДанныеЗаявки.Телефон КАК Телефон,
			|	ВТ_ДанныеЗаявки.КлиентГород КАК КлиентГород,
			|	ВТ_ДанныеЗаявки.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
			|	ВТ_ДанныеЗаявки.КодСотрудника КАК КодСотрудника,
			|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
			|ПОМЕСТИТЬ ВТ_ДанныеЗаявкиАвтономер
			|ИЗ
			|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПорядковыйНомер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ %1
			|	ВТ_ДанныеЗаявкиАвтономер.НомерЗаписи КАК НомерЗаписи,
			|	ВТ_ДанныеЗаявкиАвтономер.Ссылка КАК Ссылка,
			|	ВТ_ДанныеЗаявкиАвтономер.Номер КАК Номер,
			|	ВТ_ДанныеЗаявкиАвтономер.Дата КАК Дата,
			|	ВТ_ДанныеЗаявкиАвтономер.Клиент КАК Клиент,
			|	ВТ_ДанныеЗаявкиАвтономер.Комментарий КАК Комментарий,
			|	ВТ_ДанныеЗаявкиАвтономер.Ответственный КАК Ответственный,
			|	ВТ_ДанныеЗаявкиАвтономер.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_ДанныеЗаявкиАвтономер.ДатаСвязи КАК ДатаСвязи,
			|	ВТ_ДанныеЗаявкиАвтономер.Состояние КАК Состояние,
			|	ВТ_ДанныеЗаявкиАвтономер.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ВТ_ДанныеЗаявкиАвтономер.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ВТ_ДанныеЗаявкиАвтономер.КлиентКод КАК КлиентКод,
			|	ВТ_ДанныеЗаявкиАвтономер.Телефон КАК Телефон,
			|	ВТ_ДанныеЗаявкиАвтономер.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ВТ_ДанныеЗаявкиАвтономер.КлиентГород КАК КлиентГород,
			|	ВТ_ДанныеЗаявкиАвтономер.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
			|	ВТ_ДанныеЗаявкиАвтономер.КодСотрудника КАК КодСотрудника
			|ИЗ
			|	ВТ_ДанныеЗаявкиАвтономер КАК ВТ_ДанныеЗаявкиАвтономер
			|ГДЕ
			|	ВТ_ДанныеЗаявкиАвтономер.НомерЗаписи >= &НачинаяСЗаписи
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерЗаписи";
		КонецЕсли;
				
		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="));
		
		ЗапросЗаявок.УстановитьПараметр("Состояние", Статус);
		
		Если НЕ КодМенеджера = 0 Тогда
			ЗапросЗаявок.УстановитьПараметр("КодМенеджера", КодМенеджера);
		КонецЕсли;
		
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		ОбщееКолво = ЗапросЗаявок.Выполнить().Выбрать().Количество();
		
		Если ОбщееКолво > 0 Тогда
	
		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
		
		ЗапросЗаявок.УстановитьПараметр("Состояние", Статус);
		
		Если НЕ КодМенеджера = 0 Тогда
			ЗапросЗаявок.УстановитьПараметр("КодМенеджера", КодМенеджера);
		КонецЕсли;

		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));

		Иначе
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;
		СписокПоиска = ЗапросЗаявок.Выполнить().Выгрузить();
					
		Для Каждого Результат Из СписокПоиска Цикл

			СтруктураЗаявок = Новый Структура;
			СтруктураЗаявок.Вставить("id", Строка(Результат.Номер));

			СтруктураКлиента = Новый Структура;
			СтруктураКлиента.Вставить("name", Строка(Результат.Клиент));
			СтруктураКлиента.Вставить("id", Результат.КлиентКод);
			СтруктураКлиента.Вставить("phone", Результат.Телефон);
			СтруктураКлиента.Вставить("city", Строка(Результат.КлиентГород));
			СтруктураКлиента.Вставить("count_car", Строка(Результат.КоличествоАвтомобилей));
			СтруктураЗаявок.Вставить("client", СтруктураКлиента);

			СтруктураМенеджера = Новый Структура;
			СтруктураМенеджера.Вставить("name", Строка(Результат.Ответственный));
			СтруктураМенеджера.Вставить("id", Строка(Результат.КодСотрудника));
			СтруктураЗаявок.Вставить("manager", СтруктураМенеджера);
	
			СтруктураЗаявок.Вставить("summ", Результат.СуммаДокумента);
			
			МассивЗаявок.Добавить(СтруктураЗаявок);
				
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", 		Итог);
		СтруктураИнфо.Вставить("count", 		ОбщееКолво);
		СтруктураИнфо.Вставить("applications", 	МассивЗаявок);

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", 		 СтруктураИнфо);
		СтруктураОтвета.Вставить("applications", МассивЗаявок);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		
		Иначе
		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", 		0);
		СтруктураИнфо.Вставить("count", 		0);
		СтруктураИнфо.Вставить("start_index", 	0);
		СтруктураИнфо.Вставить("end_index", 	0);
		СтруктураИнфо.Вставить("applications", 	Новый Массив);
			
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
КонецЕсли;
		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
	///-ТатарМА 25.10.2024
	
КонецФункции

Функция ИзменитьСтатусЗаявкиchangestatusapp(Запрос)
	
	///+ТатарМА 31.10.2024
	//Перемещение заявки на сайте между группами по статусам и актуализирует порядковые номера
	Попытка
		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);

		Массив  = ПрочитатьJSON(ЧтениеJSON);
		
		НомерЗаявки = Запрос.ПараметрыURL["id"];

		Если Массив.start_status = Массив.end_status Тогда
			Для Каждого Статус Из Перечисления.дт_СостоянияЗаказовКлиента Цикл
				Если Строка(Статус) = Массив.start_status Тогда
					НачальныйСтатус = Статус;
					КонечныйСтатус 	= Статус;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого Статус Из Перечисления.дт_СостоянияЗаказовКлиента Цикл
				Если Строка(Статус) = Массив.start_status Тогда
					НачальныйСтатус = Статус;
				ИначеЕсли Строка(Статус) = Массив.end_status Тогда
					КонечныйСтатус 	= Статус;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Автор = Массив.author;

		ДокОбъект = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки).ПолучитьОбъект();
		ДокОбъект.Состояние = КонечныйСтатус;
		ДокОбъект.Записать();
	
		Если НачальныйСтатус <> КонечныйСтатус Тогда
		//НаборЗаписей Первоначальный статус
		НаборЗаписей = РегистрыСведений.ПорядокЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Статус.Установить(НачальныйСтатус);
		НаборЗаписей.Прочитать();
		ТЗ = НаборЗаписей.Выгрузить();
		ТЗ.Сортировать("ПорядковыйНомер");
		НаборЗаписей.Очистить();
	
		ПостроительЗапр = Новый ПостроительЗапроса; 
		ПостроительЗапр.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
	
		ТЗОтбор = ПостроительЗапр.Отбор.Добавить("Заявка");
		ТЗОтбор.ВидСравнения = ВидСравнения.НеРавно;
		ТЗОтбор.Значение = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки); 
		ТЗОтбор.Использование = Истина; 
	
		ПостроительЗапр.Выполнить();
		ТабРезультат = ПостроительЗапр.Результат.Выгрузить();

		ПозицияВСписке = 1;
		Для Каждого СтрокаТЗ Из ТабРезультат Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Заявка = СтрокаТЗ.Заявка;
			НоваяЗапись.ПорядковыйНомер = ПозицияВСписке;
			НоваяЗапись.Статус = НачальныйСтатус;
			ПозицияВСписке = ПозицияВСписке + 1;
		КонецЦикла;
		НаборЗаписей.Записать();
		КонецЕсли;
		
		ТекстЛога = " Сменил статус заявки с " + Строка(НачальныйСтатус) + " на " + Строка(КонечныйСтатус);
		ЛогированиеWT10(Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки), Автор, ТекстЛога);
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Заявка №" + НомерЗаявки + " перемещена с " + Строка(НачальныйСтатус) + " на " + Строка(КонечныйСтатус));
		
	Исключение
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		
		Возврат Ответ;
	КонецПопытки;
	
	Возврат Ответ;
	
	//НЕ УДАЛЯТЬ!!!////////////////////////////////////////////////////////////////////////////////////////
//	НомерЗаявки = Запрос.ПараметрыURL["id"];
//	
//	//Перемещение заявки на сайте между группами по статусам и актуализирует порядковые номера
//	ЗапросЗаявки = Новый Запрос;
//	ЗапросЗаявки.Текст = "ВЫБРАТЬ
//	|	ЗаказКлиента.Ссылка КАК Ссылка
//	|ИЗ
//	|	Документ.ЗаказКлиента КАК ЗаказКлиента
//	|ГДЕ
//	|	ЗаказКлиента.Номер = &Номер";
//	
//	ЗапросЗаявки.УстановитьПараметр("Номер", НомерЗаявки);
//	Попытка
//		Выборка = ЗапросЗаявки.Выполнить().Выбрать();
//		Тело = Запрос.ПолучитьТелоКакстроку();
//		ЧтениеJSON = Новый ЧтениеJSON;
//		ЧтениеJSON.УстановитьСтроку(Тело);
//
//		Массив  = ПрочитатьJSON(ЧтениеJSON);
//		
//		Если Массив.start_status = Массив.end_status Тогда
//			Для Каждого Статус Из Перечисления.дт_СостоянияЗаказовКлиента Цикл
//				Если Строка(Статус) = Массив.start_status Тогда
//					НачальныйСтатус = Статус;
//					КонечныйСтатус 	= Статус;
//				КонецЕсли;
//			КонецЦикла;
//		Иначе
//			Для Каждого Статус Из Перечисления.дт_СостоянияЗаказовКлиента Цикл
//				Если Строка(Статус) = Массив.start_status Тогда
//					НачальныйСтатус = Статус;
//				ИначеЕсли Строка(Статус) = Массив.end_status Тогда
//					КонечныйСтатус 	= Статус;
//				КонецЕсли;
//			КонецЦикла;
//			
//			ДокОбъект = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки).ПолучитьОбъект();
//			ДокОбъект.Состояние = КонечныйСтатус;
//			ДокОбъект.Записать();
//		КонецЕсли;
//
//		НачальнаяПозиция 	= Массив.start_pose_app;
//		КонечнаяПозиция 	= Массив.end_pose_app;
//		НачальныйИндекс 	= Массив.start_index;
//		КонечныйИндекс 		= Массив.end_index;
//		Автор 				= Массив.author;
//
//		Выборка.Следующий();
//
//		//Записать актуальный статус и порядковый номер заявки
//		ЗаписьВРегистреСведений = РегистрыСведений.ПорядокЗаявок.СоздатьМенеджерЗаписи();
//		ЗаписьВРегистреСведений.Заявка = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки);
//		ЗаписьВРегистреСведений.Прочитать();
//		ЗаписьВРегистреСведений.Заявка = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки);
//		ЗаписьВРегистреСведений.ПорядковыйНомер = КонечнаяПозиция;
//		ЗаписьВРегистреСведений.Статус = КонечныйСтатус;
//		ЗаписьВРегистреСведений.Записать();
//		
//		Если НачальныйСтатус <> КонечныйСтатус Тогда
//			//Удаляем старую запись, так как статус является измерением
//			ЗаписьВРегистреСведений = РегистрыСведений.ПорядокЗаявок.СоздатьМенеджерЗаписи();
//			ЗаписьВРегистреСведений.Заявка = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки);
//			ЗаписьВРегистреСведений.Статус = НачальныйСтатус;
//			ЗаписьВРегистреСведений.Прочитать();
//			ЗаписьВРегистреСведений.Удалить();
//		КонецЕсли;
//		
//		Если НачальныйСтатус = КонечныйСтатус Тогда
//			АктуализироватьНумерациюВНачалеИКонцеСписка(НомерЗаявки, КонечнаяПозиция, КонечныйСтатус, НачальныйИндекс, КонечныйИндекс);
//		Иначе
//			//Актуализировать номера начальной группы заявок
//			АктуализироватьНумерациюВКонцеСписка(НомерЗаявки, НачальнаяПозиция, НачальныйСтатус, Ложь);
//		
//			//Актуализировать номера конечной группы заявок
//			АктуализироватьНумерациюВКонцеСписка(НомерЗаявки, КонечнаяПозиция, КонечныйСтатус, Истина);
//			
//			ЗаписьВРегистреСведений = РегистрыСведений.ПорядокЗаявок.СоздатьМенеджерЗаписи();
//			ЗаписьВРегистреСведений.Заявка = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки);
//			ЗаписьВРегистреСведений.Прочитать();
//			ЗаписьВРегистреСведений.Заявка = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки);
//			ЗаписьВРегистреСведений.ПорядковыйНомер = КонечнаяПозиция;
//			ЗаписьВРегистреСведений.Статус = КонечныйСтатус;
//			ЗаписьВРегистреСведений.Записать();
//		КонецЕсли;
//		
//		ТекстЛога = " Сменил статус заявки с " + Строка(НачальныйСтатус) + " на " + Строка(КонечныйСтатус);
//		ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
//		
//		Ответ = Новый HTTPСервисОтвет(200);
//		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//		Ответ.УстановитьТелоИзСтроки("Успех. Заявка №" + НомерЗаявки + " перемещена с " + Строка(НачальныйСтатус) + " на " + Строка(КонечныйСтатус));
//		
//	Исключение
//		ЗаписьJSON = Новый ЗаписьJSON;
//		ЗаписьJSON.УстановитьСтроку();
//		Информация = ИнформацияОбОшибке();
//		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
//
//		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
//
//		Ответ = Новый HTTPСервисОтвет(500);
//		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
//
//		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
//		
//		Возврат Ответ;
//	КонецПопытки;
//	
//	Возврат Ответ;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	///-ТатарМА 31.10.2024
	
КонецФункции


Функция СоздатьЗаявкуcreateApplication(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	НомерТелефона = Массив.phone;
	НомерТелефона = ПолучитьНормализованныйНомер(НомерТелефона);

	КодМенеджера = Массив.manager;
	ИмяКлиента 	 = Массив.client_name;
	Попытка
		НоваяЗаявка = Документы.ЗаказКлиента.СоздатьДокумент();
		НоваяЗаявка.Дата = ТекущаяДатаСеанса();
		НоваяЗаявка.НомерТелефона = НомерТелефона;
		НоваяЗаявка.WTPanel = Справочники.СтатусыWT.НайтиПоКоду("000000017"); //Ожидание
		НоваяЗаявка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Ожидание;
		НоваяЗаявка.ПодстатусОбработки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
		НоваяЗаявка.Ответственный = Справочники.Сотрудники.НайтиПоКоду(КодМенеджера).Пользователь;
		НоваяЗаявка.КлиентНаименование = ИмяКлиента;
		НоваяЗаявка.КлиентССайта = Справочники.КлиентыССайта.НайтиПоКоду("000000001");

		Клиент = ПолучитьКлиентаПоТелефону(НомерТелефона);
		Если Клиент <> Справочники.Клиенты.ПустаяСсылка() Тогда
			НоваяЗаявка.Клиент = Клиент;
		Иначе
			НовыйКлиент = Справочники.Клиенты.СоздатьЭлемент();
			НовыйКлиент.Телефон = НомерТелефона;
			НовыйКлиент.Наименование = ИмяКлиента;
			НовыйКлиент.Записать();
			НоваяЗаявка.Клиент = НовыйКлиент.Ссылка;
		КонецЕсли;
		СуммаДокумента = 0;
		МассивОшибок = Новый Массив;

		Для Каждого покупка Из Массив.products Цикл

			Если СтрНайти(Покупка, "_") > 0 Тогда
				//@skip-check query-in-loop
				ИнформацияОпартии = ПолучитьИнформациюОПартии(покупка);

				Если ИнформацияОпартии.Партия <> 0 Тогда
					СтрокаТоваров = НоваяЗаявка.Товары.Добавить();
					СтрокаТоваров.Количество = 1;
				//@skip-check wrong-type-expression
					СтрокаТоваров.Партия = ИнформацияОпартии.Партия;
				//@skip-check wrong-type-expression
					СтрокаТоваров.Склад  = ИнформацияОпартии.Склад;
					СтрокаТоваров.Цена   = ИнформацияОпартии.Цена;
				//@skip-check wrong-type-expression
					СтрокаТоваров.Номенклатура   = ИнформацияОпартии.Товар;
					СуммаДокумента = СуммаДокумента + ИнформацияОпартии.Цена;
				Иначе
					МассивОшибок.Добавить(покупка);
				КонецЕсли;
			Иначе
			//@skip-check query-in-loop
				ИнформацияОТоваре = ПолучитьИнформациюОТоваре(покупка);

				Если ИнформацияОТоваре.Товар <> 0 Тогда
					СтрокаТоваров = НоваяЗаявка.Товары.Добавить();
					СтрокаТоваров.Количество = 1;
				//@skip-check wrong-type-expression
					СтрокаТоваров.Цена   = ИнформацияОТоваре.Цена;
				//@skip-check wrong-type-expression
					СтрокаТоваров.Номенклатура   = ИнформацияОТоваре.Товар;
					СуммаДокумента = СуммаДокумента + ИнформацияОТоваре.Цена;
				Иначе

					МассивОшибок.Добавить(покупка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НоваяЗаявка.СуммаДокумента = СуммаДокумента;
		/// Комлев 15/08/24+++
		НоваяЗаявка.ФинансовыеСтатусы = Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.НеОплачено;
		НоваяЗаявка.СтатусыДействия = Перечисления.дт_СостоянияЗаказовКлиента.Ожидание;
		НоваяЗаявка.Состояние = перечисления.дт_СостоянияЗаказовКлиента.Ожидание;
		НоваяЗаявка.ЗаявкаССайта = Истина;
		НоваяЗаявка.Записать();
		
		/// Комлев 15/08/24---
		ИмяКлиентаПерем = ?(Клиент <> Справочники.Клиенты.ПустаяСсылка(), Клиент.Наименование, НовыйКлиент.Наименование);
		КодКлиентаПерем = ?(Клиент <> Справочники.Клиенты.ПустаяСсылка(), Клиент.Код, НовыйКлиент.Код);
		КоличествоМашин = ?(Клиент <> Справочники.Клиенты.ПустаяСсылка(), Число(Клиент.КоличествоАвтомобилей), 0);
		Город = ?(Клиент <> Справочники.Клиенты.ПустаяСсылка(), Клиент.Город, 0);
		СтруктураЗаявок = Новый Структура;
		СтруктураЗаявок.Вставить("id", Строка(НоваяЗаявка.Номер));
		СтруктураКлиента = Новый Структура;
		СтруктураКлиента.Вставить("name", Строка(ИмяКлиентаПерем));
		СтруктураКлиента.Вставить("id", КодКлиентаПерем);
		СтруктураКлиента.Вставить("phone", НомерТелефона);
		СтруктураКлиента.Вставить("city", Город);
		СтруктураКлиента.Вставить("count_cars", КоличествоМашин);
		
		СтруктураЗаявок.Вставить("client", СтруктураКлиента);

		СтруктураМенеджера = Новый Структура;

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный,
		|	СотрудникиКонтактнаяИнформация.Ссылка.Код КАК КодСотрудника
		|ИЗ
		|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
		|ГДЕ
		|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
		|	И СотрудникиКонтактнаяИнформация.Ссылка.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", НоваяЗаявка.Ответственный);
		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		ВыборкаДетальныеЗаписи.Следующий();
		СтруктураМенеджера.Вставить("name", Строка(НоваяЗаявка.Ответственный));
		СтруктураМенеджера.Вставить("id", Строка(ВыборкаДетальныеЗаписи.КодСотрудника));
		СтруктураМенеджера.Вставить("phone", Строка(ВыборкаДетальныеЗаписи.ТелефонСлужебный));
		СтруктураЗаявок.Вставить("manager", СтруктураМенеджера);
		СтруктураЗаявок.Вставить("summ", НоваяЗаявка.СуммаДокумента);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураЗаявок);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Исключение

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		Информация = ИнформацияОбОшибке();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);

	КонецПопытки;

	Возврат Ответ;

КонецФункции

Функция ПолучитьТоварыКарточкиproductscard(Запрос)
	ЗапросТовара = Новый Запрос;
	Текстзапроса = "ВЫБРАТЬ первые 10000
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город,
				   |   РегистрНакопления1Остатки.машина.Год КАК машинаГод,
				   |	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
				   |	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
				   |	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
				   |	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
				   |	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	Справочник.Номенклатура КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |			ПО РегИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ПО ИндНомер.Ссылка = РегИндНомер.Индкод.Владелец
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |И РегИндНомер.АвитоЧастник
				   |	И ИндНомер.Код = &Наименование
				   |%2
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.машинаГод КАК машинаГод,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
				   |	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
				   |	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
				   |	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
				   |	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";

	Если Число(Запрос.ПараметрыURL["filter_stock"]) = 1 Тогда
		Склад = Справочники.Склады.НайтиПоКоду("000000002");
	ИначеЕсли Число(Запрос.ПараметрыURL["filter_stock"]) = 2 Тогда
		Склад = Справочники.Склады.НайтиПоКоду("000000005");
	ИначеЕсли Число(Запрос.ПараметрыURL["filter_stock"]) = 3 Тогда
		Склад = Справочники.Склады.НайтиПоКоду("000000008");
	КонецЕсли;
	 /// Комлев 7/08/24 
	ТекстФильтраПоСкладам =  "И РегистрНакопления1Остатки.Склад = &Склад";
	  /// Комлев 7/08/24 ---		
	ИндКод = Строка(Запрос.ПараметрыURL["id"]);
	Если Число(Запрос.ПараметрыURL["filter_stock"]) < 4 И Число(Запрос.ПараметрыURL["filter_stock"]) > 0 Тогда
		запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(10000, "ЧГ="), ТекстФильтраПоСкладам); // Добавить отбор по складу
		запросТовара.УстановитьПараметр("Склад", Склад);
	Иначе
		запросТовара.Текст =   СтрШаблон(Текстзапроса, Формат(10000, "ЧГ="), ""); // Убрать отбор по складу
	КонецЕсли;

	запросТовара.УстановитьПараметр("наименование", ИндКод);
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
		
// Фильтр по складам
/// Комлев 7/8/24 +++
	Если Число(Запрос.ПараметрыURL["filter_stock"]) < 4 И Число(Запрос.ПараметрыURL["filter_stock"]) > 0 Тогда
		запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
			Запрос.ПараметрыURL["count"], 10000), "ЧГ="), ТекстФильтраПоСкладам); // Добавить отбор по складу
		запросТовара.УстановитьПараметр("Склад", Склад);
	Иначе
		запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
			Запрос.ПараметрыURL["count"], 10000), "ЧГ="), ""); // Убрать отбор по складу
	КонецЕсли;
	
	/// Комлев 7/8/24 ---
	запросТовара.УстановитьПараметр("наименование", ИндКод);

	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	//Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
	ТЗ_Товары = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ_Товары.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ_Товары.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = ТЗ_Товары.ВыгрузитьКолонку("индкод");
	Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
	Итер = 0;

	Для Каждого стр Из ТЗ_Товары Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		Итер = итер + 1;
		ТЗ_Товары.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		//СтруктураТоваров.Вставить("search", Строка(стр.СтрокаПоиска));
		//СтруктураТоваров.Вставить("search1", Строка(стр.СтрокаПоиска1));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", стр.Цена);
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("code", Строка(стр.Код));
		СтруктураТоваров.Вставить("type", "PRODUCT");
		//СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
		//СтруктураТоваров.Вставить("stack", стр.Комплектация);

		СтруктураТоваров.Вставить("city", Строка(стр.Город));

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		СтруктураТоваров.Вставить("yearcar", число(стр.машинаГод));
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);
//	Если Лев(Запрос.ПараметрыURL["id"],1) = "П" Тогда
//		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["id"])))); 
//		//	Иначе
//		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
//	КонецЕсли;
//	

	СтруктураОтвета = Новый Структура;
	//СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("pages", Итог);
	СтруктураОтвета.Вставить("count", Выборкаобщ);
	СтруктураОтвета.Вставить("products", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции



Функция ПолучитьКорзинуМенеджераGetShelfManager(Запрос)
	/// Комлев АА 19/11/24 +++
	Попытка
		КорзинаМенеджера = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL.Получить("id")).Тележка;
		Менеджер = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL.Получить("id"));
		Страница = Число(Запрос.ПараметрыURL.Получить("page"));
		Количество = Число(Запрос.ПараметрыURL.Получить("count"));
		Если КорзинаМенеджера.Пустая() Тогда
			Ответ = Новый HTTPСервисОтвет(500);
			СтрокаОшибки = "У сотрудника нет Корзины";
			Ответ.УстановитьТелоИзСтроки(СтрокаОшибки);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			Возврат Ответ;
		КонецЕсли;

		ЗапросТоваров = Новый Запрос;
		ЗапросТоваров.Текст = СтрШаблон(текстДляТоваровНаПолке(), Формат(10000, "ЧГ="));
		ЗапросТоваров.УстановитьПараметр("Стеллаж", КорзинаМенеджера);
		ЗапросТоваров.УстановитьПараметр("НачинаяСЗаписи", 0);
		Выборкаобщ = ЗапросТоваров.Выполнить().Выбрать().Количество();

		Если Число(((Количество) * (Страница))) > 0 И Число(
		Страница) > 0 Тогда
			ЗапросТоваров.Текст =  СтрШаблон(текстДляТоваровНаПолке(), Формат(Число(Количество), "ЧГ="));
			ЗапросТоваров.УстановитьПараметр("НачинаяСЗаписи", Число(((Количество) * ((Страница) - 1) + 1)));
		Иначе
			ЗапросТоваров.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;

		ТЗ_Товары = ЗапросТоваров.Выполнить().Выгрузить();

		ТЗ_Товары.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
		ТЗ_Товары.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;

		ИндКоды = ТЗ_Товары.ВыгрузитьКолонку("индкод");
		Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
		Итер = 0;

		Для Каждого стр Из ТЗ_Товары Цикл
			НайденныеФотки = Новый Массив;
			НайденныеФотки = Фотки[итер].urls;
			МассивФото = Новый массив;
			Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

				стр.колфото = 1;

				Для Каждого Фотка Из НайденныеФотки Цикл
					Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
					Текст = Фотка;
					МассивФото.Добавить(Текст);
				КонецЦикла;
			КонецЕсли;
			Итер = итер + 1;
			ТЗ_Товары.Сортировать("колФото Убыв");

			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
			СтруктураТоваров.Вставить("id", Строка(стр.индкод));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("price", стр.Цена);
			СтруктураТоваров.Вставить("photos", МассивФото);
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;

		Итог = Выборкаобщ / ?(Число(Количество) = 0, Выборкаобщ, Число(Количество));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));
		СтруктураОтвета = Новый Структура;
		СтруктураМененджера = Новый Структура;
		СтруктураМененджера.Вставить("name", Строка(Менеджер));
		СтруктураМененджера.Вставить("id", Строка(Менеджер.Код));
		СтруктураОтвета.Вставить("manager", СтруктураМененджера);
		СтруктураОтвета.Вставить("pages", Итог);
		СтруктураОтвета.Вставить("count", Выборкаобщ);
		СтруктураОтвета.Вставить("products", МассивТоваров);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		СтрокаОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, "");
		Ответ.УстановитьТелоИзСтроки("" + СтрокаОшибки);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
	/// Комлев АА 19/11/24 ---
КонецФункции


Функция ПолучитьТоварGetProduct(Запрос)
	ЗапросТовара = Новый Запрос;
	ЗапросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));
	ЗапросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	ЗапросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	ТЗ_Товары = ЗапросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ_Товары.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ_Товары.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = ТЗ_Товары.ВыгрузитьКолонку("индкод");
	Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
	Итер = 0;
	
	///+ГомзМА 21.02.2024 
	Фотограф = ПолучитьФотографа(Запрос.ПараметрыURL["id"]);
	ФИОФотографа = "";
	ТабНомФотографа = "";
	Если Фотограф <> Неопределено Тогда
		//ФИОФотографа = Справочники.Сотрудники.НайтиПоКоду(Фотограф.tabnum);
		ТабНомФотографа = Фотограф.tabnum;
	КонецЕсли;
	
	///-ГомзМА 21.02.2024
	Если ТЗ_Товары.Количество() > 0 Тогда
		Для Каждого стр Из ТЗ_Товары Цикл
			НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
			НайденныеФотки = Фотки[итер].urls;
			МассивФото = Новый массив;
			Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

				стр.колфото = 1;

				Для Каждого Фотка Из НайденныеФотки Цикл
					Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
					Текст = Фотка;
					МассивФото.Добавить(Текст);
				КонецЦикла;
			КонецЕсли;
			итер = итер + 1;
			ТЗ_Товары.Сортировать("колФото Убыв");
		
		///+ГомзМА 20.05.2024
			РекомендованноеМестоХранения = Новый Массив;

			ЗапросРекомендованноеМесто = Новый Запрос;
			ЗапросРекомендованноеМесто.Текст = текстРекомендуемоеМестоХранения();

			ЗапросРекомендованноеМесто.УстановитьПараметр("Наименование", Строка(стр.код));
		//@skip-check query-in-loop
			РезультатЗапросаРекомендованноеМесто = ЗапросРекомендованноеМесто.Выполнить().Выбрать();

			РезультатЗапросаРекомендованноеМесто.Следующий();

			СтруктураРекомендованноеМесто = Новый Структура;
			СтруктураРекомендованноеМесто.Вставить("sklad", Строка(РезультатЗапросаРекомендованноеМесто.Склад));
			СтруктураРекомендованноеМесто.Вставить("shelf", Строка(РезультатЗапросаРекомендованноеМесто.Адрес));
			СтруктураРекомендованноеМесто.Вставить("poddon", Строка(РезультатЗапросаРекомендованноеМесто.Поддон));
			СтруктураРекомендованноеМесто.Вставить("count", Строка(РезультатЗапросаРекомендованноеМесто.Количество));

			РекомендованноеМестоХранения.Добавить(СтруктураРекомендованноеМесто);
			///-ГомзМА 20.05.2024
			СтруктураТоваров = Новый Структура;	
			//++МазинЕС 23-07-2024
			//@skip-check query-in-loop
			Структура = ПолучитьДанныеОТоваре(стр.индкод);
			СтруктураТоваров.Вставить("prodan", Структура.Выдан);
			СтруктураТоваров.Вставить("vidan", Структура.Продан);
			//СтруктураТоваров.Вставить("IDzaivka", Структура.ЗаказКлиентаНомер); 
			//--МазинЕС 23-07-2024
						//++МазинЕС 05-08-2024 
			СтруктураТоваров.Вставить(" yearcar", Число(стр.машинаГод));
			//--МазинЕС 05-08-2024
			СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("price", стр.Цена);
			СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
			СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
			СтруктураТоваров.Вставить("uchetchik", Строка(стр.КодУчетчика));
			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
			СтруктураТоваров.Вставить("state", Строка(стр.Состояние));
			//СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
			
			СтруктураТоваров.Вставить("availability", стр.ФактНаличия);
		
		///+ГомзМА 21.02.2024
			СтруктураТоваров.Вставить("tabnum_photographer", Строка(ТабНомФотографа));
			//СтруктураТоваров.Вставить("name_photographer", Строка(ФИОФотографа));
		///-ГомзМА 21.02.2024

			СтрукрураРазмеры  = Новый Структура;
			СтрукрураРазмеры.Вставить("chek_size", стр.Размеры);
			СтрукрураРазмеры.Вставить("length", стр.длин);
			СтрукрураРазмеры.Вставить("width", стр.шир);
			СтрукрураРазмеры.Вставить("height", стр.выс);
			СтрукрураРазмеры.Вставить("weight", стр.Вес);
			СтруктураТоваров.Вставить("size", СтрукрураРазмеры);
			
			СтруктураТоваров.Вставить("code", Строка(стр.код));
			СтруктураТоваров.Вставить("id", Строка(стр.индкод));
			СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		///+ГомзМА 20.05.2024
			//СтруктураТоваров.Вставить("recommended_shelf", СтруктураРекомендованноеМесто);
		///-ГомзМА 20.05.2024

			СтруктураТоваров.Вставить("photos", МассивФото);
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		//Информация = ИнформацияОбОшибке();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки(500, "Товар не найден",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПоискЗаявокSearchApplications(Запрос)
	/// Комлев АА 20/11/24 +++
	Попытка
		СтрокаПоиска = СтрЗаменить(Строка(Запрос.ПараметрыURL.Получить("search")), "+", "");
		Количество = Запрос.ПараметрыURL.Получить("count");
		Страница = Запрос.ПараметрыURL.Получить("page");
		Запрос = Новый Запрос;
		Запрос.Текст = СтрШаблон(ПолучитьТекстПоискаЗаявок(), Формат(10000, "ЧГ="));

		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("НачинаяСЗаписи", 0);
		ВыборкаОбщ = Запрос.Выполнить().Выбрать().Количество();

		Если Число(((Количество) * (Страница))) > 0 И Число(
		Страница) > 0 Тогда
			Запрос.Текст =  СтрШаблон(ПолучитьТекстПоискаЗаявок(), Формат(Число(Количество), "ЧГ="));
			Запрос.УстановитьПараметр("НачинаяСЗаписи", Число(((Количество) * ((Страница) - 1) + 1)));
		Иначе
			Запрос.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;

		Итог = Выборкаобщ / ?(Число(Количество) = 0, Выборкаобщ, Число(Количество));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("count", ВыборкаОбщ);
		СтруктураОтвета.Вставить("page", Итог);
		МассивЗаявок = Новый Массив;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураЗаявки = Новый Структура;
			СтруктураЗаявки.Вставить("id", Строка(Выборка.НомерЗаявки));
			СтруктураЗаявки.Вставить("name", Строка(Выборка.НаименованиеКлиента) );
			СтруктураЗаявки.Вставить("phone", Строка(Выборка.НомерТелефона));
			МассивЗаявок.Добавить(СтруктураЗаявки);
		КонецЦикла;
		СтруктураОтвета.Вставить("applications", МассивЗаявок);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		СтрокаОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, "");
		Ответ.УстановитьТелоИзСтроки("" + СтрокаОшибки);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
	/// Комлев АА 20/11/24 ---
КонецФункции



//Функция ПолучитьДанныеОКлиентеGet_info_client(Запрос)
//	/// Комлев 28/11/24 +++
//
//	Клиент = Строка(Запрос.ПараметрыURL["id"]);
//
//	ЗапросКлиента = Новый Запрос;
//	ЗапросКлиента.Текст =
//	"ВЫБРАТЬ
//	|	Клиент.Наименование КАК Наименование,
//	|	Клиент.ФИО КАК КлиентФИО,
//	|	Клиент.ПолноеНаименование КАК КлиентПолноеНаименование,
//	|	Клиент.ФИОдост КАК КлиентФИОПолное,
//	|	Клиент.ТипКлиента.Ссылка КАК ТипКлиента,
//	|	Клиент.ТипКлиента.Порядок КАК ТипКлиентаПорядок,
//	|	Клиент.Телефон КАК КлиентТелефон,
//	|	Клиент.Страна2 КАК КлиентСтрана,
//	|	Клиент.Страна2.Код КАК КлиентСтранаКод,
//	|	Клиент.Область КАК КлиентОбласть,
//	|	Клиент.Область.Код КАК КлиентОбластьКод,
//	|	Клиент.Город2 КАК КлиентГород,
//	|	Клиент.Город2.Код КАК КлиентГородКод,
//	|	Клиент.Паспорт КАК КлиентПаспорт,
//	|	Клиент.ПаспортВыданКем КАК КлиентПаспортВыданКем,
//	|	Клиент.ПаспортВыданДата КАК КлиентПаспортВыданДата,
//	|	Клиент.ФИОдост КАК КлиентФИОдост,
//	|	Клиент.ИНН КАК КлиентИНН,
//	|	Клиент.Email КАК КлиентEmail,
//	|	Клиент.КПП КАК КлиентКПП,
//	|	Клиент.ОГРН КАК КлиентОГРН,
//	|	Клиент.КодПоОКПО КАК КлиентОКПО,
//	|	Клиент.Код,
//	|	Клиент.КоличествоАвтомобилей
//	|ИЗ
//	|	Справочник.Клиенты КАК Клиент
//	|ГДЕ
//	|	Клиент.Код = &Код";
//
//	ЗапросКлиента.УстановитьПараметр("Код", Клиент);
//
//	РезультатЗапроса = ЗапросКлиента.Выполнить();
//
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		ДанныеОКлиенте = Новый Структура;
//		ДанныеОКлиенте.Вставить("name_client", Строка(Выборка.Наименование));
//		ДанныеОКлиенте.Вставить("id", Строка(Выборка.Код));
//		ТипКлиента = Новый Структура;
//		Если Строка(Выборка.ТипКлиента) <> "" Тогда
//			ТипКлиента.Вставить("name", Строка(Выборка.ТипКлиента));
//			ТипКлиента.Вставить("id", Строка(Число(Выборка.ТипКлиентаПорядок) + 1));
//		Иначе
//			ТипКлиента.Вставить("name", "");
//			ТипКлиента.Вставить("id", "");
//		КонецЕсли;
//
//		ДанныеОКлиенте.Вставить("type_client", ТипКлиента); 
//		Наименование = "";
//		Если Выборка.ТипКлиента = Перечисления.дт_ТипыКлиентов.ЮрЛицо Тогда
//			Наименование = "supervisor";
//		Иначе
//			Наименование = "full_name";
//		КонецЕсли;
//		ДанныеОКлиенте.Вставить(Наименование, Строка(Выборка.КлиентФИО));
//		ДанныеОКлиенте.Вставить("organization_name", Строка(Выборка.КлиентПолноеНаименование));
//		ДанныеОКлиенте.Вставить("phone", Строка(Выборка.КлиентТелефон));
//
//		ДанныеПаспорта = Новый Структура;
//		ДанныеПаспорта.Вставить("passport_number", Строка(Выборка.КлиентПаспорт));
//		ДанныеПаспорта.Вставить("passport_issued", Строка(Выборка.КлиентПаспортВыданКем));
//		ДанныеПаспорта.Вставить("passport_date", ?(Строка(Выборка.КлиентПаспортВыданДата) = "01.01.0001 0:00:00", "",
//			Строка(
//			Выборка.КлиентПаспортВыданДата)));
//		ДанныеОКлиенте.Вставить("passport", ДанныеПаспорта);
//		Страна = Новый Структура;
//		Страна.Вставить("name", Строка(Выборка.КлиентСтрана));
//		Страна.Вставить("id", Строка(Выборка.КлиентСтранаКод));
//		ДанныеОКлиенте.Вставить("country", Страна);
//		Область = Новый Структура;
//		Область.Вставить("name", Строка(Выборка.КлиентОбласть));
//		Область.Вставить("id", Строка(Выборка.КлиентОбластьКод));
//		ДанныеОКлиенте.Вставить("region", Область);
//		Город = Новый Структура;
//		Город.Вставить("name", Строка(Выборка.КлиентГород));
//		Город.Вставить("id", Строка(Выборка.КлиентГородКод));
//		ДанныеОКлиенте.Вставить("city", Город);
//		ДанныеОКлиенте.Вставить("inn", Строка(Выборка.КлиентИНН));
//		ДанныеОКлиенте.Вставить("email", Строка(Выборка.КлиентEmail));
//
//		Реквизиты = Новый Структура;
//		Реквизиты.Вставить("inn", Строка(Выборка.КлиентИНН));
//		Реквизиты.Вставить("kpp", Строка(Выборка.КлиентКПП));
//		Реквизиты.Вставить("ogrn", Строка(Выборка.КлиентОГРН));
//		Реквизиты.Вставить("okpo", Строка(Выборка.КлиентОКПО));
//		ДанныеОКлиенте.Вставить("pay_details", Реквизиты);
//
//	КонецЦикла;
//
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();
//	ЗаписатьJSON(ЗаписьJSON, ДанныеОКлиенте);
//	СтруктураОтвета = ЗаписьJSON.Закрыть();
//	Ответ = Новый HTTPСервисОтвет(200);
//	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//	Ответ.УстановитьТелоИзСтроки(СтруктураОтвета);
//	Возврат Ответ;
//	
//	/// Комлев 28/11/24 ---
//КонецФункции

Функция РедактироватьКлиентаEditClient(Запрос)
	/// Комлев 28/11/24 +++
	Клиент = Строка(Запрос.ПараметрыURL["id"]);
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);
	Массив  = ПрочитатьJSON(ЧтениеJSON);

	НаимнованиеКарточкиКлиента = Строка(Массив.name_client_card);
//	ТипКлиента = Число(Массив.type_client);
//	КлиентФИО = Строка(Массив.full_name);
//	НазваниеОрганизации = Строка(Массив.organization_name);
	КлиентТелефон = Строка(Массив.phone);
	Страна = Строка(Массив.country);
	Область = Строка(Массив.region);
	Город = Строка(Массив.city);
	КоличествоМашин = Строка(Массив.count_car);
//	ИНН = Строка(Массив.inn);
//	ЭлекПочта = Строка(Массив.email);
//	СерияНомер = Строка(Массив.passport_number);
//	ДатаВыдачи = Строка(Массив.passport_date);
//	КемВыдан = Строка(Массив.passport_issued);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Клиенты.Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Код = &Код";

	Запрос.УстановитьПараметр("Код", Клиент);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	КлиентОбъект = Выборка.Ссылка.ПолучитьОбъект();

	КлиентОбъект.Наименование = НаимнованиеКарточкиКлиента;
//	Если ТипКлиента = 1 Тогда
//		КлиентОбъект.ТипКлиента  = Перечисления.дт_ТипыКлиентов.ФизЛицо;
//	ИначеЕсли ТипКлиента = 2 Тогда
//		КлиентОбъект.ТипКлиента  = Перечисления.дт_ТипыКлиентов.ЮрЛицо;
//	ИначеЕсли ТипКлиента = 3 Тогда
//		КлиентОбъект.ТипКлиента  = Перечисления.дт_ТипыКлиентов.ИП;
//	КонецЕсли;
//	КлиентОбъект.ФИО = КлиентФИО;
//	КлиентОбъект.ПолноеНаименование = НазваниеОрганизации;

	КлиентОбъект.Телефон = КлиентТелефон;
	КлиентОбъект.Страна2 = Справочники.Страна.НайтиПоКоду(Страна);
	КлиентОбъект.Область  = Справочники.Область.НайтиПоКоду(Область);
	КлиентОбъект.Город2 = Справочники.Город.НайтиПоКоду(Город);
	КлиентОбъект.КоличествоАвтомобилей = КоличествоМашин;

//	КлиентОбъект.ИНН = ИНН;
//	ДанныеКлиентаПоИНН = Новый Структура;
//	Попытка
//		ДанныеКлиентаПоИНН = ПолучитьДанныеКлиентаПоИНН(ИНН);
//	Исключение
//		КлиентОбъект.ИНН = ИНН;
//	КонецПопытки;
//	Если ДанныеКлиентаПоИНН.Количество() <> 0 Тогда
//		КлиентОбъект.ИНН 					= ДанныеКлиентаПоИНН.ИНН;
//		КлиентОбъект.КПП					= ДанныеКлиентаПоИНН.КПП;
//		КлиентОбъект.ОГРН					= ДанныеКлиентаПоИНН.ОГРН;
//		КлиентОбъект.ПолноеНаименование	= ДанныеКлиентаПоИНН.ПолноеНаименование;
//		КлиентОбъект.ФИО					= ДанныеКлиентаПоИНН.Руководитель;
//		КлиентОбъект.ЮридическийАдрес 	= ДанныеКлиентаПоИНН.ЮрАдресс;
//	КонецЕсли;
//	КлиентОбъект.Email = ЭлекПочта;
//	КлиентОбъект.Паспорт = СерияНомер;
//	КлиентОбъект.ПаспортВыданКем = КемВыдан;
//	КлиентОбъект.ПаспортВыданДата = ДатаВыдачи;

	КлиентОбъект.Записать();
	
	// Запрос после изменения данных клиента
	ЗапросИзмененногоКлиента = Новый Запрос;
	ЗапросИзмененногоКлиента.Текст =
	"ВЫБРАТЬ
	|	Клиенты.Наименование,
	|	Клиенты.Телефон,
	|	Клиенты.Город2,
	|	Клиенты.КоличествоАвтомобилей,
	|	Клиенты.Страна2,
	|	Клиенты.Область,
	|	Клиенты.Город2.Код КАК КодГорода,
	|	Клиенты.Страна2.Код КАК КодСтраны,
	|	Клиенты.Область.Код КАК КодОбласти
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Код = &Код";

	ЗапросИзмененногоКлиента.УстановитьПараметр("Код", Клиент);

	РезультатЗапроса = ЗапросИзмененногоКлиента.Выполнить();

	ВыборкаИзмКлиент = РезультатЗапроса.Выбрать();

	ВыборкаИзмКлиент.Следующий();
	СтуктураКлиента = Новый Структура;
	СтуктураКлиента.Вставить("name_client_card", Строка(ВыборкаИзмКлиент.Наименование));
	СтуктураКлиента.Вставить("phone", Строка(ВыборкаИзмКлиент.Телефон));
	
	СтруктураГород = Новый Структура("name, id", Строка(ВыборкаИзмКлиент.Город2), Строка(ВыборкаИзмКлиент.КодГорода) );
	СтуктураКлиента.Вставить("city", СтруктураГород);
	
	СтруктураОбласть = Новый Структура("name, id", Строка(ВыборкаИзмКлиент.Область), Строка(ВыборкаИзмКлиент.КодОбласти) );
	СтуктураКлиента.Вставить("region", СтруктураОбласть);
	
	СтруктураСтрана = Новый Структура("name, id", Строка(ВыборкаИзмКлиент.Страна2), Строка(ВыборкаИзмКлиент.КодСтраны) );
	СтуктураКлиента.Вставить("country", СтруктураСтрана);
	СтуктураКлиента.Вставить("count_car", Число(ВыборкаИзмКлиент.КоличествоАвтомобилей));

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтуктураКлиента);
	СтруктураОтвета = ЗаписьJSON.Закрыть();
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтруктураОтвета);
	Возврат Ответ;
	/// Комлев 28/11/24 ---
КонецФункции

Функция ПолучитьСтраныGetCountries(Запрос)
	/// Комлев 28/11/24 +++
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Страна.Наименование КАК Имя,
	|	Страна.Код КАК Код
	|ИЗ
	|	Справочник.Страна КАК Страна
	|ГДЕ
	|	НЕ Страна.ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	МассивСтран = Новый Массив;

	Пока Выборка.Следующий() Цикл
		Страна = Новый Структура;
		Страна.Вставить("name", Строка(Выборка.Имя));
		Страна.Вставить("id", Строка(Выборка.Код));
		МассивСтран.Добавить(Страна);
	КонецЦикла;
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивСтран);
	СтруктураОтвета = ЗаписьJSON.Закрыть();
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтруктураОтвета);
	Возврат Ответ;
	/// Комлев 28/11/24 ---
КонецФункции

Функция ПолучитьРегионыGetRegions(Запрос)
	/// Комлев 20/08/24 +++
	Попытка
		Страна = Запрос.ПараметрыURL["country"];
		СтрокаПоиска = " И " + Символы.ПС + "	 Область.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""";

		ЗапросРегионов = Новый Запрос;

		Текст = "ВЫБРАТЬ ПЕРВЫЕ 100000
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	Область.Код,
		|	Область.Наименование КАК Наименование,
		|	Область.Владелец.Ссылка КАК Страна
		|ПОМЕСТИТЬ ВТ_СписокОбластей
		|ИЗ
		|	Справочник.Область КАК Область
		|ГДЕ
		|	Область.Владелец.Код = &Страна
		|%2
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ %1
		|	ВТ_СписокОбластей.Наименование,
		|	ВТ_СписокОбластей.Код,
		|	ВТ_СписокОбластей.НомерЗаписи
		|ИЗ
		|	ВТ_СписокОбластей КАК ВТ_СписокОбластей
		|ГДЕ
		|	ВТ_СписокОбластей.НомерЗаписи >= &НачинаяСЗаписи";
		
		
		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросРегионов.Текст =  СтрШаблон(Текст, Формат(100000, "ЧГ="), " ");
		Иначе
			ЗапросРегионов.Текст =  СтрШаблон(Текст, Формат(100000, "ЧГ="), СтрокаПоиска);
			ЗапросРегионов.УстановитьПараметр("Наименование", "%"
				+ ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;

		ЗапросРегионов.УстановитьПараметр("Страна", Страна);
		ЗапросРегионов.УстановитьПараметр("НачинаяСЗаписи", 0);
		
		ОбщееКолво = ЗапросРегионов.Выполнить().Выбрать().Количество();

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросРегионов.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 100000), "ЧГ="), " ");
		Иначе
			ЗапросРегионов.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 100000), "ЧГ="), СтрокаПоиска);
			ЗапросРегионов.УстановитьПараметр("Наименование", "%"
				+ ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;

		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросРегионов.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));
		Иначе
			ЗапросРегионов.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;
		СписокПоиска = ЗапросРегионов.Выполнить().Выгрузить();

		МассивОбластей = Новый Массив;
		Для Каждого Результат Из СписокПоиска Цикл
			СтруктураОбласти = Новый Структура;
			СтруктураОбласти.Вставить("name", Строка(Результат.Наименование));
			СтруктураОбласти.Вставить("id", Результат.Код);
			МассивОбластей.Добавить(СтруктураОбласти);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);
		СтруктураИнфо.Вставить("regions", МассивОбластей);

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		//Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		//Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		//Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, "Не удалось получить список регионов!");
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;
	/// Комлев 20/08/24 ---
КонецФункции

Функция ПолучитьГородаGetCities(Запрос)
	Попытка
		Регион = Запрос.ПараметрыURL["region"];
		СтрокаПоиска = " И " + Символы.ПС + "	 Город.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""";

		ЗапросГородов = Новый Запрос;

		Текст = "ВЫБРАТЬ ПЕРВЫЕ 100000
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	Город.Код,
		|	Город.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_СписокГородов
		|ИЗ
		|	Справочник.Город КАК Город
		|ГДЕ
		|	Город.Владелец.Код = &Регион
		|%2
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ %1
		|	ВТ_СписокГородов.Наименование,
		|	ВТ_СписокГородов.Код,
		|	ВТ_СписокГородов.НомерЗаписи
		|ИЗ
		|	ВТ_СписокГородов КАК ВТ_СписокГородов
		|ГДЕ
		|	ВТ_СписокГородов.НомерЗаписи >= &НачинаяСЗаписи";

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросГородов.Текст =  СтрШаблон(Текст, Формат(100000, "ЧГ="), " ");
		Иначе
			ЗапросГородов.Текст =  СтрШаблон(Текст, Формат(100000, "ЧГ="), СтрокаПоиска);
			ЗапросГородов.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;
		
		ЗапросГородов.УстановитьПараметр("Регион", Регион);
		ЗапросГородов.УстановитьПараметр("НачинаяСЗаписи", 0);

		ОбщееКолво = ЗапросГородов.Выполнить().Выбрать().Количество();

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросГородов.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 100000), "ЧГ="), " ");
		Иначе
			ЗапросГородов.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 100000), "ЧГ="), СтрокаПоиска);
			ЗапросГородов.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;

		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросГородов.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));
		Иначе
			ЗапросГородов.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;
		СписокПоиска = ЗапросГородов.Выполнить().Выгрузить();

		МассивГородов = Новый Массив;
		Для Каждого Результат Из СписокПоиска Цикл
			СтруктураГорода = Новый Структура;
			СтруктураГорода.Вставить("name", Строка(Результат.Наименование));
			СтруктураГорода.Вставить("id", Результат.Код);
			МассивГородов.Добавить(СтруктураГорода);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);
		СтруктураИнфо.Вставить("cities", МассивГородов);

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		//Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		//Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		//Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, "Не удалось получить список городов!");
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;
	/// Комлев 20/08/24 ---
КонецФункции

Функция ПолучитьИнформациюОЗаявкеgetinfoapp(Запрос)
	
	///+ТатарМА 02.12.2024
	НомерЗаявки = Запрос.ПараметрыURL["id"];
	
	Попытка
		ЗапросЗаявки = Новый Запрос;
		ЗапросЗаявки.Текст = "ВЫБРАТЬ
		|	ДокЗаказКлиента.Номер КАК Номер,
		|	ДокЗаказКлиента.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА ДокЗаказКлиента.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
		|			ТОГДА ДокЗаказКлиента.Клиент
		|		ИНАЧЕ ДокЗаказКлиента.КлиентНаименование
		|	КОНЕЦ КАК Клиент,
		|	ВЫБОР
		|		КОГДА ДокЗаказКлиента.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
		|			ТОГДА ДокЗаказКлиента.Клиент.Код
		|		ИНАЧЕ ""Не авторизован""
		|	КОНЕЦ КАК КлиентКод,
		|	ДокЗаказКлиента.Состояние КАК Состояние,
		|	ДокЗаказКлиента.Ответственный КАК Ответственный,
		|	ДокЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
		|	ДокЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
		|	ДокЗаказКлиента.Ссылка КАК Ссылка,
		|	ДокЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
		|	ДокЗаказКлиента.Комментарий КАК Комментарий,
		|	ДокЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
		|	ДокЗаказКлиента.НомерТелефона КАК Телефон,
		|	ПорядокЗаявок.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ДокЗаказКлиента.Клиент.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
		|	Сотрудники.Код КАК КодСотрудника,
		|	ДокЗаказКлиента.Клиент.Город2 КАК Город,
		|	ДокЗаказКлиента.Клиент.Город2.Код КАК КодГорода,
		|	ДокЗаказКлиента.Клиент.Страна2 КАК Страна,
		|	ДокЗаказКлиента.Клиент.Страна2.Код КАК КодСтраны,
		|	ДокЗаказКлиента.Клиент.Область КАК Область,
		|	ДокЗаказКлиента.Клиент.Область.Код КАК КодОбласти,
		|	ЕСТЬNULL(ДокПродажаЗапчастей.Номер, """") КАК НомерПродажи
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДокЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЗаявок КАК ПорядокЗаявок
		|		ПО ДокЗаказКлиента.Ссылка = ПорядокЗаявок.Заявка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ДокЗаказКлиента.Ответственный = Сотрудники.Пользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПродажаЗапчастей КАК ДокПродажаЗапчастей
		|		ПО ДокПродажаЗапчастей.ЗаказКлиента = ДокЗаказКлиента.Ссылка
		|ГДЕ
		|	ДокЗаказКлиента.Номер = &Номер";
						
		ЗапросЗаявки.УстановитьПараметр("Номер", НомерЗаявки);
		
		Выборка = ЗапросЗаявки.Выполнить().Выгрузить();
		
		Если Выборка.Количество() > 0 Тогда		
				
		Для Каждого Результат Из Выборка Цикл

			СтруктураЗаявки = Новый Структура;
			СтруктураЗаявки.Вставить("id", Строка(Результат.Номер));

			СтруктураКлиента = Новый Структура;
			СтруктураКлиента.Вставить("name", 	Строка(Результат.Клиент));
			СтруктураКлиента.Вставить("id", 	Строка(Результат.КлиентКод));
			СтруктураКлиента.Вставить("phone", 	Строка(Результат.Телефон));
			
			// Комлев АА 25/12/24 ++++
			СтруктураГород = Новый Структура("name, id", Строка(Результат.Город), Строка(Результат.КодГорода));
			СтруктураКлиента.Вставить("city", СтруктураГород);
			
			СтруктураОбласть = Новый Структура("name, id", Строка(Результат.Область), Строка(Результат.КодОбласти));
			СтруктураКлиента.Вставить("region", СтруктураОбласть);
			
			СтруктураСтрана = Новый Структура("name, id", Строка(Результат.Страна), Строка(Результат.КодСтраны));
			СтруктураКлиента.Вставить("country", СтруктураСтрана);
			// Комлев АА 25/12/24 ----
			
			СтруктураКлиента.Вставить("count_car", Строка(Результат.КоличествоАвтомобилей));
			СтруктураЗаявки.Вставить("client", СтруктураКлиента);

			СтруктураМенеджера = Новый Структура;
			СтруктураМенеджера.Вставить("name", Строка(Результат.Ответственный));
			СтруктураМенеджера.Вставить("id", Строка(Результат.КодСотрудника));
			СтруктураЗаявки.Вставить("manager", СтруктураМенеджера);
	
			СтруктураЗаявки.Вставить("summ", Результат.СуммаДокумента);
			СтруктураЗаявки.Вставить("sale", Строка(Результат.НомерПродажи));

		КонецЦикла;

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("info", 	СтруктураЗаявки);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		
		Иначе

			
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, "Заявка не найдена!");
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
КонецЕсли;
		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
	///-ТатарМА 02.12.2024
	
КонецФункции

Функция ПолучитьСписокТоваровПоЗаявкеgetlistproductsbyapp(Запрос)
	НомерЗаявки = Запрос.ПараметрыURL["id"];
	Попытка
		ЗапросТоваров = Новый Запрос;
		Текст = "ВЫБРАТЬ ПЕРВЫЕ %1
				|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
				|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
				|	ЗаказКлиентаТовары.Партия КАК Партия,
				|	ЗаказКлиентаТовары.Количество КАК Количество,
				|	ЗаказКлиентаТовары.Цена КАК Цена,
				|	ЗаказКлиентаТовары.Сумма КАК Сумма,
				|	ЗаказКлиентаТовары.Склад КАК Склад,
				|	ЗаказКлиентаТовары.Номенклатура.Код КАК Код,
				|	ЗаказКлиентаТовары.НомерСтроки
				|ИЗ
				|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
				|ГДЕ
				|	ЗаказКлиентаТовары.Ссылка.Номер = &Номер
				|	И ЗаказКлиентаТовары.НомерСтроки >= &НачинаяСЗаписи
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЗаказКлиентаТовары.НомерСтроки";

		ЗапросТоваров.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="));

		ЗапросТоваров.УстановитьПараметр("Номер", НомерЗаявки);

		ЗапросТоваров.УстановитьПараметр("НачинаяСЗаписи", 0);
		ОбщееКолво = ЗапросТоваров.Выполнить().Выбрать().Количество();

		Если ОбщееКолво > 0 Тогда

			ЗапросТоваров.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="));

			ЗапросТоваров.УстановитьПараметр("Номер", НомерЗаявки);

			Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
	Запрос.ПараметрыURL["page"]) > 1 Тогда
				ЗапросТоваров.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
					* (Запрос.ПараметрыURL["page"] - 1) + 1)));

			Иначе
				ЗапросТоваров.УстановитьПараметр("НачинаяСЗаписи", 0);
			КонецЕсли;
			СписокПоиска = ЗапросТоваров.Выполнить().Выбрать();
			МассивКодов = Новый Массив;
			МассивТоваров = Новый Массив;
			Пока СписокПоиска.Следующий() Цикл

				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("name", Строка(СписокПоиска.Номенклатура));
				СтруктураТоваров.Вставить("id", Строка(СписокПоиска.Код));
				СтруктураТоваров.Вставить("count", СписокПоиска.Количество);
				СтруктураТоваров.Вставить("price", СписокПоиска.Цена);
				СтруктураТоваров.Вставить("summ", СписокПоиска.Сумма);
				СтруктураТоваров.Вставить("sklad", Строка(СписокПоиска.Склад));
				МассивКодов.Добавить(Строка(СписокПоиска.Код));
				МассивТоваров.Добавить(СтруктураТоваров);

			КонецЦикла;
			МассивФото = РаботаССайтомWT.ПолучениеФотокарточек(МассивКодов);
			Для Каждого ЭлементСФото Из МассивФото Цикл
				Для Индекс = 0 По МассивТоваров.ВГраница() Цикл
					Если ЭлементСФото.id = МассивТоваров[Индекс].id Тогда
						Если ЭлементСФото.images.main <> "" Тогда
							МассивТоваров[Индекс].Вставить("photo", ЭлементСФото.images.main);

						Иначе
							Если ЭлементСФото.images.common.Количество() <> 0 Тогда
								МассивТоваров[Индекс].Вставить("photo", ЭлементСФото.images.common[0]);

							Иначе
								МассивТоваров[Индекс].Вставить("photo", "");

							КонецЕсли;

						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(
				Запрос.ПараметрыURL["count"]));
			Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

			СтруктураИнфо= Новый Структура;
			СтруктураИнфо.Вставить("pages", Итог);
			СтруктураИнфо.Вставить("count", ОбщееКолво);
			СтруктураИнфо.Вставить("ids", МассивКодов);
			СтруктураИнфо.Вставить("products", МассивТоваров);

			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("info", СтруктураИнфо);

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			Информация = ИнформацияОбОшибке();
			ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Иначе
			МассивТоваров = Новый Массив;

			СтруктураИнфо= Новый Структура;
			СтруктураИнфо.Вставить("pages", 0);
			СтруктураИнфо.Вставить("count", 0);
			СтруктураИнфо.Вставить("products", МассивТоваров);
			СтруктураИнфо.Вставить("photo", "");
			МассивКодов = Новый Массив;

			СтруктураИнфо.Вставить("ids", МассивКодов);

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			Информация = ИнформацияОбОшибке();
			ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		КонецЕсли;
		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;

КонецФункции



Функция НаполнитьЗаявкуFillingApplication1(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Попытка
		Выборка = Запросзаявки.Выполнить().Выбрать();
		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);

		Массив  = ПрочитатьJSON(ЧтениеJSON);

		Покупка  = Массив.id;
		Автор 	= Массив.author;

		Выборка.Следующий();

		ОбъектЗаявки = Выборка.Ссылка.ПолучитьОбъект();

		Если СтрНайти(Строка(Покупка), "_") > 0 Тогда
			Партия = Справочники.ИндКод.НайтиПоНаименованию(Покупка);
			Номенклатура = Партия.Владелец;
			ИнфоПартия = ПолучитьИнформациюОПартии(Партия.Наименование);
			Новаястрока = ОбъектЗаявки.Товары.Добавить();
			Новаястрока.Партия = Партия;
			Новаястрока.Номенклатура = Номенклатура;
			Новаястрока.Количество = 1;
				//@skip-check reading-attribute-from-database
			Новаястрока.Цена = ?(ИнфоПартия.Цена <> 0, ИнфоПартия.Цена, Номенклатура.РекомендованаяЦена);
			Новаястрока.ЦенаСоСкидкойНаценкой = Новаястрока.Цена;
					//Новаястрока.Артикул = Номенклатура.Артикул;
			ТекстЛога =  " В заявке " + ОбъектЗаявки.Номер + " добавил партию  " + Новаястрока.Номенклатура + " "
				+ Новаястрока.Партия;
			Если Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь <> Справочники.Пользователи.ПустаяСсылка() Тогда
				ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
			КонецЕсли;
			ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
				//Ответ.УстановитьТелоИзСтроки("Успех. Строка С Партией добавлена");
		Иначе
			Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Покупка);
			ИнфоНоменклатура = ПолучитьИнформациюОТоваре(Покупка);

			Новаястрока = ОбъектЗаявки.Товары.Добавить();
			Новаястрока.Номенклатура = ИнфоНоменклатура.Товар;
			Новаястрока.Количество = 1;
			Новаястрока.Цена = ИнфоНоменклатура.Цена;
			Новаястрока.ЦенаСоСкидкойНаценкой = Новаястрока.Цена;
			ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил Товар " + Новаястрока.Номенклатура;
			Если Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь <> Справочники.Пользователи.ПустаяСсылка() Тогда
				ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
			КонецЕсли;
			ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			//Ответ.УстановитьТелоИзСтроки("Успех. Номенклатура установлена " + строка(Новаястрока.Номенклатура));
		КонецЕсли;
		ПересчётСуммыЗаявки(Выборка.ссылка);

	Исключение
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция УдалитьТоварИзЗаявкиDeleteProductApplication1(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Попытка
		Выборка = Запросзаявки.Выполнить().Выбрать();
		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);

		Массив  = ПрочитатьJSON(ЧтениеJSON);
	//ИндКод  = Массив.IndCode;
		Позиция = Число(Запрос.ПараметрыURL["pose"]);
		Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
		Если Юзер = Неопределено Тогда
			Юзер = Справочники.Клиенты.НайтиПоКоду(Массив.author);

		КонецЕсли;

		выборка.Следующий();
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " удалил товар " + ОбъектЗаявки.Товары[Позиция
			- 1].Номенклатура + " " + ОбъектЗаявки.Товары[Позиция - 1].Партия;
		ОбъектЗаявки.Товары.удалить(Позиция - 1);
		ОбъектЗаявки.записать();
		Если Справочники.Сотрудники.НайтиПоКоду(Юзер).Пользователь <> Справочники.Пользователи.ПустаяСсылка() Тогда
			ЛогированиеWT10(Выборка.ссылка, Юзер, ТекстЛога);
		КонецЕсли;

		ПересчётСуммыЗаявки(Выборка.ссылка);
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех");

	Исключение

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		Информация = ИнформацияОбОшибке();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокМенеджеровgetlistmanagers(Запрос)
	
	///+ТатарМА 03.12.2024
	Попытка
		ЗапросМенеджеров = Новый Запрос;
		ЗапросМенеджеров.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(ДолжностиСотрудников.Период) КАК Период,
		|	ДолжностиСотрудников.Сотрудник КАК Сотрудник,
		|	ДолжностиСотрудников.Сотрудник.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ ВТ_ДатаПоследнейЗаписи
		|ИЗ
		|	РегистрСведений.ДолжностиСотрудников КАК ДолжностиСотрудников
		|ГДЕ
		|	НЕ ДолжностиСотрудников.Сотрудник.Пользователь.Недействителен
		|	И ДолжностиСотрудников.Регистратор ССЫЛКА Документ.КадровыйПриказ
		|	И НЕ ДолжностиСотрудников.Сотрудник.ПометкаУдаления
		|СГРУППИРОВАТЬ ПО
		|	ДолжностиСотрудников.Сотрудник,
		|	ДолжностиСотрудников.Сотрудник.Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДатаПоследнейЗаписи.Сотрудник КАК Сотрудник,
		|	ДолжностиСотрудников.Должность КАК Должность,
		|	ВТ_ДатаПоследнейЗаписи.Пользователь КАК Пользователь,
		|	ДолжностиСотрудников.Сотрудник.Код КАК КодСотрудника
		|ИЗ
		|	ВТ_ДатаПоследнейЗаписи КАК ВТ_ДатаПоследнейЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиСотрудников КАК ДолжностиСотрудников
		|		ПО (ВТ_ДатаПоследнейЗаписи.Период = ДолжностиСотрудников.Период)
		|		И (ВТ_ДатаПоследнейЗаписи.Сотрудник = ДолжностиСотрудников.Сотрудник)
		|ГДЕ
		|	ДолжностиСотрудников.Должность.Наименование ПОДОБНО ""%Менеджер по продажам%""
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДатаПоследнейЗаписи.Сотрудник,
		|	ДолжностиСотрудников.Должность,
		|	ВТ_ДатаПоследнейЗаписи.Пользователь,
		|	ДолжностиСотрудников.Сотрудник.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ДатаПоследнейЗаписи.Сотрудник.Наименование";

		РезультатЗапроса = ЗапросМенеджеров.Выполнить().Выгрузить();

		Если РезультатЗапроса.Количество() > 0 Тогда

			МассивМенеджеров = Новый Массив;
			Для Каждого Результат Из РезультатЗапроса Цикл

				СтруктураМенеджера = Новый Структура;
				СтруктураМенеджера.Вставить("name", Строка(Результат.Сотрудник));
				СтруктураМенеджера.Вставить("id", 	Строка(Результат.КодСотрудника));

				МассивМенеджеров.Добавить(СтруктураМенеджера);

			КонецЦикла;

			СтруктураИнфо= Новый Структура;
			СтруктураИнфо.Вставить("managers", МассивМенеджеров);

			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("info", СтруктураИнфо);

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			Информация = ИнформацияОбОшибке();
			ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Иначе
			МассивМенеджеров = Новый Массив;
			
			СтруктураИнфо= Новый Структура;
			СтруктураИнфо.Вставить("managers", МассивМенеджеров);

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			Информация = ИнформацияОбОшибке();
			ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		КонецЕсли;
		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
	///-ТатарМА 03.12.2024
	
КонецФункции

Функция ПолучитьЗаявкиПоСтатусуВерсия2getappbystatusv2(Запрос)
	
	///+ТатарМА 04.12.2024
	МассивЗаявок = Новый Массив;
	
	КодМенеджера = Запрос.ПараметрыURL["manager"];
	
	Попытка
//		Для Каждого Перечисление Из Перечисления.дт_СостоянияЗаказовКлиента Цикл
//			Если Строка(Перечисление) = Запрос.ПараметрыURL["status"] Тогда
//				Статус = Перечисление;
//			КонецЕсли;
//		КонецЦикла;
				
		Статус = Перечисления.дт_СостоянияЗаказовКлиента[Запрос.ПараметрыURL["status"]];		
		
		ЗапросЗаявок = Новый Запрос;
		
		Если Число(КодМенеджера) = 0 Тогда
			Текст = "ВЫБРАТЬ ПЕРВЫЕ 100000
			|	ЗаказКлиента.Номер КАК Номер,
			|	ЗаказКлиента.Дата КАК Дата,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
			|			ТОГДА ЗаказКлиента.Клиент
			|		ИНАЧЕ ЗаказКлиента.КлиентНаименование
			|	КОНЕЦ КАК Клиент,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
			|			ТОГДА ЗаказКлиента.Клиент.Код
			|		ИНАЧЕ ""Не авторизован""
			|	КОНЕЦ КАК КлиентКод,
			|	ЗаказКлиента.Состояние КАК Состояние,
			|	ЗаказКлиента.Ответственный КАК Ответственный,
			|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
			|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ЗаказКлиента.Комментарий КАК Комментарий,
			|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ЗаказКлиента.НомерТелефона КАК Телефон,
			|	ПорядокЗаявок.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ЗаказКлиента.Клиент.Город2 КАК КлиентГород,
			|	ЗаказКлиента.Клиент.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
			|	Сотрудники.Код КАК КодСотрудника
			|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЗаявок КАК ПорядокЗаявок
			|		ПО (ЗаказКлиента.Ссылка = ПорядокЗаявок.Заявка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО (ЗаказКлиента.Ответственный = Сотрудники.Пользователь)
			|ГДЕ
			|	ЗаказКлиента.Состояние = &Состояние
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПорядковыйНомер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 100000
			|	ВТ_ДанныеЗаявки.Номер КАК Номер,
			|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
			|	ВТ_ДанныеЗаявки.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ВТ_ДанныеЗаявки.Дата КАК Дата,
			|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
			|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
			|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
			|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
			|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
			|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ВТ_ДанныеЗаявки.КлиентКод КАК КлиентКод,
			|	ВТ_ДанныеЗаявки.Телефон КАК Телефон,
			|	ВТ_ДанныеЗаявки.КлиентГород КАК КлиентГород,
			|	ВТ_ДанныеЗаявки.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
			|	ВТ_ДанныеЗаявки.КодСотрудника КАК КодСотрудника,
			|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
			|ПОМЕСТИТЬ ВТ_ДанныеЗаявкиАвтономер
			|ИЗ
			|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПорядковыйНомер Убыв
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ %1
			|	ВТ_ДанныеЗаявкиАвтономер.НомерЗаписи КАК НомерЗаписи,
			|	ВТ_ДанныеЗаявкиАвтономер.Ссылка КАК Ссылка,
			|	ВТ_ДанныеЗаявкиАвтономер.Номер КАК Номер,
			|	ВТ_ДанныеЗаявкиАвтономер.Дата КАК Дата,
			|	ВТ_ДанныеЗаявкиАвтономер.Клиент КАК Клиент,
			|	ВТ_ДанныеЗаявкиАвтономер.Комментарий КАК Комментарий,
			|	ВТ_ДанныеЗаявкиАвтономер.Ответственный КАК Ответственный,
			|	ВТ_ДанныеЗаявкиАвтономер.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_ДанныеЗаявкиАвтономер.ДатаСвязи КАК ДатаСвязи,
			|	ВТ_ДанныеЗаявкиАвтономер.Состояние КАК Состояние,
			|	ВТ_ДанныеЗаявкиАвтономер.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ВТ_ДанныеЗаявкиАвтономер.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ВТ_ДанныеЗаявкиАвтономер.КлиентКод КАК КлиентКод,
			|	ВТ_ДанныеЗаявкиАвтономер.Телефон КАК Телефон,
			|	ВТ_ДанныеЗаявкиАвтономер.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ВТ_ДанныеЗаявкиАвтономер.КлиентГород КАК КлиентГород,
			|	ВТ_ДанныеЗаявкиАвтономер.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
			|	ВТ_ДанныеЗаявкиАвтономер.КодСотрудника КАК КодСотрудника
			|ИЗ
			|	ВТ_ДанныеЗаявкиАвтономер КАК ВТ_ДанныеЗаявкиАвтономер
			|ГДЕ
			|	ВТ_ДанныеЗаявкиАвтономер.НомерЗаписи >= &НачинаяСЗаписи
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерЗаписи";
		
		Иначе
			Текст = "ВЫБРАТЬ ПЕРВЫЕ 100000
			|	ЗаказКлиента.Номер КАК Номер,
			|	ЗаказКлиента.Дата КАК Дата,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
			|			ТОГДА ЗаказКлиента.Клиент
			|		ИНАЧЕ ЗаказКлиента.КлиентНаименование
			|	КОНЕЦ КАК Клиент,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
			|			ТОГДА ЗаказКлиента.Клиент.Код
			|		ИНАЧЕ ""Не авторизован""
			|	КОНЕЦ КАК КлиентКод,
			|	ЗаказКлиента.Состояние КАК Состояние,
			|	ЗаказКлиента.Ответственный КАК Ответственный,
			|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
			|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ЗаказКлиента.Комментарий КАК Комментарий,
			|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ЗаказКлиента.НомерТелефона КАК Телефон,
			|	ПорядокЗаявок.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ЗаказКлиента.Клиент.Город2 КАК КлиентГород,
			|	ЗаказКлиента.Клиент.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
			|	Сотрудники.Код КАК КодСотрудника
			|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЗаявок КАК ПорядокЗаявок
			|		ПО (ЗаказКлиента.Ссылка = ПорядокЗаявок.Заявка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО (ЗаказКлиента.Ответственный = Сотрудники.Пользователь)
			|ГДЕ
			|	ЗаказКлиента.Состояние = &Состояние
			|	И Сотрудники.Код = &КодМенеджера
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПорядковыйНомер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 100000
			|	ВТ_ДанныеЗаявки.Номер КАК Номер,
			|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
			|	ВТ_ДанныеЗаявки.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ВТ_ДанныеЗаявки.Дата КАК Дата,
			|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
			|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
			|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
			|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
			|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
			|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ВТ_ДанныеЗаявки.КлиентКод КАК КлиентКод,
			|	ВТ_ДанныеЗаявки.Телефон КАК Телефон,
			|	ВТ_ДанныеЗаявки.КлиентГород КАК КлиентГород,
			|	ВТ_ДанныеЗаявки.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
			|	ВТ_ДанныеЗаявки.КодСотрудника КАК КодСотрудника,
			|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
			|ПОМЕСТИТЬ ВТ_ДанныеЗаявкиАвтономер
			|ИЗ
			|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПорядковыйНомер Убыв
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ %1
			|	ВТ_ДанныеЗаявкиАвтономер.НомерЗаписи КАК НомерЗаписи,
			|	ВТ_ДанныеЗаявкиАвтономер.Ссылка КАК Ссылка,
			|	ВТ_ДанныеЗаявкиАвтономер.Номер КАК Номер,
			|	ВТ_ДанныеЗаявкиАвтономер.Дата КАК Дата,
			|	ВТ_ДанныеЗаявкиАвтономер.Клиент КАК Клиент,
			|	ВТ_ДанныеЗаявкиАвтономер.Комментарий КАК Комментарий,
			|	ВТ_ДанныеЗаявкиАвтономер.Ответственный КАК Ответственный,
			|	ВТ_ДанныеЗаявкиАвтономер.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_ДанныеЗаявкиАвтономер.ДатаСвязи КАК ДатаСвязи,
			|	ВТ_ДанныеЗаявкиАвтономер.Состояние КАК Состояние,
			|	ВТ_ДанныеЗаявкиАвтономер.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ВТ_ДанныеЗаявкиАвтономер.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ВТ_ДанныеЗаявкиАвтономер.КлиентКод КАК КлиентКод,
			|	ВТ_ДанныеЗаявкиАвтономер.Телефон КАК Телефон,
			|	ВТ_ДанныеЗаявкиАвтономер.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ВТ_ДанныеЗаявкиАвтономер.КлиентГород КАК КлиентГород,
			|	ВТ_ДанныеЗаявкиАвтономер.КоличествоАвтомобилей КАК КоличествоАвтомобилей,
			|	ВТ_ДанныеЗаявкиАвтономер.КодСотрудника КАК КодСотрудника
			|ИЗ
			|	ВТ_ДанныеЗаявкиАвтономер КАК ВТ_ДанныеЗаявкиАвтономер
			|ГДЕ
			|	ВТ_ДанныеЗаявкиАвтономер.НомерЗаписи >= &НачинаяСЗаписи
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерЗаписи";
		КонецЕсли;
				
		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="));
		
		ЗапросЗаявок.УстановитьПараметр("Состояние", Статус);
		
		Если НЕ КодМенеджера = 0 Тогда
			ЗапросЗаявок.УстановитьПараметр("КодМенеджера", КодМенеджера);
		КонецЕсли;
		
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		ОбщееКолво = ЗапросЗаявок.Выполнить().Выбрать().Количество();
		
		Если ОбщееКолво > 0 Тогда
	
		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
		
		ЗапросЗаявок.УстановитьПараметр("Состояние", Статус);
		
		Если НЕ КодМенеджера = 0 Тогда
			ЗапросЗаявок.УстановитьПараметр("КодМенеджера", КодМенеджера);
		КонецЕсли;

		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));

		Иначе
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;
		СписокПоиска = ЗапросЗаявок.Выполнить().Выгрузить();
					
		Для Каждого Результат Из СписокПоиска Цикл

			СтруктураЗаявок = Новый Структура;
			СтруктураЗаявок.Вставить("id", Строка(Результат.Номер));
			СтруктураЗаявок.Вставить("number_pose", Результат.ПорядковыйНомер);

			СтруктураКлиента = Новый Структура;
			СтруктураКлиента.Вставить("name", Строка(Результат.Клиент));
			СтруктураКлиента.Вставить("id", Результат.КлиентКод);
			СтруктураКлиента.Вставить("phone", Результат.Телефон);
			СтруктураКлиента.Вставить("city", Строка(Результат.КлиентГород));
			СтруктураКлиента.Вставить("count_car", Строка(Результат.КоличествоАвтомобилей));
			СтруктураЗаявок.Вставить("client", СтруктураКлиента);

			СтруктураМенеджера = Новый Структура;
			СтруктураМенеджера.Вставить("name", Строка(Результат.Ответственный));
			СтруктураМенеджера.Вставить("id", Строка(Результат.КодСотрудника));
			СтруктураЗаявок.Вставить("manager", СтруктураМенеджера);
	
			СтруктураЗаявок.Вставить("summ", Результат.СуммаДокумента);
			
			МассивЗаявок.Добавить(СтруктураЗаявок);
				
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		НачальныйИндекс = СписокПоиска[0].ПорядковыйНомер;
		КонечныйИндекс 	= СписокПоиска[СписокПоиска.Количество() - 1].ПорядковыйНомер;
		
		СтруктураИнфо= Новый Структура;
		
		СтруктураИнфо.Вставить("pages", 		Итог);
		СтруктураИнфо.Вставить("count", 		ОбщееКолво);
		СтруктураИнфо.Вставить("start_index", 	НачальныйИндекс);
		СтруктураИнфо.Вставить("end_index", 	КонечныйИндекс);
		СтруктураИнфо.Вставить("applications", 	МассивЗаявок);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		
		Иначе
		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", 		0);
		СтруктураИнфо.Вставить("count", 		0);
		СтруктураИнфо.Вставить("start_index", 	0);
		СтруктураИнфо.Вставить("end_index", 	0);
		СтруктураИнфо.Вставить("applications", 	Новый Массив);
			
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
КонецЕсли;
		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
	///-ТатарМА 04.12.2024
	
КонецФункции

Функция ИзменитьСтатусЗаявкиВерсия2changestatusappv2(Запрос)
	
	///+ТатарМА 04.12.2024
	НомерЗаявки = Запрос.ПараметрыURL["id"];
	
//	//Перемещение заявки на сайте между группами по статусам и актуализирует порядковые номера
//	ЗапросЗаявки = Новый Запрос;
//	ЗапросЗаявки.Текст = "ВЫБРАТЬ
//	|	ЗаказКлиента.Ссылка КАК Ссылка
//	|ИЗ
//	|	Документ.ЗаказКлиента КАК ЗаказКлиента
//	|ГДЕ
//	|	ЗаказКлиента.Номер = &Номер";
	
//	ЗапросЗаявки.УстановитьПараметр("Номер", НомерЗаявки);
	Попытка
//		Выборка = ЗапросЗаявки.Выполнить().Выбрать();
		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);

		Массив  = ПрочитатьJSON(ЧтениеJSON);
		
//		Если Массив.start_status = Массив.end_status Тогда
//			Для Каждого Статус Из Перечисления.дт_СостоянияЗаказовКлиента Цикл
//				Если Строка(Статус) = Массив.start_status Тогда
//					НачальныйСтатус = Статус;
//					КонечныйСтатус 	= Статус;
//				КонецЕсли;
//			КонецЦикла;
//		Иначе
//			Для Каждого Статус Из Перечисления.дт_СостоянияЗаказовКлиента Цикл
//				Если Строка(Статус) = Массив.start_status Тогда
//					НачальныйСтатус = Статус;
//				ИначеЕсли Строка(Статус) = Массив.end_status Тогда
//					КонечныйСтатус 	= Статус;
//				КонецЕсли;
//			КонецЦикла;
			
			НачальныйСтатус = Перечисления.дт_СостоянияЗаказовКлиента[Массив.start_status];
			КонечныйСтатус 	= Перечисления.дт_СостоянияЗаказовКлиента[Массив.end_status];
			
			
			Если НЕ НачальныйСтатус = КонечныйСтатус Тогда
				ДокОбъект = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки).ПолучитьОбъект();
				ДокОбъект.Состояние = КонечныйСтатус;
				ДокОбъект.Записать();
			КонецЕсли;

		НачальнаяПозиция 	= Массив.start_pose_app;
//		КонечнаяПозиция 	= Массив.end_pose_app;
//		НачальныйИндекс 	= Массив.start_index;
//		КонечныйИндекс 		= Массив.end_index;
		Автор 				= Массив.author;

//		Выборка.Следующий();

//		//Записать актуальный статус и порядковый номер заявки
//		ЗаписьВРегистреСведений = РегистрыСведений.ПорядокЗаявок.СоздатьМенеджерЗаписи();
//		ЗаписьВРегистреСведений.Заявка = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки);
//		ЗаписьВРегистреСведений.Прочитать();
//		ЗаписьВРегистреСведений.Заявка = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки);
//		ЗаписьВРегистреСведений.ПорядковыйНомер = КонечнаяПозиция;
//		ЗаписьВРегистреСведений.Статус = КонечныйСтатус;
//		ЗаписьВРегистреСведений.Записать();
		
		Если НЕ НачальныйСтатус = КонечныйСтатус Тогда
//			АктуализироватьНумерациюВНачалеИКонцеСписка(НомерЗаявки, КонечнаяПозиция, КонечныйСтатус, НачальныйИндекс, КонечныйИндекс);
//		Иначе
			//Актуализировать номера начальной группы заявок
			АктуализироватьНумерациюВКонцеСписка(НомерЗаявки, НачальнаяПозиция, НачальныйСтатус, Ложь);
//		
//			//Актуализировать номера конечной группы заявок
//			АктуализироватьНумерациюВКонцеСписка(НомерЗаявки, КонечнаяПозиция, КонечныйСтатус, Истина);
//			
////			ЗаписьВРегистреСведений = РегистрыСведений.ПорядокЗаявок.СоздатьМенеджерЗаписи();
////			ЗаписьВРегистреСведений.Заявка = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки);
////			ЗаписьВРегистреСведений.Прочитать();
////			ЗаписьВРегистреСведений.Заявка = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки);
////			ЗаписьВРегистреСведений.ПорядковыйНомер = КонечнаяПозиция;
////			ЗаписьВРегистреСведений.Статус = КонечныйСтатус;
////			ЗаписьВРегистреСведений.Записать();
		КонецЕсли;
		
		ТекстЛога = " Сменил статус заявки с " + Строка(НачальныйСтатус) + " на " + Строка(КонечныйСтатус);
		ЛогированиеWT10(Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки), Автор, ТекстЛога); //Выборка.ссылка, Автор, ТекстЛога);
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Заявка №" + НомерЗаявки + " перемещена с " + Строка(НачальныйСтатус) + " на " + Строка(КонечныйСтатус));
		
	Исключение
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		
		Возврат Ответ;
	КонецПопытки;
	
	Возврат Ответ;	
	///-ТатарМА 04.12.2024
	
КонецФункции

Функция СоздатьПродажуcreatesale(Запрос)

	///+ТатарМА 24.12.2024
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Номерзаявки = Массив.id;
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер", Номерзаявки);
	Выборка = запросзаявки.Выполнить().Выбрать();

	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();

		Продажа = ПроверкаПродаж(Выборка.ссылка);
		Если Продажа.ссылка = Неопределено Тогда

			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Клиент КАК Клиент,
			|	Док.Комментарий КАК Комментарий,
			|	Док.Проект КАК Проект,
			|	Док.Склад КАК Склад,
			|	Док.Ссылка КАК ЗаказКлиента,
			|	Док.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	Док.НачислятьНДС КАК НачислятьНДС,
			|	Док.Ответственный КАК КтоПродал
			|ПОМЕСТИТЬ втШапка
			|ИЗ
			|	Документ.ЗаказКлиента КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втШапка.Клиент КАК Клиент,
			|	втШапка.Комментарий КАК Комментарий,
			|	втШапка.Проект КАК Проект,
			|	втШапка.Склад КАК Склад,
			|	втШапка.ЗаказКлиента КАК ЗаказКлиента,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	втШапка.КтоПродал КАК КтоПродал
			|ИЗ
			|	втШапка КАК втШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
			|	ЗаказКлиентаТовары.Номенклатура КАК Товар,
			|	ЗаказКлиентаТовары.Количество КАК Количество,
			|	ЗаказКлиентаТовары.Цена КАК Цена,
			|	ЗаказКлиентаТовары.Сумма КАК Сумма,
			|	втШапка.Склад КАК Склад,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,
			|	ЗаказКлиентаТовары.Партия КАК Партия,
			|	втШапка.КтоПродал КАК КтоПродал,
			|	РегистрНакопления1Остатки.машина КАК машина,
			|	РегистрНакопления1Остатки.Склад КАК Склад1
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ втШапка КАК втШапка
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
			|		ПО ЗаказКлиентаТовары.Партия = РегистрНакопления1Остатки.индкод
			|		И ЗаказКлиентаТовары.Номенклатура = РегистрНакопления1Остатки.Товар
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка = &Ссылка
			|	И НЕ ЗаказКлиентаТовары.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			Запрос.УстановитьПараметр("Ссылка", Выборка.ссылка);

			Объектзаявки = выборка.ссылка.получитьОбъект();
			объектзаявки.Wtpanel = Справочники.СтатусыWT.НайтиПоНаименованию("Продажа");
			объектзаявки.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Продажа;
			//++ Выгрузить таблицу ответственные из заявки потом загрузить в  новую продажу
			ТаблицаОтветственные = объектзаявки.Ответственные.Выгрузить();
			//-- Выгрузить таблицу ответственные из заявки потом загрузить в  новую продажу
			объектзаявки.записать();
			НоваяПродажа = Документы.ПродажаЗапчастей.СоздатьДокумент();
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			НоваяПродажа.Организация = Справочники.Организация.НайтиПоКоду("000000010");
			//НоваяПродажа.TipOplati   = Справочники.TipOplati.НайтиПоКоду(Массив.bill);
			//@skip-check use-non-recommended-method
			НоваяПродажа.ОжидаемаяДатаВыплаты   = ТекущаяДата();

			НоваяПродажа.БезДоговора = Истина;
			//@skip-check use-non-recommended-method
			НоваяПродажа.Дата        = ТекущаяДата();
			НоваяПродажа.Ктопродал   = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки).Ответственный;
			НоваяПродажа.Самовывоз   = Истина;
			НоваяПродажа.СтатусОбработки    = Перечисления.СтатусыОбработкиЗаявок.Обработано;
			НоваяПродажа.WTpanel    = Справочники.СтатусыWT.НайтиПоНаименованию("Продажа");
			НоваяПродажа.ПодстатусОбработки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;

			НоваяПродажа.СтатусДоставки    = Перечисления.СтатусОтправки.Отправлен;
			//@skip-check use-non-recommended-method
			НоваяПродажа.ДатаСписания      = ТекущаяДата();
			Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[РезультатЗапроса.Количество()
				- 2].Выгрузить()[0]);

			ЗаполнениеДокументов.Заполнить(НоваяПродажа, Шапка, Ложь);
			НоваяПродажа.Таблица.Загрузить(РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить());
			// +++ Заполнить таблицу ответственные в продаже ТаблицаОтветственные
			НоваяПродажа.Ответственные.Загрузить(ТаблицаОтветственные);
			// +++ Заполнить таблицу ответственные в продаже ТаблицаОтветственные
			НоваяПродажа.Записать();

			ТекстЛога =  " Создал продажу " + НоваяПродажа.номер;
			ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
			//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(НоваяПродажа.КтоПродал), Строка(Выборка.Ответственный) + ТекстЛога); 

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки(НоваяПродажа.номер);
		Иначе

			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Продажа уже есть!",
				"Ошибка при вызове метода контекста (Выполнить)"));
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			Ответ = Новый HTTPСервисОтвет(403);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		КонецЕсли;
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Такой заявки нет!", "Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);

	КонецЕсли;
	Возврат Ответ;
	///-ТатарМА 24.12.2024
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции
Функция ПроверкаПродаж(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	ПродажаЗапчастей.Ссылка КАК Ссылка
				   |ИЗ
				   |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
				   |ГДЕ
				   |	ПродажаЗапчастей.ЗаказКлиента = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

КонецФункции
Функция ПолучитьДанныеКлиентаПоИНН(ИНН)
/// Комлев 20/08/24 ---
	ДанныеКлиента = Новый Структура;
	ДанныеКлиента.Вставить("ИНН", ИНН);
	//https://egrul.itsoft.ru/short_data/?7730588444
	АдрессСервера = "egrul.itsoft.ru";
	АдрессРесурса = "short_data/?" + ИНН;

	Соединение = Новый HTTPСоединение(АдрессСервера, , , , , 30, Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос(АдрессРесурса);

	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось получить данные по ИНН" + ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат ДанныеКлиента;
	КонецПопытки;
	ДанныеЕГРЛЮЛ = Неопределено;
	Если Ответ.КодСостояния = 200 Тогда
		СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		ДанныеЕГРЛЮЛ = ПрочитатьJSON(ЧтениеJSON, Истина);
	Иначе
		Текст = СтрШаблон("Не удалось получить данные по ИНН....
						  |Код состояния: %1
						  |Ответ Сервера: %2", Ответ.КодСостояния, СтрокаJSON);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.Сообщить();
		Возврат ДанныеКлиента;
	КонецЕсли;

	Если ДанныеЕГРЛЮЛ["short_forms"] <> Неопределено И ДанныеЕГРЛЮЛ["short_forms"] = "ИП" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = " Данный ИНН пренадлежит ИП";
		Сообщение.Сообщить();
	КонецЕсли;

	ДанныеКлиента.Вставить ("ИНН", ДанныеЕГРЛЮЛ["inn"]);
	ДанныеКлиента.Вставить ("КПП", ДанныеЕГРЛЮЛ["kpp"]);
	ДанныеКлиента.Вставить ("ОГРН", ДанныеЕГРЛЮЛ["ogrn"]);
	ДанныеКлиента.Вставить ("ПолноеНаименование", ДанныеЕГРЛЮЛ["full_name"]);
	ДанныеКлиента.Вставить ("ЮрАдресс", ДанныеЕГРЛЮЛ["address"]);
	ДанныеКлиента.Вставить ("Руководитель", ДанныеЕГРЛЮЛ["chief"]);
	Возврат ДанныеКлиента; 
	/// Комлев 20/08/24 ---
КонецФункции //()

Процедура ПересчётСуммыЗаявки(СсылкаНаЗаявку)
	ОбъектЗаявки = СсылкаНаЗаявку.ПолучитьОбъект();
	Товары = ОбъектЗаявки.Товары;
	ОбщСумма = 0;

	Для Каждого Стр Из товары Цикл
		Стр.Сумма = Стр.Количество * стр.Цена;
		ОбщСумма = ОбщСумма + Стр.Сумма;
	КонецЦикла;
	ОбъектЗаявки.СуммаДокумента = ОбщСумма;
	ОбъектЗаявки.Записать();
КонецПроцедуры
Функция текстДляЗаявки()
	Текст = "ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|/////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентас.Номер КАК НомерЗаявки,
	|	ЗаказКлиентас.Дата КАК Дата,
	|	Выбор
	|		Когда ЗаказКлиентас.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
	|			Тогда ЗаказКлиентас.Клиент
	|		Иначе ЗаказКлиентас.КлиентНаименование
	|	Конец КАК Клиент,
	|	Выбор
	|		Когда ЗаказКлиентас.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
	|			Тогда ЗаказКлиентас.Клиент.Код
	|		Иначе NULL
	|	Конец КАК КлиентКод,
	|	ЗаказКлиентас.Состояние КАК Состояние,
	|	ЗаказКлиентас.Ответственный КАК Ответственный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	ЗаказКлиентас.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказКлиентас.ДатаСвязи КАК ДатаСвязи,
	|	ТелефоныСлужебные.Ссылка.Код КАК КодСотрудника,
	|	ЗаказКлиентас.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ЦенаОригинала КАК ЦенаОригинала,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		Отменено КАК Отменено,
	|		Склад КАК Склад,
	|		СуммаНДС КАК СуммаНДС,
	|		Комментарий КАК Комментарий,
	|		ПредлагаемаяЦена КАК ПредлагаемаяЦена,
	|		Партия КАК Партия,
	|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиентас.Товары.Партия) КАК Партия2,
	|		Номенклатура.Код КАК Код) КАК Товары,
	|	ЗаказКлиентас.Ссылка КАК Ссылка,
	|	ЗаказКлиентас.WTPanel КАК СтатусОбработки,
	|	ЗаказКлиентас.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ЗаказКлиентас.Комментарий КАК Комментарий,
	|	ЗаказКлиентас.ПодстатусОбработки КАК ПодстатусОбработки,
	|	ЗаказКлиентас.НомерТелефона КАК Телефон,
	|	ПродажаЗапчастей.Номер КАК номерпродажи,
	|	ПродажаЗапчастей.Ссылка КАК Ссылканапродажу,
	|	ЗаказКлиентас.Ответственные.(
	|		Ссылка,
	|		НомерСтроки,
	|		Сотрудник,
	|		Роль),
	|	ЗаказКлиентас.СтатусыДействия.Ссылка КАК СтатусыДействия,
	|	ЗаказКлиентас.ФинансовыеСтатусы.Ссылка КАК ФинансовыеСтатусы, 
	|	ПродажаЗапчастей.Таблица.(
	|	Товар КАК Товар,
	|	Партия КАК Партия,
	|	СтатусТовара КАК СтатусТовара) КАК Таблица
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиентас
	|		ЛЕВОЕ Соединение ТелефоныСлужебные КАк ТелефоныСлужебные
	|		По ЗаказКлиентас.Ответственный = ТелефоныСлужебные.ссылка.пользователь
	|		ЛЕВОЕ Соединение Документ.ПродажаЗапчастей КАк ПродажаЗапчастей
	|		ПО ПродажаЗапчастей.ЗаказКлиента = ЗаказКлиентас.Ссылка
	|ГДЕ
	|	ЗаказКлиентас.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция ПолучитьТекстПоискаЗаявок()
	/// Комлев АА 20/11/24 +++
	ТекстЗапросаПоискЗаявок =
	"ВЫБРАТЬ ПЕРВЫЕ 10000
	|	ЗаказКлиента.Номер КАК НомерЗаявки,
	|	ЗаказКлиента.НомерТелефона КАК НомерТелефона,
	|	ЗаказКлиента.Клиент.Наименование КАК НаименованиеКлиента,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ЗаказКлиента.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_НайденныеЗаявки
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	(ЗаказКлиента.Номер ПОДОБНО &СтрокаПоиска
	|	ИЛИ СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(ЗаказКлиента.НомерТелефона, ""+"", """"), "" "", """"), ""-"", """")
	|		ПОДОБНО СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(СТРЗАМЕНИТЬ(&СтрокаПоиска, ""+"", """"), "" "", """"), ""-"", """")
	|	ИЛИ ЗаказКлиента.Клиент.Наименование ПОДОБНО &СтрокаПоиска)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_НайденныеЗаявки.НомерЗаявки КАК НомерЗаявки,
	|	ВТ_НайденныеЗаявки.НомерТелефона КАК НомерТелефона,
	|	ВТ_НайденныеЗаявки.НаименованиеКлиента КАК НаименованиеКлиента,
	|	ВТ_НайденныеЗаявки.НомерЗаписи КАК НомерЗаписи
	|ИЗ
	|	ВТ_НайденныеЗаявки КАК ВТ_НайденныеЗаявки
	|ГДЕ
	|	ВТ_НайденныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи";
	Возврат ТекстЗапросаПоискЗаявок;
/// Комлев АА 20/11/24 ---
КонецФункции
Функция текстДляТоваровНаПолке()
	ТекстЗапроса = " ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж = &Стеллаж
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";
	Возврат ТекстЗапроса;
КонецФункции


Функция ПолучитьКлиентаПоТелефону(Номер)

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	Результат = Справочники.Клиенты.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Клиенты.Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Телефон = &Телефон";

	Запрос.УстановитьПараметр("Телефон", Номер);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.Ссылка;
	КонецЕсли;
	Возврат Результат;
	//Сергеев Ф.В. -- Дата: 14.05.2024

КонецФункции


Функция ПолучитьНормализованныйНомер(Номер)

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	ПромежуточныйНомер = "";
	ДопустимыеСимволы = "0123456789";
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	Для Сч1 = 1 По ДлинаНомера Цикл
		ТекСимвол = Сред(СокрЛП(Номер), Сч1, 1);
		Если СтрНайти(ДопустимыеСимволы, ТекСимвол) > 0 Тогда
			ПромежуточныйНомер = ПромежуточныйНомер + ТекСимвол;
			Если Лев(ПромежуточныйНомер, 1) = "8" Тогда
				ПромежуточныйНомер = "7";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Лев(ПромежуточныйНомер, 1) = "7" Тогда
		ПромежуточныйНомер = "+" + ПромежуточныйНомер;
	КонецЕсли;

	ФорматированныйНомер = Лев(ПромежуточныйНомер, 2) + " " + Сред(ПромежуточныйНомер, 3, 3) + " " + Сред(
		ПромежуточныйНомер, 6, 3) + "-" + Сред(ПромежуточныйНомер, 9, 2) + "-" + Сред(ПромежуточныйНомер, 11);

	Возврат ФорматированныйНомер;
	//Сергеев Ф.В. -- Дата: 14.05.2024

КонецФункции

Функция ПолучитьИнформациюОТоваре(Code)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.РекомендованаяЦена КАК РекомендованаяЦена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", code);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтвета = Новый Структура;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		СтруктураОтвета.Вставить("Цена",   Выборка.РекомендованаяЦена);
		СтруктураОтвета.Вставить("Товар",  Выборка.Ссылка);
	Иначе
		СтруктураОтвета.Вставить("Цена",   0);
		СтруктураОтвета.Вставить("Товар",  0);
	КонецЕсли;

	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучитьИнформациюОПартии(Ind_code)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	РегистрНакопления1Остатки.Склад КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
	|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
	|	РегИндНомер.индкод.Владелец.выс КАК выс,
	|	РегИндНомер.индкод.Владелец.длин КАК длин,
	|	РегИндНомер.индкод.Владелец.шир КАК шир,
	|	РегистрНакопления1Остатки.машина
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод";
	
	Запрос.УстановитьПараметр("Наименование", Ind_code);
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтвета = Новый Структура;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		СтруктураОтвета.Вставить("Цена",   Выборка.Цена);
		СтруктураОтвета.Вставить("Склад",  Выборка.Склад);
		СтруктураОтвета.Вставить("Партия", Выборка.индкод);
		СтруктураОтвета.Вставить("Машина", Выборка.Машина);
		СтруктураОтвета.Вставить("Товар",  Выборка.Наименование);
	Иначе
		СтруктураОтвета.Вставить("Цена",   0);
		СтруктураОтвета.Вставить("Склад",  0);
		СтруктураОтвета.Вставить("Партия", 0);
		СтруктураОтвета.Вставить("Машина", 0);
		СтруктураОтвета.Вставить("Товар",  0);
	КонецЕсли;

	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучитьТоварыЗаявки1(НомерЗаявки)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = "ВЫБРАТЬ
						 |	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
						 |	ЗаказКлиентаТовары.Партия КАК Партия,
						 |	ЗаказКлиентаТовары.Номенклатура.Код КАК НоменклатураКод,
						 |	ЗаказКлиентаТовары.Сумма КАК Сумма,
						 |	ЗаказКлиентаТовары.Цена КАК Цена,
						 |	ЗаказКлиентаТовары.Количество КАК Количество
						 |ИЗ
						 |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
						 |ГДЕ
						 |	ЗаказКлиентаТовары.Ссылка.Номер = &Номер";

	Запросзаявки.УстановитьПараметр("Номер", НомерЗаявки);

	Выборка = Запросзаявки.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;

	// ТЗ_Товары = выборка.Выгрузить();
	МассивТоваров = Новый Массив;

	СуммаТоваров = 0;
	Пока выборка.Следующий() Цикл
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("position", Строка(выборка.НомерСтроки));
		Если выборка.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
			СтруктураТоваров.Вставить("id", Строка(выборка.Партия));
		Иначе
			СтруктураТоваров.Вставить("id", Строка(выборка.НоменклатураКод));
		КонецЕсли;
		СуммаТоваров = СуммаТоваров + (выборка.Цена * выборка.Количество);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Товары", МассивТоваров);
	СтруктураОтвета.Вставить("СуммаТоваров", СуммаТоваров);
	Возврат СтруктураОтвета;
КонецФункции

Функция СформироватьСтруктуруОшибки(Сode, Message, Details = Неопределено)

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("code", Сode);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("details", Details);

	Возврат СтруктураОтвета;
КонецФункции

Процедура ДобавитьНаборЗаписейНачало(НаборЗаписей, ЧастьЗаявок, Статус)

Для Каждого СтрокаТЗ Из ЧастьЗаявок Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Заявка = СтрокаТЗ.Заявка;
		НоваяЗапись.ПорядковыйНомер = СтрокаТЗ.ПорядковыйНомер;
		НоваяЗапись.Статус = Статус;
КонецЦикла;

КонецПроцедуры

Функция ДобавитьНаборЗаписейКонец(НаборЗаписей, ЧастьЗаявок, Статус, ПозицияВСписке)

Для Каждого СтрокаТЗ Из ЧастьЗаявок Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Заявка = СтрокаТЗ.Заявка;
		НоваяЗапись.ПорядковыйНомер = ПозицияВСписке;
		НоваяЗапись.Статус = Статус;
		ПозицияВСписке = ПозицияВСписке + 1;
КонецЦикла;
	Возврат ПозицияВСписке;

КонецФункции

Процедура АктуализироватьНумерациюВКонцеСписка(НомерЗаявки, ПозицияЗаявки, Статус, ЭтоКонечныйСтатус)
	
	///+ТатарМА 31.10.2024
	Если ЭтоКонечныйСтатус Тогда
		ПозицияВСписке = ПозицияЗаявки + 1;
	Иначе
		ПозицияВСписке = ПозицияЗаявки;
	КонецЕсли;
	
	ЗапросНачалоСписка = Новый Запрос;
	ЗапросНачалоСписка.Текст = "ВЫБРАТЬ
	|	ПорядокЗаявок.Заявка КАК Заявка,
	|	ПорядокЗаявок.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	РегистрСведений.ПорядокЗаявок КАК ПорядокЗаявок
	|ГДЕ
	|	ПорядокЗаявок.Заявка.Номер <> &Номер
	|	И ПорядокЗаявок.Статус = &Статус
	|	И ПорядокЗаявок.ПорядковыйНомер >= &ПозицияЗаявки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗаявок.ПорядковыйНомер";

	ЗапросНачалоСписка.УстановитьПараметр("Номер", 				НомерЗаявки);
	ЗапросНачалоСписка.УстановитьПараметр("Статус", 			Статус);
	ЗапросНачалоСписка.УстановитьПараметр("ПозицияЗаявки", 		ПозицияЗаявки);

	ВыборкаНачалоСписка = ЗапросНачалоСписка.Выполнить().Выбрать();
	Если ВыборкаНачалоСписка.Количество() > 0 Тогда
		Пока ВыборкаНачалоСписка.Следующий() Цикл
			ЗаписьВРегистреСведений = РегистрыСведений.ПорядокЗаявок.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.Заявка = ВыборкаНачалоСписка.Заявка;
			ЗаписьВРегистреСведений.Прочитать();
			ЗаписьВРегистреСведений.Заявка = ВыборкаНачалоСписка.Заявка;
			ЗаписьВРегистреСведений.ПорядковыйНомер = ПозицияВСписке;
			ЗаписьВРегистреСведений.Статус = Статус;
			ЗаписьВРегистреСведений.Записать();

			ПозицияВСписке = ПозицияВСписке + 1;

	КонецЦикла;
	КонецЕсли;
	
	
//	//2 вариант
//	Если ЭтоКонечныйСтатус Тогда
//		ПозицияВСписке = ПозицияЗаявки + 1;
//	Иначе
//		ПозицияВСписке = ПозицияЗаявки;
//	КонецЕсли;
//	
//	НаборЗаписей = РегистрыСведений.ПорядокЗаявок.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Статус.Установить(Статус);
//	НаборЗаписей.Прочитать();
//	ТЗ = НаборЗаписей.Выгрузить();
//	ТЗ.Сортировать("ПорядковыйНомер");
//	НаборЗаписей.Очистить();
//	
//	//Разделим ТаблицуЗначений на две части, чтобы избежать условие Если
//	//Начало списка
//	ПостроительЗапроса = Новый ПостроительЗапроса;
//	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
//	
//	ТЗОтборНачало = ПостроительЗапроса.Отбор.Добавить("ПорядковыйНомер");
//	ТЗОтборНачало.ВидСравнения = ВидСравнения.Меньше;
//	ТЗОтборНачало.Значение = ПозицияЗаявки;
//	ТЗОтборНачало.Использование = Истина;
//	
//	ПостроительЗапроса.Выполнить();
//	ТЗНачало = ПостроительЗапроса.Результат.Выгрузить();	
//	
//	НомерПервойСтроки = ТЗНачало[0].ПорядковыйНомер;
//	НомерПоследнейСтроки = ТЗНачало[ТЗНачало.Количество()-1].ПорядковыйНомер;
//	
//	КонечноеЗначение = НомерПервойСтроки;
//	Для НомерЗаписи = НомерПервойСтроки - 1 По НомерПоследнейСтроки Цикл
//		НомерЗаписи = НомерЗаписи + 50;
//		ЧастьЗаявок = Новый Массив;
//		Если НомерЗаписи > НомерПоследнейСтроки Тогда
//			НомерЗаписи = НомерПоследнейСтроки;
//		КонецЕсли;
//		Для Сч = КонечноеЗначение По НомерЗаписи Цикл
//			ЧастьЗаявок.Добавить(ТЗНачало[Сч - НомерПервойСтроки]);
//		КонецЦикла;
//		КонечноеЗначение = НомерЗаписи + 1;
//		ДобавитьНаборЗаписейНачало(НаборЗаписей, ЧастьЗаявок, Статус);
//	КонецЦикла;
//	
//	//Конец списка
//	ПостроительЗапроса = Новый ПостроительЗапроса;
//	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
//	
//	ТЗОтборКонец = ПостроительЗапроса.Отбор.Добавить("ПорядковыйНомер");
//	ТЗОтборКонец.ВидСравнения = ВидСравнения.БольшеИлиРавно;
//	ТЗОтборКонец.Значение = ПозицияЗаявки;
//	ТЗОтборКонец.Использование = Истина;
//	
//	ПостроительЗапроса.Выполнить();
//	ТЗКонец = ПостроительЗапроса.Результат.Выгрузить();	
//	
//	ТЗОтборКонец = ПостроительЗапроса.Отбор.Добавить("Заявка");
//	ТЗОтборКонец.ВидСравнения = ВидСравнения.НеРавно;
//	ТЗОтборКонец.Значение = Документы.ЗаказКлиента.НайтиПоНомеру(НомерЗаявки);
//	ТЗОтборКонец.Использование = Истина;
//	
//	ПостроительЗапроса.Выполнить();
//	ТЗКонец = ПостроительЗапроса.Результат.Выгрузить();
//	
//	НомерПервойСтроки = ТЗКонец[0].ПорядковыйНомер;
//	НомерПоследнейСтроки = ТЗКонец[ТЗКонец.Количество()-1].ПорядковыйНомер;
//	
//	КонечноеЗначение = НомерПервойСтроки;
//	Для НомерЗаписи = НомерПервойСтроки - 1 По НомерПоследнейСтроки Цикл
//		НомерЗаписи = НомерЗаписи + 50;
//		ЧастьЗаявок = Новый Массив;
//		Если НомерЗаписи > НомерПоследнейСтроки Тогда
//			НомерЗаписи = НомерПоследнейСтроки;
//		КонецЕсли;
//		Для Сч = КонечноеЗначение По НомерЗаписи Цикл
//			ЧастьЗаявок.Добавить(ТЗКонец[Сч - НомерПервойСтроки]);
//		КонецЦикла;
//		КонечноеЗначение = НомерЗаписи + 1;
//		ПозицияВСписке = ДобавитьНаборЗаписейКонец(НаборЗаписей, ЧастьЗаявок, Статус, ПозицияВСписке);
//	КонецЦикла;
//	
//	НаборЗаписей.Записать();
	///-ТатарМА 31.10.2024
	
КонецПроцедуры

Процедура АктуализироватьНумерациюВНачалеИКонцеСписка(НомерЗаявки, ПозицияЗаявки, Статус, НачальныйИндекс, КонечныйИндекс)
	
	///+ТатарМА 31.10.2024
	//Актуализировать нумерацию в выбранной части списка
	ЗапросНачалоСписка = Новый Запрос;
	ЗапросНачалоСписка.Текст = "ВЫБРАТЬ
	|	ПорядокЗаявок.Заявка КАК Заявка,
	|	ПорядокЗаявок.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	РегистрСведений.ПорядокЗаявок КАК ПорядокЗаявок
	|ГДЕ
	|	ПорядокЗаявок.ПорядковыйНомер >= &КонечныйИндекс
	|	И ПорядокЗаявок.Заявка.Номер <> &Номер
	|	И ПорядокЗаявок.Статус = &Статус
	|	И ПорядокЗаявок.ПорядковыйНомер <= &НачальныйИндекс
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗаявок.ПорядковыйНомер";

	ЗапросНачалоСписка.УстановитьПараметр("Номер", 				НомерЗаявки);
	ЗапросНачалоСписка.УстановитьПараметр("КонечныйИндекс", 	КонечныйИндекс);
	ЗапросНачалоСписка.УстановитьПараметр("Статус", 			Статус);
	ЗапросНачалоСписка.УстановитьПараметр("НачальныйИндекс", 	НачальныйИндекс);

	ВыборкаНачалоСписка = ЗапросНачалоСписка.Выполнить().Выбрать();
	Если ВыборкаНачалоСписка.Количество() > 0 Тогда
		ПозицияВСписке = КонечныйИндекс;
		Пока ВыборкаНачалоСписка.Следующий() Цикл
			Если ПозицияВСписке = ПозицияЗаявки Тогда
				ПозицияВСписке = ПозицияВСписке + 1;
			КонецЕсли;
			ЗаписьВРегистреСведений = РегистрыСведений.ПорядокЗаявок.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.Заявка = ВыборкаНачалоСписка.Заявка;
			ЗаписьВРегистреСведений.Прочитать();
			ЗаписьВРегистреСведений.Заявка = ВыборкаНачалоСписка.Заявка;
			ЗаписьВРегистреСведений.ПорядковыйНомер = ПозицияВСписке;
			ЗаписьВРегистреСведений.Статус = Статус;
			ЗаписьВРегистреСведений.Записать();

			ПозицияВСписке = ПозицияВСписке + 1;

	КонецЦикла;
	КонецЕсли;
	///-ТатарМА 31.10.2024
	
КонецПроцедуры

Процедура ЛогированиеWT10(Заявка, Автор, Лог)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогWT10.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.Источник = Заявка;
	МенеджерЗаписиЛога.Пользователь = Автор;
	МенеджерЗаписиЛога.Лог = "--------------------------" + Символы.ПС + Автор + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Функция текстДляТовара()
	Текстзапроса = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	РегИндНомер.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	РегИндНомер.Ответственный КАК Учетчик,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	НоменклатураТовар.Размеры КАК Размеры,
	|	НоменклатураТовар.Вес КАК Вес,
	|	НоменклатураТовар.выс КАК выс,
	|	НоменклатураТовар.длин КАК длин,
	|	НоменклатураТовар.шир КАК шир,
	|	НоменклатураТовар.Код КАК НоменклатураКод,
	|	РегистрНакопления1Остатки.КолвоОстаток КАК Остаток,
	|	ЕСТЬNULL(РегистрНакопления1Остатки.машина.Год, 0) КАК машинаГод,
	|	РегИндНомер.индкод.Владелец.Код КАК Код,
	|	ВЫБОР
	|		КОГДА РегистрНакопления1Остатки.КолвоОстаток > 0
	|			ТОГДА ""Есть в наличии""
	|		ИНАЧЕ ""Товар продан""
	|	КОНЕЦ КАК ФактНаличия,
	|	Сотрудники.Код КАК КодУчетчика
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураТовар
	|		ПО ИндНомер.индкод.Владелец.Ссылка = НоменклатураТовар.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (РегИндНомер.Ответственный = Сотрудники.Пользователь)
	|{ГДЕ
	|	(РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Состояние КАК Состояние,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.ФактНаличия КАК ФактНаличия,
	|	ВТ_данныеНоменклатур.Остаток КАК Остаток,
	|	ВТ_данныеНоменклатур.машинаГод КАК машинаГод,
	|	ВТ_данныеНоменклатур.Код КАК Код,
	|	ВТ_данныеНоменклатур.Размеры КАК Размеры,
	|	ВТ_данныеНоменклатур.Вес КАК Вес,
	|	ВТ_данныеНоменклатур.выс КАК выс,
	|	ВТ_данныеНоменклатур.длин КАК длин,
	|	ВТ_данныеНоменклатур.НоменклатураКод КАК НоменклатураКод,
	|	ВТ_данныеНоменклатур.шир КАК шир,
	|	ВТ_данныеНоменклатур.КодУчетчика КАК КодУчетчика
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";

	Возврат Текстзапроса;
КонецФункции


Функция ПолучитьФотографа(ИндКод)
	
	///+ГомзМА 21.02.2024 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "v1/product/" + ИндКод + "/last_date/tabnum";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");

		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("id", ИндКод);
		
		// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		//Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		Ответ = Соединение.Получить(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение

		Возврат Неопределено;
	КонецПопытки;
	///-ГомзМА 21.02.2024

КонецФункции

Функция текстРекомендуемоеМестоХранения()
	
	///+ГомзМА 20.05.2024
	Текстзапроса = "ВЫБРАТЬ
				   |	Номенклатура.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ВТ_Номенклатура
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.Код = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
				   |		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ 1
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_данныеНоменклатур.индкод) КАК Количество,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |СГРУППИРОВАТЬ ПО
				   |	ВТ_данныеНоменклатур.Адрес,
				   |	ВТ_данныеНоменклатур.Склад,
				   |	ВТ_данныеНоменклатур.Город,
				   |	ВТ_данныеНоменклатур.Поддон
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Количество УБЫВ";
	Возврат Текстзапроса;
	///-ГомзМА 20.05.2024

КонецФункции

Функция ПолучитьДанныеОТоваре(Партия)
	///++ МазинЕС 23-07-2024

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПродажаЗапчастейТаблица.Товар КАК Товар,
	|	ПродажаЗапчастейТаблица.Партия КАК Партия,
	|	ПродажаЗапчастейТаблица.Ссылка КАК Ссылка,
	|	ПродажаЗапчастейТаблица.СтатусТовара КАК СтатусТовара,
	|	ПродажаЗапчастей.ЗаказКлиента.Номер КАК ЗаказКлиентаНомер
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|		ПО ПродажаЗапчастейТаблица.Ссылка = ПродажаЗапчастей.Ссылка
	|ГДЕ
	|	ПродажаЗапчастейТаблица.Партия.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", Партия);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	Текст = ""; 

	Структура = Новый Структура;

	Если РезультатЗапроса.Пустой() Тогда
		Структура.Вставить("Продан", "");
		Структура.Вставить("Выдан", "");
		Структура.Вставить("ЗаказКлиентаНомер", "");
	КонецЕсли;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Структура.Вставить("Продан", "В продаже");
		Структура.Вставить("ЗаказКлиентаНомер", ВыборкаДетальныеЗаписи.ЗаказКлиентаНомер);
		Если ВыборкаДетальныеЗаписи.СтатусТовара Тогда
			Структура.Вставить("Выдан", "Выдан");
		Иначе
			Структура.Вставить("Выдан", "На складе");
		КонецЕсли;
	КонецЦикла;

	Возврат Структура;
	 
	//-- МазинЕС 23-07-2024
КонецФункции

#КонецОбласти

