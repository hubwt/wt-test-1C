#Область ОбработчикиСобытий
Функция ПолучитьВсеЗаявкиGetAllApp(Запрос)
	МассивЗаявок = Новый Массив;
	Попытка

		СтрокаПоиска = "	И (ЗаказКлиента.Номер ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.КлиентНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.Клиент.ПолноеНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.НомерТелефона ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")";
		ЗапросЗаявок = Новый Запрос;

		Текст = "ВЫБРАТЬ
				|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
				|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
				|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
				|ПОМЕСТИТЬ ТелефоныСлужебные
				|ИЗ
				|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
				|ГДЕ
				|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
				|;
				|/////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 10000
				|	ЗаказКлиента.Номер КАК Номер,
				|	ЗаказКлиента.Дата КАК Дата,
				|	Выбор
				|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
				|			Тогда ЗаказКлиента.Клиент
				|		Иначе ЗаказКлиента.КлиентНаименование
				|	Конец КАК Клиент,
				|	Выбор
				|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
				|			Тогда ЗаказКлиента.Клиент.Код
				|		Иначе ""Не авторизован""
				|	Конец КАК КлиентКод,
				|	ЗаказКлиента.Состояние КАК Состояние,
				|	ЗаказКлиента.Ответственный КАК Ответственный,
				|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
				|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
				|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
				|	ТелефоныСлужебные.Ссылка.Код КАК КодСотрудника,
				|	ЗаказКлиента.Ссылка КАК Ссылка,
				|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ЗаказКлиента.Комментарий КАК Комментарий,
				|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ЗаказКлиента.НомерТелефона КАК Телефон,
				|	ЗаказКлиента.WTPanel КАК WTPanel,
				|	АвтономерЗаписи() КАК НомерЗаписи,
				|ЗаказКлиента.СтатусыДействия.Порядок КАК СтатусыДействия,
				|ЗаказКлиента.ФинансовыеСтатусы.Порядок КАК ФинансовыеСтатусы,
				|ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком.Ссылка КАК СтатусОбработкиЗаявкиКладовщикомСсылка,
				|ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком.Порядок КАК СтатусОбработкиЗаявкиКладовщикомПорядок
				|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|		ЛЕВОЕ Соединение ТелефоныСлужебные КАк ТелефоныСлужебные
				|		По ЗаказКлиента.Ответственный = ТелефоныСлужебные.ссылка.пользователь
				|Где ЗаказКлиента.Дата > &ДатаОтсчёта
				|	И ЗаказКлиента.СуммаДокумента <> 0
				|
				|%2
				|
				|УПОРЯДОЧИТЬ ПО
				|	Номер УБЫВ
				|ИНДЕКСИРОВАТЬ ПО
				|	Дата
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ %1
				|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
				|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
				|	ВТ_ДанныеЗаявки.Номер КАК Номер,
				|	ВТ_ДанныеЗаявки.Дата КАК Дата,
				|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
				|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
				|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
				|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
				|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
				|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
				|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ВТ_ДанныеЗаявки.ТелефонСлужебный КАК ТелефонСлужебный,
				|	ВТ_ДанныеЗаявки.КодСотрудника КАК КодСотрудника,
				|	ВТ_ДанныеЗаявки.КлиентКод КАК КлиентКод,
				|	ВТ_ДанныеЗаявки.Телефон КАК Телефон,
				|ВТ_ДанныеЗаявки.СтатусОбработкиЗаявкиКладовщикомСсылка КАК СтатусОбработки,
				|ЕстьNull(ВТ_ДанныеЗаявки.СтатусОбработкиЗаявкиКладовщикомПорядок, 0) КАК СтатусОбработкиПорядок
				|ИЗ
				|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
				|ГДЕ
				|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи
				|	УПОРЯДОЧИТЬ ПО
				|	Дата УБЫВ";
		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), " ");
		Иначе
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), СтрокаПоиска);
			ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;
		ДатаОтсчёта = ТекущаяДата() - (3600 * 24 * 180);
		ЗапросЗаявок.УстановитьПараметр("ДатаОтсчёта", ДатаОтсчёта);
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);

		ОбщееКолво = 10000;

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), " ");
		Иначе
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), СтрокаПоиска);
			ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;
		ЗапросЗаявок.УстановитьПараметр("ДатаОтсчёта", ДатаОтсчёта);

		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));

		Иначе
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;
		ОбщееКолво = 10000;

		СписокПоиска = ЗапросЗаявок.Выполнить().Выгрузить();

		Для Каждого Результат Из СписокПоиска Цикл

			СтруктураЗаявок = Новый Структура;
			СтруктураЗаявок.Вставить("id", Строка(Результат.Номер));
			СтруктураЗаявок.Вставить("date", Строка(Результат.Дата));
			СтруктураСтатуса = Новый Структура;
			СтруктураСтатуса.Вставить("state_name", Строка(Результат.СтатусОбработки));
			СтруктураСтатуса.Вставить("state_number", Число(Результат.СтатусОбработкиПорядок) + 1);
			СтруктураЗаявок.Вставить("state", СтруктураСтатуса);

			СтруктураКлиента = Новый Структура;
			СтруктураКлиента.Вставить("name", Строка(Результат.Клиент));
			СтруктураКлиента.Вставить("id", Результат.КлиентКод);
			СтруктураКлиента.Вставить("phone", Результат.Телефон);
			СтруктураЗаявок.Вставить("client", СтруктураКлиента);

			СтруктураМенеджера = Новый Структура;
			СтруктураМенеджера.Вставить("name", Строка(Результат.Ответственный));
	//Менеджер = Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь", выборка.Ответственный).Код;
			СтруктураМенеджера.Вставить("id", Строка(Результат.КодСотрудника));
			СтруктураМенеджера.Вставить("phone", Строка(Результат.ТелефонСлужебный));
			СтруктураЗаявок.Вставить("manager", СтруктураМенеджера);
	
		//@skip-check query-in-loop
			//СтруктураВремени = ПолучитьВремяЗК(Результат.Ссылка);
			СтруктураЗаявок.Вставить("workers", 0);
			СтруктураЗаявок.Вставить("in_work", 0);
			//@skip-check query-in-loop

			СтруктураЗаявок.Вставить("summ", Результат.СуммаДокумента);
			МассивЗаявок.Добавить(СтруктураЗаявок);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);
		СтруктураИнфо.Вставить("applications", МассивЗаявок);

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураОтвета.Вставить("applications", МассивЗаявок);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ПоказателиСкладаGET(Запрос)
	/// +++ Комлев 30/09/24 +++
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ЗаказКлиентаТовары.Номенклатура), 0) КАК Количество,
		|	ЕСТЬNULL(МАКСИМУМ(РегистрНакопления1ОстаткиИОбороты.КолвоКонечныйОстаток), 0) КАК КолвоКонечныйОстаток
		|ПОМЕСТИТЬ ТоварыСпрашивают
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ),
		|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Авто,,) КАК РегистрНакопления1ОстаткиИОбороты
		|		ПО (ЗаказКлиентаТовары.Номенклатура = РегистрНакопления1ОстаткиИОбороты.Товар)
		|ГДЕ
		|	ЗаказКлиентаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И НАЧАЛОПЕРИОДА(РегистрНакопления1ОстаткиИОбороты.ПериодДень, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗаказКлиентаТовары.Ссылка.Дата,
		|		ДЕНЬ)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеЗапчастейТаблица.Товар КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ПоступлениеЗапчастейТаблица.Код), 0) КАК Количество
		|ПОМЕСТИТЬ УчтенныйТоварИзСпискаСпрашивают
		|ИЗ
		|	Документ.ПоступлениеЗапчастей.Таблица КАК ПоступлениеЗапчастейТаблица
		|ГДЕ
		|	ПоступлениеЗапчастейТаблица.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И ПоступлениеЗапчастейТаблица.Товар В
		|		(ВЫБРАТЬ
		|			ТоварыСпрашивают.Товар КАК Товар
		|		ИЗ
		|			ТоварыСпрашивают КАК ТоварыСпрашивают)
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеЗапчастейТаблица.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ВЫБОР
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток > ТоварыСпрашивают.Количество
		|			ТОГДА 1
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток >= ТоварыСпрашивают.Количество
		|		И УчтенныйТоварИзСпискаСпрашивают.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))) > 1
		|				ТОГДА 1
		|			ИНАЧЕ ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))
		|		КОНЕЦ
		|	КОНЕЦ, 0)) КАК ЧИСЛО(10, 2)) КАК КоэфДень,
		|	СУММА(ТоварыСпрашивают.Количество) КАК КоличествоСпрашиваютДень,
		|	СУММА(УчтенныйТоварИзСпискаСпрашивают.Количество) КАК КоличествоУчтенногоДень
		|ПОМЕСТИТЬ ПоказателиДень
		|ИЗ
		|	ТоварыСпрашивают КАК ТоварыСпрашивают
		|		ПОЛНОЕ СОЕДИНЕНИЕ УчтенныйТоварИзСпискаСпрашивают КАК УчтенныйТоварИзСпискаСпрашивают
		|		ПО ТоварыСпрашивают.Товар = УчтенныйТоварИзСпискаСпрашивают.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗаказКлиентаТовары.Номенклатура) КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ЗаказКлиентаТовары.Номенклатура), 0) КАК Количество,
		|	ЕСТЬNULL(РегистрНакопления1ОстаткиИОбороты.КолвоКонечныйОстаток, 0) КАК КолвоКонечныйОстаток
		|ПОМЕСТИТЬ ТоварыСпрашиваютНЕДЕЛЯ
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&Дата, НЕДЕЛЯ),
		|			КОНЕЦПЕРИОДА(&Дата, НЕДЕЛЯ), Авто,,) КАК РегистрНакопления1ОстаткиИОбороты
		|		ПО ЗаказКлиентаТовары.Номенклатура = РегистрНакопления1ОстаткиИОбороты.Товар
		|ГДЕ
		|	ЗаказКлиентаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, НЕДЕЛЯ) И КОНЕЦПЕРИОДА(&Дата, НЕДЕЛЯ)
		|	И НАЧАЛОПЕРИОДА(РегистрНакопления1ОстаткиИОбороты.ПериодДень, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗаказКлиентаТовары.Ссылка.Дата,
		|		ДЕНЬ)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЕСТЬNULL(РегистрНакопления1ОстаткиИОбороты.КолвоКонечныйОстаток, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеЗапчастейТаблица.Товар КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ПоступлениеЗапчастейТаблица.Код), 0) КАК Количество
		|ПОМЕСТИТЬ УчтенныйТоварИзСпискаСпрашиваютНЕДЕЛЯ
		|ИЗ
		|	Документ.ПоступлениеЗапчастей.Таблица КАК ПоступлениеЗапчастейТаблица
		|ГДЕ
		|	ПоступлениеЗапчастейТаблица.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, НЕДЕЛЯ) И КОНЕЦПЕРИОДА(&Дата, НЕДЕЛЯ)
		|	И ПоступлениеЗапчастейТаблица.Товар В
		|		(ВЫБРАТЬ
		|			ТоварыСпрашивают.Товар КАК Товар
		|		ИЗ
		|			ТоварыСпрашиваютНЕДЕЛЯ КАК ТоварыСпрашивают)
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеЗапчастейТаблица.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ВЫБОР
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток > ТоварыСпрашивают.Количество
		|			ТОГДА 1
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток >= ТоварыСпрашивают.Количество
		|		И УчтенныйТоварИзСпискаСпрашивают.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))) > 1
		|				ТОГДА 1
		|			ИНАЧЕ ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))
		|		КОНЕЦ
		|	КОНЕЦ, 0)) КАК ЧИСЛО(10, 2)) КАК КоэфДень,
		|	СУММА(ТоварыСпрашивают.Количество) КАК КоличествоСпрашиваютДень,
		|	СУММА(УчтенныйТоварИзСпискаСпрашивают.Количество) КАК КоличествоУчтенногоДень
		|ПОМЕСТИТЬ ПоказателиНЕДЕЛЯ
		|ИЗ
		|	ТоварыСпрашиваютНЕДЕЛЯ КАК ТоварыСпрашивают
		|		ПОЛНОЕ СОЕДИНЕНИЕ УчтенныйТоварИзСпискаСпрашиваютНЕДЕЛЯ КАК УчтенныйТоварИзСпискаСпрашивают
		|		ПО ТоварыСпрашивают.Товар = УчтенныйТоварИзСпискаСпрашивают.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗаказКлиентаТовары.Номенклатура) КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ЗаказКлиентаТовары.Номенклатура), 0) КАК Количество,
		|	ЕСТЬNULL(РегистрНакопления1ОстаткиИОбороты.КолвоКонечныйОстаток, 0) КАК КолвоКонечныйОстаток
		|ПОМЕСТИТЬ ТоварыСпрашиваютМЕСЯЦ
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ),
		|			КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ), Авто,,) КАК РегистрНакопления1ОстаткиИОбороты
		|		ПО ЗаказКлиентаТовары.Номенклатура = РегистрНакопления1ОстаткиИОбороты.Товар
		|ГДЕ
		|	ЗаказКлиентаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
		|	И НАЧАЛОПЕРИОДА(РегистрНакопления1ОстаткиИОбороты.ПериодДень, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗаказКлиентаТовары.Ссылка.Дата,
		|		ДЕНЬ)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЕСТЬNULL(РегистрНакопления1ОстаткиИОбороты.КолвоКонечныйОстаток, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеЗапчастейТаблица.Товар КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ПоступлениеЗапчастейТаблица.Код), 0) КАК Количество
		|ПОМЕСТИТЬ УчтенныйТоварИзСпискаСпрашиваютМЕСЯЦ
		|ИЗ
		|	Документ.ПоступлениеЗапчастей.Таблица КАК ПоступлениеЗапчастейТаблица
		|ГДЕ
		|	ПоступлениеЗапчастейТаблица.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
		|	И ПоступлениеЗапчастейТаблица.Товар В
		|		(ВЫБРАТЬ
		|			ТоварыСпрашивают.Товар КАК Товар
		|		ИЗ
		|			ТоварыСпрашиваютМЕСЯЦ КАК ТоварыСпрашивают)
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеЗапчастейТаблица.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ВЫБОР
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток > ТоварыСпрашивают.Количество
		|			ТОГДА 1
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток >= ТоварыСпрашивают.Количество
		|		И УчтенныйТоварИзСпискаСпрашивают.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))) > 1
		|				ТОГДА 1
		|			ИНАЧЕ ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))
		|		КОНЕЦ
		|	КОНЕЦ, 0)) КАК ЧИСЛО(10, 2)) КАК КоэфДень,
		|	СУММА(ТоварыСпрашивают.Количество) КАК КоличествоСпрашиваютДень,
		|	СУММА(УчтенныйТоварИзСпискаСпрашивают.Количество) КАК КоличествоУчтенногоДень
		|ПОМЕСТИТЬ ПоказателиМЕСЯЦ
		|ИЗ
		|	ТоварыСпрашиваютМЕСЯЦ КАК ТоварыСпрашивают
		|		ПОЛНОЕ СОЕДИНЕНИЕ УчтенныйТоварИзСпискаСпрашиваютМЕСЯЦ КАК УчтенныйТоварИзСпискаСпрашивают
		|		ПО ТоварыСпрашивают.Товар = УчтенныйТоварИзСпискаСпрашивают.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПоказателиДень.КоэфДень, 0) КАК КоэфДень,
		|	ЕСТЬNULL(ПоказателиДень.КоличествоСпрашиваютДень, 0) КАК КоличествоСпрашиваютДень,
		|	ЕСТЬNULL(ПоказателиДень.КоличествоУчтенногоДень, 0) КАК КоличествоУчтенногоДень,
		|	ЕСТЬNULL(ПоказателиНЕДЕЛЯ.КоличествоСпрашиваютДень, 0) КАК КоличествоСпрашиваютНеделя,
		|	ЕСТЬNULL(ПоказателиНЕДЕЛЯ.КоличествоУчтенногоДень, 0) КАК КоличествоУчтенногоНеделя,
		|	ЕСТЬNULL(ПоказателиМЕСЯЦ.КоэфДень, 0) КАК КоэфМесяц,
		|	ЕСТЬNULL(ПоказателиМЕСЯЦ.КоличествоСпрашиваютДень, 0) КАК КоличествоСпрашиваютМесяц,
		|	ЕСТЬNULL(ПоказателиМЕСЯЦ.КоличествоУчтенногоДень, 0) КАК КоличествоУчтенногоМесяц,
		|	ЕСТЬNULL(ПоказателиНЕДЕЛЯ.КоэфДень, 0) КАК КоэфНеделя
		|ИЗ
		|	ПоказателиДень КАК ПоказателиДень,
		|	ПоказателиНЕДЕЛЯ КАК ПоказателиНЕДЕЛЯ,
		|	ПоказателиМЕСЯЦ КАК ПоказателиМЕСЯЦ";

		Запрос.УстановитьПараметр("Дата", ТекущаяДата());

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		СтруктураПоказатели = Новый Структура;
		Пока Выборка.Следующий() Цикл
			СтруктураПоказатели.Вставить("ratio_day", Число(Выборка.КоэфДень));
			СтруктураПоказатели.Вставить("count_from_app_day", Число(Выборка.КоличествоСпрашиваютДень));
			СтруктураПоказатели.Вставить("count_registered_day", Число(Выборка.КоличествоУчтенногоДень));

			СтруктураПоказатели.Вставить("ratio_week", Число(Выборка.КоэфДень));
			СтруктураПоказатели.Вставить("count_from_app_week", Число(Выборка.КоличествоСпрашиваютНеделя));
			СтруктураПоказатели.Вставить("count_registered_week", Число(Выборка.КоличествоУчтенногоНеделя));
			СтруктураПоказатели.Вставить("ratio_month", Число(Выборка.КоэфМесяц));
			СтруктураПоказатели.Вставить("count_from_app_month", Число(Выборка.КоличествоСпрашиваютМесяц));
			СтруктураПоказатели.Вставить("count_registered_month", Число(Выборка.КоличествоУчтенногоМесяц));
		КонецЦикла;

		Ответ = Новый HTTPСервисОтвет(200);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураПоказатели);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ТекстОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, " ");
		ЗаписатьJSON(ЗаписьJSON, ТекстОшибки);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
/// --- Комлев 30/09/24 ---
КонецФункции
Функция ПолучитьВсеЗаявкиПоСтатусамИПоискомGET(Запрос)
	/// +++ Комлев 30/09/24 +++
	Попытка

		СтрокаПоиска = "	И (ЗаказКлиента.Номер ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.КлиентНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.Клиент.ПолноеНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.НомерТелефона ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")";
		ЗапросЗаявок = Новый Запрос;

		Текст = "ВЫБРАТЬ
				|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
				|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
				|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
				|ПОМЕСТИТЬ ТелефоныСлужебные
				|ИЗ
				|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
				|ГДЕ
				|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
				|;
				|/////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 10000
				|	ЗаказКлиента.Номер КАК Номер,
				|	ЗаказКлиента.Дата КАК Дата,
				|	Выбор
				|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
				|			Тогда ЗаказКлиента.Клиент
				|		Иначе ЗаказКлиента.КлиентНаименование
				|	Конец КАК Клиент,
				|	Выбор
				|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
				|			Тогда ЗаказКлиента.Клиент.Код
				|		Иначе ""Не авторизован""
				|	Конец КАК КлиентКод,
				|	ЗаказКлиента.Состояние КАК Состояние,
				|	ЗаказКлиента.Ответственный КАК Ответственный,
				|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
				|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
				|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
				|	ТелефоныСлужебные.Ссылка.Код КАК КодСотрудника,
				|	ЗаказКлиента.Ссылка КАК Ссылка,
				|	ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком КАК СтатусОбработкиЗаявкиКладовщиком,
				|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ЗаказКлиента.Комментарий КАК Комментарий,
				|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ЗаказКлиента.НомерТелефона КАК Телефон,
				|	ЗаказКлиента.WTPanel КАК WTPanel,
				|	АвтономерЗаписи() КАК НомерЗаписи,
				|ЗаказКлиента.СтатусыДействия.Порядок КАК СтатусыДействия,
				|ЗаказКлиента.ФинансовыеСтатусы.Порядок КАК ФинансовыеСтатусы,
				|ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком.Ссылка КАК СтатусОбработкиЗаявкиКладовщикомСсылка,
				|ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком.Порядок КАК СтатусОбработкиЗаявкиКладовщикомПорядок
				|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|		ЛЕВОЕ Соединение ТелефоныСлужебные КАк ТелефоныСлужебные
				|		По ЗаказКлиента.Ответственный = ТелефоныСлужебные.ссылка.пользователь
				|Где ЗаказКлиента.Дата > &ДатаОтсчёта
				|И ЗаказКлиента.СуммаДокумента <> 0
				|
				|%2
				|%3
				|УПОРЯДОЧИТЬ ПО
				|	Номер УБЫВ
				|ИНДЕКСИРОВАТЬ ПО
				|	Дата
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ %1
				|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
				|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
				|	ВТ_ДанныеЗаявки.Номер КАК Номер,
				|	ВТ_ДанныеЗаявки.Дата КАК Дата,
				|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
				|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
				|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
				|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
				|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
				|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
				|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ВТ_ДанныеЗаявки.СтатусОбработкиЗаявкиКладовщиком КАК СтатусОбработкиЗаявкиКладовщиком,
				|	ЕСТЬNULL(ВТ_ДанныеЗаявки.СтатусОбработкиЗаявкиКладовщикомПорядок, 0) КАК СтатусОбработкиЗаявкиКладовщикомПорядок,
				|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ВТ_ДанныеЗаявки.ТелефонСлужебный КАК ТелефонСлужебный,
				|	ВТ_ДанныеЗаявки.КодСотрудника КАК КодСотрудника,
				|	ВТ_ДанныеЗаявки.WTPanel КАК WTPanel,
				|	ВТ_ДанныеЗаявки.КлиентКод КАК КлиентКод,
				|	ВТ_ДанныеЗаявки.Телефон КАК Телефон
				|ИЗ
				|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
				|ГДЕ
				|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи
				|	УПОРЯДОЧИТЬ ПО
				|	Дата УБЫВ";

		СтрокаФильтра = " ";
		ЗначениеФильтра = Число(Запрос.ПараметрыURL["filter_status"]);
		Если ЗначениеФильтра = 3 Тогда
			СтрокаФильтра = " И ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаявокКладовщиком.Завершено)";
		ИначеЕсли ЗначениеФильтра = 1 Тогда
			СтрокаФильтра = " И ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаявокКладовщиком.НоваяЗаявка)";
		ИначеЕсли ЗначениеФильтра = 2 Тогда
			СтрокаФильтра = " И ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаявокКладовщиком.ВРаботе)";
		ИначеЕсли ЗначениеФильтра = 4 Тогда
			СтрокаФильтра = " И ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаявокКладовщиком.Отменено)";
		КонецЕсли;

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), " ", СтрокаФильтра);
		Иначе
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), СтрокаПоиска, СтрокаФильтра);
			ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;
		ДатаОтсчёта = ТекущаяДата() - (3600 * 24 * 2000);
		ЗапросЗаявок.УстановитьПараметр("ДатаОтсчёта", ДатаОтсчёта);
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		ОбщееКолво = ЗапросЗаявок.Выполнить().Выбрать().Количество();

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), " ", СтрокаФильтра);
		Иначе
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), СтрокаПоиска, СтрокаФильтра);
			ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;
		ЗапросЗаявок.УстановитьПараметр("ДатаОтсчёта", ДатаОтсчёта);

		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));

		Иначе
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;

		СписокПоиска = ЗапросЗаявок.Выполнить().Выгрузить();
		МассивЗаявок = Новый Массив;
		Для Каждого Результат Из СписокПоиска Цикл

			СтруктураЗаявок = Новый Структура;
			СтруктураЗаявок.Вставить("id", Строка(Результат.Номер));
			СтруктураЗаявок.Вставить("date", Строка(Результат.Дата));
			СтруктураСтатуса = Новый Структура;
			СтруктураСтатуса.Вставить("state_name", Строка(Результат.СтатусОбработкиЗаявкиКладовщиком));
			СтруктураСтатуса.Вставить("state_number", Число(Результат.СтатусОбработкиЗаявкиКладовщикомПорядок) + 1);
			СтруктураЗаявок.Вставить("state", СтруктураСтатуса);

			СтруктураКлиента = Новый Структура;
			СтруктураКлиента.Вставить("name", Строка(Результат.Клиент));
			СтруктураКлиента.Вставить("id", Результат.КлиентКод);
			СтруктураКлиента.Вставить("phone", Результат.Телефон);
			СтруктураЗаявок.Вставить("client", СтруктураКлиента);

			СтруктураМенеджера = Новый Структура;
			СтруктураМенеджера.Вставить("name", Строка(Результат.Ответственный));
			СтруктураМенеджера.Вставить("id", Строка(Результат.КодСотрудника));
			СтруктураМенеджера.Вставить("phone", Строка(Результат.ТелефонСлужебный));
			СтруктураЗаявок.Вставить("manager", СтруктураМенеджера);

			СтруктураЗаявок.Вставить("workers", 0);
			СтруктураЗаявок.Вставить("in_work", 0);
			СтруктураЗаявок.Вставить("summ", Результат.СуммаДокумента);
			МассивЗаявок.Добавить(СтруктураЗаявок);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);
		СтруктураИнфо.Вставить("applications", МассивЗаявок);

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураОтвета.Вставить("applications", МассивЗаявок);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
	/// --- Комлев 30/09/24 ---
КонецФункции

Функция ПроверкаНаТоварProductOrNot(Запрос)
	// ++ МазинЕС 14-10-24

	Товар = Строка(Запрос.ПараметрыURL["product"]);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндКод.Код КАК Код
	|ИЗ
	|	Справочник.ИндКод КАК ИндКод
	|ГДЕ
	|	ИндКод.Наименование = &Товар";

	Запрос.УстановитьПараметр("Товар", Товар);
	Структура = Новый Структура;

	Если Не Запрос.Выполнить().Пустой() Тогда
		Структура.Вставить("status", Истина);
	Иначе
		Структура.Вставить("status", Ложь);
	КонецЕсли;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, Структура);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
// -- МазинЕС 14-10-24
КонецФункции

Функция ПроверкаНаПолкуИлиСтелажShelfOrShelving(Запрос)
		// ++ МазинЕС 14-10-24
	Место = Строка(Запрос.ПараметрыURL["place"]);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Стеллаж.Код КАК Код
	|ИЗ
	|	Справочник.Стеллаж КАК Стеллаж
	|ГДЕ
	|	Стеллаж.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", Место);

	РезультатЗапроса = Запрос.Выполнить();

	Структура = Новый Структура;

	Если Не РезультатЗапроса.Пустой() Тогда

		Структура.Вставить("status", Число(2));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поддоны.Код КАК Код
	|ИЗ
	|	Справочник.Поддоны КАК Поддоны
	|ГДЕ
	|	Поддоны.Наименование = &Поддон";

	Запрос.УстановитьПараметр("Поддон", Место);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		Структура.Вставить("status", Число(1));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	Иначе
		Структура.Вставить("status", Число(0));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли; 

// -- МазинЕС 14-10-24
КонецФункции
Функция ПолучитьКоличествоСвободныхЗаявокИЗаказНарядовget_count_free_apps_orders(Запрос)

	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗаказКлиента.Ссылка) КАК КоличествоЗаявок
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Ответственные КАК ЗаказКлиентаОтветственные
		|		ПО ЗаказКлиента.Ссылка = ЗаказКлиентаОтветственные.Ссылка
		|ГДЕ
		|	ЗаказКлиентаОтветственные.Ссылка ЕСТЬ NULL
		|	И ЗаказКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗаказНаряд.Ссылка) КАК КоличествоНарядов
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Ответственные КАК ЗаказНарядОтветственные
		|		ПО (ЗаказНаряд.Ссылка = ЗаказНарядОтветственные.Ссылка)
		|ГДЕ
		|	ЗаказНарядОтветственные.Ссылка ЕСТЬ NULL
		|	И ЗаказНаряд.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - 2419200);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));

		Пакеты = Запрос.ВыполнитьПакет();
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("count_free_app", 0);
		СтруктураОтвета.Вставить("count_free_order", 0);

		ВыборкаЗаявки = Пакеты[0].Выбрать();
		ВыборкаНаряды = Пакеты[1].Выбрать();
		Пока ВыборкаЗаявки.Следующий() Цикл
			СтруктураОтвета.count_free_app = ВыборкаЗаявки.КоличествоЗаявок;
		КонецЦикла;

		Пока ВыборкаНаряды.Следующий() Цикл
			СтруктураОтвета.count_free_order = ВыборкаНаряды.КоличествоНарядов;
		КонецЦикла;
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, Информация.Описание);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;

КонецФункции
Функция ИзменитьСтатусСборкиСhange_build_status_app(Запрос)

	Попытка
		Тело = Запрос.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);
		Структура  = ПрочитатьJSON(ЧтениеJSON);
		Автор =  Справочники.Сотрудники.НайтиПоКоду(Структура.author).Наименование;
		Заявка =  Документы.ЗаказКлиента.НайтиПоНомеру(Структура.id);
		Статус = Перечисления.СтатусыОбработкиЗаявокКладовщиком.Получить(Число(Структура.state_build) - 1);

		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.СтатусОбработкиЗаявкиКладовщиком = Статус;
		Событие = " изменил статус обработки кладовщиком " + Статус;
		ЗаписьЛога(Событие, Заявка, Автор);
		ЗаявкаОбъект.Записать();
		Ответ = Новый HTTPСервисОтвет(204);
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		СтрокаОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, "");
		Ответ.УстановитьТелоИзСтроки("" + СтрокаОшибки);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
КонецФункции
Функция ПолучитьЗаявкуGetApp(Запрос)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|	И СотрудникиКонтактнаяИнформация.Ссылка.Пользователь = &Код";
	
	ЗапросНомера = Новый Запрос;
	ЗапросНомера.Текст = ТекстЗапроса;
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Попытка
		Выборка = Запросзаявки.Выполнить().Выбрать();
		Если выборка.Количество() = 0 Тогда
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			Информация = ИнформацияОбОшибке();
			ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса",
			"Данная заявка не обнаружена"));
			
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
			Возврат Ответ;
		КонецЕсли;
		КоличествоСФото   = 0;
		КоличествоТоваров = 0;
		МассивТоваров = Новый Массив;
		СтруктураИнфо = Новый Структура;
		МассивПолок = Новый Массив;
		//Пока выборка.Следующий() Цикл 
		выборка.Следующий();
		
		Счет = ПроверкаСчета(Выборка.Ссылка);
		
		СтруктураИнфо.Вставить("id", Строка(выборка.НомерЗаявки));
		СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
		СтруктураИнфо.Вставить("condition", Строка(выборка.Состояние));
		СтруктураИнфо.Вставить("fin_status", Строка(выборка.ФинансовыеСтатусы));
		СтруктураИнфо.Вставить("action_status", Строка(выборка.СтатусыДействия));
		
		СтруктураКлиента = Новый Структура;
		СтруктураКлиента.Вставить("name", Строка(выборка.Клиент));
		СтруктураКлиента.Вставить("id", Строка(выборка.КлиентКод));
		СтруктураКлиента.Вставить("phone", выборка.Телефон);
		СтруктураИнфо.Вставить("client", СтруктураКлиента);
		
		СтруктураМенеджера = Новый Структура;
		СтруктураМенеджера.Вставить("name", Строка(выборка.Ответственный));
		//Менеджер = Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь", выборка.Ответственный).Код;
		СтруктураМенеджера.Вставить("id", Строка(выборка.КодСотрудника));
		СтруктураМенеджера.Вставить("phone", Строка(выборка.ТелефонСлужебный));
		СтруктураИнфо.Вставить("manager", СтруктураМенеджера);
		СтруктураИнфо.Вставить("sale", Строка(выборка.НомерПродажи));
		
		СтруктураИнфо.Вставить("sum", выборка.СуммаДокумента);
		СтруктураИнфо.Вставить("callDate", Строка(выборка.ДатаСвязи));
		//СтруктураИнфо.Вставить("processing", Строка(выборка.СтатусОбработки));
		//СтруктураИнфо.Вставить("sub_processing", Строка(выборка.подСтатусОбработки));
		
		СтруктураСтатуса = Новый Структура;
		СтруктураСтатуса.Вставить("state_build_name", Строка(выборка.СтатусСборки));
		СтруктураСтатуса.Вставить("state_build_number", Число(выборка.СтатусОбработкиПорядок) + 1);
		СтруктураИнфо.Вставить("state_build", СтруктураСтатуса);
		СтруктураИнфо.Вставить("porter", Строка(выборка.ОтветственныйЗаОбработку));
		СтруктураИнфо.Вставить("comment", Строка(выборка.Комментарий));
		СтруктураИнфо.Вставить("numCheck", Строка(?(Счет.Ссылка = Неопределено, "", Счет.Ссылка.Номер)));
		//ВыборкаТоваров = выборка.Товары.Выбрать();
		ТЗ_Ответственные = выборка.Ответственные.Выгрузить();
		МассивОтветственных = Новый Массив;
		Для Каждого стр Из ТЗ_Ответственные Цикл
			ЗапросНомера.УстановитьПараметр("Код", стр.Сотрудник);
			//@skip-check query-in-loop
			ВЫборкаНомера = ЗапросНомера.Выполнить().Выбрать();
			ВЫборкаНомера.Следующий();
			СтруктураОтветственные = Новый Структура;
			СтруктураОтветственные.Вставить("name", Строка(стр.Сотрудник));
			//@skip-check reading-attribute-from-database
			СтруктураОтветственные.Вставить("id", Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",
			стр.Сотрудник).Код));
			СтруктураОтветственные.Вставить("phone", ВыборкаНомера.Представление);
			СтруктураОтветственные.Вставить("role", Строка(стр.Роль));
			МассивОтветственных.Добавить(СтруктураОтветственные);
		КонецЦикла;
		СтруктураИнфо.Вставить("workers", МассивОтветственных);
		ТЗ_Товары = выборка.Товары.Выгрузить();
		ТЗ_ТоварыИзПродажи = выборка.Таблица.Выгрузить();
		ТЗ_Товары.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
		ТЗ_Товары.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;
		
		//ИндКоды = тз.ВыгрузитьКолонку("Партия2");
		
		Итер = 0;
		СуммаТоваров = 0;
		Для Каждого стр Из ТЗ_Товары Цикл
			Если стрНайти(стр.Партия, "_") <> 0 Тогда
				МассивФото = Новый массив;
				//Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
				//Если фотки <> Неопределено И фотки.Количество() > 0 Тогда
				ИндКоды =  Новый массив;
				ИндКоды.Добавить(стр.Партия2);
				Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
				НайденныеФотки = Новый Массив;
				//КоличествоСФото = КоличествоСФото + 1;
				Попытка
					
					НайденныеФотки = Фотки[0].urls;
					//МассивФото = Новый массив;
					//Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда
					
					//стр.колфото = 1;
					
					Для Каждого Фотка Из НайденныеФотки Цикл
						Текст = "";
						//Текст = "https://wt10.ru" + Фотка;
						Текст = Фотка;
						МассивФото.Добавить(Текст);
					КонецЦикла;
					//КонецЕсли;
				Исключение
					МассивФото.Добавить();
				КонецПопытки;
				//КонецЕсли;
				итер = итер + 1;
				//КонецЕсли;
				
				Код = стр.Код;
				Пока Лев(Код, 1) = "0" Цикл
					Код = Прав(Код, СтрДлина(Код) - 1);
				КонецЦикла;
				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
				СтруктураТоваров.Вставить("name", Строка(стр.Номенклатура));
				СтруктураТоваров.Вставить("type", "PRODUCT");
				СтруктураТоваров.Вставить("article", Строка(стр.Номенклатура.Артикул));
				СтруктураТоваров.Вставить("price", стр.Цена);
				СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
				СтруктураТоваров.Вставить("code", Строка("00" + Код));
				СтруктураТоваров.Вставить("id", Строка(стр.Партия));
				СтруктураТоваров.Вставить("stat", стр.Отменено);
				СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
				
				/// Комлев 27/08/24 +++ 
				Если Строка(выборка.НомерПродажи) <> "" Тогда
					НайденаяСтрока = ТЗ_ТоварыИзПродажи.Найти(стр.Партия, "Партия");
					Если НайденаяСтрока <> Неопределено Тогда
						Если НайденаяСтрока.СтатусТовара = Истина Тогда
							СтруктураТоваров.Вставить("issued_status", Истина);
						Иначе
							СтруктураТоваров.Вставить("issued_status", Ложь);
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтруктураТоваров.Вставить("issued_status", Ложь);
				КонецЕсли;
				
				/// Комлев 27/08/24 ---
				
				СуммаТоваров = СуммаТоваров + (стр.Цена * стр.Количество);
				//СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
				//@skip-check query-in-loop
				СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
				//@skip-check query-in-loop
				СтруктураТоваров.Вставить("k", ЕстьНаКСкладе(стр.Номенклатура));
				Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
					НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.индкод.Установить(стр.Партия);
					НаборЗаписей.Прочитать();
					Товар = НаборЗаписей[0];
					СтруктураТоваров.Вставить("shelf", Строка(Товар.стеллаж));
				Иначе
					СтруктураТоваров.Вставить("shelf", Строка(стр.Номенклатура.МестоНаСкладе2));
				КонецЕсли;
				
				Если Не стр.Отменено Тогда
					КоличествоТоваров = КоличествоТоваров + 1;
				КонецЕсли;
				СтруктураТоваров.Вставить("photos", МассивФото);
				МассивТоваров.Добавить(СтруктураТоваров);
				
			Иначе
				//				Код = Стр.Код;
				//				МассивФото = Новый массив;
				//				Пока Лев(Код, 1) = "0" Цикл
				//					Код = Прав(Код, СтрДлина(Код) - 1);
				//				КонецЦикла;
				//				Код = "0" + код;
				
				ИндКоды =  Новый массив;
				ИндКоды.Добавить(Стр.Код);
				Попытка
					Попытка
						Фотки = РаботаССайтомWT.ПолучениеФотокарточек(ИндКоды);
						НайденныеФотки = Фотки[0].images.common;
						Если Фотки[0].images.main <> "" Тогда
							НайденныеФотки.Вставить(0, Фотки[0].images.main);
						КонецЕсли;
					Исключение
						НайденныеФотки = Новый массив;
					КонецПопытки;
					МассивФото = Новый массив;
					
					Текст = НайденныеФотки;
					Если НайденныеФотки <> Неопределено И НайденныеФотки <> "" Тогда
						
						//	стр.колфото = 1;  
						
						Для Каждого Фотка Из НайденныеФотки Цикл
							Текст = "";
							//Текст = "https://wt10.ru" + Фотка; 
							Текст = Фотка;
							МассивФото.Добавить(Текст);
						КонецЦикла;
					КонецЕсли;
					
				Исключение
					МассивФото.Добавить("");
				КонецПопытки;
				
				//итер = итер + 1;
				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
				СтруктураТоваров.Вставить("name", Строка(стр.Номенклатура));
				СтруктураТоваров.Вставить("type", "CARD_PRODUCT");
				СтруктураТоваров.Вставить("article", Строка(стр.Номенклатура.Артикул));
				СтруктураТоваров.Вставить("price", стр.Цена);
				СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
				СтруктураТоваров.Вставить("code", Строка("0" + Код));
				СтруктураТоваров.Вставить("id", стр.Код);
				СтруктураТоваров.Вставить("stat", стр.Отменено);
				СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
				
				/// Комлев 27/08/24 +++ 
				Если Строка(выборка.НомерПродажи) <> "" Тогда
					НайденаяСтрока = ТЗ_ТоварыИзПродажи.Найти(Стр.Номенклатура, "Товар");
					Если НайденаяСтрока <> Неопределено Тогда
						Если НайденаяСтрока.СтатусТовара = Истина Тогда
							СтруктураТоваров.Вставить("issued_status", Истина);
						Иначе
							СтруктураТоваров.Вставить("issued_status", Ложь);
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтруктураТоваров.Вставить("issued_status", Ложь);
				КонецЕсли;
				
				/// Комлев 27/08/24 ---
				
				СуммаТоваров = СуммаТоваров + (стр.Цена * стр.Количество);
				//СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
				//@skip-check query-in-loop
				СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
				//@skip-check query-in-loop
				СтруктураТоваров.Вставить("k", ЕстьНаКСкладе(стр.Номенклатура));
				
				//@skip-check query-in-loop
				Кодноменк = ПолучитьКоличествоУчтенногоТовара(стр.Код);
				СтруктураТоваров.Вставить("count_registered", Число(Кодноменк));
				Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
					НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.индкод.Установить(стр.Партия);
					НаборЗаписей.Прочитать();
					Товар = НаборЗаписей[0];
					СтруктураТоваров.Вставить("shelf", Строка(Товар.стеллаж));
				Иначе
					СтруктураТоваров.Вставить("shelf", Строка(стр.Номенклатура.МестоНаСкладе2));
				КонецЕсли;
				
				Если Не стр.Отменено Тогда
					КоличествоТоваров = КоличествоТоваров + 1;
				КонецЕсли;
				СтруктураТоваров.Вставить("photos", МассивФото); 
				// Комлев АА +++
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИндНомер.индкод КАК индкод,
				|	ИндНомер.индкод.Владелец КАК индкодВладелец,
				|	ИндНомер.Стеллаж КАК Стеллаж,
				|	ИндНомер.индкод.Владелец.Код КАК индкодВладелецКод
				|ПОМЕСТИТЬ ВТ
				|ИЗ
				|	РегистрСведений.ИндНомер КАК ИндНомер
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				|ГДЕ
				|	РегистрНакопления1Остатки.КолвоОстаток > 0
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ.Стеллаж КАК Стеллаж,
				|	ВТ.индкодВладелец КАК Номенклатура,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ.индкод) КАК Количество,
				|	МАКСИМУМ(ВТ.индкодВладелецКод) КАК Код
				|ИЗ
				|	Справочник.Стеллаж КАК спрСтеллаж
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
				|		ПО (ВТ.Стеллаж = спрСтеллаж.Ссылка)
				|ГДЕ
				|	ВТ.индкодВладелецКод = &индкодВладелецКод
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ.Стеллаж,
				|	ВТ.индкодВладелец";
				
				Запрос.УстановитьПараметр("индкодВладелецКод", стр.Код);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					СтруктураПолки =  Новый Структура;
					СтруктураПолки.Вставить("place", Строка(Выборка.Стеллаж) );
					СтруктураПолки.Вставить("count", Выборка.Количество );		
					МассивПолок.Добавить(СтруктураПолки);
				КонецЦикла;
				СтруктураТоваров.Вставить("places", МассивПолок);
				// Комлев АА ---
				
				МассивТоваров.Добавить(СтруктураТоваров);
				
			КонецЕсли;
			
		КонецЦикла;
		СтруктураИнфо.Вставить("sum", СуммаТоваров);
		Если КоличествоТоваров <= КоличествоСФото И КоличествоТоваров > 0 Тогда
			СтруктураИнфо.Вставить("stat", Истина);
		Иначе
			СтруктураИнфо.Вставить("stat", Ложь);
		КонецЕсли;
		
		//КонецЦикла;	
		
		//СтруктураИнфо= новый Структура;
		//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураИнфо.Вставить("products", МассивТоваров);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Возврат Ответ;
		
	Исключение
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции
Функция ОпределитьАйдиТоварПолкаСтелажЗаявкаЗаказНарядcheckingid(Запрос)
	// ++ МазинЕС 15-10-24
	Айди = Строка(Запрос.ПараметрыURL["id"]);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндКод.Код КАК Код
	|ИЗ
	|	Справочник.ИндКод КАК ИндКод
	|ГДЕ
	|	ИндКод.Наименование = &Товар";

	Запрос.УстановитьПараметр("Товар", Айди);

	Структура = Новый Структура;

	Если Не Запрос.Выполнить().Пустой() Тогда
		Структура.Вставить("status", Число(3));

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

		Возврат Ответ;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Стеллаж.Код КАК Код
	|ИЗ
	|	Справочник.Стеллаж КАК Стеллаж
	|ГДЕ
	|	Стеллаж.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", Айди);

	РезультатЗапроса = Запрос.Выполнить();

	Структура = Новый Структура;

	Если Не РезультатЗапроса.Пустой() Тогда

		Структура.Вставить("status", Число(2));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поддоны.Код КАК Код
	|ИЗ
	|	Справочник.Поддоны КАК Поддоны
	|ГДЕ
	|	Поддоны.Наименование = &Поддон";

	Запрос.УстановитьПараметр("Поддон", Айди);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		Структура.Вставить("status", Число(1));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;

	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Номер
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Номер = &Номер";

	Запрос.УстановитьПараметр("Номер", Айди);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Структура.Вставить("status", Число(4));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНаряд.Номер
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|ЗаказНаряд.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", Айди);

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда

		Структура.Вставить("status", Число(5));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	Иначе
		Структура.Вставить("status", Число(0));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
КонецФункции

Функция ПереместитьПоддонНаПолкуМетод(Запрос)
	///+ГомзМА 12.12.2023
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Автор = массив.author;
	Поддон = Справочники.Поддоны.НайтиПоНаименованию(Массив.pallet);
	Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Массив.shelf);

	Если Поддон = Справочники.Поддоны.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Поддон не корректен!");
		Возврат Ответ;
	КонецЕсли;
	//поменять стеллаж у индномеров
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.Поддон КАК Поддон,
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон = &Поддон";

	Если Поддон <> Справочники.Поддоны.ПустаяСсылка() Тогда
		Запрос.УстановитьПараметр("Поддон", Поддон);
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Поддон не корректен!");
		Возврат Ответ;
	КонецЕсли;

	Если Стеллаж = Справочники.Стеллаж.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Полка не корректна!");
		Возврат Ответ;
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.индкод 	= РезультатЗапроса.индкод;
			ЗаписьВРегистреСведений.Прочитать();
			Если ЗаписьВРегистреСведений.Выбран() Тогда

				Лог = "Сменил полку с " + РезультатЗапроса.Стеллаж + " на " + Стеллаж;
				ЛогированиеИндНомера(Строка(РезультатЗапроса.индкод), Автор, Лог, Стеллаж, , РезультатЗапроса.Стеллаж);

				ЗаписьВРегистреСведений.Стеллаж = Стеллаж;
				ЗаписьВРегистреСведений.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	//поменять стеллаж у поддона
	СправочникПоддонОбъект = Поддон.ПолучитьОбъект();
	СправочникПоддонОбъект.Стеллаж = Стеллаж;

	СправочникПоддонОбъект.Записать();
		//+Сергеев 13/03/2024
	Событие = "Сменил стеллаж на: " + Стеллаж;
	ЗаписьЛогаподдона(Событие, СправочникПоддонОбъект, Автор);
	//-Сергеев 13/03/2024
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Поддон успешно перемещен на полку " + Стеллаж);
	Возврат Ответ;
	///-ГомзМА 12.12.2023
КонецФункции

Функция ПолучитьСписокТоваровНаПоддонеGetListProductsOnPallet(Запрос)
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТоваровВПоддоне(), Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Пред = запросТовара.Выполнить().Выгрузить();
	//МассивИндКодов = пред.ВыгрузитьКолонку("индкод");
	Выборкаобщ = Пред.Количество();

	запросТовара.Текст =  СтрШаблон(текстДляТоваровВПоддоне(), Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	запросТовара.УстановитьПараметр("Код", Строка(Запрос.ПараметрыURL["id"]));
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;

	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;

	Для Каждого стр Из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		итер = итер + 1;
		тз.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", Число(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);
	СтруктураИнфо.Вставить("shelf", Строка(Справочники.Поддоны.НайтиПоНаименованию(Строка(
		Запрос.ПараметрыURL["id"])).Стеллаж));
	СтруктураИнфо.Вставить("sklad", Строка(Справочники.Поддоны.НайтиПоНаименованию(Строка(
		Запрос.ПараметрыURL["id"])).Стеллаж.Владелец));
	Если Строка(Запрос.ПараметрыURL["id"]) <> " " Тогда
		СтруктураИнфо.Вставить("kor", Истина);
	Иначе
		СтруктураИнфо.Вставить("kor", Ложь);
	КонецЕсли;

	//СтруктураИнфо.Вставить("ids", МассивИндКодов);

	///+ГомзМА 19.06.2024
	ЗапросСотрудники = Новый Запрос;
	ЗапросСотрудники.Текст =
	"ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование = &Наименование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РегистрНакопления1Остатки.КолвоОстаток) КАК КолвоОстаток,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО (ИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО (ИндНомер.индкод = РегИндНомер.индкод)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ПО (ИндНомер.индкод = ЛогИндНомера.индкод)
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|	И ЛогИндНомера.Поддон.Наименование = &Наименование
	|	И ЛогИндНомера.Ответственный <> &Ответственный
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный";

	ЗапросСотрудники.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	ЗапросСотрудники.УстановитьПараметр("Ответственный", Справочники.Пользователи.ПустаяСсылка());

	РезультатЗапросаСотрудники = ЗапросСотрудники.Выполнить().Выбрать();

	МассивСотрудников = Новый Массив;

	Попытка
		Пока РезультатЗапросаСотрудники.Следующий() Цикл
			СтруктураСотрудник = Новый Структура;
			СтруктураСотрудник.Вставить("name", Строка(РезультатЗапросаСотрудники.Ответственный));
			СтруктураСотрудник.Вставить("count", Число(РезультатЗапросаСотрудники.КолвоОстаток));

			МассивСотрудников.Добавить(СтруктураСотрудник);
		КонецЦикла;
	Исключение

	КонецПопытки;
	///-ГомзМА 19.06.2024

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);
	СтруктураОтвета.Вставить("persons", МассивСотрудников);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокТоваровНаСтеллажеGetListProductsOnShelf(Запрос)
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТоваровНаПолке(), Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Пред = запросТовара.Выполнить().Выгрузить();
	//МассивИндКодов = пред.ВыгрузитьКолонку("индкод");
	Выборкаобщ = Пред.Количество();

	запросТовара.Текст =  СтрШаблон(текстДляТоваровНаПолке(), Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;

	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;

	Для Каждого стр Из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		итер = итер + 1;
		тз.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", Число(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);
	СтруктураИнфо.Вставить("shelf", Строка(Справочники.Поддоны.НайтиПоНаименованию(Строка(
		Запрос.ПараметрыURL["id"])).Стеллаж));
	СтруктураИнфо.Вставить("sklad", Строка(Справочники.Поддоны.НайтиПоНаименованию(Строка(
		Запрос.ПараметрыURL["id"])).Стеллаж.Владелец));
	Если Строка(Запрос.ПараметрыURL["id"]) <> " " Тогда
		СтруктураИнфо.Вставить("kor", Истина);
	Иначе
		СтруктураИнфо.Вставить("kor", Ложь);
	КонецЕсли;

	//СтруктураИнфо.Вставить("ids", МассивИндКодов);

	///+ГомзМА 19.06.2024
	ЗапросСотрудники = Новый Запрос;
	ЗапросСотрудники.Текст =
	"ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РегистрНакопления1Остатки.КолвоОстаток) КАК КолвоОстаток,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО (ИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО (ИндНомер.индкод = РегИндНомер.индкод)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ПО (ИндНомер.индкод = ЛогИндНомера.индкод)
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|	И ЛогИндНомера.Стеллаж.Наименование = &Наименование
	|	И ЛогИндНомера.Ответственный <> &Ответственный
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный";

	ЗапросСотрудники.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	ЗапросСотрудники.УстановитьПараметр("Ответственный", Справочники.Пользователи.ПустаяСсылка());

	РезультатЗапросаСотрудники = ЗапросСотрудники.Выполнить().Выбрать();

	МассивСотрудников = Новый Массив;

	Попытка
		Пока РезультатЗапросаСотрудники.Следующий() Цикл
			СтруктураСотрудник = Новый Структура;
			СтруктураСотрудник.Вставить("name", Строка(РезультатЗапросаСотрудники.Ответственный));
			СтруктураСотрудник.Вставить("count", Число(РезультатЗапросаСотрудники.КолвоОстаток));

			МассивСотрудников.Добавить(СтруктураСотрудник);
		КонецЦикла;
	Исключение

	КонецПопытки;
	///-ГомзМА 19.06.2024

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);
	СтруктураОтвета.Вставить("persons", МассивСотрудников);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция текстДляЗаказНаряда2()
	Текст = "ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Клиент КАК Клиент,
	|	ЗаказНаряд.Ответственный КАК Ответственный,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.ВинКод,
	|	ЗаказНаряд.Проект,
	|	ЗаказНаряд.Клиент.Код,
	|	ЗаказНаряд.Клиент.Телефон,
	|	ЗаказНаряд.Инициатор,
	|	ЗаказНаряд.СуммаДокумента,
	|	ЗаказНаряд.СуммаРаботы,
	|	ЗаказНаряд.СуммаТовары,
	|	ЗаказНаряд.ДатаНачала,
	|	ЗаказНаряд.ДатаОкончания,
	|	ЗаказНаряд.Комментарий,
	|	ЗаказНаряд.Ячейка,
	|	ЗаказНаряд.ЗаказКлиента,
	|	ЗаказНаряд.Ответственные.(
	|		Ссылка,
	|		НомерСтроки,
	|		Сотрудник,
	|		Роль,
	|		Выработка,
	|		Ставка,
	|		СуммаНачислено),
	|	ЗаказНаряд.ЯчейкаРВР
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ЗаказНаряд.Инициатор = Сотрудники.Ссылка
	|ГДЕ
	|	ЗаказНаряд.Номер = &Номер
	|	или ЗаказНаряд.Ячейка.наименование = &Номер";
	Возврат Текст;
КонецФункции

Функция ВыйтиИзЗНgetoutapp(Запрос)

	ЗапросЗаявки = Новый Запрос;
	ЗапросЗаявки.Текст = текстДляЗаказНаряда2();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	ЗапросЗаявки.УстановитьПараметр("Номер", Массив.id);
	Выборка = ЗапросЗаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;

	Если Ответственный = Неопределено Тогда
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	выборка.Следующий();

	ОбъектЗН = Выборка.ссылка.ПолучитьОбъект();

	Отбор = Новый Структура;
	Отбор.Вставить("Сотрудник", Ответственный);
	НайденныеСтроки = ОбъектЗН.Ответственные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Позиция = НайденныеСтроки[0].НомерСтроки;
		ОбъектЗН.Ответственные.удалить(Позиция - 1);
	КонецЕсли;

	ОбъектЗН.Записать();
	ТекстЛога =  " Вышел: " + ОбъектЗН.Номер;
	РаботаССайтомWT.ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;

КонецФункции

Функция ПолучитьОстаткиТоваровGetPlaces(Запрос)
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТовара1(), Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	//	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	//ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив")); 
	МассивТоваров = Новый Массив;
	тз.Сортировать("Количество Убыв");

	итер = 0;
	ПроверкаМеста = "";
	Для Каждого стр Из ТЗ Цикл
		
		//Если Строка(стр.Адрес) <> ПроверкаМеста Тогда
		СтруктураТоваров = Новый Структура;
		//СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		//СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		//СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		//СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("city", Строка(стр.Город));
		СтруктураТоваров.Вставить("count", Строка(стр.Количество));
		//ПроверкаМеста = Строка(стр.Адрес);
		//СтруктураТоваров.Вставить("id", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
		//конецЕсли;

	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, МассивТоваров);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ОчиститьПоддонClearPallet(Запрос)
	// Комлев АА 18/10/24 +++
	Попытка
		Поддон = Справочники.Поддоны.НайтиПоНаименованию(Запрос.ПараметрыURL.Получить("name"));
		Автор = Запрос.ПараметрыURL.Получить("author");
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИндНомер.индкод КАК индкод,
		|	ИндНомер.Поддон КАК Поддон
		|	
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|ГДЕ
		|	ИндНомер.Поддон = &Поддон";
		Запрос.УстановитьПараметр("Поддон", Поддон);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();

		Если РезультатЗапроса.Количество() > 0 Тогда
			Пока РезультатЗапроса.Следующий() Цикл
				ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
				ЗаписьВРегистреСведений.индкод 	= РезультатЗапроса.индкод;
				ЗаписьВРегистреСведений.Прочитать();
				Если ЗаписьВРегистреСведений.Выбран() Тогда

					Лог = " Переместил на " + Поддон;
					ЛогированиеИндНомера(Строка(РезультатЗапроса.индкод), Автор, Лог, , Поддон);
					ЗаписьВРегистреСведений.Стеллаж = Поддон.Стеллаж;
					ЗаписьВРегистреСведений.Поддон = Справочники.Поддоны.НайтиПоКоду("000000003");
					ЗаписьВРегистреСведений.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	
	//+Сергеев 13/03/2024
		Событие = "Очистил Поддон ";
		ЗаписьЛогаподдона(Событие, Поддон, Автор);
	//-Сергеев 13/03/2024
		Ответ = Новый HTTPСервисОтвет(204);
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		СтрокаОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, "");
		Ответ.УстановитьТелоИзСтроки("" + СтрокаОшибки);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
// Комлев АА 18/10/24 ---
КонецФункции

Функция ОчиститьСтеллажClearShelf(Запрос)
	// Комлев АА 18/10/24 +++
	Попытка
		Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Запрос.ПараметрыURL.Получить("name"));
		Автор = Запрос.ПараметрыURL.Получить("author");

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИндНомер.индкод КАК индкод,
		|	ИндНомер.Поддон КАК Поддон
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|ГДЕ
		|	ИндНомер.Стеллаж = &Стеллаж";
		Запрос.УстановитьПараметр("Стеллаж", Стеллаж);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();

		Если РезультатЗапроса.Количество() > 0 Тогда
			Пока РезультатЗапроса.Следующий() Цикл

				ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
				ЗаписьВРегистреСведений.индкод 	= РезультатЗапроса.индкод;
				ЗаписьВРегистреСведений.Прочитать();
				Если ЗаписьВРегистреСведений.Выбран() Тогда
					Поддон3 = Справочники.Поддоны.НайтиПоКоду("000000003");
					Лог = " Переместил на " + Поддон3;
					ЛогированиеИндНомера(Строка(РезультатЗапроса.индкод), Автор, Лог, Стеллаж, Поддон3);
					ЗаписьВРегистреСведений.Стеллаж = Поддон3.Стеллаж;
					ЗаписьВРегистреСведений.Поддон = Поддон3;
					ЗаписьВРегистреСведений.Записать();
				КонецЕсли;
				//@skip-check query-in-loop
				Если ПоддонПустой(РезультатЗапроса.Поддон) = Истина Тогда
					Событие = "Очистил Поддон ";
					ЗаписьЛогаподдона(Событие, РезультатЗапроса.Поддон, Автор);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Ответ = Новый HTTPСервисОтвет(204);
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		СтрокаОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, "");
		Ответ.УстановитьТелоИзСтроки("" + СтрокаОшибки);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
	// Комлев АА 18/10/24 ----
КонецФункции

Функция НаполнитьЗаявкуfillingapplication(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Попытка
		Выборка = Запросзаявки.Выполнить().Выбрать();
		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);
		
		Массив  = ПрочитатьJSON(ЧтениеJSON);
		
		Покупка  = Массив.id;
		Автор 	= Массив.author;
		
		ЭтоДеталь = ПроверкаНаДеталь(Покупка);
		
		Если ЭтоДеталь Тогда
			Выборка.Следующий();
			
			ОбъектЗаявки = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СтрНайти(Строка(Покупка), "_") > 0 Тогда
				Партия = Справочники.ИндКод.НайтиПоНаименованию(Покупка);
				ПартияУжеЕсть = Ложь;
				Для Каждого СтрокаТЧ Из ОбъектЗаявки.Товары Цикл
					Если СтрокаТЧ.Партия = Партия Тогда
						ПартияУжеЕсть = Истина;
						Продолжить;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ПартияУжеЕсть Тогда
					Номенклатура = Партия.Владелец;
					ИнфоПартия = ПолучитьИнформациюОПартии(Партия.Наименование);
					
					НайденныяСтрока = ОбъектЗаявки.Товары.Найти(Справочники.ИндКод.НайтиПоНаименованию(Покупка).Владелец, "Номенклатура");
					
					Если НайденныяСтрока <> Неопределено Тогда
						НайденныяСтрока.Партия = Справочники.ИндКод.НайтиПоНаименованию(Покупка);
						ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил партию в товаре "
						+ НайденныяСтрока.Номенклатура + " " + НайденныяСтрока.Партия;
						ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
						ОбъектЗаявки.Записать();
						Ответ = Новый HTTPСервисОтвет(200);
						Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
						Ответ.УстановитьТелоИзСтроки("Успех");
						
					Иначе
						Новаястрока = ОбъектЗаявки.Товары.Добавить();
						Новаястрока.Партия = Партия;
						Новаястрока.Номенклатура = Номенклатура;
						Новаястрока.Количество = 1;
						//@skip-check reading-attribute-from-database
						Новаястрока.Цена = ?(ИнфоПартия.Цена <> 0, ИнфоПартия.Цена, Номенклатура.РекомендованаяЦена);
						Новаястрока.ЦенаСоСкидкойНаценкой = Новаястрока.Цена;
						//Новаястрока.Артикул = Номенклатура.Артикул;
						ТекстЛога =  " В заявке " + ОбъектЗаявки.Номер + " добавил партию  " + Новаястрока.Номенклатура + " "
						+ Новаястрока.Партия;
						ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
						ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);
						
						Ответ = Новый HTTPСервисОтвет(200);
						Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
						//Ответ.УстановитьТелоИзСтроки("Успех. Строка С Партией добавлена");
					КонецЕсли;
				Иначе
					Ответ = Новый HTTPСервисОтвет(500);
					Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки("В документе уже есть этот товар!");
				КонецЕсли;
			Иначе
				Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Покупка);
				ИнфоНоменклатура = ПолучитьИнформациюОТоваре(Покупка);
				
				Новаястрока = ОбъектЗаявки.Товары.Добавить();
				Новаястрока.Номенклатура = ИнфоНоменклатура.Товар;
				Новаястрока.Количество = 1;
				Новаястрока.Цена = ИнфоНоменклатура.Цена;
				Новаястрока.ЦенаСоСкидкойНаценкой = Новаястрока.Цена;
				ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил Товар " + Новаястрока.Номенклатура;
				ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
				ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
				//Ответ.УстановитьТелоИзСтроки("Успех. Номенклатура установлена " + строка(Новаястрока.Номенклатура));
			КонецЕсли;
			ПересчётСуммыЗаявки(Выборка.ссылка);
		Иначе
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Нет такого товара!");
		КонецЕсли;
	Исключение
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;
	Возврат Ответ;
КонецФункции


Функция УдалитьТоварИзЗаявкиdeleteproductapplication(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["id"] ); 
	Попытка
	Выборка = Запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	//ИндКод  = Массив.IndCode;
	Позиция = Число(Запрос.ПараметрыURL["pose"]);
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		
		Возврат Ответ;
		
	КонецЕсли;	
	
	 	выборка.Следующий();
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " удалил товар " + ОбъектЗаявки.Товары[Позиция-1].Номенклатура + " "+ ОбъектЗаявки.Товары[Позиция-1].Партия;
		ОбъектЗаявки.Товары.удалить(Позиция-1);
		 
		ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
		ОбъектЗаявки.записать();
		ПересчётСуммыЗаявки(Выборка.ссылка);
	
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	
	Исключение
	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		
	КонецПопытки;
	Возврат Ответ;
КонецФункции  

Функция ВыйтиИзЗаявкиgetoutapp(Запрос)
	ЗапросЗаявки = Новый Запрос;
	ЗапросЗаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	ЗапросЗаявки.УстановитьПараметр("Номер", Массив.id);
	Выборка = ЗапросЗаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;

	Если ответственный = Неопределено Тогда
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	выборка.Следующий();

	ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();

	Отбор = Новый Структура;
	Отбор.Вставить("Сотрудник", Ответственный);
	НайденныеСтроки = ОбъектЗаявки.Ответственные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Позиция = НайденныеСтроки[0].НомерСтроки;
		ОбъектЗаявки.Ответственные.удалить(Позиция - 1);
	КонецЕсли;
	
	ОбъектЗаявки.Записать();
	ТекстЛога =  " Вышел: " + ОбъектЗаявки.Номер;
	ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции

Функция ОбновитьПродажуrefreshsale(Запрос)
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Номерзаявки = Массив.id;
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер", Номерзаявки);
	Выборка = запросзаявки.Выполнить().Выбрать();

	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки(,"Такой заявки нет!",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат Ответ;
	КонецЕсли;
	ЗапросСтрокПродажи = Новый Запрос;
	ЗапросСтрокПродажи.Текст = "ВЫБРАТЬ
							   |	ПродажаЗапчастейТаблица.Партия,
							   |	ПродажаЗапчастейТаблица.Товар
							   |ИЗ
							   |	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
							   |ГДЕ
							   |	ПродажаЗапчастейТаблица.Ссылка.ЗаказКлиента = &НомерПродажи";
	ЗапросСтрокПродажи.УстановитьПараметр("НомерПродажи", Выборка.ссылка);
	ТЧ_Продажи = ЗапросСтрокПродажи.Выполнить().Выгрузить();

	ЗапросСтрокЗаявки = Новый Запрос;
	ЗапросСтрокЗаявки.Текст = "ВЫБРАТЬ
							  |	ЗаказКлиентаТовары.Ссылка,
							  |	ЗаказКлиентаТовары.НомерСтроки,
							  |	ЗаказКлиентаТовары.Номенклатура КАК Товар,
							  |	ЗаказКлиентаТовары.ЦенаОригинала,
							  |	ЗаказКлиентаТовары.Количество,
							  |	ЗаказКлиентаТовары.Цена,
							  |	ЗаказКлиентаТовары.Сумма,
							  |	ЗаказКлиентаТовары.Отменено,
							  |	ЗаказКлиентаТовары.Склад,
							  |	ЗаказКлиентаТовары.СуммаНДС,
							  |	ЗаказКлиентаТовары.Комментарий,
							  |	ЗаказКлиентаТовары.ПредлагаемаяЦена,
							  |	ЗаказКлиентаТовары.Партия,
							  |	ЗаказКлиентаТовары.Проверено,
							  |	ЗаказКлиентаТовары.Комментарий1,
							  |	ЗаказКлиентаТовары.НН,
							  |	ЗаказКлиентаТовары.МСК,
							  |	ЗаказКлиентаТовары.ЕКБ,
							  |	ЗаказКлиентаТовары.ЦенаСоСкидкойНаценкой
							  |ИЗ
							  |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
							  |ГДЕ
							  |	ЗаказКлиентаТовары.Ссылка = &Ссылка";
	ЗапросСтрокЗаявки.УстановитьПараметр("Ссылка", Выборка.Ссылка);
	ТЧ_Заявки = ЗапросСтрокЗаявки.Выполнить().Выгрузить();
//ОбъектПродажи = документы.пВыборка.Продажа.Получитьобъект();
	ОбъектПродажи = Документы.ПродажаЗапчастей.НайтиПоРеквизиту("ЗаказКлиента", Выборка.ссылка).ПолучитьОбъект();
	Для Каждого СтрокаТЧ_Заявки Из ТЧ_Заявки Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Товар", СтрокаТЧ_Заявки.Товар);
		Отбор.Вставить("Партия", СтрокаТЧ_Заявки.партия);

		НайденныеСтроки = ТЧ_Продажи.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрокаПродажи = ОбъектПродажи.Таблица.Добавить();

			ЗаполнитьЗначенияСвойств(НоваяСтрокаПродажи, СтрокаТЧ_Заявки);
		КонецЕсли;

	КонецЦикла;
	ОбъектПродажи.Записать();
	Для Каждого СтрокаТч_Продажи Из ОбъектПродажи.Таблица Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Товар", СтрокаТч_Продажи.Товар);
		Отбор.Вставить("Партия", СтрокаТч_Продажи.партия);

		НайденныеСтроки = ТЧ_Заявки.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ОбъектПродажи.Таблица.удалить(СтрокаТч_Продажи);

		КонецЕсли;

	КонецЦикла;
	
	// +++ Заполнить таблицу ответственные в продаже
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиентаОтветственные.Сотрудник,
	|	ЗаказКлиентаОтветственные.Роль
	|ИЗ
	|	Документ.ЗаказКлиента.Ответственные КАК ЗаказКлиентаОтветственные
	|ГДЕ
	|	ЗаказКлиентаОтветственные.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Выборка.ссылка);
	РезультатЗапроса1 = Запрос.Выполнить().Выгрузить();
	ОбъектПродажи.Ответственные.Очистить();
	ОбъектПродажи.Ответственные.Загрузить(РезультатЗапроса1);
	// --- Заполнить таблицу ответственные в продаже
	ОбъектПродажи.Записать();
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Данные продажи " + ОбъектПродажи.Номер + " обновлены.");
	Возврат Ответ;
КонецФункции

Функция СменатовараЗаявкиreplaceproductapplication(Запрос)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Номер = &Номер"; 
	
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = ТекстЗапроса;
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Попытка
		Выборка = Запросзаявки.Выполнить().Выбрать();
		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);

		Массив  = ПрочитатьJSON(ЧтениеJSON);

		Замена  = Массив.id;
		Позиция = Массив.pose;
		Автор 	= Массив.author;

		Выборка.Следующий();

		ОбъектЗаявки = Выборка.Ссылка.ПолучитьОбъект();
		Новаястрока = ОбъектЗаявки.Товары[Позиция - 1];
		Если СтрНайти(Строка(Замена), "_") > 0 Тогда
			Партия = Справочники.ИндКод.НайтиПоНаименованию(Замена);
			Номенклатура = Партия.Владелец;
			//ИнфоПартия = ПолучитьИнформациюОПартии(Партия.Наименование);
				
				Новаястрока.Партия = Партия;
				Новаястрока.Номенклатура = Номенклатура;
				//Новаястрока.Количество = 1;
				//@skip-check reading-attribute-from-database
				//Новаястрока.Цена = ?(ИнфоПартия.Цена <> 0, ИнфоПартия.Цена, Номенклатура.РекомендованаяЦена);
				//Новаястрока.ЦенаСоСкидкойНаценкой = Новаястрока.Цена;
					//Новаястрока.Артикул = Номенклатура.Артикул;
				ТекстЛога =  " В заявке " + ОбъектЗаявки.Номер + " добавил партию  " + Новаястрока.Номенклатура + " "
					+ Новаястрока.Партия;
				ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
				ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);

				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
				//Ответ.УстановитьТелоИзСтроки("Успех. Строка С Партией добавлена");
		Иначе
			Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Замена);
			ИнфоНоменклатура = ПолучитьИнформациюОТоваре(Замена);
			Новаястрока.Партия = Справочники.ИндКод.ПустаяСсылка();
			Новаястрока.Номенклатура = ИнфоНоменклатура.Товар;
			//Новаястрока.Количество = 1;
			//Новаястрока.Цена = ИнфоНоменклатура.Цена;
			//Новаястрока.ЦенаСоСкидкойНаценкой = Новаястрока.Цена;
			ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил Товар " + Новаястрока.Номенклатура;
			ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
			ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			//Ответ.УстановитьТелоИзСтроки("Успех. Номенклатура установлена " + строка(Новаястрока.Номенклатура));
		КонецЕсли;
		ПересчётСуммыЗаявки(Выборка.ссылка);

	Исключение
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ВзятьВРаботуКладощикtakeappstorager(Запрос)
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	запросзаявки.УстановитьПараметр("Номер", Массив.id);
	Выборка = запросзаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Пока выборка.Следующий() Цикл
		ТекстЛога =  " Взял в работу: ";

		ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		Отбор = Новый Структура;
		Отбор.Вставить("Сотрудник", Ответственный);

		НайденныеСтроки = ОбъектЗаявки.Ответственные.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаОтветственного = ОбъектЗаявки.Ответственные.Добавить();
			СтрокаОтветственного.Сотрудник = Ответственный;
			СтрокаОтветственного.Роль = Перечисления.дт_РолиВПродаже.Кладовщик;
		КонецЕсли;
		
		ОбъектЗаявки.ОтветственныйЗаОбработку = Ответственный;
		ОбъектЗаявки.Записать();
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции

Функция ПолучитьТоварыКарточкиproductscard(Запрос)
	ЗапросТовара = Новый Запрос;
	Текстзапроса = "ВЫБРАТЬ первые 10000
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город,
				   |   РегистрНакопления1Остатки.машина.Год КАК машинаГод,
				   |	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
				   |	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
				   |	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
				   |	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
				   |	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	Справочник.Номенклатура КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |			ПО РегИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ПО ИндНомер.Ссылка = РегИндНомер.Индкод.Владелец
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |И РегИндНомер.АвитоЧастник
				   |	И ИндНомер.Код = &Наименование
				   |%2
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.машинаГод КАК машинаГод,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
				   |	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
				   |	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
				   |	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
				   |	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";

	Если Число(Запрос.ПараметрыURL["filter_stock"]) = 1 Тогда
		Склад = Справочники.Склады.НайтиПоКоду("000000002");
	ИначеЕсли Число(Запрос.ПараметрыURL["filter_stock"]) = 2 Тогда
		Склад = Справочники.Склады.НайтиПоКоду("000000005");
	ИначеЕсли Число(Запрос.ПараметрыURL["filter_stock"]) = 3 Тогда
		Склад = Справочники.Склады.НайтиПоКоду("000000008");
	КонецЕсли;
	 /// Комлев 7/08/24 
	ТекстФильтраПоСкладам =  "И РегистрНакопления1Остатки.Склад = &Склад";
	  /// Комлев 7/08/24 ---		
	ИндКод = Строка(Запрос.ПараметрыURL["id"]);
	Если Число(Запрос.ПараметрыURL["filter_stock"]) < 4 И Число(Запрос.ПараметрыURL["filter_stock"]) > 0 Тогда
		запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(10000, "ЧГ="), ТекстФильтраПоСкладам); // Добавить отбор по складу
		запросТовара.УстановитьПараметр("Склад", Склад);
	Иначе
		запросТовара.Текст =   СтрШаблон(Текстзапроса, Формат(10000, "ЧГ="), ""); // Убрать отбор по складу
	КонецЕсли;

	запросТовара.УстановитьПараметр("наименование", ИндКод);
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
		
// Фильтр по складам
/// Комлев 7/8/24 +++
	Если Число(Запрос.ПараметрыURL["filter_stock"]) < 4 И Число(Запрос.ПараметрыURL["filter_stock"]) > 0 Тогда
		запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
			Запрос.ПараметрыURL["count"], 10000), "ЧГ="), ТекстФильтраПоСкладам); // Добавить отбор по складу
		запросТовара.УстановитьПараметр("Склад", Склад);
	Иначе
		запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
			Запрос.ПараметрыURL["count"], 10000), "ЧГ="), ""); // Убрать отбор по складу
	КонецЕсли;
	
	/// Комлев 7/8/24 ---
	запросТовара.УстановитьПараметр("наименование", ИндКод);

	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	//Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
	ТЗ_Товары = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ_Товары.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ_Товары.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = ТЗ_Товары.ВыгрузитьКолонку("индкод");
	Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
	Итер = 0;

	Для Каждого стр Из ТЗ_Товары Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		Итер = итер + 1;
		ТЗ_Товары.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		//СтруктураТоваров.Вставить("search", Строка(стр.СтрокаПоиска));
		//СтруктураТоваров.Вставить("search1", Строка(стр.СтрокаПоиска1));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", стр.Цена);
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("code", Строка(стр.Код));
		СтруктураТоваров.Вставить("type", "PRODUCT");
		//СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
		//СтруктураТоваров.Вставить("stack", стр.Комплектация);

		СтруктураТоваров.Вставить("city", Строка(стр.Город));

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		СтруктураТоваров.Вставить("yearcar", число(стр.машинаГод));
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);
//	Если Лев(Запрос.ПараметрыURL["id"],1) = "П" Тогда
//		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["id"])))); 
//		//	Иначе
//		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
//	КонецЕсли;
//	

	СтруктураОтвета = Новый Структура;
	//СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("pages", Итог);
	СтруктураОтвета.Вставить("count", Выборкаобщ);
	СтруктураОтвета.Вставить("products", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокПохожихТоваровGetSimilarProductsList(Запрос)

	ЗапросТовара = Новый Запрос;
	Текстзапроса = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.владелец.код ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
				   |	И ИндНомер.индкод.Наименование НЕ ПОДОБНО &НаименованиеПолное СПЕЦСИМВОЛ ""~""
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город,
				   |	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
				   |	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
				   |	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
				   |	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
				   |	РегистрНакопления1Остатки.машина.Год КАК машинаГод,
				   |	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.машинаГод КАК машинаГод,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
				   |	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
				   |	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
				   |	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
				   |	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";

	Источник = СокрЛП(Строка(Запрос.ПараметрыURL["id"]));
	//КодКарточки = Лев(Источник, СтрДлина(Источник) - стрНайти(Источник, "_"));

	Если стрНайти(Источник, "_") <> 0 Тогда
		КодКарточки = Лев(Источник, стрНайти(Источник, "_") - 1);
		ИндКод = Строка(Запрос.ПараметрыURL["id"]);
		Если СтрНайти(КодКарточки, "00") = 1 Тогда
			Длина = СтрДлина(КодКарточки);
			Пока длина < 9 Цикл
				КодКарточки = "0" + КодКарточки;
				длина = длина + 1;
			КонецЦикла;
		КонецЕсли;
	Иначе
		КодКарточки = Источник;
		Длина = СтрДлина(КодКарточки);
		Пока длина < 9 Цикл
			КодКарточки = "0" + КодКарточки;
			длина = длина + 1;
		КонецЦикла;
		ИндКод = КодКарточки;
	КонецЕсли;
	запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		КодКарточки) + "%");
	запросТовара.УстановитьПараметр("НаименованиеПолное", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		ИндКод) + "%");
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();

	запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		КодКарточки) + "%");
	запросТовара.УстановитьПараметр("НаименованиеПолное", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		ИндКод) + "%");
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;

	ТЗ_Товары = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ_Товары.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ_Товары.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = ТЗ_Товары.ВыгрузитьКолонку("индкод");
	Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
	Итер = 0;

	Для Каждого стр Из ТЗ_Товары Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		Итер = итер + 1;
		ТЗ_Товары.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		//СтруктураТоваров.Вставить("search", Строка(стр.СтрокаПоиска));
		//СтруктураТоваров.Вставить("search1", Строка(стр.СтрокаПоиска1));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", стр.Цена);
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("code", Строка(стр.Код));
		//СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
		//СтруктураТоваров.Вставить("stack", стр.Комплектация);
		СтруктураТоваров.Вставить("type", "PRODUCT");
		СтруктураТоваров.Вставить("sity", Строка(стр.Город));

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		СтруктураТоваров.Вставить("yearcar", Число(стр.машинаГод));
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);
//	Если Лев(Запрос.ПараметрыURL["id"],1) = "П" Тогда
//		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["id"])))); 
//		//	Иначе
//		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
//	КонецЕсли;
//	

	СтруктураОтвета = Новый Структура;
	//СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("pages", Итог);
	СтруктураОтвета.Вставить("count", Выборкаобщ);
	СтруктураОтвета.Вставить("products", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

КонецФункции

Функция ИзменитьКарточкуТовараИзменитьКаротчкуТовара(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	ТелоСоответствия = ПрочитатьJSON(ЧтениеJSON, Истина);

	КодКарточки = ТелоСоответствия["id_card"];
	КодСотрудника = ТелоСоответствия["id_worker"];
	НаименованиеКарточки = ТелоСоответствия["name"];
	ЦенаКарточки = Число(ТелоСоответствия["price"]);
	НовоеОписание = Строка(ТелоСоответствия["description"]);
	ОстатокСовпадаетНН = Число(ТелоСоответствия["count_verified_NN"]);
	ОстатокСовпадаетМСК = Число(ТелоСоответствия["count_verified_MSK"]);
	ОстатокСовпадаетЕКБ = Число(ТелоСоответствия["count_verified_EKB"]);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.РекомендованаяЦена КАК РекЦена,
	|	Номенклатура.Описание
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код";

	Запрос.УстановитьПараметр("Код", КодКарточки);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоменклатураСсылка 			= ВыборкаДетальныеЗаписи.Ссылка;
		НоменклатураРекЦена 		= ВыборкаДетальныеЗаписи.РекЦена;
		СтароеНазвание 	= ВыборкаДетальныеЗаписи.Наименование;
		СтароеОписание = ВыборкаДетальныеЗаписи.Описание;
	КонецЦикла;
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки(, "Ненайдена катрочка товара", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат Ответ;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Пользователь КАК СсылкаПользователь,
	|	Сотрудники.Ссылка КАК СсылкаСотрудник 
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Код = &Код";

	Запрос.УстановитьПараметр("Код", КодСотрудника);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи1 = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
		СсылкаПользователь	= ВыборкаДетальныеЗаписи1.СсылкаПользователь;
		СсылкаСотрудник 	= ВыборкаДетальныеЗаписи1.СсылкаСотрудник;
	КонецЦикла;

	Если ВыборкаДетальныеЗаписи1.Количество() = 0 Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки(, "Не найден сотрудник", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат Ответ;
	КонецЕсли;

	Если НоменклатураРекЦена <> ЦенаКарточки И СтароеНазвание <> НаименованиеКарточки Тогда
		ОбъектНоменклатура = НоменклатураСсылка.ПолучитьОбъект();
		ОбъектНоменклатура.РекомендованаяЦена = ЦенаКарточки;
		ОбъектНоменклатура.Наименование = НаименованиеКарточки; 
			//@skip-check use-non-recommended-method
		ОбъектНоменклатура.Лог = ОбъектНоменклатура.Лог + Символы.ПС + Формат(ТекущаяДата(), "ДЛФ=DD;") + " "
			+ СсылкаСотрудник + " изменил наименование с " + """" + СтароеНазвание + """" + ", " + "на " + """"
			+ НаименованиеКарточки + """" + " изменил цену с " + """" + НоменклатураРекЦена + """" + ", " + "на "
			+ """" + ЦенаКарточки + """" + "." + Символы.ПС
			+ "--------------------------------------------------------------------------------------------------------------------------";
			
			/// Комлев 14/08/24 +++
		ИзменитьЦенуИндКодовПриИзмененииЦеныКарточкиТовара(НоменклатураРекЦена, ЦенаКарточки, НоменклатураСсылка);
		 	/// Комлев 14/08/24 --- 

		ОбъектНоменклатура.Записать();
		 	// Меняем цену в документе "УстановкаЦенноменклатуры"
		ДокУстановкЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		ДокУстановкЦен.Ответственный = СсылкаПользователь;
		ДокУстановкЦен.ТипЦен = Справочники.ТипыЦен.НайтиПоКоду("000000004"); 
			//@skip-check use-non-recommended-method
		ДокУстановкЦен.Дата = ТекущаяДата();
		СтрокаТовары = ДокУстановкЦен.Товары.Добавить();
		СтрокаТовары.Номенклатура = НоменклатураСсылка;
		СтрокаТовары.Цена = ЦенаКарточки;
		ДокУстановкЦен.Записать(РежимЗаписиДокумента.Проведение);

	ИначеЕсли НоменклатураРекЦена <> ЦенаКарточки Тогда
		ОбъектНоменклатура = НоменклатураСсылка.ПолучитьОбъект();
		ОбъектНоменклатура.РекомендованаяЦена = ЦенаКарточки;  
			//@skip-check use-non-recommended-method
		ОбъектНоменклатура.Лог = ОбъектНоменклатура.Лог + Символы.ПС + Формат(ТекущаяДата(), "ДЛФ=DD;") + " "
			+ СсылкаСотрудник + " изменил цену с " + """" + НоменклатураРекЦена + """" + ", " + "на " + """"
			+ ЦенаКарточки + """" + "." + Символы.ПС
			+ "--------------------------------------------------------------------------------------------------------------------------";
			
			/// Комлев 14/08/24 +++
		ИзменитьЦенуИндКодовПриИзмененииЦеныКарточкиТовара(НоменклатураРекЦена, ЦенаКарточки, НоменклатураСсылка);
		 	/// Комлев 14/08/24 --- 

		ОбъектНоменклатура.Записать();
		 	// Меняем цену в документе "УстановкаЦенноменклатуры"
		ДокУстановкЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		ДокУстановкЦен.Ответственный = СсылкаПользователь;
		ДокУстановкЦен.ТипЦен = Справочники.ТипыЦен.НайтиПоКоду("000000004"); 
			//@skip-check use-non-recommended-method
		ДокУстановкЦен.Дата = ТекущаяДата();
		СтрокаТовары = ДокУстановкЦен.Товары.Добавить();
		СтрокаТовары.Номенклатура = НоменклатураСсылка;
		СтрокаТовары.Цена = ЦенаКарточки;
		ДокУстановкЦен.Записать(РежимЗаписиДокумента.Проведение);

	ИначеЕсли СтароеНазвание <> НаименованиеКарточки Тогда
		ОбъектНоменклатура = НоменклатураСсылка.ПолучитьОбъект();
		ОбъектНоменклатура.Наименование = НаименованиеКарточки; 
			//@skip-check use-non-recommended-method
		ОбъектНоменклатура.Лог = ОбъектНоменклатура.Лог + Символы.ПС + Формат(ТекущаяДата(), "ДЛФ=DD;") + " "
			+ СсылкаСотрудник + " изменил наименование с " + """" + СтароеНазвание + """" + ", " + "на " + """"
			+ НаименованиеКарточки + """" + Символы.ПС
			+ "--------------------------------------------------------------------------------------------------------------------------";
		ОбъектНоменклатура.Записать();

	КонецЕсли;

	Если НовоеОписание <> СтароеОписание Тогда
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		НоменклатураОбъект.Описание = НовоеОписание;
		НоменклатураОбъект.Записать();
	КонецЕсли;
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		НоменклатураОбъект.ОстатокСовпадает = ?(ОстатокСовпадаетНН = 0, Ложь, Истина);
		НоменклатураОбъект.ОстатокСовпадаетМСК = ?(ОстатокСовпадаетМСК = 0, Ложь, Истина);
		НоменклатураОбъект.ОстатокСовпадаетЕКБ = ?(ОстатокСовпадаетЕКБ = 0, Ложь, Истина);
		НоменклатураОбъект.Записать();
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

Функция ГлобальноВыдатьПродажуglobalissueasale(Запрос)

	НомерЗаявки = Запрос.ПараметрыURL["id"];
	НомерПродажи = ПолучитьПродажуЧерезЗаявку(НомерЗаявки);

	Если НомерПродажи <> "" Тогда
		ЗапросПродажи = Новый Запрос;
		запросПродажи.Текст = текстДляПродажи();
		запросПродажи.УстановитьПараметр("Номер", НомерПродажи);
		Выборка = запросПродажи.Выполнить().Выбрать();

		Структураответа = Новый структура;

		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);

		Массив  = ПрочитатьJSON(ЧтениеJSON);
		Выдано = 0;
		ИндКод  = Массив.id;
		Автор 	= Массив.author;
		Партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);

		Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		автор = Массив.author;

		Отбор = Новый Структура;
		Отбор.Вставить("Товар", Номенклатура);
		Отбор.Вставить("Партия", партия);
		Попытка

			выборка.Следующий();
			ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();
		  //ОбъектПродажи =Документы.ПродажаЗапчастей.НайтиПоНомеру().ПолучитьОбъект();
			НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);

			Если НайденныеСтроки.количество() > 0 Тогда

				Позиция = НайденныеСтроки[0].НомерСтроки;

					//@skip-check use-non-recommended-method
				ОбъектПродажи.датаСписания = ТекущаяДата();

				СтрокаТЧ = ОбъектПродажи.Таблица[Позиция - 1];
				СтрокаТЧ.статусТовара = Истина;
					//@skip-check use-non-recommended-method
				СтрокаТЧ.ДатаВыдачи = ТекущаяДата();
					//@skip-check query-in-loop
				СтрокаТЧ.Машина = ПолучитьМашину(партия);
				СтрокаТЧ.ОтветственныйЗаВыдачу = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
				ТекстЛога =  " В продаже: " + ОбъектПродажи.номер + " выдан товар " + СтрокаТЧ.Товар + " "
					+ СтрокаТЧ.Партия;
				ЛогированиеWT10(ОбъектПродажи.ссылка, Автор, ТекстЛога);
				Если СтрокаТЧ.Склад = Справочники.Склады.ПустаяСсылка() Или ОбъектПродажи.таблица[Позиция - 1].Склад
					= Неопределено Тогда
					СтрокаТЧ.Склад = ОбъектПродажи.склад;
				КонецЕсли;
				Если выдано = 0 Тогда
					ОбъектПродажи.СтатусОбработки =  Перечисления.СтатусыОбработкиЗаявок.Упаковывается;
					ОбъектПродажи.ОтветственныйКладовщик = Справочники.Пользователи.ПустаяСсылка();
				КонецЕсли;

				ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " выдал товар " + ОбъектПродажи.таблица[Позиция
					- 1].Товар + " " + ОбъектПродажи.таблица[Позиция - 1].Партия;
				ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
				ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);

				Структураответа.Вставить("res", "Успех. Выдан товар " + строка(СтрокаТЧ.Товар));
				ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
				СтрокаДляОтвета = ЗаписьJSON.Закрыть();

				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8,
					ИспользованиеByteOrderMark.НеИспользовать);
				Возврат Ответ;

			Иначе
				Отбор = Новый Структура;
				Отбор.Вставить("Товар", Номенклатура);
				Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
				НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);
				Если НайденныеСтроки.количество() > 0 Тогда
					СтрокаТЧ = ОбъектПродажи.Таблица[НайденныеСтроки[0].НомерСтроки - 1]; 
				  //СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
					Отбор = Новый Структура;
					Отбор.Вставить("Номенклатура", Номенклатура);
					Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());

					Заказ = Выборка.ЗаказКлиента.ПолучитьОбъект();
					НайденныеСтроки = Заказ.Товары.НайтиСтроки(Отбор);
					СтрокаТЧЗаказа = Заказ.Товары[НайденныеСтроки[0].НомерСтроки - 1];
					СтрокаТЧЗаказа.партия = партия;
					СтрокаТЧ.партия = партия; 
				//@skip-check query-in-loop
					СтрокаТЧ.машина = ПолучитьМашину(партия);
					СтрокаТЧ.Склад = ОбъектПродажи.склад;
					СтрокаТЧ.СтатусТовара = Истина;
						//@skip-check use-non-recommended-method
					СтрокаТЧ.ДатаВыдачи = ТекущаяДата();
					СтрокаТЧ.ОтветственныйЗаВыдачу = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;

					ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " установил партию в товаре " + СтрокаТЧ.Товар
						+ " " + СтрокаТЧ.Партия;
					ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
					ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);
					Заказ.Записать(РежимЗаписиДокумента.Запись);
					Структураответа.Вставить("res", "Успех. Партия установлена для " + строка(СтрокаТЧ.Товар)
						+ " и выдана!");
				//Структураответа.Вставить("res","Такого товара нет в продаже!");
					ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
					СтрокаДляОтвета = ЗаписьJSON.Закрыть();
					Ответ = Новый HTTPСервисОтвет(200);
					Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8,
						ИспользованиеByteOrderMark.НеИспользовать);
					Возврат Ответ;
				Иначе
					ЗаписьJSON = Новый ЗаписьJSON;
					ЗаписьJSON.УстановитьСтроку();

					Информация = ИнформацияОбОшибке();

					ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки(, "Товар не найден в продаже",
						Информация.Описание));
					СтрокаДляОтвета = ЗаписьJSON.Закрыть();

					Ответ = Новый HTTPСервисОтвет(500);
					Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

					Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
					Возврат Ответ;
				КонецЕсли;

			КонецЕсли;

		Исключение
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			Информация = ИнформацияОбОшибке();

			ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки(, "Ошибка при вызове метода контекста (Выполнить)",
				Информация.Описание));
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();

			Ответ = Новый HTTPСервисОтвет(500);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

			Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
			Возврат Ответ;
		КонецПопытки;
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		Информация = ИнформацияОбОшибке();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки(, "Продажа не найдена, необходимо создать ее!",
			Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
	КонецЕсли;

	Возврат Ответ;

КонецФункции

Функция ПолучитьБонусыПоПродажеgetbonusbysale(Запрос)
	НачалоОтбора = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	КонецОтбора  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));

	//МассивОтвета = Новый Массив;
	СтруктураОтвета = Новый Структура;

	ЗапросБонусыПоПродажам = Новый Запрос;
	ЗапросБонусыПоПродажам.Текст = "ВЫБРАТЬ
								   |	БонусыСотрудниковОтПродажи.Сотрудник,
								   |	СУММА(БонусыСотрудниковОтПродажи.Сумма) КАК Сумма,
								   |	СУММА(БонусыСотрудниковОтПродажи.Бонус) КАК Бонус,
								   |	БонусыСотрудниковОтПродажи.Роль КАК Роль
								   |ИЗ
								   |	РегистрСведений.БонусыСотрудниковОтПродажи КАК БонусыСотрудниковОтПродажи
								   |ГДЕ
								   |	БонусыСотрудниковОтПродажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
								   |	И БонусыСотрудниковОтПродажи.Сотрудник = &Сотрудник
								   |СГРУППИРОВАТЬ ПО
								   |	БонусыСотрудниковОтПродажи.Сотрудник,
								   |	БонусыСотрудниковОтПродажи.Роль";

	ЗапросБонусыПоПродажам.УстановитьПараметр("Датаначала", НачалоОтбора);
	ЗапросБонусыПоПродажам.УстановитьПараметр("ДатаОкончания", КонецОтбора);
	ЗапросБонусыПоПродажам.УстановитьПараметр("Сотрудник", Справочники.Сотрудники.НайтиПоКоду(
		Запрос.ПараметрыURL["id"]).Пользователь);

	РезультатЗапроса = ЗапросБонусыПоПродажам.Выполнить().Выбрать();
	СуммаБонусовМенеджера = 0;
	СуммаБонусовКладовщика = 0;
	//МассивБонусовПоПродажам = Новый Массив;
	Пока РезультатЗапроса.Следующий() Цикл
		Если Строка(РезультатЗапроса.Роль) = "Менеджер" Тогда
			СуммаБонусовМенеджера = СуммаБонусовМенеджера + РезультатЗапроса.Бонус;
		Иначе
			СуммаБонусовКладовщика = СуммаБонусовКладовщика + РезультатЗапроса.Бонус;
		КонецЕсли;
	КонецЦикла;
	ЗапросБонусыПоПродажамОбщ = Новый Запрос;
	ЗапросБонусыПоПродажамОбщ.Текст = "ВЫБРАТЬ
									  |	БонусыСотрудниковОтПродажи.Сотрудник,
									  |	СУММА(БонусыСотрудниковОтПродажи.Сумма) КАК Сумма,
									  |	СУММА(БонусыСотрудниковОтПродажи.Бонус) КАК Бонус,
									  |	БонусыСотрудниковОтПродажи.Роль КАК Роль
									  |ИЗ
									  |	РегистрСведений.БонусыСотрудниковОтПродажи КАК БонусыСотрудниковОтПродажи
									  |ГДЕ
									  |	 БонусыСотрудниковОтПродажи.Сотрудник = &Сотрудник
									  |СГРУППИРОВАТЬ ПО
									  |	БонусыСотрудниковОтПродажи.Сотрудник,
									  |	БонусыСотрудниковОтПродажи.Роль";
	ЗапросБонусыПоПродажамОбщ.УстановитьПараметр("Сотрудник", Справочники.Сотрудники.НайтиПоКоду(
		Запрос.ПараметрыURL["id"]).Пользователь);

	РезультатЗапроса = ЗапросБонусыПоПродажам.Выполнить().Выбрать();
	СуммаБонусовМенеджераобщ = 0;
	СуммаБонусовКладовщикаобщ = 0;
	//МассивБонусовПоПродажам = Новый Массив;
	Пока РезультатЗапроса.Следующий() Цикл
		Если Строка(РезультатЗапроса.Роль) = "Менеджер" Тогда
			СуммаБонусовМенеджераобщ = СуммаБонусовМенеджераобщ + РезультатЗапроса.Бонус;
		Иначе
			СуммаБонусовКладовщикаобщ = СуммаБонусовКладовщикаобщ + РезультатЗапроса.Бонус;
		КонецЕсли;
	КонецЦикла;
	СтруктураСборки = Новый Структура;
	СтруктураПродажи = Новый Структура;

	СтруктураСборки.Вставить("sum_all_time", СуммаБонусовКладовщикаобщ);
	СтруктураСборки.Вставить("sum_current_range", СуммаБонусовКладовщика);

	СтруктураПродажи.Вставить("sum_all_time", СуммаБонусовМенеджераобщ);
	СтруктураПродажи.Вставить("sum_current_range", СуммаБонусовМенеджера);
	
		//СтруктураОтвета.Вставить("p", МассивБонусовПоПродажам);
	СтруктураОтвета.Вставить("sborka", СтруктураСборки);
	СтруктураОтвета.Вставить("sales", СтруктураПродажи);
		
		
		//МассивОтвета.Добавить(СтруктураОтвета);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

КонецФункции

Функция СменаCтатусаТоваровВЗНchangestateorder(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаказНаряда2();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Выборка = Запросзаявки.Выполнить().Выбрать();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);
	Тип   = Массив.state;
	
	Автор 	= Массив.author;

	 выборка.Следующий(); 
		Если выборка.Состояние = Перечисления.СостоянияЗаказНаряда.Выполнен Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписатьJSON(ЗаписьJSON, РаботаССайтомWT.СформироватьСтруктуруОшибки( , "Наряд закрыт!", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат ответ;

		КонецЕсли;

		ОбъектНаряда = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		//НайденныеСтроки = ОбъектНаряда.Товары.НайтиСтроки(Отбор);
		//Если НайденныеСтроки.количество() > 0 Тогда
		Для каждого элемент из Массив.pose цикл
		Позиция = Число(элемент);	
		Попытка
			СтрокаТЧ = ОбъектНаряда.Товары[Позиция - 1];  
			//СтрокаТЧ.Склад = Справочники.Склады.НайтиПоКоду("000000002");		
			СтрокаТЧ.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Получить(Тип);
			//++Если установили статус: "Установлено" тогда запиписываю время
			Если Тип = "5" И НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаУстановки)  Тогда
				СтрокаТЧ.ДатаУстановки = ТекущаяДата(); 		
			КонецЕсли;  
			//--Если установили статус: "Установлено" тогда запиписываю время
			ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " сменил статус в товаре "
						 + СтрокаТЧ.Номенклатура + " " + СтрокаТЧ.Партия;
			РаботаССайтомWT.ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
			//Иначе
		Исключение
			///Если  Не ОбъектНаряда.ЗаблокироватьТЧТовары Тогда
			//	
			//	Новаястрока = ОбъектНаряда.Товары.Добавить();
			//	Новаястрока.Партия = партия;
			//	Новаястрока.Номенклатура = Номенклатура; 
			//	Новаястрока.Количество = 1;
			//	Новаястрока.Автомобиль = ПолучитьМашину(партия);
			//	Новаястрока.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Выдано;
			//	Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
			//	Новаястрока.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 	
			//	
			//	ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + Новаястрока.Номенклатура + " "+ Новаястрока.Партия; 
			//	ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			//	ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение); 
			//	
			//	Ответ = Новый HTTPСервисОтвет(200);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Успех");
			//	Возврат Ответ;
			//Иначе
			//	Ответ = Новый HTTPСервисОтвет(400);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Заказ-наряд закрыт!");
			//	Возврат Ответ;	
			//КонецЕсли; 
//
//			Ответ = Новый HTTPСервисОтвет(400);
//			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//			Ответ.УстановитьТелоИзСтроки("Не удалось сменить статус товара!");
//			Возврат Ответ;
			ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписатьJSON(ЗаписьJSON, РаботаССайтомWT.СформироватьСтруктуруОшибки( , "Не удалось сменить статус товара!", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат ответ;
		//КонецЕсли;
			//КонецЕсли;
		КонецПопытки;
	КонецЦикла;
//	Ответ = Новый HTTPСервисОтвет(400);
//	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//	Ответ.УстановитьТелоИзСтроки("Не верные данные");
  //Возврат Ответ;
  ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение);
  
Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
КонецФункции

Функция СменаCтатусаВЗНchangestateorder(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаказНаряда2();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Выборка = Запросзаявки.Выполнить().Выбрать();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);
	Тип   = Массив.state;
	//Позиция = Число(Массив.pose);
	Автор 	= Массив.author;

	Пока выборка.Следующий() Цикл
		Если выборка.Состояние = Перечисления.СостоянияЗаказНаряда.Выполнен Тогда
	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписатьJSON(ЗаписьJSON, РаботаССайтомWT.СформироватьСтруктуруОшибки( , "Наряд закрыт!", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат Ответ;

		КонецЕсли;

		ОбъектНаряда = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		//НайденныеСтроки = ОбъектНаряда.Товары.НайтиСтроки(Отбор);
		//Если НайденныеСтроки.количество() > 0 Тогда
		Попытка
		
			ОбъектНаряда.Состояние = Перечисления.СостоянияЗаказНаряда.Получить(Тип);
//			ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " сменил статус в товаре "
//						 + СтрокаТЧ.Номенклатура + " " + СтрокаТЧ.Партия;
//			РаботаССайтомWT.ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
			ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение);

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
			//Иначе
		Исключение
			///Если  Не ОбъектНаряда.ЗаблокироватьТЧТовары Тогда
			//	
			//	Новаястрока = ОбъектНаряда.Товары.Добавить();
			//	Новаястрока.Партия = партия;
			//	Новаястрока.Номенклатура = Номенклатура; 
			//	Новаястрока.Количество = 1;
			//	Новаястрока.Автомобиль = ПолучитьМашину(партия);
			//	Новаястрока.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Выдано;
			//	Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
			//	Новаястрока.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 	
			//	
			//	ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + Новаястрока.Номенклатура + " "+ Новаястрока.Партия; 
			//	ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			//	ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение); 
			//	
			//	Ответ = Новый HTTPСервисОтвет(200);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Успех");
			//	Возврат Ответ;
			//Иначе
			//	Ответ = Новый HTTPСервисОтвет(400);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Заказ-наряд закрыт!");
			//	Возврат Ответ;	
			//КонецЕсли; 

	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписатьJSON(ЗаписьJSON, РаботаССайтомWT.СформироватьСтруктуруОшибки( , "Не удалось сменить статус товара!", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат Ответ;
			//КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписатьJSON(ЗаписьJSON, РаботаССайтомWT.СформироватьСтруктуруОшибки( , "Не верные данные!", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат Ответ;
КонецФункции

Функция ПолучитьТоварыЗаказНарядаgetproductsorder(Запрос)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗаказНарядТовары.Ссылка КАК Ссылка,
	|	ЗаказНарядТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказНарядТовары.Номенклатура КАК Товар,
	|	ЗаказНарядТовары.Количество КАК Количество,
	|	ЗаказНарядТовары.Цена КАК Цена,
	|	ЗаказНарядТовары.Автомобиль КАК Автомобиль,
	|	ЗаказНарядТовары.СкидкаСумма КАК СкидкаСумма,
	|	ЗаказНарядТовары.СкидкаПроцент КАК СкидкаПроцент,
	|	ЗаказНарядТовары.Сумма КАК Сумма,
	|	ЗаказНарядТовары.Партия КАК Партия,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказНарядТовары.Партия) КАК Партия2,
	|	ЗаказНарядТовары.СуммаВсего КАК СуммаВсего,
	|	ЗаказНарядТовары.Склад КАК Склад,
	|	ЗаказНарядТовары.Ответственный КАК Ответственный,
	|	ЗаказНарядТовары.СуммаНалог КАК СуммаНалог,
	|	ЗаказНарядТовары.СуммаЗп КАК СуммаЗп,
	|	ЗаказНарядТовары.Состояние КАК Состояние,
	|	ЗаказНарядТовары.СуммаСНДС КАК СуммаСНДС,
	|	ЗаказНарядТовары.Номенклатура.Артикул КАК Артикул,
	|	ЗаказНарядТовары.Номенклатура.Код КАК Код,
	|	ЗаказНарядТовары.Номенклатура.Наименование КАК Наименование,
	|	ЗаказНарядТовары.МеткаТовара КАК МеткаТовара,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ЗаказНарядТовары.МеткаТовара.Порядок КАК МеткаТовараПорядок
	|ПОМЕСТИТЬ ВТ_Пред
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|ГДЕ
	|	ЗаказНарядТовары.Ссылка.Номер = &Номер
	|%2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Пред.Ссылка КАК Ссылка,
	|	ВТ_Пред.НомерСтроки КАК НомерСтроки,
	|	ВТ_Пред.Товар КАК Товар,
	|	ВТ_Пред.Количество КАК Количество,
	|	ВТ_Пред.Цена КАК Цена,
	|	ВТ_Пред.Автомобиль КАК Автомобиль,
	|	ВТ_Пред.СкидкаСумма КАК СкидкаСумма,
	|	ВТ_Пред.СкидкаПроцент КАК СкидкаПроцент,
	|	ВТ_Пред.Сумма КАК Сумма,
	|	ВТ_Пред.Партия КАК Партия,
	|	ВТ_Пред.Партия2 КАК Партия2,
	|	ВТ_Пред.СуммаВсего КАК СуммаВсего,
	|	ВТ_Пред.Склад КАК Склад,
	|	ВТ_Пред.Ответственный КАК Ответственный,
	|	ВТ_Пред.СуммаНалог КАК СуммаНалог,
	|	ВТ_Пред.СуммаЗп КАК СуммаЗп,
	|	ВТ_Пред.Состояние КАК Состояние,
	|	ВТ_Пред.СуммаСНДС КАК СуммаСНДС,
	|	ВТ_Пред.Артикул КАК Артикул,
	|	ВТ_Пред.Код КАК Код,
	|	ВТ_Пред.Наименование КАК Наименование,
	|	ВТ_Пред.МеткаТовара КАК МеткаТовара,
	|	ВТ_Пред.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Пред.МеткаТовараПорядок КАК МеткаТовараПорядок
	|ПОМЕСТИТЬ ЗаказНаряд
	|ИЗ
	|	ВТ_Пред КАК ВТ_Пред
	|%3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаряд.Товар КАК Товар,
	|	ЗаказНаряд.Количество КАК Количество,
	|	ЗаказНаряд.Цена КАК Цена,
	|	ЗаказНаряд.Автомобиль КАК Автомобиль,
	|	ЗаказНаряд.СкидкаСумма КАК СкидкаСумма,
	|	ЗаказНаряд.СкидкаПроцент КАК СкидкаПроцент,
	|	ЗаказНаряд.Сумма КАК Сумма,
	|	ЗаказНаряд.Партия КАК Партия,
	|	ЗаказНаряд.Партия2 КАК Партия2,
	|	ЗаказНаряд.СуммаВсего КАК СуммаВсего,
	|	ЗаказНаряд.Склад КАК Склад,
	|	ЗаказНаряд.Ответственный КАК Ответственный,
	|	ЗаказНаряд.СуммаНалог КАК СуммаНалог,
	|	ЗаказНаряд.СуммаЗп КАК СуммаЗп,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.СуммаСНДС КАК СуммаСНДС,
	|	ЗаказНаряд.Артикул КАК Артикул,
	|	ЗаказНаряд.Код КАК Код,
	|	ЗаказНаряд.МеткаТовара КАК МеткаТовара,
	|	ЕСТЬNULL(ЗаказНаряд.МеткаТовараПорядок, 13) КАК МеткаТовараПорядок,
	|	ЗаказНаряд.НомерЗаписи КАК НомерЗаписи
	|ИЗ
	|	ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если Строка(Запрос.ПараметрыURL["text"]) <> "13" Тогда
		СтрокаГруппировки = " И ЗаказНарядТовары.Состояние = &СостояниеТовара";
	Иначе
		СтрокаГруппировки ="";
	КонецЕсли;
	/// Комлев 11/9/24 +++
	Если Строка(Запрос.ПараметрыURL["text_search"]) <> "00" Тогда
		УсловиеПоиска = " ГДЕ ВТ_Пред.Код ПОДОБНО ""%"" + &СтрокаПоиска + ""%"" ИЛИ ВТ_Пред.Наименование ПОДОБНО ""%"" + &СтрокаПоиска + ""%"" ИЛИ ВТ_Пред.Артикул ПОДОБНО ""%"" + &СтрокаПоиска + ""%""";
	Иначе
		УсловиеПоиска = "";
	КонецЕсли;
	/// Комлев 11/9/24 ---
	ЗапросРабот = Новый Запрос;

	ЗапросРабот.Текст =  СтрШаблон(ТекстЗапроса, Формат(10000, "ЧГ="), СтрокаГруппировки, УсловиеПоиска);
	Если Строка(Запрос.ПараметрыURL["text"]) <> "13"  Тогда
		ЗапросРабот.УстановитьПараметр("СостояниеТовара",
		Перечисления.СтатусыТовараВЗаказНаряде.Получить(Число(Запрос.ПараметрыURL["text"])));
	КонецЕсли;
	/// Комлев 11/9/24 +++
	Если Строка(Запрос.ПараметрыURL["text_search"]) <> "00"  Тогда
		ЗапросРабот.УстановитьПараметр("СтрокаПоиска", Строка(Запрос.ПараметрыURL["text_search"]));
	КонецЕсли;
	/// Комлев 11/9/24 ---
	ЗапросРабот.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	ЗапросРабот.УстановитьПараметр("НачинаяСЗаписи", 0);

	ОбщееКолво = ЗапросРабот.Выполнить().Выбрать().Количество();

	ЗапросРабот.Текст =  СтрШаблон(ТекстЗапроса, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="), СтрокаГруппировки, УсловиеПоиска);
	Если Строка(Запрос.ПараметрыURL["text"]) <> "13"  Тогда
		ЗапросРабот.УстановитьПараметр("СостояниеТовара",
		Перечисления.СтатусыТовараВЗаказНаряде.Получить(Число(Запрос.ПараметрыURL["text"])));
	КонецЕсли;
	/// Комлев 11/9/24 +++
	Если Строка(Запрос.ПараметрыURL["text_search"]) <> "00"  Тогда
		ЗапросРабот.УстановитьПараметр("СтрокаПоиска", Строка(Запрос.ПараметрыURL["text_search"]));
	КонецЕсли;
	/// Комлев 11/9/24 ---
	ЗапросРабот.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);

	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		ЗапросРабот.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* (Запрос.ПараметрыURL["page"] - 1) + 1)));
	Иначе
		ЗапросРабот.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = ЗапросРабот.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;
	Пока Выборка.Следующий() Цикл
						Если стрНайти(Выборка.Партия, "_") <> 0 Тогда
				МассивФото = Новый массив;
								ИндКоды =  Новый массив;
				   ИндКоды.Добавить(Выборка.Партия2);
						Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
						НайденныеФотки = Новый Массив;
		
						Попытка
		
							НайденныеФотки = Фотки[0].urls;

								Для Каждого Фотка Из НайденныеФотки Цикл
									Текст = "";
			
									Текст = Фотка;
									МассивФото.Добавить(Текст);
								КонецЦикла;
			
						Исключение
							МассивФото.Добавить();
						КонецПопытки;

					СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("name", Строка(Выборка.Товар));
				СтруктураТоваров.Вставить("position", Число(Выборка.НомерСтроки));
				СтруктураТоваров.Вставить("cost", Выборка.Цена);
				СтруктураТоваров.Вставить("count", Выборка.Количество);
				СтруктураТоваров.Вставить("sum", Строка(Выборка.Сумма));
				СтруктураТоваров.Вставить("issued", Строка(Выборка.Состояние));
				СтруктураТоваров.Вставить("id", Строка(Выборка.Партия));
	 			СтруктураТоваров.Вставить("type", "PRODUCT");
				СтруктураТоваров.Вставить("sklad", Строка(Выборка.Склад));
				СтруктураТоваров.Вставить("photos", МассивФото);
				СтруктураТоваров.Вставить("state", Строка(Выборка.Состояние));
				СтруктураТоваров.Вставить("article", Строка(Выборка.Артикул));
				СтруктураТоваров.Вставить("product_mark", Строка(Выборка.МеткаТовара));
				СтруктураСтатуса = Новый Структура;
				СтруктураСтатуса.Вставить("mark", Строка(выборка.МеткаТовара));
				СтруктураСтатуса.Вставить("mark_pose", выборка.МеткаТовараПорядок);
				СтруктураТоваров.Вставить("product_mark", СтруктураСтатуса);
				
				ИнфоОПартии = РаботаССайтомWT.ПолучитьИнформациюОПартии(Строка(Выборка.Партия));
				СтруктураТоваров.Вставить("shelf", Строка(ИнфоОПартии.Стеллаж));
				СтруктураТоваров.Вставить("poddon", Строка(ИнфоОПартии.Поддон));
				СтруктураТоваров.Вставить("year_car", Строка(ИнфоОПартии.ГодМашины));
				СтруктураТоваров.Вставить("photos", МассивФото);
				МассивТоваров.Добавить(СтруктураТоваров);
			Иначе
				ИндКоды =  Новый массив;
				ИндКоды.Добавить(Выборка.Код);
				Попытка
				Попытка
					Фотки = РаботаССайтомWT.ПолучениеФотокарточек(ИндКоды);
					НайденныеФотки = Фотки[0].images.common;
					Если Фотки[0].images.main <> "" Тогда
						НайденныеФотки.Вставить(0, Фотки[0].images.main);
					КонецЕсли;
				Исключение
					НайденныеФотки = Новый массив;
				КонецПопытки;
					МассивФото = Новый массив;

					Текст = НайденныеФотки;
					Если НайденныеФотки <> Неопределено И НайденныеФотки <> "" Тогда
			
		//	стр.колфото = 1;  

						Для Каждого Фотка Из НайденныеФотки Цикл
							Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
							Текст = Фотка;
							МассивФото.Добавить(Текст);
						КонецЦикла;
					КонецЕсли;

				Исключение
					МассивФото.Добавить("");
				КонецПопытки;

				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("name", Строка(Выборка.Товар));
				СтруктураТоваров.Вставить("position", Строка(Выборка.НомерСтроки));
				СтруктураТоваров.Вставить("cost", Выборка.Цена);
				СтруктураТоваров.Вставить("count", Выборка.Количество);
				СтруктураТоваров.Вставить("sum", Строка(Выборка.Сумма));
				СтруктураТоваров.Вставить("issued", Строка(Выборка.Состояние));
				СтруктураТоваров.Вставить("id", Строка(Выборка.Код));
				СтруктураТоваров.Вставить("type", "CARD_PRODUCT");
				СтруктураСтатуса = Новый Структура;
				СтруктураСтатуса.Вставить("mark", Строка(выборка.МеткаТовара));
				СтруктураСтатуса.Вставить("mark_pose", выборка.МеткаТовараПорядок);
				СтруктураТоваров.Вставить("product_mark", СтруктураСтатуса);
				СтруктураТоваров.Вставить("sklad", Строка(Выборка.Склад));
				СтруктураТоваров.Вставить("photos", МассивФото);
				СтруктураТоваров.Вставить("state", Строка(Выборка.Состояние));
				СтруктураТоваров.Вставить("article", Строка(Выборка.Артикул));
				ИнфоОПартии = РаботаССайтомWT.ПолучитьИнформациюОПартии(Строка(Выборка.Партия));
				СтруктураТоваров.Вставить("shelf", Строка(ИнфоОПартии.Стеллаж));
				СтруктураТоваров.Вставить("poddon", Строка(ИнфоОПартии.Поддон));
				СтруктураТоваров.Вставить("year_car", Строка(ИнфоОПартии.ГодМашины));
				
				//МассивТоваров.Добавить(СтруктураТоваров);
				СтруктураТоваров.Вставить("photos", МассивФото);
				МассивТоваров.Добавить(СтруктураТоваров);

			КонецЕсли;
				
	КонецЦикла;
	
	Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", ОбщееКолво);
	СтруктураИнфо.Вставить("products", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ПолучитьЗаказНарядgetorder(Запрос)
	
	ТекстЗапроса = "ВЫБРАТЬ
					   |	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
					   |	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
					   |	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
					   |ИЗ
					   |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
					   |ГДЕ
					   |	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
					   |	И СотрудникиКонтактнаяИнформация.Ссылка.Пользователь = &Код";

	ЗапросНомера = Новый Запрос;
	ЗапросНомера.Текст = ТекстЗапроса;
	
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаказНаряда2();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Выборка = Запросзаявки.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;
	Выборка.Следующий();
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("id", Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
		
		СтруктураИнфо.Вставить("date_start", Строка(выборка.ДатаНачала));
		СтруктураИнфо.Вставить("date_end", Строка(выборка.ДатаОкончания));
		СтруктураИнфо.Вставить("sum", выборка.СуммаДокумента);
		СтруктураИнфо.Вставить("sum_works", выборка.СуммаРаботы);
		СтруктураИнфо.Вставить("sum_products", выборка.СуммаТовары);
		СтруктураИнфо.Вставить("comment", выборка.Комментарий);
		СтруктураИнфо.Вставить("cell", Строка(выборка.ЯчейкаРВР));
		СтруктураКлиента = Новый Структура;
		СтруктураКлиента.Вставить("name", Строка(выборка.Клиент));
		СтруктураКлиента.Вставить("id", Строка(выборка.КлиентКод));
		СтруктураКлиента.Вставить("phone", выборка.КлиентТелефон);
		СтруктураИнфо.Вставить("client", СтруктураКлиента);

		СтруктураИнфо.Вставить("application", Строка(выборка.ЗаказКлиента));
		СтруктураСтатуса = Новый Структура;
		СтруктураСтатуса.Вставить("state", Строка(выборка.состояние));
		СтруктураСтатуса.Вставить("state_pose", Перечисления.СостоянияЗаказНаряда.Индекс(выборка.состояние));
		СтруктураИнфо.Вставить("state_order", СтруктураСтатуса);
		СтруктураИнфо.Вставить("project", Строка(выборка.Проект));
		СтруктураИнфо.Вставить("VIN", Строка(выборка.ВинКод));
		//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
		ЗапросНомера.УстановитьПараметр("Код", выборка.Код);
		 //@skip-check query-in-loop
			ВЫборкаНомера = ЗапросНомера.Выполнить().Выбрать();
			ВЫборкаНомера.Следующий();
		СтруктураМенеджера = Новый Структура;
		СтруктураМенеджера.Вставить("name", Строка(выборка.Инициатор));
		СтруктураМенеджера.Вставить("id", Строка(выборка.Код));
		СтруктураМенеджера.Вставить("phone", Строка(ВЫборкаНомера.ТелефонСлужебный));
		
		СтруктураИнфо.Вставить("manager", СтруктураМенеджера);
		//СтруктураИнфо.Вставить("sum",Строка(выборка.ИтогоРекв));
		//@skip-check query-in-loop
		МассивТоваров = РаботаССайтомWT.ПолучитьСтруктуруТоваров(выборка.Номер);
		СтруктураИнфо.Вставить("state_product", МассивТоваров); 
		//	ВыборкаТоваров = выборка.Таблица.Выбрать();
		//ТЗ_Товары = выборка.Таблица.Выгрузить();
//		Массивкодов = ТЗ_Товары.ВыгрузитьКолонку("Партия");
		//ТЗ_Товары.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
		//ТЗ_Товары.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
		МассивОтветственных = новый массив;
		ТЗ_Ответственные =  выборка.Ответственные.Выгрузить();
		Для Каждого стр Из ТЗ_Ответственные Цикл
			ЗапросНомера.УстановитьПараметр("Код", стр.Сотрудник);
		 //@skip-check query-in-loop
			ВЫборкаНомера = ЗапросНомера.Выполнить().Выбрать();
			ВЫборкаНомера.Следующий();
			СтруктураОтветственные = Новый Структура;
			СтруктураОтветственные.Вставить("name", Строка(стр.Сотрудник));
		//@skip-check reading-attribute-from-database
			СтруктураОтветственные.Вставить("id", Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",
				стр.Сотрудник).Код);
			СтруктураОтветственные.Вставить("phone", ВыборкаНомера.Представление);
			//СтруктураОтветственные.Вставить("role", Строка(стр.Роль));
			МассивОтветственных.Добавить(СтруктураОтветственные);
		КонецЦикла;
		СтруктураИнфо.Вставить("workers", МассивОтветственных);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокНарядовgetlistorders(Запрос)
	ЗапросНарядов = Новый Запрос;
	Если Строка(Запрос.ПараметрыURL["text"]) <> "13" Тогда
		СтрокаГруппировки = "И ЗаказНаряд.Состояние = &Состояние";
	Иначе
		СтрокаГруппировки ="";
	КонецЕсли;

	ЗапросНарядов.Текст =  СтрШаблон(текстДляСпискаНарядов(), Формат(10000, "ЧГ="),СтрокаГруппировки);

	Если Строка(Запрос.ПараметрыURL["text"]) <> "13"  Тогда
		ЗапросНарядов.УстановитьПараметр("Состояние",
		Перечисления.СостоянияЗаказНаряда.Получить(Число(Запрос.ПараметрыURL["text"])));
	КонецЕсли;
	ЗапросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = ЗапросНарядов.Выполнить().Выбрать().Количество();

	ЗапросНарядов.Текст =  СтрШаблон(текстДляСпискаНарядов(), Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="), СтрокаГруппировки);

	Если Строка(Запрос.ПараметрыURL["text"]) <> "13"  Тогда
		ЗапросНарядов.УстановитьПараметр("Состояние",
		Перечисления.СостоянияЗаказНаряда.Получить(Число(Запрос.ПараметрыURL["text"])));
	КонецЕсли;
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		ЗапросНарядов.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* (Запрос.ПараметрыURL["page"] - 1) + 1)));
	Иначе
		ЗапросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;

	Выборка = ЗапросНарядов.Выполнить().Выбрать();

	МассивНарядов = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("id", Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client", Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("application", Строка(выборка.ЗаказКлиента));
		СтруктураСтатуса = Новый Структура;
		СтруктураСтатуса.Вставить("state", Строка(выборка.состояние));
		СтруктураСтатуса.Вставить("state_pose", Перечисления.СостоянияЗаказНаряда.Индекс(выборка.состояние));
		СтруктураИнфо.Вставить("state_order", СтруктураСтатуса);
		СтруктураИнфо.Вставить("sum", выборка.СуммаДокумента);
		СтруктураИнфо.Вставить("sum_works", выборка.СуммаРаботы);
		СтруктураИнфо.Вставить("sum_products", выборка.СуммаТовары);
		СтруктураИнфо.Вставить("project", Строка(выборка.Проект));
		//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible", Строка(выборка.Ответственный));
		СтруктураИнфо.Вставить("comment", Строка(выборка.Комментарий));
		//@skip-check query-in-loop
		МассивТоваров = РаботаССайтомWT.ПолучитьСтруктуруТоваров(выборка.Номер);
		СтруктураИнфо.Вставить("state_product", МассивТоваров);

		МассивНарядов.Добавить(СтруктураИнфо);

	КонецЦикла;
	
	///+ГомзМА 16.04.2024
	Страница = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Страница = ?((Страница - Цел(Страница)) > 0, Цел(Страница) + 1, Цел(Страница));
	///-ГомзМА 16.04.2024

//	СтруктураИнфо= Новый Структура;
//	СтруктураИнфо.Вставить("pages", Страница);
//	СтруктураИнфо.Вставить("count", Выборкаобщ);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("pages", Страница);
	СтруктураОтвета.Вставить("count", Выборкаобщ);
	//СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("zakaz_naryads", МассивНарядов);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция СменатовараЗНreplaceproductzn(Запрос)
Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаказНаряда2();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Попытка
		Выборка = Запросзаявки.Выполнить().Выбрать();
		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);

		Массив  = ПрочитатьJSON(ЧтениеJSON);

		Замена  = Массив.id;
		Позиция = Массив.pose;
		Автор 	= Массив.author;

		ЭтоДеталь = ПроверкаНаДеталь(Замена);

		Если ЭтоДеталь Тогда
			Выборка.Следующий();

			ОбъектЗаявки = Выборка.Ссылка.ПолучитьОбъект();
			Новаястрока = ОбъектЗаявки.Товары[Позиция - 1];
			Если СтрНайти(Строка(Замена), "_") > 0 Тогда
				Партия = Справочники.ИндКод.НайтиПоНаименованию(Замена);

				Для Каждого СтрокаТЧ Из ОбъектЗаявки.Товары Цикл
					ПартияУжеЕсть = Ложь;
					Если СтрокаТЧ.Партия = Партия Тогда
						ПартияУжеЕсть = Истина;
						Продолжить;
					КонецЕсли;
				КонецЦикла;
				Если Не ПартияУжеЕсть Тогда
					Номенклатура = Партия.Владелец;
			//ИнфоПартия = ПолучитьИнформациюОПартии(Партия.Наименование);

					Новаястрока.Партия = Партия;
					Новаястрока.Номенклатура = Номенклатура;
					Новаястрока.Автомобиль = РаботаССайтомWT.ПолучитьМашину(Партия);
					НоваяСтрока.Склад = ПолучитьСкладИндНомера(Партия);
				//Новаястрока.Количество = 1;
				//@skip-check reading-attribute-from-database
				//Новаястрока.Цена = ?(ИнфоПартия.Цена <> 0, ИнфоПартия.Цена, Номенклатура.РекомендованаяЦена);
				//Новаястрока.ЦенаСоСкидкойНаценкой = Новаястрока.Цена;
					//Новаястрока.Артикул = Номенклатура.Артикул;
					ТекстЛога =  " В заявке " + ОбъектЗаявки.Номер + " добавил партию  " + Новаястрока.Номенклатура + " "
						+ Новаястрока.Партия;
					РаботаССайтомWT.ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
					ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);

					Ответ = Новый HTTPСервисОтвет(200);
					Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
				//Ответ.УстановитьТелоИзСтроки("Успех. Строка С Партией добавлена");
				Иначе
					Ответ = Новый HTTPСервисОтвет(500);
					Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки("В документе уже есть этот товар!");
				КонецЕсли;
			Иначе
				Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Замена);
				ИнфоНоменклатура = РаботаССайтомWT.ПолучитьИнформациюОТоваре(Замена);
				Новаястрока.Партия = Справочники.ИндКод.ПустаяСсылка();
				Новаястрока.Автомобиль = Справочники.Машины.ПустаяСсылка();
				Новаястрока.Номенклатура = ИнфоНоменклатура.Товар;
			//Новаястрока.Количество = 1;
			//Новаястрока.Цена = ИнфоНоменклатура.Цена;
			//Новаястрока.ЦенаСоСкидкойНаценкой = Новаястрока.Цена;
				ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил Товар " + Новаястрока.Номенклатура;
				РаботаССайтомWT.ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
				ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);

				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			//Ответ.УстановитьТелоИзСтроки("Успех. Номенклатура установлена " + строка(Новаястрока.Номенклатура));
			КонецЕсли;
			РаботаССайтомWT.ПересчётСуммыЗН(Выборка.ссылка);
		Иначе
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Нет такого товара!");
		КонецЕсли;
	Исключение
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, РаботаССайтомWT.СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса",
			Информация.Описание));

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ИзменитьЦенуТовараВЗаявкеEditPriceProduct(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);
	Массив  = ПрочитатьJSON(ЧтениеJSON);

	Покупка 	= Массив.id;
	Цена		= Массив.price;
	Автор 	= Массив.author;

	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);

	Выборка = Запросзаявки.Выполнить().Выбрать();
	Выборка.Следующий();

	ОбъектЗаявки = Выборка.Ссылка.ПолучитьОбъект();

	Если СтрНайти(Строка(Покупка), "_") > 0 Тогда
		Партия = Справочники.ИндКод.НайтиПоНаименованию(Покупка);
		Номенклатура = Партия.Владелец;

		СтруктураОтбора =  Новый Структура;
		СтруктураОтбора.Вставить("Партия", Партия);

		НайденныеСтроки = ОбъектЗаявки.Товары.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденныеСтроки[0].Цена = Цена;
			НайденныеСтроки[0].ЦенаСоСкидкойНаценкой = Цена;
			НайденныеСтроки[0].Сумма = Цена;

			ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил цену: " + Цена + "в товаре "
				+ НайденныеСтроки[0].Номенклатура + НайденныеСтроки[0].Партия;
			ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
			ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Иначе
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Покупка);

		СтруктураОтбора =  Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
		НайденныеСтроки = ОбъектЗаявки.Товары.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденныеСтроки[0].Цена = Цена;
			НайденныеСтроки[0].ЦенаСоСкидкойНаценкой = Цена;
			НайденныеСтроки[0].Сумма = Цена;

			ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил цену: " + Цена + "в товаре "
				+ НайденныеСтроки[0].Номенклатура + НайденныеСтроки[0].Партия;
			ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
			ОбъектЗаявки.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПродажаЗапчастей.Ссылка
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.ЗаказКлиента = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", Выборка.Ссылка);
	
//	РезультатЗапроса = Запрос.Выполнить();
//	ВыборкаПродажа = РезультатЗапроса.Выбрать().Следующий(); 
	ВыборкаПродажа = Запрос.Выполнить().Выбрать();
	Если ВыборкаПродажа.Количество() <> 0 Тогда
		ВыборкаПродажа.Следующий();
		ОбъектПродажа = ВыборкаПродажа.Ссылка.ПолучитьОбъект();

		Если СтрНайти(Строка(Покупка), "_") > 0 Тогда
			Партия = Справочники.ИндКод.НайтиПоНаименованию(Покупка);
			Номенклатура = Партия.Владелец;

			СтруктураОтбора =  Новый Структура;
			СтруктураОтбора.Вставить("Партия", Партия);
			НайденныеСтроки = ОбъектПродажа.Таблица.НайтиСтроки(СтруктураОтбора);

			Если НайденныеСтроки.Количество() <> 0 Тогда
				НайденныеСтроки[0].Цена = Цена;
				НайденныеСтроки[0].Сумма = НайденныеСтроки[0].Цена * НайденныеСтроки[0].Количество;

				ТекстЛога =  " В заявке " + ОбъектПродажа.номер + " установил цену: " + Цена + "в товаре "
					+ НайденныеСтроки[0].Товар + НайденныеСтроки[0].Партия;
				ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
				ОбъектПродажа.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Иначе
			Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Покупка);

			СтруктураОтбора =  Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
			НайденныеСтроки = ОбъектПродажа.Таблица.НайтиСтроки(СтруктураОтбора);

			Если НайденныеСтроки.Количество() <> 0 Тогда
				НайденныеСтроки[0].Цена = Цена;
				НайденныеСтроки[0].Сумма = НайденныеСтроки[0].Цена * НайденныеСтроки[0].Количество;

				ТекстЛога =  " В заявке " + ОбъектПродажа.номер + " установил цену: " + Цена + "в товаре "
					+ НайденныеСтроки[0].Номенклатура + НайденныеСтроки[0].Партия;
				ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
				ОбъектПродажа.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Возврат Ответ;
КонецФункции

Функция ПолучитьТоварGetProduct(Запрос)

	ЗапросТовара = Новый Запрос;
	ЗапросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));
	ЗапросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	ЗапросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	ТЗ_Товары = ЗапросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ_Товары.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ_Товары.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = ТЗ_Товары.ВыгрузитьКолонку("индкод");
	Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
	Итер = 0;
	
	///+ГомзМА 21.02.2024 
	Фотограф = ПолучитьФотографа(Запрос.ПараметрыURL["id"]);
	ФИОФотографа = "";
	ТабНомФотографа = "";
	Если Фотограф <> Неопределено Тогда
		ФИОФотографа = Справочники.Сотрудники.НайтиПоКоду(Фотограф.tabnum);
		ТабНомФотографа = Фотограф.tabnum;
	КонецЕсли;
	
	///-ГомзМА 21.02.2024
	Если ТЗ_Товары.Количество() > 0 Тогда
		Для Каждого стр Из ТЗ_Товары Цикл
			НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
			НайденныеФотки = Фотки[итер].urls;
			МассивФото = Новый массив;
			Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

				стр.колфото = 1;

				Для Каждого Фотка Из НайденныеФотки Цикл
					Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
					Текст = Фотка;
					МассивФото.Добавить(Текст);
				КонецЦикла;
			КонецЕсли;
			итер = итер + 1;
			ТЗ_Товары.Сортировать("колФото Убыв");
		
		///+ГомзМА 20.05.2024
			РекомендованноеМестоХранения = Новый Массив;

			ЗапросРекомендованноеМесто = Новый Запрос;
			ЗапросРекомендованноеМесто.Текст = текстРекомендуемоеМестоХранения();

			ЗапросРекомендованноеМесто.УстановитьПараметр("Наименование", Строка(стр.код));
		//@skip-check query-in-loop
			РезультатЗапросаРекомендованноеМесто = ЗапросРекомендованноеМесто.Выполнить().Выбрать();

			РезультатЗапросаРекомендованноеМесто.Следующий();

			СтруктураРекомендованноеМесто = Новый Структура;
			СтруктураРекомендованноеМесто.Вставить("sklad", Строка(РезультатЗапросаРекомендованноеМесто.Склад));
			СтруктураРекомендованноеМесто.Вставить("shelf", Строка(РезультатЗапросаРекомендованноеМесто.Адрес));
			СтруктураРекомендованноеМесто.Вставить("poddon", Строка(РезультатЗапросаРекомендованноеМесто.Поддон));
			СтруктураРекомендованноеМесто.Вставить("count", Строка(РезультатЗапросаРекомендованноеМесто.Количество));

			РекомендованноеМестоХранения.Добавить(СтруктураРекомендованноеМесто);
			///-ГомзМА 20.05.2024
			СтруктураТоваров = Новый Структура;	
			//++МазинЕС 23-07-2024
			//@skip-check query-in-loop
			Структура = ПолучитьДанныеОТоваре(стр.индкод);
			СтруктураТоваров.Вставить("prodan", Структура.Выдан);
			СтруктураТоваров.Вставить("vidan", Структура.Продан);
			СтруктураТоваров.Вставить("IDzaivka", Структура.ЗаказКлиентаНомер); 
			//--МазинЕС 23-07-2024
						//++МазинЕС 05-08-2024 
			СтруктураТоваров.Вставить(" yearcar", Число(стр.машинаГод));
			//--МазинЕС 05-08-2024
			СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("price", стр.Цена);
			СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
			СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
			СтруктураТоваров.Вставить("uchetchik", Строка(стр.Учетчик));
			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
			СтруктураТоваров.Вставить("state", Строка(стр.Состояние));
			СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
			СтруктураТоваров.Вставить("chek_size", стр.Размеры);
			СтруктураТоваров.Вставить("availability", стр.ФактНаличия);
		
		///+ГомзМА 21.02.2024
			СтруктураТоваров.Вставить("tabnum_photographer", Строка(ТабНомФотографа));
			СтруктураТоваров.Вставить("name_photographer", Строка(ФИОФотографа));
		///-ГомзМА 21.02.2024

			СтруктураТоваров.Вставить("length", стр.длин);
			СтруктураТоваров.Вставить("width", стр.шир);
			СтруктураТоваров.Вставить("height", стр.выс);
			СтруктураТоваров.Вставить("weight", стр.Вес);

			СтруктураТоваров.Вставить("code", Строка(стр.код));
			СтруктураТоваров.Вставить("id", Строка(стр.индкод));
			СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

			Если стр.ДатаПроверкиЕстьВНаличии <> Дата(1, 1, 1) Тогда
				СтруктураТоваров.Вставить("inventory_date", Формат(стр.ДатаПроверкиЕстьВНаличии, "ДФ=dd.MM.yyyy;"));
			Иначе
				СтруктураТоваров.Вставить("inventory_date", "");
			КонецЕсли;
			Если стр.ОтветственныйЕстьВНаличии <> Справочники.Пользователи.ПустаяСсылка() Тогда
				Сотрудник  = Справочники.Сотрудники.НайтиПоНаименованию(стр.ОтветственныйЕстьВНаличии);
				СтруктураТоваров.Вставить("inventory_worker", Строка(Сотрудник.Код));
			Иначе
				СтруктураТоваров.Вставить("inventory_worker", "");
			КонецЕсли;
			
		
		///+ГомзМА 20.05.2024
			СтруктураТоваров.Вставить("recommended_shelf", СтруктураРекомендованноеМесто);
		///-ГомзМА 20.05.2024

			СтруктураТоваров.Вставить("photos", МассивФото);
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		//Информация = ИнформацияОбОшибке();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Товар не найден",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПолучитьКарточкуТовараgetcardproduct(Запрос)
	ЗапросКарточки = Новый Запрос;
	ЗапросКарточки.Текст = "ВЫБРАТЬ
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Бренд КАК Бренд,
	|	Номенклатура.Категория КАК Категория,
	|	Номенклатура.КтоСоздал КАК КтоСоздал,
	|	Номенклатура.МестоНаСкладе2 КАК МестоНаСкладе2,
	|	Номенклатура.Производитель КАК Производитель,
	|	Номенклатура.Состояние КАК Состояние,
	|	Номенклатура.Серия КАК Серия,
	|	Номенклатура.РекомендуемоеМестоХранения КАК РекомендуемоеМестоХранения,
	|	Номенклатура.НомерПроизводителя КАК НомерПроизводителя,
	|	Номенклатура.РекомендованаяЦена КАК РекомендованаяЦена,
	|	Номенклатура.Описание,
	|	Номенклатура.ОстатокСовпадает,
	|	Номенклатура.ОстатокСовпадаетМСК,
	|	Номенклатура.ОстатокСовпадаетЕКБ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код";
	ЗапросКарточки.УстановитьПараметр("Код", Запрос.ПараметрыURL["id"]);
	Выборка = ЗапросКарточки.Выполнить().Выбрать();
	//МассивКарточки = Новый Массив;

	Пока выборка.Следующий() Цикл
		//@skip-check query-in-loop
		ОстатокТовара = ПолучитьКоличествоУчтенногоТовара(выборка.Код);
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("id", Строка(выборка.Код));
		СтруктураИнфо.Вставить("article", Строка(выборка.Артикул));
		СтруктураИнфо.Вставить("name", Строка(выборка.Наименование));
		СтруктураИнфо.Вставить("description", Строка(выборка.Описание));
		//СтруктураИнфо.Вставить("brend", Строка(выборка.Бренд));
		//СтруктураИнфо.Вставить("category", Строка(выборка.Категория));
		//СтруктураИнфо.Вставить("creator", Строка(выборка.Производитель));
		//СтруктураИнфо.Вставить("number_creator", Строка(выборка.НомерПроизводителя));
		СтруктураИнфо.Вставить("state", Строка(Выборка.Состояние));
		СтруктураИнфо.Вставить("series", Строка(Выборка.Серия));
		СтруктураИнфо.Вставить("type", "CARD_PRODUCT");
		//СтруктураИнфо.Вставить("place", Строка(Выборка.МестоНаСкладе2));
		//СтруктураИнфо.Вставить("author", Строка(Выборка.КтоСоздал));
		СтруктураИнфо.Вставить("price", Выборка.РекомендованаяЦена);
		СтруктураИнфо.Вставить("count_registered", Число(ОстатокТовара));
		СтруктураИнфо.Вставить("count_verified_NN", ?(Выборка.ОстатокСовпадает = Истина, 1, 0));
		СтруктураИнфо.Вставить("count_verified_MSK", ?(Выборка.ОстатокСовпадаетМСК = Истина, 1, 0));
		СтруктураИнфо.Вставить("count_verified_EKB", ?(Выборка.ОстатокСовпадаетЕКБ = Истина, 1, 0));
//		Пока Лев(Код, 1) = "0" Цикл
//			Код = Прав(Код, СтрДлина(Код) - 1);
//		КонецЦикла;
//		Код = "0" + код;

		ИндКоды =  Новый массив;
		ИндКоды.Добавить(выборка.Код);

		Попытка
			Попытка
				Фотки = РаботаССайтомWT.ПолучениеФотокарточек(ИндКоды);
				НайденныеФотки = Фотки[0].images.common;
				Если Фотки[0].images.main <> "" Тогда
					НайденныеФотки.Вставить(0, Фотки[0].images.main);
				КонецЕсли;
			Исключение
				НайденныеФотки = Новый массив;
			КонецПопытки;
			МассивФото = Новый массив;

			Текст = НайденныеФотки;
			Если НайденныеФотки <> Неопределено И НайденныеФотки <> "" Тогда
			
		//	стр.колфото = 1;  

				Для Каждого Фотка Из НайденныеФотки Цикл
					Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
					Текст = Фотка;
					МассивФото.Добавить(Текст);
				КонецЦикла;
			КонецЕсли;

		Исключение
			МассивФото.Добавить("");
		КонецПопытки;

		СтруктураИнфо.Вставить("photos", НайденныеФотки);

	КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	
	
	//СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	////СтруктураОтвета.Вставить("data",МассивТоваров);
	//
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция СменаМестаХраненияEditPlace(Запрос)
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);
	Массив = ПрочитатьJSON(ЧтениеJSON);
	Если Массив.type = 1 Тогда
		Ответ = РаботаССайтомWT.РедактироватьПоддон(Массив.id, Массив.place, Массив.author);
	Иначе
		Ответ = РаботаССайтомWT.РедактироватьПолку(Массив.id, Массив.place, Массив.author);
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Функция ПолучитьЗаявкиКладовщикаGetAppStorekeeper(Запрос)
	
//ПодСостояниеСборки = Новый Массив;
	МассивЗаявок = Новый Массив;
	Попытка

		СтрокаПоиска = "	И (ЗаказКлиента.Номер ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.КлиентНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.Клиент.ПолноеНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.НомерТелефона ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")";
		ЗапросЗаявок = Новый Запрос;

		Текст = "ВЫБРАТЬ
				|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
				|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
				|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
				|ПОМЕСТИТЬ ТелефоныСлужебные
				|ИЗ
				|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
				|ГДЕ
				|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
				|;
				|/////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 100000
				|	ЗаказКлиента.Номер КАК Номер,
				|	ЗаказКлиента.Дата КАК Дата,
				|	Выбор
				|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
				|			Тогда ЗаказКлиента.Клиент
				|		Иначе ЗаказКлиента.КлиентНаименование
				|	Конец КАК Клиент,
				|	Выбор
				|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
				|			Тогда ЗаказКлиента.Клиент.Код
				|		Иначе ""Не авторизован""
				|	Конец КАК КлиентКод,
				|	ЗаказКлиента.Состояние КАК Состояние,
				|	ЗаказКлиента.Ответственный КАК Ответственный,
				|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
				|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
				|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
				|	ТелефоныСлужебные.Ссылка.Код КАК КодСотрудника,
				|	ЗаказКлиента.Ссылка КАК Ссылка,
				|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
				|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ЗаказКлиента.Комментарий КАК Комментарий,
				|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ЗаказКлиента.НомерТелефона КАК Телефон,
				|	ЗаказКлиента.WTPanel КАК WTPanel,
				|	АвтономерЗаписи() КАК НомерЗаписи, 
				|	ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком.Ссылка КАК СтатусОбработкиЗаявкиКладовщикомСсылка,
				|	ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком.Порядок КАК СтатусОбработкиЗаявкиКладовщикомПорядок				
				|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|		ЛЕВОЕ Соединение ТелефоныСлужебные КАк ТелефоныСлужебные
				|		По ЗаказКлиента.Ответственный = ТелефоныСлужебные.ссылка.пользователь
				|ГДЕ
				|	ЗаказКлиента.Ответственные.Сотрудник = &Кладовщик
				|%2
				|
				|УПОРЯДОЧИТЬ ПО
				|	Номер УБЫВ
				|ИНДЕКСИРОВАТЬ ПО
				|	Ответственный
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ %1
				|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
				|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
				|	ВТ_ДанныеЗаявки.Номер КАК Номер,
				|	ВТ_ДанныеЗаявки.Дата КАК Дата,
				|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
				|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
				|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
				|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
				|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
				|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
				|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ВТ_ДанныеЗаявки.СтатусОбработки КАК СтатусОбработки,
				|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ВТ_ДанныеЗаявки.ТелефонСлужебный КАК ТелефонСлужебный,
				|	ВТ_ДанныеЗаявки.КодСотрудника КАК КодСотрудника,
				|	ВТ_ДанныеЗаявки.WTPanel КАК WTPanel,
				|	ВТ_ДанныеЗаявки.КлиентКод КАК КлиентКод,
				|	ВТ_ДанныеЗаявки.Телефон КАК Телефон,
				|ВТ_ДанныеЗаявки.СтатусОбработкиЗаявкиКладовщикомСсылка КАК СтатусОбработкиЗаявкиКладовщикомСсылка,
				|ЕСТЬNULL(ВТ_ДанныеЗаявки.СтатусОбработкиЗаявкиКладовщикомПорядок, 0) КАК СтатусОбработкиЗаявкиКладовщикомПорядок
				|ИЗ
				|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
				|ГДЕ
				|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи
				|УПОРЯДОЧИТЬ ПО
				|	Дата УБЫВ";
		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), " ");
		Иначе
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), СтрокаПоиска);
			ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;
		//++

		Запрос1 = Новый Запрос;
		Запрос1.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Пользователь КАК Пользователь
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Код = &Код";

		Код = Запрос.ПараметрыURL["storekeeper"];
		Запрос1.УстановитьПараметр("Код", Код);
		Выборка1 = Запрос1.Выполнить().Выбрать();
		Выборка1.Следующий();
		ЗапросЗаявок.УстановитьПараметр("Кладовщик", Выборка1.Пользователь);
		
		//--
		//ЗапросЗаявок.УстановитьПараметр("Кладовщик", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["storekeeper"]).пользователь);

	
	//ЗапросЗаявок.УстановитьПараметр("СостояниеСборки", состояниеСборки);
	//ЗапросЗаявок.УстановитьПараметр("ПодстатусОбработки", ПодСостояниеСборки);
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		ОбщееКолво = ЗапросЗаявок.Выполнить().Выбрать().Количество();
		//ОбщееКолво = 10000;
	
	//Если Запрос.ПараметрыURL["storekeeper"]<>"0" Тогда	
		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), " ");
		Иначе
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), СтрокаПоиска);
			ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;	

		//ЗапросЗаявок.УстановитьПараметр("Кладовщик", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["storekeeper"]).пользователь);
		ЗапросЗаявок.УстановитьПараметр("Кладовщик", Выборка1.Пользователь);
//	Иначе
//		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
//		Запрос.ПараметрыURL["count"], 10000), "ЧГ="),"");
//	КонецЕсли;
		
	//ЗапросЗаявок.УстановитьПараметр("СостояниеСборки", состояниеСборки);
	//ЗапросЗаявок.УстановитьПараметр("ПодстатусОбработки", ПодСостояниеСборки);
		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));

		Иначе
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;
		СписокПоиска = ЗапросЗаявок.Выполнить().Выгрузить();
		Для Каждого Результат Из СписокПоиска Цикл

			СтруктураЗаявок = Новый Структура;
			СтруктураЗаявок.Вставить("id", Строка(Результат.Номер));
			СтруктураЗаявок.Вставить("date", Строка(Результат.Дата));
			СтрукткраСтатуса = Новый Структура;
			СтрукткраСтатуса.Вставить("state_name", Строка(Результат.СтатусОбработкиЗаявкиКладовщикомСсылка));
			СтрукткраСтатуса.Вставить("state_number", Число(Результат.СтатусОбработкиЗаявкиКладовщикомПорядок) + 1);
			СтруктураЗаявок.Вставить("state", СтрукткраСтатуса);
			СтруктураЗаявок.Вставить("sub_state", Строка(Результат.ПодстатусОбработки));

			СтруктураКлиента = Новый Структура;
			СтруктураКлиента.Вставить("name", Строка(Результат.Клиент));
			СтруктураКлиента.Вставить("id", Результат.КлиентКод);
			СтруктураКлиента.Вставить("phone", Результат.Телефон);
			СтруктураЗаявок.Вставить("client", СтруктураКлиента);

			СтруктураМенеджера = Новый Структура;
			СтруктураМенеджера.Вставить("name", Строка(Результат.Ответственный));
	//Менеджер = Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь", выборка.Ответственный).Код;
			СтруктураМенеджера.Вставить("id", Строка(Результат.КодСотрудника));
			СтруктураМенеджера.Вставить("phone", Строка(Результат.ТелефонСлужебный));
			СтруктураЗаявок.Вставить("manager", СтруктураМенеджера);
	
		//@skip-check query-in-loop
			//СтруктураВремени = ПолучитьВремяЗК(Результат.Ссылка);
			СтруктураЗаявок.Вставить("time_work", 0);
			СтруктураЗаявок.Вставить("time_wait", 0);
			СтруктураЗаявок.Вставить("workers", 0);
			СтруктураЗаявок.Вставить("in_work", 0);
			//@skip-check query-in-loop
			СтруктураТоваров = ПолучитьТоварыЗаявки1(Результат.Номер);
			СтруктураЗаявок.Вставить("productsIds", СтруктураТоваров.Товары);
			СтруктураЗаявок.Вставить("summ", СтруктураТоваров.СуммаТоваров);
			МассивЗаявок.Добавить(СтруктураЗаявок);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);
		СтруктураИнфо.Вставить("applications", МассивЗаявок);

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураОтвета.Вставить("applications", МассивЗаявок);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ПолучитьПотерянныеТоварыgetlost(Запрос)
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТовараПотеряшки(), Формат(10000, "ЧГ="));  
	
	///+ГомзМА 19.02.2024
	Если Запрос.ПараметрыURL["id"] <> " " Тогда
		запросТовара.Текст = СтрЗаменить(запросТовара.Текст, "{ГДЕ", "ГДЕ");
		запросТовара.Текст = СтрЗаменить(запросТовара.Текст, "РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}",
			"РегИндНомер.индкод.Владелец.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ "		ИЛИ РегИндНомер.индкод.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ "		ИЛИ РегИндНомер.индкод.Владелец.Артикул ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС + "		ИЛИ РегИндНомер.индкод.Владелец.МестоНаСкладе2.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~"""
			+ Символы.ПС + "		ИЛИ РегИндНомер.Стеллаж.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~"")");
		запросТовара.УстановитьПараметр("НазваниеПоиска", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
			Строка(Запрос.ПараметрыURL["id"])) + "%");
	КонецЕсли;
	///-ГомзМА 19.02.2024

	запросТовара.УстановитьПараметр("наименование", "П0003");
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Пред = запросТовара.Выполнить().Выбрать();

	Выборкаобщ = Пред.Количество();
	запросТовара.Текст =  СтрШаблон(текстДляТовараПотеряшки(), Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	///+ГомзМА 19.02.2024
	Если Запрос.ПараметрыURL["id"] <> " " Тогда
		запросТовара.Текст = СтрЗаменить(запросТовара.Текст, "{ГДЕ", "ГДЕ");
		запросТовара.Текст = СтрЗаменить(запросТовара.Текст, "РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}",
			"РегИндНомер.индкод.Владелец.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ "		ИЛИ РегИндНомер.индкод.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ "		ИЛИ РегИндНомер.индкод.Владелец.Артикул ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС + "		ИЛИ РегИндНомер.индкод.Владелец.МестоНаСкладе2.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~"""
			+ Символы.ПС + "		ИЛИ РегИндНомер.Стеллаж.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~"")");
		запросТовара.УстановитьПараметр("НазваниеПоиска", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
			Строка(Запрос.ПараметрыURL["id"])) + "%");
	КонецЕсли;
	///-ГомзМА 19.02.2024

	запросТовара.УстановитьПараметр("наименование", "П0003");

	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;

	Для Каждого стр Из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		итер = итер + 1;
		тз.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", Число(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

//	СтруктураИнфо= Новый Структура;
//	СтруктураИнфо.Вставить("pages", Итог);
//	СтруктураИнфо.Вставить("count", Выборкаобщ);
	///+ГомзМА 19.02.2024
	//СтруктураИнфо.Вставить("count",ТЗ.Количество());
	///-ГомзМА 19.02.2024

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("pages", Итог);
	СтруктураОтвета.Вставить("count", Выборкаобщ);
	СтруктураОтвета.Вставить("products", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ВзятьВРаботуКладощикСкладtakeznstoragersklad(Запрос)
	
	Запросзн = Новый Запрос;
	Запросзн.Текст = текстДляЗаказНаряда2();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	Запросзн.УстановитьПараметр("Номер", Массив.id);
	Выборка = Запросзн.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Пока выборка.Следующий() Цикл
		
		ТекстЛога =  " Взял в работу: ";

		РаботаССайтомWT.ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
		ОбъектЗн = Выборка.ссылка.ПолучитьОбъект();
		Отбор = Новый Структура;
		Отбор.Вставить("Сотрудник", Ответственный);

		НайденныеСтроки = ОбъектЗн.Ответственные.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаОтветственного = ОбъектЗн.Ответственные.Добавить();
			СтрокаОтветственного.Сотрудник = Ответственный;
			СтрокаОтветственного.Роль = Перечисления.дт_РолиВПродаже.Кладовщик;
		КонецЕсли;
		
	//	ОбъектЗн.ОтветственныйЗаОбработку = Ответственный;
		ОбъектЗн.Записать();
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;

КонецФункции


Функция ПолучитьКарточкиИзЗаявокGetProductCardsFromApplications(Запрос)
	/// Комлев 23/12/24 ---
	Попытка
		ТекстЗапросаКарточек = "ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиентаТовары.Ссылка) КАК Спрос
		|ПОМЕСТИТЬ ВТ_Спрос
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ЗаказКлиентаТовары.Номенклатура.Код КАК НоменклатураКод,
		|	ЗаказКлиентаТовары.Ссылка.Номер КАК Номер,
		|	ЗаказКлиентаТовары.Ссылка.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ_ДаныеИзЗаявки
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
		|		ПО ЗаказКлиентаТовары.Партия = ИндНомер.индкод
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДАтаОкончания
		|	И ЗаказКлиентаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.Пустаяссылка)
		|	И ИндНомер.АвитоЧастник
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Ссылка.Номер,
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЗаказКлиентаТовары.Номенклатура.Код,
		|	ЗаказКлиентаТовары.Ссылка.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрНакопления1Остатки.Товар КАК Товар,
		|	СУММА(ВЫБОР
		|		КОГДА ИндНомер.ДатаПроверкиЕстьВНаличии <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 1
		|	КОНЕЦ) КАК Инвент,
		|	СУММА(ВЫБОР
		|		КОГДА ИндНомер.ДатаПроверкиЕстьВНаличии = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 1
		|	КОНЕЦ) КАК НеИнверн,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрНакопления1Остатки.индкод) КАК КолвоОстаток
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрНакопления.РегистрНакопления1.Остатки(,) КАК РегистрНакопления1Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
		|		ПО (ИндНомер.индкод = РегистрНакопления1Остатки.индкод)
		|ГДЕ
		|	РегистрНакопления1Остатки.КолвоОстаток > 0
		|	И ИндНомер.АвитоЧастник
		|СГРУППИРОВАТЬ ПО
		|	РегистрНакопления1Остатки.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Остатки.Товар КАК Товар,
		|	ВТ_ДаныеИзЗаявки.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_ДаныеИзЗаявки.Номер КАК Номер,
		|	ВТ_ДаныеИзЗаявки.Дата КАК Дата,
		|	ВТ_Остатки.КолвоОстаток КАК КолвоОстаток,
		|	ВТ_Остатки.Инвент КАК Инвент,
		|	ВТ_Остатки.НеИнверн КАК НеИнверн
		|ПОМЕСТИТЬ ВТ_ДанныеИнвентОстаток
		|ИЗ
		|	ВТ_ДаныеИзЗаявки КАК ВТ_ДаныеИзЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
		|		ПО ВТ_ДаныеИзЗаявки.Номенклатура = ВТ_Остатки.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕрвые 1000000
		|	ВТ_ДанныеИнвентОстаток.Товар КАК Товар,
		|	ВТ_ДанныеИнвентОстаток.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_ДанныеИнвентОстаток.Номер КАК Номер,
		|	ВТ_ДанныеИнвентОстаток.Дата КАК Дата,
		|	ВТ_ДанныеИнвентОстаток.КолвоОстаток КАК КолвоОстаток,
		|	ЕСТЬNULL(ВТ_ДанныеИнвентОстаток.Инвент, 0) КАК Инвент,
		|	ЕСТЬNULL(ВТ_ДанныеИнвентОстаток.НеИнверн, 0) КАК НеИнверн,
		|	ЕСТЬNULL(ВТ_Спрос.Спрос, 0) КАК Спрос,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
		|ПОМЕСТИТЬ ВТ_ВсеДанные
		|ИЗ
		|	ВТ_ДанныеИнвентОстаток КАК ВТ_ДанныеИнвентОстаток
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Спрос КАК ВТ_Спрос
		|		ПО (ВТ_ДанныеИнвентОстаток.Товар = ВТ_Спрос.Номенклатура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата Убыв
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ %1
		|	ВТ_ВсеДанные.Товар КАК Номенклатура,
		|	ВТ_ВсеДанные.НоменклатураКод КАК Код,
		|	ВТ_ВсеДанные.Номер КАК НомерЗаявки,
		|	ВТ_ВсеДанные.Дата КАК ДатаЗаявки,
		|	ВТ_ВсеДанные.КолвоОстаток КАК ОбщееКоличество,
		|	ВТ_ВсеДанные.Инвент КАК КоличествоИнвент,
		|	ВТ_ВсеДанные.НеИнверн КАК КоличествоНеИнвент,
		|	ЕстьNULL(ВТ_ВсеДанные.Спрос, 0) КАК Спрос,
		|	ВТ_ВсеДанные.НомерЗаписи КАК НомерЗаписи
		|ИЗ
		|	ВТ_ВсеДанные КАК ВТ_ВсеДанные
		|ГДЕ
		|	ВТ_ВсеДанные.НомерЗаписи >= &НачинаяСЗаписи";

		ЗапросТовара = Новый Запрос;
		ЗапросТовара.Текст =  СтрШаблон(ТекстЗапросаКарточек, Формат(10000, "ЧГ="));
		ЗапросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
		ДатаНачала = НачалоДня(ТекущаяДата() - (24 * 60 * 60) * 60);
		ЗапросТовара.УстановитьПараметр("ДатаНачала", ДатаНачала);
		ЗапросТовара.УстановитьПараметр("ДАтаОкончания", ТекущаяДатаСеанса());
		ОбщееКолво = ЗапросТовара.Выполнить().Выбрать().Количество();
		
		ЗапросТовара.Текст =  СтрШаблон(ТекстЗапросаКарточек, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 100000), "ЧГ="));
		
		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));
		Иначе
			ЗапросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;

		Выборка = ЗапросТовара.Выполнить().Выбрать();
		МассивКарточек = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтруктураКарточки = Новый Структура;
			СтруктураЗаявки = Новый Структура;
			СтруктураЗаявки.Вставить("date", Строка(Выборка.ДатаЗаявки));
			СтруктураЗаявки.Вставить("id", Строка(Выборка.НомерЗаявки));

			СтруктураКарточки.Вставить("id", Строка(Выборка.Код));
			СтруктураКарточки.Вставить("title", Строка(Выборка.Номенклатура));
			СтруктураКарточки.Вставить("application", СтруктураЗаявки);
			СтруктураКарточки.Вставить("places", ПолучитьСтеллажиСКоличествомПоСкладам(Выборка.Номенклатура));
			СтруктураКарточки.Вставить("rating", Число(Выборка.Спрос));
			СтруктураКарточки.Вставить("all_count", Выборка.ОбщееКоличество);
			СтруктураКарточки.Вставить("accounting_count", Выборка.КоличествоИнвент);
			МассивКарточек.Добавить(СтруктураКарточки);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);
		СтруктураИнфо.Вставить("card_products", МассивКарточек);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;

	Исключение
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		Текст = Информация.Описание;
		ЗаписатьJSON(ЗаписьJSON, Текст);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;
	/// Комлев 23/12/24 ---
КонецФункции


#КонецОбласти


#Область СлужебныеПроцедурыИФункции
Функция ПолучитьСтеллажиСКоличествомПоСкладам(СсылкаНаНоменклатуру)
	// Комлев АА ++++
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндНомер.Стеллаж КАК Стеллаж,
	|	КОЛИЧЕСТВО(ИндНомер.индкод) КАК КоличествоДеталей,
	|	МАКСИМУМ(ИндНомер.Стеллаж.Владелец) КАК Склад
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО (ИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|	И ИндНомер.индкод.Владелец.Ссылка = &Ссылка
	|	И ИндНомер.Стеллаж <> ЗНАЧЕНИЕ(Справочник.Стеллаж.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ИндНомер.Стеллаж";

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаНоменклатуру);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		МассивСкладов = Новый Массив;
		СкладНН = Новый Структура("name, places",  "СкладНН", Новый Массив);
		СкладМСК = Новый Структура("name, places",  "СкладЕКБ", Новый Массив);
		СкладЕКБ = Новый Структура("name, places",  "СкладМСК", Новый Массив);
		
		
		Пока Выборка.Следующий() Цикл
			Стеллаж = Новый Структура;
			Стеллаж.Вставить("id", Строка(Выборка.Стеллаж));
			Стеллаж.Вставить("count", Выборка.КоличествоДеталей);
			Если СокрЛП(Выборка.Склад) = "Нижний Новгород WorkTruck" Тогда
				СкладНН.places.Добавить(Стеллаж);
			ИначеЕсли СокрЛП(Выборка.Склад) = "Москва" Тогда
				СкладМСК.places.Добавить(Стеллаж);
			ИначеЕсли СокрЛП(Выборка.Склад) = "Екатеринбург" Тогда
				СкладЕКБ.places.Добавить(Стеллаж);
			КонецЕсли;
			
		КонецЦикла;
		МассивСкладов.Добавить(СкладНН);
		МассивСкладов.Добавить(СкладМСК);
		МассивСкладов.Добавить(СкладЕКБ);

		Возврат МассивСкладов;
	КонецЕсли;
	// Комлев АА --- 
КонецФункции

Функция ПолучитьМассивСкладов(СсылкаНаНоменклатуру)
	// Комлев АА++++
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИндНомер.Стеллаж КАК Стеллаж
		|ПОМЕСТИТЬ ИндКодаВНаличии
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
		|		ПО (ИндНомер.индкод = РегистрНакопления1Остатки.индкод)
		|ГДЕ
		|	РегистрНакопления1Остатки.КолвоОстаток > 0
		|	И ИндНомер.индкод.Владелец.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндКодаВНаличии.Стеллаж.Владелец.Ссылка КАК Склад
		|ИЗ
		|	ИндКодаВНаличии КАК ИндКодаВНаличии
		|ГДЕ
		|	ИндКодаВНаличии.Стеллаж.Владелец.Ссылка <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяССылка)
		|СГРУППИРОВАТЬ ПО
		|	ИндКодаВНаличии.Стеллаж.Владелец.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаНоменклатуру);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		МассивСкладов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Название = "";
			Если Выборка.Склад.Наименование = "Нижний Новгород WorkTruck" Тогда
				Название = "НН";
			ИначеЕсли Выборка.Склад.Наименование = "Москва" Тогда 
				Название = "МСК";
			ИначеЕсли СокрЛП(Выборка.Склад.Наименование) = "Екатеринбург" Тогда 
				Название = "ЕКБ";
				
			КонецЕсли;
			МассивСкладов.Добавить(Название);
		КонецЦикла;
		Возврат МассивСкладов;
	КонецЕсли;
	// Комлев АА ----
КонецФункции

Функция текстДляТовараПотеряшки()
	текстзапроса = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	РегИндНомер.Состояние КАК Состояние,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	РегИндНомер.Ответственный КАК Учетчик,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
				   |	СпрНоменклатура.Размеры КАК Размеры,
				   |	СпрНоменклатура.Вес КАК Вес,
				   |	СпрНоменклатура.выс КАК выс,
				   |	СпрНоменклатура.длин КАК длин,
				   |	СпрНоменклатура.шир КАК шир,
				   |	РегИндНомер.индкод.Владелец.Код КАК Код,
				   |ВЫБОР
				   |Когда регистрНакопления1Остатки.КолвоОстаток > 0 Тогда
				   |""Есть в наличии""
				   |Иначе
				   |""Товар продан""
				   |КОНЕЦ КАК ФактНаличия
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		Левое СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
				   |		ПО ИндНомер.индкод.Владелец.Ссылка = СпрНоменклатура.Ссылка
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |{ГДЕ
				   |	(РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Состояние КАК Состояние,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Учетчик КАК Учетчик,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
				   |	ВТ_данныеНоменклатур.ФактНаличия КАК ФактНаличия,
				   |	ВТ_данныеНоменклатур.Код КАК Код,
				   |	ВТ_данныеНоменклатур.Размеры КАК Размеры,
				   |	ВТ_данныеНоменклатур.Вес КАК Вес,
				   |	ВТ_данныеНоменклатур.выс КАК выс,
				   |	ВТ_данныеНоменклатур.длин КАК длин,
				   |	ВТ_данныеНоменклатур.шир КАК шир
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";

	Возврат текстзапроса;
КонецФункции

Функция текстДляТовара()
	Текстзапроса = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.ДатаПроверкиЕстьВНаличии,
	|	ИндНомер.ОтветственныйЕстьВНаличии
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	РегИндНомер.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	РегИндНомер.Ответственный КАК Учетчик,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	НоменклатураТовар.Размеры КАК Размеры,
	|	НоменклатураТовар.Вес КАК Вес,
	|	НоменклатураТовар.выс КАК выс,
	|	НоменклатураТовар.длин КАК длин,
	|	НоменклатураТовар.шир КАК шир,
	|	НоменклатураТовар.Код КАК НоменклатураКод,
	|	РегистрНакопления1Остатки.КолвоОстаток Как Остаток,
	|	ЕстьNULL(РегистрНакопления1Остатки.машина.Год, 0) КАК машинаГод,
	|	РегИндНомер.индкод.Владелец.Код КАК Код,
	|	ВЫБОР
	|		Когда регистрНакопления1Остатки.КолвоОстаток > 0
	|			Тогда ""Есть в наличии""
	|		Иначе ""Товар продан""
	|	КОНЕЦ КАК ФактНаличия,
	|	ИндНомер.ДатаПроверкиЕстьВНаличии,
	|	ЕСТЬNULL(ИндНомер.ОтветственныйЕстьВНаличии, """") КАК ОтветственныйЕстьВНаличии
	|{ГДЕ
	|	(РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураТовар
	|		ПО ИндНомер.индкод.Владелец.Ссылка = НоменклатураТовар.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Состояние КАК Состояние,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Учетчик КАК Учетчик,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
	|	ВТ_данныеНоменклатур.ФактНаличия КАК ФактНаличия,
	|	ВТ_данныеНоменклатур.Остаток КАК Остаток,
	|	ВТ_данныеНоменклатур.машинаГод КАК машинаГод,
	|	ВТ_данныеНоменклатур.Код КАК Код,
	|	ВТ_данныеНоменклатур.Размеры КАК Размеры,
	|	ВТ_данныеНоменклатур.Вес КАК Вес,
	|	ВТ_данныеНоменклатур.выс КАК выс,
	|	ВТ_данныеНоменклатур.длин КАК длин,
	|	ВТ_данныеНоменклатур.НоменклатураКод КАК НоменклатураКод,
	|	ВТ_данныеНоменклатур.шир КАК шир,
	|	ВТ_данныеНоменклатур.ДатаПроверкиЕстьВНаличии,
	|	ВТ_данныеНоменклатур.ОтветственныйЕстьВНаличии
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";

	Возврат Текстзапроса;
КонецФункции

Функция ПолучитьДанныеОТоваре(Партия)
	///++ МазинЕС 23-07-2024

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПродажаЗапчастейТаблица.Товар КАК Товар,
	|	ПродажаЗапчастейТаблица.Партия КАК Партия,
	|	ПродажаЗапчастейТаблица.Ссылка КАК Ссылка,
	|	ПродажаЗапчастейТаблица.СтатусТовара КАК СтатусТовара,
	|	ПродажаЗапчастей.ЗаказКлиента.Номер КАК ЗаказКлиентаНомер
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|		ПО ПродажаЗапчастейТаблица.Ссылка = ПродажаЗапчастей.Ссылка
	|ГДЕ
	|	ПродажаЗапчастейТаблица.Партия.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", Партия);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	Текст = ""; 

	Структура = Новый Структура;

	Если РезультатЗапроса.Пустой() Тогда
		Структура.Вставить("Продан", "");
		Структура.Вставить("Выдан", "");
		Структура.Вставить("ЗаказКлиентаНомер", "");
	КонецЕсли;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Структура.Вставить("Продан", "В продаже");
		Структура.Вставить("ЗаказКлиентаНомер", ВыборкаДетальныеЗаписи.ЗаказКлиентаНомер);
		Если ВыборкаДетальныеЗаписи.СтатусТовара Тогда
			Структура.Вставить("Выдан", "Выдан");
		Иначе
			Структура.Вставить("Выдан", "На складе");
		КонецЕсли;
	КонецЦикла;

	Возврат Структура;
	 
	//-- МазинЕС 23-07-2024
КонецФункции

Функция ПолучитьФотографа(ИндКод)
	
	///+ГомзМА 21.02.2024 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "v1/product/" + ИндКод + "/last_date/tabnum";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");

		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("id", ИндКод);
		
		// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		//Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		Ответ = Соединение.Получить(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение

		Возврат Неопределено;
	КонецПопытки;
	///-ГомзМА 21.02.2024

КонецФункции

Функция текстРекомендуемоеМестоХранения()
	
	///+ГомзМА 20.05.2024
	Текстзапроса = "ВЫБРАТЬ
				   |	Номенклатура.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ВТ_Номенклатура
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.Код = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
				   |		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ 1
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_данныеНоменклатур.индкод) КАК Количество,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |СГРУППИРОВАТЬ ПО
				   |	ВТ_данныеНоменклатур.Адрес,
				   |	ВТ_данныеНоменклатур.Склад,
				   |	ВТ_данныеНоменклатур.Город,
				   |	ВТ_данныеНоменклатур.Поддон
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Количество УБЫВ";
	Возврат Текстзапроса;
	///-ГомзМА 20.05.2024

КонецФункции

Функция текстДляСпискаНарядов()
	Текст = "ВЫБРАТЬ
	|	ЗаказНарядТовары.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(ЗаказНарядТовары.НомерСтроки) КАК КоличествоСтрок,
	|	ЗаказНарядТовары.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТ_Условие
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Состояние,
	|	ЗаказНарядТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Условие.Ссылка КАК Ссылка,
	|	СУММА(ВТ_Условие.КоличествоСтрок) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ_Сборка
	|ИЗ
	|	ВТ_Условие КАК ВТ_Условие
	|ГДЕ
	|	(ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Планово)
	|	ИЛИ ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Срочно))
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Условие.Ссылка КАК Ссылка,
	|	СУММА(ВТ_Условие.КоличествоСтрок) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ_Выдача
	|ИЗ
	|	ВТ_Условие КАК ВТ_Условие
	|ГДЕ
	|	(ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Собрано)
	|	ИЛИ ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.НетВНаличии))
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Клиент КАК Клиент,
	|	ЗаказНаряд.Ответственный КАК Ответственный,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.ЗаказКлиента КАК ЗаказКлиента,
	|	ЗаказНаряд.ВнутреннийЗаказНаряд КАК Внутр,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ВТ_Сборка.КоличествоСтрок КАК КоличествоСборка,
	|	ВТ_Выдача.КоличествоСтрок КАК КоличествоВыдача,
	|	ЗаказНаряд.Комментарий,
	|	ЗаказНаряд.СуммаДокумента,
	|	ЗаказНаряд.СуммаРаботы,
	|	ЗаказНаряд.СуммаТовары,
	|	ЗаказНаряд.Проект
	|ПОМЕСТИТЬ ВТ_Наряд
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сборка КАК ВТ_Сборка
	|		ПО (ВТ_Сборка.Ссылка = ЗаказНаряд.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ЗаказНаряд.Инициатор = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выдача КАК ВТ_Выдача
	|		ПО ЗаказНаряд.Ссылка = ВТ_Выдача.Ссылка
	|ГДЕ
	|	ЗаказНаряд.Дата > датавремя(2023, 07, 18)
	|	И не ЗаказНаряд.ВнутреннийЗаказНаряд
//	|	И ЗаказНаряд.Состояние <> Значение(перечисление.СостоянияЗаказНаряда.Выполнен)
	|	%2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_Наряд.Код КАК Код,
	|	ВТ_Наряд.Номер КАК Номер,
	|	ВТ_Наряд.Дата КАК Дата,
	|	ВТ_Наряд.Клиент КАК Клиент,
	|	ВТ_Наряд.Ответственный КАК Ответственный,
	|	ВТ_Наряд.Состояние КАК Состояние,
	|	ВТ_Наряд.ЗаказКлиента КАК ЗаказКлиента,
	|	ВТ_Наряд.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Наряд.КоличествоСборка КАК КоличествоСборка,
	|	ВТ_Наряд.КоличествоВыдача КАК КоличествоВыдача,
	|	ВТ_Наряд.Внутр КАК Внутр,
	|	ВТ_Наряд.Комментарий КАК Комментарий,
	|	ВТ_Наряд.СуммаДокумента,
	|	ВТ_Наряд.СуммаРаботы,
	|	ВТ_Наряд.СуммаТовары,
	|	ВТ_Наряд.Проект
	|ИЗ
	|	ВТ_Наряд КАК ВТ_Наряд
	|ГДЕ
	|	ВТ_Наряд.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";
	Возврат текст;

КонецФункции

Функция ПолучитьПродажуЧерезЗаявку(Номер)
	
	///+ГомзМА 25.07.2024
	Результат = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПродажаЗапчастей.Номер КАК Номер
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.ЗаказКлиента.Номер = &Номер";

	Запрос.УстановитьПараметр("Номер", Номер);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.Номер;
	КонецЕсли;

	Возврат Результат;
	///-ГомзМА 25.07.2024
КонецФункции

Функция текстДляПродажи()
	Текст = "ВЫБРАТЬ
			|	ПродажаЗапчастей.Номер КАК Номер,
			|	ПродажаЗапчастей.Ссылка КАК ссылка,
			|	ПродажаЗапчастей.Дата КАК Дата,
			|	ПродажаЗапчастей.Клиент КАК Клиент,
			|	ПродажаЗапчастей.ИтогоРекв КАК ИтогоРекв,
			|	ПродажаЗапчастей.КтоПродал КАК КтоПродал,
			|	ПродажаЗапчастей.Таблица.(
			|		Товар КАК Товар,
			|		Количество КАК Количество,
			|		Цена КАК Цена,
			|		Сумма КАК Сумма,
			|		Партия КАК Партия,
			|		ПРЕДСТАВЛЕНИЕ(ПродажаЗапчастей.Таблица.Партия) КАК Партия2,
			|		НомерСтроки КАК НомерСтроки,
			|		СтатусТовара КАК СтатусТовара,
			|		Товар.Код КАК Код,
			|		Отменено КАК Отменено,
			|		Товар.Артикул КАК Артикул,
			|		Склад КАК Склад) КАК Таблица,
			|	ПродажаЗапчастей.ЗаказКлиента КАК ЗаказКлиента,
			|	ПродажаЗапчастей.WTpanel КАК СтатусОбработки,
			|	Сотрудники.Код КАК Код,
			|	ПродажаЗапчастей.ОтветственныйКладовщик КАК ОтветственныйКладовщик,
			|	ПродажаЗапчастей.СтатусЗаказаВТК КАК СтатусЗаказаВТК,
			|	ПродажаЗапчастей.Клиент.Телефон КАК КлиентТелефон,
			|	ПродажаЗапчастей.ПодстатусОбработки КАК подСтатусОбработки,
			|	ПродажаЗапчастей.ЕстьТрекНомер КАК ЕстьТрекНомер,
			|	ПродажаЗапчастей.ТрекНомер КАК ТрекНомер,
			|	ПродажаЗапчастей.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
			|	ПродажаЗапчастей.Клиент.ИНН,
			|	ПродажаЗапчастей.Клиент.Паспорт,
			|	ПродажаЗапчастей.Счет,
			|	ПродажаЗапчастей.НомерУПД
			|ИЗ
			|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ПродажаЗапчастей.ОтветственныйКладовщик = Сотрудники.Пользователь
			|ГДЕ
			|	ПродажаЗапчастей.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция ПолучитьМашину(ИндКодДетали)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	РегистрНакопления1.машина КАК машина
				   |ИЗ
				   |	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1
				   |ГДЕ
				   |	РегистрНакопления1.индкод = &индкод";
	Запрос.УстановитьПараметр("ИндКод", ИндКодДетали);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат выборка.машина;
КонецФункции

Процедура ИзменитьЦенуИндКодовПриИзмененииЦеныКарточкиТовара(ПредыдущаяЦена, НоваяЦена, Номенклатура)

	Если ПредыдущаяЦена <> НоваяЦена И ПредыдущаяЦена <> 0 Тогда
		Коэфициент = НоваяЦена / ПредыдущаяЦена;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	ИндНомер.индкод КАК индкод
					   |ИЗ
					   |	РегистрСведений.ИндНомер КАК ИндНомер
					   |ГДЕ
					   |	ИндНомер.индкод.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Номенклатура);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
				НаборЗаписей.Прочитать();

				Если НаборЗаписей.Количество() > 0 Тогда

					НовыйНомер = НаборЗаписей[0];
					Если НовыйНомер.Цена = 0 Тогда
						НовыйНомер.Цена = НоваяЦена;
					Иначе
						НовыйНомер.Цена = Цел(НовыйНомер.Цена * Коэфициент);
					КонецЕсли;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция СформироватьСтруктуруОшибки(Сode, Message, Details)

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("code", Сode);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("details", Details);

	Возврат СтруктураОтвета;
КонецФункции

Функция ПоддонПустой(Поддон)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИндНомер.индкод
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|ГДЕ
		|	ИндНомер.Поддон = &Поддон";
	
	Запрос.УстановитьПараметр("Поддон", Поддон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции
Функция текстДляТовара1()
	текстзапроса = "ВЫБРАТЬ
				   |	Номенклатура.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ВТ_Номенклатура
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.Код = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
				   |		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_данныеНоменклатур.индкод) КАК Количество,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ВТ_данныеНоменклатур.Адрес,
				   |	ВТ_данныеНоменклатур.Склад,
				   |	ВТ_данныеНоменклатур.Город,
				   |	ВТ_данныеНоменклатур.Поддон";
	Возврат текстзапроса;
КонецФункции

Функция текстДляТоваровНаПолке()
	текстзапроса = " ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";
	Возврат текстзапроса;
КонецФункции

Функция текстДляТоваровВПоддоне()
	текстзапроса = " ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";
	Возврат текстзапроса;
КонецФункции

Функция ПолучениеФото(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		Для Каждого стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;

КонецФункции
Функция ПолучитьТоварыЗаявки1(НомерЗаявки)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = "ВЫБРАТЬ
						 |	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
						 |	ЗаказКлиентаТовары.Партия КАК Партия,
						 |	ЗаказКлиентаТовары.Номенклатура.Код КАК НоменклатураКод,
						 |	ЗаказКлиентаТовары.Сумма КАК Сумма,
						 |	ЗаказКлиентаТовары.Цена КАК Цена,
						 |	ЗаказКлиентаТовары.Количество КАК Количество
						 |ИЗ
						 |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
						 |ГДЕ
						 |	ЗаказКлиентаТовары.Ссылка.Номер = &Номер";

	Запросзаявки.УстановитьПараметр("Номер", НомерЗаявки);

	Выборка = Запросзаявки.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;

	// ТЗ_Товары = выборка.Выгрузить();
	МассивТоваров = Новый Массив;

	СуммаТоваров = 0;
	Пока выборка.Следующий() Цикл
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("position", Строка(выборка.НомерСтроки));
		Если выборка.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
			СтруктураТоваров.Вставить("id", Строка(выборка.Партия));
		Иначе
			СтруктураТоваров.Вставить("id", Строка(выборка.НоменклатураКод));
		КонецЕсли;
		СуммаТоваров = СуммаТоваров + (выборка.Цена * выборка.Количество);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Товары", МассивТоваров);
	СтруктураОтвета.Вставить("СуммаТоваров", СуммаТоваров);
	Возврат СтруктураОтвета;
КонецФункции


Процедура ЗаписьЛога(Событие, Ссылка, Автор)

	ТекстЛога =  "----------------------------------------------------" + Символы.ПС + ТекущаяДата() + Символы.ПС
		+ Автор + Символы.ПС + " " + Событие + Символы.ПС;

	Запись = РегистрыСведений.ЛогЗаявок.СоздатьМенеджерЗаписи();
	Запись.Заявка		 = Ссылка;
	Запись.Дата 		 = ТекущаяДата();
	Запись.Автор	     = Автор;
	Запись.Текст         = ТекстЛога;
	Запись.Записать();

КонецПроцедуры

Функция текстДляЗаявки()
	Текст = "ВЫБРАТЬ
			|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
			|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
			|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
			|ПОМЕСТИТЬ ТелефоныСлужебные
			|ИЗ
			|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
			|ГДЕ
			|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
			|;
			|/////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентас.Номер КАК НомерЗаявки,
			|	ЗаказКлиентас.Дата КАК Дата,
			|	Выбор
			|		Когда ЗаказКлиентас.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
			|			Тогда ЗаказКлиентас.Клиент
			|		Иначе ЗаказКлиентас.КлиентНаименование
			|	Конец КАК Клиент,
			|	Выбор
			|		Когда ЗаказКлиентас.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
			|			Тогда ЗаказКлиентас.Клиент.Код
			|		Иначе NULL
			|	Конец КАК КлиентКод,
			|	ЗаказКлиентас.Состояние КАК Состояние,
			|	ЗаказКлиентас.Ответственный КАК Ответственный,
			|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
			|	ЗаказКлиентас.СуммаДокумента КАК СуммаДокумента,
			|	ЗаказКлиентас.ДатаСвязи КАК ДатаСвязи,
			|	ТелефоныСлужебные.Ссылка.Код КАК КодСотрудника,
			|	ЗаказКлиентас.Товары.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура КАК Номенклатура,
			|		ЦенаОригинала КАК ЦенаОригинала,
			|		Количество КАК Количество,
			|		Цена КАК Цена,
			|		Сумма КАК Сумма,
			|		Отменено КАК Отменено,
			|		Склад КАК Склад,
			|		СуммаНДС КАК СуммаНДС,
			|		Комментарий КАК Комментарий,
			|		ПредлагаемаяЦена КАК ПредлагаемаяЦена,
			|		Партия КАК Партия,
			|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиентас.Товары.Партия) КАК Партия2,
			|		Номенклатура.Код КАК Код) КАК Товары,
			|	ЗаказКлиентас.Ссылка КАК Ссылка,
			|	ЗаказКлиентас.WTPanel КАК СтатусОбработки,
			|	ЗаказКлиентас.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ЗаказКлиентас.Комментарий КАК Комментарий,
			|	ЗаказКлиентас.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ЗаказКлиентас.НомерТелефона КАК Телефон,
			|	ПродажаЗапчастей.Номер КАК номерпродажи,
			|	ПродажаЗапчастей.Ссылка КАК Ссылканапродажу,
			|	ЗаказКлиентас.Ответственные.(
			|		Ссылка,
			|		НомерСтроки,
			|		Сотрудник,
			|		Роль),
			|	ЗаказКлиентас.СтатусыДействия.Ссылка КАК СтатусыДействия,
			|	ЗаказКлиентас.ФинансовыеСтатусы.Ссылка КАК ФинансовыеСтатусы,
			|	ПродажаЗапчастей.Таблица.(
			|		Товар КАК Товар,
			|		Партия КАК Партия,
			|		СтатусТовара КАК СтатусТовара) КАК Таблица,
			|	ЗаказКлиентас.СтатусОбработкиЗаявкиКладовщиком.Ссылка КАК СтатусСборки,
			|	ЗаказКлиентас.СтатусОбработкиЗаявкиКладовщиком.Порядок КАК СтатусОбработкиПорядок
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиентас
			|		ЛЕВОЕ Соединение ТелефоныСлужебные КАк ТелефоныСлужебные
			|		По ЗаказКлиентас.Ответственный = ТелефоныСлужебные.ссылка.пользователь
			|		ЛЕВОЕ Соединение Документ.ПродажаЗапчастей КАк ПродажаЗапчастей
			|		ПО ПродажаЗапчастей.ЗаказКлиента = ЗаказКлиентас.Ссылка
			|ГДЕ
			|	ЗаказКлиентас.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция ПроверкаСчета(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	ПредварительныйСчет.Ссылка КАК Ссылка
				   |ИЗ
				   |	Документ.ПредварительныйСчет КАК ПредварительныйСчет
				   |ГДЕ
				   |	ПредварительныйСчет.Основание = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

КонецФункции
Функция ПолучитьПоддон(Партия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.поддон КАК поддон
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.поддон;
КонецФункции

Функция ЕстьНаКСкладе(Номенклатура)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""%K-%""
				   |			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО ""%К-%"")
				   |	И ИндНомер.индкод.Владелец = &Владелец
				   |	И РегистрНакопления1Остатки.КолвоОстаток > 0";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьКоличествоУчтенногоТовара(Код)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РегистрНакопления1Остатки.КолвоОстаток, 0) КАК КолвоОстаток
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки(, Товар.Код = &Код) КАК РегистрНакопления1Остатки";

	Запрос.УстановитьПараметр("Код", Код);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.КолвоОстаток;
КонецФункции

Процедура ЛогированиеИндНомера(индкод, Автор, Лог, Стеллажж = Неопределено, Поддон = Неопределено,
	ПредСтеллаж = Неопределено, ПредПоддон = Неопределено)
	Авторец = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогИндНомера.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.индкод = Справочники.ИндКод.НайтиПоНаименованию(индкод);
	МенеджерЗаписиЛога.дата = ТекущаяДата();
	МенеджерЗаписиЛога.период = ТекущаяДата();
	Если Поддон <> Неопределено Тогда  
		//Поддон = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.Поддон  = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	Если Стеллажж <> Неопределено Тогда  
		//Стеллажж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.ПредыдущийСтеллаж = ПредСтеллаж;
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	МенеджерЗаписиЛога.Ответственный = Авторец;
	МенеджерЗаписиЛога.Текст = "--------------------------" + Символы.ПС + Авторец + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Процедура ЗаписьЛогаподдона(Событие, поддон, Автор)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;

	ТекстЛога =  "----------------------------------------------------" + Символы.ПС + ТекущаяДата() + Символы.ПС
		+ Автор + Символы.ПС + " " + Событие + Символы.ПС;

	ЗаписьЛога = РегистрыСведений.УниверсальныйЛог.СоздатьМенеджерЗаписи();
	ЗаписьЛога.Объект 		 = поддон.ссылка;
	ЗаписьЛога.Период 		 = ТекущаяДата();
	ЗаписьЛога.Лог           = ТекстЛога;
	ЗаписьЛога.Записать();
КонецПроцедуры

Функция ПолучитьИнформациюОПартии(Ind_code)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	РегистрНакопления1Остатки.Склад КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
	|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
	|	РегИндНомер.индкод.Владелец.выс КАК выс,
	|	РегИндНомер.индкод.Владелец.длин КАК длин,
	|	РегИндНомер.индкод.Владелец.шир КАК шир,
	|	РегистрНакопления1Остатки.машина
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод";
	
	Запрос.УстановитьПараметр("Наименование", Ind_code);
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтвета = Новый Структура;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		СтруктураОтвета.Вставить("Цена",   Выборка.Цена);
		СтруктураОтвета.Вставить("Склад",  Выборка.Склад);
		СтруктураОтвета.Вставить("Партия", Выборка.индкод);
		СтруктураОтвета.Вставить("Машина", Выборка.Машина);
		СтруктураОтвета.Вставить("Товар",  Выборка.Наименование);
	Иначе
		СтруктураОтвета.Вставить("Цена",   0);
		СтруктураОтвета.Вставить("Склад",  0);
		СтруктураОтвета.Вставить("Партия", 0);
		СтруктураОтвета.Вставить("Машина", 0);
		СтруктураОтвета.Вставить("Товар",  0);
	КонецЕсли;

	Возврат СтруктураОтвета;
КонецФункции

Процедура ЛогированиеWT10(Заявка, Автор, Лог)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогWT10.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.Источник = Заявка;
	МенеджерЗаписиЛога.Пользователь = Автор;
	МенеджерЗаписиЛога.Лог = "--------------------------" + Символы.ПС + Автор + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Функция ПолучитьИнформациюОТоваре(Code)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.РекомендованаяЦена КАК РекомендованаяЦена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", code);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтвета = Новый Структура;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		СтруктураОтвета.Вставить("Цена",   Выборка.РекомендованаяЦена);
		СтруктураОтвета.Вставить("Товар",  Выборка.Ссылка);
	Иначе
		СтруктураОтвета.Вставить("Цена",   0);
		СтруктураОтвета.Вставить("Товар",  0);
	КонецЕсли;

	Возврат СтруктураОтвета;
КонецФункции

Процедура ПересчётСуммыЗаявки(СсылкаНаЗаявку)
	ОбъектЗаявки = СсылкаНаЗаявку.ПолучитьОбъект();
	Товары = ОбъектЗаявки.Товары;
	ОбщСумма = 0;

	Для Каждого Стр Из товары Цикл
		Стр.Сумма = Стр.Количество * стр.Цена;
		ОбщСумма = ОбщСумма + Стр.Сумма;
	КонецЦикла;
	ОбъектЗаявки.СуммаДокумента = ОбщСумма;
	ОбъектЗаявки.Записать();
КонецПроцедуры

Функция ПроверкаНаДеталь(Товар)
	
	///+ТатарМА 21.10.2024
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИндКод.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИндКод КАК ИндКод
		|ГДЕ
		|	ИндКод.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.ИндКод.НайтиПоНаименованию(Товар));
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	///-ТатарМА 21.10.2024
	
КонецФункции

Функция ПолучитьСкладИндНомера(Партия)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИндНомер.Стеллаж.Владелец КАК Склад
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|ГДЕ
		|	ИндНомер.индкод = &Партия";
	
	Запрос.УстановитьПараметр("Партия", Партия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Результат = Выборка.Склад;
	Иначе
		Результат = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти





