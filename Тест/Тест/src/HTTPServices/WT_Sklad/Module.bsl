#Область ВспомогательныеПроцедурыИФункции
Функция текстДляТовара1()
	текстзапроса = "ВЫБРАТЬ
				   |	Номенклатура.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ВТ_Номенклатура
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.Код = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
				   |		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_данныеНоменклатур.индкод) КАК Количество,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ВТ_данныеНоменклатур.Адрес,
				   |	ВТ_данныеНоменклатур.Склад,
				   |	ВТ_данныеНоменклатур.Город,
				   |	ВТ_данныеНоменклатур.Поддон";
	Возврат текстзапроса;
КонецФункции

Функция текстДляТоваровНаПолке()
	текстзапроса = " ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";
	Возврат текстзапроса;
КонецФункции

Функция текстДляТоваровВПоддоне()
	текстзапроса = " ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";
	Возврат текстзапроса;
КонецФункции

Функция ПолучениеФото(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		Для Каждого стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;

КонецФункции
Функция ПолучитьТоварыЗаявки1(НомерЗаявки)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = "ВЫБРАТЬ
						 |	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
						 |	ЗаказКлиентаТовары.Партия КАК Партия,
						 |	ЗаказКлиентаТовары.Номенклатура.Код КАК НоменклатураКод,
						 |	ЗаказКлиентаТовары.Сумма КАК Сумма,
						 |	ЗаказКлиентаТовары.Цена КАК Цена,
						 |	ЗаказКлиентаТовары.Количество КАК Количество
						 |ИЗ
						 |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
						 |ГДЕ
						 |	ЗаказКлиентаТовары.Ссылка.Номер = &Номер";

	Запросзаявки.УстановитьПараметр("Номер", НомерЗаявки);

	Выборка = Запросзаявки.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;

	// ТЗ_Товары = выборка.Выгрузить();
	МассивТоваров = Новый Массив;

	СуммаТоваров = 0;
	Пока выборка.Следующий() Цикл
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("position", Строка(выборка.НомерСтроки));
		Если выборка.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
			СтруктураТоваров.Вставить("id", Строка(выборка.Партия));
		Иначе
			СтруктураТоваров.Вставить("id", Строка(выборка.НоменклатураКод));
		КонецЕсли;
		СуммаТоваров = СуммаТоваров + (выборка.Цена * выборка.Количество);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Товары", МассивТоваров);
	СтруктураОтвета.Вставить("СуммаТоваров", СуммаТоваров);
	Возврат СтруктураОтвета;
КонецФункции

Функция СформироватьСтруктуруОшибки(Сode, Message, Details)

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("code", Сode);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("details", Details);

	Возврат СтруктураОтвета;
КонецФункции

Процедура ЗаписьЛога(Событие, Ссылка, Автор)

	ТекстЛога =  "----------------------------------------------------" + Символы.ПС + ТекущаяДата() + Символы.ПС
		+ Автор + Символы.ПС + " " + Событие + Символы.ПС;

	Запись = РегистрыСведений.ЛогЗаявок.СоздатьМенеджерЗаписи();
	Запись.Заявка		 = Ссылка;
	Запись.Дата 		 = ТекущаяДата();
	Запись.Автор	     = Автор;
	Запись.Текст         = ТекстЛога;
	Запись.Записать();

КонецПроцедуры

Функция текстДляЗаявки()
	Текст = "ВЫБРАТЬ
			|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
			|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
			|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
			|ПОМЕСТИТЬ ТелефоныСлужебные
			|ИЗ
			|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
			|ГДЕ
			|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
			|;
			|/////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентас.Номер КАК НомерЗаявки,
			|	ЗаказКлиентас.Дата КАК Дата,
			|	Выбор
			|		Когда ЗаказКлиентас.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
			|			Тогда ЗаказКлиентас.Клиент
			|		Иначе ЗаказКлиентас.КлиентНаименование
			|	Конец КАК Клиент,
			|	Выбор
			|		Когда ЗаказКлиентас.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
			|			Тогда ЗаказКлиентас.Клиент.Код
			|		Иначе NULL
			|	Конец КАК КлиентКод,
			|	ЗаказКлиентас.Состояние КАК Состояние,
			|	ЗаказКлиентас.Ответственный КАК Ответственный,
			|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
			|	ЗаказКлиентас.СуммаДокумента КАК СуммаДокумента,
			|	ЗаказКлиентас.ДатаСвязи КАК ДатаСвязи,
			|	ТелефоныСлужебные.Ссылка.Код КАК КодСотрудника,
			|	ЗаказКлиентас.Товары.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура КАК Номенклатура,
			|		ЦенаОригинала КАК ЦенаОригинала,
			|		Количество КАК Количество,
			|		Цена КАК Цена,
			|		Сумма КАК Сумма,
			|		Отменено КАК Отменено,
			|		Склад КАК Склад,
			|		СуммаНДС КАК СуммаНДС,
			|		Комментарий КАК Комментарий,
			|		ПредлагаемаяЦена КАК ПредлагаемаяЦена,
			|		Партия КАК Партия,
			|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиентас.Товары.Партия) КАК Партия2,
			|		Номенклатура.Код КАК Код) КАК Товары,
			|	ЗаказКлиентас.Ссылка КАК Ссылка,
			|	ЗаказКлиентас.WTPanel КАК СтатусОбработки,
			|	ЗаказКлиентас.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ЗаказКлиентас.Комментарий КАК Комментарий,
			|	ЗаказКлиентас.ПодстатусОбработки КАК ПодстатусОбработки,
			|	ЗаказКлиентас.НомерТелефона КАК Телефон,
			|	ПродажаЗапчастей.Номер КАК номерпродажи,
			|	ПродажаЗапчастей.Ссылка КАК Ссылканапродажу,
			|	ЗаказКлиентас.Ответственные.(
			|		Ссылка,
			|		НомерСтроки,
			|		Сотрудник,
			|		Роль),
			|	ЗаказКлиентас.СтатусыДействия.Ссылка КАК СтатусыДействия,
			|	ЗаказКлиентас.ФинансовыеСтатусы.Ссылка КАК ФинансовыеСтатусы,
			|	ПродажаЗапчастей.Таблица.(
			|		Товар КАК Товар,
			|		Партия КАК Партия,
			|		СтатусТовара КАК СтатусТовара) КАК Таблица,
			|	ЗаказКлиентас.СтатусОбработкиЗаявкиКладовщиком.Ссылка КАК СтатусСборки,
			|	ЗаказКлиентас.СтатусОбработкиЗаявкиКладовщиком.Порядок КАК СтатусОбработкиПорядок
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиентас
			|		ЛЕВОЕ Соединение ТелефоныСлужебные КАк ТелефоныСлужебные
			|		По ЗаказКлиентас.Ответственный = ТелефоныСлужебные.ссылка.пользователь
			|		ЛЕВОЕ Соединение Документ.ПродажаЗапчастей КАк ПродажаЗапчастей
			|		ПО ПродажаЗапчастей.ЗаказКлиента = ЗаказКлиентас.Ссылка
			|ГДЕ
			|	ЗаказКлиентас.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция ПроверкаСчета(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	ПредварительныйСчет.Ссылка КАК Ссылка
				   |ИЗ
				   |	Документ.ПредварительныйСчет КАК ПредварительныйСчет
				   |ГДЕ
				   |	ПредварительныйСчет.Основание = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

КонецФункции
Функция ПолучитьПоддон(Партия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.поддон КАК поддон
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.поддон;
КонецФункции

Функция ЕстьНаКСкладе(Номенклатура)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""%K-%""
				   |			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО ""%К-%"")
				   |	И ИндНомер.индкод.Владелец = &Владелец
				   |	И РегистрНакопления1Остатки.КолвоОстаток > 0";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьКоличествоУчтенногоТовара(Код)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РегистрНакопления1Остатки.КолвоОстаток, 0) КАК КолвоОстаток
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки(, Товар.Код = &Код) КАК РегистрНакопления1Остатки";

	Запрос.УстановитьПараметр("Код", Код);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.КолвоОстаток;
КонецФункции

Процедура ЛогированиеИндНомера(индкод, Автор, Лог, Стеллажж = Неопределено, Поддон = Неопределено,
	ПредСтеллаж = Неопределено, ПредПоддон = Неопределено)
	Авторец = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогИндНомера.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.индкод = Справочники.ИндКод.НайтиПоНаименованию(индкод);
	МенеджерЗаписиЛога.дата = ТекущаяДата();
	МенеджерЗаписиЛога.период = ТекущаяДата();
	Если Поддон <> Неопределено Тогда  
		//Поддон = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.Поддон  = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	Если Стеллажж <> Неопределено Тогда  
		//Стеллажж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.ПредыдущийСтеллаж = ПредСтеллаж;
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	МенеджерЗаписиЛога.Ответственный = Авторец;
	МенеджерЗаписиЛога.Текст = "--------------------------" + Символы.ПС + Авторец + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Процедура ЗаписьЛогаподдона(Событие, поддон, Автор)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;

	ТекстЛога =  "----------------------------------------------------" + Символы.ПС + ТекущаяДата() + Символы.ПС
		+ Автор + Символы.ПС + " " + Событие + Символы.ПС;

	ЗаписьЛога = РегистрыСведений.УниверсальныйЛог.СоздатьМенеджерЗаписи();
	ЗаписьЛога.Объект 		 = поддон.ссылка;
	ЗаписьЛога.Период 		 = ТекущаяДата();
	ЗаписьЛога.Лог           = ТекстЛога;
	ЗаписьЛога.Записать();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытий
Функция ПолучитьВсеЗаявкиGetAllApp(Запрос)
	МассивЗаявок = Новый Массив;
	Попытка

		СтрокаПоиска = "	И (ЗаказКлиента.Номер ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.КлиентНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.Клиент.ПолноеНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.НомерТелефона ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")";
		ЗапросЗаявок = Новый Запрос;

		Текст = "ВЫБРАТЬ
				|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
				|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
				|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
				|ПОМЕСТИТЬ ТелефоныСлужебные
				|ИЗ
				|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
				|ГДЕ
				|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
				|;
				|/////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 10000
				|	ЗаказКлиента.Номер КАК Номер,
				|	ЗаказКлиента.Дата КАК Дата,
				|	Выбор
				|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
				|			Тогда ЗаказКлиента.Клиент
				|		Иначе ЗаказКлиента.КлиентНаименование
				|	Конец КАК Клиент,
				|	Выбор
				|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
				|			Тогда ЗаказКлиента.Клиент.Код
				|		Иначе ""Не авторизован""
				|	Конец КАК КлиентКод,
				|	ЗаказКлиента.Состояние КАК Состояние,
				|	ЗаказКлиента.Ответственный КАК Ответственный,
				|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
				|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
				|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
				|	ТелефоныСлужебные.Ссылка.Код КАК КодСотрудника,
				|	ЗаказКлиента.Ссылка КАК Ссылка,
				|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ЗаказКлиента.Комментарий КАК Комментарий,
				|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ЗаказКлиента.НомерТелефона КАК Телефон,
				|	ЗаказКлиента.WTPanel КАК WTPanel,
				|	АвтономерЗаписи() КАК НомерЗаписи,
				|ЗаказКлиента.СтатусыДействия.Порядок КАК СтатусыДействия,
				|ЗаказКлиента.ФинансовыеСтатусы.Порядок КАК ФинансовыеСтатусы,
				|ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком.Ссылка КАК СтатусОбработкиЗаявкиКладовщикомСсылка,
				|ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком.Порядок КАК СтатусОбработкиЗаявкиКладовщикомПорядок
				|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|		ЛЕВОЕ Соединение ТелефоныСлужебные КАк ТелефоныСлужебные
				|		По ЗаказКлиента.Ответственный = ТелефоныСлужебные.ссылка.пользователь
				|Где ЗаказКлиента.Дата > &ДатаОтсчёта
				|
				|%2
				|
				|УПОРЯДОЧИТЬ ПО
				|	Номер УБЫВ
				|ИНДЕКСИРОВАТЬ ПО
				|	Дата
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ %1
				|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
				|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
				|	ВТ_ДанныеЗаявки.Номер КАК Номер,
				|	ВТ_ДанныеЗаявки.Дата КАК Дата,
				|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
				|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
				|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
				|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
				|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
				|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
				|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ВТ_ДанныеЗаявки.ТелефонСлужебный КАК ТелефонСлужебный,
				|	ВТ_ДанныеЗаявки.КодСотрудника КАК КодСотрудника,
				|	ВТ_ДанныеЗаявки.КлиентКод КАК КлиентКод,
				|	ВТ_ДанныеЗаявки.Телефон КАК Телефон,
				|ВТ_ДанныеЗаявки.СтатусОбработкиЗаявкиКладовщикомСсылка КАК СтатусОбработки,
				|ЕстьNull(ВТ_ДанныеЗаявки.СтатусОбработкиЗаявкиКладовщикомПорядок, 0) КАК СтатусОбработкиПорядок
				|ИЗ
				|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
				|ГДЕ
				|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи
				|	УПОРЯДОЧИТЬ ПО
				|	Дата УБЫВ";
		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), " ");
		Иначе
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), СтрокаПоиска);
			ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;
		ДатаОтсчёта = ТекущаяДата() - (3600 * 24 * 180);
		ЗапросЗаявок.УстановитьПараметр("ДатаОтсчёта", ДатаОтсчёта);
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);

		ОбщееКолво = 10000;

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), " ");
		Иначе
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), СтрокаПоиска);
			ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;
		ЗапросЗаявок.УстановитьПараметр("ДатаОтсчёта", ДатаОтсчёта);

		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));

		Иначе
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;
		ОбщееКолво = 10000;

		СписокПоиска = ЗапросЗаявок.Выполнить().Выгрузить();

		Для Каждого Результат Из СписокПоиска Цикл

			СтруктураЗаявок = Новый Структура;
			СтруктураЗаявок.Вставить("id", Строка(Результат.Номер));
			СтруктураЗаявок.Вставить("date", Строка(Результат.Дата));
			СтруктураСтатуса = Новый Структура;
			СтруктураСтатуса.Вставить("state_name", Строка(Результат.СтатусОбработки));
			СтруктураСтатуса.Вставить("state_number", Число(Результат.СтатусОбработкиПорядок) + 1);
			СтруктураЗаявок.Вставить("state", СтруктураСтатуса);

			СтруктураКлиента = Новый Структура;
			СтруктураКлиента.Вставить("name", Строка(Результат.Клиент));
			СтруктураКлиента.Вставить("id", Результат.КлиентКод);
			СтруктураКлиента.Вставить("phone", Результат.Телефон);
			СтруктураЗаявок.Вставить("client", СтруктураКлиента);

			СтруктураМенеджера = Новый Структура;
			СтруктураМенеджера.Вставить("name", Строка(Результат.Ответственный));
	//Менеджер = Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь", выборка.Ответственный).Код;
			СтруктураМенеджера.Вставить("id", Строка(Результат.КодСотрудника));
			СтруктураМенеджера.Вставить("phone", Строка(Результат.ТелефонСлужебный));
			СтруктураЗаявок.Вставить("manager", СтруктураМенеджера);
	
		//@skip-check query-in-loop
			//СтруктураВремени = ПолучитьВремяЗК(Результат.Ссылка);
			СтруктураЗаявок.Вставить("workers", 0);
			СтруктураЗаявок.Вставить("in_work", 0);
			//@skip-check query-in-loop

			СтруктураЗаявок.Вставить("summ", Результат.СуммаДокумента);
			МассивЗаявок.Добавить(СтруктураЗаявок);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);
		СтруктураИнфо.Вставить("applications", МассивЗаявок);

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураОтвета.Вставить("applications", МассивЗаявок);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ПоказателиСкладаGET(Запрос)
	/// +++ Комлев 30/09/24 +++
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ЗаказКлиентаТовары.Номенклатура), 0) КАК Количество,
		|	ЕСТЬNULL(МАКСИМУМ(РегистрНакопления1ОстаткиИОбороты.КолвоКонечныйОстаток), 0) КАК КолвоКонечныйОстаток
		|ПОМЕСТИТЬ ТоварыСпрашивают
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ),
		|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Авто,,) КАК РегистрНакопления1ОстаткиИОбороты
		|		ПО (ЗаказКлиентаТовары.Номенклатура = РегистрНакопления1ОстаткиИОбороты.Товар)
		|ГДЕ
		|	ЗаказКлиентаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И НАЧАЛОПЕРИОДА(РегистрНакопления1ОстаткиИОбороты.ПериодДень, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗаказКлиентаТовары.Ссылка.Дата,
		|		ДЕНЬ)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеЗапчастейТаблица.Товар КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ПоступлениеЗапчастейТаблица.Код), 0) КАК Количество
		|ПОМЕСТИТЬ УчтенныйТоварИзСпискаСпрашивают
		|ИЗ
		|	Документ.ПоступлениеЗапчастей.Таблица КАК ПоступлениеЗапчастейТаблица
		|ГДЕ
		|	ПоступлениеЗапчастейТаблица.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И ПоступлениеЗапчастейТаблица.Товар В
		|		(ВЫБРАТЬ
		|			ТоварыСпрашивают.Товар КАК Товар
		|		ИЗ
		|			ТоварыСпрашивают КАК ТоварыСпрашивают)
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеЗапчастейТаблица.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ВЫБОР
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток > ТоварыСпрашивают.Количество
		|			ТОГДА 1
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток >= ТоварыСпрашивают.Количество
		|		И УчтенныйТоварИзСпискаСпрашивают.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))) > 1
		|				ТОГДА 1
		|			ИНАЧЕ ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))
		|		КОНЕЦ
		|	КОНЕЦ, 0)) КАК ЧИСЛО(10, 2)) КАК КоэфДень,
		|	СУММА(ТоварыСпрашивают.Количество) КАК КоличествоСпрашиваютДень,
		|	СУММА(УчтенныйТоварИзСпискаСпрашивают.Количество) КАК КоличествоУчтенногоДень
		|ПОМЕСТИТЬ ПоказателиДень
		|ИЗ
		|	ТоварыСпрашивают КАК ТоварыСпрашивают
		|		ПОЛНОЕ СОЕДИНЕНИЕ УчтенныйТоварИзСпискаСпрашивают КАК УчтенныйТоварИзСпискаСпрашивают
		|		ПО ТоварыСпрашивают.Товар = УчтенныйТоварИзСпискаСпрашивают.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗаказКлиентаТовары.Номенклатура) КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ЗаказКлиентаТовары.Номенклатура), 0) КАК Количество,
		|	ЕСТЬNULL(РегистрНакопления1ОстаткиИОбороты.КолвоКонечныйОстаток, 0) КАК КолвоКонечныйОстаток
		|ПОМЕСТИТЬ ТоварыСпрашиваютНЕДЕЛЯ
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&Дата, НЕДЕЛЯ),
		|			КОНЕЦПЕРИОДА(&Дата, НЕДЕЛЯ), Авто,,) КАК РегистрНакопления1ОстаткиИОбороты
		|		ПО ЗаказКлиентаТовары.Номенклатура = РегистрНакопления1ОстаткиИОбороты.Товар
		|ГДЕ
		|	ЗаказКлиентаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, НЕДЕЛЯ) И КОНЕЦПЕРИОДА(&Дата, НЕДЕЛЯ)
		|	И НАЧАЛОПЕРИОДА(РегистрНакопления1ОстаткиИОбороты.ПериодДень, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗаказКлиентаТовары.Ссылка.Дата,
		|		ДЕНЬ)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЕСТЬNULL(РегистрНакопления1ОстаткиИОбороты.КолвоКонечныйОстаток, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеЗапчастейТаблица.Товар КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ПоступлениеЗапчастейТаблица.Код), 0) КАК Количество
		|ПОМЕСТИТЬ УчтенныйТоварИзСпискаСпрашиваютНЕДЕЛЯ
		|ИЗ
		|	Документ.ПоступлениеЗапчастей.Таблица КАК ПоступлениеЗапчастейТаблица
		|ГДЕ
		|	ПоступлениеЗапчастейТаблица.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, НЕДЕЛЯ) И КОНЕЦПЕРИОДА(&Дата, НЕДЕЛЯ)
		|	И ПоступлениеЗапчастейТаблица.Товар В
		|		(ВЫБРАТЬ
		|			ТоварыСпрашивают.Товар КАК Товар
		|		ИЗ
		|			ТоварыСпрашиваютНЕДЕЛЯ КАК ТоварыСпрашивают)
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеЗапчастейТаблица.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ВЫБОР
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток > ТоварыСпрашивают.Количество
		|			ТОГДА 1
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток >= ТоварыСпрашивают.Количество
		|		И УчтенныйТоварИзСпискаСпрашивают.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))) > 1
		|				ТОГДА 1
		|			ИНАЧЕ ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))
		|		КОНЕЦ
		|	КОНЕЦ, 0)) КАК ЧИСЛО(10, 2)) КАК КоэфДень,
		|	СУММА(ТоварыСпрашивают.Количество) КАК КоличествоСпрашиваютДень,
		|	СУММА(УчтенныйТоварИзСпискаСпрашивают.Количество) КАК КоличествоУчтенногоДень
		|ПОМЕСТИТЬ ПоказателиНЕДЕЛЯ
		|ИЗ
		|	ТоварыСпрашиваютНЕДЕЛЯ КАК ТоварыСпрашивают
		|		ПОЛНОЕ СОЕДИНЕНИЕ УчтенныйТоварИзСпискаСпрашиваютНЕДЕЛЯ КАК УчтенныйТоварИзСпискаСпрашивают
		|		ПО ТоварыСпрашивают.Товар = УчтенныйТоварИзСпискаСпрашивают.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗаказКлиентаТовары.Номенклатура) КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ЗаказКлиентаТовары.Номенклатура), 0) КАК Количество,
		|	ЕСТЬNULL(РегистрНакопления1ОстаткиИОбороты.КолвоКонечныйОстаток, 0) КАК КолвоКонечныйОстаток
		|ПОМЕСТИТЬ ТоварыСпрашиваютМЕСЯЦ
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ),
		|			КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ), Авто,,) КАК РегистрНакопления1ОстаткиИОбороты
		|		ПО ЗаказКлиентаТовары.Номенклатура = РегистрНакопления1ОстаткиИОбороты.Товар
		|ГДЕ
		|	ЗаказКлиентаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
		|	И НАЧАЛОПЕРИОДА(РегистрНакопления1ОстаткиИОбороты.ПериодДень, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗаказКлиентаТовары.Ссылка.Дата,
		|		ДЕНЬ)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЕСТЬNULL(РегистрНакопления1ОстаткиИОбороты.КолвоКонечныйОстаток, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеЗапчастейТаблица.Товар КАК Товар,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ПоступлениеЗапчастейТаблица.Код), 0) КАК Количество
		|ПОМЕСТИТЬ УчтенныйТоварИзСпискаСпрашиваютМЕСЯЦ
		|ИЗ
		|	Документ.ПоступлениеЗапчастей.Таблица КАК ПоступлениеЗапчастейТаблица
		|ГДЕ
		|	ПоступлениеЗапчастейТаблица.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
		|	И ПоступлениеЗапчастейТаблица.Товар В
		|		(ВЫБРАТЬ
		|			ТоварыСпрашивают.Товар КАК Товар
		|		ИЗ
		|			ТоварыСпрашиваютМЕСЯЦ КАК ТоварыСпрашивают)
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеЗапчастейТаблица.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ВЫБОР
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток > ТоварыСпрашивают.Количество
		|			ТОГДА 1
		|		КОГДА ТоварыСпрашивают.КолвоКонечныйОстаток >= ТоварыСпрашивают.Количество
		|		И УчтенныйТоварИзСпискаСпрашивают.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))) > 1
		|				ТОГДА 1
		|			ИНАЧЕ ВЫРАЗИТЬ(УчтенныйТоварИзСпискаСпрашивают.Количество / ТоварыСпрашивают.Количество КАК ЧИСЛО(10, 2))
		|		КОНЕЦ
		|	КОНЕЦ, 0)) КАК ЧИСЛО(10, 2)) КАК КоэфДень,
		|	СУММА(ТоварыСпрашивают.Количество) КАК КоличествоСпрашиваютДень,
		|	СУММА(УчтенныйТоварИзСпискаСпрашивают.Количество) КАК КоличествоУчтенногоДень
		|ПОМЕСТИТЬ ПоказателиМЕСЯЦ
		|ИЗ
		|	ТоварыСпрашиваютМЕСЯЦ КАК ТоварыСпрашивают
		|		ПОЛНОЕ СОЕДИНЕНИЕ УчтенныйТоварИзСпискаСпрашиваютМЕСЯЦ КАК УчтенныйТоварИзСпискаСпрашивают
		|		ПО ТоварыСпрашивают.Товар = УчтенныйТоварИзСпискаСпрашивают.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПоказателиДень.КоэфДень, 0) КАК КоэфДень,
		|	ЕСТЬNULL(ПоказателиДень.КоличествоСпрашиваютДень, 0) КАК КоличествоСпрашиваютДень,
		|	ЕСТЬNULL(ПоказателиДень.КоличествоУчтенногоДень, 0) КАК КоличествоУчтенногоДень,
		|	ЕСТЬNULL(ПоказателиНЕДЕЛЯ.КоличествоСпрашиваютДень, 0) КАК КоличествоСпрашиваютНеделя,
		|	ЕСТЬNULL(ПоказателиНЕДЕЛЯ.КоличествоУчтенногоДень, 0) КАК КоличествоУчтенногоНеделя,
		|	ЕСТЬNULL(ПоказателиМЕСЯЦ.КоэфДень, 0) КАК КоэфМесяц,
		|	ЕСТЬNULL(ПоказателиМЕСЯЦ.КоличествоСпрашиваютДень, 0) КАК КоличествоСпрашиваютМесяц,
		|	ЕСТЬNULL(ПоказателиМЕСЯЦ.КоличествоУчтенногоДень, 0) КАК КоличествоУчтенногоМесяц,
		|	ЕСТЬNULL(ПоказателиНЕДЕЛЯ.КоэфДень, 0) КАК КоэфНеделя
		|ИЗ
		|	ПоказателиДень КАК ПоказателиДень,
		|	ПоказателиНЕДЕЛЯ КАК ПоказателиНЕДЕЛЯ,
		|	ПоказателиМЕСЯЦ КАК ПоказателиМЕСЯЦ";

		Запрос.УстановитьПараметр("Дата", ТекущаяДата());

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		СтруктураПоказатели = Новый Структура;
		Пока Выборка.Следующий() Цикл
			СтруктураПоказатели.Вставить("ratio_day", Число(Выборка.КоэфДень));
			СтруктураПоказатели.Вставить("count_from_app_day", Число(Выборка.КоличествоСпрашиваютДень));
			СтруктураПоказатели.Вставить("count_registered_day", Число(Выборка.КоличествоУчтенногоДень));

			СтруктураПоказатели.Вставить("ratio_week", Число(Выборка.КоэфДень));
			СтруктураПоказатели.Вставить("count_from_app_week", Число(Выборка.КоличествоСпрашиваютНеделя));
			СтруктураПоказатели.Вставить("count_registered_week", Число(Выборка.КоличествоУчтенногоНеделя));
			СтруктураПоказатели.Вставить("ratio_month", Число(Выборка.КоэфМесяц));
			СтруктураПоказатели.Вставить("count_from_app_month", Число(Выборка.КоличествоСпрашиваютМесяц));
			СтруктураПоказатели.Вставить("count_registered_month", Число(Выборка.КоличествоУчтенногоМесяц));
		КонецЦикла;

		Ответ = Новый HTTPСервисОтвет(200);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураПоказатели);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ТекстОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, " ");
		ЗаписатьJSON(ЗаписьJSON, ТекстОшибки);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
/// --- Комлев 30/09/24 ---
КонецФункции
Функция ПолучитьВсеЗаявкиПоСтатусамИПоискомGET(Запрос)
	/// +++ Комлев 30/09/24 +++
	Попытка

		СтрокаПоиска = "	И (ЗаказКлиента.Номер ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.КлиентНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.Клиент.ПолноеНаименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""" + Символы.ПС
			+ " ИЛИ ЗаказКлиента.НомерТелефона ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")";
		ЗапросЗаявок = Новый Запрос;

		Текст = "ВЫБРАТЬ
				|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
				|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
				|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
				|ПОМЕСТИТЬ ТелефоныСлужебные
				|ИЗ
				|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
				|ГДЕ
				|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
				|;
				|/////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 10000
				|	ЗаказКлиента.Номер КАК Номер,
				|	ЗаказКлиента.Дата КАК Дата,
				|	Выбор
				|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
				|			Тогда ЗаказКлиента.Клиент
				|		Иначе ЗаказКлиента.КлиентНаименование
				|	Конец КАК Клиент,
				|	Выбор
				|		Когда ЗаказКлиента.Клиент <> Значение(Справочник.Клиенты.ПустаяСсылка)
				|			Тогда ЗаказКлиента.Клиент.Код
				|		Иначе ""Не авторизован""
				|	Конец КАК КлиентКод,
				|	ЗаказКлиента.Состояние КАК Состояние,
				|	ЗаказКлиента.Ответственный КАК Ответственный,
				|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
				|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
				|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
				|	ТелефоныСлужебные.Ссылка.Код КАК КодСотрудника,
				|	ЗаказКлиента.Ссылка КАК Ссылка,
				|	ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком КАК СтатусОбработкиЗаявкиКладовщиком,
				|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ЗаказКлиента.Комментарий КАК Комментарий,
				|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ЗаказКлиента.НомерТелефона КАК Телефон,
				|	ЗаказКлиента.WTPanel КАК WTPanel,
				|	АвтономерЗаписи() КАК НомерЗаписи,
				|ЗаказКлиента.СтатусыДействия.Порядок КАК СтатусыДействия,
				|ЗаказКлиента.ФинансовыеСтатусы.Порядок КАК ФинансовыеСтатусы,
				|ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком.Ссылка КАК СтатусОбработкиЗаявкиКладовщикомСсылка,
				|ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком.Порядок КАК СтатусОбработкиЗаявкиКладовщикомПорядок
				|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|		ЛЕВОЕ Соединение ТелефоныСлужебные КАк ТелефоныСлужебные
				|		По ЗаказКлиента.Ответственный = ТелефоныСлужебные.ссылка.пользователь
				|Где ЗаказКлиента.Дата > &ДатаОтсчёта
				|
				|%2
				|%3
				|УПОРЯДОЧИТЬ ПО
				|	Номер УБЫВ
				|ИНДЕКСИРОВАТЬ ПО
				|	Дата
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ %1
				|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
				|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
				|	ВТ_ДанныеЗаявки.Номер КАК Номер,
				|	ВТ_ДанныеЗаявки.Дата КАК Дата,
				|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
				|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
				|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
				|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
				|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
				|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
				|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
				|	ВТ_ДанныеЗаявки.СтатусОбработкиЗаявкиКладовщиком КАК СтатусОбработкиЗаявкиКладовщиком,
				|	ЕСТЬNULL(ВТ_ДанныеЗаявки.СтатусОбработкиЗаявкиКладовщикомПорядок, 0) КАК СтатусОбработкиЗаявкиКладовщикомПорядок,
				|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
				|	ВТ_ДанныеЗаявки.ТелефонСлужебный КАК ТелефонСлужебный,
				|	ВТ_ДанныеЗаявки.КодСотрудника КАК КодСотрудника,
				|	ВТ_ДанныеЗаявки.WTPanel КАК WTPanel,
				|	ВТ_ДанныеЗаявки.КлиентКод КАК КлиентКод,
				|	ВТ_ДанныеЗаявки.Телефон КАК Телефон
				|ИЗ
				|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
				|ГДЕ
				|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи
				|	УПОРЯДОЧИТЬ ПО
				|	Дата УБЫВ";

		СтрокаФильтра = " ";
		ЗначениеФильтра = Число(Запрос.ПараметрыURL["filter_status"]);
		Если ЗначениеФильтра = 3 Тогда
			СтрокаФильтра = " И ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаявокКладовщиком.Завершено)";
		ИначеЕсли ЗначениеФильтра = 1 Тогда
			СтрокаФильтра = " И ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаявокКладовщиком.НоваяЗаявка)";
		ИначеЕсли ЗначениеФильтра = 2 Тогда
			СтрокаФильтра = " И ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаявокКладовщиком.ВРаботе)";
		ИначеЕсли ЗначениеФильтра = 4 Тогда
			СтрокаФильтра = " И ЗаказКлиента.СтатусОбработкиЗаявкиКладовщиком = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаявокКладовщиком.Отменено)";
		КонецЕсли;

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), " ", СтрокаФильтра);
		Иначе
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), СтрокаПоиска, СтрокаФильтра);
			ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;
		ДатаОтсчёта = ТекущаяДата() - (3600 * 24 * 2000);
		ЗапросЗаявок.УстановитьПараметр("ДатаОтсчёта", ДатаОтсчёта);
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		ОбщееКолво = ЗапросЗаявок.Выполнить().Выбрать().Количество();

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), " ", СтрокаФильтра);
		Иначе
			ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), СтрокаПоиска, СтрокаФильтра);
			ЗапросЗаявок.УстановитьПараметр("Наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
				Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;
		ЗапросЗаявок.УстановитьПараметр("ДатаОтсчёта", ДатаОтсчёта);

		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));

		Иначе
			ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;

		СписокПоиска = ЗапросЗаявок.Выполнить().Выгрузить();
		МассивЗаявок = Новый Массив;
		Для Каждого Результат Из СписокПоиска Цикл

			СтруктураЗаявок = Новый Структура;
			СтруктураЗаявок.Вставить("id", Строка(Результат.Номер));
			СтруктураЗаявок.Вставить("date", Строка(Результат.Дата));
			СтруктураСтатуса = Новый Структура;
			СтруктураСтатуса.Вставить("state_name", Строка(Результат.СтатусОбработкиЗаявкиКладовщиком));
			СтруктураСтатуса.Вставить("state_number", Число(Результат.СтатусОбработкиЗаявкиКладовщикомПорядок) + 1);
			СтруктураЗаявок.Вставить("state", СтруктураСтатуса);

			СтруктураКлиента = Новый Структура;
			СтруктураКлиента.Вставить("name", Строка(Результат.Клиент));
			СтруктураКлиента.Вставить("id", Результат.КлиентКод);
			СтруктураКлиента.Вставить("phone", Результат.Телефон);
			СтруктураЗаявок.Вставить("client", СтруктураКлиента);

			СтруктураМенеджера = Новый Структура;
			СтруктураМенеджера.Вставить("name", Строка(Результат.Ответственный));
			СтруктураМенеджера.Вставить("id", Строка(Результат.КодСотрудника));
			СтруктураМенеджера.Вставить("phone", Строка(Результат.ТелефонСлужебный));
			СтруктураЗаявок.Вставить("manager", СтруктураМенеджера);

			СтруктураЗаявок.Вставить("workers", 0);
			СтруктураЗаявок.Вставить("in_work", 0);
			СтруктураЗаявок.Вставить("summ", Результат.СуммаДокумента);
			МассивЗаявок.Добавить(СтруктураЗаявок);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);
		СтруктураИнфо.Вставить("applications", МассивЗаявок);

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураОтвета.Вставить("applications", МассивЗаявок);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
	/// --- Комлев 30/09/24 ---
КонецФункции

Функция ПроверкаНаТоварProductOrNot(Запрос)
	// ++ МазинЕС 14-10-24

	Товар = Строка(Запрос.ПараметрыURL["product"]);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндКод.Код КАК Код
	|ИЗ
	|	Справочник.ИндКод КАК ИндКод
	|ГДЕ
	|	ИндКод.Наименование = &Товар";

	Запрос.УстановитьПараметр("Товар", Товар);
	Структура = Новый Структура;

	Если Не Запрос.Выполнить().Пустой() Тогда
		Структура.Вставить("status", Истина);
	Иначе
		Структура.Вставить("status", Ложь);
	КонецЕсли;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, Структура);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
// -- МазинЕС 14-10-24
КонецФункции

Функция ПроверкаНаПолкуИлиСтелажShelfOrShelving(Запрос)
		// ++ МазинЕС 14-10-24
	Место = Строка(Запрос.ПараметрыURL["place"]);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Стеллаж.Код КАК Код
	|ИЗ
	|	Справочник.Стеллаж КАК Стеллаж
	|ГДЕ
	|	Стеллаж.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", Место);

	РезультатЗапроса = Запрос.Выполнить();

	Структура = Новый Структура;

	Если Не РезультатЗапроса.Пустой() Тогда

		Структура.Вставить("status", Число(2));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поддоны.Код КАК Код
	|ИЗ
	|	Справочник.Поддоны КАК Поддоны
	|ГДЕ
	|	Поддоны.Наименование = &Поддон";

	Запрос.УстановитьПараметр("Поддон", Место);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		Структура.Вставить("status", Число(1));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	Иначе
		Структура.Вставить("status", Число(0));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли; 

// -- МазинЕС 14-10-24
КонецФункции
Функция ПолучитьКоличествоСвободныхЗаявокИЗаказНарядовget_count_free_apps_orders(Запрос)

	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗаказКлиента.Ссылка) КАК КоличествоЗаявок
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Ответственные КАК ЗаказКлиентаОтветственные
		|		ПО ЗаказКлиента.Ссылка = ЗаказКлиентаОтветственные.Ссылка
		|ГДЕ
		|	ЗаказКлиентаОтветственные.Ссылка ЕСТЬ NULL
		|	И ЗаказКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗаказНаряд.Ссылка) КАК КоличествоНарядов
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Ответственные КАК ЗаказНарядОтветственные
		|		ПО (ЗаказНаряд.Ссылка = ЗаказНарядОтветственные.Ссылка)
		|ГДЕ
		|	ЗаказНарядОтветственные.Ссылка ЕСТЬ NULL
		|	И ЗаказНаряд.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - 2419200);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));

		Пакеты = Запрос.ВыполнитьПакет();
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("count_free_app", 0);
		СтруктураОтвета.Вставить("count_free_order", 0);

		ВыборкаЗаявки = Пакеты[0].Выбрать();
		ВыборкаНаряды = Пакеты[1].Выбрать();
		Пока ВыборкаЗаявки.Следующий() Цикл
			СтруктураОтвета.count_free_app = ВыборкаЗаявки.КоличествоЗаявок;
		КонецЦикла;

		Пока ВыборкаНаряды.Следующий() Цикл
			СтруктураОтвета.count_free_order = ВыборкаНаряды.КоличествоНарядов;
		КонецЦикла;
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, Информация.Описание);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;

КонецФункции
Функция ИзменитьСтатусСборкиСhange_build_status_app(Запрос)

	Попытка
		Тело = Запрос.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);
		Структура  = ПрочитатьJSON(ЧтениеJSON);
		Автор =  Справочники.Сотрудники.НайтиПоКоду(Структура.author).Наименование;
		Заявка =  Документы.ЗаказКлиента.НайтиПоНомеру(Структура.id);
		Статус = Перечисления.СтатусыОбработкиЗаявокКладовщиком.Получить(Число(Структура.state_build) - 1);

		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.СтатусОбработкиЗаявкиКладовщиком = Статус;
		Событие = " изменил статус обработки кладовщиком " + Статус;
		ЗаписьЛога(Событие, Заявка, Автор);
		ЗаявкаОбъект.Записать();
		Ответ = Новый HTTPСервисОтвет(204);
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		СтрокаОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, "");
		Ответ.УстановитьТелоИзСтроки("" + СтрокаОшибки);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
КонецФункции
Функция ПолучитьЗаявкуGetApp(Запрос)

	ТекстЗапроса = "ВЫБРАТЬ
				   |	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
				   |	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
				   |	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
				   |ИЗ
				   |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
				   |ГДЕ
				   |	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
				   |	И СотрудникиКонтактнаяИнформация.Ссылка.Пользователь = &Код";

	ЗапросНомера = Новый Запрос;
	ЗапросНомера.Текст = ТекстЗапроса;
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляЗаявки();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Попытка
		Выборка = Запросзаявки.Выполнить().Выбрать();
		Если выборка.Количество() = 0 Тогда
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			Информация = ИнформацияОбОшибке();
			ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса",
				"Данная заявка не обнаружена"));

			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
			Возврат Ответ;
		КонецЕсли;
		КоличествоСФото   = 0;
		КоличествоТоваров = 0;
		МассивТоваров = Новый Массив;
		СтруктураИнфо = Новый Структура;
	
	//Пока выборка.Следующий() Цикл 
		выборка.Следующий();

		Счет = ПроверкаСчета(Выборка.Ссылка);

		СтруктураИнфо.Вставить("id", Строка(выборка.НомерЗаявки));
		СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
		СтруктураИнфо.Вставить("condition", Строка(выборка.Состояние));
		СтруктураИнфо.Вставить("fin_status", Строка(выборка.ФинансовыеСтатусы));
		СтруктураИнфо.Вставить("action_status", Строка(выборка.СтатусыДействия));

		СтруктураКлиента = Новый Структура;
		СтруктураКлиента.Вставить("name", Строка(выборка.Клиент));
		СтруктураКлиента.Вставить("id", Строка(выборка.КлиентКод));
		СтруктураКлиента.Вставить("phone", выборка.Телефон);
		СтруктураИнфо.Вставить("client", СтруктураКлиента);

		СтруктураМенеджера = Новый Структура;
		СтруктураМенеджера.Вставить("name", Строка(выборка.Ответственный));
	//Менеджер = Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь", выборка.Ответственный).Код;
		СтруктураМенеджера.Вставить("id", Строка(выборка.КодСотрудника));
		СтруктураМенеджера.Вставить("phone", Строка(выборка.ТелефонСлужебный));
		СтруктураИнфо.Вставить("manager", СтруктураМенеджера);
		СтруктураИнфо.Вставить("sale", Строка(выборка.НомерПродажи));

		СтруктураИнфо.Вставить("sum", выборка.СуммаДокумента);
		СтруктураИнфо.Вставить("callDate", Строка(выборка.ДатаСвязи));
		//СтруктураИнфо.Вставить("processing", Строка(выборка.СтатусОбработки));
		//СтруктураИнфо.Вставить("sub_processing", Строка(выборка.подСтатусОбработки));

		СтруктураСтатуса = Новый Структура;
		СтруктураСтатуса.Вставить("state_build_name", Строка(выборка.СтатусСборки));
		СтруктураСтатуса.Вставить("state_build_number", Число(выборка.СтатусОбработкиПорядок) + 1);
		СтруктураИнфо.Вставить("state_build", СтруктураСтатуса);
		СтруктураИнфо.Вставить("porter", Строка(выборка.ОтветственныйЗаОбработку));
		СтруктураИнфо.Вставить("comment", Строка(выборка.Комментарий));
		СтруктураИнфо.Вставить("numCheck", Строка(?(Счет.Ссылка = Неопределено, "", Счет.Ссылка.Номер)));
	//ВыборкаТоваров = выборка.Товары.Выбрать();
		ТЗ_Ответственные = выборка.Ответственные.Выгрузить();
		МассивОтветственных = Новый Массив;
		Для Каждого стр Из ТЗ_Ответственные Цикл
			ЗапросНомера.УстановитьПараметр("Код", стр.Сотрудник);
		 //@skip-check query-in-loop
			ВЫборкаНомера = ЗапросНомера.Выполнить().Выбрать();
			ВЫборкаНомера.Следующий();
			СтруктураОтветственные = Новый Структура;
			СтруктураОтветственные.Вставить("name", Строка(стр.Сотрудник));
		//@skip-check reading-attribute-from-database
			СтруктураОтветственные.Вставить("id", Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",
				стр.Сотрудник).Код);
			СтруктураОтветственные.Вставить("phone", ВыборкаНомера.Представление);
			СтруктураОтветственные.Вставить("role", Строка(стр.Роль));
			МассивОтветственных.Добавить(СтруктураОтветственные);
		КонецЦикла;
		СтруктураИнфо.Вставить("workers", МассивОтветственных);
		ТЗ_Товары = выборка.Товары.Выгрузить();
		ТЗ_ТоварыИзПродажи = выборка.Таблица.Выгрузить();
		ТЗ_Товары.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
		ТЗ_Товары.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;

		//ИндКоды = тз.ВыгрузитьКолонку("Партия2");

		Итер = 0;
		СуммаТоваров = 0;
		Для Каждого стр Из ТЗ_Товары Цикл
			Если стрНайти(стр.Партия, "_") <> 0 Тогда
				МассивФото = Новый массив;
				//Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
					//Если фотки <> Неопределено И фотки.Количество() > 0 Тогда
				ИндКоды =  Новый массив;
				ИндКоды.Добавить(стр.Партия2);
				Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
				НайденныеФотки = Новый Массив;
						//КоличествоСФото = КоличествоСФото + 1;
				Попытка

					НайденныеФотки = Фотки[0].urls;
							//МассивФото = Новый массив;
							//Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

								//стр.колфото = 1;

					Для Каждого Фотка Из НайденныеФотки Цикл
						Текст = "";
						//Текст = "https://wt10.ru" + Фотка;
						Текст = Фотка;
						МассивФото.Добавить(Текст);
					КонецЦикла;
							//КонецЕсли;
				Исключение
					МассивФото.Добавить();
				КонецПопытки;
					//КонецЕсли;
				итер = итер + 1;
				//КонецЕсли;

				Код = стр.Код;
				Пока Лев(Код, 1) = "0" Цикл
					Код = Прав(Код, СтрДлина(Код) - 1);
				КонецЦикла;
				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
				СтруктураТоваров.Вставить("name", Строка(стр.Номенклатура));
				СтруктураТоваров.Вставить("type", "PRODUCT");
				СтруктураТоваров.Вставить("article", Строка(стр.Номенклатура.Артикул));
				СтруктураТоваров.Вставить("price", стр.Цена);
				СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
				СтруктураТоваров.Вставить("code", Строка("00" + Код));
				СтруктураТоваров.Вставить("id", Строка(стр.Партия));
				СтруктураТоваров.Вставить("stat", стр.Отменено);
				СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
				
				/// Комлев 27/08/24 +++ 
				Если Строка(выборка.НомерПродажи) <> "" Тогда
					НайденаяСтрока = ТЗ_ТоварыИзПродажи.Найти(стр.Партия, "Партия");
					Если НайденаяСтрока <> Неопределено Тогда
						Если НайденаяСтрока.СтатусТовара = Истина Тогда
							СтруктураТоваров.Вставить("issued_status", Истина);
						Иначе
							СтруктураТоваров.Вставить("issued_status", Ложь);
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтруктураТоваров.Вставить("issued_status", Ложь);
				КонецЕсли;
		
				/// Комлев 27/08/24 ---

				СуммаТоваров = СуммаТоваров + (стр.Цена * стр.Количество);
		//СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
		//@skip-check query-in-loop
				СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
		//@skip-check query-in-loop
				СтруктураТоваров.Вставить("k", ЕстьНаКСкладе(стр.Номенклатура));
				Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
					НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.индкод.Установить(стр.Партия);
					НаборЗаписей.Прочитать();
					Товар = НаборЗаписей[0];
					СтруктураТоваров.Вставить("shelf", Строка(Товар.стеллаж));
				Иначе
					СтруктураТоваров.Вставить("shelf", Строка(стр.Номенклатура.МестоНаСкладе2));
				КонецЕсли;

				Если Не стр.Отменено Тогда
					КоличествоТоваров = КоличествоТоваров + 1;
				КонецЕсли;
				СтруктураТоваров.Вставить("photos", МассивФото);
				МассивТоваров.Добавить(СтруктураТоваров);

			Иначе
//				Код = Стр.Код;
//				МассивФото = Новый массив;
//				Пока Лев(Код, 1) = "0" Цикл
//					Код = Прав(Код, СтрДлина(Код) - 1);
//				КонецЦикла;
//				Код = "0" + код;

				ИндКоды =  Новый массив;
				ИндКоды.Добавить(Стр.Код);
				Попытка
					Попытка
						Фотки = РаботаССайтомWT.ПолучениеФотокарточек(ИндКоды);
						НайденныеФотки = Фотки[0].images.common;
						Если Фотки[0].images.main <> "" Тогда
							НайденныеФотки.Вставить(0, Фотки[0].images.main);
						КонецЕсли;
					Исключение
						НайденныеФотки = Новый массив;
					КонецПопытки;
					МассивФото = Новый массив;

					Текст = НайденныеФотки;
					Если НайденныеФотки <> Неопределено И НайденныеФотки <> "" Тогда
			
		//	стр.колфото = 1;  

						Для Каждого Фотка Из НайденныеФотки Цикл
							Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
							Текст = Фотка;
							МассивФото.Добавить(Текст);
						КонецЦикла;
					КонецЕсли;

				Исключение
					МассивФото.Добавить("");
				КонецПопытки;

				//итер = итер + 1;
				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
				СтруктураТоваров.Вставить("name", Строка(стр.Номенклатура));
				СтруктураТоваров.Вставить("type", "CARD_PRODUCT");
				СтруктураТоваров.Вставить("article", Строка(стр.Номенклатура.Артикул));
				СтруктураТоваров.Вставить("price", стр.Цена);
				СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
				СтруктураТоваров.Вставить("code", Строка("0" + Код));
				СтруктураТоваров.Вставить("id", стр.Код);
				СтруктураТоваров.Вставить("stat", стр.Отменено);
				СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
				
				/// Комлев 27/08/24 +++ 
				Если Строка(выборка.НомерПродажи) <> "" Тогда
					НайденаяСтрока = ТЗ_ТоварыИзПродажи.Найти(Стр.Номенклатура, "Товар");
					Если НайденаяСтрока <> Неопределено Тогда
						Если НайденаяСтрока.СтатусТовара = Истина Тогда
							СтруктураТоваров.Вставить("issued_status", Истина);
						Иначе
							СтруктураТоваров.Вставить("issued_status", Ложь);
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтруктураТоваров.Вставить("issued_status", Ложь);
				КонецЕсли;
		
				/// Комлев 27/08/24 ---

				СуммаТоваров = СуммаТоваров + (стр.Цена * стр.Количество);
		//СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
		//@skip-check query-in-loop
				СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
		//@skip-check query-in-loop
				СтруктураТоваров.Вставить("k", ЕстьНаКСкладе(стр.Номенклатура));
				
				//@skip-check query-in-loop
				Кодноменк = ПолучитьКоличествоУчтенногоТовара(стр.Код);
				СтруктураТоваров.Вставить("count_registered", Число(Кодноменк));
				Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
					НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.индкод.Установить(стр.Партия);
					НаборЗаписей.Прочитать();
					Товар = НаборЗаписей[0];
					СтруктураТоваров.Вставить("shelf", Строка(Товар.стеллаж));
				Иначе
					СтруктураТоваров.Вставить("shelf", Строка(стр.Номенклатура.МестоНаСкладе2));
				КонецЕсли;

				Если Не стр.Отменено Тогда
					КоличествоТоваров = КоличествоТоваров + 1;
				КонецЕсли;
				СтруктураТоваров.Вставить("photos", МассивФото);
				МассивТоваров.Добавить(СтруктураТоваров);

			КонецЕсли;

		КонецЦикла;
		СтруктураИнфо.Вставить("sum", СуммаТоваров);
		Если КоличествоТоваров <= КоличествоСФото И КоличествоТоваров > 0 Тогда
			СтруктураИнфо.Вставить("stat", Истина);
		Иначе
			СтруктураИнфо.Вставить("stat", Ложь);
		КонецЕсли;
	
	//КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураИнфо.Вставить("products", МассивТоваров);

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

		Возврат Ответ;

	Исключение
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки( , "Ошибка выполнения запроса", Информация.Описание));

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;

КонецФункции
Функция ОпределитьАйдиТоварПолкаСтелажЗаявкаЗаказНарядcheckingid(Запрос)
	// ++ МазинЕС 15-10-24
	Айди = Строка(Запрос.ПараметрыURL["id"]);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндКод.Код КАК Код
	|ИЗ
	|	Справочник.ИндКод КАК ИндКод
	|ГДЕ
	|	ИндКод.Наименование = &Товар";

	Запрос.УстановитьПараметр("Товар", Айди);

	Структура = Новый Структура;

	Если Не Запрос.Выполнить().Пустой() Тогда
		Структура.Вставить("status", Число(3));

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

		Возврат Ответ;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Стеллаж.Код КАК Код
	|ИЗ
	|	Справочник.Стеллаж КАК Стеллаж
	|ГДЕ
	|	Стеллаж.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", Айди);

	РезультатЗапроса = Запрос.Выполнить();

	Структура = Новый Структура;

	Если Не РезультатЗапроса.Пустой() Тогда

		Структура.Вставить("status", Число(2));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поддоны.Код КАК Код
	|ИЗ
	|	Справочник.Поддоны КАК Поддоны
	|ГДЕ
	|	Поддоны.Наименование = &Поддон";

	Запрос.УстановитьПараметр("Поддон", Айди);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		Структура.Вставить("status", Число(1));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;

	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Номер
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Номер = &Номер";

	Запрос.УстановитьПараметр("Номер", Айди);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Структура.Вставить("status", Число(4));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаряд.Номер
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.Дата > ДАТАВРЕМЯ(2024, 10, 14)
	|	И ЗаказНаряд.Номер = &Номер";

	Запрос.УстановитьПараметр("Номер", Айди);

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда

		Структура.Вставить("status", Число(5));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	Иначе
		Структура.Вставить("status", Число(0));
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, Структура);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
КонецФункции

Функция ПереместитьПоддонНаПолкуМетод(Запрос)
	///+ГомзМА 12.12.2023
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Автор = массив.author;
	Поддон = Справочники.Поддоны.НайтиПоНаименованию(Массив.pallet);
	Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Массив.shelf);

	Если Поддон = Справочники.Поддоны.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Поддон не корректен!");
		Возврат Ответ;
	КонецЕсли;
	//поменять стеллаж у индномеров
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.Поддон КАК Поддон,
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон = &Поддон";

	Если Поддон <> Справочники.Поддоны.ПустаяСсылка() Тогда
		Запрос.УстановитьПараметр("Поддон", Поддон);
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Поддон не корректен!");
		Возврат Ответ;
	КонецЕсли;

	Если Стеллаж = Справочники.Стеллаж.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Полка не корректна!");
		Возврат Ответ;
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.индкод 	= РезультатЗапроса.индкод;
			ЗаписьВРегистреСведений.Прочитать();
			Если ЗаписьВРегистреСведений.Выбран() Тогда

				Лог = "Сменил полку с " + РезультатЗапроса.Стеллаж + " на " + Стеллаж;
				ЛогированиеИндНомера(Строка(РезультатЗапроса.индкод), Автор, Лог, Стеллаж, , РезультатЗапроса.Стеллаж);

				ЗаписьВРегистреСведений.Стеллаж = Стеллаж;
				ЗаписьВРегистреСведений.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	//поменять стеллаж у поддона
	СправочникПоддонОбъект = Поддон.ПолучитьОбъект();
	СправочникПоддонОбъект.Стеллаж = Стеллаж;

	СправочникПоддонОбъект.Записать();
		//+Сергеев 13/03/2024
	Событие = "Сменил стеллаж на: " + Стеллаж;
	ЗаписьЛогаподдона(Событие, СправочникПоддонОбъект, Автор);
	//-Сергеев 13/03/2024
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Поддон успешно перемещен на полку " + Стеллаж);
	Возврат Ответ;
	///-ГомзМА 12.12.2023
КонецФункции

Функция ПолучитьСписокТоваровНаПоддонеGetListProductsOnPallet(Запрос)
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТоваровВПоддоне(), Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Пред = запросТовара.Выполнить().Выгрузить();
	//МассивИндКодов = пред.ВыгрузитьКолонку("индкод");
	Выборкаобщ = Пред.Количество();

	запросТовара.Текст =  СтрШаблон(текстДляТоваровВПоддоне(), Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	запросТовара.УстановитьПараметр("Код", Строка(Запрос.ПараметрыURL["id"]));
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;

	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;

	Для Каждого стр Из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		итер = итер + 1;
		тз.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", Число(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);
	СтруктураИнфо.Вставить("shelf", Строка(Справочники.Поддоны.НайтиПоНаименованию(Строка(
		Запрос.ПараметрыURL["id"])).Стеллаж));
	СтруктураИнфо.Вставить("sklad", Строка(Справочники.Поддоны.НайтиПоНаименованию(Строка(
		Запрос.ПараметрыURL["id"])).Стеллаж.Владелец));
	Если Строка(Запрос.ПараметрыURL["id"]) <> " " Тогда
		СтруктураИнфо.Вставить("kor", Истина);
	Иначе
		СтруктураИнфо.Вставить("kor", Ложь);
	КонецЕсли;

	//СтруктураИнфо.Вставить("ids", МассивИндКодов);

	///+ГомзМА 19.06.2024
	ЗапросСотрудники = Новый Запрос;
	ЗапросСотрудники.Текст =
	"ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование = &Наименование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РегистрНакопления1Остатки.КолвоОстаток) КАК КолвоОстаток,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО (ИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО (ИндНомер.индкод = РегИндНомер.индкод)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ПО (ИндНомер.индкод = ЛогИндНомера.индкод)
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|	И ЛогИндНомера.Поддон.Наименование = &Наименование
	|	И ЛогИндНомера.Ответственный <> &Ответственный
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный";

	ЗапросСотрудники.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	ЗапросСотрудники.УстановитьПараметр("Ответственный", Справочники.Пользователи.ПустаяСсылка());

	РезультатЗапросаСотрудники = ЗапросСотрудники.Выполнить().Выбрать();

	МассивСотрудников = Новый Массив;

	Попытка
		Пока РезультатЗапросаСотрудники.Следующий() Цикл
			СтруктураСотрудник = Новый Структура;
			СтруктураСотрудник.Вставить("name", Строка(РезультатЗапросаСотрудники.Ответственный));
			СтруктураСотрудник.Вставить("count", Число(РезультатЗапросаСотрудники.КолвоОстаток));

			МассивСотрудников.Добавить(СтруктураСотрудник);
		КонецЦикла;
	Исключение

	КонецПопытки;
	///-ГомзМА 19.06.2024

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);
	СтруктураОтвета.Вставить("persons", МассивСотрудников);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокТоваровНаСтеллажеGetListProductsOnShelf(Запрос)
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТоваровНаПолке(), Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Пред = запросТовара.Выполнить().Выгрузить();
	//МассивИндКодов = пред.ВыгрузитьКолонку("индкод");
	Выборкаобщ = Пред.Количество();

	запросТовара.Текст =  СтрШаблон(текстДляТоваровНаПолке(), Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;

	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;

	Для Каждого стр Из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		итер = итер + 1;
		тз.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", Число(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);
	СтруктураИнфо.Вставить("shelf", Строка(Справочники.Поддоны.НайтиПоНаименованию(Строка(
		Запрос.ПараметрыURL["id"])).Стеллаж));
	СтруктураИнфо.Вставить("sklad", Строка(Справочники.Поддоны.НайтиПоНаименованию(Строка(
		Запрос.ПараметрыURL["id"])).Стеллаж.Владелец));
	Если Строка(Запрос.ПараметрыURL["id"]) <> " " Тогда
		СтруктураИнфо.Вставить("kor", Истина);
	Иначе
		СтруктураИнфо.Вставить("kor", Ложь);
	КонецЕсли;

	//СтруктураИнфо.Вставить("ids", МассивИндКодов);

	///+ГомзМА 19.06.2024
	ЗапросСотрудники = Новый Запрос;
	ЗапросСотрудники.Текст =
	"ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РегистрНакопления1Остатки.КолвоОстаток) КАК КолвоОстаток,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО (ИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО (ИндНомер.индкод = РегИндНомер.индкод)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ПО (ИндНомер.индкод = ЛогИндНомера.индкод)
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|	И ЛогИндНомера.Стеллаж.Наименование = &Наименование
	|	И ЛогИндНомера.Ответственный <> &Ответственный
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный";

	ЗапросСотрудники.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	ЗапросСотрудники.УстановитьПараметр("Ответственный", Справочники.Пользователи.ПустаяСсылка());

	РезультатЗапросаСотрудники = ЗапросСотрудники.Выполнить().Выбрать();

	МассивСотрудников = Новый Массив;

	Попытка
		Пока РезультатЗапросаСотрудники.Следующий() Цикл
			СтруктураСотрудник = Новый Структура;
			СтруктураСотрудник.Вставить("name", Строка(РезультатЗапросаСотрудники.Ответственный));
			СтруктураСотрудник.Вставить("count", Число(РезультатЗапросаСотрудники.КолвоОстаток));

			МассивСотрудников.Добавить(СтруктураСотрудник);
		КонецЦикла;
	Исключение

	КонецПопытки;
	///-ГомзМА 19.06.2024

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);
	СтруктураОтвета.Вставить("persons", МассивСотрудников);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция текстДляЗаказНаряда2()
	Текст = "ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Клиент КАК Клиент,
	|	ЗаказНаряд.Ответственный КАК Ответственный,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.ВинКод,
	|	ЗаказНаряд.Проект,
	|	ЗаказНаряд.Клиент.Код,
	|	ЗаказНаряд.Клиент.Телефон,
	|	ЗаказНаряд.Инициатор,
	|	ЗаказНаряд.СуммаДокумента,
	|	ЗаказНаряд.СуммаРаботы,
	|	ЗаказНаряд.СуммаТовары,
	|	ЗаказНаряд.ДатаНачала,
	|	ЗаказНаряд.ДатаОкончания,
	|	ЗаказНаряд.Комментарий,
	|	ЗаказНаряд.Ячейка,
	|	ЗаказНаряд.ЗаказКлиента,
	|	ЗаказНаряд.Ответственные.(
	|		Ссылка,
	|		НомерСтроки,
	|		Сотрудник,
	|		Роль,
	|		Выработка,
	|		Ставка,
	|		СуммаНачислено)
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ЗаказНаряд.Инициатор = Сотрудники.Ссылка
	|ГДЕ
	|	ЗаказНаряд.Номер = &Номер
	|	или ЗаказНаряд.Ячейка.наименование = &Номер";
	Возврат Текст;
КонецФункции

Функция ВыйтиИзЗНgetoutapp(Запрос)

	ЗапросЗаявки = Новый Запрос;
	ЗапросЗаявки.Текст = текстДляЗаказНаряда2();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	ЗапросЗаявки.УстановитьПараметр("Номер", Массив.id);
	Выборка = ЗапросЗаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;

	Если Ответственный = Неопределено Тогда
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	выборка.Следующий();

	ОбъектЗН = Выборка.ссылка.ПолучитьОбъект();

	Отбор = Новый Структура;
	Отбор.Вставить("Сотрудник", Ответственный);
	НайденныеСтроки = ОбъектЗН.Ответственные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Позиция = НайденныеСтроки[0].НомерСтроки;
		ОбъектЗН.Ответственные.удалить(Позиция - 1);
	КонецЕсли;

	ОбъектЗН.Записать();
	ТекстЛога =  " Вышел: " + ОбъектЗН.Номер;
	РаботаССайтомWT.ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;

КонецФункции

Функция ПолучитьОстаткиТоваровGetPlaces(Запрос)
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТовара1(), Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	//	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	//ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив")); 
	МассивТоваров = Новый Массив;
	тз.Сортировать("Количество Убыв");

	итер = 0;
	ПроверкаМеста = "";
	Для Каждого стр Из ТЗ Цикл
		
		//Если Строка(стр.Адрес) <> ПроверкаМеста Тогда
		СтруктураТоваров = Новый Структура;
		//СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		//СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		//СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		//СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("city", Строка(стр.Город));
		СтруктураТоваров.Вставить("count", Строка(стр.Количество));
		//ПроверкаМеста = Строка(стр.Адрес);
		//СтруктураТоваров.Вставить("id", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
		//конецЕсли;

	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, МассивТоваров);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ОчиститьПоддонClearPallet(Запрос)
	Попытка
		Поддон = Справочники.Поддоны.НайтиПоНаименованию(Запрос.ПараметрыURL.Получить("name"));
		Автор = Запрос.ПараметрыURL.Получить("author");
	//поменять стеллаж у индномеров
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИндНомер.индкод КАК индкод,
		|	ИндНомер.Поддон КАК Поддон
		|	
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|ГДЕ
		|	ИндНомер.Поддон = &Поддон";
		Запрос.УстановитьПараметр("Поддон", Поддон);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();

		Если РезультатЗапроса.Количество() > 0 Тогда
			Пока РезультатЗапроса.Следующий() Цикл
				ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
				ЗаписьВРегистреСведений.индкод 	= РезультатЗапроса.индкод;
				ЗаписьВРегистреСведений.Прочитать();
				Если ЗаписьВРегистреСведений.Выбран() Тогда

					Лог = " Переместил на " + Поддон;
					ЛогированиеИндНомера(Строка(РезультатЗапроса.индкод), Автор, Лог, , Поддон);
					ЗаписьВРегистреСведений.Стеллаж = Поддон.Стеллаж;
					ЗаписьВРегистреСведений.Поддон = Справочники.Поддоны.НайтиПоКоду("000000003");
					ЗаписьВРегистреСведений.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	
	//+Сергеев 13/03/2024
		Событие = "Очистил Поддон ";
		ЗаписьЛогаподдона(Событие, Поддон, Автор);
	//-Сергеев 13/03/2024
		Ответ = Новый HTTPСервисОтвет(204);
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		СтрокаОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, "");
		Ответ.УстановитьТелоИзСтроки("" + СтрокаОшибки);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;

КонецФункции

#КонецОбласти



