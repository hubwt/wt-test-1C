#Область ОбработчикиСобытий

Функция СоздатьЗаявкуcreateapplication(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	НомерТелефона = Массив.phone;
	НомерТелефона = ПолучитьНормализованныйНомер(НомерТелефона);

	Попытка
		НоваяЗаявка = Документы.ЗаказКлиента.СоздатьДокумент();
		НоваяЗаявка.Дата = ТекущаяДатаСеанса();
		НоваяЗаявка.НомерТелефона = НомерТелефона;
		НоваяЗаявка.WTPanel = Справочники.СтатусыWT.НайтиПоКоду("000000014"); //Ожидание
		НоваяЗаявка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Ожидание;
		НоваяЗаявка.ПодстатусОбработки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
		НоваяЗаявка.Ответственный = Справочники.Сотрудники.НайтиПоКоду("000000182").Пользователь;
		//НоваяЗаявка.Клиент = ПолучитьКлиентаПоТелефону(НомерТелефона);
		МассивОшибок = Новый Массив;
		Для Каждого покупка Из Массив.products Цикл
			//@skip-check query-in-loop
			ИнформацияОпартии = ПолучитьИнформациюОПартии(покупка);

			Если ИнформацияОпартии.Партия <> 0 Тогда
				СтрокаТоваров = НоваяЗаявка.Товары.Добавить();
				СтрокаТоваров.Количество = 1;
				//@skip-check wrong-type-expression
				СтрокаТоваров.Партия = ИнформацияОпартии.Партия;
				//@skip-check wrong-type-expression
				СтрокаТоваров.Склад  = ИнформацияОпартии.Склад;
				СтрокаТоваров.Цена   = ИнформацияОпартии.Цена;
				//@skip-check wrong-type-expression
				СтрокаТоваров.Номенклатура   = ИнформацияОпартии.Товар;
			Иначе

				МассивОшибок.Добавить(покупка);
			КонецЕсли;

		КонецЦикла;

		НоваяЗаявка.Записать();

Если МассивОшибок.Количество() = 0 тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", НоваяЗаявка.Номер,));
Иначе
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("application", Строка(НоваяЗаявка.Номер));
		СтруктураОтвета.Вставить("products", МассивОшибок);
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос частично выполнен", СтруктураОтвета, ));
КонецЕсли;

	Исключение
		Информация = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Ложь, "Ошибка выполнения запроса", ,
			РаботаССайтомWT.СформироватьСтруктуруОшибки(500, "Заявку создать не удалось", Информация.Описание)));
	КонецПопытки;

	Возврат Ответ;
	

КонецФункции

Функция ПолучитьДашбордДляПродажGetDashSale(Запрос)

ПодСостояниеСборки = Новый Массив;
	МассивТоваров = Новый Массив;

	СостояниеСборки = Справочники.СтатусыWT.НайтиПоКоду(Строка(Запрос.ПараметрыURL["state"])); 
	Если Запрос.ПараметрыURL["sub_state"] = "1" Тогда
		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Ожидание);
	КонецЕсли;
	Если Запрос.ПараметрыURL["sub_state"] = "2" Тогда
		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Выполняется);
	КонецЕсли;
	Если Запрос.ПараметрыURL["sub_state"] = "3" Тогда
		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Готов);
	КонецЕсли;
	Если Запрос.ПараметрыURL["sub_state"] = "4" Тогда
		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Ожидание);
		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Выполняется);
		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.Готов);
		ПодСостояниеСборки.Добавить(Перечисления.ПодстатусыОбработкиЗаявок.ПустаяСсылка());
	КонецЕсли;
	
	ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.Ответственный = &Ответственный";		
ЗапросЗаявок = Новый Запрос;

Текст = "ВЫБРАТЬ ПЕРВЫЕ 100000
|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
|	ЗаказКлиента.Состояние КАК Состояние,
|	ЗаказКлиента.Ссылка КАК Ссылка,
|	ЗаказКлиента.Номер КАК Номер,
|	ЗаказКлиента.Дата КАК Дата,
|	ЗаказКлиента.Клиент КАК Клиент,
|	ЗаказКлиента.Ответственный КАК Ответственный,
|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
|	ЗаказКлиента.Комментарий КАК Комментарий,
|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
|	ЗаказКлиента.WTPanel КАК WTPanel
|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
|ИЗ
|	Документ.ЗаказКлиента КАК ЗаказКлиента
|ГДЕ
|	ЗаказКлиента.WTPanel = &СостояниеСборки
|   И ЗаказКлиента.ПодстатусОбработки В (&ПодстатусОбработки)
|%2
|УПОРЯДОЧИТЬ ПО
|	Номер УБЫВ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ ПЕРВЫЕ %1
|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
|	ВТ_ДанныеЗаявки.Номер КАК Номер,
|	ВТ_ДанныеЗаявки.Дата КАК Дата,
|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
|	ВТ_ДанныеЗаявки.СтатусОбработки КАК СтатусОбработки,
|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки,
|	ВТ_ДанныеЗаявки.WTPanel КАК WTPanel
|ИЗ
|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
|ГДЕ
|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи";
	Если Запрос.ПараметрыURL["saler"]<>"0" Тогда		
		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="),ТекстЗаменыОтборОтветственныйЗаявки);
		ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["saler"]).пользователь);
	Иначе
		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="),"");
	КонецЕсли;
	
	ЗапросЗаявок.УстановитьПараметр("СостояниеСборки", состояниеСборки);
	ЗапросЗаявок.УстановитьПараметр("ПодстатусОбработки", ПодСостояниеСборки);
	ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	ОбщееКолво = ЗапросЗаявок.Выполнить().Выбрать().Количество();
	
	Если Запрос.ПараметрыURL["saler"]<>"0" Тогда		
		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="),ТекстЗаменыОтборОтветственныйЗаявки);
		ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["saler"]).пользователь);
	Иначе
		ЗапросЗаявок.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="),"");
	КонецЕсли;
		
	ЗапросЗаявок.УстановитьПараметр("СостояниеСборки", состояниеСборки);
	ЗапросЗаявок.УстановитьПараметр("ПодстатусОбработки", ПодСостояниеСборки);
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* (Запрос.ПараметрыURL["page"] - 1) + 1)));

	Иначе
		ЗапросЗаявок.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	СписокПоиска = ЗапросЗаявок.Выполнить().Выгрузить();
	

	Для Каждого Результат Из СписокПоиска Цикл

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("num", Строка(Результат.Номер));
		СтруктураТоваров.Вставить("date", Строка(Результат.Дата));
		СтруктураТоваров.Вставить("state", Строка(Результат.WTPanel));
		СтруктураТоваров.Вставить("sub_state", Строка(Результат.ПодстатусОбработки));
		СтруктураТоваров.Вставить("saler", Строка(Результат.Ответственный));
		СтруктураТоваров.Вставить("client", Строка(Результат.Клиент));
		//@skip-check query-in-loop
		СтруктураВремени = ПолучитьВремяЗК(Результат.Ссылка);
		СтруктураТоваров.Вставить("time_work",СтруктураВремени.time_work);
		СтруктураТоваров.Вставить("time_wait",СтруктураВремени.time);
		СтруктураТоваров.Вставить("workers",СтруктураВремени.workers);
		СтруктураТоваров.Вставить("in_work",СтруктураВремени.in_work);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;

	Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", ОбщееКолво);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен", СтруктураОтвета, ));

	Возврат Ответ;
КонецФункции

Функция КоличествоЗаявокПоСтатусамgetcountapp(Запрос)

	МассивОтбор = Новый Массив;

	МассивЗаявок = Новый Массив;
	ЗапросГруппЗаявок = Новый Запрос;

	Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.WTPanel КАК СтатусОбработки
	|ПОМЕСТИТЬ ВТ_ЗаявкиИПродажи
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.WTPanel В (&ПроверкаПродажи)
	| %1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ЗаявкиИПродажи.Ссылка) КАК Количество,
	|	СтатусыWT.Ссылка КАК СтатусОбработки,
	|	СтатусыWT.Код КАК КодСтатуса
	|ПОМЕСТИТЬ ВТ_Итоги
	|ИЗ
	|	Справочник.СтатусыWT КАК СтатусыWT
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаявкиИПродажи КАК ВТ_ЗаявкиИПродажи
	|		ПО СтатусыWT.Ссылка = ВТ_ЗаявкиИПродажи.СтатусОбработки
	|ГДЕ
	|	НЕ СтатусыWT.ПометкаУдаления
	|	И СтатусыWT.Ссылка В (&ПроверкаПродажи)
	|СГРУППИРОВАТЬ ПО
	|	СтатусыWT.Ссылка,
	|	СтатусыWT.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итоги.Количество КАК Количество,
	|	ВТ_Итоги.СтатусОбработки.Наименование КАК СтатусОбработки,
	|	ВТ_Итоги.КодСтатуса КАК КодСтатуса
	|ИЗ
	|	ВТ_Итоги КАК ВТ_Итоги
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Итоги.СтатусОбработки.Код";


		МассивОтбор.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000014"));
		МассивОтбор.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000015"));
		МассивОтбор.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000016"));


	ПустойМассив = Новый Массив;
	Если Запрос.ПараметрыURL["saler"]<>"0" Тогда
		Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["saler"]).пользователь;	
				
		ЗапросГруппЗаявок.Текст =  СтрШаблон(Текст,"и ЗаказКлиента.Ответственный = &Ответственный");
		ЗапросГруппЗаявок.УстановитьПараметр("Ответственный", Ответственный);
	Иначе
			ЗапросГруппЗаявок.Текст =  СтрШаблон(Текст,"");
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	ЗапросГруппЗаявок.УстановитьПараметр("ПроверкаПродажи", МассивОтбор);
	Выборка = ЗапросГруппЗаявок.Выполнить().Выбрать();

	Пока ВЫборка.Следующий() Цикл
		СтруктураТоваров = Новый Структура;

		СтруктураТоваров.Вставить("state", Строка(Выборка.СтатусОбработки));
		СтруктураТоваров.Вставить("id", Выборка.КодСтатуса);

		Если Выборка.КодСтатуса = "000000014" Тогда
			СтруктураТоваров.Вставить("sub_state", Ложь);
			СтруктураТоваров.Вставить("sub_states", ПустойМассив);
		Иначе
			СтруктураТоваров.Вставить("sub_state", Истина);	
			//@skip-check query-in-loop
			Если Запрос.ПараметрыURL["saler"] <> "0" Тогда
				Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["saler"]).пользователь;
				СтруктураТоваров.Вставить("sub_states", ПолучитьПодстатусы(Выборка.КодСтатуса, Ответственный));
			Иначе
				СтруктураТоваров.Вставить("sub_states", ПолучитьПодстатусы(Выборка.КодСтатуса,
					Справочники.Пользователи.ПустаяСсылка()));
			КонецЕсли;

		КонецЕсли;

		СтруктураТоваров.Вставить("count", Выборка.Количество);

		МассивЗаявок.Добавить(СтруктураТоваров);
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(РаботаССайтомWT.СформироватьОтветСтруктурой(Истина, "Запрос успешно выполнен",
		МассивЗаявок, ));

	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗакрытьВремяЗКОбщ(ЗаявкаПродажа)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВремяВыполненияЗаявок.ЗаявкаПродажа КАК Задача,
				   |	ВремяВыполненияЗаявок.Период КАК ДатаСреза
				   |ИЗ
				   |	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗаявок
				   |ГДЕ
				   |	 ВремяВыполненияЗаявок.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
				   |И ВремяВыполненияЗаявок.ЗаявкаПродажа = &ЗаявкаПродажа
				   |УПОРЯДОЧИТЬ ПО
				   |	ВремяВыполненияЗаявок.Период УБЫВ";
	Запрос.УстановитьПараметр("ЗаявкаПродажа", ЗаявкаПродажа);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ВремяВыполненияЗаявок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаявкаПродажа.Установить(Выборка.Задача);
			НаборЗаписей.Отбор.Период.Установить(Выборка.ДатаСреза);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				НашЗамер = НаборЗаписей[0];
				НашЗамер.КонецЗамера = ТекущаяДата();
				НашЗамер.Срок		 = НашЗамер.КонецЗамера - НашЗамер.НачалоЗамера;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры


Процедура ЗакрытьВремяЗК(Ответственный)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВремяВыполненияЗаявок.ЗаявкаПродажа КАК Задача,
				   |	ВремяВыполненияЗаявок.Период КАК ДатаСреза
				   |ИЗ
				   |	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗаявок
				   |ГДЕ
				   |	 ВремяВыполненияЗаявок.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
				   |И ВремяВыполненияЗаявок.Ответственный = &Ответственный
				   |УПОРЯДОЧИТЬ ПО
				   |	ВремяВыполненияЗаявок.Период УБЫВ";
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		НаборЗаписей = РегистрыСведений.ВремяВыполненияЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаявкаПродажа.Установить(Выборка.Задача);
		НаборЗаписей.Отбор.Период.Установить(Выборка.ДатаСреза);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда
			НашЗамер = НаборЗаписей[0];
			НашЗамер.КонецЗамера = ТекущаяДата();
			НашЗамер.Срок		 = НашЗамер.КонецЗамера - НашЗамер.НачалоЗамера;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьВремяЗК(ЗК, Ответственный, Статус)

	НаборЗаписей = РегистрыСведений.ВремяВыполненияЗаявок.СоздатьМенеджерЗаписи();

	НаборЗаписей.ЗаявкаПродажа = ЗК ;
	НаборЗаписей.Период = ТекущаяДата();
	НаборЗаписей.НачалоЗамера = ТекущаяДата();
	НаборЗаписей.Ответственный = Ответственный;
	НаборЗаписей.Статус = Статус;
	НаборЗаписей.Записать();

КонецПроцедуры

Функция ПолучитьВремяЗК(ЗаказКлиента)
	ЗапросРаботника = Новый запрос;
	ЗапросРаботника.Текст = "ВЫБРАТЬ
	|	СУММА(ВремяВыполненияЗН.Срок) КАК Срок,
	|	ВремяВыполненияЗН.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗН
	|ГДЕ
	|	ВремяВыполненияЗН.ЗаявкаПродажа = &ЗаказНаряд
	|	И ВремяВыполненияЗН.Ответственный <> Значение(Справочник.Пользователи.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ВремяВыполненияЗН.Ответственный";

	ЗапросРаботника.УстановитьПараметр("ЗаказНаряд", ЗаказКлиента);
	ВыборкаРаботника = ЗапросРаботника.Выполнить().Выбрать();
	Время = 0;
	ВремяОбщ = 0;
	ВРаботе = 0;
	МассивРаботников = Новый Массив;
	Если ВыборкаРаботника.Количество() > 0 Тогда

		Пока ВыборкаРаботника.Следующий() Цикл
			СтруктураРаботника = Новый Структура;
			СтруктураРаботника.Вставить("worker", Строка(ВыборкаРаботника.Ответственный));
				//@skip-check reading-attribute-from-database
			СтруктураРаботника.Вставить("id_worker", Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",ВыборкаРаботника.Ответственный).Код); 
			Запрос = Новый запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВремяВыполненияЗН.ЗаявкаПродажа КАК Задача,
			|	ВремяВыполненияЗН.НачалоЗамера КАК НачалоЗамера
			|ИЗ
			|	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗН
			|ГДЕ
			|	ВремяВыполненияЗН.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
			|	И ВремяВыполненияЗН.Ответственный = &Ответственный
			|	И ВремяВыполненияЗН.ЗаявкаПродажа = &ЗаказНаряд";
			Запрос.УстановитьПараметр("Ответственный", ВыборкаРаботника.Ответственный);
			Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказКлиента);
			//@skip-check query-in-loop
			Выборка = Запрос.Выполнить().Выбрать();
			
			Статус = ЛОЖЬ;
			Время = ВыборкаРаботника.Срок;
			Если Выборка.Количество() > 0 Тогда
				Выборка.Следующий();
				Время =  (ТекущаяДата() - Выборка.НачалоЗамера);
				Статус = ИСТИНА;
				ВРаботе = ВРаботе + 1;
			КонецЕсли;
             ВремяОбщ = ВремяОбщ + Время;
			СтруктураРаботника.Вставить("time", Время);
			СтруктураРаботника.Вставить("state", Статус);
			//Время = выборка.срок;
			МассивРаботников.Добавить(СтруктураРаботника);
		КонецЦикла;

	КонецЕсли;

	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВремяВыполненияЗН.ЗаявкаПродажа КАК Задача,
	|	ВремяВыполненияЗН.НачалоЗамера КАК НачалоЗамера,
	|	ВремяВыполненияЗН.ЗаявкаПродажа.Дата КАК Дата,
	|	ВремяВыполненияЗН.КонецЗамера,
	|	ВремяВыполненияЗН.Ответственный
	|ИЗ
	|	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗН
	|ГДЕ
	|	ВремяВыполненияЗН.ЗаявкаПродажа = &ЗаказКлиента
	|	И ВремяВыполненияЗН.Статус = &Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоЗамера";

	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("Статус", Справочники.СтатусыWT.НайтиПоКоду("000000010")); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Если Выборка.Ответственный = Справочники.Пользователи.ПустаяСсылка() Тогда
			Время =  ТекущаяДата() - Выборка.НачалоЗамера;
		ИначеЕсли Выборка.Количество() > 1 Тогда

			Если Выборка.КонецЗамера < Дата(2000, 01, 01) Тогда
				Время =  Выборка.НачалоЗамера - ЗаказКлиента.Дата;
			Иначе
				Время =  Выборка.КонецЗамера - ЗаказКлиента.Дата;
			КонецЕсли;
		КонецЕсли;

	Иначе
		Время = ТекущаяДата() - ЗаказКлиента.Дата;

	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("time_work", ВремяОбщ);
	СтруктураОтвета.Вставить("time", Время);
	СтруктураОтвета.Вставить("workers", МассивРаботников);
	СтруктураОтвета.Вставить("in_work", ?(ВРаботе >0,Истина,Ложь));
	Возврат СтруктураОтвета;

КонецФункции



#Область ТекстыЗапросов

Функция текстДляСпискаЗаявок()
	Текст = "ВЫБРАТЬ
			|	ИндНомер.индкод.Владелец КАК индкодВладелец,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ИндНомер.Стеллаж.Наименование ПОДОБНО &кСклады
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Поле1
			|ПОМЕСТИТЬ ВТ_КСклад
			|ИЗ
			|	РегистрСведений.ИндНомер КАК ИндНомер
			|ГДЕ
			|	ИндНомер.Стеллаж.Наименование ПОДОБНО &кСклады
			|
			|СГРУППИРОВАТЬ ПО
			|	ИндНомер.индкод.Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
			|	МАКСИМУМ(ВТ_КСклад.Поле1) КАК Поле1
			|ПОМЕСТИТЬ ВТ_НаКСкладе
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КСклад КАК ВТ_КСклад
			|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_КСклад.индкодВладелец
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказКлиентаТовары.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 100000
			|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
			|	ЗаказКлиента.Состояние КАК Состояние,
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.Номер КАК Номер,
			|	ЗаказКлиента.Дата КАК Дата,
			|	ЗаказКлиента.Клиент КАК Клиент,
			|	ЗаказКлиента.Ответственный КАК Ответственный,
			|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
			|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
			|	ЗаказКлиента.Комментарий КАК Комментарий,
			|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
			|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки
			|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|ГДЕ
			|	ЗаказКлиента.WTPanel В (&СостояниеСборки)  
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номер УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ %1
			|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
			|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
			|	ВТ_ДанныеЗаявки.Номер КАК Номер,
			|	ВТ_ДанныеЗаявки.Дата КАК Дата,
			|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
			|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
			|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
			|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
			|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
			|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ВТ_ДанныеЗаявки.СтатусОбработки КАК СтатусОбработки,
			|	ВТ_НаКСкладе.Поле1 КАК НаКскладе,
			|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки
			|ИЗ
			|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаКСкладе КАК ВТ_НаКСкладе
			|		ПО ВТ_ДанныеЗаявки.Ссылка = ВТ_НаКСкладе.Ссылка
			|ГДЕ
			|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи";
	Возврат текст;
КонецФункции

Функция текстДляЗаявки()
	Текст = "ВЫБРАТЬ
			|	ЗаказКлиента.Номер КАК Номер,
			|	ЗаказКлиента.Дата КАК Дата,
			|	ЗаказКлиента.Клиент КАК Клиент,
			|	ЗаказКлиента.Состояние КАК Состояние,
			|	ЗаказКлиента.Ответственный КАК Ответственный,
			|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
			|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
			|	ЗаказКлиента.Товары.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура КАК Номенклатура,
			|		ЦенаОригинала КАК ЦенаОригинала,
			|		Количество КАК Количество,
			|		Цена КАК Цена,
			|		Сумма КАК Сумма,
			|		Отменено КАК Отменено,
			|		Склад КАК Склад,
			|		СуммаНДС КАК СуммаНДС,
			|		Комментарий КАК Комментарий,
			|		ПредлагаемаяЦена КАК ПредлагаемаяЦена,
			|		Партия КАК Партия,
			|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Товары.Партия) КАК Партия2,
			|		Номенклатура.Код КАК Код
			|	) КАК Товары,
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
			|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
			|	ЗаказКлиента.Комментарий КАК Комментарий,
			|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|ГДЕ
			|	ЗаказКлиента.Номер = &Номер";
	Возврат Текст;
КонецФункции



#КонецОбласти
Функция ПолучитьПодстатусы(КодСтатуса,Ответственный)

	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
				   |	ЗаказКлиента.ПодстатусОбработки,
				   |	КОЛИЧЕСТВО(ЗаказКлиента.Ссылка) КАК Количество
				   |ПОМЕСТИТЬ ВТ_Итоги
				   |ИЗ
				   |	Документ.ЗаказКлиента КАК ЗаказКлиента
				   |ГДЕ
				   |	ЗаказКлиента.WTPanel = &WTPanel
				   |%1
				   |СГРУППИРОВАТЬ ПО
				   |	ЗаказКлиента.ПодстатусОбработки
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЕстьNULL(ВТ_Итоги.Количество, 0) КАК Количество,
				   |	ПодстатусыОбработкиЗаявок.Ссылка,
				   |	ПодстатусыОбработкиЗаявок.Порядок
				   |ИЗ
				   |	Перечисление.ПодстатусыОбработкиЗаявок КАК ПодстатусыОбработкиЗаявок
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Итоги КАК ВТ_Итоги
				   |		ПО ВТ_Итоги.ПодстатусОбработки = ПодстатусыОбработкиЗаявок.Ссылка
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	ПодстатусыОбработкиЗаявок.Порядок";
	Если Ответственный <> Справочники.Пользователи.ПустаяСсылка()Тогда	
		Запрос.Текст =  СтрШаблон(Текст,"и ЗаказКлиента.Ответственный = &Ответственный");		   
    	Запрос.УстановитьПараметр("Ответственный",Ответственный);
    	Иначе
    	Запрос.Текст =  СтрШаблон(Текст,"");
	КонецЕсли;
	
    
	Запрос.УстановитьПараметр("WTPanel", Справочники.СтатусыWT.НайтиПоКоду(КодСтатуса));
	Выборка = Запрос.Выполнить().Выбрать();
	МассивОтвета = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("sub_state", Строка(Выборка.Ссылка));
		СтруктураОтвета.Вставить("id", Выборка.Порядок + 1);
		СтруктураОтвета.Вставить("count", Выборка.Количество);
		МассивОтвета.Добавить(СтруктураОтвета);
	КонецЦикла;
	Возврат МассивОтвета;

КонецФункции
Функция ПроверкаСчета(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	ПредварительныйСчет.Ссылка КАК Ссылка
				   |ИЗ
				   |	Документ.ПредварительныйСчет КАК ПредварительныйСчет
				   |ГДЕ
				   |	ПредварительныйСчет.Основание = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

КонецФункции

Функция ПолучитьПоддон(Партия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.поддон КАК поддон
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.поддон;
КонецФункции

Функция ЕстьНаКСкладе(Номенклатура)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""%K-%""
				   |			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО ""%К-%"")
				   |	И ИндНомер.индкод.Владелец = &Владелец
				   |	И РегистрНакопления1Остатки.КолвоОстаток > 0";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьИнформациюОПартии(Ind_code)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	РегистрНакопления1Остатки.Склад КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
	|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
	|	РегИндНомер.индкод.Владелец.выс КАК выс,
	|	РегИндНомер.индкод.Владелец.длин КАК длин,
	|	РегИндНомер.индкод.Владелец.шир КАК шир,
	|	РегистрНакопления1Остатки.машина
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0";
	
	Запрос.УстановитьПараметр("Наименование", Ind_code);
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтвета = Новый Структура;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		СтруктураОтвета.Вставить("Цена",   Выборка.Цена);
		СтруктураОтвета.Вставить("Склад",  Выборка.Склад);
		СтруктураОтвета.Вставить("Партия", Выборка.индкод);
		СтруктураОтвета.Вставить("Машина", Выборка.Машина);
		СтруктураОтвета.Вставить("Товар",  Выборка.Наименование);
	Иначе
		СтруктураОтвета.Вставить("Цена",   0);
		СтруктураОтвета.Вставить("Склад",  0);
		СтруктураОтвета.Вставить("Партия", 0);
		СтруктураОтвета.Вставить("Машина", 0);
		СтруктураОтвета.Вставить("Товар",  0);
	КонецЕсли;

	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучитьНормализованныйНомер(Номер)

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	ПромежуточныйНомер = "";
	ДопустимыеСимволы = "0123456789";
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	Для Сч1 = 1 По ДлинаНомера Цикл
		ТекСимвол = Сред(СокрЛП(Номер), Сч1, 1);
		Если СтрНайти(ДопустимыеСимволы, ТекСимвол) > 0 Тогда
			ПромежуточныйНомер = ПромежуточныйНомер + ТекСимвол;
			Если Лев(ПромежуточныйНомер, 1) = "8" Тогда
				ПромежуточныйНомер = "7";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Лев(ПромежуточныйНомер, 1) = "7" Тогда
		ПромежуточныйНомер = "+" + ПромежуточныйНомер;
	КонецЕсли;

	ФорматированныйНомер = Лев(ПромежуточныйНомер, 2) + " " + Сред(ПромежуточныйНомер, 3, 3) + " " + Сред(
		ПромежуточныйНомер, 6, 3) + "-" + Сред(ПромежуточныйНомер, 9, 2) + "-" + Сред(ПромежуточныйНомер, 11);

	Возврат ФорматированныйНомер;
	//Сергеев Ф.В. -- Дата: 14.05.2024

КонецФункции
#КонецОбласти


