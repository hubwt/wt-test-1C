
#Область ОбработчикиСобытий

Функция ПолучитьСписокВсехРуководителейgetallbosseslist(Запрос)
	
	///+ТатарМА 08.11.2024
	ЗапросРуководителей = Новый Запрос;
	ЗапросРуководителей.Текст = "ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Организация КАК Организация,
	|	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ДолжностиСотрудниковСрезПоследних.ТипДоговора КАК ТипДоговора,
	|	ДолжностиСотрудниковСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втДолжности
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|ГДЕ
	|	НЕ ДолжностиСотрудниковСрезПоследних.Сотрудник.Пользователь.Недействителен
	|	И НЕ ДолжностиСотрудниковСрезПоследних.Сотрудник.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	Подразделение,
	|	Должность,
	|	ТипДоговора,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(втДолжности.Период) КАК Период
	|ПОМЕСТИТЬ втДолжностиПериоды
	|ИЗ
	|	втДолжности КАК втДолжности
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(втДолжности.Организация) КАК Организация,
	|	МИНИМУМ(втДолжности.Подразделение) КАК Подразделение,
	|	МИНИМУМ(втДолжности.Должность) КАК Должность,
	|	МИНИМУМ(втДолжности.ТипДоговора) КАК ТипДоговора,
	|	МИНИМУМ(втДолжности.Подразделение.Код) КАК ПодразделениеКод,
	|	МИНИМУМ(втДолжности.Должность.Код) КАК ДолжностьКод
	|ПОМЕСТИТЬ втДолжностиСотрудников
	|ИЗ
	|	втДолжности КАК втДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолжностиПериоды КАК втДолжностиПериоды
	|		ПО втДолжности.Сотрудник = втДолжностиПериоды.Сотрудник
	|		И (втДолжностиПериоды.Период = втДолжности.Период)
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|	И НЕ СотрудникиКонтактнаяИнформация.Ссылка.Пользователь.Недействителен
	|	И НЕ СотрудникиКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|	И НЕ СотрудникиКонтактнаяИнформация.Ссылка.Пользователь.Недействителен
	|	И НЕ СотрудникиКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	втДолжностиСотрудников.Организация КАК Организация,
	|	втДолжностиСотрудников.ПодразделениеКод КАК ПодразделениеКод,
	|	втДолжностиСотрудников.Подразделение КАК Подразделение,
	|	втДолжностиСотрудников.ДолжностьКод КАК ДолжностьКод,
	|	втДолжностиСотрудников.Должность КАК Должность,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втДолжностиСотрудников.Должность,
	|		ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка) КАК
	|		Действующий,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	Сотрудники.МестоРаботы КАК МестоРаботы,
	|	Сотрудники.ПарольДляУК КАК ПарольДляУК,
	|	Сотрудники.РолиWT10.(
	|		НомерСтроки КАК НомерСтроки,
	|		Роль КАК Роль) КАК РолиWT10,
	|	Сотрудники.Тележка КАК Тележка,
	|	Сотрудники.Тележка.Код КАК ТележкаКод,
	|	ПодразделенияУчастники.Ссылка.Код КАК КодПодразделения,
	|	Сотрудники.ПарольДляУК КАК ПарольДляУК1
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолжностиСотрудников КАК втДолжностиСотрудников
	|		ПО (втДолжностиСотрудников.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подразделения.Участники КАК ПодразделенияУчастники
	|		ПО (ПодразделенияУчастники.Сотрудник = Сотрудники.Пользователь)
	|ГДЕ
	|	НЕ Сотрудники.Пользователь.Недействителен
	|	И НЕ Сотрудники.ПометкаУдаления
	|	И Сотрудники.РолиWT10.Роль.Код = ""000000007""";
	ВыборкаРуководителей = ЗапросРуководителей.Выполнить().Выбрать();

	МассивРуководителей = Новый массив;

	Пока ВыборкаРуководителей.Следующий() Цикл
		СтруктураРуководителей = Новый Структура;

		СтруктураРуководителей.Вставить("name", Строка(ВыборкаРуководителей.Наименование));
		СтруктураРуководителей.Вставить("code", Строка(ВыборкаРуководителей.Код));

		МассивРуководителей.Добавить(СтруктураРуководителей);
	КонецЦикла;
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("data", МассивРуководителей);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, МассивРуководителей);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
	///-ТатарМА 08.11.2024
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти


Функция GetSubDepartamentsGetSubDepartaments(Запрос)
	/// Комлев АА 19/11/24 +++
	Попытка
		Отдел = Справочники.Подразделения.НайтиПоКоду(Запрос.ПараметрыURL.Получить("id"));
		Если Отдел.Пустая() Тогда
			Ответ = Новый HTTPСервисОтвет(500);
			СтрокаОшибки = "Нет такого отдела";
			Ответ.УстановитьТелоИзСтроки(СтрокаОшибки);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			Возврат Ответ;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Подразделения.Ссылка КАК ПодОтдел,
		|	Подразделения.Код КАК ПодОтделКод
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.Ссылка В ИЕРАРХИИ (&Отдел)";

		Запрос.УстановитьПараметр("Отдел", Отдел);

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		СтруктураОтделов = Новый Структура;
		СтруктураОтделов.Вставить("departament", Строка(Отдел));
		СтруктураОтделов.Вставить("id", Строка(Отдел.Код));
		МассивПодОтделов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПодОтдел <> Отдел Тогда
				СтруктураПодОтдела = Новый Структура;
				СтруктураПодОтдела.Вставить("name", Строка(Выборка.ПодОтдел));
				СтруктураПодОтдела.Вставить("id", Строка(Выборка.ПодОтделКод));
				МассивПодОтделов.Добавить(СтруктураПодОтдела);
			КонецЕсли;

		КонецЦикла;
		СтруктураОтделов.Вставить("sub_departaments", МассивПодОтделов);

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОтделов);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		СтрокаОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, "");
		Ответ.УстановитьТелоИзСтроки("" + СтрокаОшибки);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
	/// Комлев АА 19/11/24 ---
КонецФункции

Функция ПолучитьСотрудниковПодОтделаgetWorkersSubdepartament(Запрос)
	/// Комлев АА 19/11/24 +++
	Попытка
		ПодОтделКод = Запрос.ПараметрыURL.Получить("id");
		СсылкаНаОтдел = Справочники.Подразделения.НайтиПоКоду(ПодОтделКод);
		Если СсылкаНаОтдел.Пустая() Тогда
			Ответ = Новый HTTPСервисОтвет(500);
			СтрокаОшибки = "Нет такого отдела";
			Ответ.УстановитьТелоИзСтроки(СтрокаОшибки);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			Возврат Ответ;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПодразделенияУчастники.Сотрудник.Наименование КАК СотрудникНаименование,
		|	Сотрудники.Код КАК КодСотрудника
		|ИЗ
		|	Справочник.Подразделения.Участники КАК ПодразделенияУчастники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (ПодразделенияУчастники.Сотрудник = Сотрудники.Пользователь)
		|ГДЕ
		|	ПодразделенияУчастники.Ссылка В Иерархии (&Код)";

		Запрос.УстановитьПараметр("Код", СсылкаНаОтдел);

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		СтруктураПодОтдела = Новый Структура;
		СтруктураПодОтдела.Вставить("parent", Строка(СсылкаНаОтдел.Родитель.Код));
		СтруктураПодОтдела.Вставить("departament", Строка(СсылкаНаОтдел));
		СтруктураПодОтдела.Вставить("id", Строка(СсылкаНаОтдел.Код));
		МассивСотрудников = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Сотрудник = Новый Структура;
			Сотрудник.Вставить("name", Строка(Выборка.СотрудникНаименование));
			Сотрудник.Вставить("id", Строка(Выборка.КодСотрудника));
			МассивСотрудников.Добавить(Сотрудник);

		КонецЦикла;
		СтруктураПодОтдела.Вставить("workers", МассивСотрудников);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураПодОтдела);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		СтрокаОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, "");
		Ответ.УстановитьТелоИзСтроки("" + СтрокаОшибки);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
	/// Комлев АА 19/11/24 +++
КонецФункции

Функция ПолучитьСписокОтделовПолучитьСписокОтделов(Запрос)
	ЗапросОтделов = Новый Запрос;
	///+ГомзМА 26.03.2024
	ЗапросОтделов.Текст = "     
						  |ВЫБРАТЬ 
						  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ докЗадача.Номер) КАК Номер,
						  |	докЗадача.Отдел КАК Отдел
						  |ПОМЕСТИТЬ Вт_КолвоЗадач
						  |ИЗ
						  |	Документ.Задача КАК докЗадача
						  |ГДЕ
						  |	докЗадача.Статус В(&Статус)
						  |	И докЗадача.Дата >= ДАТАВРЕМЯ(2024, 1, 1)
						  |
						  |СГРУППИРОВАТЬ ПО
						  |	докЗадача.Отдел
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПодразделенияУчастники.Сотрудник) КАК Сотрудник,
						  |	ПодразделенияУчастники.Ссылка.Родитель КАК Родитель
						  |ПОМЕСТИТЬ ВТ_КолвоСотрудников
						  |ИЗ
						  |	Справочник.Подразделения.Участники КАК ПодразделенияУчастники
						  |
						  |СГРУППИРОВАТЬ ПО
						  |	ПодразделенияУчастники.Ссылка.Родитель
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	Подразделения.Ссылка КАК Подразделение,
						  |	Подразделения.Наименование КАК Наименование,
						  |	Подразделения.Код КАК Код,
						  |	ВТ_КолвоСотрудников.Сотрудник КАК КоличествоСотрудников,
						  |	Вт_КолвоЗадач.Номер КАК КоличествоЗадач
						  |ИЗ
						  |	Справочник.Подразделения КАК Подразделения
						  |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КолвоСотрудников КАК ВТ_КолвоСотрудников
						  |		ПО Подразделения.Ссылка = ВТ_КолвоСотрудников.Родитель
						  |		ЛЕВОЕ СОЕДИНЕНИЕ Вт_КолвоЗадач КАК Вт_КолвоЗадач
						  |		ПО Подразделения.Ссылка = Вт_КолвоЗадач.Отдел
						  |ГДЕ
						  |	Подразделения.Родитель.Код = ""000000105""";
	///-ГомзМА 26.03.2024

	Статус = Новый массив;
	Статус.Добавить(Перечисления.СтатусыЗадач.ВРаботе);
	Статус.Добавить(Перечисления.СтатусыЗадач.Создана);
	Статус.Добавить(Перечисления.СтатусыЗадач.Отложена);
	ЗапросОтделов.УстановитьПараметр("Статус", Статус);

	Выборка = ЗапросОтделов.Выполнить().Выбрать();
	МассивОтделов = Новый Массив;
	Пока выборка.Следующий() Цикл

		СтруктураОтдела = Новый Структура;
		СтруктураОтдела.Вставить("number_of_persons", Строка(выборка.КоличествоСотрудников));
		СтруктураОтдела.Вставить("number_of_tasks", Строка(выборка.КоличествоЗадач));
		СтруктураОтдела.Вставить("name", Строка(выборка.Наименование));
		СтруктураОтдела.Вставить("id", Строка(выборка.Код));

		МассивОтделов.Добавить(СтруктураОтдела);
		///-ГомзМА 22.03.2024
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивОтделов);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции


Функция ПолучитьВсехСотрудинковGetAllWorkers(Запрос)
	/// Комлев АА 19/11/24 +++
	Попытка
		ПодОтделКод = Запрос.ПараметрыURL.Получить("id");
		СсылкаНаОтдел = Справочники.Подразделения.НайтиПоКоду(ПодОтделКод);
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Наименование КАК СотрудникНаименование,
		|	Сотрудники.Код КАК КодСотрудника
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Пользователь.Недействителен = ЛОЖЬ
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ";

		Запрос.УстановитьПараметр("Код", СсылкаНаОтдел);

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();

		СтруктураОрганизация = Новый Структура;
		СтруктураОрганизация.Вставить("departament", "ВоркТрак");
		СтруктураОрганизация.Вставить("id", "000000105");
		МассивСотрудников = Новый Массив;
		Пока Выборка.Следующий() Цикл

			Сотрудник = Новый Структура;
			Сотрудник.Вставить("name", Строка(Выборка.СотрудникНаименование));
			Сотрудник.Вставить("id", Строка(Выборка.КодСотрудника));
			МассивСотрудников.Добавить(Сотрудник);

		КонецЦикла;
		СтруктураОрганизация.Вставить("workers",  МассивСотрудников);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОрганизация);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Ответ = Новый HTTPСервисОтвет(500);
		СтрокаОшибки = "" + Инфо.Описание + ?(Инфо.Причина <> Неопределено, Инфо.Причина.Описание, "");
		Ответ.УстановитьТелоИзСтроки("" + СтрокаОшибки);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Возврат Ответ;
	КонецПопытки;
	/// Комлев АА 19/11/24 ---
КонецФункции
