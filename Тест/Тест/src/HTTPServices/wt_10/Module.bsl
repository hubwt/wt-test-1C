#Область ОбработчикиСобытий

Функция ОтправитьСМСsendSMS(Запрос)
	
	//Сергеев Ф.В. ++ Дата: 16.05.2024

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);



	ТекстСообщения = Массив.message;

	НомерТелефона = Массив.phone;
	//Попытка
		дт_УведомленияСМС.ОтправитьСМС(НомерТелефона, ТекстСообщения, Константы.дт_SMS_Подпись.Получить());

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех");
		Возврат Ответ;
//	Исключение
//		Ответ = Новый HTTPСервисОтвет(401);
//		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//		Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Ложь, "Сообщение успешно НЕ отправлено!", ,
//			СформироватьСтруктуруОшибки( "Скорее всего беда с инетом", "ХЗ")));
//		Возврат Ответ;
//	КонецПопытки;
	//Сергеев Ф.В. -- Дата: 16.05.2024

КонецФункции

Функция ПолучитьСписокОрганизацийlistorganizations(Запрос)

	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	Организация.Код КАК Код,
				   |	Организация.Наименование КАК Наименование
				   |ИЗ
				   |	Справочник.Организация КАК Организация
				   |ГДЕ
				   |	Не Организация.ПометкаУдаления ";
	Выборка = запрос.Выполнить().Выбрать();
	Выборкаобщ = Выборка.Количество();

	МассивОрганизаций = Новый Массив;
	Пока выборка.Следующий() Цикл
		Структураорганизации = Новый Структура;
		Структураорганизации.Вставить("name", Строка(выборка.Наименование));
		Структураорганизации.Вставить("id", Строка(выборка.Код));

		МассивОрганизаций.Добавить(Структураорганизации);
	КонецЦикла;

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("count", Выборкаобщ);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивОрганизаций);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, МассивОрганизаций);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

КонецФункции

Функция ПолучитьСписокСчетовlistaccounts(Запрос)

	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	Счета.Наименование КАК Наименование,
				   |	Счета.Код КАК Код
				   |ИЗ
				   |	Справочник.TipOplati КАК Счета
				   |ГДЕ
				   |	НЕ Счета.ПометкаУдаления";
	Выборка = запрос.Выполнить().Выбрать();
	Выборкаобщ = Выборка.Количество();

	МассивСчетов = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураСчёта = Новый Структура;
		СтруктураСчёта.Вставить("name", Строка(выборка.Наименование));
		СтруктураСчёта.Вставить("id", Строка(выборка.Код));
		//СтруктураСчёта.Вставить("Org",Строка(выборка.Владелец));
		МассивСчетов.Добавить(СтруктураСчёта);
	КонецЦикла;

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("count", Выборкаобщ);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивСчетов);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, МассивСчетов);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

КонецФункции


Функция ГлобальноВыдатьПродажуglobalissueasale(Запрос)
	ЗапросПродажи = Новый Запрос;
	запросПродажи.Текст = текстДляПродажи();
	запросПродажи.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Выборка = запросПродажи.Выполнить().Выбрать();

	Структураответа = Новый структура;

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);
	Выдано = 0;
	ИндКод  = Массив.id;
	Автор 	= Массив.author;
	Партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);

	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	автор = Массив.author;

	Отбор = Новый Структура;
	Отбор.Вставить("Товар", Номенклатура);
	Отбор.Вставить("Партия", партия);
	Попытка
		Пока выборка.Следующий() Цикл
			ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();
			НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);

			Если НайденныеСтроки.количество() > 0 Тогда

				Позиция = НайденныеСтроки[0].НомерСтроки;

				ОбъектПродажи.датаСписания = ТекущаяДата();
				СтрокаТЧ = ОбъектПродажи.Таблица[Позиция - 1];
				СтрокаТЧ.статусТовара = Истина;
				СтрокаТЧ.ДатаВыдачи = ТекущаяДата();
				СтрокаТЧ.ОтветственныйЗаВыдачу = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
				ТекстЛога =  " В продаже: " + ОбъектПродажи.номер + " выдан товар " + СтрокаТЧ.Товар + " "
					+ СтрокаТЧ.Партия;
				ЛогированиеWT10(ОбъектПродажи.ссылка, Автор, ТекстЛога);
				Если СтрокаТЧ.Склад = Справочники.Склады.ПустаяСсылка() Или ОбъектПродажи.таблица[Позиция - 1].Склад
					= Неопределено Тогда
					СтрокаТЧ.Склад = ОбъектПродажи.склад;
				КонецЕсли;
				//выдано = выдано +1; 
				//КонецЦикла;
				Товары = Выборка.Таблица.Выбрать();
				Пока товары.Следующий() Цикл
					Если товары.СтатусТовара И Не товары.Отменено Тогда
						выдано = 1;
					КонецЕсли;

				КонецЦикла;

				Если выдано = 0 Тогда
					//Заказ = Выборка.ЗаказКлиента.ПолучитьОбъект();
					ОбъектПродажи.СтатусОбработки =  Перечисления.СтатусыОбработкиЗаявок.Упаковывается;
					////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада"); 
					//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(ОбъектПродажи.КтоПродал), "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада");
					ОбъектПродажи.ОтветственныйКладовщик = Справочники.Пользователи.ПустаяСсылка();
					//ОбъектПродажи.записать();  
				КонецЕсли;

				ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " выдал товар " + ОбъектПродажи.таблица[Позиция
					- 1].Товар + " " + ОбъектПродажи.таблица[Позиция - 1].Партия;
				ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
				ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);

				Структураответа.Вставить("res", "Успех. Выдан товар " + строка(СтрокаТЧ.Товар));
				ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
				СтрокаДляОтвета = ЗаписьJSON.Закрыть();

				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8,
					ИспользованиеByteOrderMark.НеИспользовать);
				Возврат Ответ;

			Иначе
				Отбор = Новый Структура;
				Отбор.Вставить("Товар", Номенклатура);
				Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
				НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);
				Если НайденныеСтроки.количество() > 0 Тогда
					СтрокаТЧ = ОбъектПродажи.Таблица[НайденныеСтроки[0].НомерСтроки - 1]; 
				//СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
					СтрокаТЧ.партия = партия; 
				//@skip-check query-in-loop
					СтрокаТЧ.машина = ПолучитьМашину(партия);
					СтрокаТЧ.Склад = ОбъектПродажи.склад;
					СтрокаТЧ.СтатусТовара = Истина;
					СтрокаТЧ.ДатаВыдачи = ТекущаяДата();
					СтрокаТЧ.ОтветственныйЗаВыдачу = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;

					ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " установил партию в товаре " + СтрокаТЧ.Товар + " "
						+ СтрокаТЧ.Партия;
					ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
					ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);

					Структураответа.Вставить("res", "Успех. Партия установлена для " + строка(СтрокаТЧ.Товар)
						+ " и выдана!");
				//Структураответа.Вставить("res","Такого товара нет в продаже!");
					ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
					СтрокаДляОтвета = ЗаписьJSON.Закрыть();
					Ответ = Новый HTTPСервисОтвет(200);
					Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8,
						ИспользованиеByteOrderMark.НеИспользовать);
					Возврат Ответ;
				Иначе
					ЗаписьJSON = Новый ЗаписьJSON;
					ЗаписьJSON.УстановитьСтроку();
		
		//Информация = ИнформацияОбОшибке();

					ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Товар не найден в продаже",
						"Ошибка при вызове метода контекста (Выполнить)"));
					СтрокаДляОтвета = ЗаписьJSON.Закрыть();

					Ответ = Новый HTTPСервисОтвет(500);
					Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

					Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
					Возврат Ответ;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
	Исключение
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		Информация = ИнформацияОбОшибке();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Ошибка при вызове метода контекста (Выполнить)",
			Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат Ответ;
	КонецПопытки;
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	Информация = ИнформацияОбОшибке();

	ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Ошибка при вызове метода контекста (Выполнить)",
		Информация.Описание));
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(500);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
	Возврат Ответ;
КонецФункции

Функция ПолучитьАвторизациюAuthorization(Запрос)
	ЗапросСотрудника = Новый запрос;
	ЗапросСотрудника.Текст = "ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Организация КАК Организация,
	|	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ДолжностиСотрудниковСрезПоследних.ТипДоговора КАК ТипДоговора,
	|	ДолжностиСотрудниковСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втДолжности
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	Подразделение,
	|	Должность,
	|	ТипДоговора,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(втДолжности.Период) КАК Период
	|ПОМЕСТИТЬ втДолжностиПериоды
	|ИЗ
	|	втДолжности КАК втДолжности
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(втДолжности.Организация) КАК Организация,
	|	МИНИМУМ(втДолжности.Подразделение) КАК Подразделение,
	|	МИНИМУМ(втДолжности.Должность) КАК Должность,
	|	МИНИМУМ(втДолжности.ТипДоговора) КАК ТипДоговора
	|ПОМЕСТИТЬ втДолжностиСотрудников
	|ИЗ
	|	втДолжности КАК втДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолжностиПериоды КАК втДолжностиПериоды
	|		ПО втДолжности.Сотрудник = втДолжностиПериоды.Сотрудник
	|		И (втДолжностиПериоды.Период = втДолжности.Период)
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	втДолжностиСотрудников.Организация КАК Организация,
	|	втДолжностиСотрудников.Подразделение КАК Подразделение,
	|	втДолжностиСотрудников.Должность КАК Должность,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втДолжностиСотрудников.Должность,
	|		ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка) КАК
	|		Действующий,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	Сотрудники.МестоРаботы КАК МестоРаботы,
	|	Сотрудники.ПарольДляУК КАК ПарольДляУК,
	|	Сотрудники.Тележка КАК Тележка,
	|	Сотрудники.РолиWT10.(
	|		Ссылка,
	|		НомерСтроки,
	|		Роль)
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолжностиСотрудников КАК втДолжностиСотрудников
	|		ПО (втДолжностиСотрудников.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	|ГДЕ
	|	(ТелефоныЛичные.ТелефонЛичный = &Телефон
	|	ИЛИ ТелефоныСлужебные.ТелефонСлужебный = &Телефон)
	|	И НЕ Сотрудники.Пользователь.Недействителен";

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	ЗапросСотрудника.УстановитьПараметр("Телефон", Строка(Массив.phone));

	ВыборкаСотрудника = ЗапросСотрудника.Выполнить().Выбрать();
	Если ВыборкаСотрудника.Количество() > 0 Тогда
		ВыборкаСотрудника.Следующий();
		Если ВыборкаСотрудника.ПарольДляУК = Массив.pass Тогда 
			//ДанныеВBase64 = XMLСтрока(ВыборкаСотрудника.фото); // Получим Base64 хранилища значения
			//ДвоичныеДанные = Base64Значение(ДанныеВBase64);
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("name", Строка(ВыборкаСотрудника.Наименование));
			СтруктураОтвета.Вставить("code", Строка(ВыборкаСотрудника.Код));
			СтруктураОтвета.Вставить("company", Строка(ВыборкаСотрудника.Организация));
			СтруктураОтвета.Вставить("post", Строка(ВыборкаСотрудника.Должность));
			СтруктураОтвета.Вставить("birthdate", Строка(ВыборкаСотрудника.ДатаРождения));
			СтруктураОтвета.Вставить("pphone", Строка(ВыборкаСотрудника.ТелефонЛичный));
			СтруктураОтвета.Вставить("wphone", Строка(ВыборкаСотрудника.ТелефонСлужебный));
			СтруктураОтвета.Вставить("car", Строка(ВыборкаСотрудника.Тележка));
			Если ВыборкаСотрудника.Тележка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
				СтруктураОтвета.Вставить("car_items", КоличествоТоваровВКорзине(ВыборкаСотрудника.Тележка));
			Иначе
				СтруктураОтвета.Вставить("car_items", 0);
			КонецЕсли;
			
			//СтруктураОтвета.Вставить("Photo",ДвоичныеДанные ); 
			//signin
			 Роли = ВыборкаСотрудника.РолиWT10.Выгрузить();
			
			МассивРолей = Новый массив;
			
			
			Для Каждого стр из Роли Цикл 
				Структурароли = Новый Структура;
				Структурароли.Вставить("id",    Стр.Роль.Код);
				Структурароли.Вставить("title",    Строка(Стр.Роль)); 
				МассивРолей.Добавить(Строка(Стр.Роль));
			КонецЦикла;
			
			СтруктураОтвета.Вставить("roles",    МассивРолей);

			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать);

			Возврат Ответ;
		Иначе
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("{ text:""Пароль не верен"" }");
			Возврат Ответ;
		КонецЕсли;

	Иначе

		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("{ text:""Нет такого"" }");
		Возврат Ответ;
	КонецЕсли;
КонецФункции

Функция ПолучитьИнфоОПользователеgetinfouser(Запрос)
	ЗапросСотрудника = Новый запрос;
	ЗапросСотрудника.Текст = "ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Организация КАК Организация,
	|	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ДолжностиСотрудниковСрезПоследних.ТипДоговора КАК ТипДоговора,
	|	ДолжностиСотрудниковСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втДолжности
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	Подразделение,
	|	Должность,
	|	ТипДоговора,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(втДолжности.Период) КАК Период
	|ПОМЕСТИТЬ втДолжностиПериоды
	|ИЗ
	|	втДолжности КАК втДолжности
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(втДолжности.Организация) КАК Организация,
	|	МИНИМУМ(втДолжности.Подразделение) КАК Подразделение,
	|	МИНИМУМ(втДолжности.Должность) КАК Должность,
	|	МИНИМУМ(втДолжности.ТипДоговора) КАК ТипДоговора
	|ПОМЕСТИТЬ втДолжностиСотрудников
	|ИЗ
	|	втДолжности КАК втДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолжностиПериоды КАК втДолжностиПериоды
	|		ПО втДолжности.Сотрудник = втДолжностиПериоды.Сотрудник
	|		И (втДолжностиПериоды.Период = втДолжности.Период)
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	втДолжностиСотрудников.Организация КАК Организация,
	|	втДолжностиСотрудников.Подразделение КАК Подразделение,
	|	втДолжностиСотрудников.Должность КАК Должность,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втДолжностиСотрудников.Должность,
	|		ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка) КАК
	|		Действующий,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	Сотрудники.МестоРаботы КАК МестоРаботы,
	|	Сотрудники.ПарольДляУК КАК ПарольДляУК,
	|	Сотрудники.Тележка КАК Тележка,
	|	Сотрудники.РолиWT10.(
	|		Ссылка,
	|		НомерСтроки,
	|		Роль) 
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолжностиСотрудников КАК втДолжностиСотрудников
	|		ПО (втДолжностиСотрудников.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	|ГДЕ
	|	Сотрудники.Код = &КодСотрудника
	|	И НЕ Сотрудники.Пользователь.Недействителен";

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	ЗапросСотрудника.УстановитьПараметр("КодСотрудника", Строка(Массив.id));

	ВыборкаСотрудника = ЗапросСотрудника.Выполнить().Выбрать();
	Если ВыборкаСотрудника.Количество() > 0 Тогда
		ВыборкаСотрудника.Следующий();
		//Если ВыборкаСотрудника.ПарольДляУК = Массив.Pass Тогда 
			//ДанныеВBase64 = XMLСтрока(ВыборкаСотрудника.фото); // Получим Base64 хранилища значения
			//ДвоичныеДанные = Base64Значение(ДанныеВBase64);
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("name", Строка(ВыборкаСотрудника.Наименование));
			СтруктураОтвета.Вставить("code", Строка(ВыборкаСотрудника.Код));
			СтруктураОтвета.Вставить("company", Строка(ВыборкаСотрудника.Организация));
			СтруктураОтвета.Вставить("post", Строка(ВыборкаСотрудника.Должность));
			СтруктураОтвета.Вставить("birthdate", Строка(ВыборкаСотрудника.ДатаРождения));
			СтруктураОтвета.Вставить("pphone", Строка(ВыборкаСотрудника.ТелефонЛичный));
			СтруктураОтвета.Вставить("wphone", Строка(ВыборкаСотрудника.ТелефонСлужебный));
			СтруктураОтвета.Вставить("car", Строка(ВыборкаСотрудника.Тележка));
			Если ВыборкаСотрудника.Тележка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
				СтруктураОтвета.Вставить("car_items", КоличествоТоваровВКорзине(ВыборкаСотрудника.Тележка));
			Иначе
				СтруктураОтвета.Вставить("car_items", 0);
			КонецЕсли;
			//ТаблицаРолей = ВыборкаСотрудника.РолиWT10.Выгрузить();
			
			//СтруктураОтвета.Вставить("Photo",ДвоичныеДанные ); 
			//signin
			 Роли = ВыборкаСотрудника.РолиWT10.Выгрузить();
			
			МассивРолей = Новый массив;
			
			
			Для Каждого стр из Роли Цикл 
				Структурароли = Новый Структура;
				Структурароли.Вставить("id",    Стр.Роль.Код);
				Структурароли.Вставить("title",    Строка(Стр.Роль)); 
				МассивРолей.Добавить(Структурароли);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("roles",    МассивРолей);

			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать);

			Возврат Ответ;
//		Иначе
//			Ответ = Новый HTTPСервисОтвет(404);
//			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//			Ответ.УстановитьТелоИзСтроки("{ text:""Пароль не верен"" }");
//			Возврат Ответ;
//		КонецЕсли;

	Иначе

		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("{ text:""Нет такого"" }");
		Возврат Ответ;
	КонецЕсли;
КонецФункции

Функция ПолучитьСписокТоваровGetProductsList(Запрос)

	МассивСтеллажей = Новый Массив;
	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001068")); //RegionEKB
	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002014")); //RegionMSK
	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002015")); //RegionNN

	ЗапросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
		Запрос.ПараметрыURL["text"])) + "%");
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	запросТовара.УстановитьПараметр("Стеллаж", МассивСтеллажей);
	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
	Если Выборкаобщ > 0 Тогда
		запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
			Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
		запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
			Строка(Запрос.ПараметрыURL["text"])) + "%");
		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
			Запрос.ПараметрыURL["page"]) > 1 Тогда
			запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
		Иначе
			запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;

		ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
		ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;

		ИндКоды = тз.ВыгрузитьКолонку("индкод");
		Фотки = ПолучениеФото(ИндКоды);
		Итер = 0;

		Для Каждого стр Из ТЗ Цикл
			НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
			НайденныеФотки = Фотки[итер].urls;
			МассивФото = Новый массив;
			Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

				стр.колфото = 1;

				Для Каждого Фотка Из НайденныеФотки Цикл
					Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
					Текст = Фотка;
					МассивФото.Добавить(Текст);
				КонецЦикла;
			КонецЕсли;
			Итер = итер + 1;
			тз.Сортировать("АЧ Убыв, колФото Убыв");
			//тз.Сортировать("колФото Убыв");

			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
			СтруктураТоваров.Вставить("search", Строка(стр.СтрокаПоиска));
			СтруктураТоваров.Вставить("search1", Строка(стр.СтрокаПоиска1));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("cost", стр.Цена);
			СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
			СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
			СтруктураТоваров.Вставить("code", Строка(стр.Код));
			СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
			СтруктураТоваров.Вставить("stack", стр.Комплектация);
			СтруктураТоваров.Вставить("conv", стр.АЧ);
			СтруктураТоваров.Вставить("sity", Строка(стр.Город));

			СтруктураТоваров.Вставить("id", Строка(стр.индкод));
			СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
			СтруктураТоваров.Вставить("photos", МассивФото);
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;
		Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", Выборкаобщ);
//	Если Лев(Запрос.ПараметрыURL["id"],1) = "П" Тогда
//		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["id"])))); 
//		//	Иначе
//		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
//	КонецЕсли;
//	

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураОтвета.Вставить("data", МассивТоваров);

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

		Возврат Ответ;
	КонецЕсли;
//ПолнотекстовыйПоиск.ОбновитьИндекс();

		
//	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
//	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	//СтруктураИнфо= Новый Структура;
//	СтруктураИнфо.Вставить("pages", Итог);
	//СтруктураИнфо.Вставить("count", МассивТоваров.Количество());

//	СтруктураОтвета = Новый Структура;
//	СтруктураОтвета.Вставить("info", СтруктураИнфо);
//	СтруктураОтвета.Вставить("data", МассивТоваров);

	//ПолнотекстовыйПоиск.УстановитьКоличествоЗаданийИндексирования(5);
	Страница = Число(Запрос.ПараметрыURL["page"]);
	КолВо    = Число(Запрос.ПараметрыURL["count"]);
	ПоисковаяСтрока = Строка(Запрос.ПараметрыURL["text"]);

	СписокПоиска=ПолнотекстовыйПоиск.СоздатьСписок();
	СписокПоиска.ПолучатьОписание = Ложь;
	МассивОтбор = Новый Массив;
	МассивТоваров = Новый Массив;
	СписокПоиска.РазмерПорции = КолВо;

	ТекущаяПозиция = КолВо * (Страница - 1);

	МассивОтбор.Добавить(Метаданные.РегистрыСведений.ИндНомер);
	СписокПоиска.ОбластьПоиска = МассивОтбор;
	ЛимитОшибок = Цел(СтрДлина(ПоисковаяСтрока) / 2);
	СписокПоиска.СтрокаПоиска="""" + ПоисковаяСтрока + """";
	Если Страница = 1 Тогда
		СписокПоиска.ПерваяЧасть();
	Иначе
		СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
	КонецЕсли;
	Если СписокПоиска.Количество() > 0 Тогда

	Иначе

		СписокПоиска.СтрокаПоиска=ПоисковаяСтрока + "#" + Строка(ЛимитОшибок - 1);
		Если Страница = 1 Тогда
			СписокПоиска.ПерваяЧасть();
		Иначе
			СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
		КонецЕсли;
	КонецЕсли;
	ОбщееКолво = СписокПоиска.ПолноеКоличество();
	ИндКоды = Новый массив;

	Для Каждого Результат Из СписокПоиска Цикл
		ИндКоды.Добавить(Строка(Результат.Значение.индкод));
	КонецЦикла;

	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;
	Для Каждого Результат Из СписокПоиска Цикл

		НайденныеФотки = Новый Массив;
		НайденныеФотки = Фотки[Итер].urls;

		МассивФото = Новый массив;

		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;

		КонецЕсли;
		Итер = Итер + 1;

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("id", Строка(Результат.Значение.индкод));
		СтруктураТоваров.Вставить("article", Строка(Результат.Значение.индкод.Владелец.Артикул));
		СтруктураТоваров.Вставить("category", Строка(Результат.Значение.индкод.Владелец.Подкатегория2));
		СтруктураТоваров.Вставить("name", Строка(Результат.Значение.индкод.Владелец));
		СтруктураТоваров.Вставить("photos", МассивФото);
		//@skip-check query-in-loop
		СтруктураДопРеквизитов = ПолучитьДопРеквизиты(Строка(Результат.Значение.индкод));
		СтруктураТоваров.Вставить("cost", СтруктураДопРеквизитов.cost);
		СтруктураТоваров.Вставить("comment", СтруктураДопРеквизитов.comment);
		СтруктураТоваров.Вставить("place", СтруктураДопРеквизитов.place);
		СтруктураТоваров.Вставить("sklad", СтруктураДопРеквизитов.sklad);
		СтруктураТоваров.Вставить("poddon", СтруктураДопРеквизитов.poddon);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", ОбщееКолво);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
//	

	Возврат Ответ;
КонецФункции

Функция ПолучитьДанныеОТоваре(Партия)
	///++ МазинЕС 23-07-2024

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПродажаЗапчастейТаблица.Товар КАК Товар,
		|	ПродажаЗапчастейТаблица.Партия КАК Партия,
		|	ПродажаЗапчастейТаблица.Ссылка КАК Ссылка,
		|	ПродажаЗапчастейТаблица.СтатусТовара КАК СтатусТовара,
		|	ПродажаЗапчастей.ЗаказКлиента.Номер КАК ЗаказКлиентаНомер
		|ИЗ
		|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		|		ПО ПродажаЗапчастейТаблица.Ссылка = ПродажаЗапчастей.Ссылка
		|ГДЕ
		|	ПродажаЗапчастейТаблица.Партия.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Партия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Текст = ""; 
	
	Структура = Новый Структура();
	
	Если РезультатЗапроса.Пустой()  Тогда 
		Структура.Вставить("Продан","");
		Структура.Вставить("Выдан","");
		Структура.Вставить("ЗаказКлиентаНомер",""); 
	КонецЕсли; 
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Структура.Вставить("Продан","В продаже");
		Структура.Вставить("ЗаказКлиентаНомер",ВыборкаДетальныеЗаписи.ЗаказКлиентаНомер);
		Если ВыборкаДетальныеЗаписи.СтатусТовара Тогда 
			Структура.Вставить("Выдан","Выдан");
		Иначе Структура.Вставить("Выдан","На складе");	 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Структура;
	 
	//-- МазинЕС 23-07-2024
КонецФункции


Функция ПолучитьТоварGetProduct(Запрос)

	ЗапросТовара = Новый Запрос;
	ЗапросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));
	ЗапросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	ЗапросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	ТЗ = ЗапросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;
	
	///+ГомзМА 21.02.2024 
	Фотограф = ПолучитьФотографа(Запрос.ПараметрыURL["id"]);
	ФИОФотографа = "";
	ТабНомФотографа = "";
	Если Фотограф <> Неопределено Тогда
		ФИОФотографа = Справочники.Сотрудники.НайтиПоКоду(Фотограф.tabnum);
		ТабНомФотографа = Фотограф.tabnum;
	КонецЕсли;
	
	///-ГомзМА 21.02.2024
	Если ТЗ.Количество() > 0 Тогда
		Для Каждого стр Из ТЗ Цикл
			НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
			НайденныеФотки = Фотки[итер].urls;
			МассивФото = Новый массив;
			Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

				стр.колфото = 1;

				Для Каждого Фотка Из НайденныеФотки Цикл
					Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
					Текст = Фотка;
					МассивФото.Добавить(Текст);
				КонецЦикла;
			КонецЕсли;
			итер = итер + 1;
			тз.Сортировать("колФото Убыв");
		
		///+ГомзМА 20.05.2024
			РекомендованноеМестоХранения = Новый Массив;

			ЗапросРекомендованноеМесто = Новый Запрос;
			ЗапросРекомендованноеМесто.Текст = текстРекомендуемоеМестоХранения();

			ЗапросРекомендованноеМесто.УстановитьПараметр("Наименование", Строка(стр.код));
		//@skip-check query-in-loop
			РезультатЗапросаРекомендованноеМесто = ЗапросРекомендованноеМесто.Выполнить().Выбрать();

			РезультатЗапросаРекомендованноеМесто.Следующий();

			СтруктураРекомендованноеМесто = Новый Структура;
			СтруктураРекомендованноеМесто.Вставить("sklad", Строка(РезультатЗапросаРекомендованноеМесто.Склад));
			СтруктураРекомендованноеМесто.Вставить("place", Строка(РезультатЗапросаРекомендованноеМесто.Адрес));
			СтруктураРекомендованноеМесто.Вставить("poddon", Строка(РезультатЗапросаРекомендованноеМесто.Поддон));
			СтруктураРекомендованноеМесто.Вставить("count", Строка(РезультатЗапросаРекомендованноеМесто.Количество));

			РекомендованноеМестоХранения.Добавить(СтруктураРекомендованноеМесто);
			///-ГомзМА 20.05.2024
			СтруктураТоваров = Новый Структура;	
			//++МазинЕС 23-07-2024
			Структура = ПолучитьДанныеОТоваре(стр.индкод); 
			СтруктураТоваров.Вставить("prodan",Структура.Выдан); 
			СтруктураТоваров.Вставить("vidan",Структура.Продан);
			СтруктураТоваров.Вставить("IDzaivka",Структура.ЗаказКлиентаНомер); 
			//--МазинЕС 23-07-2024
			СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("cost", стр.Цена);
			СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
			СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
			СтруктураТоваров.Вставить("uchetchik", Строка(стр.Учетчик));
			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
			СтруктураТоваров.Вставить("state", Строка(стр.Состояние));
			СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
			СтруктураТоваров.Вставить("chek_size", стр.Размеры);
			СтруктураТоваров.Вставить("availability", стр.ФактНаличия);
		
		///+ГомзМА 21.02.2024
			СтруктураТоваров.Вставить("tabnum_photographer", Строка(ТабНомФотографа));
			СтруктураТоваров.Вставить("name_photographer", Строка(ФИОФотографа));
		///-ГомзМА 21.02.2024

			СтруктураТоваров.Вставить("length", стр.длин);
			СтруктураТоваров.Вставить("width", стр.шир);
			СтруктураТоваров.Вставить("height", стр.выс);
			СтруктураТоваров.Вставить("weight", стр.Вес);

			СтруктураТоваров.Вставить("code", Строка(стр.код));
			СтруктураТоваров.Вставить("id", Строка(стр.индкод));
			СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		///+ГомзМА 20.05.2024
			СтруктураТоваров.Вставить("recommended_place", СтруктураРекомендованноеМесто);
		///-ГомзМА 20.05.2024

			СтруктураТоваров.Вставить("photos", МассивФото);
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		//Информация = ИнформацияОбОшибке();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Товар не найден",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция СменаМестаХраненияEditPlace(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Если Массив.type = 1 Тогда
		Ответ = РедактироватьПоддон(Массив.id, Массив.place, Массив.author);
	Иначе
		Ответ = РедактироватьПолку(Массив.id, Массив.place, Массив.author);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция СменаНаличияChangeOfAvailability(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Индкод = Массив.id;
	Наличие = Массив.inStock;
	Автор = Массив.author;

	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", Индкод);

	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;

	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		НовыйНомер = НаборЗаписей[0];

		НовыйНомер.ДатаНаличия = ТекущаяДата();
		НовыйНомер.ОтветственныйЗаНаличие = Справочники.Сотрудники.НайтиПоКоду(Автор);
		НовыйНомер.ФактНаличия = Наличие;
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех");

		Возврат ответ;

	КонецЕсли;
КонецФункции

Функция ПолучитьТоварыПоИндкодамGetProductsById(Запрос)
	
	///+ГомзМА 04.07.2024
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	Индкода = Массив.ids;
	МассивИнфо = Новый Массив;

	Для Каждого Индкод Из Индкода Цикл
		запросТовара = Новый Запрос;
		запросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));

		запросТовара.УстановитьПараметр("Наименование", Строка(Индкод));
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
		//@skip-check query-in-loop
		ТЗ = запросТовара.Выполнить().Выгрузить();
	
		//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
		ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;

		ИндКоды = тз.ВыгрузитьКолонку("индкод");
		Фотки = ПолучениеФото(ИндКоды);
		итер = 0;

		Для Каждого стр Из ТЗ Цикл
			НайденныеФотки = Новый Массив;

			НайденныеФотки = Фотки[итер].urls;
			МассивФото = Новый массив;
			Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

				стр.колфото = 1;

				Для Каждого Фотка Из НайденныеФотки Цикл
					Текст = "";

					Текст = Фотка;
					МассивФото.Добавить(Текст);
				КонецЦикла;
			КонецЕсли;
			итер = итер + 1;
			тз.Сортировать("колФото Убыв");

			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("cost", стр.Цена);
			СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
			СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
			СтруктураТоваров.Вставить("code", Строка(стр.Код));
			СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);

			СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
			//СтруктураТоваров.Вставить("stack",    стр.Комплектация);
			СтруктураТоваров.Вставить("id", Строка(стр.индкод));
			СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

			СтруктураТоваров.Вставить("photos", МассивФото);
			МассивТоваров.Добавить(СтруктураТоваров);
			МассивИнфо.Добавить(СтруктураТоваров);
		КонецЦикла;
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, МассивИнфо);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	Возврат Ответ;
	///-ГомзМА 04.07.2024

КонецФункции

Функция СменаРеквизитовТовараEditList(Запрос)
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	Автор = Массив.author;

	Ответ = РедактироватьТовар(Массив.id, Массив.comment, число(Массив.price));
	// КонецЦикла;
	Лог =  " сменил реквизиты " + Массив.comment + " " + Массив.price;
	ЛогированиеИндНомера(Массив.id, Автор, Лог, , , , );
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокПохожихТоваровGetSimilarProductsList(Запрос)

	ЗапросТовара = Новый Запрос;
	Текстзапроса = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.владелец.код ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
				   |	И ИндНомер.индкод.Наименование НЕ ПОДОБНО &НаименованиеПолное СПЕЦСИМВОЛ ""~""
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город,
				   |	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
				   |	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
				   |	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
				   |	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
				   |	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
				   |	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
				   |	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
				   |	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
				   |	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";

	Источник = СокрЛП(Строка(Запрос.ПараметрыURL["id"]));
	КодКарточки = Лев(Источник, СтрДлина(Источник) - стрНайти(Источник, "_"));
	
				Если СтрНайти(КодКарточки, "00") = 1 Тогда
		Длина = СтрДлина(КодКарточки);
		Пока длина < 9 Цикл
			КодКарточки = "0" + КодКарточки;
			длина = длина + 1;
		КонецЦикла;
	КонецЕсли;
			
	ИндКод = Строка(Запрос.ПараметрыURL["id"]);
	запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		КодКарточки) + "%");
	запросТовара.УстановитьПараметр("НаименованиеПолное", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		ИндКод) + "%");
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();

	запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		КодКарточки) + "%");
	запросТовара.УстановитьПараметр("НаименованиеПолное", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		ИндКод) + "%");
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;

	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;

	Для Каждого стр Из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		Итер = итер + 1;
		тз.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("search", Строка(стр.СтрокаПоиска));
		СтруктураТоваров.Вставить("search1", Строка(стр.СтрокаПоиска1));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost", стр.Цена);
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("code", Строка(стр.Код));
		СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
		СтруктураТоваров.Вставить("stack", стр.Комплектация);

		СтруктураТоваров.Вставить("sity", Строка(стр.Город));

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);
//	Если Лев(Запрос.ПараметрыURL["id"],1) = "П" Тогда
//		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["id"])))); 
//		//	Иначе
//		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
//	КонецЕсли;
//	

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

КонецФункции

Функция СоздатьПродажуcreatesale(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Номерзаявки = Массив.id;
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер", Номерзаявки);
	Выборка = запросзаявки.Выполнить().Выбрать();

	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();

		Продажа = ПроверкаПродаж(Выборка.ссылка);
		Если Продажа.ссылка = Неопределено Тогда

			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Клиент КАК Клиент,
			|	Док.Комментарий КАК Комментарий,
			|	Док.Проект КАК Проект,
			|	Док.Склад КАК Склад,
			|	Док.Ссылка КАК ЗаказКлиента,
			|	Док.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	Док.НачислятьНДС КАК НачислятьНДС,
			|	Док.Ответственный КАК КтоПродал
			|ПОМЕСТИТЬ втШапка
			|ИЗ
			|	Документ.ЗаказКлиента КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втШапка.Клиент КАК Клиент,
			|	втШапка.Комментарий КАК Комментарий,
			|	втШапка.Проект КАК Проект,
			|	втШапка.Склад КАК Склад,
			|	втШапка.ЗаказКлиента КАК ЗаказКлиента,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	втШапка.КтоПродал КАК КтоПродал
			|ИЗ
			|	втШапка КАК втШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
			|	ЗаказКлиентаТовары.Номенклатура КАК Товар,
			|	ЗаказКлиентаТовары.Количество КАК Количество,
			|	ЗаказКлиентаТовары.Цена КАК Цена,
			|	ЗаказКлиентаТовары.Сумма КАК Сумма,
			|	втШапка.Склад КАК Склад,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,
			|	ЗаказКлиентаТовары.Партия КАК Партия,
			|	втШапка.КтоПродал КАК КтоПродал,
			|	РегистрНакопления1Остатки.машина КАК машина,
			|	РегистрНакопления1Остатки.Склад КАК Склад1
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ втШапка КАК втШапка
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
			|		ПО ЗаказКлиентаТовары.Партия = РегистрНакопления1Остатки.индкод
			|		И ЗаказКлиентаТовары.Номенклатура = РегистрНакопления1Остатки.Товар
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка = &Ссылка
			|	И НЕ ЗаказКлиентаТовары.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			Запрос.УстановитьПараметр("Ссылка", Выборка.ссылка);

			Объектзаявки = выборка.ссылка.получитьОбъект();
			объектзаявки.Wtpanel = Справочники.СтатусыWT.НайтиПоНаименованию("Продажа");
			объектзаявки.записать();
			НоваяПродажа = Документы.ПродажаЗапчастей.СоздатьДокумент();
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			НоваяПродажа.Организация = Справочники.Организация.НайтиПоКоду("000000010");
			//НоваяПродажа.TipOplati   = Справочники.TipOplati.НайтиПоКоду(Массив.bill);
			НоваяПродажа.ОжидаемаяДатаВыплаты   = ТекущаяДата();

			НоваяПродажа.БезДоговора = Истина;
			НоваяПродажа.Дата        = ТекущаяДата();
			НоваяПродажа.Ктопродал   = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки).Ответственный;
			НоваяПродажа.Самовывоз   = Истина;
			НоваяПродажа.СтатусОбработки    = Перечисления.СтатусыОбработкиЗаявок.Обработано;
			НоваяПродажа.WTpanel    = Справочники.СтатусыWT.НайтиПоНаименованию("Продажа");
			НоваяПродажа.ПодстатусОбработки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;

			НоваяПродажа.СтатусДоставки    = Перечисления.СтатусОтправки.Отправлен;
			НоваяПродажа.ДатаСписания      = ТекущаяДата();
			Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[РезультатЗапроса.Количество()
				- 2].Выгрузить()[0]);

			ЗаполнениеДокументов.Заполнить(НоваяПродажа, Шапка, Ложь);
			НоваяПродажа.Таблица.Загрузить(РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить());

			НоваяПродажа.Записать();

			ТекстЛога =  " Создал продажу " + НоваяПродажа.номер;
			ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
			//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(НоваяПродажа.КтоПродал), Строка(Выборка.Ответственный) + ТекстЛога); 

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки(НоваяПродажа.номер);
		Иначе
	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Продажа уже есть!",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		КонецЕсли;
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Такой заявки нет!",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);

	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПолучитьПродажуgetsale(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляПродажи();
	запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Выборка = запросзаявки.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("id", Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client", Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("application", Строка(выборка.ЗаказКлиента));
		СтруктураИнфо.Вставить("processing", Строка(выборка.СтатусОбработки));
		СтруктураИнфо.Вставить("sub_processing", Строка(выборка.подСтатусОбработки));
		СтруктураИнфо.Вставить("status", Строка(Выборка.СтатусЗаказаВТК));
		СтруктураИнфо.Вставить("client_phone", Строка(Выборка.КлиентТелефон));
		СтруктураИнфо.Вставить("store_keeper", Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible", Строка(выборка.КтоПродал));

		СтруктураИнфо.Вставить("sum", выборка.ИтогоРекв);
		СтруктураИнфо.Вставить("recorded_track_number", выборка.ЕстьТрекНомер);	
		//	ВыборкаТоваров = выборка.Таблица.Выбрать();
		ТЗ = выборка.Таблица.Выгрузить(); 
		//Массивкодов = ТЗ.ВыгрузитьКолонку("Партия");
		ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;
		//Для каждого стр из ТЗ Цикл 
		//	НайденныеФотки = Новый Массив;
		//	Фотки = ПолучениеФото(стр.индкод);
		//	
		//	Если фотки <> неопределено и  фотки.Количество()>0  Тогда
		//		НайденныеФотки = Фотки[0].urls;
		//		Если НайденныеФотки.Количество()>0 Тогда
		//			стр.колфото = 1;  
		//		КонецЕсли; 
		//	КонецЕсли;
		//	
		//КонецЦикла;
		ИндКоды = тз.ВыгрузитьКолонку("Партия2");
		Фотки = ПолучениеФото(ИндКоды);
		итер = 0;
		Для Каждого стр Из ТЗ Цикл
			
			//	Пока ВыборкаТоваров.Следующий() Цикл 
			МассивФото = Новый массив;

			Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
				//ПутьКФайлам = "W:\code\imageService\images\" + ВыборкаТоваров.Партия;
				//НайденныеФотки = НайтиФайлы(ПутьКФайлам,"*" );
				//Фотки = ПолучениеФото(ВыборкаТоваров.Партия);
				Если фотки <> Неопределено И фотки.Количество() > 0 Тогда
					НайденныеФотки = Новый Массив;  
					//КоличествоСФото = КоличествоСФото + 1; 
					//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
					НайденныеФотки = Фотки[итер].urls;
					МассивФото = Новый массив;
					Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

						стр.колфото = 1;

						Для Каждого Фотка Из НайденныеФотки Цикл
							Текст = "";
							//Текст = "https://wt10.ru" + Фотка;
							Текст = Фотка;
							МассивФото.Добавить(Текст);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
			итер = итер + 1;
			Код = стр.Код;
			Пока Лев(Код, 1) = "0" Цикл
				Код = Прав(Код, СтрДлина(Код) - 1);
			КонецЦикла;
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name", Строка(стр.Товар));
			СтруктураТоваров.Вставить("position", стр.НомерСтроки);
			СтруктураТоваров.Вставить("cost", Строка(стр.Цена));
			СтруктураТоваров.Вставить("count", Строка(стр.Количество));
			СтруктураТоваров.Вставить("sum", Строка(стр.Сумма));
			СтруктураТоваров.Вставить("issued", Строка(стр.СтатусТовара));
			СтруктураТоваров.Вставить("code", Строка("00" + Код));
			СтруктураТоваров.Вставить("id", Строка(стр.Партия));
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
			СтруктураТоваров.Вставить("photos", МассивФото);
			СтруктураТоваров.Вставить("state", Строка(стр.СтатусТовара));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("cancel", стр.Отменено);
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("availability_in_k_warehouse", ЕстьНаКСкладе(стр.Товар));

			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;
	КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ОбновитьПродажуrefreshsale(Запрос)
		Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Номерзаявки = Массив.id;
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер", Номерзаявки);
	Выборка = запросзаявки.Выполнить().Выбрать();

	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Такой заявки нет!",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат Ответ;
	КонецЕсли;
	
		
	ЗапросСтрокПродажи = Новый Запрос;
	ЗапросСтрокПродажи.Текст = "ВЫБРАТЬ
							   |	ПродажаЗапчастейТаблица.Партия,
							   |	ПродажаЗапчастейТаблица.Товар
							   |ИЗ
							   |	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
							   |ГДЕ
							   |	ПродажаЗапчастейТаблица.Ссылка.ЗаказКлиента = &НомерПродажи";
	ЗапросСтрокПродажи.УстановитьПараметр("НомерПродажи", Выборка.ссылка);
	ТЧ_Продажи = ЗапросСтрокПродажи.Выполнить().Выгрузить();

	ЗапросСтрокЗаявки = Новый Запрос;
	ЗапросСтрокЗаявки.Текст = "ВЫБРАТЬ
							  |	ЗаказКлиентаТовары.Ссылка,
							  |	ЗаказКлиентаТовары.НомерСтроки,
							  |	ЗаказКлиентаТовары.Номенклатура КАК Товар,
							  |	ЗаказКлиентаТовары.ЦенаОригинала,
							  |	ЗаказКлиентаТовары.Количество,
							  |	ЗаказКлиентаТовары.Цена,
							  |	ЗаказКлиентаТовары.Сумма,
							  |	ЗаказКлиентаТовары.Отменено,
							  |	ЗаказКлиентаТовары.Склад,
							  |	ЗаказКлиентаТовары.СуммаНДС,
							  |	ЗаказКлиентаТовары.Комментарий,
							  |	ЗаказКлиентаТовары.ПредлагаемаяЦена,
							  |	ЗаказКлиентаТовары.Партия,
							  |	ЗаказКлиентаТовары.Проверено,
							  |	ЗаказКлиентаТовары.Комментарий1,
							  |	ЗаказКлиентаТовары.НН,
							  |	ЗаказКлиентаТовары.МСК,
							  |	ЗаказКлиентаТовары.ЕКБ,
							  |	ЗаказКлиентаТовары.ЦенаСоСкидкойНаценкой
							  |ИЗ
							  |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
							  |ГДЕ
							  |	ЗаказКлиентаТовары.Ссылка = &Ссылка";
	ЗапросСтрокЗаявки.УстановитьПараметр("Ссылка", Выборка.Ссылка);
	ТЧ_Заявки = ЗапросСтрокЗаявки.Выполнить().Выгрузить();
//ОбъектПродажи = документы.пВыборка.Продажа.Получитьобъект();
ОбъектПродажи = Документы.ПродажаЗапчастей.НайтиПоРеквизиту("ЗаказКлиента",Выборка.ссылка).ПолучитьОбъект();
	Для Каждого СтрокаТЧ_Заявки Из ТЧ_Заявки Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Товар", СтрокаТЧ_Заявки.Товар);
		Отбор.Вставить("Партия", СтрокаТЧ_Заявки.партия);

		НайденныеСтроки = ТЧ_Продажи.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			
			НоваяСтрокаПродажи = ОбъектПродажи.Таблица.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПродажи, СтрокаТЧ_Заявки);

			
		КонецЕсли;
		
	КонецЦикла;
	ОбъектПродажи.Записать();
	Для Каждого СтрокаТч_Продажи из ОбъектПродажи.Таблица Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Товар", СтрокаТч_Продажи.Товар);
		Отбор.Вставить("Партия", СтрокаТч_Продажи.партия);

		НайденныеСтроки = ТЧ_Заявки.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ОбъектПродажи.Таблица.удалить(СтрокаТч_Продажи);	
			
		КонецЕсли;
		
	КонецЦикла;
	ОбъектПродажи.Записать();
	
	
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Данные продажи " +ОбъектПродажи.Номер + " обновлены.");
	Возврат Ответ;
КонецФункции

Функция СписатьДетальDeleteProduct(Запрос)
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	ИндКод        = Справочники.ИндКод.НайтиПоНаименованию(Массив.id);
	Товар         = ИндКод.Владелец;
	Машина        = ПолучитьМашину(ИндКод);
	Комментарий   = Массив.coment;

	ССылкаСписания = ПолучитьСписание(Ответственный);
	Если ССылкаСписания <> Неопределено Тогда
		Объектсписания = ССылкаСписания.ПолучитьОбъект();
	Иначе
		Объектсписания  = Документы.СписаниеЗапчастей.СоздатьДокумент();
		Объектсписания.Склад = Справочники.Склады.НайтиПоКоду("000000002");
		Объектсписания.дата = ТекущаяДата();
		Объектсписания.Ответственный = Ответственный;
		Объектсписания.Организация = Справочники.Организация.НайтиПоКоду("000000005");

		Объектсписания.Записать();
	КонецЕсли;
	НоваястрокаСписания = Объектсписания.Товары.Добавить();

	НоваястрокаСписания.Номенклатура = Товар;
	НоваястрокаСписания.Инициатор    = Ответственный;
	НоваястрокаСписания.Количество   = 1;
	НоваястрокаСписания.Партия       = ИндКод;
	НоваястрокаСписания.Автомобиль   = Машина;
	НоваястрокаСписания.Количество   = 1;
	НоваястрокаСписания.Комментарий  = Комментарий;

	Объектсписания.Записать(РежимЗаписиДокумента.Проведение);

	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("индкод", НоваястрокаСписания.Партия);

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Списано. Удалено. Вычеркнуто.");
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписание(Ответственный)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	СписаниеЗапчастейТаблица.Ссылка КАК Ссылка,
				   |	СУММА(СписаниеЗапчастейТаблица.Количество) КАК товар
				   |ИЗ
				   |	Документ.СписаниеЗапчастей.Товары КАК СписаниеЗапчастейТаблица
				   |ГДЕ
				   |	 СписаниеЗапчастейТаблица.Ссылка.Ответственный = &Ответственный
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СписаниеЗапчастейТаблица.Ссылка
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	СписаниеЗапчастейТаблица.Ссылка.Дата УБЫВ";
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		выборка.Следующий();
		Если Выборка.товар < 100 Тогда
			Возврат Выборка.ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;

	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции


Функция ПолучитьРолиПользователейgetuserroles(Запрос)
	
	///+ГомзМА 23.07.2024
	ЗапросРолей = Новый Запрос;
	ЗапросРолей.Текст = "ВЫБРАТЬ
	|	ДолжностиДляУК.Ссылка КАК Ссылка,
	|	ДолжностиДляУК.Код КАК Код
	|ИЗ
	|	Справочник.ДолжностиДляУК КАК ДолжностиДляУК";
	
	Выборка = ЗапросРолей.Выполнить().Выбрать();
	МассивРолей = Новый Массив;
	Пока Выборка.Следующий() Цикл

		СтруктураРолей = Новый Структура;
		СтруктураРолей.Вставить("name", Строка(Выборка.Ссылка));
		СтруктураРолей.Вставить("id", Строка(Выборка.Код));

		МассивРолей.Добавить(СтруктураРолей);
		///-ГомзМА 22.03.2024
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивРолей);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
	///-ГомзМА 23.07.2024
	
КонецФункции

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

Функция текстДляЗаявки()
	Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Клиент КАК Клиент,
	|	ЗаказКлиента.Состояние КАК Состояние,
	|	ЗаказКлиента.Ответственный КАК Ответственный,
	|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
	|	ЗаказКлиента.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ЦенаОригинала КАК ЦенаОригинала,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		Отменено КАК Отменено,
	|		Склад КАК Склад,
	|		СуммаНДС КАК СуммаНДС,
	|		Комментарий КАК Комментарий,
	|		ПредлагаемаяЦена КАК ПредлагаемаяЦена,
	|		Партия КАК Партия,
	|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Товары.Партия) КАК Партия2,
	|		Номенклатура.Код КАК Код) КАК Товары,
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
	|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ЗаказКлиента.Комментарий КАК Комментарий,
	|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
	|	ЗаказКлиента.НомерПродажи
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция текстДляТовара()
	Текстзапроса = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	РегИндНомер.Состояние КАК Состояние,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	РегИндНомер.Ответственный КАК Учетчик,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
				   |	Номенклатура.Размеры КАК Размеры,
				   |	Номенклатура.Вес КАК Вес,
				   |	Номенклатура.выс КАК выс,
				   |	Номенклатура.длин КАК длин,
				   |	Номенклатура.шир КАК шир,
				   |РегистрНакопления1Остатки.КолвоОстаток Как Остаток,
				   |	РегИндНомер.индкод.Владелец.Код КАК Код,
				   |ВЫБОР
				   |Когда регистрНакопления1Остатки.КолвоОстаток > 0 Тогда
				   |""Есть в наличии""
				   |Иначе
				   |""Товар продан""
				   |
				   |КОНЕЦ КАК ФактНаличия
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		Левое СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
				   |		ПО ИндНомер.индкод.Владелец.Ссылка = Номенклатура.Ссылка
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |{ГДЕ
				   |	(РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Состояние КАК Состояние,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Учетчик КАК Учетчик,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
				   |	ВТ_данныеНоменклатур.ФактНаличия КАК ФактНаличия,
				   |ВТ_данныеНоменклатур.Остаток КАК Остаток,
				   |	ВТ_данныеНоменклатур.Код КАК Код,
				   |	ВТ_данныеНоменклатур.Размеры КАК Размеры,
				   |	ВТ_данныеНоменклатур.Вес КАК Вес,
				   |	ВТ_данныеНоменклатур.выс КАК выс,
				   |	ВТ_данныеНоменклатур.длин КАК длин,
				   |	ВТ_данныеНоменклатур.шир КАК шир
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";

	Возврат Текстзапроса;
КонецФункции

Функция текстРекомендуемоеМестоХранения()
	
	///+ГомзМА 20.05.2024
	Текстзапроса = "ВЫБРАТЬ
				   |	Номенклатура.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ВТ_Номенклатура
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.Код = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
				   |		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ 1
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_данныеНоменклатур.индкод) КАК Количество,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |СГРУППИРОВАТЬ ПО
				   |	ВТ_данныеНоменклатур.Адрес,
				   |	ВТ_данныеНоменклатур.Склад,
				   |	ВТ_данныеНоменклатур.Город,
				   |	ВТ_данныеНоменклатур.Поддон
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Количество УБЫВ";
	Возврат Текстзапроса;
	///-ГомзМА 20.05.2024

КонецФункции

Функция РедактироватьТовар(Индкод, Комментарий = Неопределено, Цена = Неопределено)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", индкод);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Нет такого'"));
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда

		НовыйНомер = НаборЗаписей[0];
		Если цена > 0 И цена <> Неопределено Тогда
			НовыйНомер.цена = цена;
		КонецЕсли;

		Если (комментарий <> " " Или комментарий <> "") И комментарий <> Неопределено Тогда
			НовыйНомер.комментарий = комментарий;
		КонецЕсли;
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Успех'"));
	КонецЕсли;

	НаборЗаписей.Записать();
	Возврат ответ;

КонецФункции

Функция ПолучитьФотографа(ИндКод)
	
	///+ГомзМА 21.02.2024 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "v1/product/" + ИндКод + "/last_date/tabnum";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");

		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("id", ИндКод);
		
		// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		//Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		Ответ = Соединение.Получить(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение

		Возврат Неопределено;
	КонецПопытки;
	///-ГомзМА 21.02.2024

КонецФункции

Функция РедактироватьПолку(Индкод, Место = Неопределено, Автор)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", Индкод);

	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;

	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		
		///+ГомзМА 31.01.2024
		Если СтрНайти(НаборЗаписей[0].Стеллаж, "Korzina") > 0 И СтрНайти(Место, "Korzina") > 0 Тогда
			Ответ = Новый HTTPСервисОтвет(415);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Невозможно переместить в корзину. Деталь находится у другого пользователя в "
				+ НаборЗаписей[0].Стеллаж);
			Возврат ответ;
		Иначе
			НовыйНомер = НаборЗаписей[0];
			Полка = Справочники.Стеллаж.НайтиПоНаименованию(место);
			Если Полка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
				Лог =  " сменил полку с " + НовыйНомер.Стеллаж + " на " + Полка;
				ЛогированиеИндНомера(НовыйНомер.индкод, Автор, Лог, Полка, , НовыйНомер.Стеллаж, НовыйНомер.Поддон);
				НовыйНомер.Стеллаж = Полка;
				НовыйНомер.Поддон = Справочники.Поддоны.ПустаяСсылка();

				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех");
				Если СтрНайти(Место, "Korzina") > 0 Тогда
					Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
					ТекстЛога = " Поместил в корзину " + Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Тележка",
						Полка)) + " " + Строка(Выборка.индкод.Владелец) + " с кодом " + индкод;
					//ИндКоды = Новый массив;
					//ИндКоды.Добавить(индкод);
					Фотки = ПолучениеФотоДляТелеги(индкод);
					НайденныеФотки = Фотки[0].urls;
					//ТекстЛога = ТекстЛога + Символы.ПС + НайденныеФотки[0];
					//@skip-check empty-except-statement
					Попытка
						Telegram_Сервер.ОтправитьКартинкуПользователю("-1001874958074", НайденныеФотки[0]);
					Исключение

					КонецПопытки;

					Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Автор) + ТекстЛога);
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЕсли;
			Возврат ответ;
		КонецЕсли;
		///-ГомзМА 31.01.2024

	Иначе
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Полка не найдена");
		Возврат ответ;

	КонецЕсли;
КонецФункции

Функция РедактироватьПоддон(Индкод, Место = Неопределено, Автор)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", Индкод);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда

		НовыйНомер = НаборЗаписей[0];
		Поддон = Справочники.Поддоны.НайтиПоНаименованию(место);
		Если Поддон <> Справочники.Поддоны.ПустаяСсылка() Тогда
			Лог =  " сменил поддон с " + НовыйНомер.поддон + " на " + Поддон;

			ЛогированиеИндНомера(Строка(НовыйНомер.индкод), Автор, Лог, Строка(Поддон.Стеллаж), Поддон,
				НовыйНомер.Стеллаж, НовыйНомер.поддон);

			НовыйНомер.поддон = Поддон;
			НовыйНомер.Стеллаж = Поддон.Стеллаж;

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
		Иначе
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Поддон не найден");
		КонецЕсли;
	КонецЕсли;

	НаборЗаписей.Записать();
	Возврат ответ;

КонецФункции

//@skip-check method-too-many-params
Процедура ЛогированиеИндНомера(Индкод, Автор, Лог, Стеллажж = Неопределено, Поддон = Неопределено,
	ПредСтеллаж = Неопределено, ПредПоддон = Неопределено)
	Авторец = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогИндНомера.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.индкод = Справочники.ИндКод.НайтиПоНаименованию(индкод);
	//@skip-check use-non-recommended-method
	МенеджерЗаписиЛога.дата = ТекущаяДата();
	//@skip-check use-non-recommended-method
	МенеджерЗаписиЛога.период = ТекущаяДата();
	Если Поддон <> Неопределено Тогда  
		//Поддон = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.Поддон  = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	Если Стеллажж <> Неопределено Тогда  
		//Стеллажж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.ПредыдущийСтеллаж = ПредСтеллаж;
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	МенеджерЗаписиЛога.Ответственный = Авторец;
	МенеджерЗаписиЛога.Текст = "--------------------------" + Символы.ПС + Авторец + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Функция ПолучитьДопРеквизиты(ИндКод)
	Запрос = Новый Запрос;
	Запрос.текст = "ВЫБРАТЬ
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.Поддон) КАК Поддон,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
				   |	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
				   |	РегИндНомер.индкод.Владелец.Вес КАК Вес,
				   |	РегИндНомер.индкод.Владелец.выс КАК выс,
				   |	РегИндНомер.индкод.Владелец.длин КАК длин,
				   |	РегИндНомер.индкод.Владелец.шир КАК шир,
				   |	РегИндНомер.Состояние
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО РегИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	РегИндНомер.индкод.наименование = &ИндКод";

	Запрос.УстановитьПараметр("ИндКод", ИндКод);
	Выборка = Запрос.Выполнить().Выбрать();
	ВЫборка.следующий();
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("cost", ВЫборка.Цена);
	СтруктураОтвета.Вставить("comment", Строка( ВЫборка.Комментарий));
	СтруктураОтвета.Вставить("place", Строка( ВЫборка.Адрес));
	СтруктураОтвета.Вставить("sklad", Строка( ВЫборка.Склад));
	СтруктураОтвета.Вставить("poddon", ВЫборка.Поддон);
	Возврат СтруктураОтвета;
КонецФункции
Функция ЕстьКириллица(ИсходнаяСтрока) Экспорт
	ИсходнаяСтрока=СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока) > 0 Тогда
		Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
//@skip-check use-non-recommended-method
			Если Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ПолучениеФото(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL());  
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		Для Каждого стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;
КонецФункции

Функция ПолучениеФотоДляТелеги(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v1/images?type=outlinks&ind_code=" + ИндКод;
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("id", ИндКод);
		//
		//
		//// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		//@skip-check module-unused-local-variable
		Для Каждого Стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;

КонецФункции

Функция текстДляНоменклатуры()
	Текстзапроса = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.DirectText ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
	|ГДЕ
	|	НЕ ИндНомер.Стеллаж В (&Стеллаж)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегистрНакопления1Остатки.Склад.Город КАК Город,
	|	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	|	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
	|	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
	|	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1,
	|	РегИндНомер.АвитоЧастник КАК АЧ
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.Город КАК Город,
	|	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
	|	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
	|	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
	|	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
	|	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1,
	|	ВТ_данныеНоменклатур.АЧ КАК АЧ
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";
	Возврат текстзапроса;

//текстзапроса ="ВЫБРАТЬ
//	|	Номенклатура.Ссылка КАК Ссылка
//	|ПОМЕСТИТЬ ВТ_Номенклатура
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.Directtext ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод КАК индкод
//	|ПОМЕСТИТЬ ВТ_предКоды
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|ГДЕ
//	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|
//	|ОБЪЕДИНИТЬ 
//	|
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|ГДЕ
//	|	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|
//	|ОБЪЕДИНИТЬ 
//	|
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|ГДЕ
//	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
//	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
//	|ГДЕ
//	|	НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
//	|	РегИндНомер.индкод КАК индкод,
//	|	ВЫБОР
//	|		КОГДА РегИндНомер.Цена > 0
//	|			ТОГДА РегИндНомер.Цена
//	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
//	|	КОНЕЦ КАК Цена,
//	|	РегИндНомер.Комментарий КАК Комментарий,
//	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
//	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
//	|	ВЫБОР
//	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
//	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
//	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
//	|	КОНЕЦ КАК Адрес,
//	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
//	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
//	|	РегИндНомер.Поддон КАК Поддон,
//	|	РегистрНакопления1Остатки.Склад.Город КАК Город,
//	|	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
//	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
//	|	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
//	|	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
//	|	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1
//	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
//	|ИЗ
//	|	ВТ_предКоды КАК ИндНомер
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
//	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
//	|		ПО ИндНомер.индкод = РегИндНомер.индкод
//	|ГДЕ
//	|	РегистрНакопления1Остатки.КолвоОстаток > 0
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ %1
//	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
//	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
//	|	ВТ_данныеНоменклатур.Цена КАК Цена,
//	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
//	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
//	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
//	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
//	|	ВТ_данныеНоменклатур.Склад КАК Склад,
//	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
//	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
//	|	ВТ_данныеНоменклатур.Город КАК Город,
//	|	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
//	|	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
//	|	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
//	|	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
//	|	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1
//	|ИЗ
//	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
//	|ГДЕ
//	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	НомерЗаписи" ; 
//	Возврат текстзапроса;
КонецФункции

Функция КоличествоТоваровВКорзине(Тележка)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИндНомер.индкод) КАК Количество,
				   |	ИндНомер.Стеллаж КАК Стеллаж
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж = &Стеллаж
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ИндНомер.Стеллаж";
	Запрос.УстановитьПараметр("Стеллаж", Тележка);
	Выборка = запрос.Выполнить().Выбрать();

	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция СформироватьСтруктуруОшибки(Message, Details)

	СтруктураОтвета = Новый Структура;
	//СтруктураОтвета.Вставить("code", Сode);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("details", Details);

	Возврат СтруктураОтвета;
КонецФункции

Функция текстДляПродажи()
	Текст = "ВЫБРАТЬ
			|	ПродажаЗапчастей.Номер КАК Номер,
			|	ПродажаЗапчастей.Ссылка КАК ссылка,
			|	ПродажаЗапчастей.Дата КАК Дата,
			|	ПродажаЗапчастей.Клиент КАК Клиент,
			|	ПродажаЗапчастей.ИтогоРекв КАК ИтогоРекв,
			|	ПродажаЗапчастей.КтоПродал КАК КтоПродал,
			|	ПродажаЗапчастей.Таблица.(
			|		Товар КАК Товар,
			|		Количество КАК Количество,
			|		Цена КАК Цена,
			|		Сумма КАК Сумма,
			|		Партия КАК Партия,
			|		ПРЕДСТАВЛЕНИЕ(ПродажаЗапчастей.Таблица.Партия) КАК Партия2,
			|		НомерСтроки КАК НомерСтроки,
			|		СтатусТовара КАК СтатусТовара,
			|		Товар.Код КАК Код,
			|		Отменено КАК Отменено,
			|		Товар.Артикул КАК Артикул,
			|		Склад КАК Склад
			|	) КАК Таблица,
			|	ПродажаЗапчастей.ЗаказКлиента КАК ЗаказКлиента,
			|	ПродажаЗапчастей.WTpanel КАК СтатусОбработки,
			|	Сотрудники.Код КАК Код,
			|	ПродажаЗапчастей.ОтветственныйКладовщик КАК ОтветственныйКладовщик,
			|	ПродажаЗапчастей.СтатусЗаказаВТК КАК СтатусЗаказаВТК,
			|	ПродажаЗапчастей.Клиент.Телефон КАК КлиентТелефон,
			|	ПродажаЗапчастей.ПодстатусОбработки КАК подСтатусОбработки,
			|	ПродажаЗапчастей.ЕстьТрекНомер КАК ЕстьТрекНомер,
			|	ПродажаЗапчастей.ТрекНомер КАК ТрекНомер,
			|	ПродажаЗапчастей.ТранспортнаяКомпания КАК ТранспортнаяКомпания
			|ИЗ
			|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ПродажаЗапчастей.ОтветственныйКладовщик = Сотрудники.Пользователь
			|ГДЕ
			|	ПродажаЗапчастей.Номер = &Номер";
	Возврат Текст;
КонецФункции
Функция ПолучитьМашину(ИндКодДетали)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	РегистрНакопления1.машина КАК машина
				   |ИЗ
				   |	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1
				   |ГДЕ
				   |	РегистрНакопления1.индкод = &индкод";
	Запрос.УстановитьПараметр("ИндКод", ИндКодДетали);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат выборка.машина;
КонецФункции

Процедура ЛогированиеWT10(Заявка, Автор, Лог)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогWT10.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.Источник = Заявка;
	МенеджерЗаписиЛога.Пользователь = Автор;
	МенеджерЗаписиЛога.Лог = "--------------------------" + Символы.ПС + Автор + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Функция ПроверкаПродаж(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	ПродажаЗапчастей.Ссылка КАК Ссылка
				   |ИЗ
				   |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
				   |ГДЕ
				   |	ПродажаЗапчастей.ЗаказКлиента = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

КонецФункции
Функция ПолучитьПоддон(Партия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.поддон КАК поддон
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.поддон;
КонецФункции

Функция ПолучитьМесто(Партия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.Стеллаж КАК Стеллаж
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.стеллаж;
КонецФункции

Функция получитьНомерТелефона(Юзер)

	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
				   |	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
				   |	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
				   |ИЗ
				   |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
				   |ГДЕ
				   |	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
				   |	И СотрудникиКонтактнаяИнформация.Ссылка.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Юзер);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат выборка.ТелефонСлужебный;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ПолучитьМенеджера(Код)
	Возврат Справочники.Пользователи.НайтиПоКоду(Код);
КонецФункции


Функция ЕстьНаКСкладе(Номенклатура)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""%K-%""
				   |			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО ""%К-%"")
				   |	И ИндНомер.индкод.Владелец = &Владелец
				   |	И РегистрНакопления1Остатки.КолвоОстаток > 0";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции
#КонецОбласти


Функция ВзятьЗаявкуtakeapp(Запрос)

	ЗапросЗаявки = Новый Запрос;
	ЗапросЗаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	ЗапросЗаявки.УстановитьПараметр("Номер", Массив.id);
	Выборка = ЗапросЗаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если ответственный = Неопределено Тогда
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	Пока выборка.Следующий() Цикл
	

		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗаявки.Ответственный = Ответственный;

		ОбъектЗаявки.Записать();
		ТекстЛога =  " Взял в работу: " + ОбъектЗаявки.Номер;
		ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога); 
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции
	
Функция	ТекстЗапросаПопулярныйТоварИзЗаявок()
//++ МазинЕС 24-07-2024
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Партия.Наименование КАК ПартияНаименование,
		|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
		|	ЗаказКлиента.Дата КАК Дата
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО (ЗаказКлиентаТовары.Ссылка = ЗаказКлиента.Ссылка)
		|ГДЕ
		|	ЗаказКлиента.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И ЗаказКлиентаТовары.Партия <> Значение(справочник.индкод.пустаяссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	ПартияНаименование";
	
	Период = ТекущаяДата(); 
	Запрос.УстановитьПараметр("Период", Период);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Счетчик = 1; 
	Пока ВыборкаДетальныеЗаписи.Количество() < 5 Цикл 
		Запрос.УстановитьПараметр("Период", Период - 87000*Счетчик);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Счетчик = Счетчик +1; 	
	КонецЦикла; 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивИндкод = Новый массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивИндкод.добавить (ВыборкаДетальныеЗаписи.ПартияНаименование);
	КонецЦикла;
	
	Фотки = ПолучениеФотоБезИндНомер(МассивИндкод); 
	
Возврат Фотки; 
//-- МазинЕС 24-07-2024	
КонецФункции
Функция ПолучениеФотоБезИндНомер(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL());  
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
		Иначе
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			ответ = Неопределено;
		КонецЕсли;
		Массив = Новый Массив; 
		// ++ 
		Для Каждого СтрокаОтвет ИЗ Ответ Цикл 
			Массив.Добавить(СтрокаОтвет.urls); 
		КонецЦикла; 
		 // --
		Возврат Массив;
	Исключение
		МассивПустыхФото = Новый массив;

		Для Каждого стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;
КонецФункции
Функция ПопулярныйТоварИзЗаявокPopularProduct(Запрос)
//++ МазинЕС 24-07-2024	
	Количество = Запрос.ПараметрыURL["count"];
	Страница = Запрос.ПараметрыURL["page"];
	Фотки = ТекстЗапросаПопулярныйТоварИзЗаявок();
	
	МассивФото = Новый массив; 

 	
	Для Каждого Строка Из Фотки Цикл 
		Для Каждого ЭлементМассива Из Строка Цикл
			Если ЭлементМассива <> 0 Тогда
				МассивФото.Добавить(ЭлементМассива);
			конецесли; 
		КонецЦикла; 
	КонецЦикла; 
	
	МассивФоткиФинальный = новый массив; 
	
	Сч = Количество*(Страница-1); 
	Пока Сч <= Количество * Страница Цикл 
		МассивФоткиФинальный.Добавить(МассивФото[Сч]);
		Сч = Сч +1; 
	конецЦикла; 
	
	КоличествоФоток = МассивФото.Количество(); 
	КоличествоСтраниц = Цел(КоличествоФоток / Количество);  
	
  
	СтруктураОтвет = Новый Структура();  
	

	
	СтруктураОтвет.Вставить("urls",МассивФоткиФинальный);
	СтруктураОтвет.Вставить("countUrls",КоличествоФоток);
	СтруктураОтвет.Вставить("countPage",КоличествоСтраниц);
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,СтруктураОтвет);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть(); 
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
//-- МазинЕС 24-07-2024	
КонецФункции
























