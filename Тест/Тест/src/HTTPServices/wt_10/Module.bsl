#Область ОбработчикиСобытий


Функция ВзятьЗаявкуtakeapp(Запрос)

	ЗапросЗаявки = Новый Запрос;
	ЗапросЗаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	ЗапросЗаявки.УстановитьПараметр("Номер", Массив.id);
	Выборка = ЗапросЗаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если ответственный = Неопределено Тогда
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	Пока выборка.Следующий() Цикл
	

		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗаявки.Ответственный = Ответственный;

		ОбъектЗаявки.Записать();
		ТекстЛога =  " Взял в работу: " + ОбъектЗаявки.Номер;
		ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога); 
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции

Функция ПопулярныйТоварИзЗаявокPopularProduct(Запрос)
//++ МазинЕС 24-07-2024	
	Количество = Запрос.ПараметрыURL["count"];
	Страница = Запрос.ПараметрыURL["page"];
	Фотки = ТекстЗапросаПопулярныйТоварИзЗаявок();
	МассивФото = Новый массив; 
	КоличествоФоток = 0; 
	
	// Удалил те индкода у которых нет фоток и подсчитал фотки +
	МссивТест = Новый массив; 
	Для Каждого Строка Из Фотки Цикл 
			Если Строка.urls.Количество() <> 0 Тогда
				Для каждого ЭлементМассива ИЗ Строка.urls Цикл  
					МссивТест.Добавить(Строка);
					КоличествоФоток = КоличествоФоток + 1;
					Прервать; 
				КонецЦикла;  
			КонецЕсли; 
	КонецЦикла; 
	// Удалил те индкода у которых нет фоток -
	
	Счетчик =0;
	Нач = Количество*(Страница-1) ;
	Кон = Количество*Страница -1 ;
	МассивФото = Новый Массив; 
	Для Каждого Строка Из МссивТест Цикл 
	
			Для Каждого ЭлементМассива Из Строка.urls Цикл 
				Если (Счетчик >= Нач) И (Счетчик <= Кон) Тогда
					Структура = Новый Структура("id,url");
					Структура.Вставить("url",ЭлементМассива);
					Структура.Вставить("id",Строка.indCode);
					МассивФото.Добавить(Структура);
					Прервать;   
				Иначе Прервать; 
				КонецЕсли; 					 		 
			конецЦикла;
	Счетчик = Счетчик+1;	 
		
//	МассивФото.Добавить(Структура);
	
	Если  Счетчик <= Кон Тогда 
	Иначе Прервать; 
	КонецЕсли; 
		
	КонецЦикла; 	
	
	КоличествоСтраницЦел = Цел(КоличествоФоток / Количество); 
	КоличествоСтраницНеЦел = КоличествоФоток / Количество;
	
	Если  КоличествоСтраницЦел < КоличествоСтраницНеЦел Тогда  
		КоличествоСтраниц = КоличествоСтраницЦел + 1;
	Иначе 
		КоличествоСтраниц = КоличествоСтраницЦел; 
	КонецЕсли;   
	
	СтруктураОтвет = Новый Соответствие();  
	СтруктураОтвет.Вставить("products",МассивФото);
	СтруктураОтвет.Вставить("count",КоличествоФоток);
	СтруктураОтвет.Вставить("page",КоличествоСтраниц);
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,СтруктураОтвет);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть(); 
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
//-- МазинЕС 24-07-2024	
КонецФункции

Функция ПолучитьТоварыКарточкиproductscard(Запрос)
ЗапросТовара = Новый Запрос;
	Текстзапроса = "ВЫБРАТЬ первые 10000
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегистрНакопления1Остатки.Склад.Город КАК Город,
	|	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	|	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
	|	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
	|	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	Справочник.Номенклатура КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|			ПО РегИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ПО ИндНомер.Ссылка = РегИндНомер.Индкод.Владелец
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|И РегИндНомер.АвитоЧастник
	|	И ИндНомер.Код = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.Город КАК Город,
	|	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
	|	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
	|	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
	|	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
	|	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";


			
	ИндКод = Строка(Запрос.ПараметрыURL["id"]);
	запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", ИндКод);

	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();

	запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", ИндКод);

	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;

	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;

	Для Каждого стр Из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		Итер = итер + 1;
		тз.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		//СтруктураТоваров.Вставить("search", Строка(стр.СтрокаПоиска));
		//СтруктураТоваров.Вставить("search1", Строка(стр.СтрокаПоиска1));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", стр.Цена);
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("code", Строка(стр.Код));
		СтруктураТоваров.Вставить("type", "PRODUCT");
		//СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
		//СтруктураТоваров.Вставить("stack", стр.Комплектация);

		СтруктураТоваров.Вставить("city", Строка(стр.Город));

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);
//	Если Лев(Запрос.ПараметрыURL["id"],1) = "П" Тогда
//		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["id"])))); 
//		//	Иначе
//		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
//	КонецЕсли;
//	

	СтруктураОтвета = Новый Структура;
	//СтруктураОтвета.Вставить("info", СтруктураИнфо);
		СтруктураОтвета.Вставить("pages", Итог);
	СтруктураОтвета.Вставить("count", Выборкаобщ);
	СтруктураОтвета.Вставить("products", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ПулучитьДанныеПользователя(Запрос)

Пользователь = Строка(Запрос.ПараметрыURL["user"]);
Код = Строка(Запрос.ПараметрыURL["id"]);

Если Пользователь = "client" Тогда 

	ЗапросКлиенты = Новый Запрос;
	ЗапросКлиенты.Текст =
	"ВЫБРАТЬ
	|	Клиенты.Код КАК Код,
	|	Клиенты.Наименование КАК Наименование,
	|	Клиенты.Телефон КАК Телефон,
	|	Клиенты.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Код = &Код";

	
	ЗапросКлиенты.УстановитьПараметр("Код", Код);

	РезультатЗапроса = ЗапросКлиенты.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураОтвета = Новый Структура; 
		СтруктураОтвета.Вставить ("id",ВыборкаДетальныеЗаписи.Код);
		СтруктураОтвета.Вставить ("name",ВыборкаДетальныеЗаписи.Наименование);
		СтруктураОтвета.Вставить ("phone",ВыборкаДетальныеЗаписи.Телефон);
		СтруктураОтвета.Вставить ("date",ВыборкаДетальныеЗаписи.ДатаСоздания);
	КонецЦикла;

ЗаписьJSON = Новый ЗаписьJSON;
ЗаписьJSON.УстановитьСтроку();
ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
СтрокаДляОтвета = ЗаписьJSON.Закрыть();

Ответ = Новый HTTPСервисОтвет(200);
Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

Возврат Ответ;
ИначеЕсли  Пользователь = "worker" Тогда


ЗапросСотрудниик = Новый Запрос;
ЗапросСотрудниик.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ Служебный_телефон
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|		ПО (Сотрудники.Ссылка = СотрудникиКонтактнаяИнформация.Ссылка)
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ Личный_телефон
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|		ПО Сотрудники.Ссылка = СотрудникиКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	Сотрудники.Наименование КАК Наименование,
	|	Личный_телефон.Представление КАК ЛичныйТелефон,
	|	Служебный_телефон.Представление КАК СлужебныйТелефон
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Служебный_телефон КАК Служебный_телефон
	|		ПО (Служебный_телефон.Код = Сотрудники.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Личный_телефон КАК Личный_телефон
	|		ПО (Личный_телефон.Код = Сотрудники.Код)
	|ГДЕ
	|	Сотрудники.Код = &Код";
	
	ЗапросСотрудниик.УстановитьПараметр("Код", Код);
	РезультатЗапроса = ЗапросСотрудниик.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураОтвета = Новый Структура; 
		СтруктураОтвета.Вставить ("id",ВыборкаДетальныеЗаписи.Код);
		СтруктураОтвета.Вставить ("name",ВыборкаДетальныеЗаписи.Наименование);
		Если ВыборкаДетальныеЗаписи.СлужебныйТелефон <> NULL Тогда 
		СтруктураОтвета.Вставить ("officephone ",ВыборкаДетальныеЗаписи.СлужебныйТелефон);
		иначе СтруктураОтвета.Вставить ("officephone ","Нет номера");
		КонецЕсли; 
		Если ВыборкаДетальныеЗаписи.ЛичныйТелефон <> NULL Тогда 
		СтруктураОтвета.Вставить ("personalphone",ВыборкаДетальныеЗаписи.ЛичныйТелефон);
		иначе СтруктураОтвета.Вставить ("personalphone ","Нет номера");
		КонецЕсли; 
	КонецЦикла;

ЗаписьJSON = Новый ЗаписьJSON;
ЗаписьJSON.УстановитьСтроку();
ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
СтрокаДляОтвета = ЗаписьJSON.Закрыть();

Ответ = Новый HTTPСервисОтвет(200);
Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

Возврат Ответ;

КонецЕсли; 

КонецФункции



Функция ИзменитьКарточкуТовараИзменитьКаротчкуТовара(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
 	ЧтениеJSON = Новый ЧтениеJSON;
 	ЧтениеJSON.УстановитьСтроку(Тело);

	ТелоСоответствия = ПрочитатьJSON(ЧтениеJSON,Истина);		
	
	КодКарточки = ТелоСоответствия["id_card"]; 
	КодСотрудника = ТелоСоответствия["id_worker"];
	НаименованиеКарточки = ТелоСоответствия["name"]; 
	ЦенаКарточки = Число(ТелоСоответствия["price"]);

	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Наименование КАК Наименование,
		|	Номенклатура.РекомендованаяЦена КАК РекЦена
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", КодКарточки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоменклатураСсылка 			= ВыборкаДетальныеЗаписи.Ссылка;
			НоменклатураРекЦена 		= ВыборкаДетальныеЗаписи.РекЦена;
			СтароеНазвание 	= ВыборкаДетальныеЗаписи.Наименование; 
		КонецЦикла;
	 
		
	Если ВыборкаДетальныеЗаписи.Количество() = 0 тогда 	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Ненайдена катрочка товара",
		Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
	Возврат Ответ;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Пользователь КАК СсылкаПользователь,
		|	Сотрудники.Ссылка КАК СсылкаСотрудник 
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", КодСотрудника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи1 = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
		СсылкаПользователь	= ВыборкаДетальныеЗаписи1.СсылкаПользователь; 
		СсылкаСотрудник 	= ВыборкаДетальныеЗаписи1.СсылкаСотрудник;
	КонецЦикла;
		
	Если ВыборкаДетальныеЗаписи1.Количество() = 0 тогда 	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Не найден сотрудник",
		Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
	Возврат Ответ;
	
	
	
	КонецЕсли;
	
	Если  	НоменклатураРекЦена <> ЦенаКарточки И СтароеНазвание <> НаименованиеКарточки Тогда 
			ОбъектНоменклатура = НоменклатураСсылка.ПолучитьОбъект();
			ОбъектНоменклатура.РекомендованаяЦена = ЦенаКарточки;  
			ОбъектНоменклатура.Наименование = НаименованиеКарточки; 
			ОбъектНоменклатура.Лог = ОбъектНоменклатура.Лог + Символы.ПС + Формат(ТекущаяДата(), "ДЛФ=DD;") + " "
			+ СсылкаСотрудник + " изменил наименование с " + """" + СтароеНазвание + """" + ", " + "на " + """" + НаименованиеКарточки + """" 
			+ " изменил цену с " + """" + НоменклатураРекЦена + """" + ", " + "на " + """" + ЦенаКарточки + """" +  "."
			+ Символы.ПС
			+ "--------------------------------------------------------------------------------------------------------------------------";
		 	ОбъектНоменклатура.Записать();
		 	 
	ИначеЕсли НоменклатураРекЦена <> ЦенаКарточки Тогда 
		 	ОбъектНоменклатура = НоменклатураСсылка.ПолучитьОбъект();
			ОбъектНоменклатура.РекомендованаяЦена = ЦенаКарточки;  
			ОбъектНоменклатура.Лог = ОбъектНоменклатура.Лог + Символы.ПС + Формат(ТекущаяДата(), "ДЛФ=DD;") + " "
			+ СсылкаСотрудник  + " изменил цену с " + """" + НоменклатураРекЦена + """" + ", " + "на " + """" + ЦенаКарточки + """" +  "."
			+ Символы.ПС
			+ "--------------------------------------------------------------------------------------------------------------------------";
		 	ОбъектНоменклатура.Записать();
		 	// Меняем цену в документе "УстановкаЦенноменклатуры"
			ДокУстановкЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент(); 
			ДокУстановкЦен.Ответственный = СсылкаПользователь;
			ДокУстановкЦен.ТипЦен = Справочники.ТипыЦен.НайтиПоКоду("000000004"); 
			ДокУстановкЦен.Дата = ТекущаяДата();
			СтрокаТовары = ДокУстановкЦен.Товары.Добавить(); 
			СтрокаТовары.Номенклатура = НоменклатураСсылка; 
			СтрокаТовары.Цена = ЦенаКарточки; 
			ДокУстановкЦен.Записать(РежимЗаписиДокумента.Проведение);
	ИначеЕсли СтароеНазвание <> НаименованиеКарточки Тогда  	
			ОбъектНоменклатура = НоменклатураСсылка.ПолучитьОбъект();
			ОбъектНоменклатура.Наименование = НаименованиеКарточки; 
			ОбъектНоменклатура.Лог = ОбъектНоменклатура.Лог + Символы.ПС + Формат(ТекущаяДата(), "ДЛФ=DD;") + " "
			+ СсылкаСотрудник + " изменил наименование с " + """" + СтароеНазвание + """" + ", " + "на " + """" + НаименованиеКарточки + """" 
			+ Символы.ПС
			+ "--------------------------------------------------------------------------------------------------------------------------";
		 	ОбъектНоменклатура.Записать();
 	
	КонецЕсли; 
	
	
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции





Функция СменаСтатусаЗаявкиChangeApplicationFinStatus(Запрос)
	Номерзаявки = Строка(Запрос.ПараметрыURL["id"]);
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер", Номерзаявки);

	Выборка = Запросзаявки.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Заявка не найдена");
		Возврат Ответ;
	КонецЕсли;

	Выборка.Следующий();
	ОбъектЗаявки = Выборка.Ссылка.ПолучитьОбъект();

	Статус = Число(Запрос.ПараметрыURL["status"]);

	Если Статус = 1 Тогда
		ОбъектЗаявки.ФинансовыеСтатусы = Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.ЖдемДенег;
		ОбъектЗаявки.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Ждем денег.");
	ИначеЕсли Статус = 2 Тогда
		ОбъектЗаявки.ФинансовыеСтатусы = Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.ЧастичноОплачено;
		ОбъектЗаявки.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Частично Оплачено.");
	ИначеЕсли Статус = 3 Тогда
		ОбъектЗаявки.ФинансовыеСтатусы = Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.Оплачено;
		ОбъектЗаявки.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Оплачено.");

	ИначеЕсли Статус = 4 Тогда
		ОбъектЗаявки.ФинансовыеСтатусы = Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.НеБудетОплачено;
		ОбъектЗаявки.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Не Будет Оплачено.");

	ИначеЕсли Статус = 5 Тогда
		ОбъектЗаявки.ФинансовыеСтатусы = Перечисления.ФинансовыеСтатусыДляЗаявкиКлиента.НеОплачено;
		ОбъектЗаявки.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Не Оплачено.");
		ОбъектЗаявки.Записать();
	Иначе
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого статуса.");
	КонецЕсли;

	Возврат Ответ;
КонецФункции



Функция СменаСтатусаДействияЗаявкиChangeApplicationActionStatus(Запрос)
	Номерзаявки = Строка(Запрос.ПараметрыURL["id"]);
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер", Номерзаявки);

	Выборка = Запросзаявки.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Заявка не найдена");
		Возврат Ответ;
	КонецЕсли;

	Выборка.Следующий();
	ОбъектЗаявки = Выборка.Ссылка.ПолучитьОбъект();

	Статус = Число(Запрос.ПараметрыURL["status"]);

	Если Статус = 1 Тогда
		ОбъектЗаявки.СтатусыДействия = Перечисления.дт_СостоянияЗаказовКлиента.Ожидание;
		ОбъектЗаявки.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Ожидание.");
	ИначеЕсли Статус = 2 Тогда
		ОбъектЗаявки.СтатусыДействия = Перечисления.дт_СостоянияЗаказовКлиента.Думает;
		ОбъектЗаявки.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Думает.");
	ИначеЕсли Статус = 3 Тогда
		ОбъектЗаявки.СтатусыДействия = Перечисления.дт_СостоянияЗаказовКлиента.Отказ;
		ОбъектЗаявки.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Отказ.");

	ИначеЕсли Статус = 4 Тогда
		ОбъектЗаявки.СтатусыДействия = Перечисления.дт_СостоянияЗаказовКлиента.Спам;
		ОбъектЗаявки.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Спам.");

	ИначеЕсли Статус = 5 Тогда
		ОбъектЗаявки.СтатусыДействия = Перечисления.дт_СостоянияЗаказовКлиента.НетВНаличии;
		ОбъектЗаявки.Записать();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех. Нет В Наличии.");
		ОбъектЗаявки.Записать();
	Иначе
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого статуса.");
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Функция ПолучитьПоследнийУчтенныйТоварGetLastCountedProducts(Запрос)
	/// Комлев 31/07/24 +++
	ЗапросУчтенногоТовара = Новый Запрос;

	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПоступлениеЗапчастейТаблица.Товар КАК Товар,
	|	ПоступлениеЗапчастейТаблица.Ответственный КАК Ответственный,
	|	ПоступлениеЗапчастейТаблица.Ссылка.Дата КАК Дата,
	|	ПоступлениеЗапчастейТаблица.Товар.Код КАК ТоварКод,
	|	ПоступлениеЗапчастейТаблица.Партия КАК Партия
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.ПоступлениеЗапчастей.Таблица КАК ПоступлениеЗапчастейТаблица
	|ГДЕ
	|	ПоступлениеЗапчастейТаблица.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияПоступленияЗапчастей.Выполнено)
	|	И ПоступлениеЗапчастейТаблица.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ответственный КАК Ответственный,
	|	ВТ.Дата КАК Дата,
	|	ВТ.ТоварКод КАК ТоварКод,
	|	ВТ.Партия КАК Партия,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|ПОМЕСТИТЬ ТоварыСНомерами
	|ИЗ
	|	ВТ КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ТоварыСНомерами.Ответственный КАК Ответственный,
	|	ТоварыСНомерами.Дата КАК Дата,
	|	ТоварыСНомерами.ТоварКод КАК ТоварКод,
	|	ТоварыСНомерами.Партия КАК Партия,
	|	ТоварыСНомерами.НомерЗаписи КАК НомерЗаписи
	|ИЗ
	|	ТоварыСНомерами КАК ТоварыСНомерами
	|ГДЕ
	|	ТоварыСНомерами.НомерЗаписи >= &НачинаяСЗаписи";
				   
	
	
	
	////////////////////////////////////////////////////////////////////////////
	КоличествоНаСтранице = Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0, Число(Запрос.ПараметрыURL["count"]),
		1000), "ЧГ=");
	ЗапросУчтенногоТовара.Текст = СтрШаблон(ТекстЗапроса, КоличествоНаСтранице);

	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		ЗапросУчтенногоТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		ЗапросУчтенногоТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	Выборка = ЗапросУчтенногоТовара.Выполнить().Выбрать();

	

	МассивОтвета = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивПартий = Новый Массив;
		
		
		МассивПартий.Добавить(Строка(Выборка.Партия));
		
		МассивФото = ПолучениеФото(МассивПартий);
		СтруктураКарточки = Новый Структура;
		СтруктураРаботник = Новый Структура;
		СтруктураКарточки.Вставить("id", Строка(Выборка.Партия));
		СтруктураКарточки.Вставить("date", Формат(Выборка.Дата, "ДФ=dd.MM.yyyy;"));
		//@skip-check query-in-loop
		СтруктураРаботник.Вставить("id", ПолучитьКодСотрудника(Строка(Выборка.Ответственный)));
		СтруктураРаботник.Вставить("name", Строка(Выборка.Ответственный));
		СтруктураКарточки.Вставить("worker", СтруктураРаботник);
		Если МассивФото[0].urls.Количество() <> 0 Тогда
			СтруктураКарточки.Вставить("photo", Строка(МассивФото[0].urls[0]));
		Иначе
			Продолжить;
		КонецЕсли;
		

		МассивОтвета.Добавить(СтруктураКарточки);

	КонецЦикла;

	ОбщКоличество = 1000;
	Попытка
	КоличествоСтраниц = Окр(ОбщКоличество / Число(Запрос.ПараметрыURL["count"]) + 0.5, 0, 0);
	Исключение
		КоличествоСтраниц = 1;
	КонецПопытки;
	СтруктураОтветаОбщ = Новый Структура;
	СтруктураОтветаОбщ.Вставить("count", ОбщКоличество);
	СтруктураОтветаОбщ.Вставить("page", КоличествоСтраниц);
	СтруктураОтветаОбщ.Вставить("products", МассивОтвета);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтветаОбщ);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
	Возврат Ответ;
	
	/// Комлев 31/07/24 ---
КонецФункции

Функция ИзменитьДанныеСотрудникаChahgeEmployeeData(Запрос)
	/// +++ Комлев 01/08/24 +++
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	ТелоЗапроса = ПрочитатьJSON(ЧтениеJSON);

	Сотрудник = ТелоЗапроса.id;
	НомерТелефона = ТелоЗапроса.phone_number;
	Организация = ТелоЗапроса.organization;
	Город = ТелоЗапроса.city;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Код = &Код";

	Запрос.УстановитьПараметр("Код", Сотрудник);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Сотрудник не найден.");
		Возврат Ответ;
	КонецЕсли;
	РезультатЗапроса.Следующий();
	СотрудникОбъект = РезультатЗапроса.Ссылка;
	
	строка = Строка(РезультатЗапроса.Ссылка);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, строка);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
	Возврат Ответ;
	
	/// --- Комлев 01/08/24 ---
КонецФункции

Функция ОтправитьСМСsendSMS(Запрос)
	
	//Сергеев Ф.В. ++ Дата: 16.05.2024

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);



	ТекстСообщения = Массив.message;

	НомерТелефона = Массив.phone;
	//Попытка
		дт_УведомленияСМС.ОтправитьСМС(НомерТелефона, ТекстСообщения, Константы.дт_SMS_Подпись.Получить());

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех");
		Возврат Ответ;
//	Исключение
//		Ответ = Новый HTTPСервисОтвет(401);
//		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//		Ответ.УстановитьТелоИзСтроки(СформироватьОтветСтруктурой(Ложь, "Сообщение успешно НЕ отправлено!", ,
//			СформироватьСтруктуруОшибки( "Скорее всего беда с инетом", "ХЗ")));
//		Возврат Ответ;
//	КонецПопытки;
	//Сергеев Ф.В. -- Дата: 16.05.2024

КонецФункции

Функция ПолучитьСписокОрганизацийlistorganizations(Запрос)

	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	Организация.Код КАК Код,
				   |	Организация.Наименование КАК Наименование
				   |ИЗ
				   |	Справочник.Организация КАК Организация
				   |ГДЕ
				   |	Не Организация.ПометкаУдаления ";
	Выборка = запрос.Выполнить().Выбрать();
	Выборкаобщ = Выборка.Количество();

	МассивОрганизаций = Новый Массив;
	Пока выборка.Следующий() Цикл
		Структураорганизации = Новый Структура;
		Структураорганизации.Вставить("name", Строка(выборка.Наименование));
		Структураорганизации.Вставить("id", Строка(выборка.Код));

		МассивОрганизаций.Добавить(Структураорганизации);
	КонецЦикла;

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("count", Выборкаобщ);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивОрганизаций);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, МассивОрганизаций);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

КонецФункции

Функция ПолучитьСписокСчетовlistaccounts(Запрос)

	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	Счета.Наименование КАК Наименование,
				   |	Счета.Код КАК Код
				   |ИЗ
				   |	Справочник.TipOplati КАК Счета
				   |ГДЕ
				   |	НЕ Счета.ПометкаУдаления";
	Выборка = запрос.Выполнить().Выбрать();
	Выборкаобщ = Выборка.Количество();

	МассивСчетов = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураСчёта = Новый Структура;
		СтруктураСчёта.Вставить("name", Строка(выборка.Наименование));
		СтруктураСчёта.Вставить("id", Строка(выборка.Код));
		//СтруктураСчёта.Вставить("Org",Строка(выборка.Владелец));
		МассивСчетов.Добавить(СтруктураСчёта);
	КонецЦикла;

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("count", Выборкаобщ);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивСчетов);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, МассивСчетов);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

КонецФункции

Функция ГлобальноВыдатьПродажуglobalissueasale(Запрос)
	
	НомерЗаявки = Запрос.ПараметрыURL["id"];
	НомерПродажи = ПолучитьПродажуЧерезЗаявку(НомерЗаявки);

	Если НомерПродажи <> "" Тогда
		ЗапросПродажи = Новый Запрос;
		запросПродажи.Текст = текстДляПродажи();
		запросПродажи.УстановитьПараметр("Номер", НомерПродажи);
		Выборка = запросПродажи.Выполнить().Выбрать();

		Структураответа = Новый структура;

		Тело = Запрос.ПолучитьТелоКакстроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Тело);

		Массив  = ПрочитатьJSON(ЧтениеJSON);
		Выдано = 0;
		ИндКод  = Массив.id;
		Автор 	= Массив.author;
		Партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);

		Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		автор = Массив.author;

		Отбор = Новый Структура;
		Отбор.Вставить("Товар", Номенклатура);
		Отбор.Вставить("Партия", партия);
		Попытка
			Пока выборка.Следующий() Цикл
				ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();
				//ОбъектПродажи =Документы.ПродажаЗапчастей.НайтиПоНомеру().ПолучитьОбъект();
				//ОбъектПродажи.
				НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);

				Если НайденныеСтроки.количество() > 0 Тогда

					Позиция = НайденныеСтроки[0].НомерСтроки;

					ОбъектПродажи.датаСписания = ТекущаяДата();
					СтрокаТЧ = ОбъектПродажи.Таблица[Позиция - 1];
					СтрокаТЧ.статусТовара = Истина;
					СтрокаТЧ.ДатаВыдачи = ТекущаяДата();
					СтрокаТЧ.ОтветственныйЗаВыдачу = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
					ТекстЛога =  " В продаже: " + ОбъектПродажи.номер + " выдан товар " + СтрокаТЧ.Товар + " "
						+ СтрокаТЧ.Партия;
					ЛогированиеWT10(ОбъектПродажи.ссылка, Автор, ТекстЛога);
					Если СтрокаТЧ.Склад = Справочники.Склады.ПустаяСсылка() Или ОбъектПродажи.таблица[Позиция - 1].Склад
						= Неопределено Тогда
						СтрокаТЧ.Склад = ОбъектПродажи.склад;
					КонецЕсли;
				//выдано = выдано +1; 
				//КонецЦикла;
					Товары = Выборка.Таблица.Выбрать();
					Пока товары.Следующий() Цикл
						Если товары.СтатусТовара И Не товары.Отменено Тогда
							выдано = 1;
						КонецЕсли;

					КонецЦикла;

					Если выдано = 0 Тогда
					//Заказ = Выборка.ЗаказКлиента.ПолучитьОбъект();
						ОбъектПродажи.СтатусОбработки =  Перечисления.СтатусыОбработкиЗаявок.Упаковывается;
					////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада"); 
					//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(ОбъектПродажи.КтоПродал), "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада");
						ОбъектПродажи.ОтветственныйКладовщик = Справочники.Пользователи.ПустаяСсылка();
					//ОбъектПродажи.записать();  
					КонецЕсли;

					ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " выдал товар " + ОбъектПродажи.таблица[Позиция
						- 1].Товар + " " + ОбъектПродажи.таблица[Позиция - 1].Партия;
					ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
					ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);

					Структураответа.Вставить("res", "Успех. Выдан товар " + строка(СтрокаТЧ.Товар));
					ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
					СтрокаДляОтвета = ЗаписьJSON.Закрыть();

					Ответ = Новый HTTPСервисОтвет(200);
					Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8,
						ИспользованиеByteOrderMark.НеИспользовать);
					Возврат Ответ;

				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("Товар", Номенклатура);
					Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
					НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);
					Если НайденныеСтроки.количество() > 0 Тогда
						СтрокаТЧ = ОбъектПродажи.Таблица[НайденныеСтроки[0].НомерСтроки - 1]; 
				//СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
						СтрокаТЧ.партия = партия; 
				//@skip-check query-in-loop
						СтрокаТЧ.машина = ПолучитьМашину(партия);
						СтрокаТЧ.Склад = ОбъектПродажи.склад;
						СтрокаТЧ.СтатусТовара = Истина;
						СтрокаТЧ.ДатаВыдачи = ТекущаяДата();
						СтрокаТЧ.ОтветственныйЗаВыдачу = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;

						ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " установил партию в товаре "
							+ СтрокаТЧ.Товар + " " + СтрокаТЧ.Партия;
						ЛогированиеWT10(Выборка.ссылка, Автор, ТекстЛога);
						ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);

						Структураответа.Вставить("res", "Успех. Партия установлена для " + строка(СтрокаТЧ.Товар)
							+ " и выдана!");
				//Структураответа.Вставить("res","Такого товара нет в продаже!");
						ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
						СтрокаДляОтвета = ЗаписьJSON.Закрыть();
						Ответ = Новый HTTPСервисОтвет(200);
						Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
						Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8,
							ИспользованиеByteOrderMark.НеИспользовать);
						Возврат Ответ;
					Иначе
						ЗаписьJSON = Новый ЗаписьJSON;
						ЗаписьJSON.УстановитьСтроку();
		
		Информация = ИнформацияОбОшибке();

						ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Товар не найден в продаже",
							Информация.Описание));
						СтрокаДляОтвета = ЗаписьJSON.Закрыть();

						Ответ = Новый HTTPСервисОтвет(500);
						Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

						Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
						Возврат Ответ;
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		Исключение
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();

			Информация = ИнформацияОбОшибке();

			ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Ошибка при вызове метода контекста (Выполнить)",
				Информация.Описание));
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();

			Ответ = Новый HTTPСервисОтвет(500);
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

			Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
			Возврат Ответ;
		КонецПопытки;
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		Информация = ИнформацияОбОшибке();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Продажа не найдена, необходимо создать ее!",
			Информация.Описание));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьКарточкуТовараgetcardproduct(Запрос)
	ЗапросКарточки = Новый Запрос;
	ЗапросКарточки.Текст = "ВЫБРАТЬ
						   |	Номенклатура.Код КАК Код,
						   |	Номенклатура.Наименование КАК Наименование,
						   |	Номенклатура.Артикул КАК Артикул,
						   |	Номенклатура.Бренд КАК Бренд,
						   |	Номенклатура.Категория КАК Категория,
						   |	Номенклатура.КтоСоздал КАК КтоСоздал,
						   |	Номенклатура.МестоНаСкладе2 КАК МестоНаСкладе2,
						   |	Номенклатура.Производитель КАК Производитель,
						   |	Номенклатура.Состояние КАК Состояние,
						   |	Номенклатура.Серия КАК Серия,
						   |	Номенклатура.РекомендуемоеМестоХранения КАК РекомендуемоеМестоХранения,
						   | 	Номенклатура.НомерПроизводителя КАК НомерПроизводителя,
						   |   Номенклатура.РекомендованаяЦена КАК РекомендованаяЦена
						   | Из
						   |	Справочник.Номенклатура КАК Номенклатура
						   |ГДЕ
						   |	Номенклатура.Код = &Код";
	ЗапросКарточки.УстановитьПараметр("Код", Запрос.ПараметрыURL["id"]);
	Выборка = ЗапросКарточки.Выполнить().Выбрать();
	//МассивКарточки = Новый Массив;

	Пока выборка.Следующий() Цикл

		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("id", Строка(выборка.Код));
		СтруктураИнфо.Вставить("article", Строка(выборка.Артикул));
		СтруктураИнфо.Вставить("name", Строка(выборка.Наименование));
		//СтруктураИнфо.Вставить("brend", Строка(выборка.Бренд));
		//СтруктураИнфо.Вставить("category", Строка(выборка.Категория));
		//СтруктураИнфо.Вставить("creator", Строка(выборка.Производитель));
		//СтруктураИнфо.Вставить("number_creator", Строка(выборка.НомерПроизводителя));
		СтруктураИнфо.Вставить("state", Строка(Выборка.Состояние));
		СтруктураИнфо.Вставить("series", Строка(Выборка.Серия));
		СтруктураИнфо.Вставить("type", "CARD_PRODUCT");
		//СтруктураИнфо.Вставить("place", Строка(Выборка.МестоНаСкладе2));
		//СтруктураИнфо.Вставить("author", Строка(Выборка.КтоСоздал));
		СтруктураИнфо.Вставить("price", Выборка.РекомендованаяЦена);
	
//		Пока Лев(Код, 1) = "0" Цикл
//			Код = Прав(Код, СтрДлина(Код) - 1);
//		КонецЦикла;
//		Код = "0" + код;

		ИндКоды =  Новый массив;
		ИндКоды.Добавить(выборка.Код);

		Попытка
		Попытка
			Фотки = ПолучениеФотокарточек(ИндКоды);
			НайденныеФотки = Фотки[0].images.common;
			Если Фотки[0].images.main <> "" Тогда
				НайденныеФотки.Вставить(0, Фотки[0].images.main);
			КонецЕсли;
		Исключение
			НайденныеФотки = Новый массив;
		КонецПопытки;
			МассивФото = Новый массив;

			Текст = НайденныеФотки;
			Если НайденныеФотки <> Неопределено И НайденныеФотки <> "" Тогда
			
		//	стр.колфото = 1;  

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
			КонецЕсли;
			
			Исключение
			МассивФото.Добавить("");	
			КонецПопытки;

		СтруктураИнфо.Вставить("photos", НайденныеФотки);

	КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	
	
	//СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	////СтруктураОтвета.Вставить("data",МассивТоваров);
	//
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ПолучитьАвторизациюAuthorization(Запрос)
	ЗапросСотрудника = Новый запрос;
	ЗапросСотрудника.Текст = "ВЫБРАТЬ
							 |	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
							 |	ДолжностиСотрудниковСрезПоследних.Организация КАК Организация,
							 |	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
							 |	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
							 |	ДолжностиСотрудниковСрезПоследних.ТипДоговора КАК ТипДоговора,
							 |	ДолжностиСотрудниковСрезПоследних.Период КАК Период
							 |ПОМЕСТИТЬ втДолжности
							 |ИЗ
							 |	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
							 |
							 |ИНДЕКСИРОВАТЬ ПО
							 |	Сотрудник,
							 |	Организация,
							 |	Подразделение,
							 |	Должность,
							 |	ТипДоговора,
							 |	Период
							 |;
							 |
							 |////////////////////////////////////////////////////////////////////////////////
							 |ВЫБРАТЬ
							 |	втДолжности.Сотрудник КАК Сотрудник,
							 |	МАКСИМУМ(втДолжности.Период) КАК Период
							 |ПОМЕСТИТЬ втДолжностиПериоды
							 |ИЗ
							 |	втДолжности КАК втДолжности
							 |СГРУППИРОВАТЬ ПО
							 |	втДолжности.Сотрудник
							 |
							 |ИНДЕКСИРОВАТЬ ПО
							 |	Сотрудник,
							 |	Период
							 |;
							 |
							 |////////////////////////////////////////////////////////////////////////////////
							 |ВЫБРАТЬ
							 |	втДолжности.Сотрудник КАК Сотрудник,
							 |	МИНИМУМ(втДолжности.Организация) КАК Организация,
							 |	МИНИМУМ(втДолжности.Подразделение) КАК Подразделение,
							 |	МИНИМУМ(втДолжности.Должность) КАК Должность,
							 |	МИНИМУМ(втДолжности.ТипДоговора) КАК ТипДоговора
							 |ПОМЕСТИТЬ втДолжностиСотрудников
							 |ИЗ
							 |	втДолжности КАК втДолжности
							 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолжностиПериоды КАК втДолжностиПериоды
							 |		ПО втДолжности.Сотрудник = втДолжностиПериоды.Сотрудник
							 |		И (втДолжностиПериоды.Период = втДолжности.Период)
							 |СГРУППИРОВАТЬ ПО
							 |	втДолжности.Сотрудник
							 |
							 |ИНДЕКСИРОВАТЬ ПО
							 |	Сотрудник
							 |;
							 |
							 |////////////////////////////////////////////////////////////////////////////////
							 |ВЫБРАТЬ
							 |	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
							 |	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
							 |	КадровыйПриказ.Сотрудник КАК Сотрудник,
							 |	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
							 |ПОМЕСТИТЬ ВТ_ДолжностиНовые
							 |ИЗ
							 |	Документ.КадровыйПриказ КАК КадровыйПриказ
							 |СГРУППИРОВАТЬ ПО
							 |	КадровыйПриказ.Сотрудник
							 |;
							 |
							 |////////////////////////////////////////////////////////////////////////////////
							 |ВЫБРАТЬ
							 |	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
							 |	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
							 |	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
							 |ПОМЕСТИТЬ ТелефоныЛичные
							 |ИЗ
							 |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
							 |ГДЕ
							 |	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
							 |;
							 |
							 |////////////////////////////////////////////////////////////////////////////////
							 |ВЫБРАТЬ
							 |	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
							 |	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
							 |	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
							 |ПОМЕСТИТЬ ТелефоныСлужебные
							 |ИЗ
							 |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
							 |ГДЕ
							 |	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
							 |;
							 |
							 |////////////////////////////////////////////////////////////////////////////////
							 |ВЫБРАТЬ
							 |	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
							 |	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
							 |	Сотрудники.Наименование КАК Наименование,
							 |	Сотрудники.Код КАК Код,
							 |	втДолжностиСотрудников.Организация КАК Организация,
							 |	втДолжностиСотрудников.Подразделение КАК Подразделение,
							 |	втДолжностиСотрудников.Должность КАК Должность,
							 |	Сотрудники.ДатаРождения КАК ДатаРождения,
							 |	ЕСТЬNULL(втДолжностиСотрудников.Должность,
							 |		ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка) КАК
							 |		Действующий,
							 |	Сотрудники.Руководитель КАК Руководитель,
							 |	Сотрудники.МестоРаботы КАК МестоРаботы,
							 |	Сотрудники.ПарольДляУК КАК ПарольДляУК,
							 |	Сотрудники.Тележка КАК Тележка,
							 |	Сотрудники.РолиWT10.(
							 |		Ссылка,
							 |		НомерСтроки,
							 |		Роль)
							 |ИЗ
							 |	Справочник.Сотрудники КАК Сотрудники
							 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
							 |		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
							 |		ЛЕВОЕ СОЕДИНЕНИЕ втДолжностиСотрудников КАК втДолжностиСотрудников
							 |		ПО (втДолжностиСотрудников.Сотрудник = Сотрудники.Ссылка)
							 |		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
							 |		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
							 |		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
							 |		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
							 |ГДЕ
							 |	НЕ Сотрудники.Пользователь.Недействителен
							 | И (ТелефоныЛичные.ТелефонЛичный = &Телефон
							 |	ИЛИ ТелефоныСлужебные.ТелефонСлужебный = &Телефон)";

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	ЗапросСотрудника.УстановитьПараметр("Телефон", Строка(Массив.phone));
	ВыборкаСотрудника = ЗапросСотрудника.Выполнить().Выбрать();
	Если ВыборкаСотрудника.Количество() > 0 Тогда
		ВыборкаСотрудника.Следующий();
		//Если ВыборкаСотрудника.ПарольДляУК = Массив.pass Тогда 
			//ДанныеВBase64 = XMLСтрока(ВыборкаСотрудника.фото); // Получим Base64 хранилища значения
			//ДвоичныеДанные = Base64Значение(ДанныеВBase64);
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("name", Строка(ВыборкаСотрудника.Наименование));
		СтруктураОтвета.Вставить("id", Строка(ВыборкаСотрудника.Код));
		СтруктураОтвета.Вставить("company", Строка(ВыборкаСотрудника.Организация));
		СтруктураОтвета.Вставить("post", Строка(ВыборкаСотрудника.Должность));
		СтруктураОтвета.Вставить("birthdate", Строка(ВыборкаСотрудника.ДатаРождения));
		СтруктураОтвета.Вставить("pphone", Строка(ВыборкаСотрудника.ТелефонЛичный));
		СтруктураОтвета.Вставить("wphone", Строка(ВыборкаСотрудника.ТелефонСлужебный));
		СтруктураОтвета.Вставить("car", Строка(ВыборкаСотрудника.Тележка));
		Если ВыборкаСотрудника.Тележка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
			СтруктураОтвета.Вставить("car_items", КоличествоТоваровВКорзине(ВыборкаСотрудника.Тележка));
		Иначе
			СтруктураОтвета.Вставить("car_items", 0);
		КонецЕсли;
			
			//СтруктураОтвета.Вставить("Photo",ДвоичныеДанные ); 
			//signin
		Роли = ВыборкаСотрудника.РолиWT10.Выгрузить();

		МассивРолей = Новый массив;
		Для Каждого стр Из Роли Цикл
			Структурароли = Новый Структура;
			Структурароли.Вставить("id", Стр.Роль.Код);
			Структурароли.Вставить("title", Строка(Стр.Роль));
			МассивРолей.Добавить(Строка(Стр.Роль));
		КонецЦикла;

		СтруктураОтвета.Вставить("roles", Структурароли);

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

		Возврат Ответ;
//		Иначе
//			Ответ = Новый HTTPСервисОтвет(404);
//			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//			Ответ.УстановитьТелоИзСтроки("{ text:""Пароль не верен"" }");
//			Возврат Ответ;
//		КонецЕсли;

	Иначе

		Телефон= СокрЛП(Массив.phone);
		МассивСтрок = Новый Массив;
		Для Сч = 1 По СтрДлина(Телефон) Цикл
			МассивСтрок.Добавить(Сред(Телефон, Сч, 1));
		КонецЦикла;
		//МассивСтрок[0] = "+"+МассивСтрок[0];
		МассивСтрок[2] = " " + МассивСтрок[2];
		МассивСтрок[5] = " " + МассивСтрок[5];
		МассивСтрок[8] = "-" + МассивСтрок[8];
		МассивСтрок[10] = "-" + МассивСтрок[10];
		Телефон = СтрСоединить(МассивСтрок, "");

		ЗапросКлиента = Новый запрос;
		ЗапросКлиента.Текст = "ВЫБРАТЬ
		|	Клиенты.Код КАК Код,
		|	Клиенты.Наименование КАК Наименование,
		|	Клиенты.Телефон
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	(Клиенты.Телефон = &Телефон
		|	ИЛИ Клиенты.Телефон = &ТелефонБезМаски)";

		ЗапросКлиента.УстановитьПараметр("Телефон", Телефон);
		ЗапросКлиента.УстановитьПараметр("ТелефонБезМаски", Массив.phone);
		ВыборкаКлиента = ЗапросКлиента.Выполнить().Выбрать();
		Если ВыборкаКлиента.Количество() > 0 Тогда
			ВыборкаКлиента.Следующий();
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("name", Строка(ВыборкаКлиента.Наименование));
			СтруктураОтвета.Вставить("id", Строка(ВыборкаКлиента.Код));
//			СтруктураОтвета.Вставить("company", Строка(ВыборкаКлиента.Организация));
//			СтруктураОтвета.Вставить("post", Строка(ВыборкаКлиента.Должность));
//			СтруктураОтвета.Вставить("birthdate", Строка(ВыборкаКлиента.ДатаРождения));
//			СтруктураОтвета.Вставить("pphone", Строка(ВыборкаКлиента.ТелефонЛичный));
			СтруктураОтвета.Вставить("wphone", Строка(ВыборкаКлиента.Телефон));
//			СтруктураОтвета.Вставить("car", Строка(ВыборкаКлиента.Тележка));

		МассивРолей = Новый массив;

			МассивРолей.Добавить("Клиент");
			Структурароли = Новый Структура;
			Структурароли.Вставить("id", "000000099");
			Структурароли.Вставить("title", "Клиент");
			МассивРолей.Добавить(Структурароли);
		

		СтруктураОтвета.Вставить("roles", Структурароли);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

		Возврат Ответ;
		Иначе
	    НовыйКлиент = Справочники.Клиенты.СоздатьЭлемент();
		НовыйКлиент.Наименование = Массив.client_name;
		НовыйКлиент.Телефон = Телефон;
		НовыйКлиент.Записать();

			ВыборкаКлиента.Следующий();
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("name", Строка(НовыйКлиент.Наименование));
			СтруктураОтвета.Вставить("id", Строка(НовыйКлиент.Код));
//			СтруктураОтвета.Вставить("company", Строка(ВыборкаКлиента.Организация));
//			СтруктураОтвета.Вставить("post", Строка(ВыборкаКлиента.Должность));
//			СтруктураОтвета.Вставить("birthdate", Строка(ВыборкаКлиента.ДатаРождения));
//			СтруктураОтвета.Вставить("pphone", Строка(ВыборкаКлиента.ТелефонЛичный));
			СтруктураОтвета.Вставить("wphone", Строка(НовыйКлиент.Телефон));
//			СтруктураОтвета.Вставить("car", Строка(ВыборкаКлиента.Тележка));
МассивРолей = Новый массив;

			МассивРолей.Добавить("Клиент");
			Структурароли = Новый Структура;
			Структурароли.Вставить("id", "000000099");
			Структурароли.Вставить("title", "Клиент");
			МассивРолей.Добавить(Структурароли);
		

		СтруктураОтвета.Вставить("roles", Структурароли);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

		Возврат Ответ;
		КонецЕсли;		


	КонецЕсли;
КонецФункции

Функция ПолучитьИнфоОПользователеgetinfouser(Запрос)
	
	ЗапросСотрудника = Новый запрос;
	ЗапросСотрудника.Текст = "ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Организация КАК Организация,
	|	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ДолжностиСотрудниковСрезПоследних.ТипДоговора КАК ТипДоговора,
	|	ДолжностиСотрудниковСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втДолжности
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	Подразделение,
	|	Должность,
	|	ТипДоговора,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(втДолжности.Период) КАК Период
	|ПОМЕСТИТЬ втДолжностиПериоды
	|ИЗ
	|	втДолжности КАК втДолжности
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(втДолжности.Организация) КАК Организация,
	|	МИНИМУМ(втДолжности.Подразделение) КАК Подразделение,
	|	МИНИМУМ(втДолжности.Должность) КАК Должность,
	|	МИНИМУМ(втДолжности.ТипДоговора) КАК ТипДоговора
	|ПОМЕСТИТЬ втДолжностиСотрудников
	|ИЗ
	|	втДолжности КАК втДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолжностиПериоды КАК втДолжностиПериоды
	|		ПО втДолжности.Сотрудник = втДолжностиПериоды.Сотрудник
	|		И (втДолжностиПериоды.Период = втДолжности.Период)
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	втДолжностиСотрудников.Организация КАК Организация,
	|	втДолжностиСотрудников.Подразделение КАК Подразделение,
	|	втДолжностиСотрудников.Должность КАК Должность,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втДолжностиСотрудников.Должность,
	|		ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка) КАК
	|		Действующий,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	Сотрудники.МестоРаботы КАК МестоРаботы,
	|	Сотрудники.ПарольДляУК КАК ПарольДляУК,
	|	Сотрудники.Тележка КАК Тележка,
	|	Сотрудники.РолиWT10.(
	|		Ссылка,
	|		НомерСтроки,
	|		Роль),
	|	Сотрудники.МестоРаботы КАК город
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолжностиСотрудников КАК втДолжностиСотрудников
	|		ПО (втДолжностиСотрудников.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	|ГДЕ
	|	НЕ Сотрудники.Пользователь.Недействителен
	|	И Сотрудники.Код = &id";

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	ЗапросСотрудника.УстановитьПараметр("id", Строка(Массив.id));
	ВыборкаСотрудника = ЗапросСотрудника.Выполнить().Выбрать();
	Если ВыборкаСотрудника.Количество() > 0 Тогда
		
		ВыборкаСотрудника.Следующий();
		//Если ВыборкаСотрудника.ПарольДляУК = Массив.pass Тогда 
			//ДанныеВBase64 = XMLСтрока(ВыборкаСотрудника.фото); // Получим Base64 хранилища значения
			//ДвоичныеДанные = Base64Значение(ДанныеВBase64);
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("name", Строка(ВыборкаСотрудника.Наименование));
		СтруктураОтвета.Вставить("id", Строка(ВыборкаСотрудника.Код));
		СтруктураОтвета.Вставить("company", Строка(ВыборкаСотрудника.Организация));
		СтруктураОтвета.Вставить("post", Строка(ВыборкаСотрудника.Должность));
		СтруктураОтвета.Вставить("birthdate", Строка(ВыборкаСотрудника.ДатаРождения));
		СтруктураОтвета.Вставить("city", Строка(ВыборкаСотрудника.Город));
		СтруктураОтвета.Вставить("phone", Строка(ВыборкаСотрудника.ТелефонСлужебный));
		СтруктураОтвета.Вставить("car", Строка(ВыборкаСотрудника.Тележка));
		Если ВыборкаСотрудника.Тележка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
			СтруктураОтвета.Вставить("car_items", КоличествоТоваровВКорзине(ВыборкаСотрудника.Тележка));
		Иначе
			СтруктураОтвета.Вставить("car_items", 0);
		КонецЕсли;
			
			//СтруктураОтвета.Вставить("Photo",ДвоичныеДанные ); 
			//signin
		Роли = ВыборкаСотрудника.РолиWT10.Выгрузить();

		МассивРолей = Новый массив;
		Для Каждого стр Из Роли Цикл
			Структурароли = Новый Структура;
			Структурароли.Вставить("id", Стр.Роль.Код);
			Структурароли.Вставить("title", Строка(Стр.Роль));
			МассивРолей.Добавить(Структурароли);
		КонецЦикла;

		СтруктураОтвета.Вставить("roles", МассивРолей);

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

		Возврат Ответ;
//		Иначе
//			Ответ = Новый HTTPСервисОтвет(404);
//			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//			Ответ.УстановитьТелоИзСтроки("{ text:""Пароль не верен"" }");
//			Возврат Ответ;
//		КонецЕсли;

	Иначе

//		Телефон= СокрЛП(Массив.phone);
//		МассивСтрок = Новый Массив;
//		Для Сч = 1 По СтрДлина(Телефон) Цикл
//			МассивСтрок.Добавить(Сред(Телефон, Сч, 1));
//		КонецЦикла;
//		//МассивСтрок[0] = "+"+МассивСтрок[0];
//		МассивСтрок[2] = " " + МассивСтрок[2];
//		МассивСтрок[5] = " " + МассивСтрок[5];
//		МассивСтрок[8] = "-" + МассивСтрок[8];
//		МассивСтрок[10] = "-" + МассивСтрок[10];
//		Телефон = СтрСоединить(МассивСтрок, "");

		ЗапросКлиента = Новый запрос;
		ЗапросКлиента.Текст = "ВЫБРАТЬ
		|	Клиенты.Код КАК Код,
		|	Клиенты.Наименование КАК Наименование,
		|	Клиенты.Телефон,
		|	Клиенты.Город2 КАК Город
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Код = &id";

//		ЗапросКлиента.УстановитьПараметр("Телефон", Телефон);
		ЗапросКлиента.УстановитьПараметр("id", Массив.id);
		ВыборкаКлиента = ЗапросКлиента.Выполнить().Выбрать();
		Если ВыборкаКлиента.Количество() > 0 Тогда
			ВыборкаКлиента.Следующий();
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("name", Строка(ВыборкаКлиента.Наименование));
			СтруктураОтвета.Вставить("id", Строка(ВыборкаКлиента.Код));
			СтруктураОтвета.Вставить("city", Строка(ВыборкаСотрудника.Город));
//			СтруктураОтвета.Вставить("company", Строка(ВыборкаКлиента.Организация));
//			СтруктураОтвета.Вставить("post", Строка(ВыборкаКлиента.Должность));
//			СтруктураОтвета.Вставить("birthdate", Строка(ВыборкаКлиента.ДатаРождения));
//			СтруктураОтвета.Вставить("pphone", Строка(ВыборкаКлиента.ТелефонЛичный));
			СтруктураОтвета.Вставить("phone", Строка(ВыборкаКлиента.Телефон));
//			СтруктураОтвета.Вставить("car", Строка(ВыборкаКлиента.Тележка))

		МассивРолей = Новый массив;
		
			Структурароли = Новый Структура;
			Структурароли.Вставить("id", "000000099");
			Структурароли.Вставить("title","Клиент");
			МассивРолей.Добавить(Структурароли);
	

		СтруктураОтвета.Вставить("roles", МассивРолей);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

		Возврат Ответ;
		Иначе

		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("{ text:""Нет такого"" }");
		Возврат Ответ;
		КонецЕсли;
			КонецЕсли;
КонецФункции

Функция ПолучитьСписокТоваровGetProductsList(Запрос)
	
	
	запросТовара = Новый Запрос;

	запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(100000, "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" + Строка(Запрос.ПараметрыURL["text"]) + "%");
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	ТЗ = запросТовара.Выполнить().Выбрать();
	ВыборкаОбщ = тз.Количество();

	запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 100000), "ЧГ="));
	МойПиздатыйПоиск = Строка(Запрос.ПараметрыURL["text"]);
	Если СтрНайти(МойПиздатыйПоиск, "00") = 1 Тогда
		длина = СтрДлина(МойПиздатыйПоиск);
		Пока длина < 9 Цикл
			МойПиздатыйПоиск = "0" + МойПиздатыйПоиск;
			длина = длина + 1;
		КонецЦикла;
	КонецЕсли;
	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		МойПиздатыйПоиск) + "%");
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;

	ТЗ = запросТовара.Выполнить().Выгрузить();

	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Коды", Новый ОписаниеТипов("Строка"));
	МассивТоваров = Новый Массив;

//	Для Каждого стр Из ТЗ Цикл
//		Код = стр.Код;
//		Пока Лев(Код, 1) = "0" Цикл
//			Код = Прав(Код, СтрДлина(Код) - 1);
//		КонецЦикла;
//		Стр.Коды = "0" + код;
//	КонецЦикла;
	ИндКоды = тз.ВыгрузитьКолонку("Коды");
	Фотки = ПолучениеФотокарточек(ИндКоды);
	итер = 0;

	Для Каждого стр Из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].images.common;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки <> "" Тогда
			
		//	стр.колфото = 1;  

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		итер = итер + 1;
		//тз.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", стр.Цена);
		СтруктураТоваров.Вставить("id", Строка(стр.Код));
		СтруктураТоваров.Вставить("type", "CARD_PRODUCT");
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);

	СтруктураОтвета = Новый Структура;
//	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	
	СтруктураОтвета.Вставить("pages", Итог);
	СтруктураОтвета.Вставить("count", Выборкаобщ);
	СтруктураОтвета.Вставить("product_cards", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

//	МассивСтеллажей = Новый Массив;
//	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001068")); //RegionEKB
//	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002014")); //RegionMSK
//	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002015")); //RegionNN
//
//	ЗапросТовара = Новый Запрос;
//	запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(10000, "ЧГ="));
//	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
//		Запрос.ПараметрыURL["text"])) + "%");
//	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
//	запросТовара.УстановитьПараметр("Стеллаж", МассивСтеллажей);
//	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
//	Если Выборкаобщ > 0 Тогда
//		запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
//			Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
//		запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
//			Строка(Запрос.ПараметрыURL["text"])) + "%");
//		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
//			Запрос.ПараметрыURL["page"]) > 1 Тогда
//			запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
//				* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
//		Иначе
//			запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
//		КонецЕсли;
//
//		ТЗ = запросТовара.Выполнить().Выгрузить();
//	//	Выборкаобщ = Тз.Количество();
//	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
//		ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
//		ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
//		МассивТоваров = Новый Массив;
//
//		ИндКоды = тз.ВыгрузитьКолонку("индкод");
//		Фотки = ПолучениеФото(ИндКоды);
//		Итер = 0;
//
//		Для Каждого стр Из ТЗ Цикл
//			НайденныеФотки = Новый Массив;
//		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
//			НайденныеФотки = Фотки[итер].urls;
//			МассивФото = Новый массив;
//			Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда
//
//				стр.колфото = 1;
//
//				Для Каждого Фотка Из НайденныеФотки Цикл
//					Текст = "";
//				//Текст = "https://wt10.ru" + Фотка; 
//					Текст = Фотка;
//					МассивФото.Добавить(Текст);
//				КонецЦикла;
//			КонецЕсли;
//			Итер = итер + 1;
//			//тз.Сортировать("АЧ Убыв, колФото Убыв");
//			//тз.Сортировать("колФото Убыв");
//
//			СтруктураТоваров = Новый Структура;
//			СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
//			СтруктураТоваров.Вставить("search", Строка(стр.СтрокаПоиска));
//			СтруктураТоваров.Вставить("search1", Строка(стр.СтрокаПоиска1));
//			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
//			СтруктураТоваров.Вставить("cost", стр.Цена);
//			СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
//			СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
//			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
//			СтруктураТоваров.Вставить("code", Строка(стр.Код));
//			СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
//			СтруктураТоваров.Вставить("stack", стр.Комплектация);
//			СтруктураТоваров.Вставить("conv", стр.АЧ);
//			СтруктураТоваров.Вставить("sity", Строка(стр.Город));
//
//			СтруктураТоваров.Вставить("id", Строка(стр.индкод));
//			СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
//			СтруктураТоваров.Вставить("photos", МассивФото);
//			МассивТоваров.Добавить(СтруктураТоваров);
//		КонецЦикла;
//		Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
//		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));
//
//		СтруктураИнфо= Новый Структура;
//		СтруктураИнфо.Вставить("pages", Итог);
//		СтруктураИнфо.Вставить("count", Выборкаобщ);
////	Если Лев(Запрос.ПараметрыURL["id"],1) = "П" Тогда
////		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["id"])))); 
////		//	Иначе
////		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
////	КонецЕсли;
////	
//
//		СтруктураОтвета = Новый Структура;
//		СтруктураОтвета.Вставить("info", СтруктураИнфо);
//		СтруктураОтвета.Вставить("data", МассивТоваров);
//
//		ЗаписьJSON = Новый ЗаписьJSON;
//		ЗаписьJSON.УстановитьСтроку();
//
//		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
//
//		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
//
//		Ответ = Новый HTTPСервисОтвет(200);
//		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
//
//		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
//
//		Возврат Ответ;
//	КонецЕсли;
//ПолнотекстовыйПоиск.ОбновитьИндекс();

		
//	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
//	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	//СтруктураИнфо= Новый Структура;
//	СтруктураИнфо.Вставить("pages", Итог);
	//СтруктураИнфо.Вставить("count", МассивТоваров.Количество());

//	СтруктураОтвета = Новый Структура;
//	СтруктураОтвета.Вставить("info", СтруктураИнфо);
//	СтруктураОтвета.Вставить("data", МассивТоваров);

	//ПолнотекстовыйПоиск.УстановитьКоличествоЗаданийИндексирования(5);
	Страница = Число(Запрос.ПараметрыURL["page"]);
	КолВо    = Число(Запрос.ПараметрыURL["count"]);
	ПоисковаяСтрока = Строка(Запрос.ПараметрыURL["text"]);

	СписокПоиска=ПолнотекстовыйПоиск.СоздатьСписок();
	СписокПоиска.ПолучатьОписание = Ложь;
	МассивОтбор = Новый Массив;
	МассивТоваров = Новый Массив;
	СписокПоиска.РазмерПорции = КолВо;

	ТекущаяПозиция = КолВо * (Страница - 1);

//МассивОтбор.Добавить(Метаданные.РегистрыСведений.ИндНомер);
	МассивОтбор.Добавить(Метаданные.Справочники.Номенклатура);
	СписокПоиска.ОбластьПоиска = МассивОтбор;
	ЛимитОшибок = Цел(СтрДлина(ПоисковаяСтрока) / 2);
	СписокПоиска.СтрокаПоиска="""" + ПоисковаяСтрока + """";
	СписокПоиска.ПорогНечеткости = 0;
	//СписокПоиска.СтрокаПоиска=ПоисковаяСтрока + "#" + Строка(0);
	Если Страница = 1 Тогда
		СписокПоиска.ПерваяЧасть();
	Иначе
		СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
	КонецЕсли;
	Если СписокПоиска.Количество() > 0 Тогда

	Иначе

		СписокПоиска.СтрокаПоиска=ПоисковаяСтрока + "#" + Строка(ЛимитОшибок - 1);
		СписокПоиска.ПорогНечеткости = ЛимитОшибок - 1;
		Если Страница = 1 Тогда
			СписокПоиска.ПерваяЧасть();
		Иначе
			СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
		КонецЕсли;
	КонецЕсли;
	ОбщееКолво = СписокПоиска.ПолноеКоличество();
	ИндКоды = Новый массив;

	Для Каждого Результат Из СписокПоиска Цикл
		ИндКоды.Добавить(Строка(Результат.Значение.код));
	КонецЦикла;

	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;
	Для Каждого Результат Из СписокПоиска Цикл

		НайденныеФотки = Новый Массив;
		НайденныеФотки = Фотки[Итер].urls;

		МассивФото = Новый массив;

		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;

		КонецЕсли;
		Итер = Итер + 1;

СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("id", Строка(Результат.Значение.Код));
		СтруктураТоваров.Вставить("article", Строка(Результат.Значение.Артикул));
		СтруктураТоваров.Вставить("category", Строка(Результат.Значение.Подкатегория2));
		СтруктураТоваров.Вставить("name", Строка(Результат.Значение));
		СтруктураТоваров.Вставить("photos", МассивФото);
		//@skip-check query-in-loop
//		СтруктураДопРеквизитов = ПолучитьДопРеквизиты(Строка(Результат.Значение.индкод));
//		СтруктураТоваров.Вставить("cost", СтруктураДопРеквизитов.cost);
//		СтруктураТоваров.Вставить("comment", СтруктураДопРеквизитов.comment);
//		СтруктураТоваров.Вставить("place", СтруктураДопРеквизитов.place);
//		СтруктураТоваров.Вставить("sklad", СтруктураДопРеквизитов.sklad);
//		СтруктураТоваров.Вставить("poddon", СтруктураДопРеквизитов.poddon);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", ОбщееКолво);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
//	

	Возврат Ответ;
КонецФункции

Функция ПолучитьДанныеОТоваре(Партия)
	///++ МазинЕС 23-07-2024

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПродажаЗапчастейТаблица.Товар КАК Товар,
		|	ПродажаЗапчастейТаблица.Партия КАК Партия,
		|	ПродажаЗапчастейТаблица.Ссылка КАК Ссылка,
		|	ПродажаЗапчастейТаблица.СтатусТовара КАК СтатусТовара,
		|	ПродажаЗапчастей.ЗаказКлиента.Номер КАК ЗаказКлиентаНомер
		|ИЗ
		|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		|		ПО ПродажаЗапчастейТаблица.Ссылка = ПродажаЗапчастей.Ссылка
		|ГДЕ
		|	ПродажаЗапчастейТаблица.Партия.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Партия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Текст = ""; 
	
	Структура = Новый Структура();
	
	Если РезультатЗапроса.Пустой()  Тогда 
		Структура.Вставить("Продан","");
		Структура.Вставить("Выдан","");
		Структура.Вставить("ЗаказКлиентаНомер",""); 
	КонецЕсли; 
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Структура.Вставить("Продан","В продаже");
		Структура.Вставить("ЗаказКлиентаНомер",ВыборкаДетальныеЗаписи.ЗаказКлиентаНомер);
		Если ВыборкаДетальныеЗаписи.СтатусТовара Тогда 
			Структура.Вставить("Выдан","Выдан");
		Иначе Структура.Вставить("Выдан","На складе");	 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Структура;
	 
	//-- МазинЕС 23-07-2024
КонецФункции


Функция ПолучитьТоварGetProduct(Запрос)

	ЗапросТовара = Новый Запрос;
	ЗапросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));
	ЗапросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	ЗапросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	ТЗ = ЗапросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;
	
	///+ГомзМА 21.02.2024 
	Фотограф = ПолучитьФотографа(Запрос.ПараметрыURL["id"]);
	ФИОФотографа = "";
	ТабНомФотографа = "";
	Если Фотограф <> Неопределено Тогда
		ФИОФотографа = Справочники.Сотрудники.НайтиПоКоду(Фотограф.tabnum);
		ТабНомФотографа = Фотограф.tabnum;
	КонецЕсли;
	
	///-ГомзМА 21.02.2024
	Если ТЗ.Количество() > 0 Тогда
		Для Каждого стр Из ТЗ Цикл
			НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
			НайденныеФотки = Фотки[итер].urls;
			МассивФото = Новый массив;
			Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

				стр.колфото = 1;

				Для Каждого Фотка Из НайденныеФотки Цикл
					Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
					Текст = Фотка;
					МассивФото.Добавить(Текст);
				КонецЦикла;
			КонецЕсли;
			итер = итер + 1;
			тз.Сортировать("колФото Убыв");
		
		///+ГомзМА 20.05.2024
			РекомендованноеМестоХранения = Новый Массив;

			ЗапросРекомендованноеМесто = Новый Запрос;
			ЗапросРекомендованноеМесто.Текст = текстРекомендуемоеМестоХранения();

			ЗапросРекомендованноеМесто.УстановитьПараметр("Наименование", Строка(стр.код));
		//@skip-check query-in-loop
			РезультатЗапросаРекомендованноеМесто = ЗапросРекомендованноеМесто.Выполнить().Выбрать();

			РезультатЗапросаРекомендованноеМесто.Следующий();

			СтруктураРекомендованноеМесто = Новый Структура;
			СтруктураРекомендованноеМесто.Вставить("sklad", Строка(РезультатЗапросаРекомендованноеМесто.Склад));
			СтруктураРекомендованноеМесто.Вставить("shelf", Строка(РезультатЗапросаРекомендованноеМесто.Адрес));
			СтруктураРекомендованноеМесто.Вставить("poddon", Строка(РезультатЗапросаРекомендованноеМесто.Поддон));
			СтруктураРекомендованноеМесто.Вставить("count", Строка(РезультатЗапросаРекомендованноеМесто.Количество));

			РекомендованноеМестоХранения.Добавить(СтруктураРекомендованноеМесто);
			///-ГомзМА 20.05.2024
			СтруктураТоваров = Новый Структура;	
			//++МазинЕС 23-07-2024
			//@skip-check query-in-loop
			Структура = ПолучитьДанныеОТоваре(стр.индкод); 
			СтруктураТоваров.Вставить("prodan",Структура.Выдан); 
			СтруктураТоваров.Вставить("vidan",Структура.Продан);
			СтруктураТоваров.Вставить("IDzaivka",Структура.ЗаказКлиентаНомер); 
			//--МазинЕС 23-07-2024
			СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("price", стр.Цена);
			СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
			СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
			СтруктураТоваров.Вставить("uchetchik", Строка(стр.Учетчик));
			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
			СтруктураТоваров.Вставить("state", Строка(стр.Состояние));
			СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
			СтруктураТоваров.Вставить("chek_size", стр.Размеры);
			СтруктураТоваров.Вставить("availability", стр.ФактНаличия);
		
		///+ГомзМА 21.02.2024
			СтруктураТоваров.Вставить("tabnum_photographer", Строка(ТабНомФотографа));
			СтруктураТоваров.Вставить("name_photographer", Строка(ФИОФотографа));
		///-ГомзМА 21.02.2024

			СтруктураТоваров.Вставить("length", стр.длин);
			СтруктураТоваров.Вставить("width", стр.шир);
			СтруктураТоваров.Вставить("height", стр.выс);
			СтруктураТоваров.Вставить("weight", стр.Вес);

			СтруктураТоваров.Вставить("code", Строка(стр.код));
			СтруктураТоваров.Вставить("id", Строка(стр.индкод));
			СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		///+ГомзМА 20.05.2024
			СтруктураТоваров.Вставить("recommended_shelf", СтруктураРекомендованноеМесто);
		///-ГомзМА 20.05.2024

			СтруктураТоваров.Вставить("photos", МассивФото);
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);

		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		//Информация = ИнформацияОбОшибке();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Товар не найден",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция СменаМестаХраненияEditPlace(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Если Массив.type = 1 Тогда
		Ответ = РедактироватьПоддон(Массив.id, Массив.place, Массив.author);
	Иначе
		Ответ = РедактироватьПолку(Массив.id, Массив.place, Массив.author);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция СменаНаличияChangeOfAvailability(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Индкод = Массив.id;
	Наличие = Массив.inStock;
	Автор = Массив.author;

	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", Индкод);

	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;

	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		НовыйНомер = НаборЗаписей[0];

		НовыйНомер.ДатаНаличия = ТекущаяДата();
		НовыйНомер.ОтветственныйЗаНаличие = Справочники.Сотрудники.НайтиПоКоду(Автор);
		НовыйНомер.ФактНаличия = Наличие;
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех");

		Возврат ответ;

	КонецЕсли;
КонецФункции

Функция ПолучитьТоварыПоИндкодамGetProductsById(Запрос)
	
	///+ГомзМА 04.07.2024
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	Индкода = Массив.ids;
	МассивИнфо = Новый Массив;

	Для Каждого Индкод Из Индкода Цикл
		Если стрНайти(Индкод, "_") <> 0 Тогда
			запросТовара = Новый Запрос;
			запросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));

			запросТовара.УстановитьПараметр("Наименование", Строка(Индкод));
			запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
		//@skip-check query-in-loop
			ТЗ = запросТовара.Выполнить().Выгрузить();
	
		//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
			ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
			ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
			//МассивТоваров = Новый Массив;

			ИндКоды = тз.ВыгрузитьКолонку("индкод");
			Фотки = ПолучениеФото(ИндКоды);
			итер = 0;

			Для Каждого стр Из ТЗ Цикл
				НайденныеФотки = Новый Массив;

				НайденныеФотки = Фотки[итер].urls;
				МассивФото = Новый массив;
				Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

					стр.колфото = 1;

					Для Каждого Фотка Из НайденныеФотки Цикл
						Текст = "";

						Текст = Фотка;
						МассивФото.Добавить(Текст);
					КонецЦикла;
				КонецЕсли;
				итер = итер + 1;
				тз.Сортировать("колФото Убыв");

				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
				СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
				СтруктураТоваров.Вставить("price", стр.Цена);
				СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
				СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
			//СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
				СтруктураТоваров.Вставить("code", Строка(стр.Код));
			//СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
				СтруктураТоваров.Вставить("type","PRODUCT");  
			//СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
			//СтруктураТоваров.Вставить("stack",    стр.Комплектация);
				СтруктураТоваров.Вставить("id", Строка(стр.индкод));
				СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));

				СтруктураТоваров.Вставить("photos", МассивФото);
				//МассивТоваров.Добавить(СтруктураТоваров);
				МассивИнфо.Добавить(СтруктураТоваров);
			КонецЦикла;

		Иначе
			ОбъектНоменклатуры = Справочники.Номенклатура.НайтиПоКоду(Индкод).ПолучитьОбъект();
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name", Строка(ОбъектНоменклатуры.Наименование));
			СтруктураТоваров.Вставить("article", Строка(ОбъектНоменклатуры.Артикул));
			СтруктураТоваров.Вставить("price", ОбъектНоменклатуры.РекомендованаяЦена);
			СтруктураТоваров.Вставить("comment", Строка(ОбъектНоменклатуры.Комментарий));
			СтруктураТоваров.Вставить("shelf", Строка(ОбъектНоменклатуры.МестоНаСкладе2));
			//СтруктураТоваров.Вставить("sklad", Строка(ОбъектНоменклатуры.Склад));
			СтруктураТоваров.Вставить("code", Строка(ОбъектНоменклатуры.Код));
			//СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
			СтруктураТоваров.Вставить("type","CARD_PRODUCT");
			//СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
			//СтруктураТоваров.Вставить("stack",    стр.Комплектация);
			СтруктураТоваров.Вставить("id", Строка(ОбъектНоменклатуры.Код));
			СтруктураТоваров.Вставить("poddon", "");

			СтруктураТоваров.Вставить("photos", МассивФото);

			Код = ОбъектНоменклатуры.Код;
//			Пока Лев(Код, 1) = "0" Цикл
//				Код = Прав(Код, СтрДлина(Код) - 1);
//			КонецЦикла;
//			Код = "0" + код;

			ИндКоды =  Новый массив;
			ИндКоды.Добавить(Код);

Попытка
		Попытка
			Фотки = ПолучениеФотокарточек(ИндКоды);
			НайденныеФотки = Фотки[0].images.common;
			Если Фотки[0].images.main <> "" Тогда
				НайденныеФотки.Вставить(0, Фотки[0].images.main);
			КонецЕсли;
		Исключение
			НайденныеФотки = Новый Массив
		КонецПопытки;
			МассивФото = Новый массив;

			Текст = НайденныеФотки;
			Если НайденныеФотки <> Неопределено И НайденныеФотки <> "" Тогда
			
		//	стр.колфото = 1;  

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
			КонецЕсли;
			
			Исключение
			МассивФото.Добавить("");	
			КонецПопытки;

			СтруктураТоваров.Вставить("photos", НайденныеФотки);
			//МассивТоваров.Добавить(СтруктураТоваров);
			МассивИнфо.Добавить(СтруктураТоваров);
		КонецЕсли;

	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, МассивИнфо);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	Возврат Ответ;
	///-ГомзМА 04.07.2024

КонецФункции

Функция СменаРеквизитовТовараEditList(Запрос)
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	Автор = Массив.author;

	Ответ = РедактироватьТовар(Массив.id, Массив.comment, число(Массив.price), Массив.name, Автор);
	
	// КонецЦикла;
	Лог =  " сменил реквизиты " + Массив.comment + " " + Массив.price;
	ЛогированиеИндНомера(Массив.id, Автор, Лог, , , , );
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокПохожихТоваровGetSimilarProductsList(Запрос)

	ЗапросТовара = Новый Запрос;
	Текстзапроса = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.владелец.код ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
				   |	И ИндНомер.индкод.Наименование НЕ ПОДОБНО &НаименованиеПолное СПЕЦСИМВОЛ ""~""
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город,
				   |	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
				   |	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
				   |	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
				   |	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
				   |	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
				   |	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
				   |	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
				   |	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
				   |	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";

	Источник = СокрЛП(Строка(Запрос.ПараметрыURL["id"]));
	//КодКарточки = Лев(Источник, СтрДлина(Источник) - стрНайти(Источник, "_"));
	
	Если стрНайти(Источник, "_")<>0 Тогда
	КодКарточки = Лев(Источник, стрНайти(Источник, "_")-1);
	ИндКод = Строка(Запрос.ПараметрыURL["id"]);
		Если СтрНайти(КодКарточки, "00") = 1 Тогда
		Длина = СтрДлина(КодКарточки);
		Пока длина < 9 Цикл
			КодКарточки = "0" + КодКарточки;
			длина = длина + 1;
		КонецЦикла;
	КонецЕсли;
	Иначе
		КодКарточки = Источник;
		Длина = СтрДлина(КодКарточки);
		Пока длина < 9 Цикл
			КодКарточки = "0" + КодКарточки;
			длина = длина + 1;
		КонецЦикла;
	ИндКод = КодКарточки;	
	КонецЕсли;
	
	

			
	
	запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		КодКарточки) + "%");
	запросТовара.УстановитьПараметр("НаименованиеПолное", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		ИндКод) + "%");
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();

	запросТовара.Текст =  СтрШаблон(Текстзапроса, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
		Запрос.ПараметрыURL["count"], 10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		КодКарточки) + "%");
	запросТовара.УстановитьПараметр("НаименованиеПолное", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
		ИндКод) + "%");
	Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
			* ((Запрос.ПараметрыURL["page"]) - 1) + 1)));
	Иначе
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;

	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;

	Для Каждого стр Из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		Итер = итер + 1;
		тз.Сортировать("колФото Убыв");

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		//СтруктураТоваров.Вставить("search", Строка(стр.СтрокаПоиска));
		//СтруктураТоваров.Вставить("search1", Строка(стр.СтрокаПоиска1));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("price", стр.Цена);
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("shelf", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("code", Строка(стр.Код));
		//СтруктураТоваров.Вставить("count", Строка(стр.Остаток));
		//СтруктураТоваров.Вставить("stack", стр.Комплектация);
		СтруктураТоваров.Вставить("type", "PRODUCT");
		СтруктураТоваров.Вставить("sity", Строка(стр.Город));

		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", Выборкаобщ);
//	Если Лев(Запрос.ПараметрыURL["id"],1) = "П" Тогда
//		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["id"])))); 
//		//	Иначе
//		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
//	КонецЕсли;
//	

	СтруктураОтвета = Новый Структура;
	//СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("pages", Итог);
	СтруктураОтвета.Вставить("count", Выборкаобщ);
	СтруктураОтвета.Вставить("products", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

КонецФункции

Функция СоздатьПродажуcreatesale(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Номерзаявки = Массив.id;
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер", Номерзаявки);
	Выборка = запросзаявки.Выполнить().Выбрать();

	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();

		Продажа = ПроверкаПродаж(Выборка.ссылка);
		Если Продажа.ссылка = Неопределено Тогда

			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Клиент КАК Клиент,
			|	Док.Комментарий КАК Комментарий,
			|	Док.Проект КАК Проект,
			|	Док.Склад КАК Склад,
			|	Док.Ссылка КАК ЗаказКлиента,
			|	Док.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	Док.НачислятьНДС КАК НачислятьНДС,
			|	Док.Ответственный КАК КтоПродал
			|ПОМЕСТИТЬ втШапка
			|ИЗ
			|	Документ.ЗаказКлиента КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втШапка.Клиент КАК Клиент,
			|	втШапка.Комментарий КАК Комментарий,
			|	втШапка.Проект КАК Проект,
			|	втШапка.Склад КАК Склад,
			|	втШапка.ЗаказКлиента КАК ЗаказКлиента,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	втШапка.КтоПродал КАК КтоПродал
			|ИЗ
			|	втШапка КАК втШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
			|	ЗаказКлиентаТовары.Номенклатура КАК Товар,
			|	ЗаказКлиентаТовары.Количество КАК Количество,
			|	ЗаказКлиентаТовары.Цена КАК Цена,
			|	ЗаказКлиентаТовары.Сумма КАК Сумма,
			|	втШапка.Склад КАК Склад,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,
			|	ЗаказКлиентаТовары.Партия КАК Партия,
			|	втШапка.КтоПродал КАК КтоПродал,
			|	РегистрНакопления1Остатки.машина КАК машина,
			|	РегистрНакопления1Остатки.Склад КАК Склад1
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ втШапка КАК втШапка
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
			|		ПО ЗаказКлиентаТовары.Партия = РегистрНакопления1Остатки.индкод
			|		И ЗаказКлиентаТовары.Номенклатура = РегистрНакопления1Остатки.Товар
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка = &Ссылка
			|	И НЕ ЗаказКлиентаТовары.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			Запрос.УстановитьПараметр("Ссылка", Выборка.ссылка);

			Объектзаявки = выборка.ссылка.получитьОбъект();
			объектзаявки.Wtpanel = Справочники.СтатусыWT.НайтиПоНаименованию("Продажа");
			объектзаявки.записать();
			НоваяПродажа = Документы.ПродажаЗапчастей.СоздатьДокумент();
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			НоваяПродажа.Организация = Справочники.Организация.НайтиПоКоду("000000010");
			//НоваяПродажа.TipOplati   = Справочники.TipOplati.НайтиПоКоду(Массив.bill);
			НоваяПродажа.ОжидаемаяДатаВыплаты   = ТекущаяДата();

			НоваяПродажа.БезДоговора = Истина;
			НоваяПродажа.Дата        = ТекущаяДата();
			НоваяПродажа.Ктопродал   = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки).Ответственный;
			НоваяПродажа.Самовывоз   = Истина;
			НоваяПродажа.СтатусОбработки    = Перечисления.СтатусыОбработкиЗаявок.Обработано;
			НоваяПродажа.WTpanel    = Справочники.СтатусыWT.НайтиПоНаименованию("Продажа");
			НоваяПродажа.ПодстатусОбработки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;

			НоваяПродажа.СтатусДоставки    = Перечисления.СтатусОтправки.Отправлен;
			НоваяПродажа.ДатаСписания      = ТекущаяДата();
			Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[РезультатЗапроса.Количество()
				- 2].Выгрузить()[0]);

			ЗаполнениеДокументов.Заполнить(НоваяПродажа, Шапка, Ложь);
			НоваяПродажа.Таблица.Загрузить(РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить());

			НоваяПродажа.Записать();

			ТекстЛога =  " Создал продажу " + НоваяПродажа.номер;
			ЛогированиеWT10(Выборка.ссылка, Массив.author, ТекстЛога);
			//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(НоваяПродажа.КтоПродал), Строка(Выборка.Ответственный) + ТекстЛога); 

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки(НоваяПродажа.номер);
		Иначе
	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Продажа уже есть!",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(403);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		КонецЕсли;
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Такой заявки нет!",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);

	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПолучитьПродажуgetsale(Запрос)
	Запросзаявки = Новый Запрос;
	Запросзаявки.Текст = текстДляПродажи();
	Запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"]);
	Выборка = Запросзаявки.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("id", Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client", Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("application", Строка(выборка.ЗаказКлиента));
		СтруктураИнфо.Вставить("processing", Строка(выборка.СтатусОбработки));
		СтруктураИнфо.Вставить("sub_processing", Строка(выборка.подСтатусОбработки));
		СтруктураИнфо.Вставить("status", Строка(Выборка.СтатусЗаказаВТК));
		СтруктураИнфо.Вставить("client_phone", Строка(Выборка.КлиентТелефон));
		СтруктураИнфо.Вставить("store_keeper", Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible", Строка(выборка.КтоПродал));

		СтруктураИнфо.Вставить("sum", выборка.ИтогоРекв);
		СтруктураИнфо.Вставить("recorded_track_number", выборка.ЕстьТрекНомер);	
		//	ВыборкаТоваров = выборка.Таблица.Выбрать();
		ТЗ = выборка.Таблица.Выгрузить(); 
		//Массивкодов = ТЗ.ВыгрузитьКолонку("Партия");
		ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;
		//Для каждого стр из ТЗ Цикл 
		//	НайденныеФотки = Новый Массив;
		//	Фотки = ПолучениеФото(стр.индкод);
		//	
		//	Если фотки <> неопределено и  фотки.Количество()>0  Тогда
		//		НайденныеФотки = Фотки[0].urls;
		//		Если НайденныеФотки.Количество()>0 Тогда
		//			стр.колфото = 1;  
		//		КонецЕсли; 
		//	КонецЕсли;
		//	
		//КонецЦикла;
		ИндКоды = тз.ВыгрузитьКолонку("Партия2");
		Фотки = ПолучениеФото(ИндКоды);
		Итер = 0;
		
		Для Каждого стр Из ТЗ Цикл
			Если стрНайти(стр.Партия, "_") <> 0 Тогда
			//	Пока ВыборкаТоваров.Следующий() Цикл 
				МассивФото = Новый массив;
				//Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
					//Если фотки <> Неопределено И фотки.Количество() > 0 Тогда
				ИндКоды =  Новый массив;
				ИндКоды.Добавить(стр.Партия2);
				Фотки = РаботаССайтомWT.ПолучениеФото(ИндКоды);
				НайденныеФотки = Новый Массив;
						//КоличествоСФото = КоличествоСФото + 1;
				Попытка

					НайденныеФотки = Фотки[0].urls;
							//МассивФото = Новый массив;
							//Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

								//стр.колфото = 1;

					Для Каждого Фотка Из НайденныеФотки Цикл
						Текст = "";
						//Текст = "https://wt10.ru" + Фотка;
						Текст = Фотка;
						МассивФото.Добавить(Текст);
					КонецЦикла;
							//КонецЕсли;
				Исключение
					МассивФото.Добавить();
				КонецПопытки;
				//КонецЕсли;

			//КонецЕсли;
			итер = итер + 1;
			Код = стр.Код;
			Пока Лев(Код, 1) = "0" Цикл
				Код = Прав(Код, СтрДлина(Код) - 1);
			КонецЦикла;
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name", Строка(стр.Товар));
			СтруктураТоваров.Вставить("position", стр.НомерСтроки);
			СтруктураТоваров.Вставить("price",стр.Цена);
			СтруктураТоваров.Вставить("count", Строка(стр.Количество));
			СтруктураТоваров.Вставить("sum", Строка(стр.Сумма));
			СтруктураТоваров.Вставить("issued", Строка(стр.СтатусТовара));
			СтруктураТоваров.Вставить("code", Строка("00" + Код));
			СтруктураТоваров.Вставить("id", Строка(стр.Партия));
			СтруктураТоваров.Вставить("type","PRODUCT");
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("shelf", Строка(ПолучитьМесто(стр.Партия)));	 
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
			СтруктураТоваров.Вставить("photos", МассивФото);
			СтруктураТоваров.Вставить("state", Строка(стр.СтатусТовара));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("cancel", стр.Отменено);
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("availability_in_k_warehouse", ЕстьНаКСкладе(стр.Товар));

			МассивТоваров.Добавить(СтруктураТоваров);
			Иначе
							
			
			Код = Стр.Код;
			МассивФото = Новый массив;
//		Пока Лев(Код, 1) = "0" Цикл
//				Код = Прав(Код, СтрДлина(Код) - 1);
//			КонецЦикла;
//			Код = "0" + код;

			ИндКоды =  Новый массив;
			ИндКоды.Добавить(Код);

Попытка
		Попытка
			Фотки = ПолучениеФотокарточек(ИндКоды);
			НайденныеФотки = Фотки[0].images.common;
			Если Фотки[0].images.main <> "" Тогда
				НайденныеФотки.Вставить(0, Фотки[0].images.main);
			КонецЕсли;
		Исключение
			НайденныеФотки = Новый массив;
		КонецПопытки;
			МассивФото = Новый массив;

			Текст = НайденныеФотки;
			Если НайденныеФотки <> Неопределено И НайденныеФотки <> "" Тогда
			
		//	стр.колфото = 1;  

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
			КонецЕсли;
			
			Исключение
			МассивФото.Добавить("");	
			КонецПопытки;
			Итер = итер +1;
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name", Строка(стр.Товар));
			СтруктураТоваров.Вставить("position", стр.НомерСтроки);
			СтруктураТоваров.Вставить("price", стр.Цена);
			СтруктураТоваров.Вставить("count", Строка(стр.Количество));
			СтруктураТоваров.Вставить("sum", Строка(стр.Сумма));
			СтруктураТоваров.Вставить("issued", Строка(стр.СтатусТовара));
			СтруктураТоваров.Вставить("code", Строка("00" + Код));
			СтруктураТоваров.Вставить("id", Строка(стр.Партия));
			СтруктураТоваров.Вставить("type","CARD_PRODUCT");
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("shelf", Строка(ПолучитьМесто(стр.Партия)));	 
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
			СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
			СтруктураТоваров.Вставить("photos", МассивФото);
			СтруктураТоваров.Вставить("state", Строка(стр.СтатусТовара));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("cancel", стр.Отменено);
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("availability_in_k_warehouse", ЕстьНаКСкладе(стр.Товар));

			МассивТоваров.Добавить(СтруктураТоваров);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("products", МассивТоваров);
	СтруктураИнфо.Вставить("products", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ОбновитьПродажуrefreshsale(Запрос)
		Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Номерзаявки = Массив.id;
	Запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер", Номерзаявки);
	Выборка = запросзаявки.Выполнить().Выбрать();

	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();

		ЗаписатьJSON(ЗаписьJSON, СформироватьСтруктуруОшибки("Такой заявки нет!",
			"Ошибка при вызове метода контекста (Выполнить)"));
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();

		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

		Ответ.УстановитьТелоИзСтроки( СтрокаДляОтвета);
		Возврат Ответ;
	КонецЕсли;
	
		
	ЗапросСтрокПродажи = Новый Запрос;
	ЗапросСтрокПродажи.Текст = "ВЫБРАТЬ
							   |	ПродажаЗапчастейТаблица.Партия,
							   |	ПродажаЗапчастейТаблица.Товар
							   |ИЗ
							   |	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
							   |ГДЕ
							   |	ПродажаЗапчастейТаблица.Ссылка.ЗаказКлиента = &НомерПродажи";
	ЗапросСтрокПродажи.УстановитьПараметр("НомерПродажи", Выборка.ссылка);
	ТЧ_Продажи = ЗапросСтрокПродажи.Выполнить().Выгрузить();

	ЗапросСтрокЗаявки = Новый Запрос;
	ЗапросСтрокЗаявки.Текст = "ВЫБРАТЬ
							  |	ЗаказКлиентаТовары.Ссылка,
							  |	ЗаказКлиентаТовары.НомерСтроки,
							  |	ЗаказКлиентаТовары.Номенклатура КАК Товар,
							  |	ЗаказКлиентаТовары.ЦенаОригинала,
							  |	ЗаказКлиентаТовары.Количество,
							  |	ЗаказКлиентаТовары.Цена,
							  |	ЗаказКлиентаТовары.Сумма,
							  |	ЗаказКлиентаТовары.Отменено,
							  |	ЗаказКлиентаТовары.Склад,
							  |	ЗаказКлиентаТовары.СуммаНДС,
							  |	ЗаказКлиентаТовары.Комментарий,
							  |	ЗаказКлиентаТовары.ПредлагаемаяЦена,
							  |	ЗаказКлиентаТовары.Партия,
							  |	ЗаказКлиентаТовары.Проверено,
							  |	ЗаказКлиентаТовары.Комментарий1,
							  |	ЗаказКлиентаТовары.НН,
							  |	ЗаказКлиентаТовары.МСК,
							  |	ЗаказКлиентаТовары.ЕКБ,
							  |	ЗаказКлиентаТовары.ЦенаСоСкидкойНаценкой
							  |ИЗ
							  |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
							  |ГДЕ
							  |	ЗаказКлиентаТовары.Ссылка = &Ссылка";
	ЗапросСтрокЗаявки.УстановитьПараметр("Ссылка", Выборка.Ссылка);
	ТЧ_Заявки = ЗапросСтрокЗаявки.Выполнить().Выгрузить();
//ОбъектПродажи = документы.пВыборка.Продажа.Получитьобъект();
ОбъектПродажи = Документы.ПродажаЗапчастей.НайтиПоРеквизиту("ЗаказКлиента",Выборка.ссылка).ПолучитьОбъект();
	Для Каждого СтрокаТЧ_Заявки Из ТЧ_Заявки Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Товар", СтрокаТЧ_Заявки.Товар);
		Отбор.Вставить("Партия", СтрокаТЧ_Заявки.партия);

		НайденныеСтроки = ТЧ_Продажи.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			
			НоваяСтрокаПродажи = ОбъектПродажи.Таблица.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПродажи, СтрокаТЧ_Заявки);

			
		КонецЕсли;
		
	КонецЦикла;
	ОбъектПродажи.Записать();
	Для Каждого СтрокаТч_Продажи из ОбъектПродажи.Таблица Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Товар", СтрокаТч_Продажи.Товар);
		Отбор.Вставить("Партия", СтрокаТч_Продажи.партия);

		НайденныеСтроки = ТЧ_Заявки.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ОбъектПродажи.Таблица.удалить(СтрокаТч_Продажи);	
			
		КонецЕсли;
		
	КонецЦикла;
	ОбъектПродажи.Записать();
	
	
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Данные продажи " +ОбъектПродажи.Номер + " обновлены.");
	Возврат Ответ;
КонецФункции

Функция СписатьДетальDeleteProduct(Запрос)
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);

	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	ИндКод        = Справочники.ИндКод.НайтиПоНаименованию(Массив.id);
	Товар         = ИндКод.Владелец;
	Машина        = ПолучитьМашину(ИндКод);
	Комментарий   = Массив.coment;

/// +++ Комлев 24/07/24 +++ 
	ГородДетали = ПолучитьСкладДетали(ИндКод).Город;
	Склад = ПолучитьСкладДетали(ИндКод);
	МестоРаботыСотрудника = Справочники.Сотрудники.НайтиПоКоду(Массив.author).МестоРаботы;
	Если Строка(ГородДетали) <> Строка(МестоРаботыСотрудника) Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Деталь в другом городе.");
		Возврат Ответ;
	КонецЕсли;
/// --- Комлев 24/07/24 --- 

	ССылкаСписания = ПолучитьСписание(Ответственный, Склад);
	Если ССылкаСписания <> Неопределено Тогда
		Объектсписания = ССылкаСписания.ПолучитьОбъект();
	Иначе
		Объектсписания  = Документы.СписаниеЗапчастей.СоздатьДокумент();
		Объектсписания.Склад = Склад;
		Объектсписания.дата = ТекущаяДата();
		Объектсписания.Ответственный = Ответственный;
		Объектсписания.Организация = Справочники.Организация.НайтиПоКоду("000000005");

		Объектсписания.Записать();
	КонецЕсли;
	НоваястрокаСписания = Объектсписания.Товары.Добавить();

	НоваястрокаСписания.Номенклатура = Товар;
	НоваястрокаСписания.Инициатор    = Ответственный;
	НоваястрокаСписания.Количество   = 1;
	НоваястрокаСписания.Партия       = ИндКод;
	НоваястрокаСписания.Автомобиль   = Машина;
	НоваястрокаСписания.Количество   = 1;
	НоваястрокаСписания.Комментарий  = Комментарий;

	Объектсписания.Записать(РежимЗаписиДокумента.Проведение);

	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("индкод", НоваястрокаСписания.Партия);

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	ТекстОтвета = СтрШаблон("Списано в документ %1",  Объектсписания.Номер);
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета);
	Возврат Ответ;
КонецФункции

Функция ПолучитьСкладДетали(ИндКод)
	/// +++ Комлев 24/07/24 +++
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления1Остатки.Склад.Ссылка КАК Склад
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки(, индкод = &ИндКод) КАК РегистрНакопления1Остатки
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0";

	Запрос.УстановитьПараметр("ИндКод", ИндКод);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Склад;
	КонецЦикла;
	
	/// --- Комлев 24/07/24 ---
КонецФункции

Функция ПолучитьСписание(Ответственный, Склад)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеЗапчастейТаблица.Ссылка КАК Ссылка,
	|	СУММА(СписаниеЗапчастейТаблица.Количество) КАК Товар
	|ИЗ
	|	Документ.СписаниеЗапчастей.Товары КАК СписаниеЗапчастейТаблица
	|ГДЕ
	|	СписаниеЗапчастейТаблица.Ссылка.Ответственный = &Ответственный
	|	И СписаниеЗапчастейТаблица.Ссылка.Склад = &Склад
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗапчастейТаблица.Ссылка
	|ИМЕЮЩИЕ
	|	СУММА(СписаниеЗапчастейТаблица.Количество) < 100
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеЗапчастейТаблица.Ссылка.Дата УБЫВ";
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	/// +++ Комлев 24/07/24 +++
	Запрос.УстановитьПараметр("Склад", Склад);

	РезультатЗапроса = запрос.Выполнить();

	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл

		Возврат Выборка.Ссылка;

	КонецЦикла;
	
	
	/// --- Комлев 24/07/24 ---
КонецФункции


Функция ПолучитьРолиПользователейgetuserroles(Запрос)
	
	///+ГомзМА 23.07.2024
	ЗапросРолей = Новый Запрос;
	ЗапросРолей.Текст = "ВЫБРАТЬ
	|	ДолжностиДляУК.Ссылка КАК Ссылка,
	|	ДолжностиДляУК.Код КАК Код
	|ИЗ
	|	Справочник.ДолжностиДляУК КАК ДолжностиДляУК";
	
	Выборка = ЗапросРолей.Выполнить().Выбрать();
	МассивРолей = Новый Массив;
	Пока Выборка.Следующий() Цикл

		СтруктураРолей = Новый Структура;
		СтруктураРолей.Вставить("name", Строка(Выборка.Ссылка));
		СтруктураРолей.Вставить("id", Строка(Выборка.Код));

		МассивРолей.Добавить(СтруктураРолей);
		///-ГомзМА 22.03.2024
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивРолей);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
	///-ГомзМА 23.07.2024
	
КонецФункции

Функция ИзменитьПродажуeditsale(Запрос)
	
	///+ГомзМА 23.07.2024
	ЗапросПродажи = Новый Запрос;
	ЗапросПродажи.Текст = текстДляПродажи();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив  = ПрочитатьJSON(ЧтениеJSON);
		
	ЗапросПродажи.УстановитьПараметр("Номер", Массив.id);
	Выборка = ЗапросПродажи.Выполнить().Выбрать();
	
	Пока выборка.Следующий() Цикл
		ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();
		ОбъектПродажи.Клиент = Справочники.Клиенты.НайтиПоКоду(Массив.client);

		ОбъектПродажи.Записать();
	КонецЦикла;

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	
	Возврат Ответ;
	///-ГомзМА 23.07.2024
	
КонецФункции

Функция СоздатьКлиентаcreateclient(Запрос)

	///+ГомзМА 23.07.2024
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);

	НомерКлиента = ПолучитьНормализованныйНомер(Массив.phone);

	Телефон= СокрЛП(Массив.phone);
	МассивСтрок = Новый Массив;
	Для Сч = 1 По СтрДлина(Телефон) Цикл
		МассивСтрок.Добавить(Сред(Телефон, Сч, 1));
	КонецЦикла;
		
	МассивСтрок[2] = " " + МассивСтрок[2];
	МассивСтрок[5] = " " + МассивСтрок[5];
	МассивСтрок[8] = "-" + МассивСтрок[8];
	МассивСтрок[10] = "-" + МассивСтрок[10];
	Телефон = СтрСоединить(МассивСтрок, "");

	ЗапросКлиента = Новый запрос;
	ЗапросКлиента.Текст = "ВЫБРАТЬ
						  |	Клиенты.Код,
						  |	Клиенты.Наименование
						  |ИЗ
						  |	Справочник.Клиенты КАК Клиенты
						  |ГДЕ
						  |	Клиенты.Телефон = &Телефон
						  |	ИЛИ Клиенты.Телефон = &ТелефонБезМаски";

	ЗапросКлиента.УстановитьПараметр("Телефон", Телефон);
	ЗапросКлиента.УстановитьПараметр("ТелефонБезМаски", Массив.phone);

	РезультатЗапроса = ЗапросКлиента.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Клиент уже существует!");

	Иначе
		//Создать нового клиента
		НовыйКлиент = Справочники.Клиенты.СоздатьЭлемент();
		НовыйКлиент.Наименование = Массив.client_name;
		НовыйКлиент.Телефон = НомерКлиента;
		НовыйКлиент.Записать();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Клиент успешно создан!");
	КонецЕсли;

	Возврат Ответ;
	///-ГомзМА 23.07.2024
	
КонецФункции

Функция ПолучитьСписокКлиентовgetlistclients(Запрос)

	///+ГомзМА 26.07.2024
	Попытка
		СтрокаПоиска = "Где" + Символы.ПС + "	 (Клиенты.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"""
			+ Символы.ПС + " ИЛИ Клиенты.Телефон ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")";

		ЗапросКлиентов = Новый Запрос;

		Текст = "ВЫБРАТЬ ПЕРВЫЕ 100000
				|	Клиенты.Ссылка КАК Ссылка,
				|	Клиенты.Код КАК Код,
				|	Клиенты.Наименование КАК Наименование,
				|	Клиенты.Телефон КАК Телефон,
				|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
				|ПОМЕСТИТЬ ВТ_СписокКлиентов
				|ИЗ
				|	Справочник.Клиенты КАК Клиенты
				|%2
				|
				|УПОРЯДОЧИТЬ ПО
				|	Код УБЫВ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ %1
				|	ВТ_СписокКлиентов.Ссылка КАК Ссылка,
				|	ВТ_СписокКлиентов.Код КАК Код,
				|	ВТ_СписокКлиентов.Наименование КАК Наименование,
				|	ВТ_СписокКлиентов.Телефон КАК Телефон,
				|	ВТ_СписокКлиентов.НомерЗаписи КАК НомерЗаписи
				|ИЗ
				|	ВТ_СписокКлиентов КАК ВТ_СписокКлиентов
				|ГДЕ
				|	ВТ_СписокКлиентов.НомерЗаписи >= &НачинаяСЗаписи";

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросКлиентов.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), " ");
		Иначе
			ЗапросКлиентов.Текст =  СтрШаблон(Текст, Формат(10000, "ЧГ="), СтрокаПоиска);
			ЗапросКлиентов.УстановитьПараметр("Наименование", "%"
				+ ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;

		ЗапросКлиентов.УстановитьПараметр("НачинаяСЗаписи", 0);

		ОбщееКолво = ЗапросКлиентов.Выполнить().Выбрать().Количество();

		Если Запрос.ПараметрыURL["text"] = "00" Тогда
			ЗапросКлиентов.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), " ");
		Иначе
			ЗапросКлиентов.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["count"]) > 0,
				Запрос.ПараметрыURL["count"], 10000), "ЧГ="), СтрокаПоиска);
			ЗапросКлиентов.УстановитьПараметр("Наименование", "%"
				+ ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(
		Запрос.ПараметрыURL["text"])) + "%");
		КонецЕсли;

		Если Число(((Запрос.ПараметрыURL["count"]) * (Запрос.ПараметрыURL["page"]))) > 0 И Число(
		Запрос.ПараметрыURL["page"]) > 1 Тогда
			ЗапросКлиентов.УстановитьПараметр("НачинаяСЗаписи", Число(((Запрос.ПараметрыURL["count"])
				* (Запрос.ПараметрыURL["page"] - 1) + 1)));
		Иначе
			ЗапросКлиентов.УстановитьПараметр("НачинаяСЗаписи", 0);
		КонецЕсли;
		СписокПоиска = ЗапросКлиентов.Выполнить().Выгрузить();

		МассивКлиентов = Новый Массив;
		Для Каждого Результат Из СписокПоиска Цикл
			СтруктураКлиента = Новый Структура;
			СтруктураКлиента.Вставить("name", Строка(Результат.Ссылка));
			СтруктураКлиента.Вставить("id", Результат.Код);
			СтруктураКлиента.Вставить("phone", Результат.Телефон);
			МассивКлиентов.Добавить(СтруктураКлиента);
		КонецЦикла;

		Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
		Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

		СтруктураИнфо= Новый Структура;
		СтруктураИнфо.Вставить("pages", Итог);
		СтруктураИнфо.Вставить("count", ОбщееКолво);
		СтруктураИнфо.Вставить("clients", МассивКлиентов);

		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("info", СтруктураИнфо);

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

		Возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		Информация = ИнформацияОбОшибке();
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		Информация = ИнформацияОбОшибке();
		ЗаписатьJSON(ЗаписьJSON, "Не удалось получить список клиентов!");
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);

	КонецПопытки;
	Возврат Ответ;
	///-ГомзМА 26.07.2024
	
КонецФункции

Функция ПолучитьБонусыПоПродажеgetbonusbysale(Запрос)
	НачалоОтбора = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	КонецОтбора  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));

	//МассивОтвета = Новый Массив;
	СтруктураОтвета = Новый Структура;

		ЗапросБонусыПоПродажам = Новый Запрос;
		ЗапросБонусыПоПродажам.Текст = "ВЫБРАТЬ
		|	БонусыСотрудниковОтПродажи.Сотрудник,
		|	СУММА(БонусыСотрудниковОтПродажи.Сумма) КАК Сумма,
		|	СУММА(БонусыСотрудниковОтПродажи.Бонус) КАК Бонус,
		|	БонусыСотрудниковОтПродажи.Роль КАК Роль
		|ИЗ
		|	РегистрСведений.БонусыСотрудниковОтПродажи КАК БонусыСотрудниковОтПродажи
		|ГДЕ
		|	БонусыСотрудниковОтПродажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И БонусыСотрудниковОтПродажи.Сотрудник = &Сотрудник
		|СГРУППИРОВАТЬ ПО
		|	БонусыСотрудниковОтПродажи.Сотрудник,
		|	БонусыСотрудниковОтПродажи.Роль";

	ЗапросБонусыПоПродажам.УстановитьПараметр("Датаначала", 	НачалоОтбора);
	ЗапросБонусыПоПродажам.УстановитьПараметр("ДатаОкончания", 	КонецОтбора);
	ЗапросБонусыПоПродажам.УстановитьПараметр("Сотрудник", 		Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["id"]).Пользователь);
	
	РезультатЗапроса = ЗапросБонусыПоПродажам.Выполнить().Выбрать();
СуммаБонусовМенеджера = 0;
СуммаБонусовКладовщика = 0;
	//МассивБонусовПоПродажам = Новый Массив;
	Пока РезультатЗапроса.Следующий() Цикл
		Если Строка(РезультатЗапроса.Роль) = "Менеджер" Тогда
		СуммаБонусовМенеджера = СуммаБонусовМенеджера + РезультатЗапроса.Бонус;
		Иначе 
		СуммаБонусовКладовщика = СуммаБонусовКладовщика + РезультатЗапроса.Бонус;
		КонецЕсли;
	КонецЦикла;
	
	
			ЗапросБонусыПоПродажамОбщ = Новый Запрос;
		ЗапросБонусыПоПродажамОбщ.Текст = "ВЫБРАТЬ
		|	БонусыСотрудниковОтПродажи.Сотрудник,
		|	СУММА(БонусыСотрудниковОтПродажи.Сумма) КАК Сумма,
		|	СУММА(БонусыСотрудниковОтПродажи.Бонус) КАК Бонус,
		|	БонусыСотрудниковОтПродажи.Роль КАК Роль
		|ИЗ
		|	РегистрСведений.БонусыСотрудниковОтПродажи КАК БонусыСотрудниковОтПродажи
		|ГДЕ
		|	 БонусыСотрудниковОтПродажи.Сотрудник = &Сотрудник
		|СГРУППИРОВАТЬ ПО
		|	БонусыСотрудниковОтПродажи.Сотрудник,
		|	БонусыСотрудниковОтПродажи.Роль";


	ЗапросБонусыПоПродажамОбщ.УстановитьПараметр("Сотрудник", 		Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["id"]).Пользователь);
	
	РезультатЗапроса = ЗапросБонусыПоПродажам.Выполнить().Выбрать();
СуммаБонусовМенеджераобщ = 0;
СуммаБонусовКладовщикаобщ = 0;
	//МассивБонусовПоПродажам = Новый Массив;
	Пока РезультатЗапроса.Следующий() Цикл
		Если Строка(РезультатЗапроса.Роль) = "Менеджер" Тогда
		СуммаБонусовМенеджераобщ = СуммаБонусовМенеджераобщ + РезультатЗапроса.Бонус;
		Иначе 
		СуммаБонусовКладовщикаобщ = СуммаБонусовКладовщикаобщ + РезультатЗапроса.Бонус;
		КонецЕсли;
	КонецЦикла;
	
	
	СтруктураСборки = Новый Структура;
	СтруктураПродажи = Новый Структура;
	
	СтруктураСборки.Вставить("sum_all_time", СуммаБонусовКладовщикаобщ);
	СтруктураСборки.Вставить("sum_current_range", СуммаБонусовКладовщика);
	
	СтруктураПродажи.Вставить("sum_all_time", СуммаБонусовМенеджераобщ);
	СтруктураПродажи.Вставить("sum_current_range", СуммаБонусовМенеджера);
	
		//СтруктураОтвета.Вставить("p", МассивБонусовПоПродажам);
		СтруктураОтвета.Вставить("sborka", СтруктураСборки);
		СтруктураОтвета.Вставить("sales", СтруктураПродажи);
		
		
		//МассивОтвета.Добавить(СтруктураОтвета);


	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;

КонецФункции

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

Функция текстДляЗаявки()
	Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Клиент КАК Клиент,
	|	ЗаказКлиента.Состояние КАК Состояние,
	|	ЗаказКлиента.Ответственный КАК Ответственный,
	|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
	|	ЗаказКлиента.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ЦенаОригинала КАК ЦенаОригинала,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		Отменено КАК Отменено,
	|		Склад КАК Склад,
	|		СуммаНДС КАК СуммаНДС,
	|		Комментарий КАК Комментарий,
	|		ПредлагаемаяЦена КАК ПредлагаемаяЦена,
	|		Партия КАК Партия,
	|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Товары.Партия) КАК Партия2,
	|		Номенклатура.Код КАК Код) КАК Товары,
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
	|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ЗаказКлиента.Комментарий КАК Комментарий,
	|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
	|	ЗаказКлиента.НомерПродажи
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция текстДляТовара()
	Текстзапроса = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	РегИндНомер.Состояние КАК Состояние,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	РегИндНомер.Ответственный КАК Учетчик,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
				   |	Номенклатура.Размеры КАК Размеры,
				   |	Номенклатура.Вес КАК Вес,
				   |	Номенклатура.выс КАК выс,
				   |	Номенклатура.длин КАК длин,
				   |	Номенклатура.шир КАК шир,
				   |РегистрНакопления1Остатки.КолвоОстаток Как Остаток,
				   |	РегИндНомер.индкод.Владелец.Код КАК Код,
				   |ВЫБОР
				   |Когда регистрНакопления1Остатки.КолвоОстаток > 0 Тогда
				   |""Есть в наличии""
				   |Иначе
				   |""Товар продан""
				   |
				   |КОНЕЦ КАК ФактНаличия
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		Левое СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
				   |		ПО ИндНомер.индкод.Владелец.Ссылка = Номенклатура.Ссылка
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |{ГДЕ
				   |	(РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Состояние КАК Состояние,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Учетчик КАК Учетчик,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
				   |	ВТ_данныеНоменклатур.ФактНаличия КАК ФактНаличия,
				   |ВТ_данныеНоменклатур.Остаток КАК Остаток,
				   |	ВТ_данныеНоменклатур.Код КАК Код,
				   |	ВТ_данныеНоменклатур.Размеры КАК Размеры,
				   |	ВТ_данныеНоменклатур.Вес КАК Вес,
				   |	ВТ_данныеНоменклатур.выс КАК выс,
				   |	ВТ_данныеНоменклатур.длин КАК длин,
				   |	ВТ_данныеНоменклатур.шир КАК шир
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";

	Возврат Текстзапроса;
КонецФункции

Функция текстРекомендуемоеМестоХранения()
	
	///+ГомзМА 20.05.2024
	Текстзапроса = "ВЫБРАТЬ
				   |	Номенклатура.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ВТ_Номенклатура
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.Код = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
				   |		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ 1
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_данныеНоменклатур.индкод) КАК Количество,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |СГРУППИРОВАТЬ ПО
				   |	ВТ_данныеНоменклатур.Адрес,
				   |	ВТ_данныеНоменклатур.Склад,
				   |	ВТ_данныеНоменклатур.Город,
				   |	ВТ_данныеНоменклатур.Поддон
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Количество УБЫВ";
	Возврат Текстзапроса;
	///-ГомзМА 20.05.2024

КонецФункции

Функция РедактироватьТовар(Индкод, Комментарий = Неопределено, Цена = Неопределено, Наименование = Неопределено, Автор = Неопределено)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена,
				   |	ИндНомер.индкод.Владелец.Ссылка КАК Номенклатура
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", индкод);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Нет такого'"));
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда

		НовыйНомер = НаборЗаписей[0];
		Если цена > 0 И цена <> Неопределено Тогда
			НовыйНомер.цена = цена;
		КонецЕсли;

		Если (комментарий <> " " Или комментарий <> "") И комментарий <> Неопределено Тогда
			НовыйНомер.комментарий = комментарий;
		КонецЕсли;
		
		/// Комлев +++ 23/07/24 +++
		
		Если Автор <> Неопределено Тогда
			Сотрудник = Справочники.Сотрудники.НайтиПоКоду(Автор).Наименование;
		КонецЕсли;
		
		СтароеНазвание = выборка.Номенклатура.Наименование;
		НоменклатураСсылка = выборка.Номенклатура;
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		Если Наименование <> Неопределено И СтароеНазвание <> Наименование Тогда
			
			НоменклатураОбъект.Наименование = Наименование;
			НоменклатураОбъект.Лог = НоменклатураОбъект.Лог + Символы.ПС + Формат(ТекущаяДата(), "ДЛФ=DD;") + " "
				+ Сотрудник + " изменил наименование с " + """" + СтароеНазвание + """" + ", " + "на " + """" + Наименование + """" +  "."
				+ Символы.ПС
				+ "--------------------------------------------------------------------------------------------------------------------------";
		КонецЕсли;

/// Комлев +++ 23/07/24 +++
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Успех'"));
	КонецЕсли;

	НаборЗаписей.Записать();
	НоменклатураОбъект.Записать();
	Возврат ответ;

КонецФункции

Функция ПолучитьФотографа(ИндКод)
	
	///+ГомзМА 21.02.2024 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "v1/product/" + ИндКод + "/last_date/tabnum";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");

		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("id", ИндКод);
		
		// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		//Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		Ответ = Соединение.Получить(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение

		Возврат Неопределено;
	КонецПопытки;
	///-ГомзМА 21.02.2024

КонецФункции

Функция РедактироватьПолку(Индкод, Место = Неопределено, Автор)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", Индкод);

	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;

	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		
		///+ГомзМА 31.01.2024
//		Если СтрНайти(НаборЗаписей[0].Стеллаж, "Korzina") > 0 И СтрНайти(Место, "Korzina") > 0 Тогда
//			Ответ = Новый HTTPСервисОтвет(415);
//			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//			Ответ.УстановитьТелоИзСтроки("Невозможно переместить в корзину. Деталь находится у другого пользователя в "
//				+ НаборЗаписей[0].Стеллаж);
//			Возврат ответ;
//		Иначе
			НовыйНомер = НаборЗаписей[0];
			Полка = Справочники.Стеллаж.НайтиПоНаименованию(место);
			Если Полка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
				Лог =  " сменил полку с " + НовыйНомер.Стеллаж + " на " + Полка;
				ЛогированиеИндНомера(НовыйНомер.индкод, Автор, Лог, Полка, , НовыйНомер.Стеллаж, НовыйНомер.Поддон);
				НовыйНомер.Стеллаж = Полка;
				НовыйНомер.Поддон = Справочники.Поддоны.ПустаяСсылка();

				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех");
				Если СтрНайти(Место, "Korzina") > 0 Тогда
					Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
					ТекстЛога = " Поместил в корзину " + Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Тележка",
						Полка)) + " " + Строка(Выборка.индкод.Владелец) + " с кодом " + индкод;
					//ИндКоды = Новый массив;
					//ИндКоды.Добавить(индкод);
					Фотки = ПолучениеФотоДляТелеги(индкод);
					НайденныеФотки = Фотки[0].urls;
					//ТекстЛога = ТекстЛога + Символы.ПС + НайденныеФотки[0];
					//@skip-check empty-except-statement
					Попытка
						Telegram_Сервер.ОтправитьКартинкуПользователю("-1001874958074", НайденныеФотки[0]);
					Исключение

					КонецПопытки;

					Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Автор) + ТекстЛога);
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЕсли;
			Возврат ответ;
		//КонецЕсли;
		///-ГомзМА 31.01.2024

	Иначе
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Полка не найдена");
		Возврат ответ;

	КонецЕсли;
КонецФункции

Функция РедактироватьПоддон(Индкод, Место = Неопределено, Автор)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", Индкод);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда

		НовыйНомер = НаборЗаписей[0];
		Поддон = Справочники.Поддоны.НайтиПоНаименованию(место);
		Если Поддон <> Справочники.Поддоны.ПустаяСсылка() Тогда
			Лог =  " сменил поддон с " + НовыйНомер.поддон + " на " + Поддон;

			ЛогированиеИндНомера(Строка(НовыйНомер.индкод), Автор, Лог, Строка(Поддон.Стеллаж), Поддон,
				НовыйНомер.Стеллаж, НовыйНомер.поддон);

			НовыйНомер.поддон = Поддон;
			НовыйНомер.Стеллаж = Поддон.Стеллаж;

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
		Иначе
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Поддон не найден");
		КонецЕсли;
	КонецЕсли;

	НаборЗаписей.Записать();
	Возврат ответ;

КонецФункции

//@skip-check method-too-many-params
Процедура ЛогированиеИндНомера(Индкод, Автор, Лог, Стеллажж = Неопределено, Поддон = Неопределено,
	ПредСтеллаж = Неопределено, ПредПоддон = Неопределено)
	Авторец = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогИндНомера.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.индкод = Справочники.ИндКод.НайтиПоНаименованию(индкод);
	//@skip-check use-non-recommended-method
	МенеджерЗаписиЛога.дата = ТекущаяДата();
	//@skip-check use-non-recommended-method
	МенеджерЗаписиЛога.период = ТекущаяДата();
	Если Поддон <> Неопределено Тогда  
		//Поддон = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.Поддон  = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	Если Стеллажж <> Неопределено Тогда  
		//Стеллажж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.ПредыдущийСтеллаж = ПредСтеллаж;
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	МенеджерЗаписиЛога.Ответственный = Авторец;
	МенеджерЗаписиЛога.Текст = "--------------------------" + Символы.ПС + Авторец + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Функция ПолучитьДопРеквизиты(ИндКод)
	Запрос = Новый Запрос;
	Запрос.текст = "ВЫБРАТЬ
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.Поддон) КАК Поддон,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
				   |	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
				   |	РегИндНомер.индкод.Владелец.Вес КАК Вес,
				   |	РегИндНомер.индкод.Владелец.выс КАК выс,
				   |	РегИндНомер.индкод.Владелец.длин КАК длин,
				   |	РегИндНомер.индкод.Владелец.шир КАК шир,
				   |	РегИндНомер.Состояние
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО РегИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	РегИндНомер.индкод.наименование = &ИндКод";

	Запрос.УстановитьПараметр("ИндКод", ИндКод);
	Выборка = Запрос.Выполнить().Выбрать();
	ВЫборка.следующий();
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("price", ВЫборка.Цена);
	СтруктураОтвета.Вставить("comment", Строка( ВЫборка.Комментарий));
	СтруктураОтвета.Вставить("shelf", Строка( ВЫборка.Адрес));
	СтруктураОтвета.Вставить("sklad", Строка( ВЫборка.Склад));
	СтруктураОтвета.Вставить("poddon", ВЫборка.Поддон);
	Возврат СтруктураОтвета;
КонецФункции
Функция ЕстьКириллица(ИсходнаяСтрока) Экспорт
	ИсходнаяСтрока=СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока) > 0 Тогда
		Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
//@skip-check use-non-recommended-method
			Если Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ПолучениеФото(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL());  
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		Для Каждого стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;
КонецФункции

Функция ПолучениеФотоДляТелеги(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v1/images?type=outlinks&ind_code=" + ИндКод;
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("id", ИндКод);
		//
		//
		//// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		//@skip-check module-unused-local-variable
		Для Каждого Стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;

КонецФункции

Функция текстДляНоменклатуры()
//	Текстзапроса = "ВЫБРАТЬ
//	|	Номенклатура.Ссылка КАК Ссылка
//	|ПОМЕСТИТЬ ВТ_Номенклатура
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.DirectText ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	Номенклатура.Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	Номенклатура.Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.Код ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	Номенклатура.Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод КАК индкод
//	|ПОМЕСТИТЬ ВТ_предКоды
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|ГДЕ
//	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|ГДЕ
//	|	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|ГДЕ
//	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
//	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
//	|ГДЕ
//	|	НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
//	|	РегИндНомер.индкод КАК индкод,
//	|	ВЫБОР
//	|		КОГДА РегИндНомер.Цена > 0
//	|			ТОГДА РегИндНомер.Цена
//	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
//	|	КОНЕЦ КАК Цена,
//	|	РегИндНомер.Комментарий КАК Комментарий,
//	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
//	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
//	|	ВЫБОР
//	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
//	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
//	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
//	|	КОНЕЦ КАК Адрес,
//	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
//	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
//	|	РегИндНомер.Поддон КАК Поддон,
//	|	РегистрНакопления1Остатки.Склад.Город КАК Город,
//	|	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
//	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
//	|	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
//	|	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
//	|	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1,
//	|	РегИндНомер.АвитоЧастник КАК АЧ
//	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
//	|ИЗ
//	|	ВТ_предКоды КАК ИндНомер
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
//	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
//	|		ПО ИндНомер.индкод = РегИндНомер.индкод
//	|ГДЕ
//	|	РегистрНакопления1Остатки.КолвоОстаток > 0
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ %1
//	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
//	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
//	|	ВТ_данныеНоменклатур.Цена КАК Цена,
//	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
//	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
//	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
//	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
//	|	ВТ_данныеНоменклатур.Склад КАК Склад,
//	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
//	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
//	|	ВТ_данныеНоменклатур.Город КАК Город,
//	|	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
//	|	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
//	|	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
//	|	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
//	|	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1,
//	|	ВТ_данныеНоменклатур.АЧ КАК АЧ
//	|ИЗ
//	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
//	|ГДЕ
//	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	НомерЗаписи";
//	Возврат текстзапроса;

Текстзапроса = "ВЫБРАТЬ
				   |	Номенклатура.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ВТ_Поиск
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.Код ПОДОБНО &наименование
				   |
				   |ОБЪЕДИНИТЬ
				   |
				   |ВЫБРАТЬ
				   |	Номенклатура.Ссылка
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.DirectText ПОДОБНО &наименование
				   |
				   |ОБЪЕДИНИТЬ
				   |
				   |ВЫБРАТЬ
				   |	Номенклатура.Ссылка
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.Артикул ПОДОБНО &наименование
				   |
				   |ОБЪЕДИНИТЬ
				   |
				   |ВЫБРАТЬ
				   |	Номенклатура.Ссылка
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.НомерПроизводителя ПОДОБНО &наименование
				   |
				   |ОБЪЕДИНИТЬ
				   |
				   |ВЫБРАТЬ
				   |	НоменклатураНомераЗамен.Ссылка
				   |ИЗ
				   |	Справочник.Номенклатура.НомераЗамен КАК НоменклатураНомераЗамен
				   |ГДЕ
				   |	НоменклатураНомераЗамен.НомерЗамены ПОДОБНО &наименование
				   |
				   |ОБЪЕДИНИТЬ
				   |
				   |ВЫБРАТЬ
				   |	НоменклатураКомплектность.Ссылка
				   |ИЗ
				   |	Справочник.Номенклатура.Комплектность КАК НоменклатураКомплектность
				   |ГДЕ
				   |	НоменклатураКомплектность.НомерПоиск ПОДОБНО &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ Первые 10000
				   |	СправочникНоменклатура.Ссылка КАК Ссылка,
				   |	СправочникНоменклатура.ВерсияДанных КАК ВерсияДанных,
				   |	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
				   |	СправочникНоменклатура.Предопределенный КАК Предопределенный,
				   |	СправочникНоменклатура.Код КАК Код,
				   |	СправочникНоменклатура.Наименование КАК Наименование,
				   |	СправочникНоменклатура.Артикул КАК Артикул,
				   |	СправочникНоменклатура.НомерПроизводителя КАК НомерПроизводителя,
				   |	СправочникНоменклатура.Производитель КАК Производитель,
				   |	СправочникНоменклатура.Состояние КАК Состояние,
				   |	СправочникНоменклатура.Бренд КАК Бренд,
				   |	СправочникНоменклатура.Фото КАК Фото,
				   |	СправочникНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
				   |	СправочникНоменклатура.ЭтоНоваяЗапчасть КАК ЭтоНоваяЗапчасть,
				   |	СправочникНоменклатура.РекомендованаяЦена КАК РекомендованаяЦена,
				   |	СправочникНоменклатура.ЦенаПроверена КАК ЦенаПроверена,
				   |	СправочникНоменклатура.ЦенаФиксирована КАК ЦенаФиксирована,
				   |	СправочникНоменклатура.Серия КАК Серия,
				   |	СправочникНоменклатура.Вес КАК Вес,
				   |	СправочникНоменклатура.Объем КАК Объем,
				   |	СправочникНоменклатура.длин КАК длин,
				   |	СправочникНоменклатура.шир КАК шир,
				   |	СправочникНоменклатура.выс КАК выс,
				   |	СправочникНоменклатура.Размеры КАК Размеры,
				   |	СправочникНоменклатура.МинимальныйОстаток КАК МинимальныйОстаток,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
				   |ПОМЕСТИТЬ ВТ_ПредВывод
				   |ИЗ
				   |	ВТ_Поиск КАК ВТ_Поиск
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
				   |		ПО ВТ_Поиск.Ссылка = СправочникНоменклатура.Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_ПредВывод.Ссылка КАК Ссылка,
				   |	ВТ_ПредВывод.Код КАК Код,
				   |	ВТ_ПредВывод.Наименование КАК Наименование,
				   |	ВТ_ПредВывод.Артикул КАК Артикул,
				   |	ВТ_ПредВывод.НомерПроизводителя КАК НомерПроизводителя,
				   |	ВТ_ПредВывод.Производитель КАК Производитель,
				   |	ВТ_ПредВывод.РекомендованаяЦена КАК Цена,
				   |	ВТ_ПредВывод.Состояние КАК Состояние,
				   |	ВТ_ПредВывод.Бренд КАК Бренд,
				   |	ВТ_ПредВывод.НомерЗаписи КАК НомерЗаписи
				   |ИЗ
				   |	ВТ_ПредВывод КАК ВТ_ПредВывод
				   |ГДЕ
				   |	ВТ_ПредВывод.НомерЗаписи > &НачинаяСЗаписи";
	Возврат текстзапроса;
КонецФункции

Функция КоличествоТоваровВКорзине(Тележка)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИндНомер.индкод) КАК Количество,
				   |	ИндНомер.Стеллаж КАК Стеллаж
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж = &Стеллаж
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ИндНомер.Стеллаж";
	Запрос.УстановитьПараметр("Стеллаж", Тележка);
	Выборка = запрос.Выполнить().Выбрать();

	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция СформироватьСтруктуруОшибки(Message, Details)

	СтруктураОтвета = Новый Структура;
	///СтруктураОтвета.Вставить("code", Сode);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("details", Details);

	Возврат СтруктураОтвета;
КонецФункции

Функция текстДляПродажи()
	Текст = "ВЫБРАТЬ
	|	ПродажаЗапчастей.Номер КАК Номер,
	|	ПродажаЗапчастей.Ссылка КАК ссылка,
	|	ПродажаЗапчастей.Дата КАК Дата,
	|	ПродажаЗапчастей.Клиент КАК Клиент,
	|	ПродажаЗапчастей.ИтогоРекв КАК ИтогоРекв,
	|	ПродажаЗапчастей.КтоПродал КАК КтоПродал,
	|	ПродажаЗапчастей.Таблица.(
	|		Товар КАК Товар,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		Партия КАК Партия,
	|		ПРЕДСТАВЛЕНИЕ(ПродажаЗапчастей.Таблица.Партия) КАК Партия2,
	|		НомерСтроки КАК НомерСтроки,
	|		СтатусТовара КАК СтатусТовара,
	|		Товар.Код КАК Код,
	|		Отменено КАК Отменено,
	|		Товар.Артикул КАК Артикул,
	|		Склад КАК Склад) КАК Таблица,
	|	ПродажаЗапчастей.ЗаказКлиента КАК ЗаказКлиента,
	|	ПродажаЗапчастей.WTpanel КАК СтатусОбработки,
	|	Сотрудники.Код КАК Код,
	|	ПродажаЗапчастей.ОтветственныйКладовщик КАК ОтветственныйКладовщик,
	|	ПродажаЗапчастей.СтатусЗаказаВТК КАК СтатусЗаказаВТК,
	|	ПродажаЗапчастей.Клиент.Телефон КАК КлиентТелефон,
	|	ПродажаЗапчастей.ПодстатусОбработки КАК подСтатусОбработки,
	|	ПродажаЗапчастей.ЕстьТрекНомер КАК ЕстьТрекНомер,
	|	ПродажаЗапчастей.ТрекНомер КАК ТрекНомер,
	|	ПродажаЗапчастей.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	|	ПродажаЗапчастей.Клиент.ИНН,
	|	ПродажаЗапчастей.Клиент.Паспорт,
	|	ПродажаЗапчастей.Счет,
	|	ПродажаЗапчастей.НомерУПД
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПродажаЗапчастей.ОтветственныйКладовщик = Сотрудники.Пользователь
	|ГДЕ
	|	ПродажаЗапчастей.Номер = &Номер";
	Возврат Текст;
КонецФункции
Функция ПолучитьМашину(ИндКодДетали)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	РегистрНакопления1.машина КАК машина
				   |ИЗ
				   |	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1
				   |ГДЕ
				   |	РегистрНакопления1.индкод = &индкод";
	Запрос.УстановитьПараметр("ИндКод", ИндКодДетали);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат выборка.машина;
КонецФункции

Процедура ЛогированиеWT10(Заявка, Автор, Лог)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогWT10.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.Источник = Заявка;
	МенеджерЗаписиЛога.Пользователь = Автор;
	МенеджерЗаписиЛога.Лог = "--------------------------" + Символы.ПС + Автор + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Функция ПроверкаПродаж(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
				   |	ПродажаЗапчастей.Ссылка КАК Ссылка
				   |ИЗ
				   |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
				   |ГДЕ
				   |	ПродажаЗапчастей.ЗаказКлиента = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

КонецФункции
Функция ПолучитьПоддон(Партия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.поддон КАК поддон
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.поддон;
КонецФункции

Функция ПолучитьМесто(Партия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.Стеллаж КАК Стеллаж
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.стеллаж;
КонецФункции

Функция получитьНомерТелефона(Юзер)

	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
				   |	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
				   |	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
				   |ИЗ
				   |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
				   |ГДЕ
				   |	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
				   |	И СотрудникиКонтактнаяИнформация.Ссылка.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Юзер);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат выборка.ТелефонСлужебный;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ПолучениеФотокарточек(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v2/card";//s/count/4";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		////Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("cardId", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		Для Каждого стр Из ИндКод Цикл
			url = Новый массив;
			МассивПустыхФото.Добавить(url);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;

КонецФункции

Функция ПолучитьМенеджера(Код)
	Возврат Справочники.Пользователи.НайтиПоКоду(Код);
КонецФункции


Функция ЕстьНаКСкладе(Номенклатура)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""%K-%""
				   |			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО ""%К-%"")
				   |	И ИндНомер.индкод.Владелец = &Владелец
				   |	И РегистрНакопления1Остатки.КолвоОстаток > 0";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьНормализованныйНомер(Номер)

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	ПромежуточныйНомер = "";
	ДопустимыеСимволы = "0123456789";
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	Для Сч1 = 1 По ДлинаНомера Цикл
		ТекСимвол = Сред(СокрЛП(Номер), Сч1, 1);
		Если СтрНайти(ДопустимыеСимволы, ТекСимвол) > 0 Тогда
			ПромежуточныйНомер = ПромежуточныйНомер + ТекСимвол;
			Если Лев(ПромежуточныйНомер, 1) = "8" Тогда
				ПромежуточныйНомер = "7";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Лев(ПромежуточныйНомер, 1) = "7" Тогда
		ПромежуточныйНомер = "+" + ПромежуточныйНомер;
	КонецЕсли;

	ФорматированныйНомер = Лев(ПромежуточныйНомер, 2) + " " + Сред(ПромежуточныйНомер, 3, 3) + " " + Сред(
		ПромежуточныйНомер, 6, 3) + "-" + Сред(ПромежуточныйНомер, 9, 2) + "-" + Сред(ПромежуточныйНомер, 11);

	Возврат ФорматированныйНомер;
	//Сергеев Ф.В. -- Дата: 14.05.2024

КонецФункции


Функция ПолучитьПродажуЧерезЗаявку(Номер)
	
	///+ГомзМА 25.07.2024
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПродажаЗапчастей.Номер КАК Номер
		|ИЗ
		|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		|ГДЕ
		|	ПродажаЗапчастей.ЗаказКлиента.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", Номер);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.Номер;
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 25.07.2024
КонецФункции

	
Функция	ТекстЗапросаПопулярныйТоварИзЗаявок()
//++ МазинЕС 24-07-2024
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ИндКод.ДатаПоступления) КАК ДатаПоступления,
		|	МАКСИМУМ(ЗаказКлиентаТовары.Партия.Наименование) КАК ПартияНаименование
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО (ЗаказКлиентаТовары.Ссылка = ЗаказКлиента.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИндКод КАК ИндКод
		|		ПО (ЗаказКлиентаТовары.Партия = ИндКод.Ссылка)
		|ГДЕ
		|	ЗаказКлиентаТовары.Партия <> ЗНАЧЕНИЕ(справочник.индкод.пустаяссылка)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Ссылка,
		|	ЗаказКлиентаТовары.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Период = ТекущаяДата(); 
	Запрос.УстановитьПараметр("Период", Период);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	МассивИндкод = Новый массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивИндкод.добавить (ВыборкаДетальныеЗаписи.ПартияНаименование);
	КонецЦикла;
	
	Фотки = ПолучениеФотоБезИндНомер(МассивИндкод); 
	
Возврат Фотки; 
//-- МазинЕС 24-07-2024	
КонецФункции

Функция ПолучениеФотоБезИндНомер(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL());  
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
		Иначе
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			ответ = Неопределено;
		КонецЕсли;
		Массив = Новый Массив; 
	
		Возврат Ответ; 
	Исключение
		МассивПустыхФото = Новый массив;

		Для Каждого стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;
КонецФункции


Функция УбираемЛидНули(НомерДок) 
Если Лев(НомерДок, 1) = "0" Тогда
	Возврат УбираемЛидНули(Прав(НомерДок, СтрДлина(НомерДок) - 1)); 
Иначе
	Возврат НомерДок;
КонецЕсли;
КонецФункции
 
Функция ПолучитьКодСотрудника(Имя)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Код
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Имя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	Возврат ВыборкаДетальныеЗаписи.Код;
		
КонецФункции
#КонецОбласти




