#Область ОбработчикиСобытий

Функция ПолучитьАвторизациюAuthorization(Запрос)
	ЗапросСотрудника = Новый запрос;
	ЗапросСотрудника.Текст = "ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Организация КАК Организация,
	|	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ДолжностиСотрудниковСрезПоследних.ТипДоговора КАК ТипДоговора,
	|	ДолжностиСотрудниковСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втДолжности
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	Подразделение,
	|	Должность,
	|	ТипДоговора,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(втДолжности.Период) КАК Период
	|ПОМЕСТИТЬ втДолжностиПериоды
	|ИЗ
	|	втДолжности КАК втДолжности
	|
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(втДолжности.Организация) КАК Организация,
	|	МИНИМУМ(втДолжности.Подразделение) КАК Подразделение,
	|	МИНИМУМ(втДолжности.Должность) КАК Должность,
	|	МИНИМУМ(втДолжности.ТипДоговора) КАК ТипДоговора
	|ПОМЕСТИТЬ втДолжностиСотрудников
	|ИЗ
	|	втДолжности КАК втДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолжностиПериоды КАК втДолжностиПериоды
	|		ПО втДолжности.Сотрудник = втДолжностиПериоды.Сотрудник
	|			И (втДолжностиПериоды.Период = втДолжности.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	втДолжностиСотрудников.Организация КАК Организация,
	|	втДолжностиСотрудников.Подразделение КАК Подразделение,
	|	втДолжностиСотрудников.Должность КАК Должность,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втДолжностиСотрудников.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка) КАК Действующий,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	Сотрудники.МестоРаботы КАК МестоРаботы,
	|	Сотрудники.ПарольДляУК КАК ПарольДляУК,
	|	Сотрудники.Тележка КАК Тележка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолжностиСотрудников КАК втДолжностиСотрудников
	|		ПО (втДолжностиСотрудников.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	|ГДЕ
	|	(ТелефоныЛичные.ТелефонЛичный = &Телефон
	|			ИЛИ ТелефоныСлужебные.ТелефонСлужебный = &Телефон)
	|	И НЕ Сотрудники.Пользователь.Недействителен";
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	ЗапросСотрудника.УстановитьПараметр("Телефон", Строка(Массив.Phone));
	
	ВыборкаСотрудника = ЗапросСотрудника.Выполнить().Выбрать();
	Если ВыборкаСотрудника.Количество() > 0 Тогда
		ВыборкаСотрудника.Следующий();
		Если ВыборкаСотрудника.ПарольДляУК = Массив.Pass тогда 
			//ДанныеВBase64 = XMLСтрока(ВыборкаСотрудника.фото); // Получим Base64 хранилища значения
			//ДвоичныеДанные = Base64Значение(ДанныеВBase64);
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("name",      Строка(ВыборкаСотрудника.Наименование));
			СтруктураОтвета.Вставить("code",      Строка(ВыборкаСотрудника.Код));
			СтруктураОтвета.Вставить("company",   Строка(ВыборкаСотрудника.Организация));
			СтруктураОтвета.Вставить("post",      Строка(ВыборкаСотрудника.Должность));
			СтруктураОтвета.Вставить("birthdate", Строка(ВыборкаСотрудника.ДатаРождения));
			СтруктураОтвета.Вставить("pphone",    Строка(ВыборкаСотрудника.ТелефонЛичный));
			СтруктураОтвета.Вставить("wphone",    Строка(ВыборкаСотрудника.ТелефонСлужебный)); 
			СтруктураОтвета.Вставить("car",    Строка(ВыборкаСотрудника.Тележка));
			Если   ВыборкаСотрудника.Тележка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
				СтруктураОтвета.Вставить("car_items", КоличествоТоваровВКорзине(ВыборкаСотрудника.Тележка));
			Иначе
				СтруктураОтвета.Вставить("car_items", 0);	   
			КонецЕсли;
			
			//СтруктураОтвета.Вставить("Photo",ДвоичныеДанные ); 
			//signin
			// Роли = ВыборкаСотрудника.РолиWT10.Выгрузить();
			
			//МассивРолей = Новый массив;
			//
			//
			//Для Каждого стр из Роли Цикл 
			//	Структурароли = Новый Структура;
			//	Структурароли.Вставить("id",    Стр.Роль.Код);
			//	Структурароли.Вставить("title",    Строка(Стр.Роль)); 
			//	МассивРолей.Добавить(Структурароли);
			//КонецЦикла;
			//
			//СтруктураОтвета.Вставить("roles",    МассивРолей);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			
			ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
			
			
			
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			
			Ответ = Новый HTTPСервисОтвет(200);	
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			
			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			
			Возврат Ответ;
		Иначе 
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("{ text:""Пароль не верен"" }");
			Возврат Ответ;
		КонецЕсли;
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("{ text:""Нет такого"" }");
		Возврат Ответ;
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьСписокТоваровGetProductsList(Запрос)
	
	МассивСтеллажей = Новый Массив;
	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001068")); //RegionEKB
	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002014")); //RegionMSK
	МассивСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002015")); //RegionNN
	
	ЗапросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(10000, "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["text"]))+"%" ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	запросТовара.УстановитьПараметр("Стеллаж", МассивСтеллажей);
	
	
	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
	Если Выборкаобщ > 0 Тогда
	запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["text"]))+"%" );
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;
	
	Для каждого стр из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		Итер = итер+1;
		тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		СтруктураТоваров.Вставить("search",    Строка(стр.СтрокаПоиска));
		СтруктураТоваров.Вставить("search1",    Строка(стр.СтрокаПоиска1));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));                      
		СтруктураТоваров.Вставить("place",    Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("code",    Строка(стр.Код));
		СтруктураТоваров.Вставить("count",    Строка(стр.Остаток));
		СтруктураТоваров.Вставить("stack",    стр.Комплектация);
		
		СтруктураТоваров.Вставить("sity",    Строка(стр.Город));
		
		СтруктураТоваров.Вставить("id", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон)); 
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);
//	Если Лев(Запрос.ПараметрыURL["id"],1) = "П" Тогда
//		СтруктураИнфо.Вставить("polka",Строка(ПолучитьПолку(Строка(Запрос.ПараметрыURL["id"])))); 
//		//	Иначе
//		//		СтруктураТоваров.Вставить("polka",Строка(ПолучитьПолку(Строка(стр.Поддон)))); 
//	КонецЕсли;
//	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	КонецЕсли;
//ПолнотекстовыйПоиск.ОбновитьИндекс();

		
//	Итог = Выборкаобщ / ?(Число(Запрос.ПараметрыURL["count"]) = 0, Выборкаобщ, Число(Запрос.ПараметрыURL["count"]));
//	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	//СтруктураИнфо= Новый Структура;
//	СтруктураИнфо.Вставить("pages", Итог);
	//СтруктураИнфо.Вставить("count", МассивТоваров.Количество());

//	СтруктураОтвета = Новый Структура;
//	СтруктураОтвета.Вставить("info", СтруктураИнфо);
//	СтруктураОтвета.Вставить("data", МассивТоваров);

	//ПолнотекстовыйПоиск.УстановитьКоличествоЗаданийИндексирования(5);
	Страница = Число(Запрос.ПараметрыURL["page"]);
	КолВо    = Число(Запрос.ПараметрыURL["count"]);
	ПоисковаяСтрока = Строка(Запрос.ПараметрыURL["text"]);

	СписокПоиска=ПолнотекстовыйПоиск.СоздатьСписок();
	СписокПоиска.ПолучатьОписание = Ложь;
	МассивОтбор = Новый Массив;
	МассивТоваров = Новый Массив;
	СписокПоиска.РазмерПорции = КолВо;

	ТекущаяПозиция = КолВо * (Страница - 1);
	
	МассивОтбор.Добавить(Метаданные.РегистрыСведений.ИндНомер);
	СписокПоиска.ОбластьПоиска = МассивОтбор;
	ЛимитОшибок = Цел(СтрДлина(ПоисковаяСтрока) / 2);
СписокПоиска.СтрокаПоиска=""""+ПоисковаяСтрока  +"""";
	Если Страница = 1 Тогда
		СписокПоиска.ПерваяЧасть();
	Иначе
		СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
 	КонецЕсли;
 Если СписокПоиска.Количество() > 0 тогда

 Иначе
 	
		СписокПоиска.СтрокаПоиска=ПоисковаяСтрока + "#" + Строка(ЛимитОшибок - 1);
	Если Страница = 1 Тогда
		СписокПоиска.ПерваяЧасть();
	Иначе
		СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
 	КонецЕсли;	
 КонецЕсли;
 
 	
 	ОбщееКолво = СписокПоиска.ПолноеКоличество();
	ИндКоды = Новый массив;

	Для Каждого Результат Из СписокПоиска Цикл
		ИндКоды.Добавить(Строка(Результат.Значение.индкод));
	КонецЦикла;

	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;
	Для Каждого Результат Из СписокПоиска Цикл

		НайденныеФотки = Новый Массив;
		НайденныеФотки = Фотки[Итер].urls;

		МассивФото = Новый массив;

		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;

		КонецЕсли;
		Итер = Итер + 1;

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("id", Строка(Результат.Значение.индкод));
		СтруктураТоваров.Вставить("article", Строка(Результат.Значение.индкод.Владелец.Артикул));
		СтруктураТоваров.Вставить("category", Строка(Результат.Значение.индкод.Владелец.Подкатегория2));
		СтруктураТоваров.Вставить("name", Строка(Результат.Значение.индкод.Владелец));
		СтруктураТоваров.Вставить("photos", МассивФото);
		//@skip-check query-in-loop
		СтруктураДопРеквизитов = ПолучитьДопРеквизиты(Строка(Результат.Значение.индкод));
		СтруктураТоваров.Вставить("cost", СтруктураДопРеквизитов.cost);
		СтруктураТоваров.Вставить("comment", СтруктураДопРеквизитов.comment);
		СтруктураТоваров.Вставить("place", СтруктураДопРеквизитов.place);
		СтруктураТоваров.Вставить("sklad", СтруктураДопРеквизитов.sklad);
		СтруктураТоваров.Вставить("poddon", СтруктураДопРеквизитов.poddon);
		

 
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
 	

	Итог = ОбщееКолво / ?(Число(Запрос.ПараметрыURL["count"]) = 0, ОбщееКолво, Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог - Цел(Итог)) > 0, Цел(Итог) + 1, Цел(Итог));

	СтруктураИнфо= Новый Структура;
	СтруктураИнфо.Вставить("pages", Итог);
	СтруктураИнфо.Вставить("count", ОбщееКолво);

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
//	

	Возврат Ответ;
КонецФункции

Функция ПолучитьТоварGetProduct(Запрос)

	ЗапросТовара = Новый Запрос;
	ЗапросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));
	ЗапросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]));
	ЗапросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);

	ТЗ = ЗапросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;

	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	Итер = 0;
	
	///+ГомзМА 21.02.2024 
	Фотограф = ПолучитьФотографа(Запрос.ПараметрыURL["id"]);
	ФИОФотографа = "";
	ТабНомФотографа = "";
	Если Фотограф <> Неопределено Тогда
		ФИОФотографа = Справочники.Сотрудники.НайтиПоКоду(Фотограф.tabnum);
		ТабНомФотографа = Фотограф.tabnum;
	КонецЕсли;
	///-ГомзМА 21.02.2024

	Для Каждого стр Из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = Новый массив;
		Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

			стр.колфото = 1;

			Для Каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла;
		КонецЕсли;
		итер = итер + 1;
		тз.Сортировать("колФото Убыв");
		
		///+ГомзМА 20.05.2024
		РекомендованноеМестоХранения = Новый Массив;

		ЗапросРекомендованноеМесто = Новый Запрос;
		ЗапросРекомендованноеМесто.Текст = текстРекомендуемоеМестоХранения();

		ЗапросРекомендованноеМесто.УстановитьПараметр("Наименование", Строка(стр.код));
		//@skip-check query-in-loop
		РезультатЗапросаРекомендованноеМесто = ЗапросРекомендованноеМесто.Выполнить().Выбрать();

		РезультатЗапросаРекомендованноеМесто.Следующий();

		СтруктураРекомендованноеМесто = Новый Структура;
		СтруктураРекомендованноеМесто.Вставить("sklad", Строка(РезультатЗапросаРекомендованноеМесто.Склад));
		СтруктураРекомендованноеМесто.Вставить("place", Строка(РезультатЗапросаРекомендованноеМесто.Адрес));
		СтруктураРекомендованноеМесто.Вставить("poddon", Строка(РезультатЗапросаРекомендованноеМесто.Поддон));
		СтруктураРекомендованноеМесто.Вставить("count", Строка(РезультатЗапросаРекомендованноеМесто.Количество));

		РекомендованноеМестоХранения.Добавить(СтруктураРекомендованноеМесто);
		///-ГомзМА 20.05.2024

		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name", Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost", Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place", Строка(стр.Адрес));
		СтруктураТоваров.Вставить("uchetchik", Строка(стр.Учетчик));
		СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
		СтруктураТоваров.Вставить("state", Строка(стр.Состояние));
		СтруктураТоваров.Вставить("pk", стр.АвитоЧастник);
		СтруктураТоваров.Вставить("chek_size", стр.Размеры);
		СтруктураТоваров.Вставить("availability", стр.ФактНаличия);
		
		///+ГомзМА 21.02.2024
		СтруктураТоваров.Вставить("tabnum_photographer", Строка(ТабНомФотографа));
		СтруктураТоваров.Вставить("name_photographer", Строка(ФИОФотографа));
		///-ГомзМА 21.02.2024

		СтруктураТоваров.Вставить("length", стр.длин);
		СтруктураТоваров.Вставить("width", стр.шир);
		СтруктураТоваров.Вставить("height", стр.выс);
		СтруктураТоваров.Вставить("weight", стр.Вес);

		СтруктураТоваров.Вставить("code", Строка(стр.код));
		СтруктураТоваров.Вставить("id", Строка(стр.индкод));
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		///+ГомзМА 20.05.2024
		СтруктураТоваров.Вставить("recommended_place", СтруктураРекомендованноеМесто);
		///-ГомзМА 20.05.2024

		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция СменаМестаХраненияEditPlace(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Если Массив.type = 1 Тогда
		Ответ = РедактироватьПоддон(Массив.id, Массив.place, Массив.author);
	Иначе
		Ответ = РедактироватьПолку(Массив.id, Массив.place, Массив.author);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПолучитьТоварыПоИндкодамGetProductsById(Запрос)
	
	///+ГомзМА 04.07.2024
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	Индкода = Массив.ids;
	МассивИнфо = Новый Массив;
	
	Для Каждого Индкод Из Индкода Цикл
		запросТовара = Новый Запрос;
		запросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));  
	
		запросТовара.УстановитьПараметр("Наименование", Строка(Индкод)); 
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
		//@skip-check query-in-loop
		ТЗ = запросТовара.Выполнить().Выгрузить();
	
		//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
		ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
		ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;
	
		ИндКоды = тз.ВыгрузитьКолонку("индкод");
		Фотки = ПолучениеФото(ИндКоды);
		итер = 0;
	
		Для каждого стр из ТЗ Цикл
			НайденныеФотки = Новый Массив;
		
			НайденныеФотки = Фотки[итер].urls;
			МассивФото = новый массив;  
			Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
				стр.колфото = 1;  
			
				Для каждого Фотка Из НайденныеФотки Цикл
					Текст = "";
				
					Текст = Фотка;
					МассивФото.Добавить(Текст);
				КонецЦикла; 
			КонецЕсли;
			итер = итер+1;
			тз.Сортировать("колФото Убыв");
		
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
			СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
			СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
			СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
			СтруктураТоваров.Вставить("place",    Строка(стр.Адрес));
			СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
			СтруктураТоваров.Вставить("code",    Строка(стр.Код));
			СтруктураТоваров.Вставить("pk",    стр.АвитоЧастник);
		
			СтруктураТоваров.Вставить("count",    Строка(стр.Остаток));
			//СтруктураТоваров.Вставить("stack",    стр.Комплектация);
		
		
			СтруктураТоваров.Вставить("id", Строка(стр.индкод));   
			СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
			СтруктураТоваров.Вставить("photos", МассивФото);
			МассивТоваров.Добавить(СтруктураТоваров);
			МассивИнфо.Добавить(СтруктураТоваров);
		КонецЦикла;
	КонецЦикла;
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивИнфо);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
	
	Возврат Ответ;
	///-ГомзМА 04.07.2024
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция текстДляТовара()
	Текстзапроса = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	РегИндНомер.Состояние КАК Состояние,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	РегИндНомер.Ответственный КАК Учетчик,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
				   |	Номенклатура.Размеры КАК Размеры,
				   |	Номенклатура.Вес КАК Вес,
				   |	Номенклатура.выс КАК выс,
				   |	Номенклатура.длин КАК длин,
				   |	Номенклатура.шир КАК шир,
				   |РегистрНакопления1Остатки.КолвоОстаток Как Остаток,
				   |	РегИндНомер.индкод.Владелец.Код КАК Код,
				   |ВЫБОР
				   |Когда регистрНакопления1Остатки.КолвоОстаток > 0 Тогда
				   |""Есть в наличии""
				   |Иначе
				   |""Товар продан""
				   |
				   |КОНЕЦ КАК ФактНаличия
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		Левое СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
				   |		ПО ИндНомер.индкод.Владелец.Ссылка = Номенклатура.Ссылка
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |{ГДЕ
				   |	(РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ %1
				   |	ВТ_данныеНоменклатур.Наименование КАК Наименование,
				   |	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
				   |	ВТ_данныеНоменклатур.Цена КАК Цена,
				   |	ВТ_данныеНоменклатур.Состояние КАК Состояние,
				   |	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
				   |	ВТ_данныеНоменклатур.Артикул КАК Артикул,
				   |	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Учетчик КАК Учетчик,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон,
				   |	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
				   |	ВТ_данныеНоменклатур.ФактНаличия КАК ФактНаличия,
				   |ВТ_данныеНоменклатур.Остаток КАК Остаток,
				   |	ВТ_данныеНоменклатур.Код КАК Код,
				   |	ВТ_данныеНоменклатур.Размеры КАК Размеры,
				   |	ВТ_данныеНоменклатур.Вес КАК Вес,
				   |	ВТ_данныеНоменклатур.выс КАК выс,
				   |	ВТ_данныеНоменклатур.длин КАК длин,
				   |	ВТ_данныеНоменклатур.шир КАК шир
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |ГДЕ
				   |	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерЗаписи";

	Возврат Текстзапроса;
КонецФункции

Функция текстРекомендуемоеМестоХранения()
	
	///+ГомзМА 20.05.2024
	Текстзапроса = "ВЫБРАТЬ
				   |	Номенклатура.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ВТ_Номенклатура
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.Код = &Наименование
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ПОМЕСТИТЬ ВТ_предКоды
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Поддон.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.Стеллаж.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Наименование
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ИндНомер.индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
				   |		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
				   |	РегИндНомер.индкод КАК индкод,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Цена > 0
				   |			ТОГДА РегИндНомер.Цена
				   |		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
				   |	КОНЕЦ КАК Цена,
				   |	РегИндНомер.Комментарий КАК Комментарий,
				   |	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
				   |	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
				   |	ВЫБОР
				   |		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
				   |			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
				   |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
				   |	КОНЕЦ КАК Адрес,
				   |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
				   |	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
				   |	РегИндНомер.Поддон КАК Поддон,
				   |	РегистрНакопления1Остатки.Склад.Город КАК Город
				   |ПОМЕСТИТЬ ВТ_данныеНоменклатур
				   |ИЗ
				   |	ВТ_предКоды КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
				   |		ПО ИндНомер.индкод = РегИндНомер.индкод
				   |ГДЕ
				   |	РегистрНакопления1Остатки.КолвоОстаток > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ ПЕРВЫЕ 1
				   |	ВТ_данныеНоменклатур.Адрес КАК Адрес,
				   |	ВТ_данныеНоменклатур.Склад КАК Склад,
				   |	ВТ_данныеНоменклатур.Город КАК Город,
				   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_данныеНоменклатур.индкод) КАК Количество,
				   |	ВТ_данныеНоменклатур.Поддон КАК Поддон
				   |ИЗ
				   |	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
				   |СГРУППИРОВАТЬ ПО
				   |	ВТ_данныеНоменклатур.Адрес,
				   |	ВТ_данныеНоменклатур.Склад,
				   |	ВТ_данныеНоменклатур.Город,
				   |	ВТ_данныеНоменклатур.Поддон
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Количество УБЫВ";
	Возврат Текстзапроса;
	///-ГомзМА 20.05.2024

КонецФункции

Функция ПолучитьФотографа(ИндКод)
	
	///+ГомзМА 21.02.2024 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "v1/product/" + ИндКод + "/last_date/tabnum";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");

		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("id", ИндКод);
		
		// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		//Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		Ответ = Соединение.Получить(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение

		Возврат Неопределено;
	КонецПопытки;
	///-ГомзМА 21.02.2024

КонецФункции

Функция РедактироватьПолку(Индкод, Место = Неопределено, Автор)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", Индкод);

	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;

	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		
		///+ГомзМА 31.01.2024
		Если СтрНайти(НаборЗаписей[0].Стеллаж, "Korzina") > 0 И СтрНайти(Место, "Korzina") > 0 Тогда
			Ответ = Новый HTTPСервисОтвет(415);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Невозможно переместить в корзину. Деталь находится у другого пользователя в "
				+ НаборЗаписей[0].Стеллаж);
			Возврат ответ;
		Иначе
			НовыйНомер = НаборЗаписей[0];
			Полка = Справочники.Стеллаж.НайтиПоНаименованию(место);
			Если Полка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
				Лог =  " сменил полку с " + НовыйНомер.Стеллаж + " на " + Полка;
				ЛогированиеИндНомера(НовыйНомер.индкод, Автор, Лог, Полка, , НовыйНомер.Стеллаж, НовыйНомер.Поддон);
				НовыйНомер.Стеллаж = Полка;
				НовыйНомер.Поддон = Справочники.Поддоны.ПустаяСсылка();

				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех");
				Если СтрНайти(Место, "Korzina") > 0 Тогда
					Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
					ТекстЛога = " Поместил в корзину " + Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Тележка",
						Полка)) + " " + Строка(Выборка.индкод.Владелец) + " с кодом " + индкод;
					//ИндКоды = Новый массив;
					//ИндКоды.Добавить(индкод);
					Фотки = ПолучениеФотоДляТелеги(индкод);
					НайденныеФотки = Фотки[0].urls;
					//ТекстЛога = ТекстЛога + Символы.ПС + НайденныеФотки[0];
					//@skip-check empty-except-statement
					Попытка
						Telegram_Сервер.ОтправитьКартинкуПользователю("-1001874958074", НайденныеФотки[0]);
					Исключение
						
					КонецПопытки;

					Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Автор) + ТекстЛога);
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЕсли;
			Возврат ответ;
		КонецЕсли;
		///-ГомзМА 31.01.2024

	Иначе
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Полка не найдена");
		Возврат ответ;

	КонецЕсли;
	
	

КонецФункции

Функция РедактироватьПоддон(Индкод, Место = Неопределено, Автор)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", Индкод);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда

		НовыйНомер = НаборЗаписей[0];
		Поддон = Справочники.Поддоны.НайтиПоНаименованию(место);
		Если Поддон <> Справочники.Поддоны.ПустаяСсылка() Тогда
			Лог =  " сменил поддон с " + НовыйНомер.поддон + " на " + Поддон;

			ЛогированиеИндНомера(Строка(НовыйНомер.индкод), Автор, Лог, Строка(Поддон.Стеллаж), Поддон,
				НовыйНомер.Стеллаж, НовыйНомер.поддон);

			НовыйНомер.поддон = Поддон;
			НовыйНомер.Стеллаж = Поддон.Стеллаж;

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
		Иначе
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Поддон не найден");
		КонецЕсли;
	КонецЕсли;

	НаборЗаписей.Записать();
	Возврат ответ;

КонецФункции

//@skip-check method-too-many-params
Процедура ЛогированиеИндНомера(Индкод, Автор, Лог, Стеллажж = Неопределено, Поддон = Неопределено,
	ПредСтеллаж = Неопределено, ПредПоддон = Неопределено)
	Авторец = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогИндНомера.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.индкод = Справочники.ИндКод.НайтиПоНаименованию(индкод);
	//@skip-check use-non-recommended-method
	МенеджерЗаписиЛога.дата = ТекущаяДата();
	//@skip-check use-non-recommended-method
	МенеджерЗаписиЛога.период = ТекущаяДата();
	Если Поддон <> Неопределено Тогда  
		//Поддон = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.Поддон  = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	Если Стеллажж <> Неопределено Тогда  
		//Стеллажж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.ПредыдущийСтеллаж = ПредСтеллаж;
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	МенеджерЗаписиЛога.Ответственный = Авторец;
	МенеджерЗаписиЛога.Текст = "--------------------------" + Символы.ПС + Авторец + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Функция ПолучитьДопРеквизиты(ИндКод)
Запрос = новый Запрос();
Запрос.текст = "ВЫБРАТЬ
|	ВЫБОР
|		КОГДА РегИндНомер.Цена > 0
|			ТОГДА РегИндНомер.Цена
|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
|	КОНЕЦ КАК Цена,
|	РегИндНомер.Комментарий КАК Комментарий,
|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
|	ВЫБОР
|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
|	КОНЕЦ КАК Адрес,
|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.Поддон) КАК Поддон,
|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
|	РегИндНомер.индкод.Владелец.выс КАК выс,
|	РегИндНомер.индкод.Владелец.длин КАК длин,
|	РегИндНомер.индкод.Владелец.шир КАК шир,
|	РегИндНомер.Состояние
|ИЗ
|	РегистрСведений.ИндНомер КАК РегИндНомер
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
|		ПО РегИндНомер.индкод = РегистрНакопления1Остатки.индкод
|ГДЕ
|	РегИндНомер.индкод.наименование = &ИндКод";

Запрос.УстановитьПараметр("ИндКод",ИндКод);
Выборка = Запрос.Выполнить().Выбрать();
ВЫборка.следующий();
СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("cost", Строка( ВЫборка.Цена));
		СтруктураОтвета.Вставить("comment", Строка( ВЫборка.Комментарий));
		СтруктураОтвета.Вставить("place", Строка( ВЫборка.Адрес));
		СтруктураОтвета.Вставить("sklad", Строка( ВЫборка.Склад));
		СтруктураОтвета.Вставить("poddon", ВЫборка.Поддон);
		Возврат СтруктураОтвета;
		

КонецФункции


Функция ЕстьКириллица(ИсходнаяСтрока) Экспорт
	ИсходнаяСтрока=СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока) > 0 Тогда
		Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
//@skip-check use-non-recommended-method
			Если Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ПолучениеФото(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL());  
	Соединение = Новый HTTPСоединение("192.168.0.245",8085);
	
	СтрокаЗапроса = "/v1/images";
	Заголовки = Новый Соответствие;    
	Заголовки.Вставить("Content-Type", "application/json");
	
	//Для Каждого ЭлементМассива из ИндКод Цикл
	//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
	//Конеццикла;
	//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
	//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
	//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
	Запрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);	
	ЗапросСтруктура = Новый Структура();
	
	ЗапросСтруктура.Вставить("indCode", ИндКод);
	
	
	// параметры запроса
	ПотокJSON = Новый ЗаписьJSON();
	ПотокJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
	СтрокаJSON = ПотокJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		Тело = Ответ.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Тело);
		
		Ответ  = ПрочитатьJSON(ЧтениеJSON);
		//Сообщить(Ответ); //получим HTML-код страницы 
	Иначе
		//Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
		тело = Ответ.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Тело);
		
		Ответ  = ПрочитатьJSON(ЧтениеJSON);
		//Сообщить(Ответ);
		ответ = неопределено;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПолучениеФотоДляТелеги(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);

		СтрокаЗапроса = "/v1/images?type=outlinks&ind_code=" + ИндКод;
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("id", ИндКод);
		//
		//
		//// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		//@skip-check module-unused-local-variable
		Для Каждого Стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;

КонецФункции

Функция текстДляНоменклатуры()
	Текстзапроса ="ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.DirectText ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
	|ГДЕ
	|	НЕ ИндНомер.Стеллаж В (&Стеллаж)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегистрНакопления1Остатки.Склад.Город КАК Город,
	|	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	|	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
	|	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
	|	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.Город КАК Город,
	|	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
	|	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
	|	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
	|	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
	|	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи" ; 
	Возврат текстзапроса;

//текстзапроса ="ВЫБРАТЬ
//	|	Номенклатура.Ссылка КАК Ссылка
//	|ПОМЕСТИТЬ ВТ_Номенклатура
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.Directtext ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод КАК индкод
//	|ПОМЕСТИТЬ ВТ_предКоды
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|ГДЕ
//	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|
//	|ОБЪЕДИНИТЬ 
//	|
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|ГДЕ
//	|	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|
//	|ОБЪЕДИНИТЬ 
//	|
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|ГДЕ
//	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
//	|	И НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ИндНомер.индкод
//	|ИЗ
//	|	РегистрСведений.ИндНомер КАК ИндНомер
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
//	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
//	|ГДЕ
//	|	НЕ ИндНомер.Стеллаж В (&Стеллаж)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
//	|	РегИндНомер.индкод КАК индкод,
//	|	ВЫБОР
//	|		КОГДА РегИндНомер.Цена > 0
//	|			ТОГДА РегИндНомер.Цена
//	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
//	|	КОНЕЦ КАК Цена,
//	|	РегИндНомер.Комментарий КАК Комментарий,
//	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
//	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
//	|	ВЫБОР
//	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
//	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
//	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
//	|	КОНЕЦ КАК Адрес,
//	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
//	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
//	|	РегИндНомер.Поддон КАК Поддон,
//	|	РегистрНакопления1Остатки.Склад.Город КАК Город,
//	|	РегИндНомер.индкод.Владелец.Код КАК индкодВладелецКод,
//	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
//	|	РегИндНомер.индкод.Владелец.Комплектация КАК индкодВладелецКомплектация,
//	|	РегИндНомер.индкод.Владелец.АртикулПоиск КАК СтрокаПоиска,
//	|	РегИндНомер.индкод.Владелец.DirectText КАК СтрокаПоиска1
//	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
//	|ИЗ
//	|	ВТ_предКоды КАК ИндНомер
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
//	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
//	|		ПО ИндНомер.индкод = РегИндНомер.индкод
//	|ГДЕ
//	|	РегистрНакопления1Остатки.КолвоОстаток > 0
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ %1
//	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
//	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
//	|	ВТ_данныеНоменклатур.Цена КАК Цена,
//	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
//	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
//	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
//	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
//	|	ВТ_данныеНоменклатур.Склад КАК Склад,
//	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
//	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
//	|	ВТ_данныеНоменклатур.Город КАК Город,
//	|	ВТ_данныеНоменклатур.индкодВладелецКод КАК Код,
//	|	ВТ_данныеНоменклатур.КолвоОстаток КАК Остаток,
//	|	ВТ_данныеНоменклатур.индкодВладелецКомплектация КАК Комплектация,
//	|	ВТ_данныеНоменклатур.СтрокаПоиска КАК СтрокаПоиска,
//	|	ВТ_данныеНоменклатур.СтрокаПоиска1 КАК СтрокаПоиска1
//	|ИЗ
//	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
//	|ГДЕ
//	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	НомерЗаписи" ; 
//	Возврат текстзапроса;
КонецФункции 

Функция КоличествоТоваровВКорзине(Тележка)  
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИндНомер.индкод) КАК Количество,
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж = &Стеллаж
	|
	|СГРУППИРОВАТЬ ПО
	|	ИндНомер.Стеллаж";
	Запрос.УстановитьПараметр("Стеллаж",Тележка);
	Выборка = запрос.Выполнить().Выбрать();
	
	Если выборка.Количество()>0 тогда
		Выборка.Следующий();
		Возврат выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
