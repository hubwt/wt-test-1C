
#Область ОбработчикиСобытий
#Область ТекстыДляЗапросов 
Функция ТекстДляПлохихЗаявок() 
	Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Состояние КАК Состояние
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Дата > &Дата
	|	И (ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Спам)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ДругаяМарка)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.НетВНаличии)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Отказ))
	|{ГДЕ
	|	(ЗаказКлиента.Ответственный = &Ответственный) }";
	Возврат текст;
КонецФункции

Функция ТекстДляВозвратов() 
	Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктВозврата.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктВозврата КАК АктВозврата
	|ГДЕ
	|	АктВозврата.Дата > &Дата
	|{ГДЕ
	|	(АктВозврата.Ответственный = &Ответственный)}";
	
	Возврат текст;
КонецФункции  

Функция текстДляСпискаНарядов() 
	Текст ="ВЫБРАТЬ
	|	ЗаказНарядТовары.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(ЗаказНарядТовары.НомерСтроки) КАК КоличествоСтрок,
	|	ЗаказНарядТовары.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТ_Условие
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Состояние,
	|	ЗаказНарядТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Условие.Ссылка КАК Ссылка,
	|	СУММА(ВТ_Условие.КоличествоСтрок) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ_Сборка
	|ИЗ
	|	ВТ_Условие КАК ВТ_Условие
	|ГДЕ
	|	(ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Планово)
	|	ИЛИ ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Срочно))
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Условие.Ссылка КАК Ссылка,
	|	СУММА(ВТ_Условие.КоличествоСтрок) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ_Выдача
	|ИЗ
	|	ВТ_Условие КАК ВТ_Условие
	|ГДЕ
	|	(ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Собрано)
	|	ИЛИ ВТ_Условие.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.НетВНаличии))
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Клиент КАК Клиент,
	|	ЗаказНаряд.Ответственный КАК Ответственный,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.ЗаказКлиента КАК ЗаказКлиента,
	|	ЗаказНаряд.ВнутреннийЗаказНаряд КАК Внутр,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ВТ_Сборка.КоличествоСтрок КАК КоличествоСборка,
	|	ВТ_Выдача.КоличествоСтрок КАК КоличествоВыдача,
	|	ЗаказНаряд.Комментарий
	|ПОМЕСТИТЬ ВТ_Наряд
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сборка КАК ВТ_Сборка
	|		ПО (ВТ_Сборка.Ссылка = ЗаказНаряд.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ЗаказНаряд.Инициатор = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выдача КАК ВТ_Выдача
	|		ПО ЗаказНаряд.Ссылка = ВТ_Выдача.Ссылка 
	| &Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_Наряд.Код КАК Код,
	|	ВТ_Наряд.Номер КАК Номер,
	|	ВТ_Наряд.Дата КАК Дата,
	|	ВТ_Наряд.Клиент КАК Клиент,
	|	ВТ_Наряд.Ответственный КАК Ответственный,
	|	ВТ_Наряд.Состояние КАК Состояние,
	|	ВТ_Наряд.ЗаказКлиента КАК ЗаказКлиента,
	|	ВТ_Наряд.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Наряд.КоличествоСборка КАК КоличествоСборка,
	|	ВТ_Наряд.КоличествоВыдача КАК КоличествоВыдача,
	|	ВТ_Наряд.Внутр КАК Внутр,
	|	ВТ_Наряд.Комментарий КАК Комментарий
	|ИЗ
	|	ВТ_Наряд КАК ВТ_Наряд
	|ГДЕ
	|	ВТ_Наряд.НомерЗаписи >= &НачинаяСЗаписи
	|	И ВТ_Наряд.Дата > датавремя(2023, 07, 18)
	|	И не ВТ_Наряд.Внутр
	|	И ВТ_Наряд.Состояние <> Значение(перечисление.СостоянияЗаказНаряда.Выполнен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";
	Возврат текст;
	
КонецФункции

Функция ТекстДляПропущенныхЗвонков() 
	Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Состояние КАК Состояние
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Дата > &Дата
	|	И ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ПропущенныйЗвонок)
	|{ГДЕ
	|	(ЗаказКлиента.Ответственный = &Ответственный) }";
	Возврат текст;
КонецФункции

Функция текстДляЗаявокИПродаж() 
	
	Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Клиент КАК Клиент,
	|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
	|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	1 КАК Флаг,
	|	ЗаказКлиента.Ответственный КАК Ответственный,
	|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
	|	NULL КАК ТранспортнаяКомпания
	|ПОМЕСТИТЬ ВТ_предИтог
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Дата > &Дата
	|	И ЗаказКлиента.WTPanel <> &ПроверкаПродажи
	|	%2
	|	И ЗаказКлиента.WTPanel <> ЗНАЧЕНИЕ(Справочник.СтатусыWT.пустаяссылка)
	|  	И (ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Ожидание)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Думает)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ПропущенныйЗвонок)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ЖдёмДенег))
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПродажаЗапчастей.Номер,
	|	ПродажаЗапчастей.Клиент,
	|	ПродажаЗапчастей.WTpanel,
	|	ПродажаЗапчастей.ОтветственныйКладовщик,
	|	ПродажаЗапчастей.Ссылка,
	|	0,
	|	ПродажаЗапчастей.КтоПродал,
	|	ПродажаЗапчастей.ПодстатусОбработки,
	|	ПродажаЗапчастей.ТранспортнаяКомпания
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.Дата > &Дата
	|	%3
	|	И ПродажаЗапчастей.WTpanel <> ЗНАЧЕНИЕ(Справочник.СтатусыWT.пустаяссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_предИтог.Номер КАК Номер,
	|	ВТ_предИтог.Клиент КАК Клиент,
	|	ВТ_предИтог.СтатусОбработки КАК СтатусОбработки,
	|	ВТ_предИтог.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ВТ_предИтог.Ссылка КАК Ссылка,
	|	ВТ_предИтог.Флаг КАК Флаг,
	|	ВТ_предИтог.Ответственный КАК Ответственный,
	|	ВТ_предИтог.ПодстатусОбработки КАК ПодстатусОбработки,
	|	ВТ_предИтог.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	ВТ_предИтог КАК ВТ_предИтог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_Итог.Номер КАК Номер,
	|	ВТ_Итог.Клиент КАК Клиент,
	|	ВТ_Итог.СтатусОбработки КАК СтатусОбработки,
	|	ВТ_Итог.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ВТ_Итог.Ссылка КАК Ссылка,
	|	ВТ_Итог.Флаг КАК Флаг,
	|	ВТ_Итог.Ответственный КАК Ответственный,
	|	ВТ_Итог.ПодстатусОбработки КАК ПодстатусОбработки,
	|	ВТ_Итог.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	|	ВТ_Итог.НомерЗаписи КАК НомерЗаписи
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|ГДЕ
	|	ВТ_Итог.НомерЗаписи >= &НачинаяСЗаписи
	|{ГДЕ
	|	(ВТ_Итог.Номер ПОДОБНО &Номер) КАК Поле2}
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи" ; 
	
	///////////	
	
	//Текст = "ВЫБРАТЬ
	//|	ЗаказКлиента.Номер КАК Номер,
	//|	ЗаказКлиента.Клиент КАК Клиент,
	//|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
	//|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	//|	ЗаказКлиента.Ссылка КАК Ссылка,
	//|	1 КАК Флаг,
	//|	ЗаказКлиента.Ответственный КАК Ответственный,
	//|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
	//|	NULL КАК ТранспортнаяКомпания
	//|ПОМЕСТИТЬ ВТ_предИтог
	//|ИЗ
	//|	Документ.ЗаказКлиента КАК ЗаказКлиента
	//|ГДЕ
	//|	ЗаказКлиента.Дата > &Дата
	//|	И ЗаказКлиента.WTPanel <> &ПроверкаПродажи
	//|	&ОтборОтветственныйЗаявки
	//|	И ЗаказКлиента.WTPanel <> ЗНАЧЕНИЕ(Справочник.СтатусыWT.пустаяссылка)
	//|  	И (ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Ожидание)
	//|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Думает)
	//|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ПропущенныйЗвонок)
	//|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ЖдёмДенег))
	
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ПродажаЗапчастей.Номер,
	//|	ПродажаЗапчастей.Клиент,
	//|	ПродажаЗапчастей.WTpanel,
	//|	ПродажаЗапчастей.ОтветственныйКладовщик,
	//|	ПродажаЗапчастей.Ссылка,
	//|	0,
	//|	ПродажаЗапчастей.КтоПродал,
	//|	ПродажаЗапчастей.ПодстатусОбработки,
	//|	ПродажаЗапчастей.ТранспортнаяКомпания
	//|ИЗ
	//|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	//|ГДЕ
	//|	ПродажаЗапчастей.Дата > &Дата
	//|	&ОтборОтветственныйПродажи
	//|	И ПродажаЗапчастей.WTpanel <> ЗНАЧЕНИЕ(Справочник.СтатусыWT.пустаяссылка)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_предИтог.Номер КАК Номер,
	//|	ВТ_предИтог.Клиент КАК Клиент,
	//|	ВТ_предИтог.СтатусОбработки КАК СтатусОбработки,
	//|	ВТ_предИтог.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	//|	ВТ_предИтог.Ссылка КАК Ссылка,
	//|	ВТ_предИтог.Флаг КАК Флаг,
	//|	ВТ_предИтог.Ответственный КАК Ответственный,
	//|	ВТ_предИтог.ПодстатусОбработки КАК ПодстатусОбработки,
	//|	ВТ_предИтог.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	//|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	//|ПОМЕСТИТЬ ВТ_Итог
	//|ИЗ
	//|	ВТ_предИтог КАК ВТ_предИтог
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ ПЕРВЫЕ %1
	//|	ВТ_Итог.Номер КАК Номер,
	//|	ВТ_Итог.Клиент КАК Клиент,
	//|	ВТ_Итог.СтатусОбработки КАК СтатусОбработки,
	//|	ВТ_Итог.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	//|	ВТ_Итог.Ссылка КАК Ссылка,
	//|	ВТ_Итог.Флаг КАК Флаг,
	//|	ВТ_Итог.Ответственный КАК Ответственный,
	//|	ВТ_Итог.ПодстатусОбработки КАК ПодстатусОбработки,
	//|	ВТ_Итог.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	//|	ВТ_Итог.НомерЗаписи КАК НомерЗаписи
	//|ИЗ
	//|	ВТ_Итог КАК ВТ_Итог
	//|ГДЕ
	//|	ВТ_Итог.НомерЗаписи >= &НачинаяСЗаписи
	//|{ГДЕ
	//|	(ВТ_Итог.Номер ПОДОБНО &Номер) КАК Поле2}
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерЗаписи" ; 
	////////////	
	//Текст = "ВЫБРАТЬ
	//|	ЗаказКлиента.Номер КАК Номер,
	//|	ЗаказКлиента.Клиент КАК Клиент,
	//|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
	//|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	//|	ЗаказКлиента.Ссылка КАК Ссылка,
	//|	1 КАК Флаг,
	//|	ЗаказКлиента.Ответственный КАК Ответственный,
	//|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки,
	//|	NULL КАК ТранспортнаяКомпания
	//|ПОМЕСТИТЬ ВТ_предИтог
	//|ИЗ
	//|	Документ.ЗаказКлиента КАК ЗаказКлиента
	//|ГДЕ
	//|	ЗаказКлиента.Дата > &Дата
	//|	И ЗаказКлиента.WTPanel <> &ПроверкаПродажи
	//|	И (ЗаказКлиента.Ответственный = &Ответственный
	//|			ИЛИ ЗаказКлиента.ОтветственныйЗаОбработку = &Ответственный)
	//|	И ЗаказКлиента.WTPanel <> ЗНАЧЕНИЕ(Справочник.СтатусыWT.пустаяссылка)
	//|  	И (ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Ожидание)
	//|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Думает)
	//|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ПропущенныйЗвонок)
	//|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ЖдёмДенег))
	
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ПродажаЗапчастей.Номер,
	//|	ПродажаЗапчастей.Клиент,
	//|	ПродажаЗапчастей.WTpanel,
	//|	ПродажаЗапчастей.ОтветственныйКладовщик,
	//|	ПродажаЗапчастей.Ссылка,
	//|	0,
	//|	ПродажаЗапчастей.КтоПродал,
	//|	ПродажаЗапчастей.ПодстатусОбработки,
	//|	ПродажаЗапчастей.ТранспортнаяКомпания
	//|ИЗ
	//|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	//|ГДЕ
	//|	ПродажаЗапчастей.Дата > &Дата
	//|	И (ПродажаЗапчастей.КтоПродал = &Ответственный
	//|			ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный)
	//|	И ПродажаЗапчастей.WTpanel <> ЗНАЧЕНИЕ(Справочник.СтатусыWT.пустаяссылка)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_предИтог.Номер КАК Номер,
	//|	ВТ_предИтог.Клиент КАК Клиент,
	//|	ВТ_предИтог.СтатусОбработки КАК СтатусОбработки,
	//|	ВТ_предИтог.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	//|	ВТ_предИтог.Ссылка КАК Ссылка,
	//|	ВТ_предИтог.Флаг КАК Флаг,
	//|	ВТ_предИтог.Ответственный КАК Ответственный,
	//|	ВТ_предИтог.ПодстатусОбработки КАК ПодстатусОбработки,
	//|	ВТ_предИтог.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	//|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	//|ПОМЕСТИТЬ ВТ_Итог
	//|ИЗ
	//|	ВТ_предИтог КАК ВТ_предИтог
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ ПЕРВЫЕ %1
	//|	ВТ_Итог.Номер КАК Номер,
	//|	ВТ_Итог.Клиент КАК Клиент,
	//|	ВТ_Итог.СтатусОбработки КАК СтатусОбработки,
	//|	ВТ_Итог.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	//|	ВТ_Итог.Ссылка КАК Ссылка,
	//|	ВТ_Итог.Флаг КАК Флаг,
	//|	ВТ_Итог.Ответственный КАК Ответственный,
	//|	ВТ_Итог.ПодстатусОбработки КАК ПодстатусОбработки,
	//|	ВТ_Итог.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	//|	ВТ_Итог.НомерЗаписи КАК НомерЗаписи
	//|ИЗ
	//|	ВТ_Итог КАК ВТ_Итог
	//|ГДЕ
	//|	ВТ_Итог.НомерЗаписи >= &НачинаяСЗаписи
	//|{ГДЕ
	//|	(ВТ_Итог.Номер ПОДОБНО &Номер) КАК Поле2}
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерЗаписи" ; 
	Возврат Текст;
КонецФункции

Функция ТекстДляТиповЗаявок() 
	Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.WTPanel КАК СтатусОбработки
	|ПОМЕСТИТЬ ВТ_ЗаявкиИПродажи
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Дата > &Дата
	|	%1
	|	И ЗаказКлиента.WTPanel <> ЗНАЧЕНИЕ(Справочник.СтатусыWT.пустаяссылка)
	|	И ЗаказКлиента.WTPanel <> &ПроверкаПродажи
	|	И (ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Ожидание)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Думает)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ПропущенныйЗвонок)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ЖдёмДенег))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПродажаЗапчастей.Ссылка,
	|	ПродажаЗапчастей.WTpanel
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.WTpanel <> ЗНАЧЕНИЕ(Справочник.СтатусыWT.пустаяссылка)
	|	%2  
	|	И ПродажаЗапчастей.Дата > &Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ЗаявкиИПродажи.Ссылка) КАК Количество,
	|	СтатусыWT.Ссылка КАК СтатусОбработки
	|ПОМЕСТИТЬ ВТ_Итоги
	|ИЗ
	|	Справочник.СтатусыWT КАК СтатусыWT
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаявкиИПродажи КАК ВТ_ЗаявкиИПродажи
	|		ПО СтатусыWT.Ссылка = ВТ_ЗаявкиИПродажи.СтатусОбработки
	|ГДЕ
	|	НЕ СтатусыWT.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыWT.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итоги.Количество КАК Количество,
	|	ВТ_Итоги.СтатусОбработки.Наименование КАК СтатусОбработки,
	|	ВТ_Итоги.СтатусОбработки.Код КАК Код
	|ИЗ
	|	ВТ_Итоги КАК ВТ_Итоги
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Итоги.СтатусОбработки.Код";
	Возврат текст;
КонецФункции 

Функция ТекстДляТиповПродаж()
	Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажаЗапчастей.Ссылка) КАК Количество,
	|	ПродажаЗапчастей.WTpanel КАК СтатусОбработки
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.Дата > &Дата
	|	И ПродажаЗапчастей.WTpanel <> ЗНАЧЕНИЕ(Справочник.СтатусыWT.пустаяссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажаЗапчастей.WTpanel"; 
	Возврат Текст;
	
КонецФункции

Функция текстДляСпискаЗаявок()
	Текст ="ВЫБРАТЬ
	|	ИндНомер.индкод.Владелец КАК индкодВладелец,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИндНомер.Стеллаж.Наименование ПОДОБНО &кСклады
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Поле1
	|ПОМЕСТИТЬ ВТ_КСклад
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &кСклады
	|
	|СГРУППИРОВАТЬ ПО
	|	ИндНомер.индкод.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВТ_КСклад.Поле1) КАК Поле1
	|ПОМЕСТИТЬ ВТ_НаКСкладе
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КСклад КАК ВТ_КСклад
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_КСклад.индкодВладелец
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100000
	|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
	|	ЗаказКлиента.Состояние КАК Состояние,
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Клиент КАК Клиент,
	|	ЗаказКлиента.Ответственный КАК Ответственный,
	|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
	|	ЗаказКлиента.Комментарий КАК Комментарий,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки
	|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.WTPanel В (&СостояниеСборки)  
	|	И ЗаказКлиента.Дата > &Дата
	|   %2
	|	И (ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Ожидание)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.Думает)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ПропущенныйЗвонок)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(перечисление.дт_СостоянияЗаказовКлиента.ЖдёмДенег))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_ДанныеЗаявки.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_ДанныеЗаявки.Ссылка КАК Ссылка,
	|	ВТ_ДанныеЗаявки.Номер КАК Номер,
	|	ВТ_ДанныеЗаявки.Дата КАК Дата,
	|	ВТ_ДанныеЗаявки.Клиент КАК Клиент,
	|	ВТ_ДанныеЗаявки.Комментарий КАК Комментарий,
	|	ВТ_ДанныеЗаявки.Ответственный КАК Ответственный,
	|	ВТ_ДанныеЗаявки.СуммаДокумента КАК СуммаДокумента,
	|	ВТ_ДанныеЗаявки.ДатаСвязи КАК ДатаСвязи,
	|	ВТ_ДанныеЗаявки.Состояние КАК Состояние,
	|	ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ВТ_ДанныеЗаявки.СтатусОбработки КАК СтатусОбработки,
	|	ВТ_НаКСкладе.Поле1 КАК НаКскладе,
	|	ВТ_ДанныеЗаявки.ПодстатусОбработки КАК ПодстатусОбработки
	|ИЗ
	|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаКСкладе КАК ВТ_НаКСкладе
	|		ПО ВТ_ДанныеЗаявки.Ссылка = ВТ_НаКСкладе.Ссылка
	|ГДЕ
	|	ВТ_ДанныеЗаявки.НомерЗаписи >= &НачинаяСЗаписи";  
	Возврат текст;
КонецФункции 

Функция текстДляСпискаПродаж()
	Текст ="ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100000
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	ПродажаЗапчастей.Ссылка КАК Ссылка,
	|	ПродажаЗапчастей.Номер КАК Номер,
	|	ПродажаЗапчастей.Дата КАК Дата,
	|	ПродажаЗапчастей.Клиент КАК Клиент,
	|	ПродажаЗапчастей.КтоПродал КАК Ответственный,
	|	ПродажаЗапчастей.ИтогоРекв КАК СуммаДокумента,
	|	ПродажаЗапчастей.WTpanel КАК СтатусОбработки,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПродажаЗапчастей.КтоПродал КАК КтоПродал,
	|	ПродажаЗапчастей.ОтветственныйКладовщик КАК ОтветственныйКладовщик,
	|    ПродажаЗапчастей.ПодСтатусОбработки как  ПодСтатусОбработки
	|ПОМЕСТИТЬ ВТ_Продажи
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО ПродажаЗапчастей.КтоПродал = ТелефоныСлужебные.Ссылка.Пользователь
	|ГДЕ
	|	ПродажаЗапчастей.WTpanel = &СостояниеСборки 
	|   %2 
	|	И ПродажаЗапчастей.Дата > &Дата
	|{ГДЕ
	|	(ТелефоныСлужебные.ТелефонСлужебный = &Телефон) КАК Поле2}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_Продажи.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Продажи.Ссылка КАК Ссылка,
	|	ВТ_Продажи.Номер КАК Номер,
	|	ВТ_Продажи.Дата КАК Дата,
	|	ВТ_Продажи.Клиент КАК Клиент,
	|	ВТ_Продажи.Ответственный КАК Ответственный,
	|	ВТ_Продажи.СуммаДокумента КАК СуммаДокумента,
	|	ВТ_Продажи.СтатусОбработки КАК СтатусОбработки,
	|	ВТ_Продажи.ТелефонСлужебный КАК ТелефонСлужебный,
	|	ВТ_Продажи.КтоПродал КАК КтоПродал,
	|	ВТ_Продажи.ОтветственныйКладовщик КАК ОтветственныйКладовщик,
	|    ВТ_Продажи.ПодСтатусОбработки как  ПодСтатусОбработки
	|ИЗ
	|	ВТ_Продажи КАК ВТ_Продажи
	|ГДЕ
	|	ВТ_Продажи.НомерЗаписи >= &НачинаяСЗаписи";
	Возврат текст;
КонецФункции

Функция текстДляНоменклатуры()
	текстзапроса ="ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод) КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.Поддон) КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
	|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
	|	РегИндНомер.индкод.Владелец.выс КАК выс,
	|	РегИндНомер.индкод.Владелец.длин КАК длин,
	|	РегИндНомер.индкод.Владелец.шир КАК шир
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	| {Где РегИндНомер.АвитоЧастник = &Ач}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ВТ_данныеНоменклатур.индкод КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
	|	ВТ_данныеНоменклатур.Размеры КАК Размеры,
	|	ВТ_данныеНоменклатур.Вес КАК Вес,
	|	ВТ_данныеНоменклатур.выс КАК выс,
	|	ВТ_данныеНоменклатур.длин КАК длин,
	|	ВТ_данныеНоменклатур.шир КАК шир
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи" ; 
	Возврат текстзапроса;
КонецФункции     

Функция текстДляКарточекНоменклатуры()
	Текстзапроса ="ВЫБРАТЬ
	              |	Номенклатура.Ссылка КАК Ссылка
	              |ПОМЕСТИТЬ ВТ_Поиск
	              |ИЗ
	              |	Справочник.Номенклатура КАК Номенклатура
	              |ГДЕ
	              |	Номенклатура.Код ПОДОБНО &наименование
	              |
	              |ОБЪЕДИНИТЬ
	              |
	              |ВЫБРАТЬ
	              |	Номенклатура.Ссылка
	              |ИЗ
	              |	Справочник.Номенклатура КАК Номенклатура
	              |ГДЕ
	              |	Номенклатура.Наименование ПОДОБНО &наименование
	              |
	              |ОБЪЕДИНИТЬ
	              |
	              |ВЫБРАТЬ
	              |	Номенклатура.Ссылка
	              |ИЗ
	              |	Справочник.Номенклатура КАК Номенклатура
	              |ГДЕ
	              |	(Номенклатура.Артикул ПОДОБНО &наименование
	              |			ИЛИ Номенклатура.АртикулПоиск ПОДОБНО &наименование)
	              |
	              |ОБЪЕДИНИТЬ
	              |
	              |ВЫБРАТЬ
	              |	Номенклатура.Ссылка
	              |ИЗ
	              |	Справочник.Номенклатура КАК Номенклатура
	              |ГДЕ
	              |	Номенклатура.НомерПроизводителя ПОДОБНО &наименование
	              |
	              |ОБЪЕДИНИТЬ
	              |
	              |ВЫБРАТЬ
	              |	НоменклатураНомераЗамен.Ссылка
	              |ИЗ
	              |	Справочник.Номенклатура.НомераЗамен КАК НоменклатураНомераЗамен
	              |ГДЕ
	              |	НоменклатураНомераЗамен.НомерЗамены ПОДОБНО &наименование
	              |
	              |ОБЪЕДИНИТЬ
	              |
	              |ВЫБРАТЬ
	              |	НоменклатураКомплектность.Ссылка
	              |ИЗ
	              |	Справочник.Номенклатура.Комплектность КАК НоменклатураКомплектность
	              |ГДЕ
	              |	(НоменклатураКомплектность.НомерПоиск ПОДОБНО &Наименование
	              |			ИЛИ НоменклатураКомплектность.Наименование ПОДОБНО &Наименование
	              |			ИЛИ НоменклатураКомплектность.Артикул ПОДОБНО &Наименование)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ Первые 10000
	              |	СправочникНоменклатура.Ссылка КАК Ссылка,
	              |	СправочникНоменклатура.ВерсияДанных КАК ВерсияДанных,
	              |	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	              |	СправочникНоменклатура.Предопределенный КАК Предопределенный,
	              |	СправочникНоменклатура.Код КАК Код,
	              |	СправочникНоменклатура.Наименование КАК Наименование,
	              |	СправочникНоменклатура.Артикул КАК Артикул,
	              |	СправочникНоменклатура.НомерПроизводителя КАК НомерПроизводителя,
	              |	СправочникНоменклатура.Производитель КАК Производитель,
	              |	СправочникНоменклатура.Состояние КАК Состояние,
	              |	СправочникНоменклатура.Бренд КАК Бренд,
	              |	СправочникНоменклатура.Фото КАК Фото,
	              |	СправочникНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
	              |	СправочникНоменклатура.ЭтоНоваяЗапчасть КАК ЭтоНоваяЗапчасть,
	              |	СправочникНоменклатура.РекомендованаяЦена КАК РекомендованаяЦена,
	              |	СправочникНоменклатура.ЦенаПроверена КАК ЦенаПроверена,
	              |	СправочникНоменклатура.ЦенаФиксирована КАК ЦенаФиксирована,
	              |	СправочникНоменклатура.Серия КАК Серия,
	              |	СправочникНоменклатура.Вес КАК Вес,
	              |	СправочникНоменклатура.Объем КАК Объем,
	              |	СправочникНоменклатура.длин КАК длин,
	              |	СправочникНоменклатура.шир КАК шир,
	              |	СправочникНоменклатура.выс КАК выс,
	              |	СправочникНоменклатура.Размеры КАК Размеры,
	              |	СправочникНоменклатура.МинимальныйОстаток КАК МинимальныйОстаток,
	              |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	              |ПОМЕСТИТЬ ВТ_ПредВывод
	              |ИЗ
	              |	ВТ_Поиск КАК ВТ_Поиск
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	              |		ПО ВТ_Поиск.Ссылка = СправочникНоменклатура.Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ ПЕРВЫЕ %1
	              |	ВТ_ПредВывод.Ссылка КАК Ссылка,
	              |	ВТ_ПредВывод.Код КАК Код,
	              |	ВТ_ПредВывод.Наименование КАК Наименование,
	              |	ВТ_ПредВывод.Артикул КАК Артикул,
	              |	ВТ_ПредВывод.НомерПроизводителя КАК НомерПроизводителя,
	              |	ВТ_ПредВывод.Производитель КАК Производитель,
	              |	ВТ_ПредВывод.Состояние КАК Состояние,
	              |	ВТ_ПредВывод.Бренд КАК Бренд,
	              |	ВТ_ПредВывод.НомерЗаписи КАК НомерЗаписи
	              |ИЗ
	              |	ВТ_ПредВывод КАК ВТ_ПредВывод
	              |ГДЕ
	              |	ВТ_ПредВывод.НомерЗаписи > &НачинаяСЗаписи" ; 
	Возврат текстзапроса;
КонецФункции


Функция текстДляПродажи() 
	Текст =  "ВЫБРАТЬ
	|	ПродажаЗапчастей.Номер КАК Номер,
	|	ПродажаЗапчастей.Ссылка КАК ссылка,
	|	ПродажаЗапчастей.Дата КАК Дата,
	|	ПродажаЗапчастей.Клиент КАК Клиент,
	|	ПродажаЗапчастей.ИтогоРекв КАК ИтогоРекв,
	|	ПродажаЗапчастей.КтоПродал КАК КтоПродал,
	|	ПродажаЗапчастей.Таблица.(
	|		Товар КАК Товар,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		Партия КАК Партия,
	|		ПРЕДСТАВЛЕНИЕ(ПродажаЗапчастей.Таблица.Партия) КАК Партия2,
	|		НомерСтроки КАК НомерСтроки,
	|		СтатусТовара КАК СтатусТовара,
	|		Товар.Код КАК Код,
	|		Отменено КАК Отменено,
	|		Товар.Артикул КАК Артикул,
	|		Склад КАК Склад
	|	) КАК Таблица,
	|	ПродажаЗапчастей.ЗаказКлиента КАК ЗаказКлиента,
	|	ПродажаЗапчастей.WTpanel КАК СтатусОбработки,
	|	Сотрудники.Код КАК Код,
	|	ПродажаЗапчастей.ОтветственныйКладовщик КАК ОтветственныйКладовщик,
	|	ПродажаЗапчастей.СтатусЗаказаВТК КАК СтатусЗаказаВТК,
	|	ПродажаЗапчастей.Клиент.Телефон КАК КлиентТелефон,
	|	ПродажаЗапчастей.ПодстатусОбработки КАК подСтатусОбработки,
	|	ПродажаЗапчастей.ЕстьТрекНомер КАК ЕстьТрекНомер,
	|	ПродажаЗапчастей.ТрекНомер КАК ТрекНомер,
	|	ПродажаЗапчастей.ТранспортнаяКомпания КАК ТранспортнаяКомпания
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПродажаЗапчастей.ОтветственныйКладовщик = Сотрудники.Пользователь
	|ГДЕ
	|	ПродажаЗапчастей.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция текстДляЗаявки() 
	Текст =  "ВЫБРАТЬ
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Клиент КАК Клиент,
	|	ЗаказКлиента.Состояние КАК Состояние,
	|	ЗаказКлиента.Ответственный КАК Ответственный,
	|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
	|	ЗаказКлиента.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ЦенаОригинала КАК ЦенаОригинала,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		Отменено КАК Отменено,
	|		Склад КАК Склад,
	|		СуммаНДС КАК СуммаНДС,
	|		Комментарий КАК Комментарий,
	|		ПредлагаемаяЦена КАК ПредлагаемаяЦена,
	|		Партия КАК Партия,
	|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Товары.Партия) КАК Партия2,
	|		Номенклатура.Код КАК Код
	|	) КАК Товары,
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.WTPanel КАК СтатусОбработки,
	|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
	|	ЗаказКлиента.Комментарий КАК Комментарий,
	|	ЗаказКлиента.ПодстатусОбработки КАК ПодстатусОбработки
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция текстДляСпискаСотрудников() 
	Текст =  "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задача.Ссылка) КАК КоличествоЗадач,
	|	Задача.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_Задачи
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	(Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Создана)
	|	ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Вработе)
	|	ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Отложена))
	|	И Задача.Дата >= ДАТАВРЕМЯ(2024, 1, 1)
	|СГРУППИРОВАТЬ ПО
	|	Задача.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиДаты
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДолжностиДаты КАК ВТ_ДолжностиДаты
	|		ПО (ВТ_ДолжностиДаты.Сотрудник = КадровыйПриказ.Сотрудник)
	|		И (ВТ_ДолжностиДаты.ДатаДоговора = КадровыйПриказ.Дата)
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	Подразделения.Ссылка КАК ОтделНов,
	|	ВТ_ДолжностиНовые.Должность КАК ДолжностьНов,
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Пользователь КАК Пользователь,
	|	естьNULL(ВТ_Задачи.КоличествоЗадач, 0) КАК КоличествоЗадач
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подразделения КАК Подразделения
	|		ПО (Подразделения.участники.Сотрудник = Сотрудники.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
	|		ПО (ВТ_Задачи.Исполнитель = Сотрудники.Пользователь)
	|ГДЕ
	|	НЕ Сотрудники.Пользователь.Недействителен
	|	И (Подразделения.Ссылка = &ОтделНов
	|ИЛИ Подразделения.Родитель.Ссылка = &ОтделНов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтделНов,
	|	Наименование";
	Возврат Текст;
	
	
КонецФункции 

Функция текстДляТиповТоваров() 
	Текст =  "ВЫБРАТЬ
	|	СУММА(РегистрНакопления1Остатки.КолвоОстаток) КАК Колво,
	|	ВЫБОР
	|		КОГДА РегИндНомер.АвитоЧастник
	|			ТОГДА ""Прошли конвеер""
	|		ИНАЧЕ ""Не прошли конвеер""
	|	КОНЕЦ КАК АвитоЧастник,
	|	ВЫБОР
	|		КОГДА РегИндНомер.АвитоЧастник
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК id
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО (РегИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|	{Где РегИндНомер.АвитоЧастник = &АЧ}
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА РегИндНомер.АвитоЧастник
	|			ТОГДА ""Прошли конвеер""
	|		ИНАЧЕ ""Не прошли конвеер""
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РегИндНомер.АвитоЧастник
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ";
	Возврат Текст;
КонецФункции

Функция текстДляТиповТоваров2() 
	Текст =  "ВЫБРАТЬ
	         |	ВЫБОР
	         |		КОГДА РегИндНомер.АвитоЧастник
	         |			ТОГДА ""Прошли конвеер""
	         |		ИНАЧЕ ""Не прошли конвеер""
	         |	КОНЕЦ КАК АвитоЧастник,
	         |	ВЫБОР
	         |		КОГДА РегИндНомер.АвитоЧастник
	         |			ТОГДА 1
	         |		ИНАЧЕ 2
	         |	КОНЕЦ КАК id,
	         |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегИндНомер.индкод) КАК Колво
	         |ИЗ
	         |	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	         |		ПО (РегИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	         |ГДЕ
	         |	РегистрНакопления1Остатки.КолвоОстаток > 0
	         |	И (РегИндНомер.индкод.Владелец.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	         |			ИЛИ РегИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	         |			ИЛИ РегИндНомер.индкод.Владелец.Артикул ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	         |			ИЛИ РегИндНомер.индкод.Владелец.МестоНаСкладе2.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	         |			ИЛИ РегИндНомер.Стеллаж.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~"")
	         |{ГДЕ
	         |	(РегИндНомер.АвитоЧастник = &АЧ) КАК Поле2}
	         |
	         |СГРУППИРОВАТЬ ПО
	         |	ВЫБОР
	         |		КОГДА РегИндНомер.АвитоЧастник
	         |			ТОГДА ""Прошли конвеер""
	         |		ИНАЧЕ ""Не прошли конвеер""
	         |	КОНЕЦ,
	         |	ВЫБОР
	         |		КОГДА РегИндНомер.АвитоЧастник
	         |			ТОГДА 1
	         |		ИНАЧЕ 2
	         |	КОНЕЦ";
	Возврат Текст;
КонецФункции

Функция текстДляСчета() 
	
	///+ГомзМА 29.11.2023
	Текст =  "ВЫБРАТЬ
	|	ПредварительныйСчет.Номер КАК Номер,
	|	ПредварительныйСчет.Ссылка КАК Ссылка,
	|	ПредварительныйСчет.Дата КАК Дата,
	|	ПредварительныйСчет.Клиент КАК Клиент,
	|	ПредварительныйСчет.Организация КАК Организация,
	|	ПредварительныйСчет.ИтогоРекв КАК ИтогоРекв,
	|	ПредварительныйСчет.КтоПродал КАК КтоПродал,
	|	ПредварительныйСчет.Таблица.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Товар КАК Товар,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Скидка КАК Скидка,
	|		машина КАК машина,
	|		цена1 КАК цена1,
	|		Комментарий КАК Комментарий,
	|		Сумма КАК Сумма,
	|		ПродНак КАК ПродНак
	|	) КАК Таблица,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	ПредварительныйСчет.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	Документ.ПредварительныйСчет КАК ПредварительныйСчет
	|ГДЕ
	|	ПредварительныйСчет.Номер = &Номер";
	Возврат Текст;
	///-ГомзМА 29.11.2023
	
КонецФункции

Функция текстДляПродажиСтатусТК()
	
	///+ГомзМА 27.11.2023
	Текст =  "ВЫБРАТЬ
	|	ПродажаЗапчастей.Номер КАК Номер,
	|	ПродажаЗапчастей.Ссылка КАК ссылка,
	|	ПродажаЗапчастей.Дата КАК Дата,
	|	ПродажаЗапчастей.Клиент КАК Клиент,
	|	ПродажаЗапчастей.ИтогоРекв КАК ИтогоРекв,
	|	ПродажаЗапчастей.КтоПродал КАК КтоПродал,
	|	ПродажаЗапчастей.WTpanel КАК СтатусОбработки,
	|	ПродажаЗапчастей.ПодстатусОбработки КАК ПодстатусОбработки,
	|	ПродажаЗапчастей.СтатусЗаказаВТК КАК СтатусЗаказаВТК,
	|	ПродажаЗапчастей.ИсторияОтслеживанияЗаказа КАК ИсторияОтслеживанияЗаказа,
	|	ПродажаЗапчастей.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	|	ПродажаЗапчастей.ТрекНомер КАК ТрекНомер,
	|	ПродажаЗапчастей.Вес КАК Вес,
	|	ПродажаЗапчастей.ГородОтправки КАК ГородОтправки,
	|	ПродажаЗапчастей.СтранаПолучения КАК СтранаПолучения,
	|	ПродажаЗапчастей.РегионПолучения КАК РегионПолучения,
	|	ПродажаЗапчастей.ГородПолучения КАК ГородПолучения,
	|	ПродажаЗапчастей.СтатусДоставки КАК СтатусДоставки,
	|	ПродажаЗапчастей.Водитель КАК Водитель,
	|	ПродажаЗапчастей.ИНН КАК ИНН,
	|	ПродажаЗапчастей.Паспорт КАК Паспорт,
	|	ПродажаЗапчастей.Прописка КАК Прописка,
	|	ПродажаЗапчастей.доставкаКлиент КАК доставкаКлиент,
	|	ПродажаЗапчастей.НаименованиеИлиФИО КАК НаименованиеИлиФИО,
	|	ПродажаЗапчастей.частный КАК частный,
	|	ПродажаЗапчастей.Таблица.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Товар КАК Товар,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Скидка КАК Скидка,
	|		машина КАК машина,
	|		цена1 КАК цена1,
	|		Комментарий КАК Комментарий,
	|		Сумма КАК Сумма,
	|		ПродНак КАК ПродНак,
	|		укод КАК укод,
	|		Партия КАК Партия,
	|		Отменено КАК Отменено,
	|		Склад КАК Склад,
	|		СуммаНДС КАК СуммаНДС,
	|		СтатусТовара КАК СтатусТовара,
	|		ДатаОтгрузкиСоСклада КАК ДатаОтгрузкиСоСклада,
	|		Сборщик КАК Сборщик,
	|		Товар.Код КАК Код,
	|		Товар.Артикул КАК Артикул
	|	) КАК Таблица,
	|	ПродажаЗапчастей.Телефон КАК Телефон
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.Номер = &Номер";
	Возврат Текст;
	///-ГомзМА 27.11.2023
КонецФункции

Функция текстДляТовара()
		текстзапроса ="ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	РегИндНомер.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	РегИндНомер.Ответственный КАК Учетчик,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	Номенклатура.Размеры КАК Размеры,
	|	Номенклатура.Вес КАК Вес,
	|	Номенклатура.выс КАК выс,
	|	Номенклатура.длин КАК длин,
	|	Номенклатура.шир КАК шир,
	|	РегИндНомер.индкод.Владелец.Код КАК Код,
	|ВЫБОР
	|Когда регистрНакопления1Остатки.КолвоОстаток > 0 Тогда
	|""Есть в наличии""
	|Иначе
	|""Товар продан""
	|КОНЕЦ КАК ФактНаличия
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		Левое СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ИндНомер.индкод.Владелец.Ссылка = Номенклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|{ГДЕ
	|	(РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Состояние КАК Состояние,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Учетчик КАК Учетчик,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник,
	|	ВТ_данныеНоменклатур.ФактНаличия КАК ФактНаличия,
	|	ВТ_данныеНоменклатур.Код КАК Код,
	|	ВТ_данныеНоменклатур.Размеры КАК Размеры,
	|	ВТ_данныеНоменклатур.Вес КАК Вес,
	|	ВТ_данныеНоменклатур.выс КАК выс,
	|	ВТ_данныеНоменклатур.длин КАК длин,
	|	ВТ_данныеНоменклатур.шир КАК шир
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";
	
	Возврат текстзапроса;
КонецФункции

Функция текстДляТовара1()
	текстзапроса ="ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ИндНомер.индкод.Владелец = ВТ_Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегистрНакопления1Остатки.Склад.Город КАК Город
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.Город КАК Город,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_данныеНоменклатур.индкод) КАК Количество,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_данныеНоменклатур.Адрес,
	|	ВТ_данныеНоменклатур.Склад,
	|	ВТ_данныеНоменклатур.Город,
	|	ВТ_данныеНоменклатур.Поддон" ; 
	Возврат текстзапроса;
КонецФункции

Функция текстДляТоваровВПоддонеИлиПолке()
	текстзапроса =" ВЫБРАТЬ
	|	ИндНомер.индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИндНомер.индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Стеллаж.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ПРЕДСТАВЛЕНИЕ(РегистрНакопления1Остатки.Склад) КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегистрНакопления1Остатки.Склад.Город КАК Город,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник
	|ПОМЕСТИТЬ ВТ_данныеНоменклатур
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_данныеНоменклатур.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_данныеНоменклатур.индкод) КАК индкод,
	|	ВТ_данныеНоменклатур.Цена КАК Цена,
	|	ВТ_данныеНоменклатур.Комментарий КАК Комментарий,
	|	ВТ_данныеНоменклатур.Артикул КАК Артикул,
	|	ВТ_данныеНоменклатур.Подкатегория2 КАК Подкатегория2,
	|	ВТ_данныеНоменклатур.Адрес КАК Адрес,
	|	ВТ_данныеНоменклатур.Склад КАК Склад,
	|	ВТ_данныеНоменклатур.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_данныеНоменклатур.Поддон КАК Поддон,
	|	ВТ_данныеНоменклатур.Город КАК Город,
	|	ВТ_данныеНоменклатур.АвитоЧастник КАК АвитоЧастник
	|ИЗ
	|	ВТ_данныеНоменклатур КАК ВТ_данныеНоменклатур
	|ГДЕ
	|	ВТ_данныеНоменклатур.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи" ; 
	Возврат текстзапроса;
КонецФункции

Функция текстДляЗаказНаряда2() 
	Текст =  "ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Клиент КАК Клиент,
	|	ЗаказНаряд.Ответственный КАК Ответственный,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Товар,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Автомобиль КАК Автомобиль,
	|		СкидкаСумма КАК СкидкаСумма,
	|		СкидкаПроцент КАК СкидкаПроцент,
	|		Сумма КАК Сумма,
	|		Партия КАК Партия,
	|		ПРЕДСТАВЛЕНИЕ(ЗаказНаряд.Товары.Партия) КАК Партия2,
	|		СуммаВсего КАК СуммаВсего,
	|		Склад КАК Склад,
	|		Ответственный КАК Ответственный,
	|		СуммаНалог КАК СуммаНалог,
	|		СуммаЗп КАК СуммаЗп,
	|		Состояние КАК Состояние,
	|		СуммаСНДС КАК СуммаСНДС,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Код КАК Код) КАК Таблица,
	|	ЗаказНаряд.ЗаказКлиента КАК ЗаказКлиента,
	|	ЗаказНаряд.Работы.(
	|		Ссылка,
	|		НомерСтроки,
	|		Работа,
	|		Количество,
	|		Нормочас,
	|		Цена,
	|		Сумма,
	|		СкидкаПроцент,
	|		СкидкаСумма,
	|		СуммаВсего,
	|		Содержание,
	|		ИдентификаторСтроки,
	|		ВремяФакт,
	|		ВремяПлан,
	|		СуммаНалог,
	|		СуммаЗп,
	|		ИдентификаторСтрока,
	|		СтатусРаботы)
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ЗаказНаряд.Инициатор = Сотрудники.Ссылка
	|ГДЕ
	|	ЗаказНаряд.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция текстДляСпискаПеремещений() 
	Текст = "ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПеремещениеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	|	ПеремещениеТоваровТовары.СостояниеТовара КАК СостояниеТовара
	|ПОМЕСТИТЬ Вт_Условие
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Ссылка,
	|	ПеремещениеТоваровТовары.СостояниеТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Заказ
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Заказано)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Собрано
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Собрано)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_КУпаковке
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.КОтправке)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_НаПриём
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.НаПриёме)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Отправлен
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Отправлен)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Условие.Ссылка КАК Ссылка,
	|	СУММА(Вт_Условие.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Принят
	|ИЗ
	|	Вт_Условие КАК Вт_Условие
	|ГДЕ
	|	Вт_Условие.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Принят)
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Условие.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка,
	|	ПеремещениеТоваров.Дата КАК Дата,
	|	ПеремещениеТоваров.Ответственный КАК Ответственный,
	|	ПеремещениеТоваров.Проверяющий КАК Проверяющий,
	|	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
	|	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель,
	|	ПеремещениеТоваров.Статус КАК Статус,
	|	ВТ_Заказ.НомерСтроки КАК КолВоЗаказов,
	|	ВТ_Собрано.НомерСтроки КАК КолВоСобрано,
	|	ВТ_КУпаковке.НомерСтроки КАК КолВоКУпаковке,
	|	ВТ_НаПриём.НомерСтроки КАК КолВоНаПриём,
	|	ВТ_Отправлен.НомерСтроки КАК КолВоОтправлен,
	|	ВТ_Принят.НомерСтроки КАК КолВоПринят,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|ПОМЕСТИТЬ ВТ_Наряд
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		Левое СОЕДИНЕНИЕ ВТ_Заказ КАК ВТ_Заказ
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_Заказ.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_Собрано КАК ВТ_Собрано
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_Собрано.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_КУпаковке КАК ВТ_КУпаковке
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_КУпаковке.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_НаПриём КАК ВТ_НаПриём
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_НаПриём.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_Отправлен КАК ВТ_Отправлен
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_Отправлен.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_Принят КАК ВТ_Принят
	|		ПО ПеремещениеТоваров.Ссылка = ВТ_Принят.Ссылка
	| &Фильтр
	// |{ГДЕ
	// |	(ЗаказНаряд.Состояние В (&СостояниНаряда)) ,
	// |	(ВТ_Сборка.КоличествоСтрок > &Сборка) ,
	// |	(ВТ_Выдача.КоличествоСтрок > &Выдача) }
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_Наряд.Номер КАК Номер,
	|	ВТ_Наряд.Дата КАК Дата,
	|	ВТ_Наряд.Ответственный КАК Ответственный,
	|	ВТ_Наряд.Статус КАК Статус,
	|	ВТ_Наряд.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Наряд.КолВоЗаказов КАК КолВоЗаказов,
	|	ВТ_Наряд.КолВоСобрано КАК КолВоСобрано,
	|	ВТ_Наряд.КолВоКУпаковке КАК КолВоКУпаковке,
	|	ВТ_Наряд.КолВоНаПриём КАК КолВоНаПриём,
	|	ВТ_Наряд.КолВоНаПриём КАК КолВоОтправлен,
	|	ВТ_Наряд.КолВоПринят КАК КолВоПринят,
	|	ВТ_Наряд.СкладОтправитель КАК СкладОтправитель,
	|	ВТ_Наряд.Проверяющий КАК Проверяющий,
	|	ВТ_Наряд.СкладПолучатель КАК СкладПолучатель
	
	|ИЗ
	|	ВТ_Наряд КАК ВТ_Наряд
	|ГДЕ
	|	ВТ_Наряд.НомерЗаписи >= &НачинаяСЗаписи  
	|	И ВТ_Наряд.Дата > датавремя(2023,10,02) 
	
	|	И  ВТ_Наряд.Статус <> Значение(перечисление.СтатусыПеремещений.Принят) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";
	Возврат текст;
	
КонецФункции

Функция текстДляПеремещения()
	
	///+ГомзМА 20.02.2024
		Текст =  "ВЫБРАТЬ
		         |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		         |	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		         |	ПеремещениеТоваровТовары.Товар КАК Товар,
		         |	ПеремещениеТоваровТовары.Автомобиль КАК Автомобиль,
		         |	ПеремещениеТоваровТовары.Партия КАК Партия,
		         |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Партия) КАК Партия2,
		         |	ПеремещениеТоваровТовары.Цена КАК Цена,
		         |	ПеремещениеТоваровТовары.Количество КАК Количество,
		         |	ПеремещениеТоваровТовары.ОбщЦена КАК ОбщЦена,
		         |	ПеремещениеТоваровТовары.Комментарий КАК Комментарий,
		         |	ПеремещениеТоваровТовары.СостояниеТовара КАК СостояниеТовара,
		         |	ПеремещениеТоваровТовары.Товар.Код КАК Код,
		         |	ПеремещениеТоваровТовары.Товар.Артикул КАК Артикул
		         |ПОМЕСТИТЬ ВТ_ТЧЗаказано
		         |ИЗ
		         |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		         |ГДЕ
		         |	(ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Заказано)
		         |			ИЛИ ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.НетВНаличии))
		         |	И ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
		         |;
		         |
		         |////////////////////////////////////////////////////////////////////////////////
		         |ВЫБРАТЬ
		         |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		         |	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		         |	ПеремещениеТоваровТовары.Товар КАК Товар,
		         |	ПеремещениеТоваровТовары.Автомобиль КАК Автомобиль,
		         |	ПеремещениеТоваровТовары.Партия КАК Партия,
		         |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Партия) КАК Партия2,
		         |	ПеремещениеТоваровТовары.Цена КАК Цена,
		         |	ПеремещениеТоваровТовары.Количество КАК Количество,
		         |	ПеремещениеТоваровТовары.ОбщЦена КАК ОбщЦена,
		         |	ПеремещениеТоваровТовары.Комментарий КАК Комментарий,
		         |	ПеремещениеТоваровТовары.СостояниеТовара КАК СостояниеТовара,
		         |	ПеремещениеТоваровТовары.Товар.Код КАК Код,
		         |	ПеремещениеТоваровТовары.Товар.Артикул КАК Артикул
		         |ПОМЕСТИТЬ ВТ_ТЧСобрано
		         |ИЗ
		         |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		         |ГДЕ
		         |	(ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Собрано)
		         |			ИЛИ ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.НетВНаличии))
		         |	И ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
		         |;
		         |
		         |////////////////////////////////////////////////////////////////////////////////
		         |ВЫБРАТЬ
		         |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		         |	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		         |	ПеремещениеТоваровТовары.Товар КАК Товар,
		         |	ПеремещениеТоваровТовары.Автомобиль КАК Автомобиль,
		         |	ПеремещениеТоваровТовары.Партия КАК Партия,
		         |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Партия) КАК Партия2,
		         |	ПеремещениеТоваровТовары.Цена КАК Цена,
		         |	ПеремещениеТоваровТовары.Количество КАК Количество,
		         |	ПеремещениеТоваровТовары.ОбщЦена КАК ОбщЦена,
		         |	ПеремещениеТоваровТовары.Комментарий КАК Комментарий,
		         |	ПеремещениеТоваровТовары.СостояниеТовара КАК СостояниеТовара,
		         |	ПеремещениеТоваровТовары.Товар.Код КАК Код,
		         |	ПеремещениеТоваровТовары.Товар.Артикул КАК Артикул
		         |ПОМЕСТИТЬ ВТ_ТЧКОтправке
		         |ИЗ
		         |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		         |ГДЕ
		         |	ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.КОтправке)
		         |	И ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
		         |;
		         |
		         |////////////////////////////////////////////////////////////////////////////////
		         |ВЫБРАТЬ
		         |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		         |	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		         |	ПеремещениеТоваровТовары.Товар КАК Товар,
		         |	ПеремещениеТоваровТовары.Автомобиль КАК Автомобиль,
		         |	ПеремещениеТоваровТовары.Партия КАК Партия,
		         |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Партия) КАК Партия2,
		         |	ПеремещениеТоваровТовары.Цена КАК Цена,
		         |	ПеремещениеТоваровТовары.Количество КАК Количество,
		         |	ПеремещениеТоваровТовары.ОбщЦена КАК ОбщЦена,
		         |	ПеремещениеТоваровТовары.Комментарий КАК Комментарий,
		         |	ПеремещениеТоваровТовары.СостояниеТовара КАК СостояниеТовара,
		         |	ПеремещениеТоваровТовары.Товар.Код КАК Код,
		         |	ПеремещениеТоваровТовары.Товар.Артикул КАК Артикул
		         |ПОМЕСТИТЬ ВТ_ТЧКОтправлен
		         |ИЗ
		         |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		         |ГДЕ
		         |	ПеремещениеТоваровТовары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Отправлен)
		         |	И ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
		         |;
		         |
		         |////////////////////////////////////////////////////////////////////////////////
		         |ВЫБРАТЬ
		         |	ПеремещениеТоваров.Ссылка КАК Ссылка,
		         |	ПеремещениеТоваров.Номер КАК Номер,
		         |	ПеремещениеТоваров.Дата КАК Дата,
		         |	ПеремещениеТоваров.Организация КАК Организация,
		         |	ПеремещениеТоваров.Итого КАК Итого,
		         |	ПеремещениеТоваров.Ответственный КАК Ответственный,
		         |	ПеремещениеТоваров.Проверяющий КАК Проверяющий,
		         |	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
		         |	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель,
		         |	ПеремещениеТоваров.НомерВходящий КАК НомерВходящий,
		         |	ПеремещениеТоваров.Комментарий КАК Комментарий,
		         |	ПеремещениеТоваров.Статус КАК Статус,
		         |	ПеремещениеТоваров.Проект КАК Проект,
		         |	Сотрудники.Код КАК Код
		         |ИЗ
		         |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		         |		ПО ПеремещениеТоваров.Ответственный = Сотрудники.Ссылка
		         |ГДЕ
		         |	ПеремещениеТоваров.Номер = &Номер";
		///-ГомзМА 20.02.2024
	
	//Текст =  "ВЫБРАТЬ
	//|	Сотрудники.Код КАК Код,
	//|	ПеремещениеТоваров.Ссылка КАК Ссылка,
	//|	ПеремещениеТоваров.ВерсияДанных КАК ВерсияДанных,
	//|	ПеремещениеТоваров.ПометкаУдаления КАК ПометкаУдаления,
	//|	ПеремещениеТоваров.Номер КАК Номер,
	//|	ПеремещениеТоваров.Дата КАК Дата,
	//|	ПеремещениеТоваров.Проведен КАК Проведен,
	//|	ПеремещениеТоваров.Организация КАК Организация,
	//|	ПеремещениеТоваров.УдалитьКлиент КАК УдалитьКлиент,
	//|	ПеремещениеТоваров.Итого КАК Итого,
	//|	ПеремещениеТоваров.Ответственный КАК Ответственный,
	//|	ПеремещениеТоваров.Проверяющий КАК Проверяющий,
	//|	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
	//|	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель,
	//|	ПеремещениеТоваров.НомерВходящий КАК НомерВходящий,
	//|	ПеремещениеТоваров.Комментарий КАК Комментарий,
	//|	ПеремещениеТоваров.Статус КАК Статус,
	//|	ПеремещениеТоваров.Проект КАК Проект,
	//|	ПеремещениеТоваров.Товары.(
	//|		Ссылка КАК Ссылка,
	//|		НомерСтроки КАК НомерСтроки,
	//|		Товар КАК Товар,
	//|		Автомобиль КАК Автомобиль,
	//|		Партия КАК Партия,
	//|		Цена КАК Цена,
	//|		ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваров.Товары.Партия) КАК Партия2,
	//
	//|		Количество КАК Количество,
	//|		ОбщЦена КАК ОбщЦена,
	//|		Комментарий КАК Комментарий,
	//|		СостояниеТовара КАК СостояниеТовара,
	//|		Товар.Артикул КАК Артикул,
	//|		Товар.Код КАК Код
	//|	) КАК Товары
	//|ИЗ
	//|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	//|		ПО ПеремещениеТоваров.Ответственный = Сотрудники.Ссылка
	//|ГДЕ
	//|	ПеремещениеТоваров.Номер = &Номер
	//| &Фильтр";
	Возврат Текст;
КонецФункции

Функция текстДляЗадач() 
	Текст =  "ВЫБРАТЬ ПЕРВЫЕ 10000
	|	докЗадача.Номер КАК Номер,
	|	докЗадача.Дата КАК Дата,
	|	докЗадача.ДатаОкончанияФакт КАК ДатаВыполнения,
	|	докЗадача.Описание КАК Описание,
	|	докЗадача.Наименование КАК Наименование,
	|	докЗадача.Отдел КАК Отдел,
	|	докЗадача.Направление КАК Направление,
	|	докЗадача.Исполнитель КАК Исполнитель,
	|	докЗадача.Ответственный КАК Ответственный,
	|	докЗадача.ПлановыйСрокВыполнения КАК ПлановыйСрокВыполнения,
	|	докЗадача.Статус КАК Статус,
	|	докЗадача.СтатусАвтора КАК СтатусАвтора,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	Сотрудники.Код КАК Код,
	|	докЗадача.Ссылка КАК Ссылка,
	|	докЗадача.ОценкаЗадач КАК ОценкаЗадач,
	|	докЗадача.ИдентификаторРаботыЗаказНарядаНаВосстановление КАК ИдентификаторРаботыЗаказНарядаНаВосстановление,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ Вт_Предварительно
	|ИЗ
	|	Документ.Задача КАК докЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО докЗадача.Ответственный = Сотрудники.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|		ПО докЗадача.Ссылка = ПриоритетыЗадач.Задача
	|ГДЕ
	|	(докЗадача.Исполнитель = &Исполнитель
	|   ИЛИ докЗадача.Исполнители.Исполнитель = &Исполнитель)
	//|   И докЗадача.РодительскаяЗадача = Значение(Документ.Задача.ПустаяСсылка)
	|	И докЗадача.Статус В (&Статус)
	|	И (докЗадача.Наименование ПОДОБНО &Описание
	|	ИЛИ докЗадача.Описание ПОДОБНО &Описание)
	|	И докЗадача.Дата >= ДАТАВРЕМЯ(2024, 1, 1)
	|	
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статус,
	|	ДатаВыполнения УБЫВ,
	|	Приоритет,
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	Вт_Предварительно.Номер КАК Номер,
	|	Вт_Предварительно.Дата КАК Дата,
	|	Вт_Предварительно.ДатаВыполнения КАК ДатаВыполнения,
	|	Вт_Предварительно.Описание КАК Описание,
	|	Вт_Предварительно.Наименование КАК Наименование,
	|	Вт_Предварительно.Отдел КАК Отдел,
	|	Вт_Предварительно.Направление КАК Направление,
	|	Вт_Предварительно.Исполнитель КАК Исполнитель,
	|	Вт_Предварительно.Ответственный КАК Ответственный,
	|	Вт_Предварительно.ПлановыйСрокВыполнения КАК ПлановыйСрокВыполнения,
	|	Вт_Предварительно.Статус КАК Статус,
	|	Вт_Предварительно.СтатусАвтора КАК СтатусАвтора,
	|	Вт_Предварительно.Код КАК Код,
	|	Вт_Предварительно.ИдентификаторРаботыЗаказНарядаНаВосстановление КАК ИдентификаторРаботыЗаказНарядаНаВосстановление,
	|	Вт_Предварительно.НомерЗаписи КАК НомерЗаписи,
	|	Вт_Предварительно.Ссылка КАК Ссылка,
	|	Вт_Предварительно.ОценкаЗадач КАК ОценкаЗадач,
	|	Вт_Предварительно.Приоритет КАК Приоритет
	|ИЗ
	|	Вт_Предварительно КАК Вт_Предварительно
	|ГДЕ
	|	Вт_Предварительно.НомерЗаписи >= &НачинаяСЗаписи";
	Возврат Текст;
КонецФункции

Функция текстДляЗадачОтАвтора() 
	Текст =  "ВЫБРАТЬ ПЕРВЫЕ 10000
	|	Задача.Номер КАК Номер,
	|	Задача.Дата КАК Дата,
	|	Задача.ДатаОкончанияФакт КАК ДатаВыполнения,
	|	Задача.Описание КАК Описание,
	|	Задача.Наименование КАК Наименование,
	|	Задача.Исполнитель КАК Исполнитель,
	|	Задача.Ответственный КАК Ответственный,
	|	Задача.ПлановыйСрокВыполнения КАК ПлановыйСрокВыполнения,
	|	Задача.Статус КАК Статус,
	|	Задача.СтатусАвтора КАК СтатусАвтора,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	Сотрудники.Код КАК Код,
	|	Задача.Ссылка КАК Ссылка,
	|	Задача.ИдентификаторРаботыЗаказНарядаНаВосстановление
	|ПОМЕСТИТЬ Вт_Предварительно
	|ИЗ
	|	Документ.Задача КАК Задача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Задача.Ответственный = Сотрудники.Пользователь
	|ГДЕ
	|	Задача.Ответственный = &Автор
	|	И Задача.Статус В (&Статус)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыполнения УБЫВ,
	|	Статус,
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	Вт_Предварительно.Номер КАК Номер,
	|	Вт_Предварительно.Дата КАК Дата,
	|	Вт_Предварительно.ДатаВыполнения КАК ДатаВыполнения,
	|	Вт_Предварительно.Описание КАК Описание,
	|	Вт_Предварительно.Наименование КАК Наименование,
	|	Вт_Предварительно.Исполнитель КАК Исполнитель,
	|	Вт_Предварительно.Ответственный КАК Ответственный,
	|	Вт_Предварительно.ПлановыйСрокВыполнения КАК ПлановыйСрокВыполнения,
	|	Вт_Предварительно.Статус КАК Статус,
	|	Вт_Предварительно.СтатусАвтора КАК СтатусАвтора,
	|	Вт_Предварительно.Код КАК Код,
	|	Вт_Предварительно.НомерЗаписи КАК НомерЗаписи,
	|	Вт_Предварительно.Ссылка КАК Ссылка,
	|	Вт_Предварительно.ИдентификаторРаботыЗаказНарядаНаВосстановление
	|ИЗ
	|	Вт_Предварительно КАК Вт_Предварительно
	|ГДЕ
	|	Вт_Предварительно.НомерЗаписи >= &НачинаяСЗаписи";
	Возврат Текст;
КонецФункции
Функция текстДляЗадачОтдела() 
	Текст =  "ВЫБРАТЬ ПЕРВЫЕ 10000
	         |	докЗадача.Номер КАК Номер,
	         |	докЗадача.Дата КАК Дата,
	         |	докЗадача.ДатаОкончанияФакт КАК ДатаВыполнения,
			 |	докЗадача.ПлановыйСрокВыполнения КАК ПлановыйСрокВыполнения,
	         |	докЗадача.Описание КАК Описание,
	         |	докЗадача.Наименование КАК Наименование,
	         |	докЗадача.Исполнитель КАК Исполнитель,
	         |	докЗадача.Ответственный КАК Ответственный,
	         |	докЗадача.Статус КАК Статус,
	         |	докЗадача.СтатусАвтора КАК СтатусАвтора,
	         |	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	         |	Сотрудники.Код КАК Код,
	         |	докЗадача.Ссылка КАК Ссылка,
	         |	докЗадача.ОценкаЗадач КАК ОценкаЗадач,
	         |	докЗадача.ИдентификаторРаботыЗаказНарядаНаВосстановление КАК ИдентификаторРаботыЗаказНарядаНаВосстановление,
	         |	ПриоритетыЗадач.Приоритет КАК Приоритет
	         |ПОМЕСТИТЬ Вт_Предварительно
	         |ИЗ
	         |	Документ.Задача КАК докЗадача
	         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	         |		ПО докЗадача.Ответственный = Сотрудники.Пользователь
	         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	         |		ПО докЗадача.Ссылка = ПриоритетыЗадач.Задача
	         |ГДЕ
	         |	докЗадача.Направление = &Направление
	         |	И докЗадача.Статус В(&Статус)
	         |	И (докЗадача.Наименование ПОДОБНО &Описание
	         |			ИЛИ докЗадача.Описание ПОДОБНО &Описание)
	         |	И докЗадача.Дата >= ДАТАВРЕМЯ(2024, 1, 1)
	         |
	         |УПОРЯДОЧИТЬ ПО
	         |	ДатаВыполнения УБЫВ,
	         |	Приоритет,
	         |	Дата УБЫВ
	         |;
	         |
	         |////////////////////////////////////////////////////////////////////////////////
	         |ВЫБРАТЬ ПЕРВЫЕ %1
	         |	Вт_Предварительно.Номер КАК Номер,
	         |	Вт_Предварительно.Дата КАК Дата,
	         |	Вт_Предварительно.ДатаВыполнения КАК ДатаВыполнения,
			 |  Вт_Предварительно.ПлановыйСрокВыполнения КАК ПлановыйСрокВыполнения,
	         |	Вт_Предварительно.Описание КАК Описание,
	         |	Вт_Предварительно.Наименование КАК Наименование,
	         |	Вт_Предварительно.Исполнитель КАК Исполнитель,
	         |	Вт_Предварительно.Ответственный КАК Ответственный,
	         |	Вт_Предварительно.Статус КАК Статус,
	         |	Вт_Предварительно.СтатусАвтора КАК СтатусАвтора,
	         |	Вт_Предварительно.Код КАК Код,
	         |	Вт_Предварительно.ИдентификаторРаботыЗаказНарядаНаВосстановление КАК ИдентификаторРаботыЗаказНарядаНаВосстановление,
	         |	Вт_Предварительно.НомерЗаписи КАК НомерЗаписи,
	         |	Вт_Предварительно.Ссылка КАК Ссылка,
	         |	Вт_Предварительно.ОценкаЗадач КАК ОценкаЗадач,
	         |	Вт_Предварительно.Приоритет КАК Приоритет
	         |ИЗ
	         |	Вт_Предварительно КАК Вт_Предварительно
	         |ГДЕ
	         |	Вт_Предварительно.НомерЗаписи >= &НачинаяСЗаписи";
	Возврат Текст;
КонецФункции

Функция текстДляЗадачи() 
	Текст =  "ВЫБРАТЬ
	|	Задача.Номер КАК Номер,
	|  Задача.ссылка КАК ссылка,
	|	Задача.Дата КАК Дата,
	|	Задача.Описание КАК Описание,
	|	Задача.Наименование КАК Наименование,
	|	Задача.Исполнитель КАК Исполнитель,
	|	Задача.Ответственный КАК Автор,
	|	Задача.Статус КАК Статус,
	|	Задача.СтатусАвтора КАК СтатусАвтора
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Номер = &Номер";
	Возврат Текст;
КонецФункции

Функция текстДляСпискаНарядовВосстановления() 
	
	///+ГомзМА 15.04.2024
	Текст ="ВЫБРАТЬ
	|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка КАК Ссылка,
	|	СУММА(Рас_КомплектовкаРаботыСписок.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Наряд_ВРаботе
	|ИЗ
	|	Документ.Рас_Комплектовка.РаботыСписок КАК Рас_КомплектовкаРаботыСписок
	|ГДЕ
	|	Рас_КомплектовкаРаботыСписок.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.ВРаботе)
	|СГРУППИРОВАТЬ ПО
	|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка КАК Ссылка,
	|	СУММА(Рас_КомплектовкаРаботыСписок.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Наряд_НаПроверке
	|ИЗ
	|	Документ.Рас_Комплектовка.РаботыСписок КАК Рас_КомплектовкаРаботыСписок
	|ГДЕ
	|	Рас_КомплектовкаРаботыСписок.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.НаПроверке)
	|СГРУППИРОВАТЬ ПО
	|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка КАК Ссылка,
	|	СУММА(Рас_КомплектовкаРаботыСписок.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Наряд_Выполнено
	|ИЗ
	|	Документ.Рас_Комплектовка.РаботыСписок КАК Рас_КомплектовкаРаботыСписок
	|ГДЕ
	|	Рас_КомплектовкаРаботыСписок.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.Выполнено)
	|СГРУППИРОВАТЬ ПО
	|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка КАК Ссылка,
	|	СУММА(Рас_КомплектовкаРаботыСписок.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Наряд_Продано
	|ИЗ
	|	Документ.Рас_Комплектовка.РаботыСписок КАК Рас_КомплектовкаРаботыСписок
	|ГДЕ
	|	Рас_КомплектовкаРаботыСписок.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.Продано)
	|СГРУППИРОВАТЬ ПО
	|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка КАК Ссылка,
	|	СУММА(Рас_КомплектовкаРаботыСписок.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Наряд_Ожидание
	|ИЗ
	|	Документ.Рас_Комплектовка.РаботыСписок КАК Рас_КомплектовкаРаботыСписок
	|ГДЕ
	|	Рас_КомплектовкаРаботыСписок.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.Ожидание)
	|СГРУППИРОВАТЬ ПО
	|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рас_Комплектовка.Ссылка КАК Ссылка,
	|	Рас_Комплектовка.Номер КАК Номер,
	|	Рас_Комплектовка.Дата КАК Дата,
	|	Рас_Комплектовка.Клиент КАК Клиент,
	|	Рас_Комплектовка.Состояние КАК Состояние,
	|	Рас_Комплектовка.Ответственный КАК Ответственный,
	|	ВТ_Наряд_Ожидание.Количество КАК КоличествоОжидание,
	|	ВТ_Наряд_ВРаботе.Количество КАК КоличествоВРаботе,
	|	ВТ_Наряд_Выполнено.Количество КАК КоличествоНаПроверке,
	|	ВТ_Наряд_Выполнено.Количество КАК КоличествоВыполнено,
	|	ВТ_Наряд_Продано.Количество КАК КоличествоПродано,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	Рас_Комплектовка.ДатаОкончания,
	|	Рас_Комплектовка.ДатаНачала,
	|	Рас_Комплектовка.Организация,
	|	Рас_Комплектовка.СуммаДокумента,
	|	Рас_Комплектовка.Номенклатура,
	|	Рас_Комплектовка.Проект,
	|	Рас_Комплектовка.Комментарий
	|ПОМЕСТИТЬ ВТ_Наряды
	|ИЗ
	|	Документ.Рас_Комплектовка КАК Рас_Комплектовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наряд_Ожидание КАК ВТ_Наряд_Ожидание
	|		ПО Рас_Комплектовка.Ссылка = ВТ_Наряд_Ожидание.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наряд_ВРаботе КАК ВТ_Наряд_ВРаботе
	|		ПО Рас_Комплектовка.Ссылка = ВТ_Наряд_ВРаботе.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наряд_НаПроверке КАК ВТ_Наряд_НаПроверке
	|		ПО Рас_Комплектовка.Ссылка = ВТ_Наряд_НаПроверке.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наряд_Выполнено КАК ВТ_Наряд_Выполнено
	|		ПО Рас_Комплектовка.Ссылка = ВТ_Наряд_Выполнено.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наряд_Продано КАК ВТ_Наряд_Продано
	|		ПО Рас_Комплектовка.Ссылка = ВТ_Наряд_Продано.Ссылка
	|ГДЕ
	|	(Рас_Комплектовка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектовки.ВРаботе)
	|	ИЛИ Рас_Комплектовка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектовки.Предварительно))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_Наряды.Номер КАК Номер,
	|	ВТ_Наряды.Дата КАК Дата,
	|	ВТ_Наряды.Клиент КАК Клиент,
	|	ВТ_Наряды.Состояние КАК Состояние,
	|	ВТ_Наряды.Ответственный КАК Ответственный,
	|	ВТ_Наряды.КоличествоОжидание КАК КоличествоОжидание,
	|	ВТ_Наряды.КоличествоВРаботе КАК КоличествоНаПроверке,
	|	ВТ_Наряды.КоличествоВРаботе КАК КоличествоВРаботе,
	|	ВТ_Наряды.КоличествоВыполнено КАК КоличествоВыполнено,
	|	ВТ_Наряды.КоличествоПродано КАК КоличествоПродано,
	|	ВТ_Наряды.Комментарий,
	|	ВТ_Наряды.Проект,
	|	ВТ_Наряды.Номенклатура,
	|	ВТ_Наряды.СуммаДокумента,
	|	ВТ_Наряды.Организация,
	|	ВТ_Наряды.ДатаНачала,
	|	ВТ_Наряды.ДатаОкончания
	|ИЗ
	|	ВТ_Наряды КАК ВТ_Наряды
	|ГДЕ
	|	ВТ_Наряды.НомерЗаписи > &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Наряды.НомерЗаписи";
	Возврат Текст;
	///-ГомзМА 15.04.2024
	
КонецФункции
#конецОбласти

#Область Get
//Функция ОтчётПоКонвейеруpipelinereport(Запрос) 
//	ЗапросОтчёта = Новый запрос;	
//	ЗапросОтчёта.Текст = "ВЫБРАТЬ
//	                     |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИндНомер.индкод) КАК Количество,
//	                     |	ИндНомер.ДатаИзмененияКонвеера КАК Дата,
//	                     |	ИндНомер.Ответственный КАК Ответственный,
//	                     |	РабочиеПостыРабочие.Ссылка КАК Ссылка
//	                     |ИЗ
//	                     |	РегистрСведений.ИндНомер КАК ИндНомер
//	                     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеПосты.Рабочие КАК РабочиеПостыРабочие
//	                     |		ПО ИндНомер.Ответственный = РабочиеПостыРабочие.Работник
//	                     |ГДЕ
//	                     |	ИндНомер.АвитоЧастник = ИСТИНА
//	                     |	И ИндНомер.ДатаИзмененияКонвеера МЕЖДУ &ДатаНачала И &ДатаОкончания
//	                     |	И ИндНомер.Ответственный = &Ответственный
//	                     |
//	                     |СГРУППИРОВАТЬ ПО
//	                     |	ИндНомер.ДатаИзмененияКонвеера,
//	                     |	ИндНомер.Ответственный,
//	                     |	РабочиеПостыРабочие.Ссылка
//	                     |
//	                     |УПОРЯДОЧИТЬ ПО
//	                     |	Ссылка"; 
//	ДатаНачала = Дата(Строка(Запрос.ПараметрыURL["datestart"]));
//	ДатаОкончания = Дата(Строка(Запрос.ПараметрыURL["dateend"]));
//	
//	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Строка(Запрос.ПараметрыURL["user"])).Пользователь;
//	
//	ЗапросОтчёта.УстановитьПараметр("ДатаНачала",ДатаНачала);
//	ЗапросОтчёта.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
//	ЗапросОтчёта.УстановитьПараметр("Ответственный",Ответственный);
//	
//	Выборка = ЗапросОтчёта.Выполнить().Выбрать();
//	МассивДанных = Новый массив;
//	Пока выборка.Следующий() Цикл 
//		
//		СтруктураИнфо = новый Структура;
//		СтруктураИнфо.Вставить("count",выборка.Количество);
//		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
//		СтруктураИнфо.Вставить("store_keeper",Строка(выборка.Ответственный));
//		СтруктураИнфо.Вставить("post",Строка(выборка.Ссылка));
//		МассивДанных.Добавить(СтруктураИнфо); 
//		
//	КонецЦикла;
//	
//	//СтруктураИнфо= новый Структура;
//	//СтруктураИнфо.Вставить("pages",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
//	//СтруктураИнфо.Вставить("count",Выборкаобщ);	
//	//
//	//СтруктураОтвета = новый Структура;
//	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
//	//СтруктураОтвета.Вставить("data",МассивНарядов);
//	//
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();
//	
//	ЗаписатьJSON(ЗаписьJSON, МассивДанных);
//	
//	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
//	
//	Ответ = Новый HTTPСервисОтвет(200);	
//	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
//	
//	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
//	
//	Возврат Ответ;
//	
//	
//	
//КонецФункции
Функция ОтчётПоКонвейеруpipelinereport(Запрос)
	
	///+ГомзМА 12.03.2024
	ЗапросОтчёта = Новый запрос;	
	ЗапросОтчёта.Текст = "ВЫБРАТЬ
	                     |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИндНомер.индкод) КАК Количество,
	                     |	ИндНомер.ДатаИзмененияКонвеера КАК Дата,
	                     |	СУММА(ИндНомер.Цена) КАК Сумма
	                     |ИЗ
	                     |	РегистрСведений.ИндНомер КАК ИндНомер
	                     |ГДЕ
	                     |	ИндНомер.АвитоЧастник = ИСТИНА
	                     |	И ИндНомер.ДатаИзмененияКонвеера МЕЖДУ &ДатаНачала И &ДатаОкончания
	                     |
	                     |СГРУППИРОВАТЬ ПО
	                     |	ИндНомер.ДатаИзмененияКонвеера
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	Дата"; 
	
	ДатаНачала		= Дата(Строка(Запрос.ПараметрыURL["datestart"]));
	ДатаОкончания 	= Дата(Строка(Запрос.ПараметрыURL["dateend"]));
	
	ЗапросОтчёта.УстановитьПараметр("ДатаНачала",	 ДатаНачала);
	ЗапросОтчёта.УстановитьПараметр("ДатаОкончания", ДатаОкончания); 
	
	Выборка = ЗапросОтчёта.Выполнить().Выбрать();
	
	МассивДанных = Новый Массив;
	
	Если Выборка.Количество() > 0 Тогда
		Пока выборка.Следующий() Цикл 
			
			МассивДеталиПоСотруднику = Новый Массив;
			СтруктураИнфо = Новый Структура;
			СтруктураИнфо.Вставить("count",	выборка.Количество);
			СтруктураИнфо.Вставить("money",	выборка.Сумма);
			СтруктураИнфо.Вставить("date",	Строка(выборка.Дата));
			
			ЗапросОтчётаПоСотруднику = Новый запрос;	
			ЗапросОтчётаПоСотруднику.Текст = "ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИндНомер.индкод) КАК Количество,
			|	ИндНомер.ДатаИзмененияКонвеера КАК Дата,
			|	ИндНомер.Ответственный КАК Ответственный,
			|	СУММА(ИндНомер.Цена) КАК Сумма
			|ИЗ
			|	РегистрСведений.ИндНомер КАК ИндНомер
			|ГДЕ
			|	ИндНомер.АвитоЧастник = ИСТИНА
			|	И ИндНомер.ДатаИзмененияКонвеера МЕЖДУ &ДатаНачала И &ДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	ИндНомер.ДатаИзмененияКонвеера,
			|	ИндНомер.Ответственный
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата"; 
			
			ЗапросОтчётаПоСотруднику.УстановитьПараметр("ДатаНачала",	 Выборка.Дата);
			ЗапросОтчётаПоСотруднику.УстановитьПараметр("ДатаОкончания", Выборка.Дата); 
			
			//@skip-check query-in-loop
			ВыборкаПоСотрудникам = ЗапросОтчётаПоСотруднику.Выполнить().Выбрать();
			Пока ВыборкаПоСотрудникам.Следующий() Цикл 
				СтруктураПоСотруднику = Новый Структура;
				СтруктураПоСотруднику.Вставить("count",	 ВыборкаПоСотрудникам.Количество);
				СтруктураПоСотруднику.Вставить("money",	 ВыборкаПоСотрудникам.Сумма);
				СтруктураПоСотруднику.Вставить("person", Строка(ВыборкаПоСотрудникам.Ответственный));
				МассивДеталиПоСотруднику.Добавить(СтруктураПоСотруднику); 
			КонецЦикла;
			СтруктураИнфо.Вставить("persons", МассивДеталиПоСотруднику);
			МассивДанных.Добавить(СтруктураИнфо); 
		КонецЦикла;
	Иначе
		МассивДеталиПоСотруднику = Новый Массив;
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("count",	0);
		СтруктураИнфо.Вставить("money",	0);
		СтруктураИнфо.Вставить("date",	ТекущаяДата());
		//СтруктураПоСотруднику = Новый Структура;
		//СтруктураПоСотруднику.Вставить("count",	 0);
		//СтруктураПоСотруднику.Вставить("money",	 0);
		//СтруктураПоСотруднику.Вставить("person", 0);
		СтруктураИнфо.Вставить("persons", МассивДеталиПоСотруднику);
		//МассивДеталиПоСотруднику.Добавить(СтруктураПоСотруднику); 
		МассивДанных.Добавить(СтруктураИнфо);
	КонецЕсли;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивДанных);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 12.03.2024
	
КонецФункции

Функция ПолучитьТоварGetProduct(Запрос)
	
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));  
	
	
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]) ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	///+ГомзМА 21.02.2024 
	Фотограф = ПолучитьФотографа(Запрос.ПараметрыURL["id"]);
	ФИОФотографа = "";
	ТабНомФотографа = "";
	Если Фотограф <> Неопределено Тогда
		ФИОФотографа = Справочники.Сотрудники.НайтиПоКоду(Фотограф.tabnum);
		ТабНомФотографа = Фотограф.tabnum;
	КонецЕсли;
	///-ГомзМА 21.02.2024
	
	Для каждого стр из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		итер = итер+1;
		тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    			 Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", 			 Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost",    			 Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", 			 Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place",    			 Строка(стр.Адрес));
		СтруктураТоваров.Вставить("uchetchik",    		 Строка(стр.Учетчик));
		СтруктураТоваров.Вставить("sklad",    			 Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("state",    			 Строка(стр.Состояние)); 
		СтруктураТоваров.Вставить("pk",       			 стр.АвитоЧастник);
		СтруктураТоваров.Вставить("chek_size",    		 стр.Размеры); 
		СтруктураТоваров.Вставить("availability",   	 стр.ФактНаличия);
		
		///+ГомзМА 21.02.2024
		СтруктураТоваров.Вставить("tabnum_photographer", Строка(ТабНомФотографа));
		СтруктураТоваров.Вставить("name_photographer",   Строка(ФИОФотографа));
		///-ГомзМА 21.02.2024
		
		СтруктураТоваров.Вставить("length",      		 стр.длин);
		СтруктураТоваров.Вставить("width",      		 стр.шир);
		СтруктураТоваров.Вставить("height",      		 стр.выс);
		СтруктураТоваров.Вставить("weight",      		 стр.Вес);
		
		СтруктураТоваров.Вставить("code", 				 Строка(стр.код));
		СтруктураТоваров.Вставить("indcode", 			 Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", 			 Строка(стр.Поддон));
		
		СтруктураТоваров.Вставить("photos", 			 МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьТоварыВПоддонеGetProductInPoddon(Запрос)
	
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТоваровВПоддонеИлиПолке(), Формат(10000, "ЧГ="));  
	запросТовара.УстановитьПараметр("наименование", Строка(Запрос.ПараметрыURL["id"]) ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	
	Пред = запросТовара.Выполнить().Выгрузить(); 
	МассивИндКодов = пред.ВыгрузитьКолонку("индкод");	
	Выборкаобщ = Пред.Количество(); 
	
	запросТовара.Текст =  СтрШаблон(текстДляТоваровВПоддонеИлиПолке(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", Строка(Запрос.ПараметрыURL["id"]) );
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли; 
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	Для каждого стр из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		итер = итер+1;
		тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place",    Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("pk",    стр.АвитоЧастник);
		
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);  
	СтруктураИнфо.Вставить("place",Строка(Справочники.Поддоны.НайтиПоНаименованию(Строка(Запрос.ПараметрыURL["id"])).Стеллаж));
	СтруктураИнфо.Вставить("sklad",Строка(Справочники.Поддоны.НайтиПоНаименованию(Строка(Запрос.ПараметрыURL["id"])).Стеллаж.Владелец));
	Если Строка(Запрос.ПараметрыURL["id"]) <> " " тогда
		СтруктураИнфо.Вставить("kor",Истина);
	Иначе
		СтруктураИнфо.Вставить("kor",Ложь);
	КонецЕсли ;
	
	СтруктураИнфо.Вставить("ids",МассивИндКодов);
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();                                    
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьАвторизациюAuthorization(Запрос)
	ЗапросСотрудника = Новый запрос;
	ЗапросСотрудника.Текст = "ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Организация КАК Организация,
	|	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ДолжностиСотрудниковСрезПоследних.ТипДоговора КАК ТипДоговора,
	|	ДолжностиСотрудниковСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втДолжности
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	Подразделение,
	|	Должность,
	|	ТипДоговора,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(втДолжности.Период) КАК Период
	|ПОМЕСТИТЬ втДолжностиПериоды
	|ИЗ
	|	втДолжности КАК втДолжности
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(втДолжности.Организация) КАК Организация,
	|	МИНИМУМ(втДолжности.Подразделение) КАК Подразделение,
	|	МИНИМУМ(втДолжности.Должность) КАК Должность,
	|	МИНИМУМ(втДолжности.ТипДоговора) КАК ТипДоговора,
	|	МИНИМУМ(втДолжности.Подразделение.Код) КАК ПодразделениеКод,
	|	МИНИМУМ(втДолжности.Должность.Код) КАК ДолжностьКод
	|ПОМЕСТИТЬ втДолжностиСотрудников
	|ИЗ
	|	втДолжности КАК втДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолжностиПериоды КАК втДолжностиПериоды
	|		ПО втДолжности.Сотрудник = втДолжностиПериоды.Сотрудник
	|		И (втДолжностиПериоды.Период = втДолжности.Период)
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	втДолжностиСотрудников.Организация КАК Организация,
	|	втДолжностиСотрудников.ПодразделениеКод КАК ПодразделениеКод,
	|	втДолжностиСотрудников.Подразделение КАК Подразделение,
	|	втДолжностиСотрудников.ДолжностьКод КАК ДолжностьКод,
	|	втДолжностиСотрудников.Должность КАК Должность,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втДолжностиСотрудников.Должность,
	|		ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка) КАК
	|		Действующий,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	Сотрудники.МестоРаботы КАК МестоРаботы,
	|	Сотрудники.ПарольДляУК КАК ПарольДляУК,
	|	Сотрудники.РолиWT10.(
	|		НомерСтроки КАК НомерСтроки,
	|		Роль КАК Роль) КАК РолиWT10,
	|	Сотрудники.Тележка КАК Тележка,
	|	Сотрудники.Тележка.Код КАК ТележкаКод,
	|	ПодразделенияУчастники.Ссылка.Код КАК КодПодразделения
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолжностиСотрудников КАК втДолжностиСотрудников
	|		ПО (втДолжностиСотрудников.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подразделения.Участники КАК ПодразделенияУчастники
	|		ПО ПодразделенияУчастники.Сотрудник = Сотрудники.Пользователь
	|ГДЕ
	|	(ТелефоныЛичные.ТелефонЛичный = &Телефон
	|	ИЛИ ТелефоныСлужебные.ТелефонСлужебный = &Телефон)
	|	И НЕ Сотрудники.Пользователь.Недействителен";
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	ЗапросСотрудника.УстановитьПараметр("Телефон", Строка(Массив.Phone));
	
	ВыборкаСотрудника = ЗапросСотрудника.Выполнить().Выбрать();
	Если ВыборкаСотрудника.Количество() > 0 Тогда
		ВыборкаСотрудника.Следующий();
		Если ВыборкаСотрудника.ПарольДляУК = Массив.Password тогда 
			//ДанныеВBase64 = XMLСтрока(ВыборкаСотрудника.фото); // Получим Base64 хранилища значения
			//ДвоичныеДанные = Base64Значение(ДанныеВBase64);
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("id",        			Строка(ВыборкаСотрудника.Код));
			СтруктураОтвета.Вставить("name",      			Строка(ВыборкаСотрудника.Наименование));
			СтруктураОтвета.Вставить("company",   			Строка(ВыборкаСотрудника.Организация));
			СтруктураОтвета.Вставить("post_id",      		Строка(ВыборкаСотрудника.ДолжностьКод));
			СтруктураОтвета.Вставить("post",      			Строка(ВыборкаСотрудника.Должность));
			СтруктураОтвета.Вставить("department",      	Строка(ВыборкаСотрудника.Подразделение));
			СтруктураОтвета.Вставить("department_id",  	    Строка(ВыборкаСотрудника.ПодразделениеКод));
			СтруктураОтвета.Вставить("birth_date",			Строка(ВыборкаСотрудника.ДатаРождения));
			СтруктураОтвета.Вставить("personal_phone",  	Строка(ВыборкаСотрудника.ТелефонЛичный));
			СтруктураОтвета.Вставить("work_phone",    		Строка(ВыборкаСотрудника.ТелефонСлужебный));
			СтруктураОтвета.Вставить("sub_department_id",   Строка(ВыборкаСотрудника.КодПодразделения));
			Если ВыборкаСотрудника.Тележка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
				СтруктураОтвета.Вставить("cart",    Строка(ВыборкаСотрудника.Тележка));
				СтруктураОтвета.Вставить("id_cart",    Строка(ВыборкаСотрудника.ТележкаКод));
			Иначе 
				СтруктураОтвета.Вставить("cart",    " ");
				СтруктураОтвета.Вставить("id_cart",    " ");
			КонецЕсли;
			
			//СтруктураОтвета.Вставить("Photo",ДвоичныеДанные ); 
			//signin
			Роли = ВыборкаСотрудника.РолиWT10.Выгрузить();
			
			МассивРолей = Новый массив;	
			
			Для Каждого стр из Роли Цикл 
				Структурароли = Новый Структура;
				Структурароли.Вставить("id",    Стр.Роль.Код);
				Структурароли.Вставить("title",    Строка(Стр.Роль)); 
				МассивРолей.Добавить(Структурароли);
			КонецЦикла;
			
			СтруктураОтвета.Вставить("roles",    МассивРолей);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			
			ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
			
			
			
			СтрокаДляОтвета = ЗаписьJSON.Закрыть();
			
			Ответ = Новый HTTPСервисОтвет(200);	
			Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
			
			Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			
			Возврат Ответ;
		Иначе 
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("{ ""errorMessage"":""Пароль не верен!"" }");
			Возврат Ответ;
		КонецЕсли;
		
	Иначе
		
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("{ ""errorMessage"":""Пользователь не найден."" }");
		Возврат Ответ;
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьЗаказНарядgetorder(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаказНаряда2();
	запросзаявки.УстановитьПараметр("Номер", Запрос.ПараметрыURL["Num"]);
	Выборка = запросзаявки.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("num", Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date", Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client", Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("application", Строка(выборка.ЗаказКлиента));
		СтруктураИнфо.Вставить("processing", Строка(выборка.состояние));
		//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible", Строка(выборка.Ответственный));
		//СтруктураИнфо.Вставить("sum",Строка(выборка.ИтогоРекв));
		//@skip-check query-in-loop
		МассивТоваров = ПолучитьСтруктуруТоваров(выборка.Номер);
		СтруктураИнфо.Вставить("state_product", МассивТоваров); 
		//	ВыборкаТоваров = выборка.Таблица.Выбрать();
		ТЗ = выборка.Таблица.Выгрузить();
		Массивкодов = ТЗ.ВыгрузитьКолонку("Партия");
		ТЗ.Колонки.Добавить("колФото", Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("Фото", Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;

		ИндКоды = тз.ВыгрузитьКолонку("Партия2");
		Фотки = ПолучениеФото(ИндКоды);
		итер = 0;
		Для Каждого стр Из ТЗ Цикл

			Если стр.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Срочно Или стр.Состояние
				= Перечисления.СтатусыТовараВЗаказНаряде.Планово Или стр.Состояние
				= Перечисления.СтатусыТовараВЗаказНаряде.Собрано Или стр.Состояние
				= Перечисления.СтатусыТовараВЗаказНаряде.НетВНаличии Тогда
				МассивФото = Новый массив;

				НайденныеФотки = Новый Массив;
				НайденныеФотки = Фотки[итер].urls;
				МассивФото = Новый массив;
				Если НайденныеФотки <> Неопределено И НайденныеФотки.Количество() > 0 Тогда

					стр.колфото = 1;

					Для Каждого Фотка Из НайденныеФотки Цикл
						Текст = "";
						Текст = Фотка;
						МассивФото.Добавить(Текст);
					КонецЦикла;
				КонецЕсли;
				//итер = итер+1;

				Код = стр.Код;
				Пока Лев(Код, 1) = "0" Цикл
					Код = Прав(Код, СтрДлина(Код) - 1);
				КонецЦикла;
				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("name", Строка(стр.Товар));
				СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
				СтруктураТоваров.Вставить("cost", Строка(стр.Цена));
				СтруктураТоваров.Вставить("count", Строка(стр.Количество));
				СтруктураТоваров.Вставить("sum", Строка(стр.Сумма));
				СтруктураТоваров.Вставить("issued", Строка(стр.Состояние));
				СтруктураТоваров.Вставить("Code", Строка("00" + Код));
				СтруктураТоваров.Вставить("indcode", Строка(стр.Партия));
				//@skip-check query-in-loop
				//@skip-check query-in-loop
				СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
				//@skip-check query-in-loop
				//@skip-check query-in-loop
				СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
				СтруктураТоваров.Вставить("sklad", Строка(стр.Склад));
				СтруктураТоваров.Вставить("photos", МассивФото);
				СтруктураТоваров.Вставить("state", Строка(стр.Состояние));
				СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
				//@skip-check query-in-loop
				//@skip-check query-in-loop
				СтруктураТоваров.Вставить("k", ЕстьНаКСкладе(стр.Товар)); 
				//@skip-check query-in-loop
				//@skip-check query-in-loop
				СтруктураТоваров.Вставить("rvr", ЕстьНаПолкеРВРВ(стр.Товар));
				//@skip-check query-in-loop
				//@skip-check query-in-loop
				СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
				МассивТоваров.Добавить(СтруктураТоваров);
			КонецЕсли;
			итер = итер + 1;
		КонецЦикла;
		ТР = выборка.Работы.Выгрузить();
		МассивРабот = Новый Массив;
		Для Каждого стр Из ТР Цикл
			Строка = "		Ссылка,
					 |		НомерСтроки,
					 |		Работа,
					 |		Количество,
					 |		Нормочас,
					 |		Цена,
					 |		Сумма,
					 |		СкидкаПроцент,
					 |		СкидкаСумма,
					 |		СуммаВсего,
					 |		Содержание,
					 |		ИдентификаторСтроки,
					 |		ВремяФакт,
					 |		ВремяПлан,
					 |		СуммаНалог,
					 |		СуммаЗп,
					 |		ИдентификаторСтрока,
					 |		СтатусРаботы)";

			СтруктураРаботы = Новый Структура;
			СтруктураРаботы.Вставить("name", Строка(стр.Работа));
			СтруктураРаботы.Вставить("position", Строка(стр.НомерСтроки));
			СтруктураРаботы.Вставить("cost", Строка(стр.Цена));
			СтруктураРаботы.Вставить("count", Строка(стр.Количество));
			СтруктураРаботы.Вставить("sum", Строка(стр.Сумма));
			СтруктураРаботы.Вставить("issued", Строка(стр.СтатусРаботы));
			МассивРабот.Добавить(СтруктураРаботы);
		КонецЦикла;
	КонецЦикла;

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивТоваров);
	СтруктураОтвета.Вставить("works", МассивРабот);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);

	СтрокаДляОтвета = ЗаписьJSON.Закрыть();

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");

	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	Возврат Ответ;
КонецФункции

Функция ЗаявкиИПродажиapplication_and_sale(Запрос) 
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"]).Пользователь;
	
	///+ГомзМА 20.12.2023
	Роли = ПолучитьРолиПользователя(Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"]));
	///-ГомзМА 20.12.2023
	
	
	ЗапросЗиП = новый запрос;
	///+ГомзМА 20.12.2023
	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено Тогда
		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И (ЗаказКлиента.Ответственный = &Ответственный" + Символы.ПС + "		ИЛИ ЗаказКлиента.ОтветственныйЗаОбработку = &Ответственный)";
			ТекстЗаменыОтборОтветственныйПродажи = "И (ПродажаЗапчастей.КтоПродал = &Ответственный" + Символы.ПС + " 	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный)";
			
			ЗапросЗиП.Текст =  СтрШаблон(текстДляЗаявокИПродаж(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
			
			ЗапросЗиП.УстановитьПараметр("Ответственный", Ответственный);
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И ПродажаЗапчастей.Водитель = &Ответственный";
			ЗапросЗиП.Текст =  СтрШаблон(текстДляЗаявокИПродаж(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
			ЗапросЗиП.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"])); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000006")); //отправка в тк
			
			ЗапросЗиП.УстановитьПараметр("WTpanel", МассивСтатусовВТ);	
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И (ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный" 
			+ Символы.ПС + "	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
			ЗапросЗиП.Текст =  СтрШаблон(текстДляЗаявокИПродаж(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
			ЗапросЗиП.УстановитьПараметр("Ответственный", Ответственный); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003")); //сборка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004")); //продажа 
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			
			ЗапросЗиП.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
		КонецЕсли;
	Иначе
		ЗапросЗиП.Текст =  СтрШаблон(текстДляЗаявокИПродаж(), Формат(10000, "ЧГ="), "", "");
	КонецЕсли;  
	
	ЗапросЗиП.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);   
	ЗапросЗиП.УстановитьПараметр("НачинаяСЗаписи", 0); 
	
	Если Запрос.ПараметрыURL["search"] <> "false" Тогда
		ЗапросЗиП.УстановитьПараметр("Номер", Запрос.ПараметрыURL["search"]); 
	КонецЕсли;     
	
	ЗапросЗиП.УстановитьПараметр("ПроверкаПродажи", Справочники.СтатусыWT.НайтиПоНаименованию("Продажа"));
	///-ГомзМА 20.12.2023
	
	//ЗапросЗиП.Текст =  СтрШаблон(текстДляЗаявокИПродаж(), Формат(10000, "ЧГ="));
	//ЗапросЗиП.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60); 
	//ЗапросЗиП.УстановитьПараметр("Ответственный", Ответственный); 
	//ЗапросЗиП.УстановитьПараметр("НачинаяСЗаписи", 0);  
	//	ЗапросЗиП.УстановитьПараметр("ПроверкаПродажи", Справочники.СтатусыWT.НайтиПоНаименованию("Продажа"));
	
	//Если Запрос.ПараметрыURL["search"] <> "false" Тогда
	//	ЗапросЗиП.УстановитьПараметр("Номер", Запрос.ПараметрыURL["search"]); 
	//КонецЕсли;
	
	
	Выборкаобщ = ЗапросЗиП.Выполнить().Выбрать().Количество();
	
	///+ГомзМА 20.12.2023
	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено Тогда
		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И (ЗаказКлиента.Ответственный = &Ответственный" + Символы.ПС + "		ИЛИ ЗаказКлиента.ОтветственныйЗаОбработку = &Ответственный)";
			ТекстЗаменыОтборОтветственныйПродажи = "И (ПродажаЗапчастей.КтоПродал = &Ответственный" + Символы.ПС + " 	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный)";
			
			ЗапросЗиП.Текст =  СтрШаблон(текстДляЗаявокИПродаж(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
			
			ЗапросЗиП.УстановитьПараметр("Ответственный", Ответственный);
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И ПродажаЗапчастей.Водитель = &Ответственный";
			ЗапросЗиП.Текст =  СтрШаблон(текстДляЗаявокИПродаж(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
			ЗапросЗиП.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"])); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005"));
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000006"));
			
			ЗапросЗиП.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И (ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный" 
			+ Символы.ПС + "	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
			ЗапросЗиП.Текст =  СтрШаблон(текстДляЗаявокИПродаж(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
			ЗапросЗиП.УстановитьПараметр("Ответственный", Ответственный); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003")); //сборка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004")); //продажа 
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			
			ЗапросЗиП.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
			
		КонецЕсли;
	Иначе
		ЗапросЗиП.Текст =  СтрШаблон(текстДляЗаявокИПродаж(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="), "", "");
		
	КонецЕсли;  
	
	ЗапросЗиП.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);   
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		ЗапросЗиП.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		ЗапросЗиП.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Если Запрос.ПараметрыURL["search"] <> "false" Тогда
		ЗапросЗиП.УстановитьПараметр("Номер", Запрос.ПараметрыURL["search"]); 
	КонецЕсли;     
	
	ЗапросЗиП.УстановитьПараметр("ПроверкаПродажи", Справочники.СтатусыWT.НайтиПоНаименованию("Продажа"));
	///-ГомзМА 20.12.2023
	
	//ЗапросЗиП.Текст =  СтрШаблон(текстДляЗаявокИПродаж(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="));
	//ЗапросЗиП.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60); 
	//ЗапросЗиП.УстановитьПараметр("Ответственный", Ответственный);
	//Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
	//	ЗапросЗиП.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	//Иначе 
	//	ЗапросЗиП.УстановитьПараметр("НачинаяСЗаписи", 0);
	//КонецЕсли;
	//Если Запрос.ПараметрыURL["search"] <> "false" Тогда
	//	ЗапросЗиП.УстановитьПараметр("Номер", Запрос.ПараметрыURL["search"]); 
	//КонецЕсли; 
	//		ЗапросЗиП.УстановитьПараметр("ПроверкаПродажи", Справочники.СтатусыWT.НайтиПоНаименованию("Продажа"));
	
	выборка = ЗапросЗиП.Выполнить().Выбрать();
	//Выборкаобщ = выборка.Количество();
	
	МассивЗаявок = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураЗаявки = новый Структура;
		СтруктураЗаявки.Вставить("id", Строка(выборка.Номер));
		СтруктураЗаявки.Вставить("client",Строка(выборка.Клиент));
		
		СтруктураОтветсвенного = Новый структура;
		СтруктураОтветсвенного.Вставить("id",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.Ответственный).Код));
		СтруктураОтветсвенного.Вставить("name",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.Ответственный).Наименование));
		СтруктураЗаявки.Вставить("responsible",СтруктураОтветсвенного);
		
		СтруктураЗаявки.Вставить("processing",Строка(выборка.СтатусОбработки));
		СтруктураЗаявки.Вставить("sub_processing",Строка(выборка.ПодстатусОбработки)); 
		
		
		СтруктураПортера= Новый структура;
		СтруктураПортера.Вставить("id",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.ОтветственныйЗаОбработку).Код));
		СтруктураПортера.Вставить("name",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.ОтветственныйЗаОбработку).Наименование));		
		СтруктураЗаявки.Вставить("porter",СтруктураПортера);
		
		
		СтруктураЗаявки.Вставить("flag",выборка.Флаг); 
		СтруктураЗаявки.Вставить("tk",Строка(выборка.ТранспортнаяКомпания));
		
		
		МассивЗаявок.Добавить(СтруктураЗаявки);
	КонецЦикла;  
	
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗаявок);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПлохиеЗаявкиbad_application(Запрос)
	МассивЗаявок = Новый Массив;
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"]).Пользователь;	
	Запрос = новый запрос;
	Запрос.Текст = ТекстДляПлохихЗаявок();
	Запрос.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	ВыборкаПлохихЗаявок = запрос.Выполнить().Выбрать();
	
	СтруктураЗаявки = новый Структура;
	СтруктураЗаявки.Вставить("count",Строка(ВыборкаПлохихЗаявок.Количество()));
	СтруктураЗаявки.Вставить("state","Отказ");
	МассивЗаявок.Добавить(СтруктураЗаявки);
	
	Запрос = новый запрос;
	Запрос.Текст = ТекстДляВозвратов();
	Запрос.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	ВыборкаВозвратов = запрос.Выполнить().Выбрать();  
	
	СтруктураЗаявки = новый Структура;
	СтруктураЗаявки.Вставить("count",Строка(ВыборкаВозвратов.Количество()));
	СтруктураЗаявки.Вставить("state","Возврат");
	МассивЗаявок.Добавить(СтруктураЗаявки);
	
	Запрос = новый запрос;
	Запрос.Текст = ТекстДляПропущенныхЗвонков();
	Запрос.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);  
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Выборкапропущенных = запрос.Выполнить().Выбрать(); 
	
	СтруктураЗаявки = новый Структура;
	СтруктураЗаявки.Вставить("count",Строка(Выборкапропущенных.Количество()));
	СтруктураЗаявки.Вставить("state","Пропущенные");
	МассивЗаявок.Добавить(СтруктураЗаявки);
	
	
	
	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("data",МассивЗаявок);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивЗаявок);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция ТипыЗаявокtypes_application(Запрос)
	МассивЗаявок = Новый Массив;
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"]).Пользователь;
	
	///+ГомзМА 20.12.2023
	Роли = ПолучитьРолиПользователя(Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"]));
	///-ГомзМА 20.12.2023
	
	ЗапросЗаявок = новый запрос;  
	
	///+ГомзМА 20.12.2023
	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено Тогда
		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И (ЗаказКлиента.Ответственный = &Ответственный" + Символы.ПС + "		ИЛИ ЗаказКлиента.ОтветственныйЗаОбработку = &Ответственный)";
			ТекстЗаменыОтборОтветственныйПродажи = "И (ПродажаЗапчастей.КтоПродал = &Ответственный" + Символы.ПС + " 	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный)";
			
			ЗапросЗаявок.Текст =  СтрШаблон(ТекстДляТиповЗаявок(), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
			
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Ответственный);
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И ПродажаЗапчастей.Водитель = &Ответственный";
			ЗапросЗаявок.Текст =  СтрШаблон(ТекстДляТиповЗаявок(), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"])); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000006")); //отправка в тк
			
			ЗапросЗаявок.УстановитьПараметр("WTpanel", МассивСтатусовВТ);	
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И (ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный" 
			+ Символы.ПС + "	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
			ЗапросЗаявок.Текст =  СтрШаблон(ТекстДляТиповЗаявок(), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
			ЗапросЗаявок.УстановитьПараметр("Ответственный", Ответственный); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003")); //сборка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004")); //продажа 
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			
			ЗапросЗаявок.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
		КонецЕсли;
	Иначе
		ЗапросЗаявок.Текст =  СтрШаблон(ТекстДляТиповЗаявок(), "", "");
	КонецЕсли;  
	
	ЗапросЗаявок.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	ЗапросЗаявок.УстановитьПараметр("ПроверкаПродажи", Справочники.СтатусыWT.НайтиПоНаименованию("Продажа"));
	///-ГомзМА 20.12.2023	
	
	//ЗапросЗаявок.Текст = ТекстДляТиповЗаявок();
	//ЗапросЗаявок.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	//ЗапросЗаявок.УстановитьПараметр("Ответственный", Ответственный);
	//ЗапросЗаявок.УстановитьПараметр("ПроверкаПродажи", Справочники.СтатусыWT.НайтиПоНаименованию("Продажа"));
	
	Выборка = ЗапросЗаявок.Выполнить().Выбрать(); 
	ОбщееКоличество = 0; 
	
	
	
	///+ГомзМА 20.12.2023  
	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено И
		Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) = Неопределено Тогда
		
		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
			Пока выборка.Следующий() Цикл
				Если Выборка.СтатусОбработки = "Упаковка" ИЛИ Выборка.СтатусОбработки = "Отправка в тк" Тогда
					СтруктураЗаявки = новый Структура;
					СтруктураЗаявки.Вставить("count",Выборка.Количество); 
					СтруктураЗаявки.Вставить("title",Строка(Выборка.СтатусОбработки));
					Если Выборка.СтатусОбработки = "Обращение" Или Выборка.СтатусОбработки = "Заявка" Или Выборка.СтатусОбработки = "Сборка" тогда
						СтруктураЗаявки.Вставить("type","Заявка");
					Иначе
						СтруктураЗаявки.Вставить("type","Продажа");  
					КонецЕсли;
					
					МассивЗаявок.Добавить(СтруктураЗаявки);
					
					ОбщееКоличество = ОбщееКоличество + Выборка.Количество;  
				КонецЕсли;
			Конеццикла;
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
			Пока выборка.Следующий() Цикл
				
				Если Выборка.СтатусОбработки = "Сборка" ИЛИ Выборка.СтатусОбработки = "Продажа" ИЛИ Выборка.СтатусОбработки = "Упаковка" Тогда
					СтруктураЗаявки = новый Структура;
					СтруктураЗаявки.Вставить("count",Выборка.Количество); 
					СтруктураЗаявки.Вставить("title",Строка(Выборка.СтатусОбработки));
					Если Выборка.СтатусОбработки = "Обращение" Или Выборка.СтатусОбработки = "Заявка" Или Выборка.СтатусОбработки = "Сборка" тогда
						СтруктураЗаявки.Вставить("type","Заявка");
					Иначе
						СтруктураЗаявки.Вставить("type","Продажа");  
					КонецЕсли;
					
					МассивЗаявок.Добавить(СтруктураЗаявки);
					
					ОбщееКоличество = ОбщееКоличество + Выборка.Количество;  
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
	Иначе     
		Пока выборка.Следующий() Цикл
			СтруктураЗаявки = новый Структура;
			СтруктураЗаявки.Вставить("count",Выборка.Количество); 
			СтруктураЗаявки.Вставить("title",Строка(Выборка.СтатусОбработки));
			Если Выборка.СтатусОбработки = "Обращение" Или Выборка.СтатусОбработки = "Заявка" Или Выборка.СтатусОбработки = "Сборка" тогда
				СтруктураЗаявки.Вставить("type","Заявка");
			Иначе
				СтруктураЗаявки.Вставить("type","Продажа");  
			КонецЕсли;
			
			МассивЗаявок.Добавить(СтруктураЗаявки);
			
			ОбщееКоличество = ОбщееКоличество + Выборка.Количество;   
		Конеццикла;
	КонецЕсли;  
	
	
	
	
	///-ГомзМА 20.12.2023
	
	//Пока выборка.Следующий() Цикл
	//	СтруктураЗаявки = новый Структура;
	//	СтруктураЗаявки.Вставить("count",Выборка.Количество); 
	//	СтруктураЗаявки.Вставить("title",Строка(Выборка.СтатусОбработки));
	//	Если Выборка.СтатусОбработки = "Обращение" Или Выборка.СтатусОбработки = "Заявка" Или Выборка.СтатусОбработки = "Сборка" тогда
	//		СтруктураЗаявки.Вставить("type","Заявка");
	//	Иначе
	//		СтруктураЗаявки.Вставить("type","Продажа");  
	//	КонецЕсли;
	//	
	//	МассивЗаявок.Добавить(СтруктураЗаявки);
	//	
	//	ОбщееКоличество = ОбщееКоличество + Выборка.Количество;   
	//Конеццикла;
	
	
	
	СтруктураЗаявки = новый Структура;
	СтруктураЗаявки.Вставить("count",ОбщееКоличество);  
	СтруктураЗаявки.Вставить("title","Все");
	
	МассивИтог = Новый массив;
	МассивИтог.Добавить(СтруктураЗаявки);
	
	//МассивЗаявок.Добавить(СтруктураЗаявки); 
	Для каждого стр из МассивЗаявок Цикл
		МассивИтог.Добавить(СТр);
	КонецЦикла;
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("data",МассивИтог);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивИтог);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция Типытоваровtypes_product(Запрос)
	Массивтоваров = Новый Массив; 
	ЗапросТоваров = новый запрос;
	ЗапросТоваров.Текст = текстДляТиповТоваров();
	Выборка = ЗапросТоваров.Выполнить().Выбрать(); 
	ОбщееКоличество = 0; 
	
	Пока выборка.Следующий() Цикл	
		
		Структуратоваров = новый Структура;
		Структуратоваров.Вставить("count",Выборка.Колво); 
		Структуратоваров.Вставить("title",Строка(Выборка.АвитоЧастник));
		Структуратоваров.Вставить("id",Выборка.id); 
		Массивтоваров.Добавить(Структуратоваров);
		
		ОбщееКоличество = ОбщееКоличество + Выборка.Колво;
	Конеццикла; 
	
	Структуратоваров = новый Структура;
	Структуратоваров.Вставить("count",ОбщееКоличество);  
	Структуратоваров.Вставить("title","Все");
	Структуратоваров.Вставить("id",3);
	//Массивтоваров.Добавить(Структуратоваров);
	
	МассивИтог = Новый массив;
	МассивИтог.Добавить(Структуратоваров);
	
	Для каждого стр из Массивтоваров Цикл
		МассивИтог.Добавить(СТр);
	КонецЦикла;
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("data",МассивИтог);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивИтог);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокТоваровGetProductsList(Запрос)
	
	запросТовара = Новый Запрос;
	//запросТовара.Текст =  текстДляТиповТоваров();  
	//если Строка(Запрос.ПараметрыURL["pk"]) = "1" Тогда
	//	запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = ИСТИНА");	
	//Иначеесли Строка(Запрос.ПараметрыURL["pk"]) = "2" Тогда 
	//			запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = Ложь");
	//конецЕсли;
	запросТовара.Текст = текстДляТиповТоваров2();
	запросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["id"]))+"%" );
	
	если Строка(Запрос.ПараметрыURL["pk"]) = "1" Тогда
		запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = ИСТИНА");	
	Иначеесли Строка(Запрос.ПараметрыURL["pk"]) = "2" Тогда 
		запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = Ложь");
	конецЕсли;
	
	ТЗ = запросТовара.Выполнить().Выгрузить(); 
	тз.Итог("Колво"); 
	
	если Строка(Запрос.ПараметрыURL["pk"]) = "1" Тогда
		Выборкаобщ = тз.Найти(1,"id").Колво;	
	Иначеесли Строка(Запрос.ПараметрыURL["pk"]) = "2" Тогда
		Выборкаобщ = тз.Найти(2,"id").Колво;
	Иначе
		Выборкаобщ =тз.Итог("Колво");	
	конецЕсли;
	
	
	
	//	Выборкаобщ = запросТовара.Выполнить().Выбрать().Количество();
	
	запросТовара.Текст =  СтрШаблон(текстДляНоменклатуры(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="));
	запросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["id"]))+"%" );
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли; 
	если Строка(Запрос.ПараметрыURL["pk"]) = "1" Тогда
		запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = ИСТИНА");	
	Иначеесли Строка(Запрос.ПараметрыURL["pk"]) = "2" Тогда 
		запросТовара.текст = СтрЗаменить(запростовара.Текст,"{Где РегИндНомер.АвитоЧастник = &Ач}","И РегИндНомер.АвитоЧастник = Ложь");
	конецЕсли;
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	Для каждого стр из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		итер = итер+1;
		тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place",   Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",   Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("pk",    	 стр.АвитоЧастник); 
		СтруктураТоваров.Вставить("chek_size",      стр.Размеры);
		СтруктураТоваров.Вставить("length",      стр.длин);
		СтруктураТоваров.Вставить("width",      стр.шир);
		СтруктураТоваров.Вставить("height",      стр.выс);
		СтруктураТоваров.Вставить("weight",      стр.Вес);
		
		
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();                                    
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьИнформациюОДоставке(Запрос)
	
	///+сергеев 06.12.2023
	///Получение ТранспортнойКомпании и Трек-номера
	ЗапросПродажидоставки = Новый Запрос;
	ЗапросПродажидоставки.Текст = текстДляПродажиСтатусТК();
	ЗапросПродажидоставки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["id"] ); 
	Выборка = ЗапросПродажидоставки.Выполнить().Выбрать();
	
	
	Массивданных = Новый Массив;
	Пока выборка.Следующий() Цикл
		
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("id",Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client",Строка(выборка.Клиент));
		
		СтруктураИнфо.Вставить("status", Строка(Выборка.СтатусЗаказаВТК)); 
		СтруктураИнфо.Вставить("statushistory", Строка(выборка.ИсторияОтслеживанияЗаказа));
		
		СтруктураИнфо.Вставить("sending_city",Строка(выборка.ГородОтправки));
		СтруктураИнфо.Вставить("receipt_country",Строка(выборка.СтранаПолучения));
		СтруктураИнфо.Вставить("receipt_region",Строка(выборка.РегионПолучения));
		СтруктураИнфо.Вставить("receipt_city",Строка(выборка.ГородПолучения));
		СтруктураИнфо.Вставить("delivery_status",Строка(выборка.СтатусДоставки));
		СтруктураИнфо.Вставить("driver",Строка(выборка.Водитель));
		СтруктураИнфо.Вставить("inn",Строка(выборка.ИНН));
		СтруктураИнфо.Вставить("passport",Строка(выборка.Паспорт));
		СтруктураИнфо.Вставить("registration",Строка(выборка.Прописка));
		СтруктураИнфо.Вставить("delivery_client",Строка(выборка.доставкаКлиент));
		СтруктураИнфо.Вставить("name_or_name",Строка(выборка.НаименованиеИлиФИО));
		СтруктураИнфо.Вставить("private",Строка(выборка.частный));
		СтруктураИнфо.Вставить("weight",Строка(выборка.Вес));
		СтруктураИнфо.Вставить("tk",Строка(выборка.ТранспортнаяКомпания));
		СтруктураИнфо.Вставить("phone",Строка(выборка.телефон));
		СтруктураИнфо.Вставить("sum",Строка(выборка.ИтогоРекв));
		
		ТЗ = выборка.Таблица.Выгрузить(); 
		
		МассивТоваров = Новый Массив;
		
		Для каждого стр из ТЗ Цикл	
			Код = стр.Код; 
			Пока Лев(Код, 1) = "0" Цикл 
				Код = Прав(Код, СтрДлина(Код) - 1);
			КонецЦикла;
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name",    Строка(стр.Товар));
			СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
			СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
			СтруктураТоваров.Вставить("count", Строка(стр.Количество));		
			СтруктураТоваров.Вставить("sum",    Строка(стр.Сумма));
			СтруктураТоваров.Вставить("issued",    Строка(стр.СтатусТовара));
			СтруктураТоваров.Вставить("Code",     Строка("00"+Код));
			СтруктураТоваров.Вставить("indcode", Строка(стр.Партия));
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	
			
			СтруктураТоваров.Вставить("state",  Строка(стр.СтатусТовара)); 
			СтруктураТоваров.Вставить("article",  Строка(стр.Артикул));
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("k",        ЕстьНаКСкладе(стр.Товар)); 
			
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;
	КонецЦикла;
	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-сергеев 06.12.2023
	
КонецФункции

Функция ПолучитьСписокОрганизацийlistorganizations(Запрос)  
	
	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	Организация.Код КАК Код,
	|	Организация.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организация КАК Организация
	|ГДЕ
	|	Не Организация.ПометкаУдаления "; 	
	Выборка = запрос.Выполнить().Выбрать();
	Выборкаобщ = Выборка.Количество();
	
	МассивОрганизаций = Новый Массив;
	Пока выборка.Следующий() Цикл
		Структураорганизации = новый Структура;
		Структураорганизации.Вставить("name",Строка(выборка.Наименование));
		Структураорганизации.Вставить("id",Строка(выборка.Код));
		
		МассивОрганизаций.Добавить(Структураорганизации);
	КонецЦикла;
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивОрганизаций);
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивОрганизаций);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции               

Функция ПолучитьСписокСчетовlistaccounts(Запрос)  
	
	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	Счета.Наименование КАК Наименование,
	|	Счета.Код КАК Код
	|ИЗ
	|	Справочник.TipOplati КАК Счета
	|ГДЕ
	|	НЕ Счета.ПометкаУдаления"; 	
	Выборка = запрос.Выполнить().Выбрать();
	Выборкаобщ = Выборка.Количество();
	
	МассивСчетов = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураСчёта = новый Структура;
		СтруктураСчёта.Вставить("name",Строка(выборка.Наименование));
		СтруктураСчёта.Вставить("id",Строка(выборка.Код));
		//СтруктураСчёта.Вставить("Org",Строка(выборка.Владелец));
		МассивСчетов.Добавить(СтруктураСчёта);
	КонецЦикла;
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивСчетов);
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивСчетов);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции 

Функция ПолучитьПродажуgetsale(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляПродажи();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;
	Пока выборка.Следующий() Цикл
		
		
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("id",Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client",Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("application",Строка(выборка.ЗаказКлиента));
		СтруктураИнфо.Вставить("processing",Строка(выборка.СтатусОбработки)); 
		СтруктураИнфо.Вставить("sub_processing",Строка(выборка.подСтатусОбработки));
		СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		СтруктураИнфо.Вставить("store_keeper",Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible",Строка(выборка.КтоПродал));
		
		СтруктураИнфо.Вставить("sum",Строка(выборка.ИтогоРекв));
		СтруктураИнфо.Вставить("recorded_track_number",выборка.ЕстьТрекНомер);	
		//	ВыборкаТоваров = выборка.Таблица.Выбрать();
		
		
		ТЗ = выборка.Таблица.Выгрузить(); 
		//Массивкодов = ТЗ.ВыгрузитьКолонку("Партия");
		ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
		ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
		МассивТоваров = Новый Массив;
		//Для каждого стр из ТЗ Цикл 
		//	НайденныеФотки = Новый Массив;
		//	Фотки = ПолучениеФото(стр.индкод);
		//	
		//	Если фотки <> неопределено и  фотки.Количество()>0  Тогда
		//		НайденныеФотки = Фотки[0].urls;
		//		Если НайденныеФотки.Количество()>0 Тогда
		//			стр.колфото = 1;  
		//		КонецЕсли; 
		//	КонецЕсли;
		//	
		//КонецЦикла;
		ИндКоды = тз.ВыгрузитьКолонку("Партия2");
		Фотки = ПолучениеФото(ИндКоды);
		итер = 0;
		Для каждого стр из ТЗ Цикл
			
			//	Пока ВыборкаТоваров.Следующий() Цикл 
			МассивФото = новый массив;
			
			Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
				//ПутьКФайлам = "W:\code\imageService\images\" + ВыборкаТоваров.Партия;
				//НайденныеФотки = НайтиФайлы(ПутьКФайлам,"*" );
				//Фотки = ПолучениеФото(ВыборкаТоваров.Партия);
				Если фотки <> неопределено и  фотки.Количество()>0  Тогда
					НайденныеФотки = Новый Массив;  
					//КоличествоСФото = КоличествоСФото + 1; 
					//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
					НайденныеФотки = Фотки[итер].urls;
					МассивФото = новый массив;  
					Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
						
						стр.колфото = 1;  
						
						Для каждого Фотка Из НайденныеФотки Цикл
							Текст = "";
							//Текст = "https://wt10.ru" + Фотка;
							Текст = Фотка;
							МассивФото.Добавить(Текст);
						КонецЦикла; 
					КонецЕсли;
					
					
				КонецЕсли;
				
			КонецЕсли;
			итер = итер+1;
			Код = стр.Код; 
			Пока Лев(Код, 1) = "0" Цикл 
				Код = Прав(Код, СтрДлина(Код) - 1);
			КонецЦикла;
			СтруктураТоваров = Новый Структура; 
			СтруктураТоваров.Вставить("name",    Строка(стр.Товар));
			СтруктураТоваров.Вставить("position", стр.НомерСтроки);
			СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
			СтруктураТоваров.Вставить("count", Строка(стр.Количество));		
			СтруктураТоваров.Вставить("sum",    Строка(стр.Сумма));
			СтруктураТоваров.Вставить("issued",    Строка(стр.СтатусТовара));
			СтруктураТоваров.Вставить("code",     Строка("00"+Код));
			СтруктураТоваров.Вставить("id", Строка(стр.Партия));
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
			СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
			СтруктураТоваров.Вставить("photos", МассивФото);  
			СтруктураТоваров.Вставить("state",  Строка(стр.СтатусТовара)); 
			СтруктураТоваров.Вставить("article",  Строка(стр.Артикул));
			СтруктураТоваров.Вставить("cancel",  стр.Отменено);
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураТоваров.Вставить("availability_in_k_warehouse",        ЕстьНаКСкладе(стр.Товар)); 
			
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;
	КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьЗаявкуgetapplication(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать(); 
	КоличествоСФото   = 0;
	КоличествоТоваров = 0;
	
	
	МассивТоваров = Новый Массив;
	СтруктураИнфо = новый Структура;
	
	//Пока выборка.Следующий() Цикл 
	выборка.Следующий();
	
	Счет = ПроверкаСчета(Выборка.Ссылка);
	
	СтруктураИнфо.Вставить("id",Строка(выборка.Номер));
	СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
	СтруктураИнфо.Вставить("client",Строка(выборка.Клиент));
	СтруктураИнфо.Вставить("condition",Строка(выборка.Состояние));
	СтруктураИнфо.Вставить("responsible",Строка(выборка.Ответственный));
	СтруктураИнфо.Вставить("sum",Строка(выборка.СуммаДокумента));
	СтруктураИнфо.Вставить("callDate",Строка(выборка.ДатаСвязи));
	СтруктураИнфо.Вставить("processing",Строка(выборка.СтатусОбработки));  
	СтруктураИнфо.Вставить("sub_processing",Строка(выборка.подСтатусОбработки));
	СтруктураИнфо.Вставить("porter",Строка(выборка.ОтветственныйЗаОбработку));
	СтруктураИнфо.Вставить("comment",Строка(выборка.Комментарий));
	СтруктураИнфо.Вставить("numCheck",Строка(?(Счет.Ссылка = Неопределено, "", Счет.Ссылка.Номер)));
	ВыборкаТоваров = выборка.Товары.Выбрать(); 
	
	ТЗ = выборка.Товары.Выгрузить(); 
	Массивкодов = ТЗ.ВыгрузитьКолонку("Партия2");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = тз.ВыгрузитьКолонку("Партия2");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	Для каждого стр из ТЗ Цикл
		МассивФото = новый массив;
		Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
			Если фотки <> неопределено и  фотки.Количество()>0  Тогда
				НайденныеФотки = Новый Массив; 
				КоличествоСФото = КоличествоСФото + 1; 
				НайденныеФотки = Фотки[итер].urls;
				МассивФото = новый массив;  
				Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
					
					стр.колфото = 1;  
					
					Для каждого Фотка Из НайденныеФотки Цикл
						Текст = "";
						//Текст = "https://wt10.ru" + Фотка;
						Текст = Фотка;
						МассивФото.Добавить(Текст);
					КонецЦикла; 
				КонецЕсли;
				итер = итер+1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Код = стр.Код; 
		Пока Лев(Код, 1) = "0" Цикл 
			Код = Прав(Код, СтрДлина(Код) - 1);
		КонецЦикла;
		СтруктураТоваров = Новый Структура; 
		СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
		СтруктураТоваров.Вставить("name",     Строка(стр.Номенклатура));
		СтруктураТоваров.Вставить("article",  Строка(стр.Номенклатура.Артикул));
		СтруктураТоваров.Вставить("cost",     Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment",  Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("code",     Строка("00"+Код));
		СтруктураТоваров.Вставить("id",  Строка(стр.Партия));
		СтруктураТоваров.Вставить("stat",     стр.Отменено); 
		СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
		//СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	 
		//@skip-check query-in-loop
		СтруктураТоваров.Вставить("poddon", Строка(ПолучитьПоддон(стр.Партия)));
		//@skip-check query-in-loop
		СтруктураТоваров.Вставить("k",        ЕстьНаКСкладе(стр.Номенклатура)); 
		Если стр.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
			НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
			НаборЗаписей.Отбор.индкод.Установить(стр.Партия);
			НаборЗаписей.Прочитать(); 
			Товар = НаборЗаписей[0]; 
			СтруктураТоваров.Вставить("place",    Строка(Товар.стеллаж));  
		Иначе
			СтруктураТоваров.Вставить("place",    Строка(стр.Номенклатура.МестоНаСкладе2));
		КонецЕсли;  
		
		Если Не стр.Отменено тогда
			КоличествоТоваров = КоличествоТоваров +1;
		КонецЕсли;
		
		
		СтруктураТоваров.Вставить("photos",   МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла; 
	
	Если КоличествоТоваров <= КоличествоСФото и КоличествоТоваров > 0 тогда 
		СтруктураИнфо.Вставить("stat", Истина);
	Иначе
		СтруктураИнфо.Вставить("stat", Ложь);
	КонецЕсли;
	
	//КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьВесьСписокЗаявокalllistapplication(Запрос) 
	
	состояниеСборки = Справочники.СтатусыWT.НайтиПоНаименованию(Запрос.ПараметрыURL["processing"]);
	ЗапросЗаявки = Новый Запрос;
	
	///+ГомзМА 20.12.2023
	Роли = ПолучитьРолиПользователя(Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]));
	///-ГомзМА 20.12.2023
	
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
	
	///+ГомзМА 20.12.2023
	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено Тогда
		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И (ЗаказКлиента.Ответственный = &Ответственный" + Символы.ПС + "		ИЛИ ЗаказКлиента.ОтветственныйЗаОбработку = &Ответственный)";
			
			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
			
			ЗапросЗаявки.УстановитьПараметр("Ответственный", Ответственный);
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
			ЗапросЗаявки.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"])); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000006")); //отправка в тк
			
			ЗапросЗаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);	
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
			
			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
			ЗапросЗаявки.УстановитьПараметр("Ответственный", Ответственный); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003")); //сборка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004")); //продажа 
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			
			ЗапросЗаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
		КонецЕсли;
	Иначе
		ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="), "");
		
	КонецЕсли;  
	
	ЗапросЗаявки.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	ЗапросЗаявки.УстановитьПараметр("СостояниеСборки",состояниеСборки);
	ЗапросЗаявки.УстановитьПараметр("кСклады", "%"+ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе("K-")+"%");	
	ЗапросЗаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	///-ГомзМА 20.12.2023
	
	
	//запросзаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="));
	//
	//
	//Если Запрос.ПараметрыURL["userid"] <> Неопределено и Запрос.ПараметрыURL["userid"] <> "0" тогда 
	//	запросзаявки.Текст = запросзаявки.Текст +	" и
	//	|	(ВТ_ДанныеЗаявки.Ответственный = &Ответственный
	//	|    ИЛИ ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку = &Ответственный)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерЗаписи";
	//	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
	//	запросзаявки.УстановитьПараметр("Ответственный", Ответственный);
	//КонецЕсли; 
	//запросзаявки.УстановитьПараметр("СостояниеСборки",состояниеСборки);
	//запросзаявки.УстановитьПараметр("кСклады", "%"+ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе("K-")+"%");	
	//запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	Выборкаобщ = запросзаявки.Выполнить().Выбрать().Количество();  
	
	///+ГомзМА 20.12.2023
	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено Тогда
		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И (ЗаказКлиента.Ответственный = &Ответственный" + Символы.ПС + "		ИЛИ ЗаказКлиента.ОтветственныйЗаОбработку = &Ответственный)";
			
			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
			
			ЗапросЗаявки.УстановитьПараметр("Ответственный", Ответственный);
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
			ЗапросЗаявки.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"])); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000006")); //отправка в тк
			
			ЗапросЗаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);	
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
			
			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
			ЗапросЗаявки.УстановитьПараметр("Ответственный", Ответственный); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003")); //сборка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004")); //продажа 
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			
			ЗапросЗаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
		КонецЕсли;
	Иначе
		ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), "");
		
	КонецЕсли;  
	
	ЗапросЗаявки.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	запросзаявки.УстановитьПараметр("СостояниеСборки",состояниеСборки);
	запросзаявки.УстановитьПараметр("кСклады", "%"+ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе("K-")+"%"); 
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросзаявки.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
		
	Иначе 
		запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	///-ГомзМА 20.12.2023
	
	//запросзаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	//
	//Если Запрос.ПараметрыURL["userid"] <> Неопределено и Запрос.ПараметрыURL["userid"] <> "0" тогда 
	//	запросзаявки.Текст = запросзаявки.Текст +	" и
	//	|	(ВТ_ДанныеЗаявки.Ответственный = &Ответственный
	//	|    ИЛИ ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку = &Ответственный)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерЗаписи";		
	//	запросзаявки.УстановитьПараметр("Ответственный", Ответственный);
	//КонецЕсли;
	//запросзаявки.УстановитьПараметр("СостояниеСборки",состояниеСборки);
	//
	//Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
	//	запросзаявки.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	//	
	//Иначе 
	//	запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	//КонецЕсли;
	
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	МассивЗаявок = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураЗаявки = новый Структура;
		СтруктураЗаявки.Вставить("id",Строка(выборка.Номер));
		СтруктураЗаявки.Вставить("date",Строка(выборка.Дата));
		СтруктураЗаявки.Вставить("client",Строка(выборка.Клиент));
		СтруктураЗаявки.Вставить("condition",Строка(выборка.Состояние)); 
		
		СтруктураОтветсвенного = Новый структура;
		СтруктураОтветсвенного.Вставить("id",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.Ответственный).Код));
		СтруктураОтветсвенного.Вставить("name",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.Ответственный).Наименование)); 
		СтруктураЗаявки.Вставить("responsible",СтруктураОтветсвенного); 
		
		СтруктураЗаявки.Вставить("sum",Строка(выборка.СуммаДокумента));
		СтруктураЗаявки.Вставить("callDate",Строка(выборка.ДатаСвязи));
		СтруктураЗаявки.Вставить("processing",Строка(выборка.СтатусОбработки));   
		СтруктураЗаявки.Вставить("sub_processing",Строка(выборка.ПодСтатусОбработки));
		
		
		СтруктураПортера= Новый структура;
		СтруктураПортера.Вставить("id",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.ОтветственныйЗаОбработку).Код));
		СтруктураПортера.Вставить("name",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.ОтветственныйЗаОбработку).Наименование));		
		СтруктураЗаявки.Вставить("porter",СтруктураПортера);
		
		СтруктураЗаявки.Вставить("comment",Строка(выборка.Комментарий));
		СтруктураЗаявки.Вставить("k",Строка(выборка.НаКскладе));
		МассивЗаявок.Добавить(СтруктураЗаявки);
	КонецЦикла;  
	
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("Count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗаявок);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьВесьСписокПродажalllissale(Запрос)
	состояниеСборки = Справочники.СтатусыWT.НайтиПоНаименованию(Запрос.ПараметрыURL["processing"]);
	
	///+ГомзМА 20.12.2023
	Роли = ПолучитьРолиПользователя(Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]));
	///-ГомзМА 20.12.2023
	
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
	
	запросзаявки = Новый Запрос;
	
	///+ГомзМА 20.12.2023
	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено Тогда
		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйПродажи = "И (ПродажаЗапчастей.КтоПродал = &Ответственный" + Символы.ПС + " 	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный)";
			
			запросзаявки.Текст =  СтрШаблон(ТекстдляСпискапродаж(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйПродажи);
			
			запросзаявки.УстановитьПараметр("Ответственный", Ответственный);
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И ПродажаЗапчастей.Водитель = &Ответственный";
			запросзаявки.Текст =  СтрШаблон(ТекстдляСпискапродаж(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйПродажи);
			запросзаявки.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"])); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000006")); //отправка в тк
			
			запросзаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);	
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И (ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный" 
			+ Символы.ПС + "	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
			запросзаявки.Текст =  СтрШаблон(ТекстдляСпискапродаж(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйПродажи);
			запросзаявки.УстановитьПараметр("Ответственный", Ответственный); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003")); //сборка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004")); //продажа 
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			
			запросзаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
		КонецЕсли;
	Иначе
		запросзаявки.Текст =  СтрШаблон(ТекстдляСпискапродаж(), Формат(10000, "ЧГ="), "");
	КонецЕсли;  
	
	запросзаявки.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	запросзаявки.УстановитьПараметр("СостояниеСборки",состояниеСборки);
	
	запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	///-ГомзМА 20.12.2023
	
	
	//запросзаявки.Текст =  СтрШаблон(ТекстдляСпискапродаж(), Формат(10000, "ЧГ="));
	//
	//
	//Если Запрос.ПараметрыURL["userid"] <> Неопределено и Запрос.ПараметрыURL["userid"] <> "0" тогда 
	//	запросзаявки.Текст = запросзаявки.Текст +	" и
	//	|	(ВТ_Продажи.ктопродал = &Ответственный
	//	|    ИЛИ ВТ_Продажи.Ответственныйкладовщик= &Ответственный)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерЗаписи";
	//	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
	//	запросзаявки.УстановитьПараметр("Ответственный", Ответственный);
	//КонецЕсли; 
	//запросзаявки.УстановитьПараметр("СостояниеСборки",состояниеСборки);
	//
	//запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	Выборкаобщ = запросзаявки.Выполнить().Выбрать().Количество();  
	
	///+ГомзМА 20.12.2023
	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено Тогда
		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйПродажи = "И (ПродажаЗапчастей.КтоПродал = &Ответственный" + Символы.ПС + " 	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный)";
			
			запросзаявки.Текст =  СтрШаблон(ТекстдляСпискапродаж(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйПродажи);
			
			запросзаявки.УстановитьПараметр("Ответственный", Ответственный);
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И ПродажаЗапчастей.Водитель = &Ответственный";
			запросзаявки.Текст =  СтрШаблон(ТекстдляСпискапродаж(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйПродажи);
			запросзаявки.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"])); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000006")); //отправка в тк
			
			запросзаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);	
		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И (ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный" 
			+ Символы.ПС + "	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
			запросзаявки.Текст =  СтрШаблон(ТекстдляСпискапродаж(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйПродажи);
			запросзаявки.УстановитьПараметр("Ответственный", Ответственный); 
			
			МассивСтатусовВТ = Новый Массив;
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003")); //сборка
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004")); //продажа 
			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
			
			запросзаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
		КонецЕсли;
	Иначе
		запросзаявки.Текст =  СтрШаблон(ТекстдляСпискапродаж(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), "");
	КонецЕсли;  
	
	запросзаявки.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	запросзаявки.УстановитьПараметр("СостояниеСборки",состояниеСборки);
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросзаявки.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
		
	Иначе 
		запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	///-ГомзМА 20.12.2023
	
	
	//запросзаявки.Текст =  СтрШаблон(ТекстдляСпискапродаж(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	//
	//Если Запрос.ПараметрыURL["userid"] <> Неопределено и Запрос.ПараметрыURL["userid"] <> "0" тогда 
	//	запросзаявки.Текст = запросзаявки.Текст +	" и
	//	|	(ВТ_Продажи.ктопродал = &Ответственный
	//	|    ИЛИ ВТ_Продажи.Ответственныйкладовщик= &Ответственный)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерЗаписи";		
	//	запросзаявки.УстановитьПараметр("Ответственный", Ответственный);
	//КонецЕсли;  
	//
	//запросзаявки.УстановитьПараметр("СостояниеСборки",состояниеСборки);
	//
	//Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
	//	запросзаявки.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	//	
	//Иначе 
	//	запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	//КонецЕсли;
	
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	МассивПродаж = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураПродажи = новый Структура;
		СтруктураПродажи.Вставить("id",Строка(выборка.Номер));
		СтруктураПродажи.Вставить("date",Строка(выборка.Дата));
		СтруктураПродажи.Вставить("client",Строка(выборка.Клиент));
		СтруктураПродажи.Вставить("processing",Строка(выборка.СтатусОбработки));
		СтруктураПродажи.Вставить("sub_processing",Строка(выборка.ПодСтатусОбработки));
		
		СтруктураОтветсвенного = Новый структура;
		СтруктураОтветсвенного.Вставить("id",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.ктопродал).Код));
		СтруктураОтветсвенного.Вставить("name",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.ктопродал).Наименование)); 
		СтруктураПродажи.Вставить("responsible",СтруктураОтветсвенного);   
		
		
		СтруктураПортера= Новый структура;
		СтруктураПортера.Вставить("id",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.ОтветственныйКладовщик).Код));
		СтруктураПортера.Вставить("name",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.ОтветственныйКладовщик).Наименование));		
		СтруктураПродажи.Вставить("porter",СтруктураПортера);
		
		
		СтруктураПродажи.Вставить("sum",Строка(выборка.СуммаДокумента));
		
		МассивПродаж.Добавить(СтруктураПродажи);
	КонецЦикла;
	
	
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивПродаж);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьТоварыИзЗаявокgetstuffapp(Запрос)
	Запрос = Новый запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	СправочникНоменклатура.Код КАК Код,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	|	СправочникНоменклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО СправочникНоменклатура.Ссылка = РегистрНакопления1Остатки.Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Рейтинг
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_РейтингМесяц
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка.Дата >= &ДатаСреза
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод.Владелец КАК индкодВладелец,
	|	МАКСИМУМ(ИндНомер.АвитоЧастник) КАК АвитоЧастник
	|ПОМЕСТИТЬ ВТ_Проверка
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИндНомер.индкод.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндНомер.индкод.Владелец КАК индкодВладелец,
	|	СУММА(ВЫБОР
	|			КОГДА ИндНомер.АвитоЧастник
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК АвитоЧастник
	|ПОМЕСТИТЬ ВТ_КоличествоОтконвейерненых
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИндНомер.индкод.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Ссылка.Дата КАК Дата,
	|	ЗаказКлиентаТовары.Ссылка.Номер КАК Номер,
	|	ВТ_Остатки.Код КАК Код,
	|	ВТ_Остатки.Артикул КАК Артикул,
	|	ВТ_Остатки.Ссылка КАК Наименование,
	|	ВТ_Остатки.КолвоОстаток КАК Остаток,
	|	ЗаказКлиентаТовары.Цена КАК Цена,
	|	ЗаказКлиентаТовары.Ссылка.НомерТелефона КАК НомерТелефона,
	|	ЗаказКлиентаТовары.Ссылка.Ответственный КАК Ответственный,
	|	ВТ_Рейтинг.Количество КАК Рейтинг,
	|	ВТ_РейтингМесяц.Количество КАК РейтингЗаМесяц,
	|	ЗаказКлиентаТовары.Ссылка.Клиент КАК Клиент,
	|	ЗаказКлиентаТовары.Ссылка.Состояние КАК Состояние,
	|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
	|	ВТ_Проверка.АвитоЧастник КАК Конвейер,
	|	ВТ_КоличествоОтконвейерненых.АвитоЧастник КАК КоличествоОтконвейерненых
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_Остатки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Рейтинг КАК ВТ_Рейтинг
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_Рейтинг.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РейтингМесяц КАК ВТ_РейтингМесяц
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_РейтингМесяц.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Проверка КАК ВТ_Проверка
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_Проверка.индкодВладелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоОтконвейерненых КАК ВТ_КоличествоОтконвейерненых
	|		ПО ЗаказКлиентаТовары.Номенклатура = ВТ_КоличествоОтконвейерненых.индкодВладелец
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка.Дата >= &ДатаСреза"; 
	
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(ТекущаяДата()));
	Выборка = запрос.Выполнить().Выбрать();
	
	МассивТоваров = Новый Массив;
	Пока выборка.Следующий() Цикл
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    	   Строка(выборка.Наименование));
		СтруктураТоваров.Вставить("article", 	   Строка(выборка.Артикул));
		СтруктураТоваров.Вставить("cost",   	   Строка(выборка.Цена));  
		СтруктураТоваров.Вставить("ost",     	   Строка(выборка.Остаток));  
		СтруктураТоваров.Вставить("rate",    	   Строка(выборка.Рейтинг));
		СтруктураТоваров.Вставить("rate_mounth",   Строка(выборка.РейтингЗаМесяц));
		СтруктураТоваров.Вставить("konv",   	   Строка(выборка.Конвейер));
		СтруктураТоваров.Вставить("konv_count",    Строка(выборка.КоличествоОтконвейерненых));
		СтруктураТоваров.Вставить("id",    	  	   Строка(выборка.Код));
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
		
	КонецЦикла;  
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСрокВыполненияЗадачи(Задача, ДатаНачала, ДатаОкончания)
	
	///+ГомзМА 22.02.2024
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВремяВыполненияЗадач.Срок) КАК Срок,
	               |	ВремяВыполненияЗадач.Задача КАК Задача
	               |ИЗ
	               |	РегистрСведений.ВремяВыполненияЗадач КАК ВремяВыполненияЗадач
	               |ГДЕ
	               |	ВремяВыполненияЗадач.Задача = &Задача
	               |	И ВремяВыполненияЗадач.ДатаСреза МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВремяВыполненияЗадач.Задача";
	Запрос.УстановитьПараметр("Задача", 		Задача);
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Выборка = Запрос.Выполнить().Выбрать();
	Время = 0;
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Время = выборка.срок;
	КонецЕсли;
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВремяВыполненияЗадач.Задача КАК Задача,
	               |	ВремяВыполненияЗадач.НачалоЗамера КАК НачалоЗамера
	               |ИЗ
	               |	РегистрСведений.ВремяВыполненияЗадач КАК ВремяВыполненияЗадач
	               |ГДЕ
	               |	ВремяВыполненияЗадач.Задача = &Задача
	               |	И ВремяВыполненияЗадач.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
	               |	И ВремяВыполненияЗадач.ДатаСреза МЕЖДУ &ДатаНачала И &ДатаОкончания";
	Запрос.УстановитьПараметр("Задача", 		Задача);
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Время = Время + (ТекущаяДата() - Выборка.НачалоЗамера);
	КонецЕсли;
	
	Возврат Время;
	///-ГомзМА 22.02.2024
	
КонецФункции       


Функция ПолучитьВремяЗадачи(Задача)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ВремяВыполненияЗадач.Срок) КАК Срок,
	|	ВремяВыполненияЗадач.Задача КАК Задача
	|ИЗ
	|	РегистрСведений.ВремяВыполненияЗадач КАК ВремяВыполненияЗадач
	|ГДЕ
	|	ВремяВыполненияЗадач.Задача = &Задача
	|
	|СГРУППИРОВАТЬ ПО
	|	ВремяВыполненияЗадач.Задача";
	Запрос.УстановитьПараметр("Задача", Задача);
	Выборка = Запрос.Выполнить().Выбрать();
	Время = 0;
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Время = выборка.срок;
	КонецЕсли;
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВремяВыполненияЗадач.Задача КАК Задача,
	|	ВремяВыполненияЗадач.НачалоЗамера КАК НачалоЗамера
	|ИЗ
	|	РегистрСведений.ВремяВыполненияЗадач КАК ВремяВыполненияЗадач
	|ГДЕ
	|	ВремяВыполненияЗадач.Задача = &Задача
	|	И ВремяВыполненияЗадач.КонецЗамера < ДатаВремя(2000,1,1)";
	Запрос.УстановитьПараметр("Задача", Задача);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Время = Время + (ТекущаяДата() - Выборка.НачалоЗамера);
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции       

Функция ПолучитьВремяПродажи(Продажа)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВремяРаботыСПродажами.СрокВыполнения) КАК Срок,
	               |	ВремяРаботыСПродажами.Продажа КАК Задача
	               |ИЗ
	               |	РегистрСведений.ВремяРаботыСПродажами КАК ВремяРаботыСПродажами
	               |ГДЕ
	               |	ВремяРаботыСПродажами.Продажа = &Продажа
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВремяРаботыСПродажами.Продажа";
	Запрос.УстановитьПараметр("Продажа", Продажа);
	Выборка = Запрос.Выполнить().Выбрать();
	Время = 0;
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Время = выборка.срок;
	КонецЕсли;
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВремяРаботыСПродажами.Продажа КАК Продажа,
	               |	ВремяРаботыСПродажами.ДатаНачала КАК НачалоЗамера
	               |ИЗ
	               |	РегистрСведений.ВремяРаботыСПродажами КАК ВремяРаботыСПродажами
	               |ГДЕ
	               |	ВремяРаботыСПродажами.Продажа = &Продажа
	               |	И ВремяРаботыСПродажами.ДатаОкончания < ДАТАВРЕМЯ(2000, 1, 1)";
	Запрос.УстановитьПараметр("Продажа", Продажа);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Время = Время + (ТекущаяДата() - Выборка.НачалоЗамера);
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции


Функция ПолучитьВремяЗадачиЗаДень(Исполнитель)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ВремяВыполненияЗадач.Срок) КАК Срок,
	|	ВремяВыполненияЗадач.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ВремяВыполненияЗадач КАК ВремяВыполненияЗадач
	|ГДЕ
	|	ВремяВыполненияЗадач.Ответственный = &Ответственный
	|	И ВремяВыполненияЗадач.НачалоЗамера >= &НачалоЗамера
	|
	|СГРУППИРОВАТЬ ПО
	|	ВремяВыполненияЗадач.Ответственный";
	Запрос.УстановитьПараметр("Ответственный", Исполнитель);
	Запрос.УстановитьПараметр("НачалоЗамера", НачалоДня(ТекущаяДата()));
	Выборка = Запрос.Выполнить().Выбрать();
	Время = 0;
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Время = выборка.срок;
	КонецЕсли;
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВремяВыполненияЗадач.Задача КАК Задача,
	|	ВремяВыполненияЗадач.НачалоЗамера КАК НачалоЗамера
	|ИЗ
	|	РегистрСведений.ВремяВыполненияЗадач КАК ВремяВыполненияЗадач
	|ГДЕ
	|	ВремяВыполненияЗадач.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
	|	И ВремяВыполненияЗадач.Ответственный = &Ответственный";
	Запрос.УстановитьПараметр("Ответственный", Исполнитель);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Время = Время + (ТекущаяДата() - Выборка.НачалоЗамера);
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции 

Функция ПолучитьВремяПродажиЗаДень(Исполнитель)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВремяРаботыСПродажами.СрокВыполнения) КАК Срок,
	               |	ВремяРаботыСПродажами.Ответственный КАК Ответственный
	               |ИЗ
	               |	РегистрСведений.ВремяРаботыСПродажами КАК ВремяРаботыСПродажами
	               |ГДЕ
	               |	ВремяРаботыСПродажами.Ответственный = &Ответственный
	               |	И ВремяРаботыСПродажами.ДатаНачала >= &НачалоЗамера
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВремяРаботыСПродажами.Ответственный";
	Запрос.УстановитьПараметр("Ответственный", Исполнитель);
	Запрос.УстановитьПараметр("НачалоЗамера", НачалоДня(ТекущаяДата()));
	Выборка = Запрос.Выполнить().Выбрать();
	Время = 0;
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Время = выборка.срок;
	КонецЕсли;
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВремяРаботыСПродажами.Продажа КАК Задача,
	               |	ВремяРаботыСПродажами.ДатаНачала КАК НачалоЗамера
	               |ИЗ
	               |	РегистрСведений.ВремяРаботыСПродажами КАК ВремяРаботыСПродажами
	               |ГДЕ
	               |	ВремяРаботыСПродажами.ДатаОкончания < ДАТАВРЕМЯ(2000, 1, 1)
	               |	И ВремяРаботыСПродажами.Ответственный = &Ответственный";
	Запрос.УстановитьПараметр("Ответственный", Исполнитель);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Время = Время + (ТекущаяДата() - Выборка.НачалоЗамера);
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции


Функция ПолучитьЗадачиGetTasks(Запрос)
ЗапросЗадач = новый Запрос;
	Статус = новый массив;
	
	Если Число(Запрос.ПараметрыURL["state"]) = 1 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.ВРаботе);
		Статус.Добавить(Перечисления.СтатусыЗадач.Создана);	
		Статус.Добавить(Перечисления.СтатусыЗадач.Отложена);
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 2 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Отложена);		
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 3 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Выполнена);
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 4 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Отменена);
	КонецЕсли;
	
	Исполнитель = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;

	ЗапросЗадач.Текст =  СтрШаблон(текстДляЗадач(), Формат(100000, "ЧГ="));
	ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи", 0);
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	ЗапросЗадач.УстановитьПараметр("Статус", Статус);
	//ЗапросЗадач.УстановитьПараметр("Направление", Справочники.ПроектыРазвития.НайтиПоКоду(Запрос.ПараметрыURL["direction"]));
		ТекстПоиска = Строка(Запрос.ПараметрыURL["text"]);
	Если ТекстПоиска <> "0" Тогда
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+ТекстПоиска+"%");
Иначе
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+"[a-я]"+"%");
	КонецЕсли;
	
	Выборкаобщ = ЗапросЗадач.Выполнить().Выбрать().Количество();
	ЗапросЗадач.Текст =  СтрШаблон(текстДляЗадач(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="));
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли; 
	
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	ЗапросЗадач.УстановитьПараметр("Статус", Статус);
	//ЗапросЗадач.УстановитьПараметр("Направление", Справочники.ПроектыРазвития.НайтиПоКоду(Запрос.ПараметрыURL["direction"]));
		
	Если ТекстПоиска <> "0" Тогда
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+ТекстПоиска+"%");
Иначе
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+"[a-я]"+"%");
	КонецЕсли;
	Выборка = ЗапросЗадач.Выполнить().Выбрать();
	
	МассивЗадач = Новый Массив;
	
	Пока выборка.Следующий() Цикл
		
		Если выборка.ОценкаЗадач = Перечисления.ОценкаЗадач.Срочно Тогда
			Срочно = Истина;
		Иначе
			Срочно = Ложь;
		КонецЕсли;
		
		СтруктураЗадачи = Новый Структура;
		СтруктураЗадачи.Вставить("name",    	Строка(выборка.Наименование));
		СтруктураЗадачи.Вставить("date", 	    Строка(выборка.Дата));
		СтруктураЗадачи.Вставить("date_end", 	Строка(?(выборка.ДатаВыполнения = '00010101', "", выборка.ДатаВыполнения)));
		СтруктураЗадачи.Вставить("description", Строка(выборка.Описание));  
		СтруктураЗадачи.Вставить("number",     	Строка(выборка.Номер));
		СтруктураЗадачи.Вставить("department",	Строка(выборка.Отдел));
		СтруктураЗадачи.Вставить("direction",	Строка(выборка.Направление));
		СтруктураЗадачи.Вставить("executor",    Строка(выборка.Исполнитель));
		СтруктураЗадачи.Вставить("author",      Строка(выборка.Ответственный));
		СтруктураЗадачи.Вставить("state",   	Строка(выборка.Статус));
		СтруктураЗадачи.Вставить("deadline",	Строка(выборка.ПлановыйСрокВыполнения));
		СтруктураЗадачи.Вставить("srochno",   	Срочно);
		СтруктураЗадачи.Вставить("priority",	Строка(выборка.Приоритет));
		СтруктураЗадачи.Вставить("state_author",Строка(выборка.СтатусАвтора));
		СтруктураЗадачи.Вставить("id_order",	Строка(выборка.ИдентификаторРаботыЗаказНарядаНаВосстановление));
		//@skip-check query-in-loop
		СтруктураЗадачи.Вставить("time_in_work",ПолучитьВремяЗадачи(выборка.ссылка));
		//СтруктураЗадачи.Вставить("id",    	  	   Строка(выборка.Код));
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивЗадач.Добавить(СтруктураЗадачи);
		
	КонецЦикла;  
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	СтруктураИнфо = новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗадач);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьЗадачиОтАвтораGetTasksFromAuthor(Запрос)
	
	///+ГомзМА 20.02.2024
	ЗапросЗадач = новый Запрос;
	Статус = новый массив;
	
	Если Число(Запрос.ПараметрыURL["state"]) = 1 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.ВРаботе);
		Статус.Добавить(Перечисления.СтатусыЗадач.Создана);	
		Статус.Добавить(Перечисления.СтатусыЗадач.Отложена);
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 2 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Отложена);		
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 3 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Выполнена);
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 4 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Отменена);
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 5 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.ВРаботе);
		Статус.Добавить(Перечисления.СтатусыЗадач.Создана);	
		Статус.Добавить(Перечисления.СтатусыЗадач.Отложена);
		Статус.Добавить(Перечисления.СтатусыЗадач.Выполнена);
		Статус.Добавить(Перечисления.СтатусыЗадач.Отменена);
	КонецЕсли;
	
	Автор = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
	
	ЗапросЗадач.Текст =  СтрШаблон(текстДляЗадачОтАвтора(), Формат(100000, "ЧГ="));
	ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи", 0);
	ЗапросЗадач.УстановитьПараметр("Автор", Автор);
	ЗапросЗадач.УстановитьПараметр("Статус", Статус);
	
	Выборкаобщ = ЗапросЗадач.Выполнить().Выбрать().Количество();
	ЗапросЗадач.Текст =  СтрШаблон(текстДляЗадачОтАвтора(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="));
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли; 
	
	ЗапросЗадач.УстановитьПараметр("Автор", Автор);
	ЗапросЗадач.УстановитьПараметр("Статус", Статус);
	Выборка = ЗапросЗадач.Выполнить().Выбрать();
	
	МассивЗадач = Новый Массив;
	
	Пока выборка.Следующий() Цикл
		
		СтруктураЗадачи = Новый Структура;
		СтруктураЗадачи.Вставить("name",    	Строка(выборка.Наименование));
		СтруктураЗадачи.Вставить("date", 	    Строка(выборка.Дата));
		СтруктураЗадачи.Вставить("date_end", 	Строка(?(выборка.ДатаВыполнения = '00010101', "", выборка.ДатаВыполнения)));
		СтруктураЗадачи.Вставить("description", Строка(выборка.Описание));  
		СтруктураЗадачи.Вставить("number",     	Строка(выборка.Номер));  
		СтруктураЗадачи.Вставить("executor",    Строка(выборка.Исполнитель));
		СтруктураЗадачи.Вставить("author",      Строка(выборка.Ответственный));
		СтруктураЗадачи.Вставить("state",   	Строка(выборка.Статус));
		СтруктураЗадачи.Вставить("state_author",Строка(выборка.СтатусАвтора));
		СтруктураЗадачи.Вставить("deadline",	Строка(выборка.ПлановыйСрокВыполнения));
		СтруктураЗадачи.Вставить("id_order",	Строка(выборка.ИдентификаторРаботыЗаказНарядаНаВосстановление));
		//@skip-check query-in-loop
		СтруктураЗадачи.Вставить("time_in_work",ПолучитьВремяЗадачи(выборка.ссылка));
		//СтруктураЗадачи.Вставить("id",    	  	   Строка(выборка.Код));
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивЗадач.Добавить(СтруктураЗадачи);
		
	КонецЦикла;  
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	СтруктураИнфо = новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗадач);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 20.02.2024
	
КонецФункции

Функция ПолучитьДашбордGetDash(Запрос)
	запросСотрудников = Новый Запрос;
	запросСотрудников.Текст =  текстДляСпискаСотрудников(); 
	
	//запросСотрудников.УстановитьПараметр("ОтделНов",Справочники.Подразделения.НайтиПоКоду("000000040"));
	ЗапросСотрудников.УстановитьПараметр("ОтделНов", Справочники.Подразделения.НайтиПоКоду(Запрос.ПараметрыURL["department_id"]));
	ВыборкаСотрудников = запросСотрудников.Выполнить().Выбрать();
	
	//МассивСотрудников = новый массив;
	//
	//Пока ВыборкаСотрудников.Следующий() Цикл
	//	МассивСотрудников.Добавить(ВыборкаСотрудников.Пользователь);
	//КонецЦикла;
	МассивЗадач = Новый Массив;
	Пока ВыборкаСотрудников.Следующий()	Цикл
		ЗапросЗадач = новый Запрос;
		ЗапросЗадач.Текст =  "ВЫБРАТЬ
|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задача.Ссылка) КАК КоличествоЗадач,
|	Задача.Исполнитель КАК Исполнитель
|ПОМЕСТИТЬ ВТ_Задачи
|ИЗ
|	Документ.Задача КАК Задача
|ГДЕ
|	(Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Создана)
|			ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Вработе)
|			ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Отложена))
|
|СГРУППИРОВАТЬ ПО
|	Задача.Исполнитель
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Сотрудники.Пользователь.Наименование КАК Наименование,
|	Сотрудники.Пользователь.Ссылка КАК Ссылка,
|	Сотрудники.Код КАК Код
|ПОМЕСТИТЬ ВТ_Юзеры
|ИЗ
|	Справочник.Сотрудники КАК Сотрудники
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Задача.Номер КАК Номер,
|	Задача.Дата КАК Дата,
|	Задача.Описание КАК Описание,
|	Задача.Наименование КАК Наименование,
|	Задача.Исполнитель КАК Исполнитель1,
|	Задача.Ответственный КАК Ответственный,
|	Задача.Статус КАК Статус,
|	ВТ_Юзеры.Наименование КАК Исполнитель,
|	ВТ_Юзеры.Код КАК Код,
|	Задача.СтатусАвтора КАК СтатусАвтора,
|	Задача.Ссылка КАК Ссылка,
|	ЕстьNull(ВТ_Задачи.КоличествоЗадач,0) КАК КоличествоЗадач
|ИЗ
|	ВТ_Юзеры КАК ВТ_Юзеры
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
|		ПО (ВТ_Юзеры.Ссылка = Задача.Ответственный)
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
|		ПО (ВТ_Юзеры.Ссылка = ВТ_Задачи.Исполнитель)
|ГДЕ
|	Задача.Статус В(&Статус)
|	И Задача.Исполнитель = &Пользователи
|	И Задача.Дата >= ДАТАВРЕМЯ(2024, 1, 1)";
		
		Статус = новый массив;
		Статус.Добавить(Перечисления.СтатусыЗадач.ВРаботе);
		
		ЗапросЗадач.УстановитьПараметр("Статус", Статус);
		ЗапросЗадач.УстановитьПараметр("Пользователи", ВыборкаСотрудников.Пользователь);
		
		//@skip-check query-in-loop
		Выборка = ЗапросЗадач.Выполнить().Выбрать();
		
		
		СтруктураЗадачи = Новый Структура;
		СтруктураЗадачи.Вставить("name",    Строка(ВыборкаСотрудников.Пользователь));
		
		СтруктураЗадачи.Вставить("task_name",    	 Строка(выборка.Наименование));
		СтруктураЗадачи.Вставить("date", 	    	 Строка(выборка.Дата));
		СтруктураЗадачи.Вставить("task_description", Строка(выборка.Описание)); 
		СтруктураЗадачи.Вставить("code",           	 Строка(ВыборкаСотрудников.Код));
		СтруктураЗадачи.Вставить("task_number",      Строка(выборка.Номер));  	
		СтруктураЗадачи.Вставить("task_author",      Строка(выборка.Ответственный));
		СтруктураЗадачи.Вставить("task_state",   	 Строка(выборка.Статус));
		СтруктураЗадачи.Вставить("task_state_author",Строка(выборка.СтатусАвтора));
		СтруктураЗадачи.Вставить("time_in_work",0);
		//@skip-check query-in-loop
		СтруктураЗадачи.Вставить("time_in_work_day",ПолучитьВремяЗадачиЗаДень(выборка.Исполнитель1));
		СтруктураЗадачи.Вставить("task_count",ВыборкаСотрудников.КоличествоЗадач); 
		Пока выборка.Следующий() Цикл
			
			СтруктураЗадачи.Вставить("task_name",    	 Строка(выборка.Наименование));
			СтруктураЗадачи.Вставить("date", 	         Строка(выборка.Дата));
			//СтруктураЗадачи.Вставить("code",           Строка(выборка.Код));
			СтруктураЗадачи.Вставить("task_description", Строка(выборка.Описание));  
			СтруктураЗадачи.Вставить("task_number",      Строка(выборка.Номер));  	
			СтруктураЗадачи.Вставить("task_author",      Строка(выборка.Ответственный));
			СтруктураЗадачи.Вставить("task_state",   	 Строка(выборка.Статус));
			СтруктураЗадачи.Вставить("task_state_author",Строка(выборка.СтатусАвтора));
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураЗадачи.Вставить("time_in_work",ПолучитьВремяЗадачи(выборка.ссылка));
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураЗадачи.Вставить("time_in_work_day",ПолучитьВремяЗадачиЗаДень(выборка.Исполнитель1));
			СтруктураЗадачи.Вставить("task_count",ВыборкаСотрудников.КоличествоЗадач); 
			//СтруктураЗадачи.Вставить("id",    	  	   Строка(выборка.Код));
			
			//СтруктураТоваров.Вставить("photos", МассивФото);
			
		КонецЦикла; 
		МассивЗадач.Добавить(СтруктураЗадачи);
	КонецЦикла;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивЗадач);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции


Функция ПолучитьСтатистикуЗадачgettaskstatistics(Запрос)
	///+ГомзМА 22.02.2024
	ЗапросСотрудников = Новый Запрос;
	ЗапросСотрудников.Текст =  текстДляСпискаСотрудников(); 
	
	ЗапросСотрудников.УстановитьПараметр("ОтделНов", Справочники.Подразделения.НайтиПоКоду(Запрос.ПараметрыURL["department_id"]));
	ВыборкаСотрудников = ЗапросСотрудников.Выполнить().Выбрать();
	
	МассивИнфо 	= Новый Массив;
	
	Пока ВыборкаСотрудников.Следующий()	Цикл
		ЗапросЗадач = новый Запрос;
		ЗапросЗадач.Текст =  "ВЫБРАТЬ
		                     |	Сотрудники.Пользователь.Наименование КАК Наименование,
		                     |	Сотрудники.Пользователь.Ссылка КАК Ссылка,
		                     |	Сотрудники.Код КАК Код
		                     |ПОМЕСТИТЬ ВТ_Юзеры
		                     |ИЗ
		                     |	Справочник.Сотрудники КАК Сотрудники
		                     |;
		                     |
		                     |////////////////////////////////////////////////////////////////////////////////
		                     |ВЫБРАТЬ
		                     |	ВТ_Юзеры.Наименование КАК Исполнитель,
		                     |	ВТ_Юзеры.Код КАК Код,
		                     |	ВремяВыполненияЗадач.Задача.Номер КАК ЗадачаНомер,
		                     |	ВремяВыполненияЗадач.Задача.Дата КАК ЗадачаДата,
		                     |	ВремяВыполненияЗадач.Задача.Наименование КАК ЗадачаНаименование,
		                     |	ВремяВыполненияЗадач.Задача.Исполнитель КАК ЗадачаИсполнитель,
		                     |	ВремяВыполненияЗадач.Задача.СтатусАвтора КАК ЗадачаСтатусАвтора,
		                     |	ВремяВыполненияЗадач.Задача.Ссылка КАК ЗадачаСсылка,
							 |	ВремяВыполненияЗадач.Задача.ПлановыйСрокВыполнения КАК ПлановыйСрокВыполнения,
		                     |	СУММА(ВремяВыполненияЗадач.Срок) КАК Срок,
		                     |	ВремяВыполненияЗадач.Задача.Ответственный КАК ЗадачаОтветственный,
		                     |	ВремяВыполненияЗадач.Задача.Статус КАК ЗадачаСтатус,
		                     |	ВремяВыполненияЗадач.Задача.ДатаОкончанияФакт КАК ЗадачаДатаВыполнения
		                     |ИЗ
		                     |	ВТ_Юзеры КАК ВТ_Юзеры
		                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВремяВыполненияЗадач КАК ВремяВыполненияЗадач
		                     |		ПО ВТ_Юзеры.Ссылка = ВремяВыполненияЗадач.Ответственный
		                     |ГДЕ
		                     |	ВремяВыполненияЗадач.ДатаСреза МЕЖДУ &ДатаНачала И &ДатаОкончания
		                     |	И ВремяВыполненияЗадач.Ответственный = &Пользователь
		                     |
		                     |СГРУППИРОВАТЬ ПО
		                     |	ВТ_Юзеры.Наименование,
		                     |	ВТ_Юзеры.Код,
		                     |	ВремяВыполненияЗадач.Задача.Номер,
		                     |	ВремяВыполненияЗадач.Задача.Дата,
		                     |	ВремяВыполненияЗадач.Задача.Наименование,
		                     |	ВремяВыполненияЗадач.Задача.Исполнитель,
		                     |	ВремяВыполненияЗадач.Задача.СтатусАвтора,
		                     |	ВремяВыполненияЗадач.Задача.Ссылка,
		                     |	ВремяВыполненияЗадач.Задача.Ответственный,
		                     |	ВремяВыполненияЗадач.Задача.Статус";
		
		Статус = Новый Массив;
		Статус.Добавить(Перечисления.СтатусыЗадач.Выполнена);
		
		//ЗапросЗадач.УстановитьПараметр("Статус", 		Статус);
		ЗапросЗадач.УстановитьПараметр("Пользователь", 	ВыборкаСотрудников.Пользователь);
		ЗапросЗадач.УстановитьПараметр("ДатаНачала", 	НачалоДня(Дата(Строка(Запрос.ПараметрыURL["datestart"]))));
		ЗапросЗадач.УстановитьПараметр("ДатаОкончания", КонецДня(Дата(Строка(Запрос.ПараметрыURL["dateend"]))));
		
		//@skip-check query-in-loop
		Выборка = ЗапросЗадач.Выполнить().Выбрать();
		
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("name",    Строка(ВыборкаСотрудников.Пользователь));
		
		МассивЗадач = Новый Массив;
		СрокВыполненияЗадач = 0;
		КоличествоВыполенных = 0;
		
		Пока Выборка.Следующий() Цикл
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СрокВыполненияЗадачи = ПолучитьСрокВыполненияЗадачи(Выборка.ЗадачаСсылка, НачалоДня(Дата(Строка(Запрос.ПараметрыURL["datestart"]))), КонецДня(Дата(Строка(Запрос.ПараметрыURL["dateend"]))));
			Если Выборка.ЗадачаСтатус = Перечисления.СтатусыЗадач.Выполнена И 
				 Выборка.ЗадачаДатаВыполнения >= НачалоДня(Дата(Строка(Запрос.ПараметрыURL["datestart"]))) И
				 Выборка.ЗадачаДатаВыполнения <= КонецДня(Дата(Строка(Запрос.ПараметрыURL["dateend"]))) Тогда
				КоличествоВыполенных = КоличествоВыполенных + 1;
			КонецЕсли;
			
			СтруктураЗадачи = Новый Структура;
			СтруктураЗадачи.Вставить("task_name",    		Строка(Выборка.ЗадачаНаименование));
			СтруктураЗадачи.Вставить("date", 	    		Строка(Выборка.ЗадачаДата));
			//СтруктураЗадачи.Вставить("date_end",          Строка(Выборка.ДатаВыполнения));
			//СтруктураЗадачи.Вставить("task_description", 	Строка(Выборка.Описание));  
			СтруктураЗадачи.Вставить("task_number",     	Строка(Выборка.ЗадачаНомер));  	
			СтруктураЗадачи.Вставить("task_author",      	Строка(Выборка.ЗадачаОтветственный));
			СтруктураЗадачи.Вставить("task_state",   		Строка(Выборка.ЗадачаСтатус));
			СтруктураЗадачи.Вставить("task_state_author",	Строка(Выборка.ЗадачаСтатусАвтора));
			СтруктураЗадачи.Вставить("deadline",			Строка(Выборка.ПлановыйСрокВыполнения));
			СтруктураЗадачи.Вставить("time_in_work",		СрокВыполненияЗадачи);
		
			МассивЗадач.Добавить(СтруктураЗадачи);
			СрокВыполненияЗадач = СрокВыполненияЗадач + СрокВыполненияЗадачи;
		КонецЦикла; 
		
		СтруктураИнфо.Вставить("count_tasks", КоличествоВыполенных);
		СтруктураИнфо.Вставить("time_tasks", СрокВыполненияЗадач);
		СтруктураИнфо.Вставить("tasks", МассивЗадач);
		
		МассивИнфо.Добавить(СтруктураИнфо);
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивИнфо);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 22.02.2024
	
КонецФункции


Функция ПолучитьЗадачуGetTasks(Запрос)
	ЗапросЗадач = новый Запрос;
	Статус = новый массив;
	Если Число(Запрос.ПараметрыURL["state"]) = 1 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.ВРаботе);
		Статус.Добавить(Перечисления.СтатусыЗадач.Создана);	
		
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 2 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Отложена);		
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 3 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Выполнена);
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 4 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Отменена);
	КонецЕсли;
	
	Исполнитель = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
	
	ЗапросЗадач.Текст =  СтрШаблон(текстДляЗадач(), Формат(100000, "ЧГ="));
	ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи", 0);
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	ЗапросЗадач.УстановитьПараметр("Статус", Статус);
			ТекстПоиска = Строка(Запрос.ПараметрыURL["text"]);
	Если ТекстПоиска <> "0" Тогда
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+ТекстПоиска+"%");
Иначе
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+"[а-я]"+"%");
	КонецЕсли;
	
	Выборкаобщ = ЗапросЗадач.Выполнить().Выбрать().Количество();
	ЗапросЗадач.Текст =  СтрШаблон(текстДляЗадач(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="));
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли; 
	
	ЗапросЗадач.УстановитьПараметр("Исполнитель", Исполнитель);
	ЗапросЗадач.УстановитьПараметр("Статус", Статус);
			ТекстПоиска = Строка(Запрос.ПараметрыURL["text"]);
	Если ТекстПоиска <> "0" Тогда
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+ТекстПоиска+"%");
Иначе
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+"[а-я]"+"%");
	КонецЕсли;
	Выборка = ЗапросЗадач.Выполнить().Выбрать();
	
	МассивЗадач = Новый Массив;
	
	Пока выборка.Следующий() Цикл
		
		СтруктураЗадачи = Новый Структура;
		СтруктураЗадачи.Вставить("name",    	Строка(выборка.Наименование));
		СтруктураЗадачи.Вставить("date", 	    Строка(выборка.Дата));
		СтруктураЗадачи.Вставить("description", Строка(выборка.Описание));  
		СтруктураЗадачи.Вставить("number",     	Строка(выборка.Номер));  
		СтруктураЗадачи.Вставить("executor",    Строка(выборка.Исполнитель));
		СтруктураЗадачи.Вставить("author",      Строка(выборка.Ответственный));
		СтруктураЗадачи.Вставить("state",   	Строка(выборка.Статус));
		СтруктураЗадачи.Вставить("state_author",Строка(выборка.СтатусАвтора));
		//СтруктураЗадачи.Вставить("id",    	  	   Строка(выборка.Код));
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивЗадач.Добавить(СтруктураЗадачи);
		
	КонецЦикла;  
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	СтруктураИнфо = новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗадач);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция НаполнитьЗаказНарядfillingorder(Запрос)
		запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаказНаряда2();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.id;
	//Позиция = Число(Массив.pose);
	Автор 	= Массив.person;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура", Номенклатура);
	Отбор.Вставить("Партия", партия);
	
	Пока выборка.Следующий() Цикл
		Если выборка.Состояние = Перечисления.СостоянияЗаказНаряда.Выполнен Тогда
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Наряд закрыт!");
			Возврат Ответ;	
			
		КонецЕсли;
		
		ОбъектНаряда = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		НайденныеСтроки = ОбъектНаряда.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.количество() > 0 Тогда 
			СтрокаТЧ = ОбъектНаряда.Товары[НайденныеСтроки[0].НомерСтроки-1];  
			СтрокаТЧ.партия = партия; 
			//@skip-check query-in-loop
			СтрокаТЧ.Автомобиль = ПолучитьМашину(партия);
			СтрокаТЧ.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 
			СтрокаТЧ.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Установлена;
			
			ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
		Иначе
			
		Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура", Номенклатура);
	Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	ОбъектНаряда = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		НайденныеСтроки = ОбъектНаряда.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.количество() > 0 Тогда 	
			
			СтрокаТЧ = ОбъектНаряда.Товары[НайденныеСтроки[0].НомерСтроки-1];  
			СтрокаТЧ.партия = партия; 
			//@skip-check query-in-loop
			СтрокаТЧ.Автомобиль = ПолучитьМашину(партия);
			СтрокаТЧ.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 
			СтрокаТЧ.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Установлена;
			
			ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
	
								
			ИначеЕсли  Не ОбъектНаряда.ЗаблокироватьТЧТовары Тогда 
                 Новаястрока = ОбъектНаряда.Товары.Добавить();
				Новаястрока.Партия = партия;
				Новаястрока.Номенклатура = Номенклатура; 
				Новаястрока.Количество = 1;
				//@skip-check query-in-loop
				Новаястрока.Автомобиль = ПолучитьМашину(партия);
				Новаястрока.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Установлена;
				Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
				Новаястрока.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 	
				
				ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + Новаястрока.Номенклатура + " "+ Новаястрока.Партия; 
				ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение); 
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех");
				Возврат Ответ;

				//Ответ = Новый HTTPСервисОтвет(400);
				//Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				//Ответ.УстановитьТелоИзСтроки("Заказ-наряд закрыт!");
				//Возврат Ответ;	
			КонецЕсли; 
						Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Такой позиции в заказ-наряде нет или партия уже установлена!");
			Возврат Ответ;
		КонецЕсли;
		
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не прокатило");
	Возврат Ответ;	

КонецФункции 

Функция ПолучитьПеремещенияgetinmove(Запрос)
	НачалоОтбора = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	КонецОтбора  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	
	МассивГруппМестХранения = Новый Массив;
	///+ГомзМА 05.03.2024
	Если Число(Запрос.ПараметрыURL["city"]) = 1 Тогда //Все
		МассивСкладов = ПолучитьСклады(Неопределено);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000004")); //D
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000008")); //K
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000033")); //EK
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000012")); //Z
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000010")); //X
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000038")); //S
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000009")); //M
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000011")); //Y
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 2 Тогда //Нижний Новгород
		Область = Справочники.Область.НайтиПоКоду("000000052");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000004")); //D
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000008")); //K
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 3 Тогда //Екатеринбург
		Область = Справочники.Область.НайтиПоКоду("000000066");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000033")); //EK
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 4 Тогда //Москва
		Область = Справочники.Область.НайтиПоКоду("000000077");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000012")); //Z
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000010")); //X
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000038")); //S
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000009")); //M
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000011")); //Y
	КонецЕсли;		
	///-ГомзМА 05.03.2024
	
	///+ГомзМА 29.02.2024
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Фурсов Алексей Владимирович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Демаев Роман Юрьевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Демин Алексей Сергеевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Миронов Антон Николаевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Наумов Николай Борисович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Ражев Александр Викторович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Козин Иван Васильевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Куколкин Вадим Дмитриевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Чупанов Сергей Иванович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Чупанова Екатерина Владимировна"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Алексеев Денис Романович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Ильин Николай Александрович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Гафаров Александр Анатольевич"));
	///-ГомзМА 29.02.2024
	
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И НЕ(ЛогИндНомера.Поддон = &Потеряшки
	|				ИЛИ ЛогИндНомера.ПредыдущийПоддон = &Потеряшки)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|			ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Склад", МассивСкладов);
	
	ЗапросПерещений.УстановитьПараметр("Потеряшки",	Справочники.Поддоны.НайтиПоКоду("000000003"));
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();
	СтруктураТоваров = Новый Структура;
	
	Выборка.Следующий();
	Если Выборка.колво > 0 тогда
		СтруктураТоваров.Вставить("detail", Выборка.колво);
		СтруктураТоваров.Вставить("money", Выборка.Сумма);
	иначе
		СтруктураТоваров.Вставить("detail", 0);	
		СтруктураТоваров.Вставить("money", 0);
	КонецЕсли;
	
	///+ГомзМА 29.02.2024
	МассивДеталейПоСотруднику = Новый Массив;
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И НЕ(ЛогИндНомера.Поддон = &Потеряшки
	|				ИЛИ ЛогИндНомера.ПредыдущийПоддон = &Потеряшки)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|			ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Сотрудники", МассивСотрудников);
	
	ЗапросПерещений.УстановитьПараметр("Склад", МассивСкладов);
	
	ЗапросПерещений.УстановитьПараметр("Потеряшки",	Справочники.Поддоны.НайтиПоКоду("000000003"));
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураДеталейПоСотруднику = Новый Структура;
			СтруктураДеталейПоСотруднику.Вставить("detail", Выборка.колво);
			СтруктураДеталейПоСотруднику.Вставить("money", Выборка.Сумма);
			СтруктураДеталейПоСотруднику.Вставить("person", Строка(Выборка.Ответственный));
			МассивДеталейПоСотруднику.Добавить(СтруктураДеталейПоСотруднику);
		КонецЦикла;
		
	КонецЕсли;
	СтруктураТоваров.Вставить("detail_person", МассивДеталейПоСотруднику);
	///-ГомзМА 29.02.2024
		
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	ЛогИндНомера.дата КАК колво,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК индкод,
	|	СУММА(ИндНомер.Цена) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Пред
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И НЕ(ЛогИндНомера.Поддон = &Потеряшки
	|				ИЛИ ЛогИндНомера.ПредыдущийПоддон = &Потеряшки)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|			ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Пред.колво) КАК колво,
	|	СУММА(ВТ_Пред.Сумма) КАК Сумма
	|ИЗ
	|	ВТ_Пред КАК ВТ_Пред
	|ГДЕ
	|	ВТ_Пред.индкод > 1";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Склад", МассивСкладов);
	
	ЗапросПерещений.УстановитьПараметр("Потеряшки",	Справочники.Поддоны.НайтиПоКоду("000000003"));
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();
	
	Выборка.Следующий();
	Если Выборка.колво > 0 тогда
		СтруктураТоваров.Вставить("poddon", Выборка.колво);	
		СтруктураТоваров.Вставить("poddon_money", Выборка.Сумма);
	иначе
		СтруктураТоваров.Вставить("poddon", 0);	
		СтруктураТоваров.Вставить("poddon_money", 0);
	КонецЕсли;
	
	///+ГомзМА 29.02.2024
	МассивПоддоновПоСотруднику = Новый Массив;
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	ЛогИндНомера.дата КАК колво,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК индкод,
	|	СУММА(ИндНомер.Цена) КАК Сумма,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_Пред
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И НЕ(ЛогИндНомера.Поддон = &Потеряшки
	|				ИЛИ ЛогИндНомера.ПредыдущийПоддон = &Потеряшки)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|			ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.дата,
	|	ЛогИндНомера.Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Пред.колво) КАК колво,
	|	СУММА(ВТ_Пред.Сумма) КАК Сумма,
	|	ВТ_Пред.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_Пред КАК ВТ_Пред
	|ГДЕ
	|	ВТ_Пред.индкод > 1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Пред.Ответственный";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Сотрудники", МассивСотрудников);
	
	ЗапросПерещений.УстановитьПараметр("Склад", МассивСкладов);
	
	ЗапросПерещений.УстановитьПараметр("Потеряшки",	Справочники.Поддоны.НайтиПоКоду("000000003"));
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураПоддоновПоСотруднику = Новый Структура;
			СтруктураПоддоновПоСотруднику.Вставить("poddon", Выборка.колво);
			СтруктураПоддоновПоСотруднику.Вставить("money",  Выборка.Сумма);
			СтруктураПоддоновПоСотруднику.Вставить("person", Строка(Выборка.Ответственный));
			МассивПоддоновПоСотруднику.Добавить(СтруктураПоддоновПоСотруднику);
		КонецЦикла;
		
	КонецЕсли;
	СтруктураТоваров.Вставить("poddon_person", МассивПоддоновПоСотруднику);
	///-ГомзМА 29.02.2024
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;	

КонецФункции

Функция ПолучитьПринятыеgetreceived(Запрос)
	НачалоОтбора = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	КонецОтбора  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	
	МассивГруппМестХранения = Новый Массив;
	МассивРегиональныхСтеллажей = Новый Массив;
	///+ГомзМА 05.03.2024
	Если Число(Запрос.ПараметрыURL["city"]) = 1 Тогда //Все
		МассивСкладов = ПолучитьСклады(Неопределено);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000004")); //D
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000008")); //K
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000033")); //EK
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000012")); //Z
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000010")); //X
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000038")); //S
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000009")); //M
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000011")); //Y
		
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001072")); //2_ANGAR
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002015")); //RegionNN
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001068")); //RegionEKB
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002014")); //RegionMSK
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 2 Тогда //Нижний Новгород
		Область = Справочники.Область.НайтиПоКоду("000000052");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000004")); //D
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000008")); //K
		
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001072")); //2_ANGAR
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002015")); //RegionNN
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 3 Тогда //Екатеринбург
		Область = Справочники.Область.НайтиПоКоду("000000066");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000033")); //EK
		
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001068")); //RegionEKB
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 4 Тогда //Москва
		Область = Справочники.Область.НайтиПоКоду("000000077");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000012")); //Z
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000010")); //X
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000038")); //S
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000009")); //M
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000011")); //Y
		
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002014")); //RegionMSK
	КонецЕсли;		
	///-ГомзМА 05.03.2024
	
	///+ГомзМА 29.02.2024
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Фурсов Алексей Владимирович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Демаев Роман Юрьевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Демин Алексей Сергеевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Миронов Антон Николаевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Наумов Николай Борисович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Ражев Александр Викторович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Козин Иван Васильевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Куколкин Вадим Дмитриевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Чупанов Сергей Иванович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Чупанова Екатерина Владимировна"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Алексеев Денис Романович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Ильин Николай Александрович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Гафаров Александр Анатольевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Мустафаев Самир Ровсен Оглы"));
	///-ГомзМА 29.02.2024
	
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И (ЛогИндНомера.ПредыдущийСтеллаж В (&МассивРегиональныхСтеллажей)
	|			ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Наименование ПОДОБНО &Группанач2)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|			ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("МассивРегиональныхСтеллажей",	МассивРегиональныхСтеллажей);
	ЗапросПерещений.УстановитьПараметр("Группанач2",					"%Korzina%");
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",					НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",					КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Склад", 						МассивСкладов);
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();
	СтруктураТоваров = Новый Структура;
	
	Выборка.Следующий();
	Если Выборка.колво > 0 тогда
		СтруктураТоваров.Вставить("count", Выборка.колво);
		СтруктураТоваров.Вставить("money", Выборка.Сумма);
	иначе
		СтруктураТоваров.Вставить("count", 0);	
		СтруктураТоваров.Вставить("money", 0);
	КонецЕсли;
	
	///+ГомзМА 01.03.2024
	МассивКоличествоПоСотруднику = Новый Массив;
	ЗапросКоличествоПоСотруднику = Новый Запрос;
	ЗапросКоличествоПоСотруднику.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И (ЛогИндНомера.ПредыдущийСтеллаж В (&МассивРегиональныхСтеллажей)
	|			ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Наименование ПОДОБНО &Группанач2)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|			ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный";
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("МассивГруппМестХранения", 	МассивГруппМестХранения);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("МассивРегиональныхСтеллажей",	МассивРегиональныхСтеллажей);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Группанач2",					"%Korzina%");
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Датаначала",					НачалоОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("ДатаОкончания",				КонецОтбора);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Сотрудники", 					МассивСотрудников);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Склад", 						МассивСкладов);
	
	Выборка = ЗапросКоличествоПоСотруднику.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураКоличествоПоСотруднику = Новый Структура;
			СтруктураКоличествоПоСотруднику.Вставить("count", 	Выборка.колво);
			СтруктураКоличествоПоСотруднику.Вставить("money", 	Выборка.Сумма);
			СтруктураКоличествоПоСотруднику.Вставить("person", 	Строка(Выборка.Ответственный));
			МассивКоличествоПоСотруднику.Добавить(СтруктураКоличествоПоСотруднику);
		КонецЦикла;
		
	КонецЕсли;
	СтруктураТоваров.Вставить("count_person", МассивКоличествоПоСотруднику);
	///-ГомзМА 01.03.2024
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;	

КонецФункции

Функция ПолучитьВыданыеgetissue(Запрос)
	НачалоОтбора = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	КонецОтбора  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	
	МассивГруппМестХранения = Новый Массив;
	///+ГомзМА 05.03.2024
	Если Число(Запрос.ПараметрыURL["city"]) = 1 Тогда //Все
		МассивСкладов = ПолучитьСклады(Неопределено);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000004")); //D
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000008")); //K
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000033")); //EK
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000012")); //Z
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000010")); //X
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000038")); //S
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000009")); //M
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000011")); //Y
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 2 Тогда //Нижний Новгород
		Область = Справочники.Область.НайтиПоКоду("000000052");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000004")); //D
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000008")); //K
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 3 Тогда //Екатеринбург
		Область = Справочники.Область.НайтиПоКоду("000000066");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000033")); //EK
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 4 Тогда //Москва
		Область = Справочники.Область.НайтиПоКоду("000000077");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000012")); //Z
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000010")); //X
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000038")); //S
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000009")); //M
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000011")); //Y
	КонецЕсли;		
	///-ГомзМА 05.03.2024
	
	///+ГомзМА 01.03.2024
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Фурсов Алексей Владимирович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Демаев Роман Юрьевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Демин Алексей Сергеевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Миронов Антон Николаевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Наумов Николай Борисович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Ражев Александр Викторович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Козин Иван Васильевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Куколкин Вадим Дмитриевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Чупанов Сергей Иванович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Чупанова Екатерина Владимировна"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Алексеев Денис Романович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Ильин Николай Александрович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Гафаров Александр Анатольевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Мустафаев Самир Ровсен Оглы"));
	///-ГомзМА 01.03.2024
	
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.Наименование ПОДОБНО &Группакон
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|			ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", 	МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("Группакон",					"%Korzina%");
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",				НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",				КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Склад", 					МассивСкладов);
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();
	СтруктураТоваров = Новый Структура;
	Количество 	= 0;
	Сумма 		= 0;
	
	Выборка.Следующий();
	Если Выборка.колво > 0 тогда
		Количество 	= Количество + Выборка.колво;		
		Сумма 		= Сумма + Выборка.Сумма;
	КонецЕсли;
	
	ЗапросТоваровВПродажах = Новый Запрос;
	ЗапросТоваровВПродажах.Текст = "ВЫБРАТЬ
	|	СУММА(ПродажаЗапчастейТаблица.Количество) КАК колво,
	|	СУММА(ПродажаЗапчастейТаблица.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ПродажаЗапчастейТаблица.Партия = ИндНомер.индкод
	|ГДЕ
	|	ИндНомер.Стеллаж.ГруппаМестХранения В(&МассивГруппМестХранения)
	|	И ПродажаЗапчастейТаблица.ДатаВыдачи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПродажаЗапчастейТаблица.СтатусТовара
	|	И ИндНомер.Стеллаж.Владелец В(&Склад)";
	
	ЗапросТоваровВПродажах.УстановитьПараметр("МассивГруппМестХранения",	МассивГруппМестХранения);	
	
	ЗапросТоваровВПродажах.УстановитьПараметр("Датаначала",					НачалоОтбора);
	ЗапросТоваровВПродажах.УстановитьПараметр("ДатаОкончания",				КонецОтбора);
	
	ЗапросТоваровВПродажах.УстановитьПараметр("Склад", 						МассивСкладов);
	
	Выборка = ЗапросТоваровВПродажах.Выполнить().Выбрать();
	
		Выборка.Следующий();
		Если Выборка.колво <> NULL Тогда
			Если выборка.колво > 0 Тогда
				Количество 	= Количество + Выборка.колво;
				Сумма 		= Сумма + Выборка.Сумма;
			КонецЕсли;
		КонецЕсли;
		
	///+ГомзМА 01.03.2024
	МассивКоличествоПоСотруднику = Новый Массив;
	ЗапросКоличествоПоСотруднику = Новый Запрос;
	ЗапросКоличествоПоСотруднику.Текст = "ВЫБРАТЬ
	                                     |	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
										 |	СУММА(ИндНомер.Цена) КАК Сумма,
	                                     |	ЛогИндНомера.Ответственный КАК Ответственный
										 |ПОМЕСТИТЬ ВТ_Количество
										 |ИЗ
										 |	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
										 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
										 |		ПО ЛогИндНомера.индкод = ИндНомер.индкод
										 |ГДЕ
										 |	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	                                     |	И ЛогИндНомера.Стеллаж.Наименование ПОДОБНО &Группакон
	                                     |	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	                                     |	И ЛогИндНомера.Ответственный В(&Сотрудники)
										 |   И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
										 |			ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ЛогИндНомера.Ответственный
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	СУММА(ПродажаЗапчастейТаблица.Количество),
										 |	СУММА(ПродажаЗапчастейТаблица.Сумма),
	                                     |	ПродажаЗапчастейТаблица.ОтветственныйЗаВыдачу
	                                     |ИЗ
	                                     |	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	                                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	                                     |		ПО ПродажаЗапчастейТаблица.Партия = ИндНомер.индкод
	                                     |ГДЕ
	                                     |	ИндНомер.Стеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	                                     |	И ПродажаЗапчастейТаблица.ДатаВыдачи МЕЖДУ &ДатаНачала И &ДатаОкончания
	                                     |	И ПродажаЗапчастейТаблица.СтатусТовара
	                                     |	И ПродажаЗапчастейТаблица.ОтветственныйЗаВыдачу В(&Сотрудники)
										 |  И ИндНомер.Стеллаж.Владелец В (&Склад)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ПродажаЗапчастейТаблица.ОтветственныйЗаВыдачу
	                                     |;
	                                     |
	                                     |////////////////////////////////////////////////////////////////////////////////
	                                     |ВЫБРАТЬ
	                                     |	СУММА(ВТ_Количество.колво) КАК колво,
										 |	СУММА(ВТ_Количество.Сумма) КАК Сумма,
	                                     |	ВТ_Количество.Ответственный КАК Ответственный
	                                     |ИЗ
	                                     |	ВТ_Количество КАК ВТ_Количество
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ВТ_Количество.Ответственный";
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("МассивГруппМестХранения",	МассивГруппМестХранения);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Группакон",				"%Korzina%");
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Датаначала",				НачалоОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("ДатаОкончания",			КонецОтбора);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Сотрудники", 				МассивСотрудников);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Склад", 					МассивСкладов);
	
	Выборка = ЗапросКоличествоПоСотруднику.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураКоличествоПоСотруднику = Новый Структура;
			СтруктураКоличествоПоСотруднику.Вставить("count", Выборка.колво);
			СтруктураКоличествоПоСотруднику.Вставить("money", Выборка.Сумма);
			СтруктураКоличествоПоСотруднику.Вставить("person", Строка(Выборка.Ответственный));
			МассивКоличествоПоСотруднику.Добавить(СтруктураКоличествоПоСотруднику);
		КонецЦикла;
		
	КонецЕсли;
	///-ГомзМА 01.03.2024
	
	СтруктураТоваров.Вставить("count", Количество);
	СтруктураТоваров.Вставить("money", Сумма);
	СтруктураТоваров.Вставить("count_person", МассивКоличествоПоСотруднику);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;	

КонецФункции

Функция ПолучитьДашбордСкладаGetDashStore(Запрос)
	запросСотрудников = Новый Запрос;
	запросСотрудников.Текст =  текстДляСпискаСотрудников(); 
	
	запросСотрудников.УстановитьПараметр("ОтделНов",Справочники.Подразделения.НайтиПоКоду("000000034"));
	ВыборкаСотрудников = запросСотрудников.Выполнить().Выбрать();
	
	//МассивСотрудников = новый массив;
	//
	//Пока ВыборкаСотрудников.Следующий() Цикл
	//	МассивСотрудников.Добавить(ВыборкаСотрудников.Пользователь);
	//КонецЦикла;
	МассивЗадач = Новый Массив;
	Пока ВыборкаСотрудников.Следующий()	Цикл
		ЗапросЗадач = новый Запрос;
		ЗапросЗадач.Текст =  "ВЫБРАТЬ
		                     |	Сотрудники.Пользователь.Наименование КАК Наименование,
		                     |	Сотрудники.Пользователь.Ссылка КАК Ссылка,
		                     |	Сотрудники.Код КАК Код
		                     |ПОМЕСТИТЬ ВТ_Юзеры
		                     |ИЗ
		                     |	Справочник.Сотрудники КАК Сотрудники
		                     |;
		                     |
		                     |////////////////////////////////////////////////////////////////////////////////
		                     |ВЫБРАТЬ
		                     |	ВТ_Юзеры.Наименование КАК Исполнитель,
		                     |	ВТ_Юзеры.Код КАК Код,
		                     |	ПродажаЗапчастей.Номер КАК Номер,
		                     |	ПродажаЗапчастей.Дата КАК Дата,
		                     |	ПродажаЗапчастей.WTpanel КАК WTpanel,
		                     |	ПродажаЗапчастей.ПодстатусОбработки КАК ПодстатусОбработки,
		                     |	ПродажаЗапчастей.Ссылка КАК Ссылка
		                     |ИЗ
		                     |	ВТ_Юзеры КАК ВТ_Юзеры
		                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		                     |		ПО ВТ_Юзеры.Ссылка = ПродажаЗапчастей.ОтветственныйКладовщик
		                     |ГДЕ
		                     |	ПродажаЗапчастей.ОтветственныйКладовщик = &ОтветственныйКладовщик
		                     |	И ПродажаЗапчастей.WTpanel В(&Статус)";
		
		Статус = новый массив;
		//Статус.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003"));
		Статус.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004"));
		ЗапросЗадач.УстановитьПараметр("Статус", Статус);
		ЗапросЗадач.УстановитьПараметр("ОтветственныйКладовщик", ВыборкаСотрудников.Пользователь);
		
		//@skip-check query-in-loop
		Выборка = ЗапросЗадач.Выполнить().Выбрать();
		
		
		СтруктураЗадачи = Новый Структура;
		СтруктураЗадачи.Вставить("name",    Строка(ВыборкаСотрудников.Пользователь));
		
		СтруктураЗадачи.Вставить("date", 	    Строка(выборка.Дата));
		СтруктураЗадачи.Вставить("sale_sub_state", Строка(выборка.ПодстатусОбработки)); 
		СтруктураЗадачи.Вставить("code",           Строка(ВыборкаСотрудников.Код));
		СтруктураЗадачи.Вставить("sale_number",     	Строка(выборка.Номер));  	
		СтруктураЗадачи.Вставить("sale_state",   	Строка(выборка.WTpanel));
		СтруктураЗадачи.Вставить("time_in_work",0);
		//@skip-check query-in-loop
		СтруктураЗадачи.Вставить("time_in_work_day",ПолучитьВремяПродажиЗаДень(ВыборкаСотрудников.Пользователь));
		Пока выборка.Следующий() Цикл
			
		СтруктураЗадачи.Вставить("sale_sub_state", Строка(выборка.ПодстатусОбработки)); 
		СтруктураЗадачи.Вставить("code",           Строка(ВыборкаСотрудников.Код));
		СтруктураЗадачи.Вставить("sale_number",     	Строка(выборка.Номер));  	
		СтруктураЗадачи.Вставить("sale_state",   	Строка(выборка.WTpanel));

			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураЗадачи.Вставить("time_in_work",ПолучитьВремяПродажи(выборка.ссылка));
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураЗадачи.Вставить("time_in_work_day",ПолучитьВремяПродажиЗаДень(ВыборкаСотрудников.Пользователь));
			//СтруктураЗадачи.Вставить("id",    	  	   Строка(выборка.Код));
			
			//СтруктураТоваров.Вставить("photos", МассивФото);
			
		КонецЦикла; 
		МассивЗадач.Добавить(СтруктураЗадачи);
	КонецЦикла;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивЗадач);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ОтправитьСМСsendSMS(Запрос)
	
	///+ГомзМА 19.02.2024
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СтруктураОтвета = Новый Структура;
	
	ЗапросПароль = новый Запрос;
	ЗапросПароль.Текст =  "ВЫБРАТЬ
	                      |	СотрудникиКонтактнаяИнформация.Ссылка.Ссылка КАК Ссылка,
	                      |	СотрудникиКонтактнаяИнформация.Ссылка.ПарольДляУК КАК ПарольДляУК,
	                      |	СотрудникиКонтактнаяИнформация.Представление КАК ПредставлениеТелефон
	                      |ИЗ
	                      |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	                      |ГДЕ
	                      |	СотрудникиКонтактнаяИнформация.Представление = &Представление
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СотрудникиКонтактнаяИнформация.Ссылка.Ссылка,
	                      |	СотрудникиКонтактнаяИнформация.Ссылка.ПарольДляУК,
	                      |	СотрудникиКонтактнаяИнформация.Представление";
	
	ЗапросПароль.УстановитьПараметр("Представление", Массив.phonenumber);
	
	Выборка = ЗапросПароль.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		ТекстСообщения = "Ваш пароль: " + Выборка.ПарольДляУК;
		
		НомерТелефона = Выборка.ПредставлениеТелефон;
		
		дт_УведомленияСМС.ОтправитьСМС(НомерТелефона, ТекстСообщения, Константы.дт_SMS_Подпись.Получить());
		
		СтруктураОтвета.Вставить("res", "Сообщение успешно отправлено!");
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
	Иначе
		
		СтруктураОтвета.Вставить("res", "Пользователь с таким номером не найден!");
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Возврат Ответ;
	///-ГомзМА 19.02.2024
	
КонецФункции


Функция ПроверитьQRкодcheckqrcode(Запрос)
	
	///+ГомзМА 21.02.2024
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СтруктураОтвета = Новый Структура;
	
	Если Массив.type = 1 Тогда 
		Значение = "ИндКод";
	ИначеЕсли Массив.type = 2 Тогда
		Значение = "Стеллаж";
	ИначеЕсли Массив.type = 3 Тогда
		Значение = "Поддоны";
	КонецЕсли;
	
	ЗапросПроверка = новый Запрос;
	ЗапросПроверка.Текст = "
	|ВЫБРАТЬ
	|	&Значение.Наименование КАК Наименование
	|ИЗ
	|	Справочник.&Значение КАК &Значение
	|ГДЕ
	|	&Значение.Наименование = &Наименование";
	
	ЗапросПроверка.Текст = СтрЗаменить(ЗапросПроверка.Текст, "&Значение", Значение);
	ЗапросПроверка.УстановитьПараметр("Наименование", Массив.id);
	
	Выборка = ЗапросПроверка.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		СтруктураОтвета.Вставить("res", "true");
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
	Иначе
		
		СтруктураОтвета.Вставить("res", "false");
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Возврат Ответ;
	///-ГомзМА 21.02.2024
	
КонецФункции

#конецОбласти    


//@skip-check org.eclipse.xtext.diagnostics.Diagnostic.Syntax
//@skip-check org.eclipse.xtext.diagnostics.Diagnostic.Syntax
#Область СчетНаОплату
Функция СоздатьСчетcreatecheck(Запрос)
	
	///+ГомзМА 20.11.2023
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	Массив = ПрочитатьJSON(ЧтениеJSON); 
	
	Номерзаявки = Запрос.ПараметрыURL["Num"];
	
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Номерзаявки); 
	Выборка = запросзаявки.Выполнить().Выбрать(); 
	
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		Счет = ПроверкаСчета(Выборка.ссылка); 
		Если Счет.Ссылка = Неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Клиент КАК Клиент,
			|	Док.Комментарий КАК Комментарий,
			|	Док.Проект КАК Проект,
			|	Док.Склад КАК Склад,
			|	Док.Ссылка КАК ЗаказКлиента,
			|	Док.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	Док.НачислятьНДС КАК НачислятьНДС,
			|	Док.Ответственный КАК КтоПродал
			|ПОМЕСТИТЬ втШапка
			|ИЗ
			|	Документ.ЗаказКлиента КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втШапка.Клиент КАК Клиент,
			|	втШапка.Комментарий КАК Комментарий,
			|	втШапка.Проект КАК Проект,
			|	втШапка.Склад КАК Склад,
			|	втШапка.ЗаказКлиента КАК ЗаказКлиента,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	втШапка.КтоПродал КАК КтоПродал
			|ИЗ
			|	втШапка КАК втШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
			|	ЗаказКлиентаТовары.Номенклатура КАК Товар,
			|	ЗаказКлиентаТовары.Количество КАК Количество,
			|	ЗаказКлиентаТовары.Цена КАК Цена,
			|	ЗаказКлиентаТовары.Сумма КАК Сумма,
			|	втШапка.Склад КАК Склад,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,
			|	ЗаказКлиентаТовары.Партия КАК Партия,
			|	втШапка.КтоПродал КАК КтоПродал,
			|	РегистрНакопления1Остатки.машина КАК машина,
			|	РегистрНакопления1Остатки.Склад КАК Склад1
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ втШапка КАК втШапка
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
			|		ПО ЗаказКлиентаТовары.Партия = РегистрНакопления1Остатки.индкод
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка = &Ссылка
			|	И НЕ ЗаказКлиентаТовары.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			Запрос.УстановитьПараметр("Ссылка", Выборка.ссылка);
			
			НовыйСчет = Документы.ПредварительныйСчет.СоздатьДокумент();
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			НовыйСчет.Организация = Справочники.Организация.НайтиПоКоду(Массив.org);  
			НовыйСчет.TipOplati   = Справочники.TipOplati.НайтиПоКоду(Массив.bill);
			НовыйСчет.БезДоговора = Истина; 
			НовыйСчет.Дата        = ТекущаяДата();
			НовыйСчет.Клиент   	  = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки).Клиент;
			НовыйСчет.Основание   = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки);
			//НовыйСчет.Ктопродал   = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки).Ответственный;  
			//НовыйСчет.Самовывоз   = истина; 
			//НовыйСчет.WTPanel   = Справочники.СтатусыWT.НайтиПоНаименованию("Продажа");
			//НовыйСчет.ПодстатусОбработки   = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
			
			//НовыйСчет.СтатусДоставки    = Перечисления.СтатусОтправки.Отправлен;
			//НовыйСчет.ДатаСписания      = ТекущаяДата();  
			//НовыйСчет.ОжидаемаяДатаВыплаты      = ТекущаяДата();
			Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить()[0]);
			
			ЗаполнениеДокументов.Заполнить(НовыйСчет, Шапка, Ложь);
			НовыйСчет.Таблица.Загрузить(РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить()); 
			
			НовыйСчет.Записать();
			
			ТекстЛога =  " Создал счет " + НовыйСчет.номер ; 
			ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
			//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(НоваяПродажа.КтоПродал), Строка(Выборка.Ответственный) + ТекстЛога); 
			
			//ОбъектЗаявки = Выборка.ссылка.получитьОбъект();
			//ОбъектЗаявки.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.ЖдёмДенег; 
			//ОбъектЗаявки.Записать();
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Счет №" + НовыйСчет.номер + " создан");
		Иначе
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Счет уже есть!");
			ТекстЛога =  "Счет уже есть! ";
			////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
		КонецЕсли;
		
	иначе
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такой заявки!"); 
		ТекстЛога =  "Нет такой заявки! ";
		////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
	КонецЕсли;
	возврат Ответ;
	///-ГомзМА 20.11.2023
	
КонецФункции

Функция ПолучитьСчетgetcheck(Запрос)
	
	///+ГомзМА 29.11.2023
	ЗапросСчета = Новый Запрос;
	ЗапросСчета.Текст = ТекстДляСчета();
	ЗапросСчета.УстановитьПараметр("Номер", Запрос.ПараметрыURL["Num"] ); 
	Выборка = ЗапросСчета.Выполнить().Выбрать();
	МассивТоваров = Новый Массив;		
	
	Пока выборка.Следующий() Цикл
		
		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата, , Выборка.БанковскийСчет);
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Клиент, Выборка.Дата);
		Руководитель = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновноеОтветственноеЛицоОрганизации(Выборка.Организация, Выборка.Дата);
		СтавкаНДС = дт_ОбщегоНазначенияВызовСервераПовтИсп.СтавкаНДСПоУмолчанию(Выборка.Дата);
		НомерНаПечать = дт_ПрефиксацияКлиентСервер.НомерНаПечать(Выборка.Номер);
		
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("num",	Строка(НомерНаПечать));
		СтруктураИнфо.Вставить("date",	Строка(Формат(выборка.Дата, "ДФ=dd.MM.yyyy")));
		
		СтруктураИнфо.Вставить("innorganization", 	Строка(СведенияОПоставщике.ИНН));
		СтруктураИнфо.Вставить("kpporganization", 	Строка(СведенияОПоставщике.КПП));
		СтруктураИнфо.Вставить("bank", 				Строка(СведенияОПоставщике.Банк));
		СтруктураИнфо.Вставить("bikbank", 			Строка(СведенияОПоставщике.БИК));
		СтруктураИнфо.Вставить("schetbank", 		Строка(СведенияОПоставщике.КоррСчет));
		СтруктураИнфо.Вставить("schetorganization", Строка(СведенияОПоставщике.НомерСчета));
		
		СтруктураИнфо.Вставить("organization", 	Строка(СведенияОПоставщике.НаименованиеДляПечатныхФорм));
		СтруктураИнфо.Вставить("provider", 		Строка(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны,Email")));
		СтруктураИнфо.Вставить("buyer", 		Строка(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,Email,НомерСчета,Банк,БИК,КоррСчет")));
		СтруктураИнфо.Вставить("director", 		Строка(Руководитель));
		СтруктураИнфо.Вставить("buh", 			Строка(Руководитель));		
		
		ТЗ = выборка.Таблица.Выгрузить(); 
		
		ИтогоСумма = 0;
		Для каждого стр из ТЗ Цикл
			
			ИтогоСумма = ИтогоСумма + стр.сумма;
			
			СтруктураТоваров = Новый Структура;
			СтруктураТоваров.Вставить("name",    Строка(стр.Товар.Артикул + " " + стр.Товар));
			СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
			СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
			СтруктураТоваров.Вставить("count", Строка(стр.Количество));		
			СтруктураТоваров.Вставить("sum",    Строка(стр.Сумма));
			
			МассивТоваров.Добавить(СтруктураТоваров);
		КонецЦикла;
		СтруктураИнфо.Вставить("sum", Строка(Формат(ИтогоСумма, "ЧГ=0")));
		СтруктураИнфо.Вставить("withnds", Строка(Формат(Окр(ИтогоСумма * СтавкаНДС / (100 + СтавкаНДС), 2), "ЧГ=0")));
		СтруктураИнфо.Вставить("allsum", Строка(Формат(ИтогоСумма + ?(Выборка.СуммаВключаетНДС, 0, Окр(ИтогоСумма * СтавкаНДС / (100 + СтавкаНДС), 2)), "ЧГ=0")));
	КонецЦикла;
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 29.11.2023
	
КонецФункции
#КонецОбласти

Функция НаполнитьПродажуfillingsale(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляПродажи();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.indcode;
	
	//	ИндКод  = Массив.id;
	Позиция = Число(Массив.pose);
	Автор 	= Массив.author;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	Отбор = Новый Структура();
	Отбор.Вставить("Товар", Номенклатура);
	Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	
	Пока выборка.Следующий() Цикл		
		ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);
		//Если НайденныеСтроки.количество() > 0 Тогда 
		Если Массив.type = 0 Тогда
			//СтрокаТЧ = ОбъектПродажи.Таблица[НайденныеСтроки[0].НомерСтроки-1]; 
			СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
			СтрокаТЧ.партия = партия; 
			//@skip-check query-in-loop
			СтрокаТЧ.машина = ПолучитьМашину(партия);
			СтрокаТЧ.Склад = ОбъектПродажи.склад; 
			//СтрокаТЧ.СтатусТовара = Истина;
			
			ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " установил партию в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех. Партия установлена для " + строка(СтрокаТЧ.Товар) );
			Возврат Ответ;
		Иначе
			//Если  Не ОбъектПродажи.ЗаблокироватьТЧТовары Тогда
			
			Новаястрока = ОбъектПродажи.Таблица.Добавить();
			Новаястрока.Партия = партия;
			Новаястрока.Товар = Номенклатура; 
			Новаястрока.Количество = 1;
			//@skip-check query-in-loop
			Новаястрока.машина = ПолучитьМашину(партия);
			Новаястрока.СтатусТовара = Истина;
			Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
			Новаястрока.Склад = ОбъектПродажи.склад; 	
			
			ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " добавил партию в товаре " + Новаястрока.Товар + " "+ Новаястрока.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение); 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех. Строка добавлена");
			Возврат Ответ;
			
			//Ответ = Новый HTTPСервисОтвет(400);
			//Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//Ответ.УстановитьТелоИзСтроки("Такой позиции в заказ-нарядде нет или партия уже установлена!");
			//Возврат Ответ;
		КонецЕсли;
		
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не прокатило");
	Возврат Ответ;	
	
	
КонецФункции  

Функция СменаМестаХраненияEditPlace(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	
	Если Массив.type = 1 тогда	
		Ответ = РедактироватьПоддон(Массив.id,Массив.place,Массив.author); 
	Иначе
		Ответ = РедактироватьПолку(Массив.id,Массив.place,Массив.author);  
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ВыдатьПродажуissueasale(Запрос)
	запросПродажи = Новый Запрос;
	запросПродажи.Текст = текстДляПродажи();
	запросПродажи.УстановитьПараметр("Номер",Запрос.ПараметрыURL["id"] ); 
	Выборка = запросПродажи.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	выдано = 0;
	//ИндКод  = Массив.IndCode;
	//Позиция = Число(Массив.Pose); 
	//Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
	
	Пока выборка.Следующий() Цикл
		ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект(); 
		ОбъектПродажи.датаСписания = ТекущаяДата();
		ОбъектПродажи.Записать();
		//ОбъектПродажи.таблица[Позиция-1].Партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);  
		//Для каждого Позиция из массив.pose цикл       
		ОбъектПродажи.таблица[Число(массив.pose)-1].статусТовара = Истина; 
		ОбъектПродажи.таблица[Число(массив.pose)-1].ДатаВыдачи = ТекущаяДата(); 
		ОбъектПродажи.таблица[Число(массив.pose)-1].ОтветственныйЗаВыдачу = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
		Если ОбъектПродажи.таблица[Число(массив.pose)-1].Склад = Справочники.Склады.ПустаяСсылка() или ОбъектПродажи.таблица[Число(массив.pose)-1].Склад = неопределено тогда		
			ОбъектПродажи.таблица[Число(массив.pose)-1].Склад = ОбъектПродажи.склад;
		КонецЕсли;
		//выдано = выдано +1; 
		//	КонецЦикла;
		товары = Выборка.Таблица.Выбрать();
		Пока  товары.Следующий() цикл 
			Если товары.СтатусТовара и НЕ товары.Отменено Тогда
				выдано = 1;	
			КонецЕсли;
			
		КонецЦикла;
		
		
		Если выдано = 0 тогда
			Заказ = Выборка.ЗаказКлиента.ПолучитьОбъект();
			ОбъектПродажи.СтатусОбработки =  Перечисления.СтатусыОбработкиЗаявок.Упаковывается;
			////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада"); 
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(ОбъектПродажи.КтоПродал), "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада");
			ОбъектПродажи.ОтветственныйКладовщик = Справочники.Пользователи.ПустаяСсылка();
			//ОбъектПродажи.записать();  
		конецесли;
		
		
		ТекстЛога =  " В продаже " + ОбъектПродажи.номер + "ц выдал товар " + ОбъектПродажи.таблица[Число(массив.pose)-1].Товар + " "+ ОбъектПродажи.таблица[Число(массив.pose)-1].Партия; 
		ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
		ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	Структураответа = Новый структура;
	Структураответа.Вставить("res","Успех");
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(Структураответа);
	Возврат Ответ;
КонецФункции      

Функция ИзменитьЗаявкуeditgapplication(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);	
	
	состояниеСборки = Справочники.СтатусыWT.НайтиПоНаименованию(Массив.processing);
	Если число(Массив.sub_processing) = 1 тогда 
		подсостояниеСборки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
	Иначеесли число(Массив.sub_processing) = 2 тогда 
		подсостояниеСборки = Перечисления.ПодстатусыОбработкиЗаявок.Выполняется;
	Иначеесли число(Массив.sub_processing) = 3 тогда
		подсостояниеСборки = Перечисления.ПодстатусыОбработкиЗаявок.Готов;
	КонецЕсли;
	
	запросзаявки.УстановитьПараметр("Номер",Массив.id); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
	
	
	Пока выборка.Следующий() Цикл
		ТекстЛога =  " установил статус: " + состояниеСборки; 
		//Если число(Массив.processing) = 1 тогда 
		//	//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001905387489","для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		//КонецЕсли;
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.Ответственный),"для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		ЛогированиеWT10(Выборка.ссылка,Массив.person,ТекстЛога);
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗаявки.WTPanel = состояниеСборки;  
		ОбъектЗаявки.ПодстатусОбработки = подсостояниеСборки;
		
		//Если Массив.person <> Неопределено и Массив.person <> Справочники.Пользователи.ПустаяСсылка() Тогда
		ОбъектЗаявки.ОтветственныйЗаОбработку = Ответственный;
		
		//	КонецЕсли; 
		
		ОбъектЗаявки.Записать();
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции 

Функция НаполнитьЗаявкуfillingapplication(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["id"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.IndCode;
	Позиция = Число(Массив.Pose);
	Пока выборка.Следующий() Цикл
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект(); 
		Если  ОбъектЗаявки.Товары[Позиция-1].Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец Тогда
			ОбъектЗаявки.Товары[Позиция-1].Партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
			ТекстЛога =  " В заявке " + ОбъектЗаявки.номер + " установил партию в товаре " + ОбъектЗаявки.Товары[Позиция-1].Номенклатура + " "+ ОбъектЗаявки.Товары[Позиция-1].Партия; 
			ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
			ОбъектЗаявки.Записать();
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
			
		Иначе
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Не тому товару код шьёшь!");
			Возврат Ответ; 
		КонецЕсли;
	КонецЦикла;
	
	
КонецФункции   

Функция ИзменитьПродажуeditsale(Запрос)
	запроспродажи = Новый Запрос;
	запроспродажи.Текст = текстДляпродажи();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	состояниеСборки = Справочники.СтатусыWT.НайтиПоНаименованию(Массив.processing);
	Если число(Массив.sub_processing) = 1 тогда 
		подсостояниеСборки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
	Иначеесли число(Массив.sub_processing) = 2 тогда 
		подсостояниеСборки = Перечисления.ПодстатусыОбработкиЗаявок.Выполняется;
	Иначеесли число(Массив.sub_processing) = 3 тогда
		подсостояниеСборки = Перечисления.ПодстатусыОбработкиЗаявок.Готов;
	КонецЕсли;
	
	запроспродажи.УстановитьПараметр("Номер",Массив.id); 
	Выборка = запроспродажи.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
	Если ответственный = Неопределено тогда
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	
	
	Пока выборка.Следующий() Цикл
		ТекстЛога =  " установил статус: " + состояниеСборки; 
		ЛогированиеWT10(Выборка.ссылка,Массив.person,ТекстЛога); 
		////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074","для продажи "+ Выборка.номер + " " + Ответственный + ТекстЛога); 
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.КтоПродал),"для продажи "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		
		ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект(); 
		ОбъектПродажи.ОтветственныйКладовщик = Ответственный;
		ОбъектПродажи.WTpanel = состояниеСборки;  
		ОбъектПродажи.ПодстатусОбработки = подсостояниеСборки; 
		Если подсостояниеСборки = Перечисления.ПодстатусыОбработкиЗаявок.Выполняется Тогда
			НачатьОтсчётПродажи(Выборка.ссылка,состояниеСборки,Ответственный);
		Иначе
			//@skip-check query-in-loop
			ЗавершитьОтсчётПродажи(Выборка.ссылка,состояниеСборки,Ответственный);
		КонецЕсли;
		
		ОбъектПродажи.Записать();
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции 

Функция СоздатьПродажуcreatesale(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	Номерзаявки = Массив.id;
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	запросзаявки.УстановитьПараметр("Номер",Номерзаявки); 
	Выборка = запросзаявки.Выполнить().Выбрать(); 
	
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		Продажа = ПроверкаПродаж(Выборка.ссылка); 
		Если Продажа.ссылка = неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Клиент КАК Клиент,
			|	Док.Комментарий КАК Комментарий,
			|	Док.Проект КАК Проект,
			|	Док.Склад КАК Склад,
			|	Док.Ссылка КАК ЗаказКлиента,
			|	Док.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	Док.НачислятьНДС КАК НачислятьНДС,
			|	Док.Ответственный КАК КтоПродал
			|ПОМЕСТИТЬ втШапка
			|ИЗ
			|	Документ.ЗаказКлиента КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втШапка.Клиент КАК Клиент,
			|	втШапка.Комментарий КАК Комментарий,
			|	втШапка.Проект КАК Проект,
			|	втШапка.Склад КАК Склад,
			|	втШапка.ЗаказКлиента КАК ЗаказКлиента,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	втШапка.КтоПродал КАК КтоПродал
			|ИЗ
			|	втШапка КАК втШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
			|	ЗаказКлиентаТовары.Номенклатура КАК Товар,
			|	ЗаказКлиентаТовары.Количество КАК Количество,
			|	ЗаказКлиентаТовары.Цена КАК Цена,
			|	ЗаказКлиентаТовары.Сумма КАК Сумма,
			|	втШапка.Склад КАК Склад,
			|	втШапка.СуммаДокументаНДС КАК СуммаДокументаНДС,
			|	втШапка.НачислятьНДС КАК НачислятьНДС,
			|	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,
			|	ЗаказКлиентаТовары.Партия КАК Партия,
			|	втШапка.КтоПродал КАК КтоПродал,
			|	РегистрНакопления1Остатки.машина КАК машина,
			|	РегистрНакопления1Остатки.Склад КАК Склад1
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ втШапка КАК втШапка
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
			|		ПО ЗаказКлиентаТовары.Партия = РегистрНакопления1Остатки.индкод
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка = &Ссылка
			|	И НЕ ЗаказКлиентаТовары.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			
			Запрос.УстановитьПараметр("Ссылка", Выборка.ссылка); 
			
			объектзаявки = выборка.ссылка.получитьОбъект();
			объектзаявки.Wtpanel = Справочники.СтатусыWT.НайтиПоНаименованию("Продажа");
			объектзаявки.записать();
			НоваяПродажа = Документы.ПродажаЗапчастей.СоздатьДокумент();
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			НоваяПродажа.Организация = Справочники.Организация.НайтиПоКоду(Массив.org);  
			НоваяПродажа.TipOplati   = Справочники.TipOplati.НайтиПоКоду(Массив.bill); 
			НоваяПродажа.ОжидаемаяДатаВыплаты   = Дата(Массив.date);
			
			НоваяПродажа.БезДоговора = Истина; 
			НоваяПродажа.Дата        = ТекущаяДата();
			НоваяПродажа.Ктопродал   = Документы.ЗаказКлиента.НайтиПоНомеру(Номерзаявки).Ответственный;  
			НоваяПродажа.Самовывоз   = истина; 
			НоваяПродажа.СтатусОбработки    = Перечисления.СтатусыОбработкиЗаявок.Обработано; 
			НоваяПродажа.WTpanel    = Справочники.СтатусыWT.НайтиПоНаименованию("Продажа");
			НоваяПродажа.ПодстатусОбработки = Перечисления.ПодстатусыОбработкиЗаявок.Ожидание;
			
			НоваяПродажа.СтатусДоставки    = Перечисления.СтатусОтправки.Отправлен;
			НоваяПродажа.ДатаСписания      = ТекущаяДата();
			Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить()[0]);
			
			ЗаполнениеДокументов.Заполнить(НоваяПродажа, Шапка, Ложь);
			НоваяПродажа.Таблица.Загрузить(РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить()); 
			
			НоваяПродажа.Записать();
			
			ТекстЛога =  " Создал продажу " + НоваяПродажа.номер ; 
			ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
			//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(НоваяПродажа.КтоПродал), Строка(Выборка.Ответственный) + ТекстЛога); 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки(НоваяПродажа.номер);
		Иначе
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Продажа уже есть!");
			ТекстЛога =  "Продажа уже есть! ";
			////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
		КонецЕсли; 
	иначе
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такой заявки!"); 
		ТекстЛога =  "Нет такой заявки! ";
		////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Выборка.Ответственный) + ТекстЛога); 
	КонецЕсли;
	возврат Ответ;
КонецФункции

Функция ОтменитьЗаявкуcancelapplication(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаявки();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);	
	
	запросзаявки.УстановитьПараметр("Номер",Массив.id); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.person).Пользователь;
	
	
	Пока выборка.Следующий() Цикл
		ТекстЛога =  " Отменил " ; 
		//Если число(Массив.processing) = 1 тогда 
		//	//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001905387489","Заявку "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		//КонецЕсли;
		//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.Ответственный),"для заявки "+ Выборка.номер + " " + Ответственный + ТекстЛога);
		ЛогированиеWT10(Выборка.ссылка,Массив.person,ТекстЛога);
		ОбъектЗаявки = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗаявки.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Отказ;
		//	Если Массив.person <> Неопределено и Массив.person <> Справочники.Пользователи.ПустаяСсылка() Тогда
		ОбъектЗаявки.ОтветственныйЗаОбработку = Ответственный;
		
		//КонецЕсли; 
		
		ОбъектЗаявки.Записать();
	КонецЦикла;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции 

Функция ПеремещениеПолкиmoveshelf(Запрос)
	
	///+ГомзМА 12.12.2023
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	Автор = массив.author;
	Если Справочники.Поддоны.НайтиПоНаименованию(Массив.pallet) = Справочники.Поддоны.ПустаяСсылка() Тогда   
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Поддон не корректен!");
		Возврат Ответ;		
	КонецЕсли;
	//поменять стеллаж у индномеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.Поддон КАК Поддон,
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.Поддон = &Поддон";
	
	Если   Справочники.Поддоны.НайтиПоНаименованию(Массив.pallet) <> Справочники.Поддоны.ПустаяСсылка() Тогда
		Запрос.УстановитьПараметр("Поддон", Справочники.Поддоны.НайтиПоНаименованию(Массив.pallet)); 
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Поддон не корректен!");
		Возврат Ответ;	
	КонецЕсли; 
	
	Если Справочники.Стеллаж.НайтиПоНаименованию(Массив.shelf) = Справочники.Стеллаж.ПустаяСсылка() Тогда   
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Полка не корректна!");
		Возврат Ответ;		
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.индкод 	= РезультатЗапроса.индкод;
			ЗаписьВРегистреСведений.Прочитать();
			Если ЗаписьВРегистреСведений.Выбран() Тогда 
				
				Лог = "Сменил полку с " + РезультатЗапроса.Стеллаж + " на "+ Массив.shelf;
				ЛогированиеИндНомера(Строка(РезультатЗапроса.индкод),Автор,Лог,Массив.shelf,,РезультатЗапроса.Стеллаж); 
				
				ЗаписьВРегистреСведений.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Массив.shelf);
				ЗаписьВРегистреСведений.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	//поменять стеллаж у поддона
	СправочникПоддонОбъект = Справочники.Поддоны.НайтиПоНаименованию(Массив.pallet).ПолучитьОбъект();
	СправочникПоддонОбъект.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Массив.shelf);

	СправочникПоддонОбъект.Записать();
		//+Сергеев 13/03/2024
	Событие = "Сменил стеллаж на: " + СправочникПоддонОбъект.Стеллаж ;
	ЗаписьЛогаподдона(Событие,СправочникПоддонОбъект,Автор);
	//-Сергеев 13/03/2024
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Поддон успешно перемещен на полку " + Массив.shelf);
	Возврат Ответ;
	///-ГомзМА 12.12.2023
	
КонецФункции

Функция ДобавитьТрекНомерВПродажуaddtracknumber(Запрос)
	
	///+ГомзМА 15.12.2023
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	ЗапросПродажаТК = Новый Запрос;
	ЗапросПродажаТК.Текст = текстДляПродажи();
	
	ЗапросПродажаТК.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id"] ); 
	
	РезультатЗапроса = ЗапросПродажаТК.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			ДокументОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ТрекНомер = Массив.track_number;
			ДокументОбъект.ЕстьТрекНомер = Истина;
			ДокументОбъект.Записать();
			
			ИнтеграцияAPIТранспортныеКомпанииВызовСервера.УзнатьСтатусДоставки(Массив.track_number, РезультатЗапроса.ТранспортнаяКомпания);
		КонецЦикла;
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Трек-номер успешно записан в продажу и получена информация по отслеживанию");
		
	Иначе
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Продажа не найдена!");
	КонецЕсли;
	
	Возврат Ответ;
	///-ГомзМА 15.12.2023
	
КонецФункции

Функция ИзменитьГабаритыТовараSetProductSize(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	
	ОбъектКарточкиТовара = Справочники.ИндКод.НайтиПоНаименованию(Запрос.ПараметрыURL["id"]).Владелец.ПолучитьОбъект();
	
	//ТекстЛога = " Переименовал деталь " + ОбъектКарточкиТовара.Наименование + " на" + Массив.Name; 
	//ЛогированиеWT10(ОбъектКарточкиТовара,Массив.author,ТекстЛога);
	
	//	ОбъектКарточкиТовара.Наименование = Массив.Name;  
	ОбъектКарточкиТовара.длин = Массив.length;
	ОбъектКарточкиТовара.шир  = Массив.width;
	ОбъектКарточкиТовара.выс  = Массив.height;  
	ОбъектКарточкиТовара.вес  = Массив.weight;
	Если Массив.length > 0 и Массив.width > 0 и Массив.height > 0 Тогда
		ОбъектКарточкиТовара.Размеры  = истина; 
	КонецЕсли;
	ОбъектКарточкиТовара.ДатаУстановкиРазмеров = ТекущаяДата();
	ОбъектКарточкиТовара.объем  = Массив.length*Массив.width*Массив.height;
	
	
	ОбъектКарточкиТовара.Записать();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции

Функция ПолучитьМесто(Партия) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод",Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.стеллаж;
КонецФункции

Функция получитьНомерТелефона(Юзер)
	
	Запрос = Новый запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|	И СотрудникиКонтактнаяИнформация.Ссылка.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь",Юзер);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 тогда
		Выборка.Следующий();
		возврат выборка.ТелефонСлужебный;
	Иначе Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМенеджера(Код)
	Возврат Справочники.Пользователи.НайтиПоКоду(Код);
КонецФункции

Функция ПолучениеФото(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245",8085);
		
		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);	
		ЗапросСтруктура = Новый Структура();
		
		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON();
		ПотокJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		
		МассивПустыхФото = новый массив; 
		
		Для каждого стр из ИндКод Цикл 
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);
			
		КонецЦикла;
		
		Возврат МассивПустыхФото;
	КонецПопытки;
	
КонецФункции


Функция ПолучитьФотографа(ИндКод)
	
	///+ГомзМА 21.02.2024 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", 8085);
		
		СтрокаЗапроса = "v1/product/" + ИндКод + "/last_date/tabnum";
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		//Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		Ответ = Соединение.Получить(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		Возврат Неопределено;
	КонецПопытки;
	///-ГомзМА 21.02.2024
	
КонецФункции


Функция ПолучениеФотоДляТелеги(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245",8085);
		
		СтрокаЗапроса = "/v1/images?type=outlinks&ind_code="+ИндКод;
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("indCode", ИндКод);
		//
		//
		//// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		
		МассивПустыхФото = новый массив; 
		
		Для каждого стр из ИндКод Цикл 
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);
			
		КонецЦикла;
		
		Возврат МассивПустыхФото;
	КонецПопытки;
	
КонецФункции

Процедура ЛогированиеWT10(Заявка,Автор,Лог)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогWT10.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.Источник = Заявка; 
	МенеджерЗаписиЛога.Пользователь = Автор;
	МенеджерЗаписиЛога.Лог = "--------------------------" + Символы.ПС + Автор + Лог;
	МенеджерЗаписиЛога.Записать();	
КонецПроцедуры    

Процедура ЛогированиеИндНомера(индкод,Автор,Лог,Стеллажж = неопределено,Поддон = неопределено,ПредСтеллаж = неопределено,ПредПоддон = неопределено)
	Авторец = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогИндНомера.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.индкод = Справочники.ИндКод.НайтиПоНаименованию(индкод); 
	МенеджерЗаписиЛога.дата = ТекущаяДата();
	МенеджерЗаписиЛога.период = ТекущаяДата();
	Если  Поддон <> неопределено  Тогда  
		//Поддон = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.Поддон  = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон; 
	КонецЕсли;  
	
	Если  Стеллажж <> неопределено Тогда  
		//Стеллажж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.ПредыдущийСтеллаж = ПредСтеллаж;
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;  
	
	МенеджерЗаписиЛога.Ответственный = Авторец;
	МенеджерЗаписиЛога.Текст = "--------------------------" + Символы.ПС + Авторец + Лог;
	МенеджерЗаписиЛога.Записать();	
КонецПроцедуры 

Функция пользТелеги(Автор)
	Запрос =новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Telegram_Пользователи.ID_Пользователя КАК ID_Пользователя
	|ИЗ
	|	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
	|ГДЕ
	|	Telegram_Пользователи.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь",Автор);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат выборка.ID_Пользователя;
Конецфункции

Функция ПолучитьФинансыgetfin(Запрос) 
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗаявкаНаРасход.ДатаОплаты, ДЕНЬ) КАК ДатаЗаявкиНаРасход,
	|	СУММА(ЗаявкаНаРасход.СуммаДокумента) КАК СуммаЗаявкиНаРасход
	|ИЗ
	|	Документ.ЗаявкаНаРасход КАК ЗаявкаНаРасход
	|ГДЕ
	|	ЗаявкаНаРасход.ДатаОплаты МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаявкаНаРасход.Согласовал <> ЗНАЧЕНИЕ(Справочник.пользователи.Пустаяссылка)
	|	И ЗаявкаНаРасход.Статус <> ЗНАЧЕНИЕ(Перечисление.дт_СтатусыЗаявокНаРасход.Отклонено)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЗаявкаНаРасход.ДатаОплаты, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаявкиНаРасход"; 
	
	//Если массив.datestart <> неопределено и массив.dateend <> неопределено тогда
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(Дата(массив.datestart)));	
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Дата(массив.dateend)));	
	//КонецЕсли;
	
	ВыборкаЗаявокНаРасход = Запрос.Выполнить().Выбрать();
	
	
	МассивЗаявокНаРасход = Новый массив;
	Пока  ВыборкаЗаявокНаРасход.Следующий() Цикл
		СтруктураЗаявок = новый Структура;
		СтруктураЗаявок.Вставить("sum",Строка(ВыборкаЗаявокНаРасход.СуммаЗаявкиНаРасход));
		СтруктураЗаявок.Вставить("date",Строка(ВыборкаЗаявокНаРасход.ДатаЗаявкиНаРасход)); 
		
		МассивЗаявокНаРасход.Добавить(СтруктураЗаявок);
	КонецЦикла;
	
	
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БалансОстаткиИОбороты.ПериодДень КАК ДатаРасхода,
	|	СУММА(БалансОстаткиИОбороты.БалансРасход) КАК Сумма
	|ИЗ
	|	РегистрНакопления.Баланс.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, , ) КАК БалансОстаткиИОбороты
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(БалансОстаткиИОбороты.Регистратор) = ТИП(Документ.Расходы)
	|			ИЛИ ТИПЗНАЧЕНИЯ(БалансОстаткиИОбороты.Регистратор) = ТИП(Документ.ЛичныйВывод))
	|
	|СГРУППИРОВАТЬ ПО
	|	БалансОстаткиИОбороты.ПериодДень
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРасхода";
	
	//Если  массив.datestart <> неопределено и массив.dateend <> неопределено тогда
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(Дата(массив.datestart)));	
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Дата(массив.dateend)));	
	//КонецЕсли;
	
	ВыборкаРасходов = Запрос.Выполнить().Выбрать();
	
	
	МассивРасходов = Новый массив;
	Пока  ВыборкаРасходов.Следующий() Цикл
		СтруктураРасходов = новый Структура;
		СтруктураРасходов.Вставить("sum",Строка(ВыборкаРасходов.Сумма));
		СтруктураРасходов.Вставить("date",Строка(ВыборкаРасходов.ДатаРасхода)); 
		
		МассивРасходов.Добавить(СтруктураРасходов);
	КонецЦикла;
	
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БалансОстаткиИОбороты.ПериодДень КАК датаПрихода,
	|	СУММА(БалансОстаткиИОбороты.БалансПриход) КАК Сумма
	|ИЗ
	|	РегистрНакопления.Баланс.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, , ) КАК БалансОстаткиИОбороты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(БалансОстаткиИОбороты.Регистратор) = ТИП(Документ.ПриходДенегНаСчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	БалансОстаткиИОбороты.ПериодДень
	|
	|УПОРЯДОЧИТЬ ПО
	|	датаПрихода";
	
	//Если  массив.datestart <> неопределено и массив.dateend <> неопределено тогда
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(Дата(массив.datestart)));	
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Дата(массив.dateend)));	
	//КонецЕсли; 
	
	ВыборкаПоступленийДенег = Запрос.Выполнить().Выбрать();
	
	
	МассивПоступленийДенег = Новый массив;
	Пока  ВыборкаПоступленийДенег.Следующий() Цикл
		СтруктураПоступленийДенег = новый Структура;
		СтруктураПоступленийДенег.Вставить("sum",Строка(ВыборкаПоступленийДенег.Сумма));
		СтруктураПоступленийДенег.Вставить("date",Строка(ВыборкаПоступленийДенег.ДатаПрихода)); 
		
		МассивПоступленийДенег.Добавить(СтруктураПоступленийДенег);
	КонецЦикла;
	
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПродажаЗапчастей.ОжидаемаяДатаВыплаты, ДЕНЬ) КАК ОжидаемаяДатаВыплаты,
	|	СУММА(ПродажаЗапчастей.ИтогоРекв - ЕСТЬNULL(Оплаты.Сумма, 0)) КАК ИтогоРекв
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Оплаты.Документ КАК Документ,
	|			СУММА(Оплаты.Сумма) КАК Сумма
	|		ИЗ
	|			(ВЫБРАТЬ
	|				БаланПоНакладнойОстатки.Измерение1 КАК Документ,
	|				БаланПоНакладнойОстатки.СуммаОстаток КАК Сумма
	|			ИЗ
	|				РегистрНакопления.БаланПоНакладной.Остатки КАК БаланПоНакладнойОстатки
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ОплатыПоСделкамОбороты.Документ,
	|				ОплатыПоСделкамОбороты.СуммаОборот
	|			ИЗ
	|				РегистрНакопления.ОплатыПоСделкам.Обороты КАК ОплатыПоСделкамОбороты) КАК Оплаты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Оплаты.Документ) КАК Оплаты
	|		ПО ПродажаЗапчастей.Ссылка = Оплаты.Документ
	|ГДЕ
	|	ПродажаЗапчастей.ОжидаемаяДатаВыплаты МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПродажаЗапчастей.ОжидаемаяДатаВыплаты, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОжидаемаяДатаВыплаты";
	
	//	Если  массив.datestart <> неопределено и массив.dateend <> неопределено тогда
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(Дата(массив.datestart)));	
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Дата(массив.dateend)));	
	//КонецЕсли;
	
	ВыборкаПродаж = Запрос.Выполнить().Выбрать();
	
	
	МассивПродаж = Новый массив;
	Пока  ВыборкаПродаж.Следующий() Цикл
		СтруктураПродаж = новый Структура;
		СтруктураПродаж.Вставить("sum",Строка(ВыборкаПродаж.ИтогоРекв));
		СтруктураПродаж.Вставить("date",Строка(ВыборкаПродаж.ОжидаемаяДатаВыплаты)); 
		
		МассивПродаж.Добавить(СтруктураПродаж);
	КонецЦикла;
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("rasplan",МассивЗаявокНаРасход);
	СтруктураОтвета.Вставить("rasfact",МассивРасходов);
	СтруктураОтвета.Вставить("prihplan",МассивПродаж);
	СтруктураОтвета.Вставить("prihfact",МассивПоступленийДенег);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция ЕстьНаКСкладе(Номенклатура) 
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""%K-%""
	|			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО ""%К-%"")
	|	И ИндНомер.индкод.Владелец = &Владелец
	|	И РегистрНакопления1Остатки.КолвоОстаток > 0";
	
	Запрос.УстановитьПараметр("Владелец",Номенклатура);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
	
	
КонецФункции

Функция ПроверкаПродаж(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	ПродажаЗапчастей.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.ЗаказКлиента = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента",Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;
	
КонецФункции

Функция ПроверкаСчета(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	ПредварительныйСчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПредварительныйСчет КАК ПредварительныйСчет
	|ГДЕ
	|	ПредварительныйСчет.Основание = &ЗаказКлиента";
	Запрос.УстановитьПараметр("ЗаказКлиента",Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;
	
КонецФункции

Функция ЕстьНаПолкеРВРВ(Номенклатура)  
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""K-2-11-1"")
	|	И ИндНомер.индкод.Владелец = &Владелец
	|	И РегистрНакопления1Остатки.КолвоОстаток > 0";
	
	Запрос.УстановитьПараметр("Владелец",Номенклатура);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе 
		Возврат 0;
	КонецЕсли;	
КонецФункции

Функция РедактироватьПолку(индкод,Место=неопределено,Автор)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.Код КАК Код,
	|	ИндНомер.Стеллаж КАК Стеллаж,
	|	ИндНомер.Комментарий КАК Комментарий,
	|	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
	|	ИндНомер.Модель КАК Модель,
	|	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
	|	ИндНомер.Ответственный КАК Ответственный,
	|	ИндНомер.ЕстьФото КАК ЕстьФото,
	|	ИндНомер.Комментарий КАК Комментарий1,
	|	ИндНомер.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Код"; 
	запрос.УстановитьПараметр("Код", индкод); 
	
	выборка = Запрос.Выполнить().Выбрать(); 
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;	
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать(); 
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
		
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		
		///+ГомзМА 31.01.2024
		Если СтрНайти(НаборЗаписей[0].Стеллаж, "Korzina") > 0 И СтрНайти(Место, "Korzina") > 0 Тогда
			Ответ = Новый HTTPСервисОтвет(415);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Невозможно переместить в корзину. Деталь находится у другого пользователя в " + НаборЗаписей[0].Стеллаж);
			Возврат ответ;
		Иначе
			НовыйНомер = НаборЗаписей[0]; 
			Полка = Справочники.Стеллаж.НайтиПоНаименованию(место); 
			Если Полка <> Справочники.Стеллаж.ПустаяСсылка() Тогда  	
				Лог =  " сменил полку с " + НовыйНомер.Стеллаж +" на " + Полка; 
				ЛогированиеИндНомера(НовыйНомер.индкод,Автор,Лог,Полка,,НовыйНомер.Стеллаж, НовыйНомер.Поддон);
				НовыйНомер.Стеллаж = Полка;
				НовыйНомер.Поддон = Справочники.Поддоны.ПустаяСсылка();
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех"); 
				Если СтрНайти(Место,"Korzina") > 0 тогда 
					Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
					ТекстЛога = " Поместил в корзину " +  Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Тележка", Полка)) +" "+Строка(Выборка.индкод.Владелец) + " с кодом "+ индкод;
					//ИндКоды = Новый массив;
					//ИндКоды.Добавить(индкод);
					Фотки = ПолучениеФотоДляТелеги(индкод);
					НайденныеФотки = Фотки[0].urls;
					//ТекстЛога = ТекстЛога + Символы.ПС + НайденныеФотки[0];
					Попытка
						Telegram_Сервер. ОтправитьКартинкуПользователю("-1001874958074",НайденныеФотки[0]);
					Исключение
					КонецПопытки;
					
					Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074",   Строка(Автор) + ТекстЛога);
					
					
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЕсли;
			Возврат ответ;
		КонецЕсли;
		///-ГомзМА 31.01.2024
		
	Иначе
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Полка не найдена"); 
		Возврат ответ;
		
	КонецЕсли;
	
	
	
	НаборЗаписей.Записать();
	Возврат ответ;
	
КонецФункции 

Функция РедактироватьПоддон(индкод,Место=неопределено,автор)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.Код КАК Код,
	|	ИндНомер.Стеллаж КАК Стеллаж,
	|	ИндНомер.Комментарий КАК Комментарий,
	|	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
	|	ИндНомер.Модель КАК Модель,
	|	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
	|	ИндНомер.Ответственный КАК Ответственный,
	|	ИндНомер.ЕстьФото КАК ЕстьФото,
	|	ИндНомер.Комментарий КАК Комментарий1,
	|	ИндНомер.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Код"; 
	запрос.УстановитьПараметр("Код", индкод);
	выборка = Запрос.Выполнить().Выбрать(); 
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;	
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать(); 
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");	
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		
		НовыйНомер = НаборЗаписей[0]; 
		Поддон = Справочники.Поддоны.НайтиПоНаименованию(место);
		Если Поддон <> Справочники.Поддоны.ПустаяСсылка() Тогда  	
			Лог =  " сменил поддон с " + НовыйНомер.поддон +" на " + Поддон; 
			
			ЛогированиеИндНомера(Строка(НовыйНомер.индкод),Автор,Лог,Строка(Поддон.Стеллаж),Поддон,НовыйНомер.Стеллаж,НовыйНомер.поддон);
			
			НовыйНомер.поддон = Поддон; 
			НовыйНомер.Стеллаж = Поддон.Стеллаж;
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
		Иначе
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Поддон не найден");
		КонецЕсли;
	КонецЕсли; 
	
	НаборЗаписей.Записать();
	Возврат ответ;
	
КонецФункции

Функция ПолучитьРолиПользователя(Сотрудник)
	
	///+ГомзМА 15.12.2023
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиРолиWT10.Роль КАК Роль
	|ИЗ
	|	Справочник.Сотрудники.РолиWT10 КАК СотрудникиРолиWT10
	|ГДЕ
	|	СотрудникиРолиWT10.Ссылка.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		МассивРолей = Новый Массив;
		Пока РезультатЗапроса.Следующий() Цикл
			МассивРолей.Добавить(РезультатЗапроса.Роль);
		КонецЦикла;
		Результат = МассивРолей;
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 15.12.2023
	
КонецФункции // ПолучитьРолиПользователя(Пользователь)

Функция ПолучитьПоддон(Партия) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.поддон КАК поддон
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод",Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.поддон;
КонецФункции

Функция ПолучитьДокументСписания(user)
	Запрос = новый  Запрос;
	Запрос.Текст =   "ВЫБРАТЬ
	|	СписаниеЗапчастейТовары.Ссылка КАК Ссылка,
	|	СУММА(СписаниеЗапчастейТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.СписаниеЗапчастей.Товары КАК СписаниеЗапчастейТовары
	|ГДЕ
	|	СписаниеЗапчастейТовары.Ссылка.Ответственный = &Ответственный
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗапчастейТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеЗапчастейТовары.Ссылка.Дата УБЫВ";  
	
	Запрос.УстановитьПараметр("Ответственный",user);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		выборка.Следующий();
		Если Выборка.Количество < 100 Тогда
			Возврат Выборка.ссылка; 
		Иначе  
			возврат неопределено;
		КонецЕсли;
		
	Иначе 
		возврат неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьМашину(ИндКодДетали)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегистрНакопления1.машина КАК машина
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1
	|ГДЕ
	|	РегистрНакопления1.индкод = &индкод";
	Запрос.УстановитьПараметр("ИндКод",ИндКодДетали);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат выборка.машина;
КонецФункции

Функция ПолучитьСписание(Ответственный)
	Запрос = новый  Запрос;
	Запрос.Текст =   "ВЫБРАТЬ
	|	СписаниеЗапчастейТаблица.Ссылка КАК Ссылка,
	|	СУММА(СписаниеЗапчастейТаблица.Количество) КАК товар
	|ИЗ
	|	Документ.СписаниеЗапчастей.Товары КАК СписаниеЗапчастейТаблица
	|ГДЕ
	|	 СписаниеЗапчастейТаблица.Ссылка.Ответственный = &Ответственный
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗапчастейТаблица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеЗапчастейТаблица.Ссылка.Дата УБЫВ";
	Запрос.УстановитьПараметр("Ответственный",Ответственный);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		выборка.Следующий();
		Если Выборка.товар < 100 Тогда
			Возврат Выборка.ссылка; 
		Иначе  
			возврат неопределено;
		КонецЕсли;
		
	Иначе 
		возврат неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьСтруктуруТоваров(Номер)  
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыТовараВЗаказНаряде.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Статусы
	|ИЗ
	|	Перечисление.СтатусыТовараВЗаказНаряде КАК СтатусыТовараВЗаказНаряде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЗаказНарядТовары.НомерСтроки) КАК КоличествоСтрок,
	|	ЗаказНарядТовары.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТ_Условие
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|ГДЕ
	|	ЗаказНарядТовары.Ссылка.Номер = &Номер
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Статусы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ВТ_Условие.КоличествоСтрок, 0) КАК КоличествоСтрок
	|ИЗ
	|	ВТ_Статусы КАК ВТ_Статусы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Условие КАК ВТ_Условие
	|		ПО ВТ_Статусы.Ссылка = ВТ_Условие.Состояние";
	Запрос.УстановитьПараметр("Номер",Номер);
	Выборка = Запрос.Выполнить().Выбрать(); 
	массивТоваров = Новый массив;
	пока Выборка.Следующий() цикл
		СтруктураСтатусов = Новый Структура;
		СтруктураСтатусов.Вставить("state",Строка(Выборка.Ссылка));
		СтруктураСтатусов.Вставить("count",Строка(Выборка.КоличествоСтрок));
		массивТоваров.Добавить(СтруктураСтатусов);
	КонецЦикла;
	Возврат массивТоваров;	
КонецФункции

Функция ПолучитьПотеряшкиgetlost(Запрос)  
	НачалоОтбора = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	КонецОтбора  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	ЗапросТоваров = Новый запрос;
	ЗапросТоваров.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК индкод
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|ГДЕ
	|	ЛогИндНомера.Поддон = &Поддон
	|	И ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания";
	ЗапросТоваров.УстановитьПараметр("Поддон",Справочники.Поддоны.НайтиПоКоду("000000003"));
	ЗапросТоваров.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросТоваров.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	Выборка = ЗапросТоваров.Выполнить().Выбрать(); 
	
	
	СтруктураСтатусов = Новый Структура;
	
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		СтруктураСтатусов.Вставить("count",Выборка.индкод);	
	иначе
		СтруктураСтатусов.Вставить("count", 0);	
	КонецЕсли;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураСтатусов);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;	
КонецФункции


Функция ПолучитьПотеряшкиОбщgetlostall(Запрос)  
	
	///+ГомзМА 04.03.2024
	НачалоОтбора = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	КонецОтбора  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	
	///+ГомзМА 05.03.2024
	Если Число(Запрос.ПараметрыURL["city"]) = 1 Тогда //Все
		МассивСкладов = ПолучитьСклады(Неопределено);
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 2 Тогда //Нижний Новгород
		Область = Справочники.Область.НайтиПоКоду("000000052");
		МассивСкладов = ПолучитьСклады(Область);
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 3 Тогда //Екатеринбург
		Область = Справочники.Область.НайтиПоКоду("000000066");
		МассивСкладов = ПолучитьСклады(Область);
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 4 Тогда //Москва
		Область = Справочники.Область.НайтиПоКоду("000000077");
		МассивСкладов = ПолучитьСклады(Область);
	КонецЕсли;		
	///-ГомзМА 05.03.2024
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Фурсов Алексей Владимирович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Демаев Роман Юрьевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Демин Алексей Сергеевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Миронов Антон Николаевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Наумов Николай Борисович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Ражев Александр Викторович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Козин Иван Васильевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Куколкин Вадим Дмитриевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Чупанов Сергей Иванович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Чупанова Екатерина Владимировна"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Алексеев Денис Романович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Ильин Николай Александрович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Гафаров Александр Анатольевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Мустафаев Самир Ровсен Оглы"));
	
	//Получить общее число потерянных и найденных запчастей за период
	ЗапросТоваров = Новый запрос;
	ЗапросТоваров.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК Потери,
	|	СУММА(ИндНомер.Цена) КАК СуммаПотери
	|ПОМЕСТИТЬ ВТ_Потери
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.Поддон = &Поддон
	|	И ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Поддон.Стеллаж.Владелец В(&Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК Нашли,
	|	СУММА(ИндНомер.Цена) КАК СуммаНашли
	|ПОМЕСТИТЬ ВТ_Нашли
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.ПредыдущийПоддон = &Поддон
	|	И ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.ПредыдущийПоддон.Стеллаж.Владелец В(&Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потери.Потери КАК Потерянные,
	|	ВТ_Нашли.Нашли КАК Найденные,
	|	ВТ_Нашли.СуммаНашли КАК СуммаНашли,
	|	ВТ_Потери.СуммаПотери КАК СуммаПотери
	|ИЗ
	|	ВТ_Потери КАК ВТ_Потери,
	|	ВТ_Нашли КАК ВТ_Нашли";
	
	ЗапросТоваров.УстановитьПараметр("Поддон",			Справочники.Поддоны.НайтиПоКоду("000000003"));
	ЗапросТоваров.УстановитьПараметр("Датаначала",		НачалоОтбора);
	ЗапросТоваров.УстановитьПараметр("ДатаОкончания",	КонецОтбора);
	ЗапросТоваров.УстановитьПараметр("Склад", 			МассивСкладов);
	
	Выборка = ЗапросТоваров.Выполнить().Выбрать(); 
	
	СтруктураСтатусов = Новый Структура;
	
	МассивСтатусов = Новый Массив;
	ОбщиеНайденные = 0;
	ОбщиеПотерянные = 0;
	ОбщиеСуммаНашли = 0;
	ОбщиеСуммаПотери = 0;
	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураСтатусов = Новый Структура;
			//СтруктураСтатусов.Вставить("date",Строка(Выборка.Дата));	
			СтруктураСтатусов.Вставить("lost",			Выборка.Потерянные);
			СтруктураСтатусов.Вставить("lost_money", 	Выборка.СуммаПотери);
			СтруктураСтатусов.Вставить("find",			Выборка.Найденные);
			СтруктураСтатусов.Вставить("find_money", 	Выборка.СуммаНашли);
			
			Если Выборка.Потерянные > 0 тогда
				ОбщиеПотерянные = ОбщиеПотерянные + Выборка.Потерянные;
				ОбщиеСуммаПотери = ОбщиеСуммаПотери + Выборка.СуммаПотери;
			КонецЕсли;
			
			Если Выборка.Найденные > 0 тогда
				ОбщиеНайденные = ОбщиеНайденные + Выборка.Найденные;	
				ОбщиеСуммаНашли = ОбщиеСуммаНашли + Выборка.СуммаНашли;
			КонецЕсли;
			
			МассивСтатусов.Добавить(СтруктураСтатусов);
		КонецЦикла;
	иначе
		СтруктураСтатусов.Вставить("count", 0);	
		МассивСтатусов.Добавить(СтруктураСтатусов);
	КонецЕсли;
	
	//Получить потеренные детали по сотрудникам за период
	МассивКоличествоПоСотрудникуПотери = Новый Массив;
	ЗапросКоличествоПоСотруднику = Новый Запрос;
	ЗапросКоличествоПоСотруднику.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК Потери,
	|	ЛогИндНомера.Ответственный КАК ОтветственныйПотери,
	|	СУММА(ИндНомер.Цена) КАК СуммаПотери
	|ПОМЕСТИТЬ ВТ_Потери
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.Поддон = &Поддон
	|	И ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Ответственный В(&Сотрудники)
	|	И ЛогИндНомера.Поддон.Стеллаж.Владелец В(&Склад)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потери.Потери КАК Потерянные,
	|	ВТ_Потери.ОтветственныйПотери КАК ОтветственныйПотери,
	|	ВТ_Потери.СуммаПотери КАК СуммаПотери
	|ИЗ
	|	ВТ_Потери КАК ВТ_Потери";
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Поддон",		 Справочники.Поддоны.НайтиПоКоду("000000003"));
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Датаначала",	 НачалоОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("ДатаОкончания", КонецОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Склад", 		 МассивСкладов);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Сотрудники", 	 МассивСотрудников);
	
	Выборка = ЗапросКоличествоПоСотруднику.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураКоличествоПоСотрудникуПотери = Новый Структура;
			СтруктураКоличествоПоСотрудникуПотери.Вставить("count", 	Выборка.Потерянные);
			СтруктураКоличествоПоСотрудникуПотери.Вставить("money", 	Выборка.СуммаПотери);
			СтруктураКоличествоПоСотрудникуПотери.Вставить("person", 	Строка(Выборка.ОтветственныйПотери));
			
			МассивКоличествоПоСотрудникуПотери.Добавить(СтруктураКоличествоПоСотрудникуПотери);
		КонецЦикла;
	КонецЕсли;
	
	//Получить найденные детали по сотрудникам за период
	МассивКоличествоПоСотрудникуНашли = Новый Массив;
	ЗапросКоличествоПоСотруднику = Новый Запрос;
	ЗапросКоличествоПоСотруднику.Текст = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК Нашли,
	|	ЛогИндНомера.Ответственный КАК ОтветственныйНашли,
	|	СУММА(ИндНомер.Цена) КАК СуммаНашли
	|ПОМЕСТИТЬ ВТ_Нашли
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.ПредыдущийПоддон = &Поддон
	|	И ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Ответственный В(&Сотрудники)
	|	И ЛогИндНомера.ПредыдущийПоддон.Стеллаж.Владелец В(&Склад)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Нашли.Нашли КАК Найденные,
	|	ВТ_Нашли.СуммаНашли КАК СуммаНашли,
	|	ВТ_Нашли.ОтветственныйНашли КАК ОтветственныйНашли
	|ИЗ
	|	ВТ_Нашли КАК ВТ_Нашли";
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Поддон",		 Справочники.Поддоны.НайтиПоКоду("000000003"));
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Датаначала",	 НачалоОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("ДатаОкончания", КонецОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Склад",  		 МассивСкладов);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Сотрудники", 	 МассивСотрудников);
	
	Выборка = ЗапросКоличествоПоСотруднику.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураКоличествоПоСотрудникуНашли = Новый Структура;
			
			СтруктураКоличествоПоСотрудникуНашли.Вставить("count", Выборка.Найденные);
			СтруктураКоличествоПоСотрудникуНашли.Вставить("money", Выборка.СуммаНашли);
			СтруктураКоличествоПоСотрудникуНашли.Вставить("person", Строка(Выборка.ОтветственныйНашли));
			
			МассивКоличествоПоСотрудникуНашли.Добавить(СтруктураКоличествоПоСотрудникуНашли);
		КонецЦикла;
	КонецЕсли;
	///-ГомзМА 01.03.2024
	///-ГомзМА 04.03.2024
	
	СтруктураСтатусовобщ = Новый структура;	
	СтруктураСтатусовобщ.Вставить("lost",			ОбщиеПотерянные);
	СтруктураСтатусовобщ.Вставить("lost_money",		ОбщиеСуммаПотери);
	СтруктураСтатусовобщ.Вставить("lost_person", 	МассивКоличествоПоСотрудникуПотери);
	СтруктураСтатусовобщ.Вставить("find",			ОбщиеНайденные);
	СтруктураСтатусовобщ.Вставить("find_money",		ОбщиеСуммаНашли);
	СтруктураСтатусовобщ.Вставить("find_person", 	МассивКоличествоПоСотрудникуНашли);
	массивОтвета = Новый массив;
	массивОтвета.Добавить(СтруктураСтатусовобщ);
	массивОтвета.Добавить(МассивСтатусов);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураСтатусовобщ);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;	
КонецФункции




 //Функция СписатьДетальDeleteProduct(Запрос)
Функция СписатьДетальDeleteProduct(Запрос)
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	ИндКод        = Справочники.ИндКод.НайтиПоНаименованию(Массив.id);
	Товар         = ИндКод.Владелец;
	Машина        = ПолучитьМашину(ИндКод);
	Комментарий   = Массив.coment;
	
	ССылкаСписания = ПолучитьСписание(Ответственный);
	Если ССылкаСписания <> неопределено тогда
		Объектсписания = ССылкаСписания.ПолучитьОбъект();
	Иначе
		Объектсписания  = Документы.СписаниеЗапчастей.СоздатьДокумент();
		Объектсписания.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 
		Объектсписания.дата = ТекущаяДата();  
		Объектсписания.Ответственный = Ответственный; 
		Объектсписания.Организация = Справочники.Организация.НайтиПоКоду("000000005");
		
		Объектсписания.Записать();
	КонецЕсли;
	НоваястрокаСписания = Объектсписания.Товары.Добавить(); 
	
	НоваястрокаСписания.Номенклатура = Товар;
	НоваястрокаСписания.Инициатор    = Ответственный;
	НоваястрокаСписания.Количество   = 1; 
	НоваястрокаСписания.Партия       = ИндКод;
	НоваястрокаСписания.Автомобиль   = Машина;
	НоваястрокаСписания.Количество   = 1;
	НоваястрокаСписания.Комментарий  = Комментарий;
	
	Объектсписания.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("индкод", НоваястрокаСписания.Партия);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Списано. Удалено. Вычеркнуто.");
	Возврат Ответ;		
 КонецФункции



//Функция текстДляЗаявокИПродаж() 
//	Текст = "ВЫБРАТЬ
//	|	ЗаказКлиента.Номер КАК Номер,
//	|	ЗаказКлиента.Клиент КАК Клиент,
//	|	ЗаказКлиента.СтатусОбработки КАК СтатусОбработки,
//	|	ЗаказКлиента.ОтветственныйЗаОбработку КАК ОтветственныйЗаОбработку,
//	|	ЗаказКлиента.Ссылка КАК Ссылка,
//	|	1 КАК Флаг,
//	|	ЗаказКлиента.Ответственный КАК Ответственный,
//	|	ЗаказКлиента.Дата КАК Дата
//	|ИЗ
//	|	Документ.ЗаказКлиента КАК ЗаказКлиента
//	|ГДЕ
//	|	ЗаказКлиента.Номер ПОДОБНО &Номер
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ПродажаЗапчастей.Номер,
//	|	ПродажаЗапчастей.Клиент,
//	|	ПродажаЗапчастей.СтатусОбработки,
//	|	ПродажаЗапчастей.ОтветственныйКладовщик,
//	|	ПродажаЗапчастей.Ссылка,
//	|	0,
//	|	ПродажаЗапчастей.КтоПродал,
//	|	ПродажаЗапчастей.Дата
//	|ИЗ
//	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей 
//	|ГДЕ
//	|	ПродажаЗапчастей.Номер ПОДОБНО &Номер
//	
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Номер УБЫВ"; 
//	Возврат Текст;
//КонецФункции 
Функция СменаподдонаEditpod(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	индкоды = Массив.ids;
	Место = "П0003";
	Автор = Массив.author; 
	
	ДЛя каждого индкод из индкоды цикл	
		Запрос = новый запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИндНомер.индкод КАК индкод,
		|	ИндНомер.Код КАК Код,
		|	ИндНомер.Стеллаж КАК Стеллаж,
		|	ИндНомер.Комментарий КАК Комментарий,
		|	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
		|	ИндНомер.Модель КАК Модель,
		|	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
		|	ИндНомер.Ответственный КАК Ответственный,
		|	ИндНомер.ЕстьФото КАК ЕстьФото,
		|	ИндНомер.Комментарий КАК Комментарий1,
		|	ИндНомер.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|ГДЕ
		|	ИндНомер.индкод.Наименование = &Код"; 
		запрос.УстановитьПараметр("Код", индкод);
		//@skip-check query-in-loop
		выборка = Запрос.Выполнить().Выбрать(); 
		Если выборка.Количество() > 0 Тогда
			Выборка.Следующий();
		Иначе
			Ответ = Новый HTTPСервисОтвет(415);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Нет такого");
			Возврат ответ;	
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
		НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
		НаборЗаписей.Прочитать(); 
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Ответ = Новый HTTPСервисОтвет(415);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Нет такого");	
		ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
			
			НовыйНомер = НаборЗаписей[0]; 
			Поддон = Справочники.Поддоны.НайтиПоНаименованию(место);
			Если Поддон <> Справочники.Поддоны.ПустаяСсылка() Тогда  	
				Лог =  " сменил поддон с " + НовыйНомер.поддон +" на " + Поддон; 
				
				ЛогированиеИндНомера(Строка(НовыйНомер.индкод),Автор,Лог,Поддон.Стеллаж.Наименование,Место,НовыйНомер.Стеллаж,НовыйНомер.поддон);
				
				НовыйНомер.поддон = Поддон; 
				НовыйНомер.Стеллаж = Поддон.Стеллаж;
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех");
			Иначе
				Ответ = Новый HTTPСервисОтвет(404);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Поддон не найден");
			КонецЕсли;
		КонецЕсли; 
		
		НаборЗаписей.Записать(); 
	Конеццикла;
	Возврат ответ;
	
	
	
КонецФункции

Функция ПолучитьЗаявкиИПродажиgetappandsale(Запрос)
	//Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
	
	запросзаявки = Новый Запрос;
	
	запросзаявки.Текст =  текстДляЗаявокИПродаж();
	
	запросзаявки.УстановитьПараметр("номер", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["num"]))+"%" ); 	
	
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	МассивЗаявок = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураЗаявки = новый Структура;
		СтруктураЗаявки.Вставить("num",Строка(выборка.Номер));
		СтруктураЗаявки.Вставить("client",Строка(выборка.Клиент));  
		СтруктураЗаявки.Вставить("date",Строка(выборка.дата));
		СтруктураЗаявки.Вставить("processing",Строка(выборка.СтатусОбработки));		
		СтруктураЗаявки.Вставить("porter",Строка(выборка.ОтветственныйЗаОбработку));  
		СтруктураЗаявки.Вставить("responsible",Строка(выборка.Ответственный));
		//@skip-check query-in-loop
		СтруктураЗаявки.Вставить("porterphone",Строка(получитьНомерТелефона(выборка.ОтветственныйЗаОбработку)));
		СтруктураЗаявки.Вставить("flag",Строка(выборка.Флаг));
		МассивЗаявок.Добавить(СтруктураЗаявки);
	КонецЦикла;  
	
	//
	//СтруктураИнфо = новый Структура;
	//СтруктураИнфо.Вставить("pages",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	//СтруктураИнфо.Вставить("count",Выборкаобщ);	
	//
	СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗаявок);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция УстановитьТрекНомерsettrecknum(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

Функция СменаРеквизитовТовараEditList(Запрос) 
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	///+ГомзМА 12.04.2024
	Если Массив.state = 1 Тогда
		Состояние = Перечисления.Состояние.БУ;
	ИначеЕсли Массив.state = 2 Тогда
		Состояние = Перечисления.Состояние.Новый;
	ИначеЕсли Массив.state = 3 Тогда
		Состояние = Перечисления.Состояние.Перекупка;
	ИначеЕсли Массив.state = 4 Тогда
		Состояние = Перечисления.Состояние.ТребуетРемонта;
	КонецЕсли;
	///-ГомзМА 12.04.2024
	
	Ответ = РедактироватьТовар(Массив.id,Массив.coment, число(Массив.cost), Состояние);
	// КонецЦикла;
	
	Возврат Ответ;
КонецФункции

Функция РедактироватьТовар(индкод,комментарий=неопределено, цена=неопределено, Состояние = Неопределено)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод,
	|	ИндНомер.Код КАК Код,
	|	ИндНомер.Стеллаж КАК Стеллаж,
	|	ИндНомер.Комментарий КАК Комментарий,
	|	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
	|	ИндНомер.Модель КАК Модель,
	|	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
	|	ИндНомер.Ответственный КАК Ответственный,
	|	ИндНомер.ЕстьФото КАК ЕстьФото,
	|	ИндНомер.Комментарий КАК Комментарий1,
	|	ИндНомер.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование = &Код"; 
	запрос.УстановитьПараметр("Код", индкод);
	выборка = Запрос.Выполнить().Выбрать(); 
	Выборка.Следующий();
	
	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать(); 
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Нет такого'"));	
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		
		НовыйНомер = НаборЗаписей[0];
		Если цена > 0 и цена <> неопределено Тогда 
			НовыйНомер.цена = цена;
		КонецЕсли; 
		
		Если (комментарий <> " " ИЛИ комментарий <>  "" )и комментарий <> неопределено Тогда 
			НовыйНомер.комментарий = комментарий;
		КонецЕсли;
		
		///+ГомзМА 12.04.2024
		Если Состояние <> неопределено Тогда 
			НовыйНомер.Состояние = Состояние;
		КонецЕсли; 
		///-ГомзМА 12.04.2024
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Успех'"));	
	КонецЕсли; 
	
	НаборЗаписей.Записать();
	Возврат ответ;
	
КонецФункции

Функция ПолучитьПотерянныеТоварыgetlost(Запрос)
	
	
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(10000, "ЧГ="));  
	
	///+ГомзМА 19.02.2024
	Если Запрос.ПараметрыURL["id"] <> " " Тогда
		запросТовара.Текст = СтрЗаменить(запросТовара.Текст, "{ГДЕ", "ГДЕ");
		запросТовара.Текст = СтрЗаменить(запросТовара.Текст, "РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}", 
		"РегИндНомер.индкод.Владелец.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС + 
		"		ИЛИ РегИндНомер.индкод.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС + 
		"		ИЛИ РегИндНомер.индкод.Владелец.Артикул ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС + 
		"		ИЛИ РегИндНомер.индкод.Владелец.МестоНаСкладе2.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС + 
		"		ИЛИ РегИндНомер.Стеллаж.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~"")");
		запросТовара.УстановитьПараметр("НазваниеПоиска", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["id"]))+"%" );
	КонецЕсли;
	///-ГомзМА 19.02.2024
	
	запросТовара.УстановитьПараметр("наименование", "П0003" ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	
	Пред = запросТовара.Выполнить().Выбрать();
	
	Выборкаобщ = Пред.Количество();
	запросТовара.Текст =  СтрШаблон(текстДляТовара(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="));
	///+ГомзМА 19.02.2024
	Если Запрос.ПараметрыURL["id"] <> " " Тогда
		запросТовара.Текст = СтрЗаменить(запросТовара.Текст, "{ГДЕ", "ГДЕ"); 
		запросТовара.Текст = СтрЗаменить(запросТовара.Текст, "РегИндНомер.АвитоЧастник = &Ач) КАК Поле2}",  
		"РегИндНомер.индкод.Владелец.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС + 
		"		ИЛИ РегИндНомер.индкод.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС + 
		"		ИЛИ РегИндНомер.индкод.Владелец.Артикул ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС + 
		"		ИЛИ РегИндНомер.индкод.Владелец.МестоНаСкладе2.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~""" + Символы.ПС +
		"		ИЛИ РегИндНомер.Стеллаж.Наименование ПОДОБНО &НазваниеПоиска СПЕЦСИМВОЛ ""~"")");
		запросТовара.УстановитьПараметр("НазваниеПоиска", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Строка(Запрос.ПараметрыURL["id"]))+"%" );
	КонецЕсли;
	///-ГомзМА 19.02.2024
	
	запросТовара.УстановитьПараметр("наименование", "П0003" );	
	
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;	
	
	
	 
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	ИндКоды = тз.ВыгрузитьКолонку("индкод");
	Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	Для каждого стр из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		итер = итер+1;
		тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place",    Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("pk",    стр.АвитоЧастник);
		
		СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);
	///+ГомзМА 19.02.2024
	//СтруктураИнфо.Вставить("count",ТЗ.Количество());
	///-ГомзМА 19.02.2024
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();                                    
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ОтправитьВРВРsendrvr(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаказНаряда2();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.id;
	//Позиция = Число(Массив.pose);
	Автор 	= Массив.author;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура", Номенклатура);
	Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	
	Пока выборка.Следующий() Цикл
		ОбъектНаряда = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		НайденныеСтроки = ОбъектНаряда.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.количество() > 0 Тогда 
			СтрокаТЧ = ОбъектНаряда.Товары[НайденныеСтроки[0].НомерСтроки-1];  
			СтрокаТЧ.партия = партия; 
			//@skip-check query-in-loop
			СтрокаТЧ.Автомобиль = ПолучитьМашину(партия);
			СтрокаТЧ.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 
			СтрокаТЧ.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Собрано;
			//@skip-check query-in-loop
			РедактироватьПолку(ИндКод,"K-2-11-1",Автор);
			ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение);	 
			
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
			
		Иначе
			//	Если  Не ОбъектНаряда.ЗаблокироватьТЧТовары Тогда
			//	
			//	Новаястрока = ОбъектНаряда.Товары.Добавить();
			//	Новаястрока.Партия = партия;
			//	Новаястрока.Номенклатура = Номенклатура; 
			//	Новаястрока.Количество = 1;
			//	Новаястрока.Автомобиль = ПолучитьМашину(партия);
			//	Новаястрока.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Выдано;
			//	Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
			//	Новаястрока.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 	
			//	
			//	ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + Новаястрока.Номенклатура + " "+ Новаястрока.Партия; 
			//	ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			//	ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение); 
			//	
			//	Ответ = Новый HTTPСервисОтвет(200);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Успех");
			//	Возврат Ответ;
			//Иначе
			//	Ответ = Новый HTTPСервисОтвет(400);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Заказ-наряд закрыт!");
			//	Возврат Ответ;	
			//КонецЕсли; 
			
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Такой позиции в заказ-нарядде нет или партия уже установлена!");
			
		КонецЕсли;
		
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не прокатило");
	Возврат Ответ;	
	
	
КонецФункции

Функция ПолучитьСписокНарядовgetlistorders(Запрос)
	запросНарядов = Новый Запрос;
	
	запросНарядов.Текст =  СтрШаблон(текстДляСпискаНарядов(), Формат(10000, "ЧГ="));  
	
	Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Выдача.КоличествоСтрок > 0");
	Иначе
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Сборка.КоличествоСтрок > 0");
		
	КонецЕсли;
	
	запросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросНарядов.Выполнить().Выбрать().Количество();  
	
	запросНарядов.Текст =  СтрШаблон(текстДляСпискаНарядов(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Выдача.КоличествоСтрок > 0");
	Иначе
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Сборка.КоличествоСтрок > 0");
		
	КонецЕсли;
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	Иначе 
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = запросНарядов.Выполнить().Выбрать();
	
	МассивНарядов = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("num",Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client",Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("application",Строка(выборка.ЗаказКлиента));
		СтруктураИнфо.Вставить("processing",Строка(выборка.состояние));
		//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible",Строка(выборка.Ответственный));
		СтруктураИнфо.Вставить("comment",Строка(выборка.Комментарий));
		//@skip-check query-in-loop
		МассивТоваров = ПолучитьСтруктуруТоваров(выборка.Номер);
		СтруктураИнфо.Вставить("state_product",МассивТоваров); 
		
		МассивНарядов.Добавить(СтруктураИнфо); 
		
	КонецЦикла;
	
	///+ГомзМА 16.04.2024
	Страница = Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"]));
	Страница = ?((Страница-Цел(Страница))>0,Цел(Страница)+1, Цел(Страница));
	///-ГомзМА 16.04.2024
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Страница);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивНарядов);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
	
КонецФункции

Функция СменаCтатусаТоваровВЗНchangestateorder(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляЗаказНаряда2();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	тип   = Массив.type;
	Позиция = Число(Массив.pose);
	Автор 	= Массив.author;
	//партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	//
	//Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	//Отбор = Новый Структура();
	//Отбор.Вставить("Номенклатура", Номенклатура);
	//Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	
	Пока выборка.Следующий() Цикл
		Если выборка.Состояние = Перечисления.СостоянияЗаказНаряда.Выполнен Тогда
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Наряд закрыт!");
			Возврат Ответ;	
			
		КонецЕсли;
		
		ОбъектНаряда = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		
		//НайденныеСтроки = ОбъектНаряда.Товары.НайтиСтроки(Отбор);
		//Если НайденныеСтроки.количество() > 0 Тогда
		Попытка
			СтрокаТЧ = ОбъектНаряда.Товары[Позиция-1];  
			//СтрокаТЧ.партия = партия; 
			//СтрокаТЧ.Автомобиль = ПолучитьМашину(партия);
			СтрокаТЧ.Склад = Справочники.Склады.НайтиПоКоду("000000002");
			Если  тип = 0  Тогда
				СтрокаТЧ.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.НетВНаличии;
				ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " сменил статус в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 
			ИначеЕсли тип = 1 тогда
				СтрокаТЧ.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Установлена;
				ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " сменил статус в товаре " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Партия; 
				
			КонецЕсли;
			
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
			//Иначе
		Исключение
			///Если  Не ОбъектНаряда.ЗаблокироватьТЧТовары Тогда
			//	
			//	Новаястрока = ОбъектНаряда.Товары.Добавить();
			//	Новаястрока.Партия = партия;
			//	Новаястрока.Номенклатура = Номенклатура; 
			//	Новаястрока.Количество = 1;
			//	Новаястрока.Автомобиль = ПолучитьМашину(партия);
			//	Новаястрока.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Выдано;
			//	Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
			//	Новаястрока.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 	
			//	
			//	ТекстЛога =  " В заказ-наряде " + ОбъектНаряда.номер + " установил партию в товаре " + Новаястрока.Номенклатура + " "+ Новаястрока.Партия; 
			//	ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			//	ОбъектНаряда.Записать(РежимЗаписиДокумента.Проведение); 
			//	
			//	Ответ = Новый HTTPСервисОтвет(200);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Успех");
			//	Возврат Ответ;
			//Иначе
			//	Ответ = Новый HTTPСервисОтвет(400);
			//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			//	Ответ.УстановитьТелоИзСтроки("Заказ-наряд закрыт!");
			//	Возврат Ответ;	
			//КонецЕсли; 
			
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Не удалось сменить статус товара!");
			Возврат Ответ;
			//КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не верные данные");
	Возврат Ответ;	
	
	
КонецФункции

Функция ПолучитьМестаХраненияGetPlaces(Запрос)
	
	запросТовара = Новый Запрос;
	запросТовара.Текст =  СтрШаблон(текстДляТовара1(), Формат(10000, "ЧГ="));  
	
	
	запросТовара.УстановитьПараметр("Наименование", Строка(Запрос.ПараметрыURL["id"]) ); 
	запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	//	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	//ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив")); 
	МассивТоваров = Новый Массив;
	тз.Сортировать("Количество Убыв");
	
	итер = 0;
	ПроверкаМеста = "";
	Для каждого стр из ТЗ Цикл
		
		//Если Строка(стр.Адрес) <> ПроверкаМеста Тогда
		СтруктураТоваров = Новый Структура;
		//СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		//СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		//СтруктураТоваров.Вставить("cost",    Строка(стр.Цена));
		//СтруктураТоваров.Вставить("comment", Строка(стр.Комментарий));
		СтруктураТоваров.Вставить("place",    Строка(стр.Адрес));
		СтруктураТоваров.Вставить("sklad",    Строка(стр.Склад)); 
		СтруктураТоваров.Вставить("city",     Строка(стр.Город));  
		СтруктураТоваров.Вставить("count",    Строка(стр.Количество));
		//ПроверкаМеста = Строка(стр.Адрес);
		//СтруктураТоваров.Вставить("indcode", Строка(стр.индкод));   
		СтруктураТоваров.Вставить("poddon", Строка(стр.Поддон));
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
		//конецЕсли;
		
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
	
КонецФункции

Функция ОтменитьТоварИзПродажиcancelproductsale(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = текстДляПродажи();
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	//ИндКод  = Массив.IndCode;
	Позиция = Число(Массив.Pose);	
	Автор = Массив.author;
	Юзер = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Если Юзер = Справочники.Пользователи.ПустаяСсылка() Тогда
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Пользователя нет в базе данных!");
		Возврат Ответ;
		
	КонецЕсли;
	
	Если выборка.Количество() > 0 тогда
		Пока выборка.Следующий() Цикл
			ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();
			ОбъектПродажи.Таблица[Позиция-1].Отменено = Не ОбъектПродажи.Таблица[Позиция-1].Отменено;
			Если НЕ  ОбъектПродажи.Таблица[Позиция-1].Отменено Тогда
				ТекстЛога =  " В заявке " + ОбъектПродажи.номер + " не найден товар " + ОбъектПродажи.Таблица[Позиция-1].Товар + " "+ ОбъектПродажи.Таблица[Позиция-1].Партия; 
			Иначе
				ТекстЛога =  " В заявке " + ОбъектПродажи.номер + " вернул товар " + ОбъектПродажи.Таблица[Позиция-1].Товар + " "+ ОбъектПродажи.Таблица[Позиция-1].Партия;
			КонецЕсли;
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(Выборка.Ответственный),ТекстЛога);
			
			ОбъектПродажи.Записать();
		КонецЦикла;
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Успех");
		Возврат Ответ;
	Иначе
		Ответ = Новый HTTPСервисОтвет(450);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такой продажи!");
		Возврат Ответ;
	КонецЕсли;
КонецФункции

Функция ПолучитьСписокСотрудниковGetWorkersList(Запрос)
	запросСотрудников = Новый Запрос;
	запросСотрудников.Текст =  текстДляСпискаСотрудников(); 
	
	запросСотрудников.УстановитьПараметр("ОтделНов",Справочники.Подразделения.НайтиПоНаименованию(Запрос.ПараметрыURL["department"]));
	ВыборкаСотрудников = запросСотрудников.Выполнить().Выбрать();
	МассивОтделов	  = новый массив;
	МассивСотрудников = новый массив;
	Отдел = Справочники.Подразделения.пустаяСсылка();
	счёт = 0;
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		СтруктураСотрдников = Новый Структура; 
		СтруктураСотрдников.Вставить("name", Строка(ВыборкаСотрудников.Наименование));
		СтруктураСотрдников.Вставить("code", Строка(ВыборкаСотрудников.Код));
		СтруктураСотрдников.Вставить("tasks", ВыборкаСотрудников.КоличествоЗадач);
		
		
		//Если ВыборкаСотрудников.ОтделНов = Отдел Или счёт = 0  Тогда
			МассивСотрудников.Добавить(СтруктураСотрдников);
		//	счёт = 1;
		//Иначе
			
		//	СтруктураОтделов = Новый Структура;
		//	СтруктураОтделов.Вставить("group_name",Строка(Отдел)); 
		//	СтруктураОтделов.Вставить("workers",МассивСотрудников);
		//	МассивСотрудников = новый массив;
		//	МассивОтделов.Добавить(СтруктураОтделов);
		//КонецЕсли;
		//Отдел = ВыборкаСотрудников.ОтделНов;
	КонецЦикла;
			//СтруктураОтделов = Новый Структура;
			//СтруктураОтделов.Вставить("group_name",Строка(Отдел)); 
			//СтруктураОтделов.Вставить("workers",МассивСотрудников);
			//МассивСотрудников = новый массив;
			//МассивОтделов.Добавить(СтруктураОтделов);
	
	СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивСотрудников);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивСотрудников);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция СоздатьЗадачуcreatework(Запрос)
		
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	Если число(Массив.level) = 1 тогда 
		оценка = Перечисления.ОценкаЗадач.Просто;
	Иначеесли число(Массив.level) = 2 тогда 
		оценка = Перечисления.ОценкаЗадач.Сложно;
	Иначеесли число(Массив.level) = 3 тогда
		оценка = Перечисления.ОценкаЗадач.Срочно;
	КонецЕсли;
	//Исполнитель     = Справочники.Сотрудники.НайтиПоКоду(Массив.executor).Пользователь; 
	Ответственный   = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Направление = Справочники.Подразделения.НайтиПоКоду(Массив.direction);
	Отдел 		= Справочники.Подразделения.НайтиПоКоду(Массив.department);
	Новаязадача = Документы.Задача.СоздатьДокумент();
	
	Новаязадача.Наименование 			= Массив.name;  
	//Новаязадача.Исполнитель   			= Исполнитель; 
	Новаязадача.Статус   	    		= Перечисления.СтатусыЗадач.Создана; 
	Новаязадача.Ответственный   		= Ответственный;  
	Новаязадача.Направление   			= Направление;
	Новаязадача.Описание   				= Массив.text; 
	Новаязадача.ОценкаЗадач   			= оценка;
	Новаязадача.ДатаНачалаПлан  		= ТекущаяДата();
	Новаязадача.Отдел  					= Справочники.Подразделения.НайтиПоКоду(Массив.department);
	Новаязадача.Дата 					= ТекущаяДата();
	Новаязадача.ПлановыйСрокВыполнения 	= Дата(Массив.deadline);
		
	//	ТекстЛога =  " Создал продажу " + Новаязадача.номер ; 
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	
	Новаязадача.Записать();
	Ответ.УстановитьТелоИзСтроки(Новаязадача.номер);

	///+ГомзМА 26.02.2024
	Если число(Массив.level) = 1 тогда 
		ПоставитьПриоритетЗадачи(Документы.Задача.НайтиПоНомеру(Новаязадача.номер), Справочники.Подразделения.НайтиПоКоду(Массив.direction));
	Иначеесли число(Массив.level) = 3 тогда
		ПоставитьПриоритетЗадачиСрочно(Документы.Задача.НайтиПоНомеру(Новаязадача.номер), Справочники.Подразделения.НайтиПоКоду(Массив.direction));
	КонецЕсли;
	///-ГомзМА 26.02.2024
	Попытка
Для каждого стр Из Справочники.Подразделения.НайтиПоКоду(Массив.direction).Участники Цикл
Исполнитель = стр.Сотрудник;
НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.Пользователь.Установить(Исполнитель);
	НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда
			ТекстЛога = " Для вашего направления создана задача - " + Новаязадача.номер + " " +Новаязадача.Наименование + символы.ПС + "Автор: " + Строка(Ответственный) + символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер);
			Телега = НаборЗаписей[0].ID_Пользователя;
			ТекстЛога = Строка(Исполнитель) + ТекстЛога;
			если число(Массив.level) = 3 тогда
				ТекстЛога = "❗️❗️СРОЧНО❗️❗️ " + ТекстЛога ;	
			КонецЕсли;
			
			Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
			
		Иначе 
			
		КонецЕсли;	

КонецЦикла;
	
		
		ТекстЛога = "Для " + Строка(Новаязадача.Отдел) + " создана задача - " + Новаязадача.номер+ " " +Новаязадача.Наименование + символы.ПС + "Автор: " + Строка(Ответственный)+ символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер);	
		если число(Массив.level) = 3 тогда
			ТекстЛога = "❗️❗️СРОЧНО❗️❗️ " + ТекстЛога ;	
		КонецЕсли;
		Telegram_Сервер.ОтправитьСообщениеПользователю("-1002106229478", ТекстЛога);
		
		НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
				НаборЗаписей.Отбор.Пользователь.Установить(Ответственный);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 1 Тогда
					ТекстЛога = " получил от вас задачу - " + Новаязадача.номер + " " +Новаязадача.Наименование + символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер) ;
					Телега = НаборЗаписей[0].ID_Пользователя;
					ТекстЛога = Строка(Новаязадача.Отдел) + ТекстЛога;
					Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
				Иначе 
					
				КонецЕсли;
	возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Чтото не то");
		возврат Ответ;
	КонецПопытки;

	
КонецФункции

Функция ПолучитьОтдел(Сотрудник)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодразделенияУчастники.Ссылка,
	|	ПодразделенияУчастники.Ссылка.Родитель
	|ИЗ
	|	Справочник.Подразделения.Участники КАК ПодразделенияУчастники
	|ГДЕ
	|	ПодразделенияУчастники.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
		Массивструк = Новый массив;
		
	Если выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Массивструк.Добавить(Выборка.Родитель);
		Массивструк.Добавить(Выборка.Ссылка);
		
	Иначе 
		Массивструк.Добавить("");
		Массивструк.Добавить("");
	
	КонецЕсли;
	Возврат Массивструк;
КонецФункции
Функция СоздатьЗадачуЛичнуюcreateworkpersonal(Запрос)
		
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	Если число(Массив.level) = 1 тогда 
		оценка = Перечисления.ОценкаЗадач.Просто;
	Иначеесли число(Массив.level) = 2 тогда 
		оценка = Перечисления.ОценкаЗадач.Сложно;
	Иначеесли число(Массив.level) = 3 тогда
		оценка = Перечисления.ОценкаЗадач.Срочно;
	КонецЕсли;
	//Выборка = ПолучитьОтдел(Массив.executor);
	Исполнитель     = Справочники.Сотрудники.НайтиПоКоду(Массив.executor).Пользователь; 
	Ответственный   = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	Выборка = ПолучитьОтдел(Исполнитель);
	Направление     = Выборка[1];
	Отдел 			= Выборка[0];
	Новаязадача = Документы.Задача.СоздатьДокумент();
	
	
	Новаязадача.Наименование 			= Массив.name;  
	Новаязадача.Исполнитель   			= Исполнитель; 
	Новаязадача.Статус   	    		= Перечисления.СтатусыЗадач.Создана; 
	Новаязадача.Ответственный   		= Ответственный;  
	Новаязадача.Направление   			= Направление;
	Новаязадача.Описание   				= Массив.text; 
	Новаязадача.ОценкаЗадач   			= оценка;
	Новаязадача.ДатаНачалаПлан  		= ТекущаяДата();
	Новаязадача.Отдел  					= Отдел;
	Новаязадача.Дата 					= ТекущаяДата();
	Новаязадача.ПлановыйСрокВыполнения 	= Дата(Массив.deadline);
		
	//	ТекстЛога =  " Создал продажу " + Новаязадача.номер ; 
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	
	Новаязадача.Записать();
	Ответ.УстановитьТелоИзСтроки(Новаязадача.номер);

	///+ГомзМА 26.02.2024
	Если число(Массив.level) = 1 тогда 
		ПоставитьПриоритетЗадачи(Документы.Задача.НайтиПоНомеру(Новаязадача.номер), Отдел);
	Иначеесли число(Массив.level) = 3 тогда
		ПоставитьПриоритетЗадачиСрочно(Документы.Задача.НайтиПоНомеру(Новаязадача.номер), Отдел);
	КонецЕсли;
	///-ГомзМА 26.02.2024
	Попытка
//Для каждого стр Из Отдел.Участники Цикл
//Исполнитель = стр.Сотрудник;
НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.Пользователь.Установить(Исполнитель);
	НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда
			ТекстЛога = " Для вашего направления создана задача - " + Новаязадача.номер + " " +Новаязадача.Наименование + символы.ПС + "Автор: " + Строка(Ответственный) + символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер);
			Телега = НаборЗаписей[0].ID_Пользователя;
			ТекстЛога = Строка(Исполнитель) + ТекстЛога;
			если число(Массив.level) = 3 тогда
				ТекстЛога = "❗️❗️СРОЧНО❗️❗️ " + ТекстЛога ;	
			КонецЕсли;
			
			Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
			
		Иначе 
			
		КонецЕсли;	

//КонецЦикла;
	
		
		ТекстЛога = "Для " + Строка(Новаязадача.Отдел) + " создана задача - " + Новаязадача.номер+ " " +Новаязадача.Наименование + символы.ПС + "Автор: " + Строка(Ответственный)+ символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер);	
		если число(Массив.level) = 3 тогда
			ТекстЛога = "❗️❗️СРОЧНО❗️❗️ " + ТекстЛога ;	
		КонецЕсли;
		Telegram_Сервер.ОтправитьСообщениеПользователю("-1002106229478", ТекстЛога);
		
		НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
				НаборЗаписей.Отбор.Пользователь.Установить(Ответственный);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 1 Тогда
					ТекстЛога = " получил от вас задачу - " + Новаязадача.номер + " " +Новаязадача.Наименование + символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер) ;
					Телега = НаборЗаписей[0].ID_Пользователя;
					ТекстЛога = Строка(Новаязадача.Отдел) + ТекстЛога;
					Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
				Иначе 
					
				КонецЕсли;
	возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Чтото не то");
		возврат Ответ;
	КонецПопытки;

	
КонецФункции

Процедура ПоставитьПриоритетЗадачи(Задача, Направление)

	///+ГомзМА 26.02.2024
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Направление = &Направление
	|	И ПриоритетыЗадач.Приоритет > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Направление", Направление);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Выборка.Следующий();
	
	Запись = РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
	Запись.Задача 		 = Задача;
	Запись.Направление = Направление;
	Если Выборка.Приоритет = Неопределено тогда
		Запись.Приоритет     = 1;		
	Иначе
		Запись.Приоритет     = Выборка.Приоритет + 1;
	КонецЕсли;
	
	Запись.Записать();
	///-ГомзМА 26.02.2024
	
КонецПроцедуры 

Процедура ПоставитьПриоритетЗадачиСрочно(Задача, Направление)

	///+ГомзМА 26.02.2024
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПриоритетыЗадач.Задача КАК Задача,
	               |	ПриоритетыЗадач.Ответственный КАК Ответственный,
	               |	ПриоритетыЗадач.Приоритет КАК Приоритет,
	               |	докЗадача.ОценкаЗадач КАК ОценкаЗадач
	               |ИЗ
	               |	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК докЗадача
	               |		ПО ПриоритетыЗадач.Задача = докЗадача.Ссылка
	               |ГДЕ
	               |	ПриоритетыЗадач.Направление = &Направление
	               |	И ПриоритетыЗадач.Приоритет > 0
	               |	И докЗадача.ОценкаЗадач = ЗНАЧЕНИЕ(Перечисление.ОценкаЗадач.Срочно)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Направление", Направление);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Выборка.Следующий();
	
	Запись = РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
	Запись.Задача 		 	= Задача;
	Запись.Направление 		= Направление;
	Если Выборка.Приоритет = Неопределено тогда
		Запись.Приоритет     = 2;		
	Иначе
		Запись.Приоритет     = Выборка.Приоритет + 1;
	КонецЕсли;
	
	Запись.Записать();
	
	//Сдвинуть нумерацию
	ЗапросСписокЗадач = Новый Запрос;
	ЗапросСписокЗадач.Текст = "
	|ВЫБРАТЬ 
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Направление = &Направление
	|	И ПриоритетыЗадач.Приоритет >= &НомерПриоритета
	|	И ПриоритетыЗадач.Задача <> &Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ЗапросСписокЗадач.УстановитьПараметр("Направление", 	 Направление);
	ЗапросСписокЗадач.УстановитьПараметр("НомерПриоритета",  Запись.Приоритет);
	ЗапросСписокЗадач.УстановитьПараметр("Задача",			 Задача);
	
	РезультатЗапроса = ЗапросСписокЗадач.Выполнить().Выбрать(); 
	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			ЗаписьРегистраСведений 					= РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.Задача 		 	= РезультатЗапроса.Задача;
			ЗаписьРегистраСведений.Прочитать();
			Если ЗаписьРегистраСведений.Выбран() Тогда
				ЗаписьРегистраСведений.Приоритет = ЗаписьРегистраСведений.Приоритет + 1;
				ЗаписьРегистраСведений.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	///-ГомзМА 26.02.2024
	
КонецПроцедуры 

Процедура СдвинутьПорядокЗадачКНачалу(НомерПриоритета, Направление)

	///+ГомзМА 27.02.2024
	ЗапросСписокЗадач = Новый Запрос;
	ЗапросСписокЗадач.Текст = "
	|ВЫБРАТЬ 
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Направление = &Направление
	|	И ПриоритетыЗадач.Приоритет >= &НомерПриоритета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ЗапросСписокЗадач.УстановитьПараметр("Направление", 	 Направление);
	ЗапросСписокЗадач.УстановитьПараметр("НомерПриоритета",  НомерПриоритета);
	
	РезультатЗапроса = ЗапросСписокЗадач.Выполнить().Выбрать(); 
	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			ЗаписьРегистраСведений 					= РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.Задача 		 	= РезультатЗапроса.Задача;
			ЗаписьРегистраСведений.Прочитать();
			Если ЗаписьРегистраСведений.Выбран() Тогда
				ЗаписьРегистраСведений.Приоритет = ЗаписьРегистраСведений.Приоритет - 1;
				ЗаписьРегистраСведений.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	///-ГомзМА 27.02.2024

КонецПроцедуры

Процедура СдвинутьПорядокЗадачПлюсОдин(КонечныйПриоритет, НачальныйПриоритет, Направление)

	///+ГомзМА 28.02.2024
	ЗапросСписокЗадач = Новый Запрос;
	ЗапросСписокЗадач.Текст = "
	|ВЫБРАТЬ 
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Направление = &Направление
	|	И ПриоритетыЗадач.Приоритет МЕЖДУ &НачальныйПриоритет И &КонечныйПриоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ЗапросСписокЗадач.УстановитьПараметр("Направление", 	 	Направление);
	ЗапросСписокЗадач.УстановитьПараметр("НачальныйПриоритет",  НачальныйПриоритет);
	ЗапросСписокЗадач.УстановитьПараметр("КонечныйПриоритет",   КонечныйПриоритет);
	
	РезультатЗапроса = ЗапросСписокЗадач.Выполнить().Выбрать(); 
	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			ЗаписьРегистраСведений 					= РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.Задача 		 	= РезультатЗапроса.Задача;
			ЗаписьРегистраСведений.Прочитать();
			Если ЗаписьРегистраСведений.Выбран() Тогда
				ЗаписьРегистраСведений.Приоритет = ЗаписьРегистраСведений.Приоритет + 1;
				ЗаписьРегистраСведений.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	///-ГомзМА 28.02.2024

КонецПроцедуры

Процедура СдвинутьПорядокЗадачККонцу(КонечныйПриоритет, НачальныйПриоритет, Направление)

	///+ГомзМА 28.02.2024
	ЗапросСписокЗадач = Новый Запрос;
	ЗапросСписокЗадач.Текст = "
	|ВЫБРАТЬ
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Направление = &Направление
	|	И ПриоритетыЗадач.Приоритет МЕЖДУ &НачальныйПриоритет И &КонечныйПриоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ЗапросСписокЗадач.УстановитьПараметр("Направление", 	 	Направление);
	ЗапросСписокЗадач.УстановитьПараметр("НачальныйПриоритет",  НачальныйПриоритет);
	ЗапросСписокЗадач.УстановитьПараметр("КонечныйПриоритет", 	КонечныйПриоритет);
	
	РезультатЗапроса = ЗапросСписокЗадач.Выполнить().Выбрать(); 
	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			ЗаписьРегистраСведений 					= РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.Задача 		 	= РезультатЗапроса.Задача;
			ЗаписьРегистраСведений.Прочитать();
			Если ЗаписьРегистраСведений.Выбран() Тогда
				ЗаписьРегистраСведений.Приоритет = ЗаписьРегистраСведений.Приоритет - 1;
				ЗаписьРегистраСведений.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	///-ГомзМА 28.02.2024

КонецПроцедуры

Процедура ПоставитьПервуюЗадачуВКонецПриоритета(Исполнитель)

	///+ГомзМА 27.02.2024
	Запрос = Новый запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Ответственный = &Ответственный
	|	И ПриоритетыЗадач.Приоритет > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Ответственный", Исполнитель);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Выборка.Следующий();
	
	ЗапросПерваяЗадача = Новый Запрос;
	ЗапросПерваяЗадача.Текст = "
	|ВЫБРАТЬ
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Ответственный = &Ответственный
	|	И ПриоритетыЗадач.Приоритет = 1";
	
	ЗапросПерваяЗадача.УстановитьПараметр("Ответственный", Исполнитель);
	
	ПерваяЗадача = ЗапросПерваяЗадача.Выполнить().Выбрать();
	Если ПерваяЗадача.Количество() > 0 Тогда
		ПерваяЗадача.Следующий();
		
		Запись = РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
		Запись.Задача = ПерваяЗадача.Задача;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Если Выборка.Приоритет = Неопределено Тогда
				Запись.Приоритет     = 1;		
			Иначе
				Запись.Приоритет     = Выборка.Приоритет + 1;
			КонецЕсли;
		КонецЕсли;
		
		Запись.Записать();
	КонецЕсли;
	///-ГомзМА 27.02.2024

КонецПроцедуры

Функция ПолучитьСписокПеремещенийgetlistmove(Запрос)
	запросНарядов = Новый Запрос;
	
	запросНарядов.Текст =  СтрШаблон(текстДляСпискаПеремещений(), Формат(10000, "ЧГ="));  
	
	Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Заказ.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "2" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Собрано.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "3" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_КУпаковке.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "4" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Отправлен.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "5" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Принят.НомерСтроки > 0");
		
	КонецЕсли;
	
	запросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросНарядов.Выполнить().Выбрать().Количество();  
	
	запросНарядов.Текст =  СтрШаблон(текстДляСпискаПеремещений(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ=")); 
	
	Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Заказ.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "2" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Собрано.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "3" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_КУпаковке.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "4" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Отправлен.НомерСтроки > 0");
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "5" Тогда
		
		запросНарядов.Текст = СтрЗаменить(запросНарядов.Текст,"&Фильтр","Где ВТ_Принят.НомерСтроки > 0");
		
	КонецЕсли;
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	Иначе 
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = запросНарядов.Выполнить().Выбрать();
	
	МассивНарядов = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = новый Структура;
		
		СтруктураИнфо.Вставить("num",Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		СтруктураИнфо.Вставить("from",Строка(выборка.СкладОтправитель));
		СтруктураИнфо.Вставить("to",Строка(выборка.СкладПолучатель));
		СтруктураИнфо.Вставить("processing",Строка(выборка.Статус));
		//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible",Строка(выборка.Ответственный));
		СтруктураИнфо.Вставить("recipient",Строка(выборка.Проверяющий));
		
		//@skip-check query-in-loop
		МассивТоваров = ПолучитьСтруктуруТоваровПеремещения(выборка.Номер);
		СтруктураИнфо.Вставить("state_product",МассивТоваров); 
		
		МассивНарядов.Добавить(СтруктураИнфо); 
		
	КонецЦикла;
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивНарядов);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьПеремещениеgetmove(Запрос)
	
	///+ГомзМА 20.02.2024
	ЗапросЗаявки = Новый Запрос;
	ЗапросЗаявки.Текст = ТекстДляПеремещения();
	
	ЗапросЗаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = ЗапросЗаявки.Выполнить().Выбрать();
	
	МассивТоваров = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("num",			Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",			Строка(выборка.Дата));
		СтруктураИнфо.Вставить("from",			Строка(выборка.СкладОтправитель));
		СтруктураИнфо.Вставить("to",			Строка(выборка.СкладПолучатель));
		СтруктураИнфо.Вставить("processing",	Строка(выборка.Статус));
		СтруктураИнфо.Вставить("responsible",	Строка(выборка.Ответственный));
		СтруктураИнфо.Вставить("recipient",		Строка(выборка.Проверяющий));
		
		//@skip-check query-in-loop
		МассивТоваров = ПолучитьСтруктуруТоваровПеремещения(Выборка.Номер);
		СтруктураИнфо.Вставить("state_product", МассивТоваров); 	
		
		Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
			//@skip-check query-in-loop
			ТЗ = ЗапросЗаявки.ВыполнитьПакетСПромежуточнымиДанными()[0].Выгрузить(); //ВТ_ТЧЗаказано
		ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "2" Тогда
			//@skip-check query-in-loop
			ТЗ = ЗапросЗаявки.ВыполнитьПакетСПромежуточнымиДанными()[1].Выгрузить(); //ВТ_ТЧСобрано
		ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "3" Тогда
			//@skip-check query-in-loop
			ТЗ = ЗапросЗаявки.ВыполнитьПакетСПромежуточнымиДанными()[2].Выгрузить(); //ВТ_ТЧКОтправке
		ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "4" Тогда
			//@skip-check query-in-loop
			ТЗ = ЗапросЗаявки.ВыполнитьПакетСПромежуточнымиДанными()[3].Выгрузить(); //ВТ_ТЧКОтправлен
		КонецЕсли;
		
		МассивТоваров = Новый Массив;
		
		Если ТЗ.Количество() > 0 Тогда
			Массивкодов = ТЗ.ВыгрузитьКолонку("Партия");
			ТЗ.Колонки.Добавить("колФото",  Новый ОписаниеТипов("Число"));  
			ТЗ.Колонки.Добавить("Фото",		Новый ОписаниеТипов("Массив"));
			
			ИндКоды = Тз.ВыгрузитьКолонку("Партия2");
			Фотки = ПолучениеФото(ИндКоды);
			Итер = 0;
			Для каждого Стр из ТЗ Цикл
				
				МассивФото = новый массив;
				
				НайденныеФотки = Новый Массив;  
				НайденныеФотки = Фотки[итер].urls;
				МассивФото = новый массив;  
				Если НайденныеФотки <> Неопределено и НайденныеФотки.Количество()>0 Тогда
					
					стр.колфото = 1;  
					
					Для каждого Фотка Из НайденныеФотки Цикл
						Текст = "";
						Текст = Фотка;
						МассивФото.Добавить(Текст);
					КонецЦикла; 
				КонецЕсли;
				
				Код = стр.Код; 
				Пока Лев(Код, 1) = "0" Цикл 
					Код = Прав(Код, СтрДлина(Код) - 1);
				КонецЦикла;
				СтруктураТоваров = Новый Структура;
				СтруктураТоваров.Вставить("name",    	Строка(стр.Товар));
				СтруктураТоваров.Вставить("position", 	Строка(стр.НомерСтроки));
				СтруктураТоваров.Вставить("car",    	Строка(стр.Автомобиль));
				СтруктураТоваров.Вставить("count", 		Строка(стр.Количество));		
				СтруктураТоваров.Вставить("sum",    	Строка(стр.ОбщЦена));
				СтруктураТоваров.Вставить("issued",    	Строка(стр.СостояниеТовара));
				СтруктураТоваров.Вставить("Code",     	Строка("00"+Код));
				СтруктураТоваров.Вставить("indcode", 	Строка(стр.Партия));
				СтруктураТоваров.Вставить("place", 		Строка(ПолучитьМесто(стр.Партия)));	
				СтруктураТоваров.Вставить("photos", 	МассивФото);  
				СтруктураТоваров.Вставить("article",  	Строка(стр.Артикул));
				СтруктураТоваров.Вставить("k",        	ЕстьНаКСкладе(стр.Товар)); 
				СтруктураТоваров.Вставить("rvr",        ЕстьНаПолкеРВРВ(стр.Товар));
				СтруктураТоваров.Вставить("poddon",    	Строка(ПолучитьПоддон(стр.Партия))); 
				МассивТоваров.Добавить(СтруктураТоваров); 
				итер = итер+1;
				
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;	
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	///-ГомзМА 20.02.2024
	
	//запросзаявки = Новый Запрос;
	//запросзаявки.Текст = текстДляПеремещения();
	//
	/////+ГомзМА 26.01.2024
	//Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
	//	запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&Фильтр","И (ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Заказано)" + Символы.ПС + 
	//	"	ИЛИ ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.НетВНаличии))");
	//ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "2" Тогда
	//	
	//	запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&Фильтр","И (ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Собрано)" + Символы.ПС + 
	//	"	ИЛИ ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.НетВНаличии))");
	//ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "3" Тогда
	//	
	//	запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&Фильтр","И ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.КОтправке)");
	//ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "4" Тогда
	//	
	//	запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&Фильтр","И ПеремещениеТоваров.Товары.СостояниеТовара = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещений.Отправлен)");
	//ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "5" Тогда
	//	
	//	//запросзаявки.Текст = СтрЗаменить(запросзаявки.Текст,"&Фильтр","Где ВТ_Принят.НомерСтроки > 0");
	//	
	//КонецЕсли;
	/////-ГомзМА 26.01.2024
	//
	//запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	//Выборка = запросзаявки.Выполнить().Выбрать();
	//
	/////+ГомзМА 29.01.2024
	//НетТоваровСоСтатусом = Ложь;
	//Если Выборка.Количество() = 0 Тогда
	//	НетТоваровСоСтатусом = Истина;
	//	запросзаявки.Текст = СтрЗаменить(текстДляПеремещения(),"&Фильтр", "");
	//	Выборка = запросзаявки.Выполнить().Выбрать();
	//КонецЕсли;
	/////-ГомзМА 26.01.2024
	//
	//
	//МассивТоваров = Новый Массив;
	//Пока выборка.Следующий() Цикл
	//	СтруктураИнфо = новый Структура;
	//	СтруктураИнфо.Вставить("num",Строка(выборка.Номер));
	//	СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
	//	СтруктураИнфо.Вставить("from",Строка(выборка.СкладОтправитель));
	//	СтруктураИнфо.Вставить("to",Строка(выборка.СкладПолучатель));
	//	СтруктураИнфо.Вставить("processing",Строка(выборка.Статус));
	//	//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
	//	//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
	//	//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
	//	СтруктураИнфо.Вставить("responsible",Строка(выборка.Ответственный));
	//	СтруктураИнфо.Вставить("recipient",Строка(выборка.Проверяющий));
	//	
	//	//	ВыборкаТоваров = выборка.Таблица.Выбрать();
	//	
	//	///+ГомзМА 29.01.2024
	//	Если НЕ НетТоваровСоСтатусом Тогда
	//		МассивТоваров = ПолучитьСтруктуруТоваровПеремещения(выборка.Номер);
	//		СтруктураИнфо.Вставить("state_product",МассивТоваров); 	
	//		
	//		ТЗ = выборка.Товары.Выгрузить(); 
	//		Массивкодов = ТЗ.ВыгрузитьКолонку("Партия");
	//		ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	//		ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	//		МассивТоваров = Новый Массив;
	//		
	//		ИндКоды = тз.ВыгрузитьКолонку("Партия2");
	//		Фотки = ПолучениеФото(ИндКоды);
	//		итер = 0;
	//		Для каждого стр из ТЗ Цикл
	//			
	//			МассивФото = новый массив;
	//			
	//			НайденныеФотки = Новый Массив;  
	//			НайденныеФотки = Фотки[итер].urls;
	//			МассивФото = новый массив;  
	//			Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
	//				
	//				стр.колфото = 1;  
	//				
	//				Для каждого Фотка Из НайденныеФотки Цикл
	//					Текст = "";
	//					Текст = Фотка;
	//					МассивФото.Добавить(Текст);
	//				КонецЦикла; 
	//			КонецЕсли;
	//			
	//			Код = стр.Код; 
	//			Пока Лев(Код, 1) = "0" Цикл 
	//				Код = Прав(Код, СтрДлина(Код) - 1);
	//			КонецЦикла;
	//			СтруктураТоваров = Новый Структура;
	//			СтруктураТоваров.Вставить("name",    Строка(стр.Товар));
	//			СтруктураТоваров.Вставить("position", Строка(стр.НомерСтроки));
	//			СтруктураТоваров.Вставить("car",    Строка(стр.Автомобиль));
	//			СтруктураТоваров.Вставить("count", Строка(стр.Количество));		
	//			СтруктураТоваров.Вставить("sum",    Строка(стр.ОбщЦена));
	//			СтруктураТоваров.Вставить("issued",    Строка(стр.СостояниеТовара));
	//			СтруктураТоваров.Вставить("Code",     Строка("00"+Код));
	//			СтруктураТоваров.Вставить("indcode", Строка(стр.Партия));
	//			СтруктураТоваров.Вставить("place", Строка(ПолучитьМесто(стр.Партия)));	
	//			СтруктураТоваров.Вставить("photos", МассивФото);  
	//			СтруктураТоваров.Вставить("article",  Строка(стр.Артикул));
	//			СтруктураТоваров.Вставить("k",        ЕстьНаКСкладе(стр.Товар)); 
	//			СтруктураТоваров.Вставить("rvr",        ЕстьНаПолкеРВРВ(стр.Товар));
	//			СтруктураТоваров.Вставить("poddon",    Строка(ПолучитьПоддон(стр.Партия))); 
	//			МассивТоваров.Добавить(СтруктураТоваров); 
	//			итер = итер+1;
	//			
	//		КонецЦикла; 
	//	КонецЕсли;
	//КонецЦикла;	
	//
	//СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	//СтруктураОтвета.Вставить("data",МассивТоваров);
	//
	//ЗаписьJSON = Новый ЗаписьJSON;
	//ЗаписьJSON.УстановитьСтроку();
	//
	//ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	//
	//СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	//
	//Ответ = Новый HTTPСервисОтвет(200);	
	//Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	//
	//Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция СменаCтатусаТоваровВПеремещенииchangestatemove(Запрос)
	запросзаявки = Новый Запрос;
	запросзаявки.Текст = СтрЗаменить(текстДляПеремещения(), "&Фильтр", "");
	запросзаявки.УстановитьПараметр("Номер",Запрос.ПараметрыURL["Num"] ); 
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	ИндКод  = Массив.IndCode;
	
	Если Массив.pose <> "" Тогда
		Позиция = Число(Массив.pose);
	КонецЕсли;
	Автор 	= Массив.author;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	Отбор = Новый Структура();
	Отбор.Вставить("Товар", Номенклатура);
	Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
	
	Пока выборка.Следующий() Цикл		
		ОбъектПерем = Выборка.ссылка.ПолучитьОбъект();
		//ОбъектНаряда = Документы.ЗаказНаряд.СоздатьДокумент();   
		Если Массив.type = "Нет в наличии" Тогда
			СтрокаТЧ = ОбъектПерем.Товары[Позиция-1]; 
			
			СтрокаТЧ.СостояниеТовара = Перечисления.СтатусыПеремещений.НетВНаличии; 
			
			ТекстЛога =  " В перемещении " + ОбъектПерем.номер + " установил нет в наличии в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех. Нет в наличии " + строка(СтрокаТЧ.Товар) );
			
			//@skip-check query-in-loop
			Если ПроверкаПеремещения(Запрос.ПараметрыURL["Num"], "Собрано") Тогда
				Для каждого стр из ОбъектПерем.товары Цикл
					Если стр.СостояниеТовара = Перечисления.СтатусыПеремещений.Собрано Тогда
						стр.СостояниеТовара = Перечисления.СтатусыПеремещений.КОтправке;
					КонецЕсли;
				КонецЦикла;
				ОбъектПерем.Статус = Перечисления.СтатусыПеремещений.КОтправке; 
				ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);	
			КонецЕсли;
			//Возврат Ответ;
		ИначеЕсли Массив.type = "Собрано" ИЛИ Массив.type = "Принят" Тогда
			
			///+ГомзМА 26.01.2024
			Если Массив.type = "Собрано" Тогда
				СтатусТЧ = Перечисления.СтатусыПеремещений.Собрано;
			ИначеЕсли Массив.type = "Принят" Тогда
				СтатусТЧ = Перечисления.СтатусыПеремещений.Принят;
			КонецЕсли;
			///-ГомзМА 26.01.2024
			
			///+ГомзМА 20.02.2024
			//Определение полки
			Если ОбъектПерем.СкладПолучатель = Справочники.Склады.НайтиПоКоду("000000005") Тогда //Москва
				Стеллаж = Справочники.Стеллаж.НайтиПоКоду("000002014"); //RegionMSK
			ИначеЕсли ОбъектПерем.СкладПолучатель = Справочники.Склады.НайтиПоКоду("000000008") Тогда //Екатеринбург
				Стеллаж = Справочники.Стеллаж.НайтиПоКоду("000001068"); //RegionEKB
			Иначе
				Стеллаж = Справочники.Стеллаж.НайтиПоКоду("000002015"); //RegionNN
			КонецЕсли;
			///-ГомзМА 20.02.2024
			
			НайденныеСтроки = ОбъектПерем.Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.количество() > 0 Тогда 
				//Если Массив.type = 0 Тогда
				СтрокаТЧ = ОбъектПерем.Товары[НайденныеСтроки[0].НомерСтроки-1]; 
				//СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
				СтрокаТЧ.партия = партия; 
				//@skip-check query-in-loop
				СтрокаТЧ.Автомобиль = ПолучитьМашину(партия);
				//  СтрокаТЧ.Склад = ОбъектПерем.склад; 
				СтрокаТЧ.СостояниеТовара = СтатусТЧ;
				
				///-ГомзМА 05.02.2024
				//Изменение стеллажа
				Если Массив.type = "Собрано" Тогда
					//УказатьРегиональнуюПолку
					ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
					ЗаписьВРегистреСведений.индкод 	= Справочники.ИндКод.НайтиПоНаименованию(Партия);
					ЗаписьВРегистреСведений.Прочитать();
					Если ЗаписьВРегистреСведений.Выбран() Тогда
						Лог =  " сменил стеллаж с " + ЗаписьВРегистреСведений.Стеллаж + " на " + Стеллаж; 
						ЛогированиеИндНомера(ЗаписьВРегистреСведений.индкод, Автор, Лог, Стеллаж,, ЗаписьВРегистреСведений.Стеллаж);
						ЗаписьВРегистреСведений.Стеллаж = Стеллаж;
						ЗаписьВРегистреСведений.Поддон = Справочники.Поддоны.ПустаяСсылка();
						ЗаписьВРегистреСведений.Записать();
					КонецЕсли;	
				КонецЕсли;	
				///-ГомзМА 05.02.2024
				
				ТекстЛога =  " В продаже " + ОбъектПерем.номер + " установил партию в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
				ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);	 
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки("Успех. Партия установлена для " + строка(СтрокаТЧ.Товар) );
				//Возврат Ответ;
			Иначе
				Отбор = Новый Структура();
				Отбор.Вставить("Товар", Номенклатура);
				Отбор.Вставить("Партия", партия);
				НайденныеСтроки = ОбъектПерем.Товары.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.количество() > 0 Тогда 
					
					СтрокаТЧ = ОбъектПерем.Товары[НайденныеСтроки[0].НомерСтроки-1]; 
					//Новаястрока.Партия = партия;
					//Новаястрока.Товар = Номенклатура; 
					//Новаястрока.Количество = 1;
					//Новаястрока.машина = ПолучитьМашину(партия);
					СтрокаТЧ.СостояниеТовара = СтатусТЧ;
					
					///-ГомзМА 20.02.2024
					//Изменение стеллажа
					Если Массив.type = "Собрано" Тогда
						//УказатьРегиональнуюПолку
						ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
						ЗаписьВРегистреСведений.индкод 	= Справочники.ИндКод.НайтиПоНаименованию(СтрокаТЧ.Партия);
						ЗаписьВРегистреСведений.Прочитать();
						Если ЗаписьВРегистреСведений.Выбран() Тогда
							Лог =  " сменил стеллаж с " + ЗаписьВРегистреСведений.Стеллаж + " на " + Стеллаж; 
							ЛогированиеИндНомера(ЗаписьВРегистреСведений.индкод, Автор, Лог, Стеллаж,, ЗаписьВРегистреСведений.Стеллаж);
							ЗаписьВРегистреСведений.Стеллаж = Стеллаж;
							ЗаписьВРегистреСведений.Поддон = Справочники.Поддоны.ПустаяСсылка();
							ЗаписьВРегистреСведений.Записать();
						КонецЕсли;	
					КонецЕсли;	
					///-ГомзМА 20.02.2024
					
					//Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
					//Новаястрока.Склад = ОбъектПерем.склад; 	
					
					ТекстЛога =  " В продаже " + ОбъектПерем.номер + " добавил партию в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
					ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
					ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение); 
					
					Ответ = Новый HTTPСервисОтвет(200);
					Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки(Массив.type);
					//Возврат Ответ;
				Иначе
					Новаястрока = ОбъектПерем.Товары.Добавить();
					Новаястрока.Партия = партия;
					Новаястрока.Товар = Номенклатура; 
					Новаястрока.Количество = 1;
					//@skip-check query-in-loop
					Новаястрока.Автомобиль = ПолучитьМашину(партия);
					Новаястрока.СостояниеТовара = СтатусТЧ;
					Новаястрока.Цена = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец.РекомендованаяЦена;
					//Новаястрока.Склад = ОбъектПерем.склад; 	
					
					ТекстЛога =  " В продаже " + ОбъектПерем.номер + " добавил партию в товаре " + Новаястрока.Товар + " "+ Новаястрока.Партия; 
					ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
					ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение); 
					
					Ответ = Новый HTTPСервисОтвет(200);
					Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки("Успех. Строка добавлена");
					
				КонецЕсли;
			КонецЕсли;
			
			//@skip-check query-in-loop
			Если ПроверкаПеремещения(Запрос.ПараметрыURL["Num"], Массив.type) Тогда
				Если Массив.type = "Собрано" Тогда	
					Для каждого стр из ОбъектПерем.товары Цикл
						Если стр.СостояниеТовара = Перечисления.СтатусыПеремещений.Собрано Тогда
							стр.СостояниеТовара = Перечисления.СтатусыПеремещений.КОтправке;
						КонецЕсли;
					КонецЦикла;
					ОбъектПерем.Статус = Перечисления.СтатусыПеремещений.КОтправке; 
					ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);	
				ИначеЕсли Массив.type = "Принят" Тогда
					ОбъектПерем.Статус = Перечисления.СтатусыПеремещений.Принят; 
					ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЕсли;
			///+ГомзМА 26.01.2024	
		ИначеЕсли Массив.type = "Отправлен" Тогда
			Для каждого СтрокаТЧ Из ОбъектПерем.Товары Цикл
				Если СтрокаТЧ.СостояниеТовара <> Перечисления.СтатусыПеремещений.НетВНаличии Тогда
					СтрокаТЧ.СостояниеТовара = Перечисления.СтатусыПеремещений.Отправлен;
				КонецЕсли;
			КонецЦикла;
			
			ОбъектПерем.Статус = Перечисления.СтатусыПеремещений.Отправлен;
			ТекстЛога =  " Отправил перемещение " + ОбъектПерем.номер; 
			ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
			ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);	 
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех. Перемещение " + ОбъектПерем.номер + " отправлено");
			///-ГомзМА 26.01.2024
		КонецЕсли;
		
		//Если ПроверкаПеремещения(Запрос.ПараметрыURL["Num"]) Тогда
		//	
		//	Для каждого стр из ОбъектПерем.товары Цикл
		//		Если стр.СостояниеТовара = Перечисления.СтатусыПеремещений.Собрано Тогда
		//			стр.СостояниеТовара = Перечисления.СтатусыПеремещений.КОтправке;
		//		КонецЕсли;
		//	КонецЦикла;
		//	ОбъектПерем.Статус = Перечисления.СтатусыПеремещений.КОтправке; 
		//	ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение);	
		//Иначе
		//	
		//КонецЕсли;
		
		Возврат Ответ;	
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не Найдена продажа!");
	Возврат Ответ;	
	
КонецФункции 

Функция ПолучитьСтруктуруТоваровПеремещения(Номер)  
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыПеремещений.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Статусы
	|ИЗ
	|	Перечисление.СтатусыПеремещений КАК СтатусыПеремещений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПеремещениеТоваровТовары.НомерСтроки) КАК КоличествоСтрок,
	|	ПеремещениеТоваровТовары.СостояниеТовара КАК Состояние
	|ПОМЕСТИТЬ ВТ_Условие
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.СостояниеТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Статусы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ВТ_Условие.КоличествоСтрок, 0) КАК КоличествоСтрок
	|ИЗ
	|	ВТ_Статусы КАК ВТ_Статусы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Условие КАК ВТ_Условие
	|		ПО ВТ_Статусы.Ссылка = ВТ_Условие.Состояние";
	Запрос.УстановитьПараметр("Номер",Номер);
	Выборка = Запрос.Выполнить().Выбрать(); 
	массивТоваров = Новый массив;
	пока Выборка.Следующий() цикл
		СтруктураСтатусов = Новый Структура;
		СтруктураСтатусов.Вставить("state",Строка(Выборка.Ссылка));
		СтруктураСтатусов.Вставить("count",Строка(Выборка.КоличествоСтрок));
		массивТоваров.Добавить(СтруктураСтатусов);
	КонецЦикла;
	Возврат массивТоваров;	
КонецФункции

Функция ПроверкаПеремещения(Номер, Статус)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПеремещениеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Всего
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПеремещениеТоваровТовары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_отбор
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка.Номер = &Номер
	|	И (ПеремещениеТоваровТовары.СостояниеТовара = Значение(Перечисление.СтатусыПеремещений.НетВНаличии)
	|	ИЛИ ПеремещениеТоваровТовары.СостояниеТовара = Значение(Перечисление.СтатусыПеремещений.&Статус))
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Всего.НомерСтроки КАК Итог,
	|	ВТ_отбор.НомерСтроки КАК Отбор
	|ИЗ
	|	ВТ_Всего КАК ВТ_Всего
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_отбор КАК ВТ_отбор
	|		ПО ВТ_Всего.Ссылка = ВТ_отбор.Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Статус", Статус);
	Запрос.УстановитьПараметр("Номер", Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	///+ГомзМА 26.01.2024
	Если Выборка.Итог <> Неопределено ИЛИ Выборка.Отбор <> Неопределено Тогда
		Разность = Выборка.итог - Выборка.отбор;
	Иначе
		Разность = Неопределено;
	КонецЕсли;
	///-ГомзМА 26.01.2024
	
	Если Разность =0 тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СменаСтатусаЗадачиChangeStateTask(Запрос)
запросЗадачи = Новый Запрос;
	запросЗадачи.Текст = текстДляЗадачи();
	запросЗадачи.УстановитьПараметр("Номер",Запрос.ПараметрыURL["id"] ); 
	Выборка = запросЗадачи.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив   = ПрочитатьJSON(ЧтениеJSON);
	статус   = Число(Массив.state);
	//Позиция  = Число(Массив.pose);
	Автор 	 = Массив.author;
	Юзер     = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	ИдентификаторЗаказНарядаНаВосстановление = Массив.id_order;
	Если статус = 1 тогда 
		Состояние = Перечисления.СтатусыЗадач.ВРаботе;
		ОднаРабочаяЗадача(Юзер);
		ДокОбъект = Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]).ПолучитьОбъект();
		ДокОбъект.Исполнитель = Юзер;
		ДокОбъект.Записать();
		///+ГомзМА 27.02.2024
		//ЗаписьРегистраСведений 				= РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
		//ЗаписьРегистраСведений.Задача 		= Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]);
		//ЗаписьРегистраСведений.Прочитать();
		//Если ЗаписьРегистраСведений.Выбран() Тогда
		//	СдвинутьПорядокЗадачКНачалу(ЗаписьРегистраСведений.Приоритет, ЗаписьРегистраСведений.Ответственный);
		//	ПоставитьПервуюЗадачуВКонецПриоритета(ЗаписьРегистраСведений.Ответственный);
		//	ЗаписьРегистраСведений.Приоритет = 1;
		//	ЗаписьРегистраСведений.Записать();
		//КонецЕсли;
		///-ГомзМА 27.02.2024
	Иначеесли статус = 2 тогда 
		Состояние = Перечисления.СтатусыЗадач.Выполнена;
		///+ГомзМА 27.02.2024
		ЗаписьРегистраСведений 				= РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.Задача 		= Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]);
		ЗаписьРегистраСведений.Прочитать();
		Если ЗаписьРегистраСведений.Выбран() Тогда
			СдвинутьПорядокЗадачКНачалу(ЗаписьРегистраСведений.Приоритет, ЗаписьРегистраСведений.Направление);
			ЗаписьРегистраСведений.Удалить();
		КонецЕсли;
		
		///+ГомзМА 17.04.2024
		Если Массив.id_order <> "" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка КАК Ссылка,
				|	Рас_КомплектовкаРаботыСписок.НомерСтроки
				|ИЗ
				|	Документ.Рас_Комплектовка.РаботыСписок КАК Рас_КомплектовкаРаботыСписок
				|ГДЕ
				|	Рас_КомплектовкаРаботыСписок.ИдентификаторСтрока = &ИдентификаторСтроки";
			
			Запрос.УстановитьПараметр("ИдентификаторСтроки", Массив.id_order);
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			
			Если РезультатЗапроса.Количество() > 0 Тогда
				Пока РезультатЗапроса.Следующий() Цикл
					ДокОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
					Для Каждого СтрокаТЧ Из ДокОбъект.РаботыСписок Цикл
						Если СтрокаТЧ.НомерСтроки = РезультатЗапроса.НомерСтроки Тогда
							СтрокаТЧ.СтатусРаботы = Перечисления.СостояниеВосстановленияДетали.НаПроверке;
						КонецЕсли;
						ДокОбъект.Записать();
					КонецЦикла;
				КонецЦикла;
			Иначе
				///+СергеевФВ 25.04.2024
				Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗаказНарядРаботы.Ссылка.Ссылка КАК Ссылка,
				|	ЗаказНарядРаботы.НомерСтроки
				|ИЗ
				|	Документ.ЗаказНаряд.Работы КАК ЗаказНарядРаботы
				|ГДЕ
				|	ЗаказНарядРаботы.ИдентификаторСтрока = &ИдентификаторСтроки";
			
			Запрос.УстановитьПараметр("ИдентификаторСтроки", Массив.id_order);
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			
			Если РезультатЗапроса.Количество() > 0 Тогда
				Пока РезультатЗапроса.Следующий() Цикл
					ДокОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
					Для Каждого СтрокаТЧ Из ДокОбъект.Работы Цикл
						Если СтрокаТЧ.НомерСтроки = РезультатЗапроса.НомерСтроки Тогда
							СтрокаТЧ.СтатусРаботы = Перечисления.СостояниеВосстановленияДетали.НаПроверке;
						КонецЕсли;
						ДокОбъект.Записать();
					КонецЦикла;
				КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		///-ГомзМА 17.04.2024
		
		///-ГомзМА 27.02.2024
	Иначеесли статус = 3 тогда //Пауза
		///+ГомзМА 19.03.2024
		Состояние = Перечисления.СтатусыЗадач.Отложена;
		ДокОбъект = Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]).ПолучитьОбъект();
		//ДокОбъект.Статус = Перечисления.СтатусыЗадач.Отложена;
		ЗакрытьВремяЗадачи(ДокОбъект.ссылка, ДокОбъект.Исполнитель);
		//ДокОбъект.Записать();
		///-ГомзМА 19.03.2024
	Иначеесли статус = 4 тогда
		Состояние = Перечисления.СтатусыЗадач.Отменена;
		///+ГомзМА 27.02.2024
		ЗаписьРегистраСведений 				= РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.Задача 		= Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]);
		ЗаписьРегистраСведений.Прочитать();
		Если ЗаписьРегистраСведений.Выбран() Тогда
			СдвинутьПорядокЗадачКНачалу(ЗаписьРегистраСведений.Приоритет, ЗаписьРегистраСведений.Направление);
			ЗаписьРегистраСведений.Удалить();
		КонецЕсли;
		///-ГомзМА 27.02.2024
	Иначеесли статус = 5 тогда //Возврат из отмененных и выполненных
		Состояние = Перечисления.СтатусыЗадач.Отложена;
		///+ГомзМА 27.02.2024
		ВозвратнаяЗадача = Новый Запрос;
		ВозвратнаяЗадача.Текст = 
		"ВЫБРАТЬ
		|	Задача.Ссылка КАК Задача,
		|	Задача.Направление КАК Направление,
		|	Задача.Исполнитель КАК Исполнитель
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.Ссылка = &Ссылка";
		
		ВозвратнаяЗадача.УстановитьПараметр("Ссылка", Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]));
		
		РезультатЗапросаЗадача = ВозвратнаяЗадача.Выполнить().Выбрать();
		
		Если РезультатЗапросаЗадача.Количество() > 0 Тогда
			РезультатЗапросаЗадача.Следующий();
			ДокОбъект = РезультатЗапросаЗадача.Задача.ПолучитьОбъект();
			ДокОбъект.Статус = Перечисления.СтатусыЗадач.Отложена;
			ДокОбъект.Записать();
			ПоставитьПриоритетЗадачи(РезультатЗапросаЗадача.Задача, РезультатЗапросаЗадача.Направление);
		КонецЕсли;
		
		///-ГомзМА 27.02.2024
	КонецЕсли;

	Пока выборка.Следующий() Цикл 
		
		ОбъектЗадачи = Выборка.ссылка.ПолучитьОбъект();
		
		Попытка
			ОбъектЗадачи.статус = Состояние;
			если статус = 2 тогда
				ОбъектЗадачи.ДатаОкончанияФакт = ТекущаяДата();	
				//@skip-check query-in-loop
				ЗакрытьВремяЗадачи(Выборка.ссылка,ОбъектЗадачи.Исполнитель);
				
				НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
				НаборЗаписей.Отбор.Пользователь.Установить(выборка.Автор);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 1 Тогда
					ТекстЛога = " ❤❤Выполнил задачу❤❤ - " + выборка.номер + " " +выборка.Наименование ;
					Телега = НаборЗаписей[0].ID_Пользователя;
					ТекстЛога = Строка(выборка.Исполнитель) + ТекстЛога;
					Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
				Иначе 
					
				КонецЕсли;
			КонецЕсли;
			
			если статус = 1 тогда
				ОткрытьВремяЗадачи(Выборка.ссылка,ОбъектЗадачи.Исполнитель);
			Иначе
				//@skip-check query-in-loop
				ЗакрытьВремяЗадачи(Выборка.ссылка,ОбъектЗадачи.Исполнитель);
			КонецЕсли;
			
			ОбъектЗадачи.Записать();
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Возврат Ответ;
		Исключение
			
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Не удалось сменить статус задачи!");
			Возврат Ответ;
		КонецПопытки;
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не верные данные");
	Возврат Ответ;
	
	
КонецФункции


Функция СменаПриоритетаЗадачиChangePriorityTask(Запрос)
	
		///+ГомзМА 27.02.2024
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	СтруктураОтвета = Новый Структура;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Массив   	= ПрочитатьJSON(ЧтениеJSON);
	Приоритет   = Число(Массив.priority);
	Автор 	 	= Массив.author;
	
	//Проверка на количество задач
	ЗапросКоличесвоЗадач = Новый Запрос;
	ЗапросКоличесвоЗадач.Текст = 
	"ВЫБРАТЬ
	|	ПриоритетыЗадач.Задача КАК Задача
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Направление = &Направление
	|	И ПриоритетыЗадач.Приоритет > 0";
	
	ЗапросКоличесвоЗадач.УстановитьПараметр("Направление", Справочники.Подразделения.НайтиПоКоду(Запрос.ПараметрыURL["direction"]));
	
	РезультатЗапроса = ЗапросКоличесвоЗадач.Выполнить().Выбрать();
	
	Если Приоритет > РезультатЗапроса.Количество() Тогда
		Приоритет = РезультатЗапроса.Количество();
	КонецЕсли;
	
	ЗаписьРегистраСведений 				= РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.Задача 		= Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]);
	ЗаписьРегистраСведений.Прочитать();
	Если ЗаписьРегистраСведений.Выбран() И ЗаписьРегистраСведений.Задача <> Документы.Задача.ПустаяСсылка() Тогда
		Если ЗаписьРегистраСведений.Приоритет > Приоритет Тогда
			СдвинутьПорядокЗадачПлюсОдин(ЗаписьРегистраСведений.Приоритет, Приоритет, ЗаписьРегистраСведений.Направление);
		Иначе 
			СдвинутьПорядокЗадачККонцу(Приоритет, ЗаписьРегистраСведений.Приоритет, ЗаписьРегистраСведений.Направление);
		КонецЕсли;
		
		ЗаписьРегистраСведений.Приоритет = Приоритет;
		ЗаписьРегистраСведений.Записать();
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		СтруктураОтвета.Вставить("res", "Приоритет успешно установлен!");
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	СтруктураОтвета.Вставить("res", "Задача не найдена!");
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	///-ГомзМА 27.02.2024
	
КонецФункции

Функция СменаОтветственногоЗадачиChangeExecutorTask(Запрос)
	запросЗадачи = Новый Запрос;
	запросЗадачи.Текст = текстДляЗадачи();
	запросЗадачи.УстановитьПараметр("Номер",Запрос.ПараметрыURL["id"] ); 
	Выборка = запросЗадачи.Выполнить().Выбрать();
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив   = ПрочитатьJSON(ЧтениеJSON);
	//статус   = Число(Массив.state);
	//Позиция  = Число(Массив.pose);
	
	Автор 	 = Массив.author;
	Юзер     = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	
	Исполнитель = Справочники.Сотрудники.НайтиПоКоду(Массив.executor).Пользователь; 
	
	Пока выборка.Следующий() Цикл 
		
		ОбъектЗадачи = Выборка.ссылка.ПолучитьОбъект();
		
		Попытка
			//@skip-check query-in-loop
			ЗакрытьВремяЗадачи(Выборка.ссылка,ОбъектЗадачи.исполнитель);
			ОбъектЗадачи.исполнитель = Исполнитель;
			ОбъектЗадачи.Статус = Перечисления.СтатусыЗадач.Отложена;
			ОбъектЗадачи.Записать();
			
			/////+ГомзМА 05.03.2024
			//ЗаписьРегистраСведений 				= РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
			//ЗаписьРегистраСведений.Задача 		= Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]);
			//ЗаписьРегистраСведений.Прочитать();
			//Если ЗаписьРегистраСведений.Выбран() Тогда
			//	СдвинутьПорядокЗадачКНачалу(ЗаписьРегистраСведений.Приоритет, ЗаписьРегистраСведений.Ответственный);
			//	ЗаписьРегистраСведений.Удалить();
			//КонецЕсли;
			//
			//ВозвратнаяЗадача = Новый Запрос;
			//ВозвратнаяЗадача.Текст = 
			//"ВЫБРАТЬ
			//|	Задача.Ссылка КАК Задача,
			//|	Задача.Исполнитель КАК Исполнитель
			//|ИЗ
			//|	Документ.Задача КАК Задача
			//|ГДЕ
			//|	Задача.Ссылка = &Ссылка";
			//
			//ВозвратнаяЗадача.УстановитьПараметр("Ссылка", Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]));
			//
			//РезультатЗапросаЗадача = ВозвратнаяЗадача.Выполнить().Выбрать();
			//
			//Если РезультатЗапросаЗадача.Количество() > 0 Тогда
			//	РезультатЗапросаЗадача.Следующий();
			//	ПоставитьПриоритетЗадачи(РезультатЗапросаЗадача.Задача, РезультатЗапросаЗадача.Исполнитель);
			//КонецЕсли;
			/////-ГомзМА 05.03.2024
			
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			

			НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
			НаборЗаписей.Отбор.Пользователь.Установить(Исполнитель);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				ТекстЛога = " На вас переведена задача - " + ОбъектЗадачи.номер + " " +ОбъектЗадачи.Наименование + символы.ПС + "Автор: " + Строка(ОбъектЗадачи.Ответственный);
				Телега = НаборЗаписей[0].ID_Пользователя;
				ТекстЛога = Строка(Исполнитель) + ТекстЛога;
			
				
				Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 
			КонецЕсли;	
			Возврат Ответ;
			
		Исключение
			
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Не удалось сменить ответственного задачи!");
		КонецПопытки;	
		
		Возврат Ответ;
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не верные данные");
	Возврат Ответ;	
	
	
КонецФункции



Процедура ЗакрытьВремяЗадачи(Задача,Ответственный)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВремяВыполненияЗадач.Задача КАК Задача,
	|	ВремяВыполненияЗадач.ДатаСреза КАК ДатаСреза
	|ИЗ
	|	РегистрСведений.ВремяВыполненияЗадач КАК ВремяВыполненияЗадач
	|ГДЕ
	|	ВремяВыполненияЗадач.Задача = &Задача
	|	И ВремяВыполненияЗадач.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяВыполненияЗадач.ДатаСреза УБЫВ";
	Запрос.УстановитьПараметр("Задача",Задача);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 тогда
		Выборка.Следующий();
		НаборЗаписей = РегистрыСведений.ВремяВыполненияЗадач.СоздатьНаборЗаписей();  			
		НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);
		НаборЗаписей.Отбор.ДатаСреза.Установить(Выборка.ДатаСреза);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда	
			НашЗамер = НаборЗаписей[0];
			НашЗамер.КонецЗамера = ТекущаяДата();
			НашЗамер.Срок		 = НашЗамер.КонецЗамера - НашЗамер.НачалоЗамера;
			НаборЗаписей.Записать();
		КонецЕсли; 	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьВремяЗадачи(Задача,Ответственный)
	
	НаборЗаписей = РегистрыСведений.ВремяВыполненияЗадач.СоздатьМенеджерЗаписи();  			
	
	НаборЗаписей.Задача = Задача;
	НаборЗаписей.ДатаСреза = ТекущаяДата();
	НаборЗаписей.НачалоЗамера = ТекущаяДата();
	НаборЗаписей.Ответственный = Ответственный;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОднаРабочаяЗадача(текПользователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Исполнитель = &Исполнитель
	|	И Задача.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.ВРаботе)";
	
	Запрос.УстановитьПараметр("Исполнитель", текПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Док = Выборка.Ссылка.ПолучитьОбъект();
		//@skip-check query-in-loop
		ЗакрытьВремяЗадачи(Выборка.ссылка,Док.исполнитель);
		Док.Статус = Перечисления.СтатусыЗадач.Отложена;
		Док.Записать();
		//Сообщить("" + Док.Ссылка + " переведена в статус Отложена");
		
	КонецЦикла;
	
	
КонецПроцедуры


Функция Памагитеsos(Запрос)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user"]).Пользователь;
	ТекстЛога = " Призывает Олега на помощь!";
	Telegram_Сервер.ОтправитьСообщениеПользователю("363606625",   Строка(Автор) + ТекстЛога);
	ТекстЛога = " Призывает Димана на помощь!";
	Telegram_Сервер.ОтправитьСообщениеПользователю("712676193",   Строка(Автор) + ТекстЛога);
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Призыв осуществлён!");
	Возврат Ответ;
КонецФункции


Функция ПолучитьНайдёнышиgetfind(Запрос)
	НачалоОтбора = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	КонецОтбора  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	
	ЗапросТоваров = Новый запрос;
	ЗапросТоваров.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК индкод
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|ГДЕ
	|	ЛогИндНомера.ПредыдущийПоддон = &Поддон
	|	И ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания";
	ЗапросТоваров.УстановитьПараметр("Поддон",Справочники.Поддоны.НайтиПоКоду("000000003"));
	ЗапросТоваров.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросТоваров.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	Выборка = ЗапросТоваров.Выполнить().Выбрать(); 
	СтруктураСтатусов = Новый Структура;
	
	Если Выборка.Количество() > 0 тогда
		Выборка.Следующий();
		СтруктураСтатусов.Вставить("count",Выборка.индкод);	
	иначе
		СтруктураСтатусов.Вставить("count", 0);	
	КонецЕсли;
	
	
	
	СтруктураСтатусов.Вставить("count",Выборка.индкод);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураСтатусов);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;	
КонецФункции

Функция ГлобальноВыдатьПродажуglobalissueasale(Запрос)
	запросПродажи = Новый Запрос;
	запросПродажи.Текст = текстДляПродажи();
	запросПродажи.УстановитьПараметр("Номер",Запрос.ПараметрыURL["num"] ); 
	Выборка = запросПродажи.Выполнить().Выбрать();
	
	Структураответа = Новый структура;
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	выдано = 0;
	ИндКод  = Массив.ind_code;
	Автор 	= Массив.author;
	партия = Справочники.ИндКод.НайтиПоНаименованию(ИндКод);
	
	Номенклатура = Справочники.ИндКод.НайтиПоНаименованию(ИндКод).Владелец;
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();                                    
	
	
	
	автор = Массив.author;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Товар", Номенклатура);
	Отбор.Вставить("Партия", партия);
	Попытка 
		Пока выборка.Следующий() Цикл
			ОбъектПродажи = Выборка.ссылка.ПолучитьОбъект();
			НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор); 
			
			Если НайденныеСтроки.количество() > 0 Тогда 
				
				Позиция = НайденныеСтроки[0].НомерСтроки; 
				
				ОбъектПродажи.датаСписания = ТекущаяДата();	
				СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1];
				СтрокаТЧ.статусТовара = Истина;
				СтрокаТЧ.ДатаВыдачи = ТекущаяДата();
				СтрокаТЧ.ОтветственныйЗаВыдачу = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
				ТекстЛога =  " В продаже: " + ОбъектПродажи.номер + " выдан товар " +СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
				ЛогированиеWT10(ОбъектПродажи.ссылка,Автор,ТекстЛога);
				Если СтрокаТЧ.Склад = Справочники.Склады.ПустаяСсылка() или ОбъектПродажи.таблица[Позиция-1].Склад = неопределено тогда		
					СтрокаТЧ.Склад = ОбъектПродажи.склад;
				КонецЕсли;
				//выдано = выдано +1; 
				//КонецЦикла;
				товары = Выборка.Таблица.Выбрать();
				Пока  товары.Следующий() цикл 
					Если товары.СтатусТовара и НЕ товары.Отменено Тогда
						выдано = 1;	
					КонецЕсли;
					
				КонецЦикла;
				
				Если выдано = 0 тогда
					Заказ = Выборка.ЗаказКлиента.ПолучитьОбъект();
					ОбъектПродажи.СтатусОбработки =  Перечисления.СтатусыОбработкиЗаявок.Упаковывается;
					////Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада"); 
					//Telegram_Сервер.ОтправитьСообщениеПользователю(пользТелеги(ОбъектПродажи.КтоПродал), "товары по продаже " + ОбъектПродажи.Номер + " выданы со склада");
					ОбъектПродажи.ОтветственныйКладовщик = Справочники.Пользователи.ПустаяСсылка();
					//ОбъектПродажи.записать();  
				конецесли;
				
				ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " выдал товар " + ОбъектПродажи.таблица[Позиция-1].Товар + " "+ ОбъектПродажи.таблица[Позиция-1].Партия; 
				ЛогированиеWT10(Выборка.ссылка,Массив.author,ТекстЛога);
				ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение); 
				
				Структураответа.Вставить("res","Успех. Выдан товар "+ строка(СтрокаТЧ.Товар));
				ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
				СтрокаДляОтвета = ЗаписьJSON.Закрыть();
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
				Возврат Ответ;
				
			Иначе
				Отбор = Новый Структура();
				Отбор.Вставить("Товар", Номенклатура);
				Отбор.Вставить("Партия", Справочники.ИндКод.ПустаяСсылка());
				НайденныеСтроки = ОбъектПродажи.Таблица.НайтиСтроки(Отбор);
				
				СтрокаТЧ = ОбъектПродажи.Таблица[НайденныеСтроки[0].НомерСтроки-1]; 
				//СтрокаТЧ = ОбъектПродажи.Таблица[Позиция-1]; 
				СтрокаТЧ.партия = партия; 
				//@skip-check query-in-loop
				СтрокаТЧ.машина = ПолучитьМашину(партия);
				СтрокаТЧ.Склад = ОбъектПродажи.склад; 
				СтрокаТЧ.СтатусТовара = Истина;
				СтрокаТЧ.ДатаВыдачи = ТекущаяДата();
				СтрокаТЧ.ОтветственныйЗаВыдачу = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
				
				ТекстЛога =  " В продаже " + ОбъектПродажи.номер + " установил партию в товаре " + СтрокаТЧ.Товар + " "+ СтрокаТЧ.Партия; 
				ЛогированиеWT10(Выборка.ссылка,Автор,ТекстЛога);
				ОбъектПродажи.Записать(РежимЗаписиДокумента.Проведение);
				
				Структураответа.Вставить("res","Успех. Партия установлена для " + строка(СтрокаТЧ.Товар) + " и выдана!");
				//Структураответа.Вставить("res","Такого товара нет в продаже!");
				ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
				СтрокаДляОтвета = ЗаписьJSON.Закрыть();
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
				Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
				Возврат Ответ;
				
			КонецЕсли;
		КонецЦикла;
	Исключение
		Структураответа.Вставить("res","Такого товара нет в продаже!");
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Возврат Ответ;
	КонецПопытки;
	
	Структураответа.Вставить("res","Такого товара нет в продаже!");
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ; 
	
КонецФункции


Функция ЗавершитьОтсчётПродажи(Продажа,Статус,Ответственный)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВремяРаботыСПродажами.Продажа КАК Продажа,
	|	ВремяРаботыСПродажами.Период КАК Период
	|ИЗ
	|	РегистрСведений.ВремяРаботыСПродажами КАК ВремяРаботыСПродажами
	|ГДЕ
	|	ВремяРаботыСПродажами.Продажа = &Продажа
	|	И ВремяРаботыСПродажами.ДатаОкончания < ДАТАВРЕМЯ(2000, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяРаботыСПродажами.Период УБЫВ";
	Запрос.УстановитьПараметр("Продажа",Продажа);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 тогда
		Выборка.Следующий();
		НаборЗаписей = РегистрыСведений.ВремяРаботыСПродажами.СоздатьНаборЗаписей();  			
		НаборЗаписей.Отбор.Продажа.Установить(Выборка.Продажа);
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда	
			НашЗамер = НаборЗаписей[0];
			НашЗамер.ДатаОкончания  = ТекущаяДата();
			НашЗамер.СрокВыполнения = НашЗамер.ДатаОкончания - НашЗамер.ДатаНачала;
			НаборЗаписей.Записать();
		КонецЕсли; 	
	КонецЕсли;
	
	
КонецФункции  

Функция НачатьОтсчётПродажи(Продажа,Статус,Ответственный)
	
	НаборЗаписей = РегистрыСведений.ВремяРаботыСПродажами.СоздатьМенеджерЗаписи();  			
	
	НаборЗаписей.Период 	   = ТекущаяДата();
	НаборЗаписей.Продажа 	   = Продажа;
	НаборЗаписей.ДатаНачала    = ТекущаяДата();
	НаборЗаписей.Ответственный = Ответственный;  
	НаборЗаписей.СтатусПродажи = Статус;
	НаборЗаписей.Записать();
	
КонецФункции 

Функция ПолучитьСписокКарточекТоваровGetProductsList(Запрос)
	
	запросТовара = Новый Запрос;

		запросТовара.Текст =  СтрШаблон(текстДляКарточекНоменклатуры(), Формат(100000, "ЧГ="));
		запросТовара.УстановитьПараметр("наименование", "%"+Строка(Запрос.ПараметрыURL["id"])+"%" );
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
		
	ТЗ = запросТовара.Выполнить().Выбрать(); 
	ВыборкаОбщ = тз.Количество(); 
	
	запросТовара.Текст =  СтрШаблон(текстДляКарточекНоменклатуры(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],100000), "ЧГ="));
	МойПиздатыйПоиск = Строка(Запрос.ПараметрыURL["id"]);
	Если СтрНайти(МойПиздатыйПоиск,"00") = 1 Тогда
		длина = СтрДлина(МойПиздатыйПоиск);
		Пока длина < 9 Цикл
			МойПиздатыйПоиск = "0" + МойПиздатыйПоиск;
			длина = длина+1;
		КонецЦикла;
	КонецЕсли;
	запросТовара.УстановитьПараметр("наименование", "%" +ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(МойПиздатыйПоиск)+"%" );
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		запросТовара.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		запросТовара.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли; 
	
	ТЗ = запросТовара.Выполнить().Выгрузить();
	
	ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Коды",Новый ОписаниеТипов("Строка"));
	МассивТоваров = Новый Массив;
	
	Для каждого стр из ТЗ Цикл
		Код = стр.Код; 
		Пока Лев(Код, 1) = "0" Цикл 
			Код = Прав(Код, СтрДлина(Код) - 1);
		КонецЦикла;
		Стр.Коды = "00" + код;
	КонецЦикла;
		
			
	ИндКоды = тз.ВыгрузитьКолонку("Коды");
	
	
	Фотки = ПолучениеФотокарточек(ИндКоды);
	итер = 0;
	
	Для каждого стр из ТЗ Цикл
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки[итер].urls;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки<> "" Тогда
			
		//	стр.колфото = 1;  
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		итер = итер+1;
		//тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("name",    Строка(стр.Наименование));
		СтруктураТоваров.Вставить("article", Строка(стр.Артикул));
		СтруктураТоваров.Вставить("code",    Строка(стр.Код));
		
		СтруктураТоваров.Вставить("photos", МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();                                    
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьМашиныgettrucks(Запрос)
	
	ЗапросМашин = Новый запрос;
	ЗапросМашин.Текст = "ВЫБРАТЬ
	                    |	Машины.Код КАК Код,
	                    |	Машины.Наименование КАК Наименование,
	                    |	Машины.КодМашины КАК КодМашины
	                    |ИЗ
	                    |	Справочник.Машины КАК Машины";
	Выборка = ЗапросМашин.Выполнить().Выбрать();
	

	МассивМашин = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураМашин = Новый Структура;
		СтруктураМашин.Вставить("name",    	Строка(выборка.Наименование));
		СтруктураМашин.Вставить("code", 	Строка(выборка.КодМашины));
		СтруктураМашин.Вставить("id", 	    Строка(выборка.Код));
		
		МассивМашин.Добавить(СтруктураМашин);
	КонецЦикла;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивМашин);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции
///////////////////////////////////
//++Сергеев 04,03,2024
Функция СформироватьОтвет(Заголовок,Значение)
	
	СтруктураОтвета = Новый Структура;
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();                                    
	СтруктураОтвета.Вставить(Заголовок,Значение);
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Возврат СтрокаДляОтвета;
КонецФункции
	
Функция УчестьДетальconsiderproduct(Запрос)
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	
	Машина 		  = Справочники.Машины.НайтиПоКоду(Массив.truck);
	Товар  		  = Справочники.Номенклатура.НайтиПоКоду(Массив.product);
	
	НовыйИндКод   = УчестьДетальНаСервере(Машина,Товар,Массив.author);
	

	СтрокаДляОтвета = СформироватьОтвет("id",Строка(НовыйИндКод.индкод));
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
	Возврат Ответ;
 КонецФункции
 
функция УчестьДетальНаСервере(Машина,товар,Автор)
	
	Отказ = истина;
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Автор).пользователь;
	ССылкаПоступления = ПолучитьДокументПоступленияДляКонвейера();
	Если СсылкаПоступления <> неопределено тогда
		Объектпоступления = ССылкаПоступления.ПолучитьОбъект();
		Объектпоступления.Записать();
	Иначе
		Объектпоступления  = Документы.ПоступлениеЗапчастей.СоздатьДокумент();
		//	Объектпоступления = НовоеПоступление.Ссылка.ПолучитьОбъект();
		Объектпоступления.Ответственный = Ответственный;
		Объектпоступления.Конвейер = Истина; 
		Объектпоступления.Состояние = Перечисления.дт_СостоянияПоступленияЗапчастей.Выполнено; 
		Объектпоступления.Склад = Справочники.Склады.НайтиПоКоду("000000002"); 
		Объектпоступления.дата = ТекущаяДата();
		Объектпоступления.Записать();
	КонецЕсли;
	НоваяСтрока = Объектпоступления.Таблица.Добавить();
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ДокументПоступления", Объектпоступления.Ссылка);
	ДанныеЗаполнения.Вставить("ДатаПоступления", Объектпоступления.Дата);
	ДанныеЗаполнения.Вставить("Номенклатура", товар);
	ДанныеЗаполнения.Вставить("Автомобиль", Машина);
	НоваяСтрока.Партия = Справочники.ИндКод.СоздатьНовыйЭлемент(ДанныеЗаполнения, Отказ);
	НоваяСтрока.Товар = товар; 
	НоваяСтрока.автомобиль = Машина;
	НоваяСтрока.Колво = 1;
	НоваяСтрока.Ответственный = Ответственный;
	НоваяСтрока.ДатаДобавления = ТекущаяДата();
	Объектпоступления.Записать(РежимЗаписиДокумента.Проведение);
	
	об = РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
	об.индкод = НоваяСтрока.Партия;
	об.Прочитать();
	об.Код = НоваяСтрока.Партия;
	
	об.Цена = товар.РекомендованаяЦена;
	об.Стеллаж = Справочники.Стеллаж.НайтиПоКоду("000001072");
	об.индкод = НоваяСтрока.Партия;
	об.Ответственный = Ответственный;
	об.ДатаИзмененияКонвеера = ТекущаяДата(); 
	об.Состояние = Товар.Состояние;
	об.АвитоЧастник = Истина;
	об.Записать();
	
	ТекстЛогирования = " Учёл товар." + " Цена " + об.Цена + ". Стеллаж " + об.Стеллаж + ". Состояние " + об.Состояние; 
	ЛогированиеИндНомера(НоваяСтрока.Партия, Автор, ТекстЛогирования, об.Стеллаж);
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("индкод", НоваяСтрока.Партия);
	Возврат РегистрыСведений.ИндНомер.СоздатьКлючЗаписи(ЗначениеКлюча);
	
КонецФункции
Функция ПолучитьДокументПоступленияДляКонвейера()
	Запрос = новый  Запрос;
	Запрос.Текст =   "ВЫБРАТЬ
	|	ПоступлениеЗапчастейТаблица.Ссылка КАК Ссылка,
	|	СУММА(ПоступлениеЗапчастейТаблица.Колво) КАК товар
	|ИЗ
	|	Документ.ПоступлениеЗапчастей.Таблица КАК ПоступлениеЗапчастейТаблица
	|ГДЕ
	|	ПоступлениеЗапчастейТаблица.Ссылка.Конвейер
	|	И ПоступлениеЗапчастейТаблица.Ссылка.Ответственный = &Ответственный
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеЗапчастейТаблица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеЗапчастейТаблица.Ссылка.Дата УБЫВ";
	Запрос.УстановитьПараметр("Ответственный",Пользователи.ТекущийПользователь());
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		выборка.Следующий();
		Если Выборка.товар < 100 Тогда
			Возврат Выборка.ссылка; 
		Иначе  
			возврат неопределено;
		КонецЕсли;
		
	Иначе 
		возврат неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьКарточкуТовараgetcardproduct(Запрос)
	запросКарточки = Новый Запрос;
	запросКарточки.Текст = "ВЫБРАТЬ
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Бренд КАК Бренд,
	|	Номенклатура.Категория КАК Категория,
	|	Номенклатура.КтоСоздал КАК КтоСоздал,
	|	Номенклатура.МестоНаСкладе2 КАК МестоНаСкладе2,
	|	Номенклатура.Производитель КАК Производитель,
	|	Номенклатура.Состояние КАК Состояние,
	|	Номенклатура.Серия КАК Серия,
	|	Номенклатура.РекомендуемоеМестоХранения КАК РекомендуемоеМестоХранения,
	| 	Номенклатура.НомерПроизводителя КАК НомерПроизводителя,
	|   Номенклатура.РекомендованаяЦена КАК РекомендованаяЦена
	| Из
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код";
	запросКарточки.УстановитьПараметр("Код",Запрос.ПараметрыURL["id"] ); 
	Выборка = запросКарточки.Выполнить().Выбрать();
	МассивКарточки = Новый Массив;
	
	Пока выборка.Следующий() Цикл
		
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("id",Строка(выборка.Код));
		СтруктураИнфо.Вставить("article",Строка(выборка.Артикул));
		СтруктураИнфо.Вставить("name",Строка(выборка.Наименование));
		СтруктураИнфо.Вставить("brend",Строка(выборка.Бренд));
		СтруктураИнфо.Вставить("category",Строка(выборка.Категория)); 
		СтруктураИнфо.Вставить("creator",Строка(выборка.Производитель));
		СтруктураИнфо.Вставить("number_creator",Строка(выборка.НомерПроизводителя));
		СтруктураИнфо.Вставить("state",Строка(Выборка.Состояние)); 
		СтруктураИнфо.Вставить("series",Строка(Выборка.Серия));  
		СтруктураИнфо.Вставить("place",Строка(Выборка.МестоНаСкладе2));
		СтруктураИнфо.Вставить("author",Строка(Выборка.КтоСоздал)); 
		СтруктураИнфо.Вставить("cost",Строка(Выборка.РекомендованаяЦена));
		
		
		Код = выборка.Код; 
		Пока Лев(Код, 1) = "0" Цикл 
			Код = Прав(Код, СтрДлина(Код) - 1);
		КонецЦикла;
		Код = "00" + код;
		
		ИндКоды =  Новый массив;
		ИндКоды.Добавить(Код);
		
		Фотки = ПолучениеФотокарточек(ИндКоды);
		НайденныеФотки = Фотки[0].urls;
		МассивФото = новый массив;  
		
		Текст = НайденныеФотки;
		МассивФото.Добавить(Текст);
		
		СтруктураИнфо.Вставить("photos",НайденныеФотки);
		
	КонецЦикла;
	
	
	//СтруктураИнфо= новый Структура;
	//СтруктураИнфо.Вставить("Count",Цел(Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"])+1)));
	
	
	//СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	////СтруктураОтвета.Вставить("data",МассивТоваров);
	//
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураИнфо);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция СоздатьКарточкуТовараcreatecardproduct(Запрос)
Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON); 
	

	
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
    
	НоваяНоменклатура.Наименование 	   	   = Массив.name;
	НоваяНоменклатура.Серия 		 	   = Справочники.Серии.НайтипоКоду(Массив.serial);//
	НоваяНоменклатура.Категория 		   = Справочники.категории.НайтипоКоду(Массив.category);//
	НоваяНоменклатура.артикул 		   	   = Массив.article;
	НоваяНоменклатура.НомерПроизводителя   = Массив.number_creator;
	НоваяНоменклатура.МестоНаСкладе2 	   = Справочники.Стеллаж.НайтипоКоду(Массив.place);//
	НоваяНоменклатура.Бренд 			   = Справочники.Бренд.НайтипоКоду(Массив.brand);//
	НоваяНоменклатура.Производитель 	   = Справочники.Производитель.НайтипоКоду(Массив.creator);//
	НоваяНоменклатура.Состояние 		   = Перечисления.Состояние.Получить(Массив.state);//
	НоваяНоменклатура.КтоСоздал 		   = Справочники.Сотрудники.найтиПоКоду(Массив.author).Пользователь;//
	НоваяНоменклатура.ДатаСоздания 	   	   = ТекущаяДата();
	НоваяНоменклатура.Вес 			   	   = Массив.weight;
	НоваяНоменклатура.Длин         	   	   = Массив.length;
	НоваяНоменклатура.Шир 			   	   = Массив.width;
	НоваяНоменклатура.выс 			   	   = Массив.height;
	НоваяНоменклатура.Объем 			   = Массив.height * Массив.width * Массив.length;
	НоваяНоменклатура.РекомендованаяЦена   = Массив.cost;
	
	НоваяНоменклатура.Записать();
	СтрокаДляОтвета = СформироватьОтвет("id",Строка(НоваяНоменклатура.Код));
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета);
	Возврат Ответ;
КонецФункции

Функция ПолучитьСостоянияМашинgetstatetrucks(Запрос)
	
	ЗапросСерий = Новый запрос;
	ЗапросСерий.Текст = "ВЫБРАТЬ
	                    |	Состояние.Ссылка КАК Ссылка,
	                    |	Состояние.Порядок КАК Порядок
	                    |ИЗ
	                    |	Перечисление.Состояние КАК Состояние";
	Выборка = ЗапросСерий.Выполнить().Выбрать();
	

	МассивСерий = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураСерий = Новый Структура;
		СтруктураСерий.Вставить("name",    	Строка(выборка.Ссылка));
		СтруктураСерий.Вставить("id", 	    Строка(выборка.Порядок));

		МассивСерий.Добавить(СтруктураСерий);
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивСерий);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСтеллажиgetshelfs(Запрос)
	
	ЗапросСтеллажей = Новый запрос;
	ЗапросСтеллажей.Текст = "ВЫБРАТЬ
	                    |	Стеллаж.Наименование КАК Наименование,
	                    |	Стеллаж.Код КАК Код
	                    |ИЗ
	                    |	Справочник.Стеллаж КАК Стеллаж";
	Выборка = ЗапросСтеллажей.Выполнить().Выбрать();
	

	МассивСтеллажей = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураСтеллажей = Новый Структура;
		СтруктураСтеллажей.Вставить("name",    	Строка(выборка.Наименование));
		СтруктураСтеллажей.Вставить("id", 	    Строка(выборка.Код));

		МассивСтеллажей.Добавить(СтруктураСтеллажей);
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивСтеллажей);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСерииМашинGetSeriesTruks(Запрос)
	
	ЗапросСерии = Новый запрос;
	ЗапросСерии.Текст = "ВЫБРАТЬ
	                        |	Серии.Код КАК Код,
	                        |	Серии.Наименование КАК Наименование
	                        |ИЗ
	                        |	Справочник.Серии КАК Серии";
	Выборка = ЗапросСерии.Выполнить().Выбрать();
	

	МассивСерии = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураСерии = Новый Структура;
		СтруктураСерии.Вставить("name",    	Строка(выборка.Наименование));
		СтруктураСерии.Вставить("id", 	    Строка(выборка.Код));

		МассивСерии.Добавить(СтруктураСерии);
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивСерии);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьБрендыМашинGetBrandsTruks(Запрос)
	
	ЗапросБренда = Новый запрос;
	ЗапросБренда.Текст = "ВЫБРАТЬ
	                        |	Бренд.Код КАК Код,
	                        |	Бренд.Наименование КАК Наименование
	                        |ИЗ
	                        |	Справочник.Бренд КАК Бренд";
	Выборка = ЗапросБренда.Выполнить().Выбрать();
	

	МассивБренда = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураБренда = Новый Структура;
		СтруктураБренда.Вставить("name",    	Строка(выборка.Наименование));
		СтруктураБренда.Вставить("id", 	    Строка(выборка.Код));

		МассивБренда.Добавить(СтруктураБренда);
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивБренда);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьПроизводителейМашинGetCreatorsTruks(Запрос)
	
	ЗапросПроизводитель = Новый запрос;
	ЗапросПроизводитель.Текст = "ВЫБРАТЬ
	                        |	Производитель.Код КАК Код,
	                        |	Производитель.Наименование КАК Наименование
	                        |ИЗ
	                        |	Справочник.Производитель КАК Производитель";
	Выборка = ЗапросПроизводитель.Выполнить().Выбрать();
	

	МассивПроизводитель = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураПроизводитель = Новый Структура;
		СтруктураПроизводитель.Вставить("name",    	Строка(выборка.Наименование));
		СтруктураПроизводитель.Вставить("id", 	    Строка(выборка.Код));

		МассивПроизводитель.Добавить(СтруктураПроизводитель);
	КонецЦикла;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивПроизводитель);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучениеФотокарточек(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245",8085);
		
		СтрокаЗапроса = "/v1/cards/count/4";
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);	
		ЗапросСтруктура = Новый Структура();
		
		ЗапросСтруктура.Вставить("cardsIds", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON();
		ПотокJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		
		МассивПустыхФото = новый массив; 
		
		Для каждого стр из ИндКод Цикл 
			url = Новый массив;
			МассивПустыхФото.Добавить(url);
			
		КонецЦикла;
		
		Возврат МассивПустыхФото;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСписокКатегорийgetCategories(Запрос)	
	МассивКатегорий= Новый Массив;
	Дерево = Новый ДеревоЗначений;
	запросКатегорий = Новый Запрос;
	запросКатегорий.Текст = "ВЫБРАТЬ
	                        |	Категории.Ссылка КАК Ссылка,
	                        |	Категории.Код КАК Код
	                        |ИЗ
	                        |	Справочник.Категории КАК Категории
	                        |ИТОГИ ПО
	                        |	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	Дерево = запросКатегорий.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	МассивКатегорий= Новый Массив;
	ПустойМассив = новый массив;
	Для Каждого СтрПервогоУровня из Дерево.Строки Цикл
		СтруктураКатегорий1 = Новый Структура;
		СтруктураКатегорий1.Вставить("category",Строка(СтрПервогоУровня.Ссылка));
		СтруктураКатегорий1.Вставить("id",Строка(СтрПервогоУровня.Код));
		МассивКатегорий2 = Новый массив;
		Для Каждого стрВторогоУровня из СтрПервогоУровня.Строки Цикл 
			МассивКатегорий3 = Новый массив;
			
			Для Каждого стрТретьегоУровня из СтрВторогоУровня.Строки Цикл
				СтруктураКатегорий3 = Новый Структура;
				СтруктураКатегорий3.Вставить("category","");
				
				СтруктураКатегорий3.Вставить("category",Строка(стрТретьегоУровня.Ссылка));
				СтруктураКатегорий3.Вставить("id",Строка(стрТретьегоУровня.Код));
				СтруктураКатегорий3.Вставить("subcategory",ПустойМассив);
				МассивКатегорий3.Добавить(СтруктураКатегорий3);
				//МассивКатегорий4 = Новый массив;
			КонецЦикла;	
			СтруктураКатегорий2 = новый Структура;
			СтруктураКатегорий2.Вставить("category",Строка(стрВторогоУровня.Ссылка));
			СтруктураКатегорий2.Вставить("id",Строка(стрВторогоУровня.Код));
			//Если МассивКатегорий3.Количество()>0 Тогда
				
				СтруктураКатегорий2.Вставить("subcategory",МассивКатегорий3);
				
			//КонецЕсли;
			МассивКатегорий2.Добавить(СтруктураКатегорий2);
		КонецЦикла;
		//Если МассивКатегорий2.Количество()>0 Тогда
			СтруктураКатегорий1.Вставить("subcategory",МассивКатегорий2);
			
		//КонецЕсли;
		МассивКатегорий.Добавить(СтруктураКатегорий1);
	КонецЦикла;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции
//--Сергеев 04,03,2024

///+ГомзМА 05.03.2024
Функция ОтчётКонвейерПоСотрудникуpipelinereportperson(Запрос) 
	
	///+ГомзМА 04.03.2024
	ЗапросОтчёта = Новый запрос;	
	ЗапросОтчёта.Текст = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИндНомер.индкод) КАК Количество,
	|	ИндНомер.ДатаИзмененияКонвеера КАК Дата
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.АвитоЧастник = ИСТИНА
	|	И ИндНомер.ДатаИзмененияКонвеера МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ИндНомер.ДатаИзмененияКонвеера
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата"; 
	ДатаНачала = Дата(Строка(Запрос.ПараметрыURL["datestart"]));
	ДатаОкончания = Дата(Строка(Запрос.ПараметрыURL["dateend"]));
	
	ЗапросОтчёта.УстановитьПараметр("ДатаНачала",ДатаНачала);
	ЗапросОтчёта.УстановитьПараметр("ДатаОкончания",ДатаОкончания); 
	
	Выборка = ЗапросОтчёта.Выполнить().Выбрать();
	МассивДанных = Новый массив;
	
	Пока выборка.Следующий() Цикл 
		
		МассивДеталиПоСотруднику = Новый Массив;
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("count",выборка.Количество);
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		
		ЗапросОтчётаПоСотруднику = Новый запрос;	
		ЗапросОтчётаПоСотруднику.Текст = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИндНомер.индкод) КАК Количество,
		|	ИндНомер.ДатаИзмененияКонвеера КАК Дата,
		|	ИндНомер.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|ГДЕ
		|	ИндНомер.АвитоЧастник = ИСТИНА
		|	И ИндНомер.ДатаИзмененияКонвеера МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ИндНомер.ДатаИзмененияКонвеера,
		|	ИндНомер.Ответственный
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата"; 
		
		ЗапросОтчётаПоСотруднику.УстановитьПараметр("ДатаНачала",	 Выборка.Дата);
		ЗапросОтчётаПоСотруднику.УстановитьПараметр("ДатаОкончания", Выборка.Дата); 
		
		//@skip-check query-in-loop
		ВыборкаПоСотрудникам = ЗапросОтчётаПоСотруднику.Выполнить().Выбрать();
		Пока ВыборкаПоСотрудникам.Следующий() Цикл 
			СтруктураПоСотруднику = новый Структура;
			СтруктураПоСотруднику.Вставить("count",ВыборкаПоСотрудникам.Количество);
			СтруктураПоСотруднику.Вставить("person",Строка(ВыборкаПоСотрудникам.Ответственный));
			МассивДеталиПоСотруднику.Добавить(СтруктураПоСотруднику); 
		КонецЦикла;
		СтруктураИнфо.Вставить("persons", МассивДеталиПоСотруднику);
		МассивДанных.Добавить(СтруктураИнфо); 
		
	КонецЦикла;
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивДанных);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 04.03.2024
	
КонецФункции

Функция ПолучитьСклады(Область)

	///+ГомзМА 05.03.2024
	Результат = Неопределено;
	
	МассивСкладов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Регион = &Регион";
	
	Если Область <> Неопределено Тогда
		Запрос.УстановитьПараметр("Регион", Справочники.Область.НайтиПоНаименованию(Область));
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады";
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() Цикл
			МассивСкладов.Добавить(РезультатЗапроса.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			МассивСкладов.Добавить(РезультатЗапроса.Ссылка);
		КонецЦикла;
		Результат = МассивСкладов;
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 05.03.2024

КонецФункции // ПолучитьСклады()
///-ГомзМА 05.03.2024

//--Сергеев 05,03,2024
Функция ПолучитьДашбордНасяниковGetDashBoss(Запрос)
	запросСотрудников = Новый Запрос;
	запросСотрудников.Текст = "ВЫБРАТЬ
	                          |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задача.Ссылка) КАК КоличествоЗадач,
	                          |	Задача.Исполнитель КАК Исполнитель
	                          |ПОМЕСТИТЬ ВТ_Задачи
	                          |ИЗ
	                          |	Документ.Задача КАК Задача
	                          |ГДЕ
	                          |	(Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Создана)
	                          |			ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Вработе)
	                          |			ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Отложена))
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	Задача.Исполнитель
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                           |ВЫБРАТЬ
	                           |	КадровыйПриказ.Сотрудник КАК Сотрудник,
	                           |	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	                           |ПОМЕСТИТЬ ВТ_ДолжностиДаты
	                           |ИЗ
	                           |	Документ.КадровыйПриказ КАК КадровыйПриказ
	                           |
	                           |СГРУППИРОВАТЬ ПО
	                           |	КадровыйПриказ.Сотрудник
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                           |ВЫБРАТЬ
	                           |	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	                           |	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	                           |	КадровыйПриказ.Сотрудник КАК Сотрудник,
	                           |	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	                           |ПОМЕСТИТЬ ВТ_ДолжностиНовые
	                           |ИЗ
	                           |	Документ.КадровыйПриказ КАК КадровыйПриказ
	                           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДолжностиДаты КАК ВТ_ДолжностиДаты
	                           |		ПО (ВТ_ДолжностиДаты.Сотрудник = КадровыйПриказ.Сотрудник)
	                           |			И (ВТ_ДолжностиДаты.ДатаДоговора = КадровыйПриказ.Дата)
	                           |
	                           |СГРУППИРОВАТЬ ПО
	                           |	КадровыйПриказ.Сотрудник
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ
	                          |	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	                          |	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	                          |	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	                          |ПОМЕСТИТЬ ТелефоныЛичные
	                          |ИЗ
	                          |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	                          |ГДЕ
	                          |	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ
	                          |	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	                          |	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	                          |	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	                          |ПОМЕСТИТЬ ТелефоныСлужебные
	                          |ИЗ
	                          |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	                          |ГДЕ
	                          |	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                          |	Сотрудники.Наименование КАК Наименование,
	                          |	Сотрудники.Код КАК Код,
	                          |	Сотрудники.Ссылка КАК Ссылка,
	                          |	Сотрудники.ДатаРождения КАК ДатаРождения,
	                          |	Сотрудники.Руководитель КАК Руководитель,
	                          |	ВТ_ДолжностиНовые.Отдел КАК ОтделНов,
	                          |	ВТ_ДолжностиНовые.Должность КАК ДолжностьНов,
	                          |	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	                          |	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	                          |	Сотрудники.Пользователь КАК Пользователь,
	                          |	ЕСТЬNULL(ВТ_Задачи.КоличествоЗадач, 0) КАК КоличествоЗадач
	                          |ИЗ
	                          |	Справочник.Сотрудники КАК Сотрудники
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	                          |		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	                          |		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	                          |		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
	                          |		ПО (ВТ_Задачи.Исполнитель = Сотрудники.Пользователь)
	                          |ГДЕ
	                          |	НЕ Сотрудники.Пользователь.Недействителен
	                           |	И Сотрудники.Код В (&Люди)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	ОтделНов,
	                           |	Наименование"; ; 
	МассивЛюдей = Новый массив;
	МассивЛюдей.Добавить("000000152");
	МассивЛюдей.Добавить("000000065");
	МассивЛюдей.Добавить("000000018");
	МассивЛюдей.Добавить("000000208");
	МассивЛюдей.Добавить("000000035");
	МассивЛюдей.Добавить("000000039");
	МассивЛюдей.Добавить("000000168");
	МассивЛюдей.Добавить("000000001");
	МассивЛюдей.Добавить("000000067");
	МассивЛюдей.Добавить("000000032");
	МассивЛюдей.Добавить("000000019");
	МассивЛюдей.Добавить("000000024");
	МассивЛюдей.Добавить("000000020");
	//
	//запросСотрудников.УстановитьПараметр("Должность1","%Руководител%");
	//запросСотрудников.УстановитьПараметр("Должность2","%Директор%");
	//запросСотрудников.УстановитьПараметр("Должность3","%Зав.%");
	//запросСотрудников.УстановитьПараметр("Должность4","%Специалист по кадрам%");
	//запросСотрудников.УстановитьПараметр("Должность5","%Тренер%");
	запросСотрудников.УстановитьПараметр("Люди",МассивЛюдей);
	ВыборкаСотрудников = запросСотрудников.Выполнить().Выбрать();
	
	//МассивСотрудников = новый массив;
	//
	//Пока ВыборкаСотрудников.Следующий() Цикл
	//	МассивСотрудников.Добавить(ВыборкаСотрудников.Пользователь);
	//КонецЦикла;
	МассивЗадач = Новый Массив;
	Пока ВыборкаСотрудников.Следующий()	Цикл
		ЗапросЗадач = новый Запрос;
		ЗапросЗадач.Текст =  "ВЫБРАТЬ
|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задача.Ссылка) КАК КоличествоЗадач,
|	Задача.Исполнитель КАК Исполнитель
|ПОМЕСТИТЬ ВТ_Задачи
|ИЗ
|	Документ.Задача КАК Задача
|ГДЕ
|	(Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Создана)
|			ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Вработе)
|			ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Отложена))
|
|СГРУППИРОВАТЬ ПО
|	Задача.Исполнитель
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Сотрудники.Пользователь.Наименование КАК Наименование,
|	Сотрудники.Пользователь.Ссылка КАК Ссылка,
|	Сотрудники.Код КАК Код
|ПОМЕСТИТЬ ВТ_Юзеры
|ИЗ
|	Справочник.Сотрудники КАК Сотрудники
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Задача.Номер КАК Номер,
|	Задача.Дата КАК Дата,
|	Задача.Описание КАК Описание,
|	Задача.Наименование КАК Наименование,
|	Задача.Исполнитель КАК Исполнитель1,
|	Задача.Ответственный КАК Ответственный,
|	Задача.Статус КАК Статус,
|	ВТ_Юзеры.Наименование КАК Исполнитель,
|	ВТ_Юзеры.Код КАК Код,
|	Задача.СтатусАвтора КАК СтатусАвтора,
|	Задача.Ссылка КАК Ссылка,
|	ЕстьNull(ВТ_Задачи.КоличествоЗадач,0) КАК КоличествоЗадач
|ИЗ
|	ВТ_Юзеры КАК ВТ_Юзеры
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
|		ПО (ВТ_Юзеры.Ссылка = Задача.Ответственный)
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
|		ПО (ВТ_Юзеры.Ссылка = ВТ_Задачи.Исполнитель)
|ГДЕ
|	Задача.Статус В(&Статус)
|	И Задача.Исполнитель = &Пользователи";
		
		Статус = новый массив;
		Статус.Добавить(Перечисления.СтатусыЗадач.ВРаботе);
		
		ЗапросЗадач.УстановитьПараметр("Статус", Статус);
		ЗапросЗадач.УстановитьПараметр("Пользователи", ВыборкаСотрудников.Пользователь);
		
		//@skip-check query-in-loop
		Выборка = ЗапросЗадач.Выполнить().Выбрать();
		
		
		СтруктураЗадачи = Новый Структура;
		СтруктураЗадачи.Вставить("name",    Строка(ВыборкаСотрудников.Пользователь));
		
		СтруктураЗадачи.Вставить("task_name",    	Строка(выборка.Наименование));
		СтруктураЗадачи.Вставить("date", 	    Строка(выборка.Дата));
		СтруктураЗадачи.Вставить("task_description", Строка(выборка.Описание)); 
		СтруктураЗадачи.Вставить("code",           Строка(ВыборкаСотрудников.Код));
		СтруктураЗадачи.Вставить("task_number",     	Строка(выборка.Номер));  	
		СтруктураЗадачи.Вставить("task_author",      Строка(выборка.Ответственный));
		СтруктураЗадачи.Вставить("task_state",   	Строка(выборка.Статус));
		СтруктураЗадачи.Вставить("task_state_author",Строка(выборка.СтатусАвтора));
		СтруктураЗадачи.Вставить("time_in_work",0);
		//@skip-check query-in-loop
		СтруктураЗадачи.Вставить("time_in_work_day",ПолучитьВремяЗадачиЗаДень(выборка.Исполнитель1));
		СтруктураЗадачи.Вставить("task_count",   	ВыборкаСотрудников.КоличествоЗадач);
		Пока выборка.Следующий() Цикл
			
			СтруктураЗадачи.Вставить("task_name",    	Строка(выборка.Наименование));
			СтруктураЗадачи.Вставить("date", 	    Строка(выборка.Дата));
			//СтруктураЗадачи.Вставить("code",              Строка(выборка.Код));
			СтруктураЗадачи.Вставить("task_description", Строка(выборка.Описание));  
			СтруктураЗадачи.Вставить("task_number",     	Строка(выборка.Номер));  	
			СтруктураЗадачи.Вставить("task_author",      Строка(выборка.Ответственный));
			СтруктураЗадачи.Вставить("task_state",   	Строка(выборка.Статус));
			СтруктураЗадачи.Вставить("task_state_author",Строка(выборка.СтатусАвтора));
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураЗадачи.Вставить("time_in_work",ПолучитьВремяЗадачи(выборка.ссылка));
			//@skip-check query-in-loop
			//@skip-check query-in-loop
			СтруктураЗадачи.Вставить("time_in_work_day",ПолучитьВремяЗадачиЗаДень(выборка.Исполнитель1));
			СтруктураЗадачи.Вставить("task_count",   	выборка.КоличествоЗадач);
			//СтруктураЗадачи.Вставить("id",    	  	   Строка(выборка.Код));
			
			//СтруктураТоваров.Вставить("photos", МассивФото);
			
		КонецЦикла; 
		МассивЗадач.Добавить(СтруктураЗадачи);
	КонецЦикла;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивЗадач);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокНасяниковGetBosssList(Запрос)
	запросСотрудников = Новый Запрос;
	запросСотрудников.Текст =  "ВЫБРАТЬ
	                           |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задача.Ссылка) КАК КоличествоЗадач,
	                           |	Задача.Исполнитель КАК Исполнитель
	                           |ПОМЕСТИТЬ ВТ_Задачи
	                           |ИЗ
	                           |	Документ.Задача КАК Задача
	                           |ГДЕ
	                           |	(Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Создана)
	                           |			ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Вработе)
	                           |			ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Отложена))
	                           |
	                           |СГРУППИРОВАТЬ ПО
	                           |	Задача.Исполнитель
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                           |ВЫБРАТЬ
	                           |	КадровыйПриказ.Сотрудник КАК Сотрудник,
	                           |	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	                           |ПОМЕСТИТЬ ВТ_ДолжностиДаты
	                           |ИЗ
	                           |	Документ.КадровыйПриказ КАК КадровыйПриказ
	                           |
	                           |СГРУППИРОВАТЬ ПО
	                           |	КадровыйПриказ.Сотрудник
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                           |ВЫБРАТЬ
	                           |	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	                           |	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	                           |	КадровыйПриказ.Сотрудник КАК Сотрудник,
	                           |	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	                           |ПОМЕСТИТЬ ВТ_ДолжностиНовые
	                           |ИЗ
	                           |	Документ.КадровыйПриказ КАК КадровыйПриказ
	                           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДолжностиДаты КАК ВТ_ДолжностиДаты
	                           |		ПО (ВТ_ДолжностиДаты.Сотрудник = КадровыйПриказ.Сотрудник)
	                           |			И (ВТ_ДолжностиДаты.ДатаДоговора = КадровыйПриказ.Дата)
	                           |
	                           |СГРУППИРОВАТЬ ПО
	                           |	КадровыйПриказ.Сотрудник
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                           |ВЫБРАТЬ
	                           |	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	                           |	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	                           |	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	                           |ПОМЕСТИТЬ ТелефоныЛичные
	                           |ИЗ
	                           |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	                           |ГДЕ
	                           |	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                           |ВЫБРАТЬ
	                           |	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	                           |	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	                           |	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	                           |ПОМЕСТИТЬ ТелефоныСлужебные
	                           |ИЗ
	                           |	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	                           |ГДЕ
	                           |	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                           |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                           |	Сотрудники.Наименование КАК Наименование,
	                           |	Сотрудники.Код КАК Код,
	                           |	Сотрудники.Ссылка КАК Ссылка,
	                           |	Сотрудники.ДатаРождения КАК ДатаРождения,
	                           |	Сотрудники.Руководитель КАК Руководитель,
	                           |	ВТ_ДолжностиНовые.Отдел КАК ОтделНов,
	                           |	ВТ_ДолжностиНовые.Должность КАК ДолжностьНов,
	                           |	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	                           |	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	                           |	Сотрудники.Пользователь КАК Пользователь,
	                           |	ЕСТЬNULL(ВТ_Задачи.КоличествоЗадач, 0) КАК КоличествоЗадач
	                           |ИЗ
	                           |	Справочник.Сотрудники КАК Сотрудники
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	                           |		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	                           |		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	                           |		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
	                           |		ПО (ВТ_Задачи.Исполнитель = Сотрудники.Пользователь)
	                           |ГДЕ
	                           |	НЕ Сотрудники.Пользователь.Недействителен
	                           |	И Сотрудники.Код В (&Люди)
	                           |
	                           |УПОРЯДОЧИТЬ ПО
	                           |	ОтделНов,
	                           |	Наименование"; ; 
	МассивЛюдей = Новый массив;
	МассивЛюдей.Добавить("000000152");
	МассивЛюдей.Добавить("000000065");
	МассивЛюдей.Добавить("000000018");
	МассивЛюдей.Добавить("000000208");
	МассивЛюдей.Добавить("000000035");
	МассивЛюдей.Добавить("000000039");
	МассивЛюдей.Добавить("000000168");
	МассивЛюдей.Добавить("000000001");
	МассивЛюдей.Добавить("000000067");
	МассивЛюдей.Добавить("000000032");
	МассивЛюдей.Добавить("000000019");
	МассивЛюдей.Добавить("000000024");
	МассивЛюдей.Добавить("000000020");
	//
	//запросСотрудников.УстановитьПараметр("Должность1","%Руководител%");
	//запросСотрудников.УстановитьПараметр("Должность2","%Директор%");
	//запросСотрудников.УстановитьПараметр("Должность3","%Зав.%");
	//запросСотрудников.УстановитьПараметр("Должность4","%Специалист по кадрам%");
	//запросСотрудников.УстановитьПараметр("Должность5","%Тренер%");
	запросСотрудников.УстановитьПараметр("Люди",МассивЛюдей);
	ВыборкаСотрудников = запросСотрудников.Выполнить().Выбрать();
	МассивОтделов	  = новый массив;
	МассивСотрудников = новый массив;
	Отдел = Справочники.Подразделения.пустаяСсылка();
	счёт = 0;
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		СтруктураСотрдников = Новый Структура; 
		СтруктураСотрдников.Вставить("name", Строка(ВыборкаСотрудников.Наименование));
		СтруктураСотрдников.Вставить("code", Строка(ВыборкаСотрудников.Код));
		СтруктураСотрдников.Вставить("tasks", ВыборкаСотрудников.КоличествоЗадач);
		
		
		//Если ВыборкаСотрудников.ОтделНов = Отдел Или счёт = 0  Тогда
			МассивСотрудников.Добавить(СтруктураСотрдников);
		//	счёт = 1;
		//Иначе
			
		//	СтруктураОтделов = Новый Структура;
		//	СтруктураОтделов.Вставить("group_name",Строка(Отдел)); 
		//	СтруктураОтделов.Вставить("workers",МассивСотрудников);
		//	МассивСотрудников = новый массив;
		//	МассивОтделов.Добавить(СтруктураОтделов);
		//КонецЕсли;
		//Отдел = ВыборкаСотрудников.ОтделНов;
	КонецЦикла;
			//СтруктураОтделов = Новый Структура;
			//СтруктураОтделов.Вставить("group_name",Строка(Отдел)); 
			//СтруктураОтделов.Вставить("workers",МассивСотрудников);
			//МассивСотрудников = новый массив;
			//МассивОтделов.Добавить(СтруктураОтделов);
	
	СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивСотрудников);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивСотрудников);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

//--Сергеев 05,03,2024
Функция ПолучитьСписокпартийgetlistindcods(Запрос)
	
	Товар  = Справочники.Номенклатура.НайтиПоКоду(Запрос.ПараметрыURL["product"]);
	Машина = Справочники.Машины.НайтиПоКоду(Запрос.ПараметрыURL["car"]);
	
	ЗапросПартий = Новый Запрос;
	ЗапросПартий.Текст = " ВЫБРАТЬ                                               
	|	РегистрНакопления1Остатки.машина КАК машина,
	|	ИндНомер.Цена КАК цена,
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток,
	|	Комментарии.Комментарий КАК Комментарий,
	|	ИндНомер.Код КАК Код,
	|	ВЫБОР
	|		КОГДА РегистрНакопления1Остатки.Товар.Состояние = ЗНАЧЕНИЕ(Перечисление.Состояние.БУ)
	|			ТОГДА (ВЫРАЗИТЬ(РегистрНакопления1Остатки.Товар.РекомендованаяЦена * ИндНомер.наценка.Коофициент / 10 КАК ЧИСЛО(10, 0))) * 10
	|		ИНАЧЕ ИндНомер.Цена
	|	КОНЕЦ КАК наценкаФ,
	|	ИндНомер.п КАК Контрагенты,
	|	ИндНомер.дн КАК ДатаНакладной,
	|	ИндНомер.цп КАК ЦенаПоступления,
	|	РегистрНакопления1Остатки.индкод КАК индкод,
	|	РегистрНакопления1Остатки.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ИндНомер.Стеллаж <> ЗНАЧЕНИЕ(Справочник.стеллаж.пустаяссылка)
	|			ТОГДА ИндНомер.Стеллаж
	|		ИНАЧЕ МестаХранения.МестоХранения
	|	КОНЕЦ КАК МестоХранения,
	|	РегистрНакопления1Остатки.Товар КАК Товар,
	|	РегистрНакопления1Остатки.машина.Год КАК машинаГод,
	|	ИндНомер.индкод.Распечатано КАК индкодРаспечатано,
	|	ИндНомер.АвитоЧастник КАК Конвеер,
	|	ИндНомер.Комментарий КАК Комментарий1,
	|	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
	|	ИндНомер.ЕстьФото КАК ЕстьФото,
	|	ИндНомер.Состояние КАК Состояние,
	|	ИндНомер.Поддон КАК Поддон
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки(
	|			,
	|			Товар = &Товар
	|			И Машина = &Машина 
	|				) КАК РегистрНакопления1Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарии
	|		ПО (Комментарии.Товар = РегистрНакопления1Остатки.Товар)
	|			И (Комментарии.Машина = РегистрНакопления1Остатки.машина)
	|			И (Комментарии.индкод = РегистрНакопления1Остатки.индкод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО (ИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дт_МестаХраненияНоменклатуры.СрезПоследних КАК МестаХранения
	|		ПО РегистрНакопления1Остатки.Товар = МестаХранения.Номенклатура
	|			И РегистрНакопления1Остатки.Склад = МестаХранения.Склад";
	
	ЗапросПартий.УстановитьПараметр("Товар",Товар);
	ЗапросПартий.УстановитьПараметр("Машина",Машина);
	
	Выборка = ЗапросПартий.Выполнить().Выбрать();
	МассивПартий = новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураПартии = Новый Структура;
		//СтруктураПартии.Вставить("name",    Строка(выборка.Наименование));
		СтруктураПартии.Вставить("id", 	    Строка(выборка.индкод));
		СтруктураПартии.Вставить("konveer", выборка.Конвеер);
		МассивПартий.Добавить(СтруктураПартии);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивПартий);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьЗадачуGetTask(Запрос)
	ЗапросЗадач = новый Запрос;
	ЗапросЗадач.Текст = "ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка,
	|	Задача.ВерсияДанных КАК ВерсияДанных,
	|	Задача.ПометкаУдаления КАК ПометкаУдаления,
	|	Задача.Номер КАК Номер,
	|	Задача.Дата КАК Дата,
	|	Задача.Проведен КАК Проведен,
	|	Задача.Наименование КАК Наименование,
	|	Задача.Описание КАК Описание,
	|	Задача.Выполнено КАК Выполнено,
	|	Задача.Проект КАК Проект,
	|	Задача.Ответственный КАК Ответственный,
	|	Задача.Исполнитель КАК Исполнитель,
	|	Задача.Подразделение КАК Подразделение,
	|	Задача.ДатаНачалаПлан КАК ДатаНачалаПлан,
	|	Задача.ДатаОкончанияПлан КАК ДатаОкончанияПлан,
	|	Задача.ДатаОкончанияФакт КАК ДатаОкончанияФакт,
	|	Задача.ВремяВыполнения КАК ВремяВыполнения,
	|	Задача.Выполнение КАК Выполнение,
	|	Задача.Комментарий КАК Комментарий,
	|	Задача.Статус КАК Статус,
	|	Задача.СтатусАвтора КАК СтатусАвтора,
	|	Задача.Контроль КАК Контроль,
	|	Задача.ХранилищеОписания КАК ХранилищеОписания,
	|	Задача.ГрупповаяЗадача КАК ГрупповаяЗадача,
	|	Задача.Согласовал КАК Согласовал,
	|	Задача.ОценкаЗадач КАК ОценкаЗадач,
	|	Задача.ПлановыйСрокВыполнения КАК ПлановыйСрокВыполнения,
	|	Задача.ЗадачаСПортала КАК ЗадачаСПортала,
	|	Задача.Исполнители.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Исполнитель КАК Исполнитель) КАК Исполнители,
	|	Задача.Направление,
	|	Задача.ИдентификаторРаботыЗаказНарядаНаВосстановление,
	|	Задача.РодительскаяЗадача
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Номер = &Номер";
	
	
	ЗапросЗадач.УстановитьПараметр("Номер",Строка(Запрос.ПараметрыURL["id"]));

	Выборка = ЗапросЗадач.Выполнить().Выбрать();
	
	МассивЗадач = Новый Массив;
	
	Пока выборка.Следующий() Цикл
		
		СтруктураЗадачи = Новый Структура;
		СтруктураЗадачи.Вставить("name",    	Строка(выборка.Наименование));
		СтруктураЗадачи.Вставить("date", 	    Строка(выборка.Дата));
		СтруктураЗадачи.Вставить("description", Строка(выборка.Описание));  
		СтруктураЗадачи.Вставить("number",     	Строка(выборка.Номер)); 
		СтруктураЗадачи.Вставить("mama",     	Строка(выборка.РодительскаяЗадача)); 
		
		СтруктураИсполнителя = Новый Структура; 
		СтруктураИсполнителя.Вставить("name",    Строка(выборка.Исполнитель));
		СтруктураИсполнителя.Вставить("id",	Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.Исполнитель).Код);
		СтруктураЗадачи.Вставить("executor",    СтруктураИсполнителя);
		
		СтруктураАвтора = Новый Структура; 
		СтруктураАвтора.Вставить("name",      Строка(выборка.Ответственный));
		СтруктураАвтора.Вставить("id",	Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.Ответственный).Код);
		СтруктураЗадачи.Вставить("author",    СтруктураАвтора);
		
		СтруктураЗадачи.Вставить("state",   	Строка(выборка.Статус));
		СтруктураЗадачи.Вставить("state_author",Строка(выборка.СтатусАвтора));
		СтруктураЗадачи.Вставить("deadline",	Строка(выборка.ПлановыйСрокВыполнения));
		
		СтруктураЗадачи.Вставить("id_order",	Строка(выборка.ИдентификаторРаботыЗаказНарядаНаВосстановление));
		
		СтруктураЗадачи.Вставить("id_sub_department",	выборка.Направление.Код);
		СтруктураЗадачи.Вставить("sub_department",	Строка(выборка.Направление));
		Исполнители = Выборка.Исполнители.Выгрузить();
		МассивИсполнителей = Новый Массив;
			Для каждого Стр из Исполнители Цикл
				СтруктураИсполнителей = Новый Структура;
				СтруктураИсполнителей.Вставить("name",Строка(Стр.Исполнитель));	
				СтруктураИсполнителей.Вставить("id",Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",Стр.Исполнитель).Код);	
				МассивИсполнителей.Добавить(СтруктураИсполнителей);
			КонецЦикла;
		СтруктураЗадачи.Вставить("sub_executors",	МассивИсполнителей);	
		//СтруктураЗадачи.Вставить("id",    	  	   Строка(выборка.Код));
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивЗадач.Добавить(СтруктураЗадачи);
		
	КонецЦикла;  
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗадачи);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Процедура ЗаписьЛогаподдона(Событие,поддон,Автор)
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	
	ТекстЛога =  "----------------------------------------------------" + Символы.ПС + ТекущаяДата() + Символы.ПС + Автор + Символы.ПС +" "+ Событие + Символы.ПС ;
	
	ЗаписьЛога = РегистрыСведений.УниверсальныйЛог.СоздатьМенеджерЗаписи();
	ЗаписьЛога.Объект 		 = поддон.ссылка;
	ЗаписьЛога.Период 		 = ТекущаяДата();
	ЗаписьЛога.Лог           = ТекстЛога;
	ЗаписьЛога.Записать();
КонецПроцедуры 
//++СергееВ Ф.В. Дата:14/03/24
Функция ПолучитьСписокОтделовgetlistdepartments(Запрос)
	ЗапросОтделов = Новый Запрос;
	///+ГомзМА 26.03.2024
	ЗапросОтделов.Текст = "     
	|ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ докЗадача.Номер) КАК Номер,
	|	докЗадача.Отдел КАК Отдел
	|ПОМЕСТИТЬ Вт_КолвоЗадач
	|ИЗ
	|	Документ.Задача КАК докЗадача
	|ГДЕ
	|	докЗадача.Статус В(&Статус)
	|	И докЗадача.Дата >= ДАТАВРЕМЯ(2024, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	докЗадача.Отдел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПодразделенияУчастники.Сотрудник) КАК Сотрудник,
	|	ПодразделенияУчастники.Ссылка.Родитель КАК Родитель
	|ПОМЕСТИТЬ ВТ_КолвоСотрудников
	|ИЗ
	|	Справочник.Подразделения.Участники КАК ПодразделенияУчастники
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодразделенияУчастники.Ссылка.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.Наименование КАК Наименование,
	|	Подразделения.Код КАК Код,
	|	ВТ_КолвоСотрудников.Сотрудник КАК КоличествоСотрудников,
	|	Вт_КолвоЗадач.Номер КАК КоличествоЗадач
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КолвоСотрудников КАК ВТ_КолвоСотрудников
	|		ПО Подразделения.Ссылка = ВТ_КолвоСотрудников.Родитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_КолвоЗадач КАК Вт_КолвоЗадач
	|		ПО Подразделения.Ссылка = Вт_КолвоЗадач.Отдел
	|ГДЕ
	|	Подразделения.Родитель.Код = ""000000105""";
	///-ГомзМА 26.03.2024
	
	Статус = новый массив;
	Статус.Добавить(Перечисления.СтатусыЗадач.ВРаботе);
	Статус.Добавить(Перечисления.СтатусыЗадач.Создана);	
	Статус.Добавить(Перечисления.СтатусыЗадач.Отложена);
	ЗапросОтделов.УстановитьПараметр("Статус",Статус);
	
	Выборка = ЗапросОтделов.Выполнить().Выбрать();
	МассивОтделов = Новый Массив;
	Пока выборка.Следующий() Цикл
		
		СтруктураОтдела = Новый Структура;
		СтруктураОтдела.Вставить("number_of_persons",   СтрЗаменить(Строка(выборка.КоличествоСотрудников),"0",""));
		СтруктураОтдела.Вставить("number_of_tasks",  	Строка(выборка.КоличествоЗадач));
		СтруктураОтдела.Вставить("name",    			Строка(выборка.Наименование));
		СтруктураОтдела.Вставить("id", 	    			Строка(выборка.Код));
		
		МассивОтделов.Добавить(СтруктураОтдела);
		///-ГомзМА 22.03.2024
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивОтделов);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьЗадачиОтделаGetTasksDepartment(Запрос)
	
	ЗапросЗадач = новый Запрос;
	Статус = новый массив;
	
	Если Число(Запрос.ПараметрыURL["state"]) = 1 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.ВРаботе);
		Статус.Добавить(Перечисления.СтатусыЗадач.Создана);	
		Статус.Добавить(Перечисления.СтатусыЗадач.Отложена);
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 2 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Отложена);		
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 3 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Выполнена);
	ИначеЕсли Число(Запрос.ПараметрыURL["state"]) = 4 Тогда
		Статус.Добавить(Перечисления.СтатусыЗадач.Отменена);
	КонецЕсли;
	
	Направление = Справочники.Подразделения.НайтиПоКоду(Запрос.ПараметрыURL["direction"]);

	ЗапросЗадач.Текст =  СтрШаблон(текстДляЗадачОтдела(), Формат(100000, "ЧГ="));
	ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи", 0);
	ЗапросЗадач.УстановитьПараметр("Направление", Направление);
	ЗапросЗадач.УстановитьПараметр("Статус", Статус);
		ТекстПоиска = Строка(Запрос.ПараметрыURL["text"]);
	Если ТекстПоиска <> "0" Тогда
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+ТекстПоиска+"%");
Иначе
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+"[a-я]"+"%");
	КонецЕсли;
	
	Выборкаобщ = ЗапросЗадач.Выполнить().Выбрать().Количество();
	ЗапросЗадач.Текст =  СтрШаблон(текстДляЗадачОтдела(), Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],10000), "ЧГ="));
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		ЗапросЗадач.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли; 
	
	ЗапросЗадач.УстановитьПараметр("Направление", Направление);
	ЗапросЗадач.УстановитьПараметр("Статус", Статус);
		
	Если ТекстПоиска <> "0" Тогда
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+ТекстПоиска+"%");
Иначе
	ЗапросЗадач.УстановитьПараметр("Описание", "%"+"[a-я]"+"%");
	КонецЕсли;
	Выборка = ЗапросЗадач.Выполнить().Выбрать();
	
	МассивЗадач = Новый Массив;
	
	Пока выборка.Следующий() Цикл
		
		Если выборка.ОценкаЗадач = Перечисления.ОценкаЗадач.Срочно Тогда
			Срочно = Истина;
		Иначе
			Срочно = Ложь;
		КонецЕсли;
		
		СтруктураЗадачи = Новый Структура;
		СтруктураЗадачи.Вставить("name",    	Строка(выборка.Наименование));
		СтруктураЗадачи.Вставить("date", 	    Строка(выборка.Дата));
		СтруктураЗадачи.Вставить("date_end", 	Строка(?(выборка.ДатаВыполнения = '00010101', "", выборка.ДатаВыполнения)));
		СтруктураЗадачи.Вставить("description", Строка(выборка.Описание));  
		СтруктураЗадачи.Вставить("number",     	Строка(выборка.Номер));  
		СтруктураЗадачи.Вставить("executor",    Строка(выборка.Исполнитель));
		СтруктураЗадачи.Вставить("id_executor", Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.Исполнитель, , ).код));
		СтруктураЗадачи.Вставить("author",      Строка(выборка.Ответственный));
		СтруктураЗадачи.Вставить("state",   	Строка(выборка.Статус));
		СтруктураЗадачи.Вставить("srochno",   	Срочно);
		СтруктураЗадачи.Вставить("priority",	Строка(выборка.Приоритет));
		СтруктураЗадачи.Вставить("state_author",Строка(выборка.СтатусАвтора));
		СтруктураЗадачи.Вставить("deadline",	Строка(выборка.ПлановыйСрокВыполнения));
		СтруктураЗадачи.Вставить("id_order",	Строка(выборка.ИдентификаторРаботыЗаказНарядаНаВосстановление));
		//@skip-check query-in-loop
		СтруктураЗадачи.Вставить("time_in_work",ПолучитьВремяЗадачи(выборка.ссылка));
		//СтруктураЗадачи.Вставить("id",    	  	   Строка(выборка.Код));
		
		//СтруктураТоваров.Вставить("photos", МассивФото);
		МассивЗадач.Добавить(СтруктураЗадачи);
		
	КонецЦикла;  
	//++СергееВ Ф.В. Дата:20/03/24
	ЗапросУчастников = Новый запрос;
	///+ГомзМА 25.03.2024
	ЗапросУчастников.Текст = "ВЫБРАТЬ
	                         |	ПодразделенияУчастники.Сотрудник КАК Сотрудник,
	                         |	Сотрудники.Код КАК Код
	                         |ИЗ
	                         |	Справочник.Подразделения.Участники КАК ПодразделенияУчастники
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	                         |		ПО ПодразделенияУчастники.Сотрудник = Сотрудники.Пользователь
	                         |ГДЕ
	                         |	ПодразделенияУчастники.Ссылка = &Направление";
	///-ГомзМА 25.03.2024
	ЗапросУчастников.УстановитьПараметр("Направление",Направление);
	Выборкаучастников = ЗапросУчастников.Выполнить().Выбрать();
	
	МассивУчастников = Новый массив;
	Участники = ВыборкаУчастников.Количество();
	Пока ВыборкаУчастников.Следующий() Цикл
		СтруктураУчастников = новый Структура;
		//Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",Выборкаучастников.Сотрудник);
		//СтруктураУчастников.Вставить("id",ВыборкаУчастников.Код);
		//СтруктураУчастников.Вставить("participant",Строка(Выборкаучастников.Сотрудник));
		//СтруктураУчастников.Вставить("state",Выборкаучастников.Статус);
	
		МассивУчастников.Добавить(ВыборкаУчастников.Код);
		МассивУчастников.Добавить("000000020"); //Ковальков Федор Александрович
		
	КонецЦикла;
	
	//--СергееВ Ф.В. Дата:20/03/24
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	СтруктураИнфо = новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
		
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗадач);
	СтруктураОтвета.Вставить("participants",МассивУчастников);
	СтруктураОтвета.Вставить("number_of_persons",Участники);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции


///+ГомзМА 14.03.2024
Функция ПолучитьСтатистикуПродажgetsalesstatistics(Запрос)
	
	///+ГомзМА 13.03.2024
	МассивФилиалов = Новый Массив;
	Если Число(Запрос.ПараметрыURL["city"]) = 1 Тогда //Все
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000030"));
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000060"));
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000029"));
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 2 Тогда //Нижний Новгород
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000030"));
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 3 Тогда //Екатеринбург
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000060"));
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 4 Тогда //Москва
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000029"));
	КонецЕсли;
	
	ЗапросСотрудников = Новый Запрос;
	ЗапросСотрудников.Текст =  "ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Пользователь.Подразделение В(&Подразделение)
	|	И НЕ Сотрудники.Пользователь.Недействителен";	
	
	ЗапросСотрудников.УстановитьПараметр("Подразделение", МассивФилиалов);
	Сотрудники = ЗапросСотрудников.Выполнить().Выбрать();
	ВыборкаСотрудников = Новый Массив;
	
	МассивДолжностейМенеджеровПродажи = Новый Массив;
	МассивДолжностейМенеджеровПродажи.Добавить(Справочники.ДолжностиПредприятия.НайтиПоКоду("000000114"));
	МассивДолжностейМенеджеровПродажи.Добавить(Справочники.ДолжностиПредприятия.НайтиПоКоду("000000093"));
	МассивДолжностейМенеджеровПродажи.Добавить(Справочники.ДолжностиПредприятия.НайтиПоКоду("000000003"));
	Пока Сотрудники.Следующий() Цикл
		ЗапросМенеджеров = Новый Запрос;
		ЗапросМенеджеров.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
		                          |	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		                          |	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность
		                          |ИЗ
		                          |	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
		                          |ГДЕ
		                          |	ДолжностиСотрудниковСрезПоследних.Сотрудник = &Сотрудник
		                          |	И ДолжностиСотрудниковСрезПоследних.Должность В (&МассивДолжностейМенеджеровПродажи)
		                          |
		                          |УПОРЯДОЧИТЬ ПО
		                          |	ДолжностиСотрудниковСрезПоследних.Период УБЫВ";
		ЗапросМенеджеров.УстановитьПараметр("Сотрудник", Сотрудники.Ссылка);
		ЗапросМенеджеров.УстановитьПараметр("МассивДолжностейМенеджеровПродажи", МассивДолжностейМенеджеровПродажи);
		//@skip-check query-in-loop
		Менеджеры = ЗапросМенеджеров.Выполнить().Выбрать();
		Если Менеджеры.Количество() > 0 Тогда
			Менеджеры.Следующий();
			ВыборкаСотрудников.Добавить(Менеджеры.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	МассивИнфо = Новый Массив;
	
	ОбщееКоличествоПродаж 	= 0;
	ОбщаяСуммаПродаж 		= 0;
	ОбщееКоличествоЗаявок 	= 0;
	ОбщаяСуммаЗаявок 		= 0;
	
	Для каждого Менеджер Из ВыборкаСотрудников Цикл
		ЗапросЗаявки = Новый Запрос;
		ЗапросЗаявки.Текст =  "ВЫБРАТЬ
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Ссылка) КАК Количество,
		                      |	СУММА(ЕСТЬNULL(ЗаказКлиента.СуммаДокумента, 0)) КАК СуммаДокумента
		                      |ИЗ
		                      |	Документ.ЗаказКлиента КАК ЗаказКлиента
		                      |ГДЕ
		                      |	ЗаказКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		                      |	И ЗаказКлиента.Ответственный = &Пользователь";
		
		ЗапросЗаявки.УстановитьПараметр("Пользователь", 	Менеджер.Пользователь);
		ЗапросЗаявки.УстановитьПараметр("ДатаНачала", 		НачалоДня(Дата(Строка(Запрос.ПараметрыURL["datestart"]))));
		ЗапросЗаявки.УстановитьПараметр("ДатаОкончания", 	КонецДня(Дата(Строка(Запрос.ПараметрыURL["dateend"]))));
		
		//@skip-check query-in-loop
		ВыборкаЗаявки = ЗапросЗаявки.Выполнить().Выбрать();
		ВыборкаЗаявки.Следующий();
		Если ВыборкаЗаявки.Количество = 0 Тогда
			КоличествоЗаявок = 0;
			СуммаЗаявок = 0;
		Иначе	
			КоличествоЗаявок = ВыборкаЗаявки.Количество;
			СуммаЗаявок = ВыборкаЗаявки.СуммаДокумента;
		КонецЕсли;
	
		ОбщееКоличествоЗаявок = ОбщееКоличествоЗаявок + КоличествоЗаявок;
		ОбщаяСуммаЗаявок = ОбщаяСуммаЗаявок + СуммаЗаявок;
		
		ЗапросПродаж = новый Запрос;
		ЗапросПродаж.Текст =  "ВЫБРАТЬ
		|	ПродажаЗапчастей.Ссылка КАК Продажа,
		|	ПродажаЗапчастей.Клиент КАК Клиент,
		|	ПродажаЗапчастей.ИтогоРекв КАК Сумма,
		|	ПродажаЗапчастей.Дата КАК Дата,
		|	ПродажаЗапчастей.Номер КАК Номер
		|ИЗ
		|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		|ГДЕ
		|	ПродажаЗапчастей.КтоПродал = &Пользователь
		|	И ПродажаЗапчастей.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		
		ЗапросПродаж.УстановитьПараметр("Пользователь", 	Менеджер.Пользователь);
		ЗапросПродаж.УстановитьПараметр("ДатаНачала", 		НачалоДня(Дата(Строка(Запрос.ПараметрыURL["datestart"]))));
		ЗапросПродаж.УстановитьПараметр("ДатаОкончания", 	КонецДня(Дата(Строка(Запрос.ПараметрыURL["dateend"]))));
		
		//@skip-check query-in-loop
		Выборка = ЗапросПродаж.Выполнить().Выбрать();
		
		СтруктураИнфо = Новый Структура;
		СтруктураИнфо.Вставить("name",    Строка(Менеджер.Пользователь));
		
		МассивПродаж = Новый Массив;
		КоличествоПродаж = 0;
		СуммаПродаж = 0;
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураПродажи = Новый Структура;
			СтруктураПродажи.Вставить("sale",    			Строка(Выборка.Продажа)); 
			СтруктураПродажи.Вставить("sale_number",    	Строка(Выборка.Номер)); 
			СтруктураПродажи.Вставить("sale_date",    		Строка(Выборка.Дата)); 
			СтруктураПродажи.Вставить("client",     		Строка(Выборка.Клиент));  	
			СтруктураПродажи.Вставить("money",      		Выборка.Сумма);
			
			МассивПродаж.Добавить(СтруктураПродажи);
			КоличествоПродаж = КоличествоПродаж + 1;
			СуммаПродаж = СуммаПродаж + Выборка.Сумма;
			
			ОбщееКоличествоПродаж = ОбщееКоличествоПродаж + 1;
			ОбщаяСуммаПродаж = ОбщаяСуммаПродаж + Выборка.Сумма;
		КонецЦикла; 
		
		Конверсия = Формат(?(КоличествоЗаявок <> 0, КоличествоПродаж / КоличествоЗаявок * 100, 0), "ЧДЦ=2");
		
		СтруктураИнфо.Вставить("conversion", 			Конверсия);
		СтруктураИнфо.Вставить("applications",  		КоличествоЗаявок);
		СтруктураИнфо.Вставить("money_applications",  	СуммаЗаявок);
		СтруктураИнфо.Вставить("count_sales",   		КоличествоПродаж);
		СтруктураИнфо.Вставить("money_sales",   		СуммаПродаж);
		СтруктураИнфо.Вставить("sales", 	    		МассивПродаж);
		
		МассивИнфо.Добавить(СтруктураИнфо);
	КонецЦикла;
	
	ОбщаяКонверсия = Формат(?(ОбщееКоличествоЗаявок <> 0, ОбщееКоличествоПродаж / ОбщееКоличествоЗаявок * 100, 0), "ЧДЦ=2");
	ОтветИнфо = Новый Структура;
	ОтветИнфо.Вставить("conversion", 			ОбщаяКонверсия);
	ОтветИнфо.Вставить("applications", 			ОбщееКоличествоЗаявок);
	ОтветИнфо.Вставить("money_applications", 	ОбщаяСуммаЗаявок);
	ОтветИнфо.Вставить("count", 				ОбщееКоличествоПродаж);
	ОтветИнфо.Вставить("money", 				ОбщаяСуммаПродаж);
	ОтветИнфо.Вставить("info", 					МассивИнфо);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ОтветИнфо);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 13.03.2024
	
КонецФункции
///-ГомзМА 14.03.2024
//--СергееВ Ф.В. Дата:14/03/24


///+ГомзМА 15.03.2024
Функция ИзменитьЗадачуedittask(Запрос)
	
		///+ГомзМА 14.03.2024
	ЗапросЗадач = новый Запрос;
	ЗапросЗадач.Текст = "ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Номер = &Номер";
	
	ЗапросЗадач.УстановитьПараметр("Номер",Строка(Запрос.ПараметрыURL["id"]));
	
	Выборка = ЗапросЗадач.Выполнить().Выбрать();
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив  = ПрочитатьJSON(ЧтениеJSON);
	
	Выборка.Следующий();
	
	ОбъектЗадачи = Выборка.Ссылка.ПолучитьОбъект(); 
	ОбъектЗадачи.Наименование 				= Массив.name;
	ОбъектЗадачи.Описание 					= Массив.description; 
	ОбъектЗадачи.ПлановыйСрокВыполнения 	= Дата(Массив.deadline);
	ОбъектЗадачи.Записать();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
	///-ГомзМА 14.03.2024
	
КонецФункции 
///-ГомзМА 15.03.2024


Функция ПолучитьСписокНаправленийgetlistdirection(Запрос)
	
	///+ГомзМА 18.03.2024
	ЗапросНаправлений = Новый Запрос;
	ЗапросНаправлений.Текст = "ВЫБРАТЬ
		|	Подразделения.Наименование КАК Наименование,
		|	Подразделения.Код КАК Код
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.Родитель = &Отдел
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	ЗапросНаправлений.УстановитьПараметр("Отдел", Справочники.Подразделения.НайтиПоКоду(Запрос.ПараметрыURL["department_id"]));
	
		Выборка = ЗапросНаправлений.Выполнить().Выбрать();
		МассивНаправлений = Новый Массив;
		Пока выборка.Следующий() Цикл
			
			СтруктураНаправление = Новый Структура;
			СтруктураНаправление.Вставить("name",    		Строка(выборка.Наименование));
			СтруктураНаправление.Вставить("id", 	    	Строка(выборка.Код));

			МассивНаправлений.Добавить(СтруктураНаправление);	
		КонецЦикла;  
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, МассивНаправлений);
		
		СтрокаДляОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(200);	
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Возврат Ответ;
		///-ГомзМА 18.03.2024
		
	КонецФункции

//++СергееВ Ф.В. Дата:19/03/24

//--СергееВ Ф.В. Дата:19/03/24


Функция СменаНаправленияЗадачиChangeDirectionTask(Запрос)
	
	///+ГомзМА 19.03.2024
	запросЗадачи = Новый Запрос;
	запросЗадачи.Текст = текстДляЗадачи();
	запросЗадачи.УстановитьПараметр("Номер",Запрос.ПараметрыURL["id"] ); 
	Выборка = запросЗадачи.Выполнить().Выбрать();
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив   = ПрочитатьJSON(ЧтениеJSON);
	
	Автор 	 = Массив.author;
	Юзер     = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	
	Исполнитель = Справочники.Пользователи.ПустаяСсылка(); 
	
	Пока выборка.Следующий() Цикл 
		
		ОбъектЗадачи = Выборка.ссылка.ПолучитьОбъект();
		
		Попытка
			//@skip-check query-in-loop
			ЗакрытьВремяЗадачи(Выборка.ссылка, ОбъектЗадачи.исполнитель);
			ОбъектЗадачи.исполнитель = Исполнитель;
			ОбъектЗадачи.Статус = Перечисления.СтатусыЗадач.Создана;
			ОбъектЗадачи.Направление = Справочники.Подразделения.НайтиПоКоду(Массив.direction);
			ОбъектЗадачи.Записать();
			
			ЗаписьРегистраСведений 				= РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.Задача 		= Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]);
			ЗаписьРегистраСведений.Прочитать();
			Если ЗаписьРегистраСведений.Выбран() Тогда
				//@skip-check query-in-loop
				СдвинутьПорядокЗадачКНачалу(ЗаписьРегистраСведений.Приоритет, ЗаписьРегистраСведений.Направление);
				ЗаписьРегистраСведений.Удалить();
			КонецЕсли;
			
			ВозвратнаяЗадача = Новый Запрос;
			ВозвратнаяЗадача.Текст = 
			"ВЫБРАТЬ
			|	Задача.Ссылка КАК Задача,
			|	Задача.Направление КАК Направление,
			|	Задача.Исполнитель КАК Исполнитель
			|ИЗ
			|	Документ.Задача КАК Задача
			|ГДЕ
			|	Задача.Ссылка = &Ссылка";
			
			ВозвратнаяЗадача.УстановитьПараметр("Ссылка", Документы.Задача.НайтиПоНомеру(Запрос.ПараметрыURL["id"]));
			
			//@skip-check query-in-loop
			РезультатЗапросаЗадача = ВозвратнаяЗадача.Выполнить().Выбрать();
			
			Если РезультатЗапросаЗадача.Количество() > 0 Тогда
				РезультатЗапросаЗадача.Следующий();
				//@skip-check query-in-loop
				ПоставитьПриоритетЗадачи(РезультатЗапросаЗадача.Задача, РезультатЗапросаЗадача.Направление);
			КонецЕсли;
						
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			
			
			//НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
			//НаборЗаписей.Отбор.Пользователь.Установить(Исполнитель);
			//НаборЗаписей.Прочитать();
			//Если НаборЗаписей.Количество() = 1 Тогда
			//	ТекстЛога = " На вас переведена задача - " + ОбъектЗадачи.номер + " " +ОбъектЗадачи.Наименование + символы.ПС + "Автор: " + Строка(ОбъектЗадачи.Ответственный);
			//	Телега = НаборЗаписей[0].ID_Пользователя;
			//	ТекстЛога = Строка(Исполнитель) + ТекстЛога;
			//	
			//	
			//	Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 
			//КонецЕсли;	
			Возврат Ответ;
			
		Исключение
			
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Не удалось сменить ответственного задачи!");
		КонецПопытки;	
		
		Возврат Ответ;
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не верные данные");
	Возврат Ответ;	
	///-ГомзМА 19.03.2024
	
КонецФункции

Функция ПолучитьСписокФотографовУчетчиковGetUchetchikPhotographerList(Запрос)
	
	///+ГомзМА 11.03.2024
	запросСотрудников = Новый Запрос;
	запросСотрудников.Текст =  "
	|ВЫБРАТЬ
	|МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|КадровыйПриказ.Сотрудник КАК Сотрудник,
	|МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	ВТ_ДолжностиНовые.Отдел КАК ОтделНов,
	|	ВТ_ДолжностиНовые.Должность КАК ДолжностьНов,
	|	Сотрудники.Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|ГДЕ
	|	НЕ Сотрудники.Пользователь.Недействителен
	|	И (ВТ_ДолжностиНовые.Должность.Наименование ПОДОБНО &Должность1
	|			ИЛИ ВТ_ДолжностиНовые.Должность.Наименование ПОДОБНО &Должность2)
	|	И НЕ Сотрудники.Ссылка = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Наименование";  
	
	запросСотрудников.УстановитьПараметр("Должность1", "%Фотограф%");
	запросСотрудников.УстановитьПараметр("Должность2", "%Учетчик%");
	запросСотрудников.УстановитьПараметр("Сотрудник", Справочники.Сотрудники.НайтиПоНаименованию("Барчев Дмитрий Олегович"));
	
	ВыборкаСотрудников = запросСотрудников.Выполнить().Выбрать();
	
	МассивСотрудников = новый массив;
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		СтруктураСотрудников = Новый Структура; 
		СтруктураСотрудников.Вставить("name", Строка(ВыборкаСотрудников.Наименование));
		СтруктураСотрудников.Вставить("code", Строка(ВыборкаСотрудников.Код));
	
		МассивСотрудников.Добавить(СтруктураСотрудников);
	КонецЦикла;

	СтруктураОтвета = новый Структура;
	
	СтруктураОтвета.Вставить("data", МассивСотрудников);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивСотрудников);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 11.03.2024
КонецФункции

Функция ПолучитьОргСтруктуруgetorgstructure(Запрос)	
	МассивКатегорий= Новый Массив;
	Дерево = Новый ДеревоЗначений;
	ЗапросОргСтруктуры = Новый Запрос;
	ЗапросОргСтруктуры.Текст ="ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Ссылка,
	|	Подразделения.Код КАК Код,
	|	Подразделения.Участники.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Сотрудник КАК Сотрудник) КАК Участники
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Ссылка = &Ссылка
	|	ИЛИ Подразделения.Родитель = &Ссылка
	|	ИЛИ Подразделения.Родитель.Родитель = &Ссылка
	|	ИЛИ Подразделения.Родитель.Родитель.Родитель = &Ссылка
	|ИТОГИ
	|ПО
	|	Ссылка Только ИЕРАРХИЯ" ;
	ЗапросОргСтруктуры.УстановитьПараметр("Ссылка",Справочники.Подразделения.НайтиПоКоду(Запрос.ПараметрыURL["id"]));
	
	Дерево = ЗапросОргСтруктуры.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	МассивКатегорий= Новый Массив;
	ПустойМассив = новый массив;
	Для Каждого СтрПервогоУровня из Дерево.Строки Цикл
		СтруктураКатегорий1 = Новый Структура;
		СтруктураКатегорий1.Вставить("directions",Строка(СтрПервогоУровня.Ссылка));
		СтруктураКатегорий1.Вставить("id",Строка(СтрПервогоУровня.Код));
		МассивКатегорий2 = Новый массив;
		Для Каждого стрВторогоУровня из СтрПервогоУровня.Строки Цикл 
			МассивКатегорий3 = Новый массив;
			
			Для Каждого стрТретьегоУровня из СтрВторогоУровня.Строки Цикл
				Если стрТретьегоУровня.Ссылка <> СтрВторогоУровня.Ссылка Тогда
				МассивУчастников = Новый массив;
				
				СтруктураКатегорий3 = Новый Структура;
				СтруктураКатегорий3.Вставить("directions","");
				
				СтруктураКатегорий3.Вставить("directions",Строка(стрТретьегоУровня.Ссылка));
				СтруктураКатегорий3.Вставить("id",Строка(стрТретьегоУровня.Код));
				СтруктураКатегорий3.Вставить("subdirections",ПустойМассив);
				ТУ = стрТретьегоУровня.Участники; 
				Для каждого Стр Из ТУ Цикл
					СтруктураУчастников = Новый Структура;
					СтруктураУчастников.Вставить("id",Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",Стр.сотрудник).Код);
					СтруктураУчастников.Вставить("name",Строка(Стр.сотрудник));
					МассивУчастников.Добавить(СтруктураУчастников);
				КонецЦикла;
				СтруктураКатегорий3.Вставить("employees",МассивУчастников);
				МассивКатегорий3.Добавить(СтруктураКатегорий3);
				//МассивКатегорий4 = Новый массив;
				Иначе
					 МассивУчастниковОсн = новый массив;
					ТУ = стрТретьегоУровня.Участники; 
				Для каждого Стр Из ТУ Цикл
					СтруктураУчастников = Новый Структура;
					СтруктураУчастников.Вставить("id",Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",Стр.сотрудник).Код);
					СтруктураУчастников.Вставить("name",Строка(Стр.сотрудник));
					МассивУчастниковОсн.Добавить(СтруктураУчастников);
				КонецЦикла;
				//СтруктураКатегорий3.Вставить("employees",МассивУчастниковОсн);
				КонецЕсли;
			КонецЦикла;	
			СтруктураКатегорий2 = новый Структура;
			СтруктураКатегорий2.Вставить("directions",Строка(стрВторогоУровня.Ссылка));
			СтруктураКатегорий2.Вставить("id",Строка(стрВторогоУровня.Код));
			//Если МассивКатегорий3.Количество()>0 Тогда

				СтруктураКатегорий2.Вставить("employees",МассивУчастниковОсн);	
				СтруктураКатегорий2.Вставить("subdirections",МассивКатегорий3);
				
			//КонецЕсли;
			МассивКатегорий2.Добавить(СтруктураКатегорий2);
		КонецЦикла;
		//Если МассивКатегорий2.Количество()>0 Тогда
			СтруктураКатегорий1.Вставить("subdirections",МассивКатегорий2);
			
		//КонецЕсли;
		МассивКатегорий.Добавить(СтруктураКатегорий1);
	КонецЦикла;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	Если Дерево.Строки.Количество() > 1 тогда
		ЗаписатьJSON(ЗаписьJSON, МассивКатегорий2);
	Иначе
		
		ЗаписатьJSON(ЗаписьJSON, СтруктураКатегорий2);
	КонецЕсли;
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции


Функция ПолучитьСтатистикуПоСкладуgetwarehousestatistics(Запрос) 
	
	///+ГомзМА 19.03.2024
	НачалоОтбора = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	КонецОтбора  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	
	МассивГруппМестХранения = Новый Массив;
	МассивРегиональныхСтеллажей = Новый Массив;
	///+ГомзМА 05.03.2024
	Если Число(Запрос.ПараметрыURL["city"]) = 1 Тогда //Все
		МассивСкладов = ПолучитьСклады(Неопределено);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000004")); //D
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000008")); //K
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000033")); //EK
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000012")); //Z
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000010")); //X
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000038")); //S
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000009")); //M
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000011")); //Y
		
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001072")); //2_ANGAR
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002015")); //RegionNN
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001068")); //RegionEKB
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002014")); //RegionMSK
		
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001072")); //2_ANGAR
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002015")); //RegionNN
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001068")); //RegionEKB
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002014")); //RegionMSK
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 2 Тогда //Нижний Новгород
		Область = Справочники.Область.НайтиПоКоду("000000052");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000004")); //D
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000008")); //K
		
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001072")); //2_ANGAR
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002015")); //RegionNN
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 3 Тогда //Екатеринбург
		Область = Справочники.Область.НайтиПоКоду("000000066");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000033")); //EK
		
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000001068")); //RegionEKB
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 4 Тогда //Москва
		Область = Справочники.Область.НайтиПоКоду("000000077");
		МассивСкладов = ПолучитьСклады(Область);
		
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000012")); //Z
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000010")); //X
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000038")); //S
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000009")); //M
		МассивГруппМестХранения.Добавить(Справочники.ГруппыМестХранения.НайтиПоКоду("000000011")); //Y
		
		МассивРегиональныхСтеллажей.Добавить(Справочники.Стеллаж.НайтиПоКоду("000002014")); //RegionMSK
	КонецЕсли;		
	///-ГомзМА 05.03.2024		

	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Фурсов Алексей Владимирович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Демаев Роман Юрьевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Демин Алексей Сергеевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Миронов Антон Николаевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Наумов Николай Борисович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Ражев Александр Викторович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Козин Иван Васильевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Куколкин Вадим Дмитриевич"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Чупанов Сергей Иванович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Чупанова Екатерина Владимировна"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Алексеев Денис Романович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Ильин Николай Александрович"));
	МассивСотрудников.Добавить(Справочники.Пользователи.НайтиПоНаименованию("Гафаров Александр Анатольевич"));
	
	СтруктураОтвета = Новый Структура;
	//Получаем перемещения
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И НЕ (ЛогИндНомера.Поддон = &Потеряшки
	|	ИЛИ ЛогИндНомера.ПредыдущийПоддон = &Потеряшки)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|	ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Склад", МассивСкладов);
	
	ЗапросПерещений.УстановитьПараметр("Потеряшки",	Справочники.Поддоны.НайтиПоКоду("000000003"));
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();
	СтруктураТоваровПеремещение = Новый Структура;
	
	Выборка.Следующий();
	Если Выборка.колво > 0 тогда
		СтруктураТоваровПеремещение.Вставить("detail", Выборка.колво);
		СтруктураТоваровПеремещение.Вставить("money", Выборка.Сумма);
	иначе
		СтруктураТоваровПеремещение.Вставить("detail", 0);	
		СтруктураТоваровПеремещение.Вставить("money", 0);
	КонецЕсли;
	
	МассивДеталейПоСотруднику = Новый Массив;
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И НЕ (ЛогИндНомера.Поддон = &Потеряшки
	|	ИЛИ ЛогИндНомера.ПредыдущийПоддон = &Потеряшки)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|	ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Сотрудники", МассивСотрудников);
	
	ЗапросПерещений.УстановитьПараметр("Склад", МассивСкладов);
	
	ЗапросПерещений.УстановитьПараметр("Потеряшки",	Справочники.Поддоны.НайтиПоКоду("000000003"));
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураДеталейПоСотруднику = Новый Структура;
			СтруктураДеталейПоСотруднику.Вставить("detail", Выборка.колво);
			СтруктураДеталейПоСотруднику.Вставить("money", Выборка.Сумма);
			СтруктураДеталейПоСотруднику.Вставить("person", Строка(Выборка.Ответственный));
			МассивДеталейПоСотруднику.Добавить(СтруктураДеталейПоСотруднику);
		КонецЦикла;
		
	КонецЕсли;
	СтруктураТоваровПеремещение.Вставить("detail_person", МассивДеталейПоСотруднику);
	
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	ЛогИндНомера.дата КАК колво,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК индкод,
	|	СУММА(ИндНомер.Цена) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Пред
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И НЕ (ЛогИндНомера.Поддон = &Потеряшки
	|	ИЛИ ЛогИндНомера.ПредыдущийПоддон = &Потеряшки)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|	ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Пред.колво) КАК колво,
	|	СУММА(ВТ_Пред.Сумма) КАК Сумма
	|ИЗ
	|	ВТ_Пред КАК ВТ_Пред
	|ГДЕ
	|	ВТ_Пред.индкод > 1";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Склад", МассивСкладов);
	
	ЗапросПерещений.УстановитьПараметр("Потеряшки",	Справочники.Поддоны.НайтиПоКоду("000000003"));
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();
	
	Выборка.Следующий();
	Если Выборка.колво > 0 тогда
		СтруктураТоваровПеремещение.Вставить("poddon", Выборка.колво);	
		СтруктураТоваровПеремещение.Вставить("poddon_money", Выборка.Сумма);
	иначе
		СтруктураТоваровПеремещение.Вставить("poddon", 0);	
		СтруктураТоваровПеремещение.Вставить("poddon_money", 0);
	КонецЕсли;

	
	МассивПоддоновПоСотруднику = Новый Массив;
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	ЛогИндНомера.дата КАК колво,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК индкод,
	|	СУММА(ИндНомер.Цена) КАК Сумма,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_Пред
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И НЕ (ЛогИндНомера.Поддон = &Потеряшки
	|	ИЛИ ЛогИндНомера.ПредыдущийПоддон = &Потеряшки)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|	ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.дата,
	|	ЛогИндНомера.Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Пред.колво) КАК колво,
	|	СУММА(ВТ_Пред.Сумма) КАК Сумма,
	|	ВТ_Пред.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_Пред КАК ВТ_Пред
	|ГДЕ
	|	ВТ_Пред.индкод > 1
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Пред.Ответственный";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Сотрудники", МассивСотрудников);
	
	ЗапросПерещений.УстановитьПараметр("Склад", МассивСкладов);
	
	ЗапросПерещений.УстановитьПараметр("Потеряшки",	Справочники.Поддоны.НайтиПоКоду("000000003"));
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураПоддоновПоСотруднику = Новый Структура;
			СтруктураПоддоновПоСотруднику.Вставить("poddon", Выборка.колво);
			СтруктураПоддоновПоСотруднику.Вставить("money",  Выборка.Сумма);
			СтруктураПоддоновПоСотруднику.Вставить("person", Строка(Выборка.Ответственный));
			МассивПоддоновПоСотруднику.Добавить(СтруктураПоддоновПоСотруднику);
		КонецЦикла;
		
	КонецЕсли;
	СтруктураТоваровПеремещение.Вставить("poddon_person", МассивПоддоновПоСотруднику);
	СтруктураОтвета.Вставить("move", СтруктураТоваровПеремещение);
	
	//Получаем принятые
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И (ЛогИндНомера.ПредыдущийСтеллаж В (&МассивРегиональныхСтеллажей)
	|	ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Наименование ПОДОБНО &Группанач2)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|	ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("МассивРегиональныхСтеллажей",		МассивРегиональныхСтеллажей);
	ЗапросПерещений.УстановитьПараметр("Группанач2","%Korzina%");
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Склад", МассивСкладов);
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();
	СтруктураТоваровПринятые = Новый Структура;
	
	Выборка.Следующий();
	Если Выборка.колво > 0 тогда
		СтруктураТоваровПринятые.Вставить("count", Выборка.колво);
		СтруктураТоваровПринятые.Вставить("money", Выборка.Сумма);
	иначе
		СтруктураТоваровПринятые.Вставить("count", 0);	
		СтруктураТоваровПринятые.Вставить("money", 0);
	КонецЕсли;
	
	МассивКоличествоПоСотруднику = Новый Массив;
	ЗапросКоличествоПоСотруднику = Новый Запрос;
	ЗапросКоличествоПоСотруднику.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И (ЛогИндНомера.ПредыдущийСтеллаж В (&МассивРегиональныхСтеллажей)
	|	ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Наименование ПОДОБНО &Группанач2)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|	ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный";
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("МассивГруппМестХранения", 	МассивГруппМестХранения);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("МассивРегиональныхСтеллажей", МассивРегиональныхСтеллажей);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Группанач2","%Korzina%");
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Сотрудники", МассивСотрудников);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Склад", МассивСкладов);
	
	Выборка = ЗапросКоличествоПоСотруднику.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураКоличествоПоСотруднику = Новый Структура;
			СтруктураКоличествоПоСотруднику.Вставить("count", 	Выборка.колво);
			СтруктураКоличествоПоСотруднику.Вставить("money", 	Выборка.Сумма);
			СтруктураКоличествоПоСотруднику.Вставить("person", 	Строка(Выборка.Ответственный));
			МассивКоличествоПоСотруднику.Добавить(СтруктураКоличествоПоСотруднику);
		КонецЦикла;
		
	КонецЕсли;
	СтруктураТоваровПринятые.Вставить("count_person", МассивКоличествоПоСотруднику);
	СтруктураОтвета.Вставить("received", СтруктураТоваровПринятые);
	
	//Получаем выданные
	ЗапросПерещений = Новый Запрос;
	ЗапросПерещений.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.Наименование ПОДОБНО &Группакон
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|	ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))";
	
	ЗапросПерещений.УстановитьПараметр("МассивГруппМестХранения", 	МассивГруппМестХранения);
	
	ЗапросПерещений.УстановитьПараметр("Группакон","%Korzina%");
	
	ЗапросПерещений.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросПерещений.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросПерещений.УстановитьПараметр("Склад", МассивСкладов);
	
	Выборка = ЗапросПерещений.Выполнить().Выбрать();
	СтруктураТоваровВыданные = Новый Структура;
	Количество 	= 0;
	Сумма 		= 0;
	
	Выборка.Следующий();
	Если Выборка.колво > 0 тогда
		Количество 	= Количество + Выборка.колво;		
		Сумма 		= Сумма + Выборка.Сумма;
	КонецЕсли;

	
	ЗапросТоваровВПродажах = Новый Запрос;
	ЗапросТоваровВПродажах.Текст = "ВЫБРАТЬ
	|	СУММА(ПродажаЗапчастейТаблица.Количество) КАК колво,
	|	СУММА(ПродажаЗапчастейТаблица.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ПродажаЗапчастейТаблица.Партия = ИндНомер.индкод
	|ГДЕ
	|	ИндНомер.Стеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И ПродажаЗапчастейТаблица.ДатаВыдачи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПродажаЗапчастейТаблица.СтатусТовара
	|	И ИндНомер.Стеллаж.Владелец В (&Склад)";
	
	ЗапросТоваровВПродажах.УстановитьПараметр("МассивГруппМестХранения",	МассивГруппМестХранения);	
		
	ЗапросТоваровВПродажах.УстановитьПараметр("Датаначала",НачалоОтбора);
	ЗапросТоваровВПродажах.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросТоваровВПродажах.УстановитьПараметр("Склад", МассивСкладов);
	
	Выборка = ЗапросТоваровВПродажах.Выполнить().Выбрать();
	
	Выборка.Следующий();
		Если Выборка.колво <> NULL Тогда
			Если выборка.колво > 0 Тогда
				Количество 	= Количество + Выборка.колво;
				Сумма 		= Сумма + Выборка.Сумма;
			КонецЕсли;
		КонецЕсли;

	МассивКоличествоПоСотруднику = Новый Массив;
	ЗапросКоличествоПоСотруднику = Новый Запрос;
	ЗапросКоличествоПоСотруднику.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЛогИндНомера.дата) КАК колво,
	|	СУММА(ИндНомер.Цена) КАК Сумма,
	|	ЛогИндНомера.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_Количество
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Стеллаж.Наименование ПОДОБНО &Группакон
	|	И ЛогИндНомера.ПредыдущийСтеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И ЛогИндНомера.Ответственный В (&Сотрудники)
	|	И (ЛогИндНомера.Стеллаж.Владелец В (&Склад)
	|	ИЛИ ЛогИндНомера.ПредыдущийСтеллаж.Владелец В (&Склад))
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ПродажаЗапчастейТаблица.Количество),
	|	СУММА(ПродажаЗапчастейТаблица.Сумма),
	|	ПродажаЗапчастейТаблица.ОтветственныйЗаВыдачу
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ПродажаЗапчастейТаблица.Партия = ИндНомер.индкод
	|ГДЕ
	|	ИндНомер.Стеллаж.ГруппаМестХранения В (&МассивГруппМестХранения)
	|	И ПродажаЗапчастейТаблица.ДатаВыдачи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПродажаЗапчастейТаблица.СтатусТовара
	|	И ПродажаЗапчастейТаблица.ОтветственныйЗаВыдачу В (&Сотрудники)
	|	И ИндНомер.Стеллаж.Владелец В (&Склад)
	|СГРУППИРОВАТЬ ПО
	|	ПродажаЗапчастейТаблица.ОтветственныйЗаВыдачу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Количество.колво) КАК колво,
	|	СУММА(ВТ_Количество.Сумма) КАК Сумма,
	|	ВТ_Количество.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_Количество КАК ВТ_Количество
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Количество.Ответственный";
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("МассивГруппМестХранения",	МассивГруппМестХранения);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Группакон",	"%Korzina%");
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Датаначала",	НачалоОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("ДатаОкончания",КонецОтбора);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Сотрудники", МассивСотрудников);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Склад", МассивСкладов);
	
	Выборка = ЗапросКоличествоПоСотруднику.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураКоличествоПоСотруднику = Новый Структура;
			СтруктураКоличествоПоСотруднику.Вставить("count", Выборка.колво);
			СтруктураКоличествоПоСотруднику.Вставить("money", Выборка.Сумма);
			СтруктураКоличествоПоСотруднику.Вставить("person", Строка(Выборка.Ответственный));
			МассивКоличествоПоСотруднику.Добавить(СтруктураКоличествоПоСотруднику);
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураТоваровВыданные.Вставить("count", Количество);
	СтруктураТоваровВыданные.Вставить("money", Сумма);
	СтруктураТоваровВыданные.Вставить("count_person", МассивКоличествоПоСотруднику);

	СтруктураОтвета.Вставить("issue", СтруктураТоваровВыданные);
	
	//Получаем потеряшки
	//Получить общее число потерянных и найденных запчастей за период
	ЗапросТоваров = Новый запрос;
	ЗапросТоваров.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК Потери,
	|	СУММА(ИндНомер.Цена) КАК СуммаПотери
	|ПОМЕСТИТЬ ВТ_Потери
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.Поддон = &Поддон
	|	И ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Поддон.Стеллаж.Владелец В (&Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК Нашли,
	|	СУММА(ИндНомер.Цена) КАК СуммаНашли
	|ПОМЕСТИТЬ ВТ_Нашли
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.ПредыдущийПоддон = &Поддон
	|	И ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.ПредыдущийПоддон.Стеллаж.Владелец В (&Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потери.Потери КАК Потерянные,
	|	ВТ_Нашли.Нашли КАК Найденные,
	|	ВТ_Нашли.СуммаНашли КАК СуммаНашли,
	|	ВТ_Потери.СуммаПотери КАК СуммаПотери
	|ИЗ
	|	ВТ_Потери КАК ВТ_Потери,
	|	ВТ_Нашли КАК ВТ_Нашли";
	
	ЗапросТоваров.УстановитьПараметр("Поддон",			Справочники.Поддоны.НайтиПоКоду("000000003"));
	ЗапросТоваров.УстановитьПараметр("Датаначала",		НачалоОтбора);
	ЗапросТоваров.УстановитьПараметр("ДатаОкончания",	КонецОтбора);
	ЗапросТоваров.УстановитьПараметр("Склад", 			МассивСкладов);
	
	Выборка = ЗапросТоваров.Выполнить().Выбрать(); 
	
	СтруктураСтатусов = Новый Структура;
	
	МассивСтатусов = Новый Массив;
	ОбщиеНайденные = 0;
	ОбщиеПотерянные = 0;
	ОбщиеСуммаНашли = 0;
	ОбщиеСуммаПотери = 0;
	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураСтатусов = Новый Структура;	
			СтруктураСтатусов.Вставить("lost",			Выборка.Потерянные);
			СтруктураСтатусов.Вставить("lost_money", 	Выборка.СуммаПотери);
			СтруктураСтатусов.Вставить("find",			Выборка.Найденные);
			СтруктураСтатусов.Вставить("find_money", 	Выборка.СуммаНашли);
			
			Если Выборка.Потерянные > 0 тогда
				ОбщиеПотерянные = ОбщиеПотерянные + Выборка.Потерянные;
				ОбщиеСуммаПотери = ОбщиеСуммаПотери + Выборка.СуммаПотери;
			КонецЕсли;
			
			Если Выборка.Найденные > 0 тогда
				ОбщиеНайденные = ОбщиеНайденные + Выборка.Найденные;	
				ОбщиеСуммаНашли = ОбщиеСуммаНашли + Выборка.СуммаНашли;
			КонецЕсли;
			
			МассивСтатусов.Добавить(СтруктураСтатусов);
		КонецЦикла;
	иначе
		СтруктураСтатусов.Вставить("count", 0);	
		МассивСтатусов.Добавить(СтруктураСтатусов);
	КонецЕсли;
	
	//Получить потеренные детали по сотрудникам за период
	МассивКоличествоПоСотрудникуПотери = Новый Массив;
	ЗапросКоличествоПоСотруднику = Новый Запрос;
	ЗапросКоличествоПоСотруднику.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК Потери,
	|	ЛогИндНомера.Ответственный КАК ОтветственныйПотери,
	|	СУММА(ИндНомер.Цена) КАК СуммаПотери
	|ПОМЕСТИТЬ ВТ_Потери
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.Поддон = &Поддон
	|	И ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Ответственный В (&Сотрудники)
	|	И ЛогИндНомера.Поддон.Стеллаж.Владелец В (&Склад)
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потери.Потери КАК Потерянные,
	|	ВТ_Потери.ОтветственныйПотери КАК ОтветственныйПотери,
	|	ВТ_Потери.СуммаПотери КАК СуммаПотери
	|ИЗ
	|	ВТ_Потери КАК ВТ_Потери";
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Поддон",		 Справочники.Поддоны.НайтиПоКоду("000000003"));
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Датаначала",	 НачалоОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("ДатаОкончания", КонецОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Склад", 		 МассивСкладов);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Сотрудники", 	 МассивСотрудников);
	
	Выборка = ЗапросКоличествоПоСотруднику.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураКоличествоПоСотрудникуПотери = Новый Структура;
			СтруктураКоличествоПоСотрудникуПотери.Вставить("count", 	Выборка.Потерянные);
			СтруктураКоличествоПоСотрудникуПотери.Вставить("money", 	Выборка.СуммаПотери);
			СтруктураКоличествоПоСотрудникуПотери.Вставить("person", 	Строка(Выборка.ОтветственныйПотери));
			
			МассивКоличествоПоСотрудникуПотери.Добавить(СтруктураКоличествоПоСотрудникуПотери);
		КонецЦикла;
	КонецЕсли;
	
	//Получить найденные детали по сотрудникам за период
	МассивКоличествоПоСотрудникуНашли = Новый Массив;
	ЗапросКоличествоПоСотруднику = Новый Запрос;
	ЗапросКоличествоПоСотруднику.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛогИндНомера.индкод) КАК Нашли,
	|	ЛогИндНомера.Ответственный КАК ОтветственныйНашли,
	|	СУММА(ИндНомер.Цена) КАК СуммаНашли
	|ПОМЕСТИТЬ ВТ_Нашли
	|ИЗ
	|	РегистрСведений.ЛогИндНомера КАК ЛогИндНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЛогИндНомера.индкод = ИндНомер.индкод
	|ГДЕ
	|	ЛогИндНомера.ПредыдущийПоддон = &Поддон
	|	И ЛогИндНомера.дата МЕЖДУ &Датаначала И &ДатаОкончания
	|	И ЛогИндНомера.Ответственный В (&Сотрудники)
	|	И ЛогИндНомера.ПредыдущийПоддон.Стеллаж.Владелец В (&Склад)
	|СГРУППИРОВАТЬ ПО
	|	ЛогИндНомера.Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Нашли.Нашли КАК Найденные,
	|	ВТ_Нашли.СуммаНашли КАК СуммаНашли,
	|	ВТ_Нашли.ОтветственныйНашли КАК ОтветственныйНашли
	|ИЗ
	|	ВТ_Нашли КАК ВТ_Нашли";
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Поддон",		 Справочники.Поддоны.НайтиПоКоду("000000003"));
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Датаначала",	 НачалоОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("ДатаОкончания", КонецОтбора);
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Склад",  		 МассивСкладов);
	
	ЗапросКоличествоПоСотруднику.УстановитьПараметр("Сотрудники", 	 МассивСотрудников);
	
	Выборка = ЗапросКоличествоПоСотруднику.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 тогда
		Пока Выборка.Следующий() Цикл
			СтруктураКоличествоПоСотрудникуНашли = Новый Структура;
			
			СтруктураКоличествоПоСотрудникуНашли.Вставить("count", Выборка.Найденные);
			СтруктураКоличествоПоСотрудникуНашли.Вставить("money", Выборка.СуммаНашли);
			СтруктураКоличествоПоСотрудникуНашли.Вставить("person", Строка(Выборка.ОтветственныйНашли));
			
			МассивКоличествоПоСотрудникуНашли.Добавить(СтруктураКоличествоПоСотрудникуНашли);
		КонецЦикла;
	КонецЕсли;

		
	СтруктураСтатусовобщ = Новый структура;	
	СтруктураСтатусовобщ.Вставить("lost",			ОбщиеПотерянные);
	СтруктураСтатусовобщ.Вставить("lost_money",		ОбщиеСуммаПотери);
	СтруктураСтатусовобщ.Вставить("lost_person", 	МассивКоличествоПоСотрудникуПотери);
	СтруктураСтатусовобщ.Вставить("find",			ОбщиеНайденные);
	СтруктураСтатусовобщ.Вставить("find_money",		ОбщиеСуммаНашли);
	СтруктураСтатусовобщ.Вставить("find_person", 	МассивКоличествоПоСотрудникуНашли);
	СтруктураОтвета.Вставить("lost", СтруктураСтатусовобщ);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 19.03.2024
КонецФункции

Функция ПолучитьКаталогМашинgetlisttrucks(Запрос)
	
	ЗапросМашин = Новый запрос;
	//ТекстЗапроса = "ВЫБРАТЬ
	//|	Машины.Код КАК Код,
	//|	Машины.Наименование КАК Наименование,
	//|	Машины.КодМашины КАК КодМашины,
	//|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	//|ПОМЕСТИТЬ ВТ_Пред
	//|ИЗ
	//|	Справочник.Машины КАК Машины
	//|ГДЕ
	//|	Машины.Наименование ПОДОБНО &Наименование
	//|	ИЛИ Машины.Код ПОДОБНО &Наименование
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ Первые %1
	//|	ВТ_Пред.Код,
	//|	ВТ_Пред.Наименование,
	//|	ВТ_Пред.КодМашины,
	//|	ВТ_Пред.НомерЗаписи
	//|ИЗ
	//|	ВТ_Пред КАК ВТ_Пред
	//|ГДЕ
	//|	ВТ_Пред.НомерЗаписи > &НачинаясЗаписи";
	
	///+ГомзМА 02.04.2024
	Статус = Справочники.СтатусыФиксацииЗаказаМашин.НайтиПоКоду(Запрос.ПараметрыURL["status"]);
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ФиксацияЗаказаМашин.Ссылка КАК Ссылка,
		|	ФиксацияЗаказаМашин.Статус КАК Статус,
		|	ФиксацияЗаказаМашин.НаименованиеМашины.Код КАК Код,
		|	ВЫБОР
		|		КОГДА ФиксацияЗаказаМашин.НаименованиеМашины <> ЗНАЧЕНИЕ(Справочник.Машины.ПустаяСсылка)
		|			ТОГДА ФиксацияЗаказаМашин.НаименованиеМашины.Наименование
		|		ИНАЧЕ ФиксацияЗаказаМашин.Наименование
		|	КОНЕЦ КАК Наименование,
		|	ВЫБОР
		|		КОГДА ФиксацияЗаказаМашин.КодМашины = """"
		|		И ФиксацияЗаказаМашин.НаименованиеМашины <> ЗНАЧЕНИЕ(Справочник.Машины.ПустаяСсылка)
		|			ТОГДА ФиксацияЗаказаМашин.НаименованиеМашины.КодМашины
		|		КОГДА ФиксацияЗаказаМашин.НаименованиеМашины <> ЗНАЧЕНИЕ(Справочник.Машины.ПустаяСсылка)
		|		И ФиксацияЗаказаМашин.НаименованиеМашины.КодМашины = """"
		|			ТОГДА ФиксацияЗаказаМашин.КодМашины
		|		ИНАЧЕ ФиксацияЗаказаМашин.КодМашины
		|	КОНЕЦ КАК КодМашины,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	Документ.ФиксацияЗаказаМашин КАК ФиксацияЗаказаМашин
		|ГДЕ
		|	ФиксацияЗаказаМашин.Статус = &Статус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.Код КАК Код,
		|	ВТ_Данные.Наименование КАК Наименование,
		|	ВТ_Данные.КодМашины КАК КодМашины,
		|	ВТ_Данные.НомерЗаписи КАК НомерЗаписи
		|ПОМЕСТИТЬ ВТ_Пред
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|ГДЕ
		|	(ВТ_Данные.Наименование ПОДОБНО &Наименование
		|	ИЛИ ВТ_Данные.Код ПОДОБНО &Наименование)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ Первые %1
		|	ВТ_Пред.Код КАК Код,
		|	ВТ_Пред.Наименование КАК Наименование,
		|	ВТ_Пред.КодМашины КАК КодМашины,
		|	ВТ_Пред.НомерЗаписи КАК НомерЗаписи
		|ИЗ
		|	ВТ_Пред КАК ВТ_Пред
		|ГДЕ
		|	ВТ_Пред.НомерЗаписи > &НачинаясЗаписи";
	
	///-ГомзМА 02.04.2024
	//ЗапросМашин = Новый Запрос;
	ЗапросМашин.Текст =  СтрШаблон(ТекстЗапроса, Формат(10000, "ЧГ="));  
	Если Строка(Запрос.ПараметрыURL["id"]) = "Все" Тогда
		ЗапросМашин.УстановитьПараметр("наименование", "%"+"[a-я]"+"%");
	Иначе
		ЗапросМашин.УстановитьПараметр("наименование", "%"+Строка(Запрос.ПараметрыURL["id"])+"%" );
	КонецЕсли;
	
	ЗапросМашин.УстановитьПараметр("НачинаяСЗаписи", 0);
	ЗапросМашин.УстановитьПараметр("Статус", Статус);
	Выборка = ЗапросМашин.Выполнить().Выбрать();
	ВыборкаОбщ = Выборка.Количество();
	
	///+ГомзМА 02.04.2024
	ЗапросМашин.Текст =  СтрШаблон(ТекстЗапроса, Формат(?(Число(Запрос.ПараметрыURL["count"])>0,Запрос.ПараметрыURL["count"],100000), "ЧГ="));
	///-ГомзМА 02.04.2024
	
	Если Число(((Запрос.ПараметрыURL["count"])*(Запрос.ПараметрыURL["page"])))>0 и Число(Запрос.ПараметрыURL["page"])>1 Тогда
		ЗапросМашин.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["count"])*((Запрос.ПараметрыURL["page"])-1)+1)));
	Иначе 
		ЗапросМашин.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли; 
	Если Строка(Запрос.ПараметрыURL["id"]) = "Все" Тогда
		ЗапросМашин.УстановитьПараметр("наименование", "%"+"[a-я]"+"%");
	Иначе
		ЗапросМашин.УстановитьПараметр("наименование", "%"+Строка(Запрос.ПараметрыURL["id"])+"%" );
	КонецЕсли;
	ЗапросМашин.УстановитьПараметр("Статус", Статус);
	
	Выборка = ЗапросМашин.Выполнить().Выгрузить();
	Выборка.Сортировать("КодМашины");
	
	ИндКоды = Выборка.ВыгрузитьКолонку("КодМашины");
	Фотки = ПолучениеФотоДляГрузовика(ИндКоды);
	Итер = 0;
	
	
	
	МассивМашин = Новый Массив;
	
	Для каждого стр из выборка Цикл
			НайденныеФотки = Новый Массив;
		
		НайденныеФотки = Фотки[Итер].links;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			 
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		Итер = Итер+1;
		
		
		СтруктураМашин = Новый Структура;
		СтруктураМашин.Вставить("name",    	Строка(стр.Наименование));
		СтруктураМашин.Вставить("code", 	Строка(стр.КодМашины));
		СтруктураМашин.Вставить("id", 	    Строка(стр.Код));
	
        СтруктураМашин.Вставить("photos", МассивФото);
		МассивМашин.Добавить(СтруктураМашин);
	КонецЦикла;
	
	
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("count",Выборкаобщ);  

	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивМашин);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();                                    
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучениеФотоДляГрузовика(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245",8085);
		
		СтрокаЗапроса = "/v1/files/truck";
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);	
		СтруктураДанных = Новый Структура();
		ЗапросСтруктура = Новый Структура();
		ЗапросСтруктура.Вставить("truckCode", ИндКод);
		СтруктураДанных.Вставить("data",ЗапросСтруктура);
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON();
		ПотокJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ПотокJSON, СтруктураДанных);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		
		МассивПустыхФото = новый массив; 
		
		Для каждого стр из ИндКод Цикл 
			links = Новый массив;
			МассивПустыхФото.Добавить(links);
			
		КонецЦикла;
		
		Возврат МассивПустыхФото;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьФинансовуюСтатистикуgetfinancialstatistics(Запрос)
	
	///+ГомзМА 01.04.2024
	ДатаНачала = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	ДатаОкончания  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	
	ЭтоНН = 0;
	МассивФилиалов = Новый Массив;
	Если Число(Запрос.ПараметрыURL["city"]) = 1 Тогда //Все
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000030"));
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000060"));
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000029"));
		
		ЭтоНН = 1;
		ФормулаПрибылиНеполная = Ложь;
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 2 Тогда //Нижний Новгород
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000030"));
		
		ЭтоНН = 1;
		ФормулаПрибылиНеполная = Ложь;
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 3 Тогда //Екатеринбург
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000060"));
		ФормулаПрибылиНеполная = Истина;
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 4 Тогда //Москва
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000029"));
		ФормулаПрибылиНеполная = Истина;
	КонецЕсли;
	
	//Получить общую сумму выручки и расхода
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаПриход
	|ПОМЕСТИТЬ ВТ_Доход
	|ИЗ
	|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	|ГДЕ
	|	ПриходДенегНаСчет.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПриходДенегНаСчет.Менеджер.Подразделение В (&Подразделение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ЭтоНН = 1
	|			ТОГДА СУММА(ПриходОтКредитов.Сумма)
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.ПриходОтКредитов КАК ПриходОтКредитов
	|ГДЕ
	|	ПриходОтКредитов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Доход.СуммаПриход) КАК СуммаПриход
	|ПОМЕСТИТЬ ВТ_ДоходОбщ
	|ИЗ
	|	ВТ_Доход КАК ВТ_Доход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Расходы.Сумма) КАК СуммаРасход
	|ПОМЕСТИТЬ ВТ_Расходы
	|ИЗ
	|	Документ.Расходы КАК Расходы
	|ГДЕ
	|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Расходы.Ответственный.Подразделение В (&Подразделение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ЭтоНН = 1
	|			ТОГДА СУММА(ЛичныйВывод.Сумма)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРасход
	|ИЗ
	|	Документ.ЛичныйВывод КАК ЛичныйВывод
	|ГДЕ
	|	ЛичныйВывод.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Расходы.СуммаРасход) КАК СуммаРасход
	|ПОМЕСТИТЬ ВТ_РасходыОбщ
	|ИЗ
	|	ВТ_Расходы КАК ВТ_Расходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоходОбщ.СуммаПриход КАК СуммаПриход,
	|	ВТ_РасходыОбщ.СуммаРасход КАК СуммаРасход
	|ИЗ
	|	ВТ_ДоходОбщ КАК ВТ_ДоходОбщ,
	|	ВТ_РасходыОбщ КАК ВТ_РасходыОбщ";	
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Подразделение", МассивФилиалов);
	Запрос.УстановитьПараметр("ЭтоНН", ЭтоНН);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();

	Выручка = ?(РезультатЗапроса.СуммаПриход = Null, 0, Число(Формат(РезультатЗапроса.СуммаПриход, "ЧДЦ=0; ЧН=0;")));
	Расход 	= ?(РезультатЗапроса.СуммаРасход = Null, 0, Число(Формат(РезультатЗапроса.СуммаРасход, "ЧДЦ=0; ЧН=0;")));
	
	Если ФормулаПрибылиНеполная Тогда
		Прибыль = Выручка / 2 - Расход;
	Иначе
		Прибыль = Выручка - Расход;
	КонецЕсли;
	
	Рентабельность = Число(Формат(?(Выручка = 0, 0, Прибыль / Выручка * 100), "ЧДЦ=0; ЧН=0"));
	
	ОтветИнфо = Новый Структура;
	ОтветИнфо.Вставить("revenue", Число(Выручка));
	
	//Получить суммы по выручке с разбивкой
	ЗапросВыручка = Новый Запрос;
	ЗапросВыручка.Текст =
		"ВЫБРАТЬ
		|	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаПриход,
		|	""Перекупка"" КАК Выручка
		|ИЗ
		|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
		|ГДЕ
		|	ПриходДенегНаСчет.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПриходДенегНаСчет.Менеджер.Подразделение В (&Подразделение)
		|	И ПриходДенегНаСчет.Сделка ССЫЛКА Документ.ПродажаЗапчастей
		|	И ПриходДенегНаСчет.Сделка.КтоПродал = &Ответственный
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СУММА(ПриходДенегНаСчет.СуммаДокумента),
		|	""Продажи""
		|ИЗ
		|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
		|ГДЕ
		|	ПриходДенегНаСчет.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПриходДенегНаСчет.Менеджер.Подразделение В (&Подразделение)
		|	И ПриходДенегНаСчет.Сделка ССЫЛКА Документ.ПродажаЗапчастей
		|	И ПриходДенегНаСчет.Сделка.КтоПродал <> &Ответственный
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СУММА(ПриходДенегНаСчет.СуммаДокумента),
		|	""Восстановления""
		|ИЗ
		|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
		|ГДЕ
		|	ПриходДенегНаСчет.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПриходДенегНаСчет.Менеджер.Подразделение В (&Подразделение)
		|	И НЕ ПриходДенегНаСчет.Сделка ССЫЛКА Документ.ПродажаЗапчастей
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ЭтоНН = 1
		|			ТОГДА СУММА(ПриходОтКредитов.Сумма)
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	""Кредиты""
		|ИЗ
		|	Документ.ПриходОтКредитов КАК ПриходОтКредитов
		|ГДЕ
		|	ПриходОтКредитов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	ЗапросВыручка.УстановитьПараметр("Подразделение", 	МассивФилиалов);
	ЗапросВыручка.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	ЗапросВыручка.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
	ЗапросВыручка.УстановитьПараметр("Ответственный", 	Справочники.Пользователи.НайтиПоНаименованию("Вадяева Дарья Викторовна"));
	ЗапросВыручка.УстановитьПараметр("ЭтоНН", 			ЭтоНН);
	
	РезультатЗапросаВыручка = ЗапросВыручка.Выполнить().Выбрать();
	
	Пока РезультатЗапросаВыручка.Следующий() Цикл
		Сумма = ?(РезультатЗапросаВыручка.СуммаПриход = Null, 0, Число(Формат(РезультатЗапросаВыручка.СуммаПриход, "ЧДЦ=0; ЧН=0;")));
		Если РезультатЗапросаВыручка.Выручка = "Перекупка" Тогда
			ОтветИнфо.Вставить("revenue_buying", Число(Сумма));
		ИначеЕсли РезультатЗапросаВыручка.Выручка = "Продажи" Тогда	
			ОтветИнфо.Вставить("revenue_sale", Число(Сумма));
		ИначеЕсли РезультатЗапросаВыручка.Выручка = "Восстановления" Тогда
			ОтветИнфо.Вставить("revenue_recovery", Число(Сумма));
		ИначеЕсли РезультатЗапросаВыручка.Выручка = "Кредиты" Тогда
			ОтветИнфо.Вставить("revenue_credit", Число(Сумма));
		КонецЕсли;	
	КонецЦикла;
		
	ОтветИнфо.Вставить("expenditure", Число(Расход));
	
	//Получить суммы по расходу с разбивкой
	ЗапросРасход = Новый Запрос;
	ЗапросРасход.Текст =
		"ВЫБРАТЬ
		|	""ЗП"" КАК Расход,
		|	СУММА(Расходы.Сумма) КАК Сумма
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
		|	И Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.Зарплата)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""Оплата поставщикам"",
		|	СУММА(Расходы.Сумма)
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
		|	И Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщикуЗапчастей)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""Текущие расходы"",
		|	СУММА(Расходы.Сумма)
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
		|	И Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ТекущиеРасходы)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""Капитальные затраты"",
		|	СУММА(Расходы.Сумма)
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
		|	И Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.КапитальныеЗатраты)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""Возврат заемных средств"",
		|	СУММА(Расходы.Сумма)
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
		|	И Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗаёмныхСредств)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""Прочие"",
		|	СУММА(Расходы.Сумма)
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
		|	И (Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ДополнительныеТраты)
		|	ИЛИ Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""Личные выводы"",
		|	ВЫБОР
		|		КОГДА &ЭтоНН = 1
		|			ТОГДА СУММА(ЛичныйВывод.Сумма)
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЛичныйВывод КАК ЛичныйВывод
		|ГДЕ
		|	ЛичныйВывод.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	ЗапросРасход.УстановитьПараметр("Подразделение", 	МассивФилиалов);
	ЗапросРасход.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	ЗапросРасход.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
	ЗапросРасход.УстановитьПараметр("ЭтоНН", 			ЭтоНН);
	
	РезультатЗапросаРасход = ЗапросРасход.Выполнить().Выбрать();
	
	ПрочиеРасходы = 0;
	Пока РезультатЗапросаРасход.Следующий() Цикл
		Сумма = ?(РезультатЗапросаРасход.Сумма = Null, 0, Число(Формат(РезультатЗапросаРасход.Сумма, "ЧДЦ=0; ЧН=0;")));
		
		Если РезультатЗапросаРасход.Расход = "ЗП" Тогда
			ОтветИнфо.Вставить("expenditure_salary", Число(Сумма));
		ИначеЕсли РезультатЗапросаРасход.Расход = "Оплата поставщикам" Тогда	
			ОтветИнфо.Вставить("expenditure_suppliers", Число(Сумма));
		ИначеЕсли РезультатЗапросаРасход.Расход = "Текущие расходы" Тогда
			ОтветИнфо.Вставить("expenditure_current_consumption", Число(Сумма));
		ИначеЕсли РезультатЗапросаРасход.Расход = "Капитальные затраты" Тогда	
			ОтветИнфо.Вставить("expenditure_capital_expenditures", Число(Сумма));
		ИначеЕсли РезультатЗапросаРасход.Расход = "Возврат заемных средств" Тогда
			ОтветИнфо.Вставить("expenditure_repayment_borrowed_funds", Число(Сумма));
		ИначеЕсли РезультатЗапросаРасход.Расход = "Прочие" Тогда	
			ПрочиеРасходы = ПрочиеРасходы + Сумма;
		ИначеЕсли РезультатЗапросаРасход.Расход = "Личные выводы" Тогда
			ПрочиеРасходы = ПрочиеРасходы + Сумма;
		КонецЕсли;	
	КонецЦикла;
	
	ОтветИнфо.Вставить("expenditure_others", Число(ПрочиеРасходы));
	
	//Получить суммы по расходу с разбивкой по поставщикам
	ЗапросРасходПоставщики = Новый Запрос;
	ЗапросРасходПоставщики.Текст =
		"ВЫБРАТЬ
		|	""Закупка Россия"" КАК Расход,
		|	СУММА(Расходы.Сумма) КАК Сумма
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Расходы.Ответственный.Подразделение В (&Подразделение)
		|	И Расходы.ВидРасхода.Код = ""000000009""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""Закупка Европа"",
		|	СУММА(Расходы.Сумма)
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Расходы.Ответственный.Подразделение В (&Подразделение)
		|	И Расходы.ВидРасхода.Код = ""000000042""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""Закупка БУ"",
		|	СУММА(Расходы.Сумма)
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Расходы.Ответственный.Подразделение В (&Подразделение)
		|	И Расходы.ВидРасхода.Код = ""000000033""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""Закупка Новые"",
		|	СУММА(Расходы.Сумма)
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Расходы.Ответственный.Подразделение В (&Подразделение)
		|	И Расходы.ВидРасхода.Код = ""000000031""";
	
	ЗапросРасходПоставщики.УстановитьПараметр("Подразделение", 	МассивФилиалов);
	ЗапросРасходПоставщики.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	ЗапросРасходПоставщики.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	
	РезультатЗапросаРасходПоставщики = ЗапросРасходПоставщики.Выполнить().Выбрать();
	
	Пока РезультатЗапросаРасходПоставщики.Следующий() Цикл
		Сумма = ?(РезультатЗапросаРасходПоставщики.Сумма = Null, 0, Число(Формат(РезультатЗапросаРасходПоставщики.Сумма, "ЧДЦ=0; ЧН=0;")));
		Если РезультатЗапросаРасходПоставщики.Расход = "Закупка Россия" Тогда
			ОтветИнфо.Вставить("expenditure_suppliers_russia", Число(Сумма));
		ИначеЕсли РезультатЗапросаРасходПоставщики.Расход = "Закупка Европа" Тогда	
			ОтветИнфо.Вставить("expenditure_suppliers_europe", Число(Сумма));
		ИначеЕсли РезультатЗапросаРасходПоставщики.Расход = "Закупка БУ" Тогда
			ОтветИнфо.Вставить("expenditure_suppliers_old", Число(Сумма));
		ИначеЕсли РезультатЗапросаРасходПоставщики.Расход = "Закупка Новые" Тогда	
			ОтветИнфо.Вставить("expenditure_suppliers_new", Число(Сумма));
		КонецЕсли;	
	КонецЦикла;
		
	ОтветИнфо.Вставить("profit", 			Число(Прибыль));
	ОтветИнфо.Вставить("profitability", 	Число(Рентабельность));
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ОтветИнфо);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 01.04.2024
	
КонецФункции

Функция ПолучитьСтатусыФиксацииМашинgetmachinefixingstatuses(Запрос)
	
	///+ГомзМА 02.04.2024
	ЗапросСтатусов = Новый Запрос;
	ЗапросСтатусов.Текст = "ВЫБРАТЬ
	|	СтатусыФиксацииЗаказаМашин.Код КАК Код,
	|	СтатусыФиксацииЗаказаМашин.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СтатусыФиксацииЗаказаМашин КАК СтатусыФиксацииЗаказаМашин
	|ГДЕ
	|	СтатусыФиксацииЗаказаМашин.ПометкаУдаления = ЛОЖЬ";
	
	
	Выборка = ЗапросСтатусов.Выполнить().Выбрать();
	
	МассивСтатусов = Новый Массив;
	Пока выборка.Следующий() Цикл
		
		СтруктураСтатуса = Новый Структура;
		СтруктураСтатуса.Вставить("name",	Строка(выборка.Наименование));
		СтруктураСтатуса.Вставить("id", 	Строка(выборка.Код));
		
		МассивСтатусов.Добавить(СтруктураСтатуса);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивСтатусов);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 02.04.2024
	
КонецФункции


Функция ПолучитьМашинуgettruck(Запрос)
	//++Сергеев 03/04/2024
	Запросмашин = Новый Запрос;
	Запросмашин.Текст = "ВЫБРАТЬ
	|	Машины.Ссылка,
	|	Машины.ВерсияДанных,
	|	Машины.ПометкаУдаления,
	|	Машины.Код,
	|	Машины.Наименование,
	|	Машины.ВинКод,
	|	Машины.Комментарий,
	|	Машины.Сумма,
	|	Машины.Производитель,
	|	Машины.Год,
	|	Машины.НПорядок,
	|	Машины.ТипТС,
	|	Машины.МаркаТС,
	|	Машины.Дата,
	|	Машины.КодМашины,
	|	Машины.ГосНомер,
	|	Машины.Водитель,
	|	Машины.ПоказаниеОдометраНаНачалоЭксплуатации,
	|	Машины.ЭтоПрицеп,
	|	Машины.ТипМашины,
	|	Машины.Поставщик,
	|	Машины.ТипКабины,
	|	Машины.МодельДвигателя,
	|	Машины.Мощность,
	|	Машины.ТопливнаяСистема,
	|	Машины.КПП,
	|	Машины.Редуктор,
	|	Машины.Серия,
	|	Машины.ДокументФиксацииЗаказаМашины,
	|	Машины.Модель,
	|	Машины.МашинаАгрегат,
	|	Машины.НомерПартии,
	|	Машины.Фото,
	|	Машины.ДатаОкупаемостиАвто,
	|	Машины.СрокОкупаемостиВМесяцах,
	|	Машины.Предопределенный,
	|	Машины.ИмяПредопределенныхДанных,
	|	Машины.Представление
	|ИЗ
	|	Справочник.Машины КАК Машины
	|ГДЕ
	|	Машины.Код = &Код";
	
	Запросмашин.УстановитьПараметр("Код",Запрос.ПараметрыURL["id"] );
	Выборка = Запросмашин.Выполнить().Выгрузить();
	
	ИндКоды = Выборка.ВыгрузитьКолонку("КодМашины");
	Фотки = ПолучениеФотоДляГрузовика(ИндКоды);
	Итер = 0;
	
	
	
	//МассивМашин = Новый Массив;

	Для каждого стр из выборка Цикл
			НайденныеФотки = Новый Массив;
		
		НайденныеФотки = Фотки[Итер].links;
		МассивФото = новый массив;  
		Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
			 
			
			Для каждого Фотка Из НайденныеФотки Цикл
				Текст = "";
				//Текст = "https://wt10.ru" + Фотка; 
				Текст = Фотка;
				МассивФото.Добавить(Текст);
			КонецЦикла; 
		КонецЕсли;
		Итер = Итер+1;
	
		
		Структурамашины = Новый Структура;
		Структурамашины.Вставить("id", 			Строка(стр.Код));
		Структурамашины.Вставить("name",		Строка(стр.Наименование));
		Структурамашины.Вставить("code",		Строка(стр.Код));
		Структурамашины.Вставить("vin_code",	Строка(стр.ВинКод));
		Структурамашины.Вставить("model",		Строка(стр.Модель));
		Структурамашины.Вставить("model_motor",	Строка(стр.МодельДвигателя));
		Структурамашины.Вставить("serial",		Строка(стр.Серия));
		Структурамашины.Вставить("type_cabin",	Строка(стр.ТипКабины));
		Структурамашины.Вставить("kpp",			Строка(стр.КПП));
		Структурамашины.Вставить("reductor",	Строка(стр.Редуктор));
		Структурамашины.Вставить("year",		Строка(стр.Год));
		Структурамашины.Вставить("power",		Строка(стр.Мощность));
		Структурамашины.Вставить("comment",		Строка(стр.Комментарий));
		Структурамашины.Вставить("photos", МассивФото);
		//Массивмашин.Добавить(Структурамашины);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Структурамашины);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	//--Сергеев 03/04/2024
КонецФункции

Функция РедактироватьКомментарийКМашинеedittruckcomment(Запрос)
		Запросмашин = Новый Запрос;
	Запросмашин.Текст = "ВЫБРАТЬ
	|	Машины.Ссылка,
	|	Машины.ВерсияДанных,
	|	Машины.ПометкаУдаления,
	|	Машины.Код,
	|	Машины.Наименование,
	|	Машины.ВинКод,
	|	Машины.Комментарий,
	|	Машины.Сумма,
	|	Машины.Производитель,
	|	Машины.Год,
	|	Машины.НПорядок,
	|	Машины.ТипТС,
	|	Машины.МаркаТС,
	|	Машины.Дата,
	|	Машины.КодМашины,
	|	Машины.ГосНомер,
	|	Машины.Водитель,
	|	Машины.ПоказаниеОдометраНаНачалоЭксплуатации,
	|	Машины.ЭтоПрицеп,
	|	Машины.ТипМашины,
	|	Машины.Поставщик,
	|	Машины.ТипКабины,
	|	Машины.МодельДвигателя,
	|	Машины.Мощность,
	|	Машины.ТопливнаяСистема,
	|	Машины.КПП,
	|	Машины.Редуктор,
	|	Машины.Серия,
	|	Машины.ДокументФиксацииЗаказаМашины,
	|	Машины.Модель,
	|	Машины.МашинаАгрегат,
	|	Машины.НомерПартии,
	|	Машины.Фото,
	|	Машины.ДатаОкупаемостиАвто,
	|	Машины.СрокОкупаемостиВМесяцах,
	|	Машины.Предопределенный,
	|	Машины.ИмяПредопределенныхДанных,
	|	Машины.Представление
	|ИЗ
	|	Справочник.Машины КАК Машины
	|ГДЕ
	|	Машины.Код = &Код";
	
	
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив   = ПрочитатьJSON(ЧтениеJSON);

	Автор 	 	= Массив.author;
	Юзер     	= Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	//@skip-check use-non-recommended-method
	Комментарий = символы.ПС + "//////////" + символы.ПС + Строка(Юзер) + " " + Строка(ТекущаяДата()) + ": " + массив.comment;
	
	Запросмашин.УстановитьПараметр("Код",Массив.id );
	Выборка = Запросмашин.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл 
		ОбъектМашины = Выборка.Ссылка.Получитьобъект();
		КоментарийТекущий = Объектмашины.комментарий;
		Объектмашины.комментарий = 	КоментарийТекущий + Комментарий;
		ОбъектМашины.Записать();
		
		
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех!");
	Возврат Ответ;		
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Не удалось изменить комментарий!");
	Возврат Ответ;	
	///-ГомзМА 19.03.2024
КонецФункции

Функция ПолучитьСписокВсехСотрудниковGetAllWorkersList(Запрос) 
	запросСотрудников = Новый Запрос;
	запросСотрудников.Текст =  "ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Организация КАК Организация,
	|	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ДолжностиСотрудниковСрезПоследних.ТипДоговора КАК ТипДоговора,
	|	ДолжностиСотрудниковСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втДолжности
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	Подразделение,
	|	Должность,
	|	ТипДоговора,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(втДолжности.Период) КАК Период
	|ПОМЕСТИТЬ втДолжностиПериоды
	|ИЗ
	|	втДолжности КАК втДолжности
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(втДолжности.Организация) КАК Организация,
	|	МИНИМУМ(втДолжности.Подразделение) КАК Подразделение,
	|	МИНИМУМ(втДолжности.Должность) КАК Должность,
	|	МИНИМУМ(втДолжности.ТипДоговора) КАК ТипДоговора,
	|	МИНИМУМ(втДолжности.Подразделение.Код) КАК ПодразделениеКод,
	|	МИНИМУМ(втДолжности.Должность.Код) КАК ДолжностьКод
	|ПОМЕСТИТЬ втДолжностиСотрудников
	|ИЗ
	|	втДолжности КАК втДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолжностиПериоды КАК втДолжностиПериоды
	|		ПО втДолжности.Сотрудник = втДолжностиПериоды.Сотрудник
	|		И (втДолжностиПериоды.Период = втДолжности.Период)
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	втДолжностиСотрудников.Организация КАК Организация,
	|	втДолжностиСотрудников.ПодразделениеКод КАК ПодразделениеКод,
	|	втДолжностиСотрудников.Подразделение КАК Подразделение,
	|	втДолжностиСотрудников.ДолжностьКод КАК ДолжностьКод,
	|	втДолжностиСотрудников.Должность КАК Должность,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втДолжностиСотрудников.Должность,
	|		ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка) КАК
	|		Действующий,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	Сотрудники.МестоРаботы КАК МестоРаботы,
	|	Сотрудники.ПарольДляУК КАК ПарольДляУК,
	|	Сотрудники.РолиWT10.(
	|		НомерСтроки КАК НомерСтроки,
	|		Роль КАК Роль) КАК РолиWT10,
	|	Сотрудники.Тележка КАК Тележка,
	|	Сотрудники.Тележка.Код КАК ТележкаКод,
	|	ПодразделенияУчастники.Ссылка.Код КАК КодПодразделения,
	|	Сотрудники.ПарольДляУК
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолжностиСотрудников КАК втДолжностиСотрудников
	|		ПО (втДолжностиСотрудников.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подразделения.Участники КАК ПодразделенияУчастники
	|		ПО ПодразделенияУчастники.Сотрудник = Сотрудники.Пользователь
	|ГДЕ
	|	НЕ Сотрудники.Пользователь.Недействителен";
	

	ВыборкаСотрудников = запросСотрудников.Выполнить().Выбрать();
	
	МассивСотрудников = новый массив;
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		СтруктураСотрдников = Новый Структура; 
		
		СтруктураСотрдников.Вставить("name",    Строка(ВыборкаСотрудников.Наименование));
		СтруктураСотрдников.Вставить("code", 	Строка(ВыборкаСотрудников.Код));

		МассивСотрудников.Добавить(СтруктураСотрдников);
	КонецЦикла;
	
	
	СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивСотрудников);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивСотрудников);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьГодовуюФинансовуюСтатистикуgetyearfinancialstatistics(Запрос)
	
	///+ГомзМА 04.04.2024
	Год = Число(Запрос.ПараметрыURL["year"]);
	
	ЭтоНН = 0;
	МассивФилиалов = Новый Массив;
	Если Число(Запрос.ПараметрыURL["city"]) = 1 Тогда //Все
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000030"));
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000060"));
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000029"));
		
		ЭтоНН = 1;
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 2 Тогда //Нижний Новгород
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000030"));
		
		ЭтоНН = 1;
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 3 Тогда //Екатеринбург
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000060"));
	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 4 Тогда //Москва
		МассивФилиалов.Добавить(Справочники.Подразделения.НайтиПоКоду("000000029"));
	КонецЕсли;
	
	ОтветИнфо = Новый Структура;
	
	Для Месяц = 1 По 12 Цикл
		
		Если Месяц = 1 Тогда
			НазваниеМесяца = "january";
		ИначеЕсли Месяц = 2 Тогда
			НазваниеМесяца = "february";
		ИначеЕсли Месяц = 3 Тогда
			НазваниеМесяца = "march";
		ИначеЕсли Месяц = 4 Тогда
			НазваниеМесяца = "april";
		ИначеЕсли Месяц = 5 Тогда
			НазваниеМесяца = "may";
		ИначеЕсли Месяц = 6 Тогда
			НазваниеМесяца = "june";
		ИначеЕсли Месяц = 7 Тогда
			НазваниеМесяца = "july";
		ИначеЕсли Месяц = 8 Тогда
			НазваниеМесяца = "august";
		ИначеЕсли Месяц = 9 Тогда
			НазваниеМесяца = "september";
		ИначеЕсли Месяц = 10 Тогда
			НазваниеМесяца = "october";
		ИначеЕсли Месяц = 11 Тогда
			НазваниеМесяца = "november";
		ИначеЕсли Месяц = 12 Тогда
			НазваниеМесяца = "december";
		КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаПриход
	|ПОМЕСТИТЬ ВТ_Доход
	|ИЗ
	|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	|ГДЕ
	|	ПриходДенегНаСчет.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПриходДенегНаСчет.Менеджер.Подразделение В (&Подразделение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ЭтоНН = 1
	|			ТОГДА СУММА(ПриходОтКредитов.Сумма)
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.ПриходОтКредитов КАК ПриходОтКредитов
	|ГДЕ
	|	ПриходОтКредитов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Доход.СуммаПриход) КАК СуммаПриход
	|ПОМЕСТИТЬ ВТ_ДоходОбщ
	|ИЗ
	|	ВТ_Доход КАК ВТ_Доход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Расходы.Сумма) КАК СуммаРасход
	|ПОМЕСТИТЬ ВТ_Расходы
	|ИЗ
	|	Документ.Расходы КАК Расходы
	|ГДЕ
	|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Расходы.Ответственный.Подразделение В (&Подразделение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ЭтоНН = 1
	|			ТОГДА СУММА(ЛичныйВывод.Сумма)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРасход
	|ИЗ
	|	Документ.ЛичныйВывод КАК ЛичныйВывод
	|ГДЕ
	|	ЛичныйВывод.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Расходы.СуммаРасход) КАК СуммаРасход
	|ПОМЕСТИТЬ ВТ_РасходыОбщ
	|ИЗ
	|	ВТ_Расходы КАК ВТ_Расходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоходОбщ.СуммаПриход КАК СуммаПриход,
	|	ВТ_РасходыОбщ.СуммаРасход КАК СуммаРасход
	|ИЗ
	|	ВТ_ДоходОбщ КАК ВТ_ДоходОбщ,
	|	ВТ_РасходыОбщ КАК ВТ_РасходыОбщ";	
	
	Запрос.УстановитьПараметр("ДатаНачала", 	НачалоМесяца(Дата(Год, Месяц, 1)));
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецМесяца(Дата(Год, Месяц, 1)));
	Запрос.УстановитьПараметр("Подразделение", 	МассивФилиалов);
	Запрос.УстановитьПараметр("ЭтоНН", 			ЭтоНН);
	
	//@skip-check query-in-loop
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();

	Выручка = ?(РезультатЗапроса.СуммаПриход = Null, 0, Число(Формат(РезультатЗапроса.СуммаПриход, "ЧДЦ=0; ЧН=0;")));
	Расход 	= ?(РезультатЗапроса.СуммаРасход = Null, 0, Число(Формат(РезультатЗапроса.СуммаРасход, "ЧДЦ=0; ЧН=0;")));
	Прибыль = Выручка - Расход;
	Рентабельность = Число(Формат(?(Выручка = 0, 0, Прибыль / Выручка * 100), "ЧДЦ=0; ЧН=0"));
		
	ОтветИнфо.Вставить("revenue_" + НазваниеМесяца, 		Число(Выручка));
	ОтветИнфо.Вставить("expenditure_" + НазваниеМесяца, 	Число(Расход));
	ОтветИнфо.Вставить("profitability_" + НазваниеМесяца, 	Число(Рентабельность));
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ОтветИнфо);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 04.04.2024
	
КонецФункции

Функция ПолучитьЧекЛистgetchecklist(Запрос)
	ЗапросЧек = Новый запрос;
	ЗапросЧек.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Задача.Ссылка) КАК Ссылка,
	|	Задача.РодительскаяЗадача
	|ПОМЕСТИТЬ ВТ_ОбщЗадачи
	|ИЗ
	|	Документ.Задача КАК Задача
	|СГРУППИРОВАТЬ ПО
	|	Задача.РодительскаяЗадача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Задача.Ссылка) КАК Ссылка,
	|	Задача.РодительскаяЗадача
	|ПОМЕСТИТЬ ВТ_Выполненые
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Статус = Значение(Перечисление.СтатусыЗадач.Выполнена)
	|СГРУППИРОВАТЬ ПО
	|	Задача.РодительскаяЗадача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	Задача.РодительскаяЗадача,
	|	Задача.Исполнитель,
	|	Задача.Ссылка,
	|	Задача.Наименование,
	|	Задача.Описание,
	|	Задача.Статус,
	|	Задача.Дата,
	|	Задача.ДатаОкончанияФакт,
	|	Задача.Номер,
	|	Задача.ИдентификаторРаботыЗаказНарядаНаВосстановление,
	|	Задача.Ответственный,
	|	ЕстьNull((ВТ_Выполненые.Ссылка / ВТ_ОбщЗадачи.Ссылка), 0) * 100 КАК Процент
	|ИЗ
	|	Документ.Задача КАК Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Задача.Исполнитель = Сотрудники.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выполненые КАК ВТ_Выполненые
	|		ПО Задача.Ссылка = ВТ_Выполненые.РодительскаяЗадача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбщЗадачи КАК ВТ_ОбщЗадачи
	|		ПО Задача.Ссылка = ВТ_ОбщЗадачи.РодительскаяЗадача
	|ГДЕ
	|	Задача.РодительскаяЗадача.Номер = &Номер";
	
	
	//ЗапросЧек.Текст = ЗапросЧек.Текст + Символы.ПС + "упорядочить по"+ Символы.ПС +"Порядок убыв";
	
	ЗапросЧек.УстановитьПараметр("Номер", Запрос.ПараметрыURL["id_task"]);
	ВыборкаЧек = ЗапросЧек.Выполнить().Выбрать();
		   
	
	
	МассивЧек = новый массив;
	
	Пока ВыборкаЧек.Следующий() Цикл
		СтруктураЧек = Новый Структура; 
		СтруктураЧек.Вставить("name", Строка(ВыборкаЧек.Наименование));
		СтруктураЧек.Вставить("description", Строка(ВыборкаЧек.Описание));
		СтруктураЧек.Вставить("state", Строка(ВыборкаЧек.Статус));
		СтруктураЧек.Вставить("id", Строка(ВыборкаЧек.Номер));
		СтруктураЧек.Вставить("id_order", Строка(ВыборкаЧек.ИдентификаторРаботыЗаказНарядаНаВосстановление));
		СтруктураЧек.Вставить("mama", Строка(ВыборкаЧек.РодительскаяЗадача.Номер));
		СтруктураЧек.Вставить("progress", Строка(ВыборкаЧек.Процент));
		
		СтруктураАвтора = Новый Структура;
		СтруктураАвтора.Вставить("name", Строка(ВыборкаЧек.Ответственный));
		СтруктураАвтора.Вставить("id", Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",ВыборкаЧек.Ответственный ).Код));
		
		СтруктураЧек.Вставить("author", СтруктураАвтора);
		
		СтруктураИсполнителя = Новый Структура;
		СтруктураИсполнителя.Вставить("name", Строка(ВыборкаЧек.Исполнитель));
		СтруктураИсполнителя.Вставить("id", Строка(ВыборкаЧек.Код));
		СтруктураЧек.Вставить("executor", СтруктураИсполнителя);
		
		СтруктураЧек.Вставить("date", Строка(ВыборкаЧек.Дата));
		//СтруктураЧек.Вставить("ordinal", Строка(ВыборкаЧек.Порядок));
		СтруктураЧек.Вставить("date_done", Строка(ВыборкаЧек.ДатаОкончанияФакт));
		СтруктураЧек.Вставить("time_in_work",ПолучитьВремяЗадачи(ВыборкаЧек.ссылка));
		МассивЧек.Добавить(СтруктураЧек);
	КонецЦикла;
	
	
	СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЧек);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивЧек);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	//test
	
КонецФункции



Функция ПолучитьЧекgetcheck(Запрос)
	
//			ЗаписьРегистраСведений 					= РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
//			ЗаписьРегистраСведений.Задача 		 	= Задача;
//			ЗаписьРегистраСведений.Дата 		 	= ДатаСоздания;
//			ЗаписьРегистраСведений.Ответственный    = Ответственный;
//			ЗаписьРегистраСведений.Прочитать();
//			Если ЗаписьРегистраСведений.Выбран() Тогда
//		СтруктураЧек = Новый Структура; 
//		
//		СтруктураЧек.Вставить("description", Строка(ЗаписьРегистраСведений.Описание));
//		СтруктураЧек.Вставить("done", Строка(ЗаписьРегистраСведений.Выполнено));
//		СтруктураЧек.Вставить("executor", Строка(ЗаписьРегистраСведений.Ответственный));
//		СтруктураЧек.Вставить("date", Строка(ЗаписьРегистраСведений.Дата));
//		СтруктураЧек.Вставить("ordinal", Строка(ЗаписьРегистраСведений.Порядок));
//		СтруктураЧек.Вставить("date_done", Строка(ЗаписьРегистраСведений.ДатаВыполнения));
//			Иначе
//				
//			КонецЕсли;
			
КонецФункции



Функция СоздатьЧекЛистcreatecheck(Запрос)
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);

	Исполнитель     = Справочники.Сотрудники.НайтиПоКоду(Массив.executor).Пользователь; 
	Ответственный  = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	ЗадачаРодитель = Документы.Задача.НайтиПоНомеру(Массив.id);
	//Направление    = Справочники.Подразделения.НайтиПоКоду(Массив.direction);
	//Отдел 		   = Справочники.Подразделения.НайтиПоКоду(Массив.department);
	Новаязадача    = Документы.Задача.СоздатьДокумент();
	
	Новаязадача.Наименование 			= Массив.name;  
	Новаязадача.Исполнитель   			= Исполнитель; 
	Новаязадача.РодительскаяЗадача 		= ЗадачаРодитель;
	Новаязадача.Статус   	    		= Перечисления.СтатусыЗадач.Создана; 
	Новаязадача.Ответственный   		= Ответственный;  
	//Новаязадача.Направление   			= Направление;
	Новаязадача.Описание   				= Массив.text; 
	Новаязадача.ОценкаЗадач   			= Перечисления.ОценкаЗадач.Просто;
	Новаязадача.ДатаНачалаПлан  		= ТекущаяДата();
	//Новаязадача.Отдел  					= Справочники.Подразделения.НайтиПоКоду(Массив.department);
	Новаязадача.Дата 					= ТекущаяДата();
	попытка
	Новаязадача.ПлановыйСрокВыполнения 	= Дата(Массив.deadline);
	Исключение
	Новаязадача.ПлановыйСрокВыполнения 	= ТекущаяДата()+(3600*24);	
	КонецПопытки;
	
		
	//	ТекстЛога =  " Создал продажу " + Новаязадача.номер ; 
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	
	Новаязадача.Записать();
	Ответ.УстановитьТелоИзСтроки(Новаязадача.номер);

	Попытка
//Для каждого стр Из Справочники.Подразделения.НайтиПоКоду(Массив.direction).Участники Цикл
//Исполнитель = стр.Сотрудник;
	НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.Пользователь.Установить(Исполнитель);
	НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда
			ТекстЛога = " Для вас создана задача - " + Новаязадача.номер + " " +Новаязадача.Наименование + символы.ПС + "Автор: " + Строка(Ответственный) + символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер);
			Телега = НаборЗаписей[0].ID_Пользователя;
			ТекстЛога = Строка(Исполнитель) + ТекстЛога;
			
			Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
			
		Иначе 
			
		КонецЕсли;	

//КонецЦикла;
	
		
		ТекстЛога = "Для " + Строка(Исполнитель) + " создана задача - " + Новаязадача.номер+ " " +Новаязадача.Наименование + символы.ПС + "Автор: " + Строка(Ответственный)+ символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер);	
		
		Telegram_Сервер.ОтправитьСообщениеПользователю("-1002106229478", ТекстЛога);
		
		НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
				НаборЗаписей.Отбор.Пользователь.Установить(Ответственный);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 1 Тогда
					ТекстЛога = " получил от вас задачу - " + Новаязадача.номер + " " +Новаязадача.Наименование + символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер) ;
					Телега = НаборЗаписей[0].ID_Пользователя;
					ТекстЛога = Строка(Исполнитель) + ТекстЛога;
					Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
				Иначе 
					
				КонецЕсли;
	возврат Ответ;
	Исключение
		Ответ = Новый HTTPСервисОтвет(400);
	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Чтото не то");
		возврат Ответ;
	КонецПопытки;
	
	
	
//	Тело = Запрос.ПолучитьТелоКакстроку();
//	ЧтениеJSON = Новый ЧтениеJSON();
//	ЧтениеJSON.УстановитьСтроку(Тело);
//	
//	Массив   = ПрочитатьJSON(ЧтениеJSON);
//	Задача = Документы.Задача.НайтиПоНомеру(Массив.id_task);
//	//@skip-check use-non-recommended-method
//	ДатаСоздания = ТекущаяДата();
//	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Массив.executor).Пользователь;
//	ОбъектЗадачи = Задача.ПолучитьОбъект();
//	Отбор = Новый Структура();
//    Отбор.Вставить("Исполнитель", Ответственный);
//    НайденноеЗначение = ОбъектЗадачи["Исполнители"].НайтиСтроки(Отбор);
//    Если НайденноеЗначение.Количество() = 0 Тогда
//		ОбъектЗадачи.Исполнители.Добавить().Исполнитель = Ответственный;
//		ОбъектЗадачи.Записать();
//    Иначе
//     	
//	КонецЕсли;
//	Описание = массив.description;
//	
//			ЗаписьРегистраСведений 					= РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
//			ЗаписьРегистраСведений.Задача 		 	= Задача;
//			ЗаписьРегистраСведений.Дата 		 	= ДатаСоздания;
//			ЗаписьРегистраСведений.Ответственный    = Ответственный;
//			ЗаписьРегистраСведений.Выполнено		= Ложь;
//			ЗаписьРегистраСведений.Описание			= Описание;			
//			ЗаписьРегистраСведений.ДатаВыполнения	= Дата(1,1,1);
//			ЗаписьРегистраСведений.Записать();
//				
//	Ответ = Новый HTTPСервисОтвет(200);
//	Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
//	Ответ.УстановитьТелоИзСтроки("Успех");
//	Возврат Ответ;
КонецФункции

Функция ПолучитьСтатистикуТМЦgetstatisticstmc(Запрос)
	
	///+ГомзМА 05.04.2024
	ДатаНачала = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	ДатаОкончания  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	СУММА(ПоступлениеТМЦВорктрак.СуммаДокумента) КАК Расход
	|ИЗ
	|	Документ.ПоступлениеТМЦВорктрак КАК ПоступлениеТМЦВорктрак
	|ГДЕ
	|	ПоступлениеТМЦВорктрак.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";	
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();

	Расход 	= ?(РезультатЗапроса.Расход = Null, 0, Число(Формат(РезультатЗапроса.Расход, "ЧДЦ=0; ЧН=0;")));
	
	ОтветИнфо = Новый Структура;
	ОтветИнфо.Вставить("expenditure", Число(Расход));
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ОтветИнфо);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 05.04.2024
	
КонецФункции


Функция ПолучитьСтатистикуВосстановленияМашинgetrestoringmachines(Запрос)
	
	///+ГомзМА 05.04.2024
	ДатаНачала = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	ДатаОкончания  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	
	ЗапросСредКолвоДней = Новый Запрос;
	ЗапросСредКолвоДней.Текст =  "ВЫБРАТЬ
	|	СРЕДНЕЕ(РАЗНОСТЬДАТ(ЗаказНаряд.Проект.ДатаПриема, ЗаказНаряд.Проект.ДатаСдачи, СЕКУНДА) / 86400) КАК КолвоДней
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.Проект.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаказНаряд.Проект.ДатаПриема <> &ПустаяДата
	|	И ЗаказНаряд.Проект.ДатаСдачи <> &ПустаяДата
	|	И ЗаказНаряд.Проект <> ЗНАЧЕНИЕ(Справочник.ПроектыРазработки.ПустаяСсылка)
	|	И ЗаказНаряд.Инициатор = &Инициатор";	
	
	ЗапросСредКолвоДней.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
	ЗапросСредКолвоДней.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	ЗапросСредКолвоДней.УстановитьПараметр("ПустаяДата", 		'00010101');
	ЗапросСредКолвоДней.УстановитьПараметр("Инициатор", Справочники.Сотрудники.НайтиПоКоду("000000040")); //Грязев Илья Константинович
	
	РезультатЗапросаСредКолвоДней = ЗапросСредКолвоДней.Выполнить().Выбрать();
	РезультатЗапросаСредКолвоДней.Следующий();
	Если РезультатЗапросаСредКолвоДней.КолвоДней <> NULL Тогда
		СредКолвоДней = Формат(РезультатЗапросаСредКолвоДней.КолвоДней, "ЧДЦ=0;");
	Иначе
		СредКолвоДней = 0;
	КонецЕсли;
	
	//Восстановление машин по проектам
	ЗапросПроект = Новый Запрос;
	ЗапросПроект.Текст =  "ВЫБРАТЬ
	|	ДокументыПоПроектам.Проект КАК Проект,
	|	ДокументыПоПроектам.Дата КАК Дата
	|ИЗ
	|	ЖурналДокументов.ДокументыПоПроектам КАК ДокументыПоПроектам
	|ГДЕ
	|	ДокументыПоПроектам.Тип В (ТИП(Документ.ПродажаЗапчастей), ТИП(Документ.ЗаказНаряд))
	|	И ДокументыПоПроектам.Проведен
	|	И ДокументыПоПроектам.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДокументыПоПроектам.Проект <> ЗНАЧЕНИЕ(Справочник.ПроектыРазработки.ПустаяСсылка)";	
	
	ЗапросПроект.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
	ЗапросПроект.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	ЗапросПроект.УстановитьПараметр("ПустаяДата", 		'00010101');
	ЗапросПроект.УстановитьПараметр("Инициатор", Справочники.Сотрудники.НайтиПоКоду("000000040")); //Грязев Илья Константинович
		
	РезультатЗапросаПроект = ЗапросПроект.Выполнить().Выбрать();
	
	ОбщаяСуммаПолученнаяВыручка = 0;
	ОбщаяСуммаОжидаемаяВыручка 	= 0;
	
	МассивИнфо = Новый Массив;
	Пока РезультатЗапросаПроект.Следующий() Цикл
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыПоПроектам.Сумма КАК СуммаРасход,
		|	0 КАК СуммаДоход,
		|	0 КАК СуммаДоходПотенциальный
		|ИЗ
		|	ЖурналДокументов.ДокументыПоПроектам КАК ДокументыПоПроектам
		|ГДЕ
		|	ДокументыПоПроектам.Проект = &Проект
		|	И ДокументыПоПроектам.Тип = ТИП(Документ.Расходы)
		|	И ДокументыПоПроектам.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ДокументыПоПроектам.Сумма КАК Сумма,
		|	0
		|ИЗ
		|	ЖурналДокументов.ДокументыПоПроектам КАК ДокументыПоПроектам
		|ГДЕ
		|	ДокументыПоПроектам.Проект = &Проект
		|	И ДокументыПоПроектам.Тип = ТИП(Документ.ПриходДенегНаСчет)
		|	И ДокументыПоПроектам.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	ДокументыПоПроектам.Сумма КАК Сумма
		|ИЗ
		|	ЖурналДокументов.ДокументыПоПроектам КАК ДокументыПоПроектам
		|ГДЕ
		|	ДокументыПоПроектам.Проект = &Проект
		|	И ДокументыПоПроектам.Тип В (ТИП(Документ.ПродажаЗапчастей), ТИП(Документ.ЗаказНаряд))
		|	И ДокументыПоПроектам.Проведен";
	
	Запрос.УстановитьПараметр("Проект", РезультатЗапросаПроект.Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Результат = Новый Структура("СуммаДоход,СуммаДоходПотенциальный,СуммаРасход", 0, 0, 0);
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат.СуммаДоход = Результат.СуммаДоход + ВыборкаДетальныеЗаписи.СуммаДоход;
			Результат.СуммаДоходПотенциальный = Результат.СуммаДоходПотенциальный + ВыборкаДетальныеЗаписи.СуммаДоходПотенциальный;
			Результат.СуммаРасход = Результат.СуммаРасход + ВыборкаДетальныеЗаписи.СуммаРасход;
		КонецЦикла;
	
	Результат.Вставить("СуммаПрибыль", Результат.СуммаДоход - Результат.СуммаРасход);
	Результат.Вставить("СуммаПрибыльПотенциальная", Результат.СуммаДоходПотенциальный - Результат.СуммаРасход);
	
	ОбщаяСуммаОжидаемаяВыручка 	= ОбщаяСуммаОжидаемаяВыручка + Результат.СуммаДоходПотенциальный;
	ОбщаяСуммаПолученнаяВыручка = ОбщаяСуммаПолученнаяВыручка + Результат.СуммаДоход;
	
	СтруктураИнфо = Новый Структура;
	СтруктураИнфо.Вставить("project", 					Строка(РезультатЗапросаПроект.Проект));
	СтруктураИнфо.Вставить("money_expected_revenue", 	Число(Результат.СуммаДоходПотенциальный)); //ожидаемая выручка
	СтруктураИнфо.Вставить("money_revenue_received ", 	Число(Результат.СуммаДоход));//полученная выручка
	СтруктураИнфо.Вставить("days", 						РезультатЗапросаПроект.КолвоДней);
	МассивИнфо.Добавить(СтруктураИнфо);
	КонецЦикла;
	
	//Восстановление машин без проектов
	ЗапросПроект = Новый Запрос;
	ЗапросПроект.Текст =  "ВЫБРАТЬ
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата
	|ИЗ
	|	Документы.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.Проведен
	|	И ЗаказНаряд.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДокументыПоПроектам.Проект <> ЗНАЧЕНИЕ(Справочник.ПроектыРазработки.ПустаяСсылка)";	
	ЗапросПроект.УстановитьПараметр("Инициатор", Справочники.Сотрудники.НайтиПоКоду("000000040")); //Грязев Илья Константинович
		
	ЗапросПроект.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
	ЗапросПроект.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	ЗапросПроект.УстановитьПараметр("ПустаяДата", 		'00010101');
	ЗапросПроект.УстановитьПараметр("Инициатор", Справочники.Сотрудники.НайтиПоКоду("000000040")); //Грязев Илья Константинович
		
	РезультатЗапросаПроект = ЗапросПроект.Выполнить().Выбрать();
	
	ОбщаяСуммаПолученнаяВыручка = 0;
	ОбщаяСуммаОжидаемаяВыручка 	= 0;
	
	МассивИнфо = Новый Массив;
	Пока РезультатЗапросаПроект.Следующий() Цикл
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыПоПроектам.Сумма КАК СуммаРасход,
		|	0 КАК СуммаДоход,
		|	0 КАК СуммаДоходПотенциальный
		|ИЗ
		|	ЖурналДокументов.ДокументыПоПроектам КАК ДокументыПоПроектам
		|ГДЕ
		|	ДокументыПоПроектам.Проект = &Проект
		|	И ДокументыПоПроектам.Тип = ТИП(Документ.Расходы)
		|	И ДокументыПоПроектам.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ДокументыПоПроектам.Сумма КАК Сумма,
		|	0
		|ИЗ
		|	ЖурналДокументов.ДокументыПоПроектам КАК ДокументыПоПроектам
		|ГДЕ
		|	ДокументыПоПроектам.Проект = &Проект
		|	И ДокументыПоПроектам.Тип = ТИП(Документ.ПриходДенегНаСчет)
		|	И ДокументыПоПроектам.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	ДокументыПоПроектам.Сумма КАК Сумма
		|ИЗ
		|	ЖурналДокументов.ДокументыПоПроектам КАК ДокументыПоПроектам
		|ГДЕ
		|	ДокументыПоПроектам.Проект = &Проект
		|	И ДокументыПоПроектам.Тип В (ТИП(Документ.ПродажаЗапчастей), ТИП(Документ.ЗаказНаряд))
		|	И ДокументыПоПроектам.Проведен";
	
	Запрос.УстановитьПараметр("Проект", РезультатЗапросаПроект.Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Результат = Новый Структура("СуммаДоход,СуммаДоходПотенциальный,СуммаРасход", 0, 0, 0);
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат.СуммаДоход = Результат.СуммаДоход + ВыборкаДетальныеЗаписи.СуммаДоход;
			Результат.СуммаДоходПотенциальный = Результат.СуммаДоходПотенциальный + ВыборкаДетальныеЗаписи.СуммаДоходПотенциальный;
			Результат.СуммаРасход = Результат.СуммаРасход + ВыборкаДетальныеЗаписи.СуммаРасход;
		КонецЦикла;
	
	Результат.Вставить("СуммаПрибыль", Результат.СуммаДоход - Результат.СуммаРасход);
	Результат.Вставить("СуммаПрибыльПотенциальная", Результат.СуммаДоходПотенциальный - Результат.СуммаРасход);
	
	ОбщаяСуммаОжидаемаяВыручка 	= ОбщаяСуммаОжидаемаяВыручка + Результат.СуммаДоходПотенциальный;
	ОбщаяСуммаПолученнаяВыручка = ОбщаяСуммаПолученнаяВыручка + Результат.СуммаДоход;
	
	СтруктураИнфо = Новый Структура;
	СтруктураИнфо.Вставить("project", 					Строка(РезультатЗапросаПроект.Проект));
	СтруктураИнфо.Вставить("money_expected_revenue", 	Число(Результат.СуммаДоходПотенциальный)); //ожидаемая выручка
	СтруктураИнфо.Вставить("money_revenue_received ", 	Число(Результат.СуммаДоход));//полученная выручка
	СтруктураИнфо.Вставить("days", 						РезультатЗапросаПроект.КолвоДней);
	МассивИнфо.Добавить(СтруктураИнфо);
	КонецЦикла;
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("money_expected_revenue", 	Число(ОбщаяСуммаОжидаемаяВыручка));
	СтруктураОтвета.Вставить("money_revenue_received", 	Число(ОбщаяСуммаПолученнаяВыручка));
	СтруктураОтвета.Вставить("days", 					Число(СредКолвоДней));
	СтруктураОтвета.Вставить("info",	 				МассивИнфо);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 05.04.2024
	
КонецФункции

Функция ИзменитьЧекgetcheck(Запрос)
   
	
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив   = ПрочитатьJSON(ЧтениеJSON);
	Задача = документы.Задача.НайтиПоНомеру(Массив.id_task); 
	ДатаСоздания = Дата(Массив.date); 
	Ответственный = справочники.Сотрудники.НайтиПоКоду(Массив.id_executor).пользователь; 

		
		Попытка
			ЗаписьРегистраСведений 					= РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.Задача 		 	= Задача;
			ЗаписьРегистраСведений.Дата 		 	= ДатаСоздания;
			ЗаписьРегистраСведений.Ответственный    = Ответственный;
			ЗаписьРегистраСведений.Прочитать();
		Если ЗаписьРегистраСведений.Выбран() Тогда
		//СтруктураЧек = Новый Структура; 
		

		ЗаписьРегистраСведений.Выполнено = Не ЗаписьРегистраСведений.Выполнено;
		ЗаписьРегистраСведений.Записать();
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех!");
			Иначе
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Нет такого листа!");	
		КонецЕсли;
			
			
		Исключение
			
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Не удалось выполнить!");
		КонецПопытки;	
		
		Возврат Ответ;

КонецФункции

Функция ПолучениеДанныхДляСинхронизацииgetdatesinc(Запрос)
	запросСотрудников = Новый Запрос;
	запросСотрудников.Текст =  "ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Организация КАК Организация,
	|	ДолжностиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ДолжностиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ДолжностиСотрудниковСрезПоследних.ТипДоговора КАК ТипДоговора,
	|	ДолжностиСотрудниковСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втДолжности
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Организация,
	|	Подразделение,
	|	Должность,
	|	ТипДоговора,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(втДолжности.Период) КАК Период
	|ПОМЕСТИТЬ втДолжностиПериоды
	|ИЗ
	|	втДолжности КАК втДолжности
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолжности.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(втДолжности.Организация) КАК Организация,
	|	МИНИМУМ(втДолжности.Подразделение) КАК Подразделение,
	|	МИНИМУМ(втДолжности.Должность) КАК Должность,
	|	МИНИМУМ(втДолжности.ТипДоговора) КАК ТипДоговора,
	|	МИНИМУМ(втДолжности.Подразделение.Код) КАК ПодразделениеКод,
	|	МИНИМУМ(втДолжности.Должность.Код) КАК ДолжностьКод
	|ПОМЕСТИТЬ втДолжностиСотрудников
	|ИЗ
	|	втДолжности КАК втДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДолжностиПериоды КАК втДолжностиПериоды
	|		ПО втДолжности.Сотрудник = втДолжностиПериоды.Сотрудник
	|		И (втДолжностиПериоды.Период = втДолжности.Период)
	|СГРУППИРОВАТЬ ПО
	|	втДолжности.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	втДолжностиСотрудников.Организация КАК Организация,
	|	втДолжностиСотрудников.ПодразделениеКод КАК ПодразделениеКод,
	|	втДолжностиСотрудников.Подразделение КАК Подразделение,
	|	втДолжностиСотрудников.ДолжностьКод КАК ДолжностьКод,
	|	втДолжностиСотрудников.Должность КАК Должность,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втДолжностиСотрудников.Должность,
	|		ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка) КАК
	|		Действующий,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	Сотрудники.МестоРаботы КАК МестоРаботы,
	|	Сотрудники.ПарольДляУК КАК ПарольДляУК,
	|	Сотрудники.РолиWT10.(
	|		НомерСтроки КАК НомерСтроки,
	|		Роль КАК Роль) КАК РолиWT10,
	|	Сотрудники.Тележка КАК Тележка,
	|	Сотрудники.Тележка.Код КАК ТележкаКод,
	|	ПодразделенияУчастники.Ссылка.Код КАК КодПодразделения,
	|	Сотрудники.ПарольДляУК
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолжностиСотрудников КАК втДолжностиСотрудников
	|		ПО (втДолжностиСотрудников.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подразделения.Участники КАК ПодразделенияУчастники
	|		ПО ПодразделенияУчастники.Сотрудник = Сотрудники.Пользователь
	|ГДЕ
	|	НЕ Сотрудники.Пользователь.Недействителен";
	

	ВыборкаСотрудников = запросСотрудников.Выполнить().Выбрать();
	
	МассивСотрудников = новый массив;
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		СтруктураСотрдников = Новый Структура; 
		
		СтруктураСотрдников.Вставить("id", 				Строка(ВыборкаСотрудников.Код));
		СтруктураСотрдников.Вставить("fullname",    	Строка(ВыборкаСотрудников.Наименование));
		СтруктураСотрдников.Вставить("password", 		Строка(ВыборкаСотрудников.ПарольДляУК));
		СтруктураСотрдников.Вставить("phone_work", 		Строка(ВыборкаСотрудников.ТелефонСлужебный));
		СтруктураСотрдников.Вставить("phone_personal", 	Строка(ВыборкаСотрудников.ТелефонЛичный));

		МассивСотрудников.Добавить(СтруктураСотрдников);
	КонецЦикла;
	
	
	СтруктураОтвета = новый Структура;
	//СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивСотрудников);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивСотрудников);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;		
КонецФункции

#КонецОбласти


Функция ПолучитьСтатистикуВосстановленияДеталейgetrestoringdetails(Запрос)
	
	///+ГомзМА 22.04.2024
	ДатаНачала = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
	ДатаОкончания  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
	
	ЗапросСредКолвоДней = Новый Запрос;
	ЗапросСредКолвоДней.Текст =  "ВЫБРАТЬ
	|	СРЕДНЕЕ(РАЗНОСТЬДАТ(ПроектыРазработки.ДатаПриема, ПроектыРазработки.ДатаСдачи, СЕКУНДА) / 86400) КАК КолвоДней
	|ИЗ
	|	Справочник.ПроектыРазработки КАК ПроектыРазработки
	|ГДЕ
	|	ПроектыРазработки.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (ПроектыРазработки.ДатаПриема <> &ПустаяДата
	|	И ПроектыРазработки.ДатаСдачи <> &ПустаяДата)";	
	
	ЗапросСредКолвоДней.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
	ЗапросСредКолвоДней.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	ЗапросСредКолвоДней.УстановитьПараметр("ПустаяДата", 		'00010101');
	
	РезультатЗапросаСредКолвоДней = ЗапросСредКолвоДней.Выполнить().Выбрать();
	РезультатЗапросаСредКолвоДней.Следующий();
	Если РезультатЗапросаСредКолвоДней.КолвоДней <> NULL Тогда
		СредКолвоДней = Формат(РезультатЗапросаСредКолвоДней.КолвоДней, "ЧДЦ=0;");
	Иначе
		СредКолвоДней = 0;
	КонецЕсли;
	
	ЗапросПроект = Новый Запрос;
	ЗапросПроект.Текст =  "ВЫБРАТЬ
	|	ПроектыРазработки.Ссылка,
	|	ПроектыРазработки.ДатаПриема,
	|	ПроектыРазработки.ДатаСдачи,
	|	ВЫБОР
	|		КОГДА ПроектыРазработки.ДатаПриема <> &ПустаяДата
	|		И ПроектыРазработки.ДатаСдачи <> &ПустаяДата
	|			ТОГДА РАЗНОСТЬДАТ(ПроектыРазработки.ДатаПриема, ПроектыРазработки.ДатаСдачи, СЕКУНДА) / 86400
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КолвоДней
	|ИЗ
	|	Справочник.ПроектыРазработки КАК ПроектыРазработки
	|ГДЕ
	|	ПроектыРазработки.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаОкончания";	
	
	ЗапросПроект.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
	ЗапросПроект.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	ЗапросПроект.УстановитьПараметр("ПустаяДата", 		'00010101');
	
	РезультатЗапросаПроект = ЗапросПроект.Выполнить().Выбрать();
	
	ОбщаяСуммаПолученнаяВыручка = 0;
	ОбщаяСуммаОжидаемаяВыручка 	= 0;
	
	МассивИнфо = Новый Массив;
	Пока РезультатЗапросаПроект.Следующий() Цикл
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыПоПроектам.Сумма КАК СуммаРасход,
		|	0 КАК СуммаДоход,
		|	0 КАК СуммаДоходПотенциальный
		|ИЗ
		|	ЖурналДокументов.ДокументыПоПроектам КАК ДокументыПоПроектам
		|ГДЕ
		|	ДокументыПоПроектам.Проект = &Проект
		|	И ДокументыПоПроектам.Тип = ТИП(Документ.Расходы)
		|	И ДокументыПоПроектам.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ДокументыПоПроектам.Сумма КАК Сумма,
		|	0
		|ИЗ
		|	ЖурналДокументов.ДокументыПоПроектам КАК ДокументыПоПроектам
		|ГДЕ
		|	ДокументыПоПроектам.Проект = &Проект
		|	И ДокументыПоПроектам.Тип = ТИП(Документ.ПриходДенегНаСчет)
		|	И ДокументыПоПроектам.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	ДокументыПоПроектам.Сумма КАК Сумма
		|ИЗ
		|	ЖурналДокументов.ДокументыПоПроектам КАК ДокументыПоПроектам
		|ГДЕ
		|	ДокументыПоПроектам.Проект = &Проект
		|	И ДокументыПоПроектам.Тип В (ТИП(Документ.ПродажаЗапчастей), ТИП(Документ.ЗаказНаряд))
		|	И ДокументыПоПроектам.Проведен";
	
	Запрос.УстановитьПараметр("Проект", РезультатЗапросаПроект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Результат = Новый Структура("СуммаДоход,СуммаДоходПотенциальный,СуммаРасход", 0, 0, 0);
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат.СуммаДоход = Результат.СуммаДоход + ВыборкаДетальныеЗаписи.СуммаДоход;
			Результат.СуммаДоходПотенциальный = Результат.СуммаДоходПотенциальный + ВыборкаДетальныеЗаписи.СуммаДоходПотенциальный;
			Результат.СуммаРасход = Результат.СуммаРасход + ВыборкаДетальныеЗаписи.СуммаРасход;
		КонецЦикла;
	
	Результат.Вставить("СуммаПрибыль", Результат.СуммаДоход - Результат.СуммаРасход);
	Результат.Вставить("СуммаПрибыльПотенциальная", Результат.СуммаДоходПотенциальный - Результат.СуммаРасход);
	
	ОбщаяСуммаОжидаемаяВыручка 	= ОбщаяСуммаОжидаемаяВыручка + Результат.СуммаДоходПотенциальный;
	ОбщаяСуммаПолученнаяВыручка = ОбщаяСуммаПолученнаяВыручка + Результат.СуммаДоход;
	
	СтруктураИнфо = Новый Структура;
	СтруктураИнфо.Вставить("project", 					Строка(РезультатЗапросаПроект.Ссылка));
	СтруктураИнфо.Вставить("money_expected_revenue", 	Число(Результат.СуммаДоходПотенциальный)); //ожидаемая выручка
	СтруктураИнфо.Вставить("money_revenue_received ", 	Число(Результат.СуммаДоход));//полученная выручка
	СтруктураИнфо.Вставить("days", 						РезультатЗапросаПроект.КолвоДней);
	МассивИнфо.Добавить(СтруктураИнфо);
	КонецЦикла;
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("money_expected_revenue", 	Число(ОбщаяСуммаОжидаемаяВыручка));
	СтруктураОтвета.Вставить("money_revenue_received", 	Число(ОбщаяСуммаПолученнаяВыручка));
	СтруктураОтвета.Вставить("days", 					Число(СредКолвоДней));
	СтруктураОтвета.Вставить("info",	 				МассивИнфо);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 22.04.2024
	
КонецФункции


Функция ПолучитьИнфуТоваровПоПоддонуgetproductsbypallet(Запрос)
	
	///+ГомзМА 10.04.2024
	//Получить детали в поддоне
	ЗапросДетали = Новый Запрос;
	ЗапросДетали.Текст ="ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец.Код КАК КодТовара,
	|	РегИндНомер.индкод.Владелец.Наименование КАК Наименование,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	РегистрСведений.ИндНомер КАК РегИндНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО (РегИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	|ГДЕ
	|	РегИндНомер.Поддон.Наименование = &Наименование
	|	И РегистрНакопления1Остатки.КолвоОстаток > 0
	|СГРУППИРОВАТЬ ПО
	|	РегИндНомер.индкод.Владелец.Код,
	|	РегИндНомер.индкод.Владелец.Наименование";
	
	ЗапросДетали.УстановитьПараметр("Наименование", Запрос.ПараметрыURL["id"]);
	
	РезультатЗапросаДетали = ЗапросДетали.Выполнить().Выбрать();
	МассивДеталей = Новый Массив;
	Если РезультатЗапросаДетали.Количество() > 0 Тогда
		Пока РезультатЗапросаДетали.Следующий() Цикл
			СтруктураДеталей = Новый Структура;
			СтруктураДеталей.Вставить("id", 	Строка(РезультатЗапросаДетали.КодТовара));
			СтруктураДеталей.Вставить("name", 	Строка(РезультатЗапросаДетали.Наименование));
			СтруктураДеталей.Вставить("count", 	Число(РезультатЗапросаДетали.Количество));
			МассивДеталей.Добавить(СтруктураДеталей);
		КонецЦикла;
	КонецЕсли;
		
	//Получить список фотографов
	ЗапросИндНомер = Новый Запрос;
	ЗапросИндНомер.Текст ="ВЫБРАТЬ
	|	РегИндНомер.индкод КАК ИндКод,
	|	РегИндНомер.индкод.Наименование КАК индкодНаименование
	|ИЗ
	|	РегистрСведений.ИндНомер КАК РегИндНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО (РегИндНомер.индкод = РегистрНакопления1Остатки.индкод)
	|ГДЕ
	|	РегИндНомер.Поддон.Наименование = &Наименование
	|	И РегистрНакопления1Остатки.КолвоОстаток > 0";
	
	ЗапросИндНомер.УстановитьПараметр("Наименование", Запрос.ПараметрыURL["id"]);
	
	РезультатЗапросаИндномер = ЗапросИндНомер.Выполнить().Выгрузить();
	ОбщееКоличествоДеталей = РезультатЗапросаИндномер.Количество();
	МассивИндкодов = РезультатЗапросаИндномер.ВыгрузитьКолонку("индкодНаименование");
	
	Фотографы = ПолучитьФотографов(МассивИндкодов);
	
	СтруктураИнфо = Новый Структура;
	СтруктураИнфо.Вставить("photographer", Фотографы.users);
	СтруктураИнфо.Вставить("total_count", ОбщееКоличествоДеталей);
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("info", 	СтруктураИнфо);
	СтруктураОтвета.Вставить("data", 	МассивДеталей);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 10.04.2024
	
КонецФункции

Функция ПолучитьФотографов(МассивИндкодов)

	///+ГомзМА 10.04.2024
	Структура = Новый Структура;
	Структура.Вставить("indCode", МассивИндкодов);
	
	СтрокаJSON = ПреобразоватьВJSON(Структура);
	
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	Соединение = Новый HTTPСоединение("192.168.0.245", 8085);
	Запрос = Новый HTTPЗапрос("/v1/box/workers", Заголовки);
	Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
	//В запросе можно обратиться к нужному ресурсу и с нужными параметрами 
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		Тело = Ответ.ПолучитьТелоКакСтроку();  
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Тело); 
		Ответ  = ПрочитатьJSON(ЧтениеJSON); 
	Иначе Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы 
		Ответ = Неопределено;
	КонецЕсли;
		
	Возврат Ответ;
	///-ГомзМА 10.04.2024

КонецФункции

Функция ПреобразоватьВJSON(Данные)

	///+ГомзМА 10.04.2024
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	///-ГомзМА 10.04.2024

КонецФункции 

Функция НагрузкаНаОтдел(Запрос)
	
//	ЗапросНагрузки = Новый запрос;
//	ЗапросНагрузки.текст = 
КонецФункции



Функция СоздатьЗадачуИзЗаказНарядаВосстановленияcreateworkorderrecovery(Запрос)
		
	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	Исполнитель   = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	
	//Получить отдел и направление
	ЗапросОтдел = Новый Запрос;
	ЗапросОтдел.Текст =
		"ВЫБРАТЬ
		|	ПодразделенияУчастники.Ссылка.Ссылка КАК Направление,
		|	ПодразделенияУчастники.Ссылка.Родитель КАК Отдел
		|ИЗ
		|	Справочник.Подразделения.Участники КАК ПодразделенияУчастники
		|ГДЕ
		|	ПодразделенияУчастники.Сотрудник = &Сотрудник";
	
	ЗапросОтдел.УстановитьПараметр("Сотрудник", Исполнитель);
	
	РезультатЗапросаОтдел = ЗапросОтдел.Выполнить().Выбрать();
	
	Если РезультатЗапросаОтдел.Количество() > 0 Тогда
		РезультатЗапросаОтдел.Следующий();
		Отдел 		= Справочники.Подразделения.НайтиПоНаименованию(Строка(РезультатЗапросаОтдел.Отдел));
		Направление = Справочники.Подразделения.НайтиПоНаименованию(Строка(РезультатЗапросаОтдел.Направление));
	Иначе
		Отдел 		= "";
		Направление = "";
	КонецЕсли;
	
	//Получить список работ
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Рас_КомплектовкаИсполнители.ИдентификаторСтрокиРодитель КАК ИдентификаторСтрокиРодитель,
		|	Рас_КомплектовкаИсполнители.Ссылка.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ИдентификаторРаботы
		|ИЗ
		|	Документ.Рас_Комплектовка.Исполнители КАК Рас_КомплектовкаИсполнители
		|ГДЕ
		|	Рас_КомплектовкаИсполнители.Ссылка.Ссылка = &Ссылка
		|	И Рас_КомплектовкаИсполнители.Исполнитель = &Исполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Рас_КомплектовкаРаботыСписок.Работа КАК Работа,
		|	Рас_КомплектовкаРаботыСписок.СтатусРаботы КАК СтатусРаботы,
		|	Рас_КомплектовкаРаботыСписок.НомерСтроки КАК НомерСтроки,
		|	ВТ_ИдентификаторРаботы.Ссылка КАК Ссылка,
		|	Рас_КомплектовкаРаботыСписок.Ссылка.Ответственный КАК Ответственный,
		|	Рас_КомплектовкаРаботыСписок.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.Рас_Комплектовка.РаботыСписок КАК Рас_КомплектовкаРаботыСписок
		|		Полное  СОЕДИНЕНИЕ ВТ_ИдентификаторРаботы КАК ВТ_ИдентификаторРаботы
		|		ПО (ВТ_ИдентификаторРаботы.ИдентификаторСтрокиРодитель = Рас_КомплектовкаРаботыСписок.ИдентификаторСтроки)
		|ГДЕ
		|	Рас_КомплектовкаРаботыСписок.Ссылка.Ссылка = &Ссылка
		|	И НЕ (Рас_КомплектовкаРаботыСписок.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.ВРаботе)
		|	ИЛИ Рас_КомплектовкаРаботыСписок.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.Выполнено)
		|	ИЛИ Рас_КомплектовкаРаботыСписок.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.Продано)
		|	ИЛИ Рас_КомплектовкаРаботыСписок.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.НаПроверке))";
	
	Запрос.УстановитьПараметр("Ссылка", 		Документы.Рас_Комплектовка.НайтиПоНомеру(Массив.id));
	Запрос.УстановитьПараметр("Исполнитель", 	Исполнитель);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
				ДокОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
				Для Каждого СтрокаТЧ Из ДокОбъект.РаботыСписок Цикл
					Если СтрокаТЧ.НомерСтроки = РезультатЗапроса.НомерСтроки Тогда
						СтрокаТЧ.СтатусРаботы = Перечисления.СостояниеВосстановленияДетали.ВРаботе;
						ИдентификаторСтрока = Строка(СтрокаТЧ.ИдентификаторСтроки);
						СтрокаТЧ.ИдентификаторСтрока = ИдентификаторСтрока;
						ИдентификаторСтрока = Строка(СтрокаТЧ.ИдентификаторСтроки);
						СтрокаТЧ.ИдентификаторСтрока = ИдентификаторСтрока;
					КонецЕсли;
				КонецЦикла;
				ДокОбъект.Записать();
				
				Ответственный = РезультатЗапроса.Ответственный.Пользователь;
				
				Новаязадача = Документы.Задача.СоздатьДокумент();
	
				Новаязадача.Наименование 			= Строка(РезультатЗапроса.Работа);  
				Новаязадача.Статус   	    		= Перечисления.СтатусыЗадач.Создана; 
				Новаязадача.Ответственный   		= Ответственный;  
				Новаязадача.Исполнитель   			= Исполнитель;  
				Новаязадача.Направление   			= Направление; 
				Новаязадача.ОценкаЗадач   			= Перечисления.ОценкаЗадач.Просто;
				Новаязадача.ДатаНачалаПлан  		= ТекущаяДата();
				Новаязадача.Отдел  					= Отдел;
				Новаязадача.Дата 					= ТекущаяДата();
				Новаязадача.ИдентификаторРаботыЗаказНарядаНаВосстановление = ИдентификаторСтрока;
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	
				Новаязадача.Записать();
				Ответ.УстановитьТелоИзСтроки(Новаязадача.номер);
	
				ПоставитьПриоритетЗадачи(Документы.Задача.НайтиПоНомеру(Новаязадача.номер), Направление);
	
				Попытка
				Для каждого стр Из Справочники.Подразделения.НайтиПоНаименованию(РезультатЗапросаОтдел.Направление).Участники Цикл
					Исполнитель = стр.Сотрудник;
					НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
					НаборЗаписей.Отбор.Пользователь.Установить(Исполнитель);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() = 1 Тогда
						ТекстЛога = " Для вашего направления создана задача - " + Новаязадача.номер + " " +Новаязадача.Наименование + символы.ПС + "Автор: " + Строка(Ответственный) + символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер);
						Телега = НаборЗаписей[0].ID_Пользователя;
						ТекстЛога = Строка(Исполнитель) + ТекстЛога;
			
						Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
			
					Иначе 
			
					КонецЕсли;	

				КонецЦикла;
	
				ТекстЛога = "Для " + Строка(Новаязадача.Отдел) + " создана задача - " + Новаязадача.номер+ " " +Новаязадача.Наименование + символы.ПС + "Автор: " + Строка(Ответственный)+ символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер);	
				Telegram_Сервер.ОтправитьСообщениеПользователю("-1002106229478", ТекстЛога);
		
				НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
				НаборЗаписей.Отбор.Пользователь.Установить(Исполнитель);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 1 Тогда
					ТекстЛога = " получил от вас задачу - " + Новаязадача.номер + " " +Новаязадача.Наименование + символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер) ;
					Телега = НаборЗаписей[0].ID_Пользователя;
					ТекстЛога = Строка(Новаязадача.Отдел) + ТекстЛога;
					Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
				Иначе 
					
				КонецЕсли;
			
				Исключение
					Ответ = Новый HTTPСервисОтвет(400);
					Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки("Чтото не то");
					
				КонецПопытки;
		КонецЦикла; 
	Иначе
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Работы для сотрудника не найдены!");
		
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокНарядовВосстановленияgetlistordersrecovery(Запрос)
	
	///+ГомзМА 15.04.2024
	ЗапросНарядов = Новый Запрос;
	ЗапросНарядов.Текст =  СтрШаблон(текстДляСпискаНарядовВосстановления(), Формат(10000, "ЧГ="));  
	
	ЗапросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = запросНарядов.Выполнить().Выбрать().Количество();  
	
	запросНарядов.Текст =  СтрШаблон(текстДляСпискаНарядовВосстановления(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
		
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	Иначе 
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = запросНарядов.Выполнить().Выбрать();
	
	МассивНарядов = Новый Массив;
	Пока выборка.Следующий() Цикл

		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("num",			Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",			Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client",		Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("processing",	Строка(выборка.состояние));
		СтруктураИнфо.Вставить("responsible",	Строка(выборка.Ответственный));
		СтруктураИнфо.Вставить("state_wait",	Строка(выборка.КоличествоОжидание));
		СтруктураИнфо.Вставить("state_work",	Строка(выборка.КоличествоВРаботе));
		СтруктураИнфо.Вставить("state_check",	Строка(выборка.КоличествоНаПроверке));
		СтруктураИнфо.Вставить("state_done",	Строка(выборка.КоличествоВыполнено));
		СтруктураИнфо.Вставить("state_sold",	Строка(выборка.КоличествоПродано));
		СтруктураИнфо.Вставить("comment",		Строка(выборка.Комментарий));
		СтруктураИнфо.Вставить("project",		Строка(выборка.Проект));
		СтруктураИнфо.Вставить("sum",			Строка(выборка.СуммаДокумента));
		СтруктураИнфо.Вставить("date_start",	Строка(выборка.ДатаНачала));
		СтруктураИнфо.Вставить("date_end",		Строка(выборка.ДатаОкончания));

		
		//МассивТоваров = ПолучитьСтруктуруТоваров(выборка.Номер);
		//СтруктураИнфо.Вставить("state_product",МассивТоваров); 
		
		МассивНарядов.Добавить(СтруктураИнфо); 
		
	КонецЦикла;
	
	Страница = Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"]));
	Страница = ?((Страница-Цел(Страница))>0,Цел(Страница)+1, Цел(Страница));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages", Страница);
	СтруктураИнфо.Вставить("count", Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info", СтруктураИнфо);
	СтруктураОтвета.Вставить("data", МассивНарядов);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 15.04.2024
	
КонецФункции

Функция ПолучитьПриказgetorder(Запрос)
    запросПриказа = Новый Запрос;
	запросПриказа.Текст = "ВЫБРАТЬ
	|	Приказ.Номер,
	|	Приказ.Описание
	|ИЗ
	|	Документ.Приказ КАК Приказ
	|ГДЕ
	|	Приказ.Номер = &Номер";
	
	
	запросПриказа.УстановитьПараметр("Номер", Строка(Запрос.ПараметрыURL["id"]) ); 
	
	
	ТЗ = запросПриказа.Выполнить().Выгрузить();
	//	Выборкаобщ = Тз.Количество();
	//Массивкодов = ТЗ.ВыгрузитьКолонку("индкод");
	//ТЗ.Колонки.Добавить("колФото",Новый ОписаниеТипов("Число"));  
	ТЗ.Колонки.Добавить("Фото",Новый ОписаниеТипов("Массив"));
	МассивТоваров = Новый Массив;
	
	//ИндКоды = тз.ВыгрузитьКолонку("индкод");
	//Фотки = ПолучениеФото(ИндКоды);
	итер = 0;
	
	
	Для каждого стр из ТЗ Цикл
		Фотки = ПолучениеФайловПриказа(стр.номер);
		НайденныеФотки = Новый Массив;
		//ПутьКФайлам = "W:\code\imageService\images\" + стр.индкод;
		НайденныеФотки = Фотки.prikazFile.link;
		МассивФото = новый массив;  
			Текст = НайденныеФотки;
				МассивФото.Добавить(Текст);
		//Если НайденныеФотки <> неопределено и НайденныеФотки.Количество()>0 Тогда
			
		//	стр.колфото = 1;  
			
		//	Для каждого Фотка Из НайденныеФотки Цикл
		//		Текст = "";
		//		//Текст = "https://wt10.ru" + Фотка; 
		//		Текст = Фотка;
		//		МассивФото.Добавить(Текст);
		//	КонецЦикла; 
		//КонецЕсли;
		итер = итер+1;
		//тз.Сортировать("колФото Убыв");
		
		СтруктураТоваров = Новый Структура;
		СтруктураТоваров.Вставить("id",    			 Строка(стр.Номер));
		
		
		СтруктураТоваров.Вставить("photos", 			 МассивФото);
		МассивТоваров.Добавить(СтруктураТоваров);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураТоваров);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучениеФайловПриказа(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245",8085);
		
		СтрокаЗапроса = "/document/flow/prikaz?odinc_id=";
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);	
		//СтруктураДанных = Новый Структура();
		//ЗапросСтруктура = Новый Структура();
		//ЗапросСтруктура.Вставить("truckCode", ИндКод);
		//СтруктураДанных.Вставить("data",ЗапросСтруктура);
		
		// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		
		//ЗаписатьJSON(ПотокJSON, СтруктураДанных);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		
		МассивПустыхФото = новый массив; 
		
		Для каждого стр из ИндКод Цикл 
			links = Новый массив;
			МассивПустыхФото.Добавить(links);
			
		КонецЦикла;
		
		Возврат МассивПустыхФото;
	КонецПопытки;
	
КонецФункции

Функция ДобавитьОтветственногоВЗадачуaddexecutor(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Задача = Документы.Задача.НайтиПоНомеру(Массив.id).ПолучитьОбъект();

	Для Каждого exe Из Массив.executor Цикл
		Исполнитель = Справочники.Сотрудники.НайтиПоКоду(exe).Пользователь;
		Отбор = Новый Структура;
		Отбор.Вставить("Исполнитель", Исполнитель);
		НайденноеЗначение = Задача.Исполнители.НайтиСтроки(Отбор);

		Если НайденноеЗначение.Количество() = 0 Тогда
			НовыйИсполнитель = Задача.Исполнители.Добавить();
			Новыйисполнитель.Исполнитель = Исполнитель;
			Задача.Записать();
		Иначе
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Такой тут уже есть!");
			Возврат Ответ;
		КонецЕсли;
	КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции

Функция УдалитьОтветственногоВЗадачуdeleteexecutor(Запрос)

	Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Тело);

	Массив = ПрочитатьJSON(ЧтениеJSON);
	Задача = Документы.Задача.НайтиПоНомеру(Массив.id).ПолучитьОбъект();
	Для Каждого exe Из Массив.executor Цикл
	Исполнитель = Справочники.Сотрудники.НайтиПоКоду(exe).Пользователь;
	Отбор = Новый Структура;
	Отбор.Вставить("Исполнитель", Исполнитель);
	НайденноеЗначение = Задача.Исполнители.НайтиСтроки(Отбор);
	
	Если НайденноеЗначение.Количество() = 0 Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Таких нет!");
		Возврат Ответ;

	Иначе
		Для каждого стр из НайденноеЗначение Цикл
		Задача.Исполнители.удалить(стр);
		Задача.Записать();
		КонецЦикла
	КонецЕсли;
КонецЦикла;
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки("Успех");
	Возврат Ответ;
КонецФункции
//Сергеев Ф.В. ++ Дата: 25.04.2024


Функция СоздатьЗадачуИзЗаказНарядаcreateworkorder(Запрос)
Тело = Запрос.ПолучитьТелоКакстроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Тело);
	
	Массив = ПрочитатьJSON(ЧтениеJSON);
	
	Исполнитель   = Справочники.Сотрудники.НайтиПоКоду(Массив.author).Пользователь;
	
	//Получить отдел и направление
	ЗапросОтдел = Новый Запрос;
	ЗапросОтдел.Текст =
		"ВЫБРАТЬ
		|	ПодразделенияУчастники.Ссылка.Ссылка КАК Направление,
		|	ПодразделенияУчастники.Ссылка.Родитель КАК Отдел
		|ИЗ
		|	Справочник.Подразделения.Участники КАК ПодразделенияУчастники
		|ГДЕ
		|	ПодразделенияУчастники.Сотрудник = &Сотрудник";
	
	ЗапросОтдел.УстановитьПараметр("Сотрудник", Исполнитель);
	
	РезультатЗапросаОтдел = ЗапросОтдел.Выполнить().Выбрать();
	
	Если РезультатЗапросаОтдел.Количество() > 0 Тогда
		РезультатЗапросаОтдел.Следующий();
		Отдел 		= Справочники.Подразделения.НайтиПоНаименованию(Строка(РезультатЗапросаОтдел.Отдел));
		Направление = Справочники.Подразделения.НайтиПоНаименованию(Строка(РезультатЗапросаОтдел.Направление));
	Иначе
		Отдел 		= "";
		Направление = "";
	КонецЕсли;
	
	//Получить список работ
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНаряд.ИдентификаторСтрокиРодитель КАК ИдентификаторСтрокиРодитель,
		|	ЗаказНаряд.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ИдентификаторРаботы
		|ИЗ
		|	Документ.ЗаказНаряд.Исполнители КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Ссылка.Ссылка = &Ссылка
		|	И ЗаказНаряд.Исполнитель = &Исполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказНарядРаботы.Работа КАК Работа,
		|	ЗаказНарядРаботы.СтатусРаботы КАК СтатусРаботы,
		|	ЗаказНарядРаботы.НомерСтроки КАК НомерСтроки,
		|	ВТ_ИдентификаторРаботы.Ссылка КАК Ссылка,
		|	ЗаказНарядРаботы.Ссылка.Ответственный КАК Ответственный,
		|	ЗаказНарядРаботы.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.ЗаказНаряд.Работы КАК ЗаказНарядРаботы
		|		Внутреннее СОЕДИНЕНИЕ ВТ_ИдентификаторРаботы КАК ВТ_ИдентификаторРаботы
		|		ПО (ВТ_ИдентификаторРаботы.ИдентификаторСтрокиРодитель = ЗаказНарядРаботы.ИдентификаторСтроки)
		|ГДЕ
		|	ЗаказНарядРаботы.Ссылка.Ссылка = &Ссылка
		|	И НЕ (ЗаказНарядРаботы.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.ВРаботе)
		|	ИЛИ ЗаказНарядРаботы.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.Выполнено)
		|	ИЛИ ЗаказНарядРаботы.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.Продано)
		|	ИЛИ ЗаказНарядРаботы.СтатусРаботы = ЗНАЧЕНИЕ(Перечисление.СостояниеВосстановленияДетали.НаПроверке))";
	
	Запрос.УстановитьПараметр("Ссылка", 		Документы.ЗаказНаряд.НайтиПоНомеру(Массив.id));
	Запрос.УстановитьПараметр("Исполнитель", 	Исполнитель);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
				ДокОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
				Для Каждого СтрокаТЧ Из ДокОбъект.Работы Цикл
					Если СтрокаТЧ.НомерСтроки = РезультатЗапроса.НомерСтроки Тогда
						СтрокаТЧ.СтатусРаботы = Перечисления.СостояниеВосстановленияДетали.ВРаботе;
						ИдентификаторСтрока = Строка(СтрокаТЧ.ИдентификаторСтроки);
						СтрокаТЧ.ИдентификаторСтрока = ИдентификаторСтрока;
					КонецЕсли;
				КонецЦикла;
				ДокОбъект.Записать();
				
				Ответственный = РезультатЗапроса.Ответственный;
				
				Новаязадача = Документы.Задача.СоздатьДокумент();
	
				Новаязадача.Наименование 			= Строка(РезультатЗапроса.Работа);  
				Новаязадача.Статус   	    		= Перечисления.СтатусыЗадач.Создана; 
				Новаязадача.Ответственный   		= Ответственный;  
				Новаязадача.Исполнитель   			= Исполнитель;  
				Новаязадача.Направление   			= Направление; 
				Новаязадача.ОценкаЗадач   			= Перечисления.ОценкаЗадач.Просто;
				Новаязадача.ДатаНачалаПлан  		= ТекущаяДата();
				Новаязадача.Отдел  					= Отдел;
				Новаязадача.Дата 					= ТекущаяДата();
				Новаязадача.ИдентификаторРаботыЗаказНарядаНаВосстановление = ИдентификаторСтрока;
				
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	
				Новаязадача.Записать();
				Ответ.УстановитьТелоИзСтроки(Новаязадача.номер);
	
				ПоставитьПриоритетЗадачи(Документы.Задача.НайтиПоНомеру(Новаязадача.номер), Направление);
	
				Попытка
				Для каждого стр Из Справочники.Подразделения.НайтиПоНаименованию(РезультатЗапросаОтдел.Направление).Участники Цикл
					Исполнитель = стр.Сотрудник;
					НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
					НаборЗаписей.Отбор.Пользователь.Установить(Исполнитель);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() = 1 Тогда
						ТекстЛога = " Для вашего направления создана задача - " + Новаязадача.номер + " " +Новаязадача.Наименование + символы.ПС + "Автор: " + Строка(Ответственный) + символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер);
						Телега = НаборЗаписей[0].ID_Пользователя;
						ТекстЛога = Строка(Исполнитель) + ТекстЛога;
			
						Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
			
					Иначе 
			
					КонецЕсли;	

				КонецЦикла;
	
				ТекстЛога = "Для " + Строка(Новаязадача.Отдел) + " создана задача - " + Новаязадача.номер+ " " +Новаязадача.Наименование + символы.ПС + "Автор: " + Строка(Ответственный)+ символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер);	
				Telegram_Сервер.ОтправитьСообщениеПользователю("-1002106229478", ТекстЛога);
		
				НаборЗаписей = РегистрыСведений.Telegram_Пользователи.СоздатьНаборЗаписей();  			
				НаборЗаписей.Отбор.Пользователь.Установить(Исполнитель);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 1 Тогда
					ТекстЛога = " получил от вас задачу - " + Новаязадача.номер + " " +Новаязадача.Наименование + символы.ПС + "Ссылка: " +"https://10.wt10.ru/task/" + Строка(Новаязадача.номер) ;
					Телега = НаборЗаписей[0].ID_Пользователя;
					ТекстЛога = Строка(Новаязадача.Отдел) + ТекстЛога;
					Telegram_Сервер.ОтправитьСообщениеПользователю(Телега, ТекстЛога); 	
				Иначе 
					
				КонецЕсли;
			
				Исключение
					Ответ = Новый HTTPСервисОтвет(400);
					Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
					Ответ.УстановитьТелоИзСтроки("Чтото не то");
					
				КонецПопытки;
		КонецЦикла; 
	Иначе
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Работы для сотрудника не найдены!");
		
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокНарядовДляРаботgetlistordersforworks(Запрос)
	ЗапросНарядов = Новый Запрос;
	
	Текст = "ВЫБРАТЬ
	|	Сотрудники.Код КАК Код,
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Клиент КАК Клиент,
	|	ЗаказНаряд.Ответственный КАК Ответственный,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.ЗаказКлиента КАК ЗаказКлиента,
	|	ЗаказНаряд.ВнутреннийЗаказНаряд КАК Внутр,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ЗаказНаряд.Комментарий
	|ПОМЕСТИТЬ ВТ_Наряд
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ЗаказНаряд.Инициатор = Сотрудники.Ссылка
	|Где
	|	ЗаказНаряд.Ответственный = &Фильтр
	|	И ЗаказНаряд.Дата > датавремя(2023, 07, 18)
	|	И не ЗаказНаряд.ВнутреннийЗаказНаряд
	|	И ЗаказНаряд.Состояние <> Значение(перечисление.СостоянияЗаказНаряда.Выполнен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ %1
	|	ВТ_Наряд.Код КАК Код,
	|	ВТ_Наряд.Номер КАК Номер,
	|	ВТ_Наряд.Дата КАК Дата,
	|	ВТ_Наряд.Клиент КАК Клиент,
	|	ВТ_Наряд.Ответственный КАК Ответственный,
	|	ВТ_Наряд.Состояние КАК Состояние,
	|	ВТ_Наряд.ЗаказКлиента КАК ЗаказКлиента,
	|	ВТ_Наряд.НомерЗаписи КАК НомерЗаписи,
	|	ВТ_Наряд.Внутр КАК Внутр,
	|	ВТ_Наряд.Комментарий
	|ИЗ
	|	ВТ_Наряд КАК ВТ_Наряд
	|ГДЕ
	|	ВТ_Наряд.НомерЗаписи >= &НачинаяСЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи";   
	ЗапросНарядов.Текст =  СтрШаблон(Текст, "100000");
	
	Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
		ЗапросНарядов.УстановитьПараметр("Фильтр",Справочники.Сотрудники.НайтиПоКоду("000000039").Пользователь);
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "2" Тогда
		ЗапросНарядов.УстановитьПараметр("Фильтр",Справочники.Сотрудники.НайтиПоКоду("000000040").Пользователь);
	Иначе
		ЗапросНарядов.УстановитьПараметр("Фильтр",Справочники.Сотрудники.НайтиПоКоду("000000138").Пользователь);
	КонецЕсли;
	
	ЗапросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	Выборкаобщ = ЗапросНарядов.Выполнить().Выбрать().Количество();  
	
	ЗапросНарядов.Текст =  СтрШаблон(Текст, Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	
	Если Строка(Запрос.ПараметрыURL["type"]) = "1" Тогда
		ЗапросНарядов.УстановитьПараметр("Фильтр",Справочники.Сотрудники.НайтиПоКоду("000000039").Пользователь);
	ИначеЕсли Строка(Запрос.ПараметрыURL["type"]) = "2" Тогда
		ЗапросНарядов.УстановитьПараметр("Фильтр",Справочники.Сотрудники.НайтиПоКоду("000000040").Пользователь);
	Иначе
		ЗапросНарядов.УстановитьПараметр("Фильтр",Справочники.Сотрудники.НайтиПоКоду("000000138").Пользователь);
	КонецЕсли;
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	Иначе 
		запросНарядов.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	Выборка = запросНарядов.Выполнить().Выбрать();
	
	МассивНарядов = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураИнфо = новый Структура;
		СтруктураИнфо.Вставить("num",Строка(выборка.Номер));
		СтруктураИнфо.Вставить("date",Строка(выборка.Дата));
		СтруктураИнфо.Вставить("client",Строка(выборка.Клиент));
		СтруктураИнфо.Вставить("application",Строка(выборка.ЗаказКлиента));
		СтруктураИнфо.Вставить("processing",Строка(выборка.состояние));
		//СтруктураИнфо.Вставить("status",Строка(Выборка.СтатусЗаказаВТК)); 
		//СтруктураИнфо.Вставить("client_phone",Строка(Выборка.КлиентТелефон));                                      
		//СтруктураИнфо.Вставить("storekeeper",Строка(выборка.ОтветственныйКладовщик));
		СтруктураИнфо.Вставить("responsible",Строка(выборка.Ответственный));
		СтруктураИнфо.Вставить("comment",Строка(выборка.Комментарий));
		//@skip-check query-in-loop
		МассивТоваров = ПолучитьСтруктуруТоваров(выборка.Номер);
		СтруктураИнфо.Вставить("state_product",МассивТоваров); 
		
		МассивНарядов.Добавить(СтруктураИнфо); 
		
	КонецЦикла;
	
	///+ГомзМА 16.04.2024
	Страница = Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"]));
	Страница = ?((Страница-Цел(Страница))>0,Цел(Страница)+1, Цел(Страница));
	///-ГомзМА 16.04.2024
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Страница);
	СтруктураИнфо.Вставить("count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивНарядов);
	
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
	
КонецФункции

//Сергеев Ф.В. -- Дата: 25.04.2024

Функция ИзменитьСтатусЗаявкиeditstatusapplication(Запрос)
	///+ГомзМА 25.04.2024
  ЗапросЗаявка = Новый Запрос;
  ЗапросЗаявка.Текст = "ВЫБРАТЬ
  |  ЗаказКлиента.Ссылка
  |ИЗ
  |  Документ.ЗаказКлиента КАК ЗаказКлиента
  |ГДЕ
  |  ЗаказКлиента.Номер = &Номер";
  
  ЗапросЗаявка.УстановитьПараметр("Номер", Строка(Запрос.ПараметрыURL["id"]));
  
  Выборка = ЗапросЗаявка.Выполнить().Выбрать();
  Тело = Запрос.ПолучитьТелоКакстроку();
  ЧтениеJSON = Новый ЧтениеJSON();
  ЧтениеJSON.УстановитьСтроку(Тело);
  
  Массив  = ПрочитатьJSON(ЧтениеJSON);
  
  Если Число(Массив.status) = 1 Тогда
    Статус = Справочники.СтатусыWT.НайтиПоКоду("000000001") //В работе
  ИначеЕсли Число(Массив.status) = 2 Тогда
    Статус = Справочники.СтатусыWT.НайтиПоКоду("000000004") //Думает
  ИначеЕсли Число(Массив.status) = 3 Тогда
    Статус = Справочники.СтатусыWT.НайтиПоКоду("000000008") //Отправлено
  ИначеЕсли Число(Массив.status) = 4 Тогда
    Статус = Справочники.СтатусыWT.НайтиПоКоду("000000005") //Разнести на полку
  ИначеЕсли Число(Массив.status) = 5 Тогда
    Статус = Справочники.СтатусыWT.НайтиПоКоду("000000002") //Сборка
  ИначеЕсли Число(Массив.status) = 6 Тогда
    Статус = Справочники.СтатусыWT.НайтиПоКоду("000000003") //Собранно
  ИначеЕсли Число(Массив.status) = 7 Тогда
    Статус = Справочники.СтатусыWT.НайтиПоКоду("000000007") //Упаковано
  ИначеЕсли Число(Массив.status) = 8 Тогда
    Статус = Справочники.СтатусыWT.НайтиПоКоду("000000006") //Упаковать
  КонецЕсли;
  
  Выборка.Следующий();
  
  ОбъектЗаявки = Выборка.Ссылка.ПолучитьОбъект(); 
  СтарыйСтатус = ОбъектЗаявки.WTPanel;
  ОбъектЗаявки.WTPanel = Статус;
  ОбъектЗаявки.Записать();
  
  Ответ = Новый HTTPСервисОтвет(200);
  Ответ.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
  Ответ.УстановитьТелоИзСтроки("Статус заявки успешно изменен с """ + СтарыйСтатус + """ на """ + Статус + """");
  Возврат Ответ;
  ///-ГомзМА 25.04.2024
  
КонецФункции

Функция ДашбордРВРgetdashrvr(Запрос)
	
	ЗапросЗН = новый запрос;
	ЗапросЗН.Текст = "ВЫБРАТЬ
	|	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаДокумента,
	|	ПриходДенегНаСчет.Сделка КАК Сделка
	|ПОМЕСТИТЬ ВТ_Приход
	|ИЗ
	|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	|СГРУППИРОВАТЬ ПО
	|	ПриходДенегНаСчет.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядТовары.СуммаВсего) КАК СуммаВсего,
	|	СУММА(ЗаказНарядТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядРаботы.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядРаботы.Количество) КАК Количество,
	|	СУММА(ЗаказНарядРаботы.СуммаВсего) КАК СуммаВсего
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	Документ.ЗаказНаряд.Работы КАК ЗаказНарядРаботы
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядРаботы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТМЦ.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядТМЦ.Количество) КАК Количество,
	|	СУММА(ЗаказНарядТМЦ.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Расходники
	|ИЗ
	|	Документ.ЗаказНаряд.ТМЦ КАК ЗаказНарядТМЦ
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТМЦ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЕСТЬNULL(ВТ_Приход.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.ТипНаценки КАК ТипНаценки,
	|	ЗаказНаряд.Клиент КАК Клиент,
	|	ЕСТЬNULL(ВТ_Работы.Количество, 0) КАК ВремяРабот,
	|	ЕСТЬNULL(ВТ_Работы.СуммаВсего, 0) КАК СуммаРабот,
	|	ЕСТЬNULL(ВТ_Расходники.Количество, 0) КАК КоличествоРасходников,
	|	ЕСТЬNULL(ВТ_Расходники.Сумма, 0) КАК СуммаРасходников,
	|	ЕСТЬNULL(ВТ_Товары.СуммаВсего, 0) КАК СуммаДеталей,
	|	ЕСТЬNULL(ВТ_Товары.Количество, 0) КАК КоличествоДеталей
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
	|		ПО (ЗаказНаряд.Ссылка = ВТ_Приход.Сделка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|		ПО (ЗаказНаряд.Ссылка = ВТ_Товары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работы КАК ВТ_Работы
	|		ПО (ЗаказНаряд.Ссылка = ВТ_Работы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Расходники КАК ВТ_Расходники
	|		ПО (ЗаказНаряд.Ссылка = ВТ_Расходники.Ссылка)
	|ГДЕ
	|	ЗаказНаряд.Ответственный = &Фильтр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	ЗапросЗН.УстановитьПараметр("Фильтр",Справочники.Сотрудники.НайтиПоКоду("000000040").Пользователь);
	Выборка = ЗапросЗН.Выполнить().Выбрать();
	МассивЗаказНарядов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураЗаказНаряда = Новый Структура;
		
		СтруктураЗаказНаряда.Вставить("order_num",Строка(Выборка.Номер));	
		СтруктураЗаказНаряда.Вставить("client",Строка(Выборка.Клиент));
		СтруктураЗаказНаряда.Вставить("detail_count",Выборка.КоличествоДеталей);
		СтруктураЗаказНаряда.Вставить("time_to_work",Выборка.ВремяРабот);
		СтруктураЗаказНаряда.Вставить("cost_works",Выборка.СуммаРабот);
		СтруктураЗаказНаряда.Вставить("cost_details",Выборка.СуммаДеталей);
		СтруктураЗаказНаряда.Вставить("cost_consumables",Выборка.СуммаРасходников);
		СтруктураЗаказНаряда.Вставить("stonks",Выборка.СуммаДокумента);
		СтруктураЗаказНаряда.Вставить("pay_type",Строка(Выборка.ТипНаценки));
		СтруктураЗаказНаряда.Вставить("state",Строка(Выборка.Состояние));
		
		МассивЗаказНарядов.Добавить(СтруктураЗаказНаряда);
	КонецЦикла;
	
	
	
	ЗапросПроекта = новый запрос;
	ЗапросПроекта.Текст = "ВЫБРАТЬ
	|	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаДокумента,
	|	ПриходДенегНаСчет.Сделка КАК Сделка
	|ПОМЕСТИТЬ ВТ_Приход
	|ИЗ
	|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	|СГРУППИРОВАТЬ ПО
	|	ПриходДенегНаСчет.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядТовары.СуммаВсего) КАК СуммаВсего,
	|	СУММА(ЗаказНарядТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядРаботы.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядРаботы.Количество) КАК Количество,
	|	СУММА(ЗаказНарядРаботы.СуммаВсего) КАК СуммаВсего
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	Документ.ЗаказНаряд.Работы КАК ЗаказНарядРаботы
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядРаботы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТМЦ.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядТМЦ.Количество) КАК Количество,
	|	СУММА(ЗаказНарядТМЦ.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Расходники
	|ИЗ
	|	Документ.ЗаказНаряд.ТМЦ КАК ЗаказНарядТМЦ
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТМЦ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказНаряд.Номер) КАК Номер,
	|	СУММА(ЕСТЬNULL(ВТ_Приход.СуммаДокумента, 0)) КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ВТ_Работы.Количество, 0)) КАК ВремяРабот,
	|	СУММА(ЕСТЬNULL(ВТ_Работы.СуммаВсего, 0)) КАК СуммаРабот,
	|	СУММА(ЕСТЬNULL(ВТ_Расходники.Количество, 0)) КАК КоличествоРасходников,
	|	СУММА(ЕСТЬNULL(ВТ_Расходники.Сумма, 0)) КАК СуммаРасходников,
	|	СУММА(ЕСТЬNULL(ВТ_Товары.СуммаВсего, 0)) КАК СуммаДеталей,
	|	СУММА(ЕСТЬNULL(ВТ_Товары.Количество, 0)) КАК КоличествоДеталей,
	|	ПроектыРазработки.Ссылка КАК Ссылка,
	|	ПроектыРазработки.ДатаПриема КАК ДатаПриема,
	|	ПроектыРазработки.ДатаСдачи КАК ДатаСдачи,
	|	ПроектыРазработки.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	|	ПроектыРазработки.Состояние КАК Состояние
	|ИЗ
	|	Справочник.ПроектыРазработки КАК ПроектыРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд КАК ЗаказНаряд
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
	|			ПО (ЗаказНаряд.Ссылка = ВТ_Приход.Сделка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|			ПО (ЗаказНаряд.Ссылка = ВТ_Товары.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работы КАК ВТ_Работы
	|			ПО (ЗаказНаряд.Ссылка = ВТ_Работы.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Расходники КАК ВТ_Расходники
	|			ПО (ЗаказНаряд.Ссылка = ВТ_Расходники.Ссылка)
	|		ПО (ПроектыРазработки.Ссылка = ЗаказНаряд.Проект)
	|ГДЕ
	|	ЗаказНаряд.Ответственный = &Фильтр
	|СГРУППИРОВАТЬ ПО
	|	ПроектыРазработки.Ссылка,
	|	ПроектыРазработки.ДатаПриема,
	|	ПроектыРазработки.ДатаСдачи,
	|	ПроектыРазработки.ПлановаяДатаРемонта,
	|	ПроектыРазработки.Состояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	ЗапросПроекта.УстановитьПараметр("Фильтр",Справочники.Сотрудники.НайтиПоКоду("000000040").Пользователь);
	Выборка = ЗапросПроекта.Выполнить().Выбрать();
	МассивПроектов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПроекта = Новый Структура;
		
		СтруктураПроекта.Вставить("project_name",Строка(Выборка.Ссылка));	
		СтруктураПроекта.Вставить("day_to_end",(Выборка.ДатаСдачи-текущаядата())/(3600*24));
		СтруктураПроекта.Вставить("day_to_start",(Выборка.ПлановаяДатаРемонта-текущаядата())/(3600*24));
		СтруктураПроекта.Вставить("cost_works",Выборка.СуммаРабот);
		СтруктураПроекта.Вставить("cost_details",Выборка.СуммаДеталей);
		СтруктураПроекта.Вставить("stonks",Выборка.СуммаДокумента);
		//СтруктураПроекта.Вставить("pay_type",Выборка.ТипНаценки);
		СтруктураПроекта.Вставить("state",Строка(Выборка.Состояние));
		
		МассивПроектов.Добавить(СтруктураПроекта);
	КонецЦикла;
	
	//Сергеев Ф.В. ++ Дата: 02.05.2024
	
	ЗапросЗП = новый запрос;
	ЗапросЗП.Текст = "ВЫБРАТЬ
	|	Расходы.Работник КАК Работник,
	|	СУММА(Расходы.Сумма) КАК Сумма
	|ИЗ
	|	Документ.Расходы КАК Расходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Расходы.Работник = Сотрудники.Пользователь)
	|ГДЕ
	|	Сотрудники.Код В (&Работник)
	|СГРУППИРОВАТЬ ПО
	|	Расходы.Работник";
	МассивЧеловеков = Новый Массив;
	МассивЧеловеков.Добавить("000000157");
	МассивЧеловеков.Добавить("000000031");
	МассивЧеловеков.Добавить("000000014");
	МассивЧеловеков.Добавить("000000209");
	МассивЧеловеков.Добавить("000000142");
	МассивЧеловеков.Добавить("000000135");
	МассивЧеловеков.Добавить("000000076");
	МассивЧеловеков.Добавить("000000199");
	МассивЧеловеков.Добавить("000000184");

	ЗапросЗП.УстановитьПараметр("Работник", МассивЧеловеков);
	
	Выборка = ЗапросЗП.Выполнить().Выбрать();
	МассивЗП = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураЗП = Новый Структура;
		
		СтруктураЗП.Вставить("name",Строка(Выборка.Работник));	
		СтруктураЗП.Вставить("sum", Выборка.Сумма);
		
		МассивЗП.Добавить(СтруктураЗП);
	КонецЦикла;
	
	
	
	ЗапросСостоянийПроектов = новый запрос;
	ЗапросСостоянийПроектов.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПроектыРазработки.Наименование) КАК Наименование,
	|	ПроектыРазработки.Состояние
	|ИЗ
	|	Справочник.ПроектыРазработки КАК ПроектыРазработки
	|СГРУППИРОВАТЬ ПО
	|	ПроектыРазработки.Состояние";
	
	Выборка = ЗапросСостоянийПроектов.Выполнить().Выбрать();
	МассивСостоянийПроектов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураСостоянийПроектов = Новый Структура;
		
		СтруктураСостоянийПроектов.Вставить("count",Выборка.Наименование);	
		СтруктураСостоянийПроектов.Вставить("state", Строка(Выборка.Состояние));
		
		МассивСостоянийПроектов.Добавить(СтруктураСостоянийПроектов);
	КонецЦикла;
	
	
	//Сергеев Ф.В. -- Дата: 02.05.2024
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("order",МассивЗаказНарядов);
	СтруктураОтвета.Вставить("project",МассивПроектов);
	СтруктураОтвета.Вставить("zp",МассивЗП);
	СтруктураОтвета.Вставить("state_project",МассивСостоянийПроектов);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ДашбордМаляркиgetdashpainter(Запрос)
		
	ЗапросЗН = новый запрос;
	ЗапросЗН.Текст = "ВЫБРАТЬ
	|	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаДокумента,
	|	ПриходДенегНаСчет.Сделка КАК Сделка
	|ПОМЕСТИТЬ ВТ_Приход
	|ИЗ
	|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	|СГРУППИРОВАТЬ ПО
	|	ПриходДенегНаСчет.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядТовары.СуммаВсего) КАК СуммаВсего,
	|	СУММА(ЗаказНарядТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядРаботы.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядРаботы.Количество) КАК Количество,
	|	СУММА(ЗаказНарядРаботы.СуммаВсего) КАК СуммаВсего
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	Документ.ЗаказНаряд.Работы КАК ЗаказНарядРаботы
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядРаботы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТМЦ.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядТМЦ.Количество) КАК Количество,
	|	СУММА(ЗаказНарядТМЦ.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Расходники
	|ИЗ
	|	Документ.ЗаказНаряд.ТМЦ КАК ЗаказНарядТМЦ
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТМЦ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаряд.Номер КАК Номер,
	|	ЕСТЬNULL(ВТ_Приход.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.ТипНаценки КАК ТипНаценки,
	|	ЗаказНаряд.Клиент КАК Клиент,
	|	ЕСТЬNULL(ВТ_Работы.Количество, 0) КАК ВремяРабот,
	|	ЕСТЬNULL(ВТ_Работы.СуммаВсего, 0) КАК СуммаРабот,
	|	ЕСТЬNULL(ВТ_Расходники.Количество, 0) КАК КоличествоРасходников,
	|	ЕСТЬNULL(ВТ_Расходники.Сумма, 0) КАК СуммаРасходников,
	|	ЕСТЬNULL(ВТ_Товары.СуммаВсего, 0) КАК СуммаДеталей,
	|	ЕСТЬNULL(ВТ_Товары.Количество, 0) КАК КоличествоДеталей
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
	|		ПО (ЗаказНаряд.Ссылка = ВТ_Приход.Сделка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|		ПО (ЗаказНаряд.Ссылка = ВТ_Товары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работы КАК ВТ_Работы
	|		ПО (ЗаказНаряд.Ссылка = ВТ_Работы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Расходники КАК ВТ_Расходники
	|		ПО (ЗаказНаряд.Ссылка = ВТ_Расходники.Ссылка)
	|ГДЕ
	|	ЗаказНаряд.Ответственный = &Фильтр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	ЗапросЗН.УстановитьПараметр("Фильтр",Справочники.Сотрудники.НайтиПоКоду("000000039").Пользователь);
	Выборка = ЗапросЗН.Выполнить().Выбрать();
	МассивЗаказНарядов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураЗаказНаряда = Новый Структура;
		
		СтруктураЗаказНаряда.Вставить("order_num",Строка(Выборка.Номер));	
		СтруктураЗаказНаряда.Вставить("client",Строка(Выборка.Клиент));
		СтруктураЗаказНаряда.Вставить("detail_count",Выборка.КоличествоДеталей);
		СтруктураЗаказНаряда.Вставить("time_to_work",Выборка.ВремяРабот);
		СтруктураЗаказНаряда.Вставить("cost_works",Выборка.СуммаРабот);
		СтруктураЗаказНаряда.Вставить("cost_details",Выборка.СуммаДеталей);
		СтруктураЗаказНаряда.Вставить("cost_consumables",Выборка.СуммаРасходников);
		СтруктураЗаказНаряда.Вставить("stonks",Выборка.СуммаДокумента);
		СтруктураЗаказНаряда.Вставить("pay_type",Строка(Выборка.ТипНаценки));
		СтруктураЗаказНаряда.Вставить("state",Строка(Выборка.Состояние));
		
		МассивЗаказНарядов.Добавить(СтруктураЗаказНаряда);
	КонецЦикла;
	
	
	
	ЗапросПроекта = новый запрос;
	ЗапросПроекта.Текст = "ВЫБРАТЬ
	|	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаДокумента,
	|	ПриходДенегНаСчет.Сделка КАК Сделка
	|ПОМЕСТИТЬ ВТ_Приход
	|ИЗ
	|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	|СГРУППИРОВАТЬ ПО
	|	ПриходДенегНаСчет.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядТовары.СуммаВсего) КАК СуммаВсего,
	|	СУММА(ЗаказНарядТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядРаботы.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядРаботы.Количество) КАК Количество,
	|	СУММА(ЗаказНарядРаботы.СуммаВсего) КАК СуммаВсего
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	Документ.ЗаказНаряд.Работы КАК ЗаказНарядРаботы
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядРаботы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТМЦ.Ссылка КАК Ссылка,
	|	СУММА(ЗаказНарядТМЦ.Количество) КАК Количество,
	|	СУММА(ЗаказНарядТМЦ.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Расходники
	|ИЗ
	|	Документ.ЗаказНаряд.ТМЦ КАК ЗаказНарядТМЦ
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТМЦ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказНаряд.Номер) КАК Номер,
	|	СУММА(ЕСТЬNULL(ВТ_Приход.СуммаДокумента, 0)) КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ВТ_Работы.Количество, 0)) КАК ВремяРабот,
	|	СУММА(ЕСТЬNULL(ВТ_Работы.СуммаВсего, 0)) КАК СуммаРабот,
	|	СУММА(ЕСТЬNULL(ВТ_Расходники.Количество, 0)) КАК КоличествоРасходников,
	|	СУММА(ЕСТЬNULL(ВТ_Расходники.Сумма, 0)) КАК СуммаРасходников,
	|	СУММА(ЕСТЬNULL(ВТ_Товары.СуммаВсего, 0)) КАК СуммаДеталей,
	|	СУММА(ЕСТЬNULL(ВТ_Товары.Количество, 0)) КАК КоличествоДеталей,
	|	ПроектыРазработки.Ссылка КАК Ссылка,
	|	ПроектыРазработки.ДатаПриема КАК ДатаПриема,
	|	ПроектыРазработки.ДатаСдачи КАК ДатаСдачи,
	|	ПроектыРазработки.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	|	ПроектыРазработки.Состояние КАК Состояние
	|ИЗ
	|	Справочник.ПроектыРазработки КАК ПроектыРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд КАК ЗаказНаряд
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
	|			ПО (ЗаказНаряд.Ссылка = ВТ_Приход.Сделка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|			ПО (ЗаказНаряд.Ссылка = ВТ_Товары.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работы КАК ВТ_Работы
	|			ПО (ЗаказНаряд.Ссылка = ВТ_Работы.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Расходники КАК ВТ_Расходники
	|			ПО (ЗаказНаряд.Ссылка = ВТ_Расходники.Ссылка)
	|		ПО (ПроектыРазработки.Ссылка = ЗаказНаряд.Проект)
	|ГДЕ
	|	ЗаказНаряд.Ответственный = &Фильтр
	|СГРУППИРОВАТЬ ПО
	|	ПроектыРазработки.Ссылка,
	|	ПроектыРазработки.ДатаПриема,
	|	ПроектыРазработки.ДатаСдачи,
	|	ПроектыРазработки.ПлановаяДатаРемонта,
	|	ПроектыРазработки.Состояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	ЗапросПроекта.УстановитьПараметр("Фильтр",Справочники.Сотрудники.НайтиПоКоду("000000039").Пользователь);
	Выборка = ЗапросПроекта.Выполнить().Выбрать();
	МассивПроектов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПроекта = Новый Структура;
		
		СтруктураПроекта.Вставить("project_name",Строка(Выборка.Ссылка));	
		СтруктураПроекта.Вставить("day_to_end",(Выборка.ДатаСдачи-текущаядата())/(3600*24));
		СтруктураПроекта.Вставить("day_to_start",(Выборка.ПлановаяДатаРемонта-текущаядата())/(3600*24));
		СтруктураПроекта.Вставить("cost_works",Выборка.СуммаРабот);
		СтруктураПроекта.Вставить("cost_details",Выборка.СуммаДеталей);
		СтруктураПроекта.Вставить("stonks",Выборка.СуммаДокумента);
		//СтруктураПроекта.Вставить("pay_type",Выборка.ТипНаценки);
		СтруктураПроекта.Вставить("state",Строка(Выборка.Состояние));
		
		МассивПроектов.Добавить(СтруктураПроекта);
	КонецЦикла;
	
	//Сергеев Ф.В. ++ Дата: 02.05.2024
	
	ЗапросЗП = новый запрос;
	ЗапросЗП.Текст = "ВЫБРАТЬ
	|	Расходы.Работник КАК Работник,
	|	СУММА(Расходы.Сумма) КАК Сумма
	|ИЗ
	|	Документ.Расходы КАК Расходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Расходы.Работник = Сотрудники.Пользователь)
	|ГДЕ
	|	Сотрудники.Код В (&Работник)
	|СГРУППИРОВАТЬ ПО
	|	Расходы.Работник";
	МассивЧеловеков = Новый Массив;
	МассивЧеловеков.Добавить("000000087");


	ЗапросЗП.УстановитьПараметр("Работник", МассивЧеловеков);
	
	Выборка = ЗапросЗП.Выполнить().Выбрать();
	МассивЗП = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураЗП = Новый Структура;
		
		СтруктураЗП.Вставить("name",Строка(Выборка.Работник));	
		СтруктураЗП.Вставить("sum", Выборка.Сумма);
		
		МассивЗП.Добавить(СтруктураЗП);
	КонецЦикла;
	
	
	
	ЗапросСостоянийПроектов = новый запрос;
	ЗапросСостоянийПроектов.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПроектыРазработки.Наименование) КАК Наименование,
	|	ПроектыРазработки.Состояние
	|ИЗ
	|	Справочник.ПроектыРазработки КАК ПроектыРазработки
	|СГРУППИРОВАТЬ ПО
	|	ПроектыРазработки.Состояние";
	
	Выборка = ЗапросСостоянийПроектов.Выполнить().Выбрать();
	МассивСостоянийПроектов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураСостоянийПроектов = Новый Структура;
		
		СтруктураСостоянийПроектов.Вставить("count",Выборка.Наименование);	
		СтруктураСостоянийПроектов.Вставить("state", Строка(Выборка.Состояние));
		
		МассивСостоянийПроектов.Добавить(СтруктураСостоянийПроектов);
	КонецЦикла;
	
	
	//Сергеев Ф.В. -- Дата: 02.05.2024
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("order",МассивЗаказНарядов);
	СтруктураОтвета.Вставить("project",МассивПроектов);
	СтруктураОтвета.Вставить("zp",МассивЗП);
	СтруктураОтвета.Вставить("state_project",МассивСостоянийПроектов);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ДашбордВосстановленияgetdashrecovery(Запрос)
	
	ЗапросЗН = новый запрос;
	ЗапросЗН.Текст = "ВЫБРАТЬ
	|	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаДокумента,
	|	ПриходДенегНаСчет.Сделка КАК Сделка
	|ПОМЕСТИТЬ ВТ_Приход
	|ИЗ
	|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	|СГРУППИРОВАТЬ ПО
	|	ПриходДенегНаСчет.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Рас_КомплектовкаНоменклатураСписок.Количество) КАК Количество,
	|	СУММА(ИндНомер.Цена) КАК Цена,
	|	Рас_КомплектовкаНоменклатураСписок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.Рас_Комплектовка.НоменклатураСписок КАК Рас_КомплектовкаНоменклатураСписок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО Рас_КомплектовкаНоменклатураСписок.Партия = ИндНомер.индкод
	|СГРУППИРОВАТЬ ПО
	|	Рас_КомплектовкаНоменклатураСписок.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рас_КомплектовкаРаботыСписок.Ссылка КАК Ссылка,
	|	СУММА(Рас_КомплектовкаРаботыСписок.Количество) КАК Количество,
	|	СУММА(Рас_КомплектовкаРаботыСписок.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	Документ.Рас_Комплектовка.РаботыСписок КАК Рас_КомплектовкаРаботыСписок
	|СГРУППИРОВАТЬ ПО
	|	Рас_КомплектовкаРаботыСписок.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВТ_Приход.СуммаДокумента, 0)) КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ВТ_Работы.Количество, 0)) КАК ВремяРабот,
	|	СУММА(ЕСТЬNULL(ВТ_Работы.Сумма, 0)) КАК СуммаРабот,
	|	СУММА(ЕСТЬNULL(ВТ_Товары.Цена, 0)) КАК СуммаДеталей,
	|	СУММА(ЕСТЬNULL(ВТ_Товары.Количество, 0)) КАК КоличествоДеталей,
	|	Рас_Комплектовка.Состояние КАК Состояние,
	|	Рас_Комплектовка.Клиент КАК Клиент,
	|	Рас_Комплектовка.Номер КАК Номер
	|ИЗ
	|	Документ.Рас_Комплектовка КАК Рас_Комплектовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работы КАК ВТ_Работы
	|		ПО (Рас_Комплектовка.Ссылка = ВТ_Работы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|		ПО (Рас_Комплектовка.Ссылка = ВТ_Товары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
	|		ПО (Рас_Комплектовка.Ссылка = ВТ_Приход.Сделка)
	|СГРУППИРОВАТЬ ПО
	|	Рас_Комплектовка.Состояние,
	|	Рас_Комплектовка.Клиент,
	|	Рас_Комплектовка.Номер";
	
	Выборка = ЗапросЗН.Выполнить().Выбрать();
	МассивЗаказНарядов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураЗаказНаряда = Новый Структура;
		
		СтруктураЗаказНаряда.Вставить("order_num",Строка(Выборка.Номер));	
		СтруктураЗаказНаряда.Вставить("client",Строка(Выборка.Клиент));
		СтруктураЗаказНаряда.Вставить("detail_count",Выборка.КоличествоДеталей);
		СтруктураЗаказНаряда.Вставить("time_to_work",Выборка.ВремяРабот);
		СтруктураЗаказНаряда.Вставить("cost_works",Выборка.СуммаРабот);
		СтруктураЗаказНаряда.Вставить("cost_details",Выборка.СуммаДеталей);
		СтруктураЗаказНаряда.Вставить("stonks",Выборка.СуммаДокумента);
		СтруктураЗаказНаряда.Вставить("state",Строка(Выборка.Состояние));
		
		МассивЗаказНарядов.Добавить(СтруктураЗаказНаряда);
	КонецЦикла;
	
	
	
	ЗапросПроекта = новый запрос;
	ЗапросПроекта.Текст = "ВЫБРАТЬ
	|	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаДокумента,
	|	ПриходДенегНаСчет.Сделка КАК Сделка
	|ПОМЕСТИТЬ ВТ_Приход
	|ИЗ
	|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	|СГРУППИРОВАТЬ ПО
	|	ПриходДенегНаСчет.Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Рас_КомплектовкаНоменклатураСписок.Количество) КАК Количество,
	|	СУММА(ИндНомер.Цена) КАК Цена,
	|	Рас_КомплектовкаНоменклатураСписок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.Рас_Комплектовка.НоменклатураСписок КАК Рас_КомплектовкаНоменклатураСписок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО Рас_КомплектовкаНоменклатураСписок.Партия = ИндНомер.индкод
	|СГРУППИРОВАТЬ ПО
	|	Рас_КомплектовкаНоменклатураСписок.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рас_КомплектовкаРаботыСписок.Ссылка КАК Ссылка,
	|	СУММА(Рас_КомплектовкаРаботыСписок.Количество) КАК Количество,
	|	СУММА(Рас_КомплектовкаРаботыСписок.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	Документ.Рас_Комплектовка.РаботыСписок КАК Рас_КомплектовкаРаботыСписок
	|СГРУППИРОВАТЬ ПО
	|	Рас_КомплектовкаРаботыСписок.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВТ_Приход.СуммаДокумента, 0)) КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ВТ_Работы.Количество, 0)) КАК ВремяРабот,
	|	СУММА(ЕСТЬNULL(ВТ_Работы.Сумма, 0)) КАК СуммаРабот,
	|	СУММА(ЕСТЬNULL(ВТ_Товары.Цена, 0)) КАК СуммаДеталей,
	|	СУММА(ЕСТЬNULL(ВТ_Товары.Количество, 0)) КАК КоличествоДеталей,
	|	ПроектыРазработки.Ссылка КАК Ссылка,
	|	ПроектыРазработки.ДатаПриема КАК ДатаПриема,
	|	ПроектыРазработки.ДатаСдачи КАК ДатаСдачи,
	|	ПроектыРазработки.ПлановаяДатаРемонта КАК ПлановаяДатаРемонта,
	|	ПроектыРазработки.Состояние КАК Состояние
	|ИЗ
	|	Справочник.ПроектыРазработки КАК ПроектыРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Рас_Комплектовка КАК Рас_Комплектовка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работы КАК ВТ_Работы
	|			ПО Рас_Комплектовка.Ссылка = ВТ_Работы.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|			ПО Рас_Комплектовка.Ссылка = ВТ_Товары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приход КАК ВТ_Приход
	|			ПО Рас_Комплектовка.Ссылка = ВТ_Приход.Сделка
	|		ПО ПроектыРазработки.Ссылка = Рас_Комплектовка.Проект
	|СГРУППИРОВАТЬ ПО
	|	ПроектыРазработки.Ссылка,
	|	ПроектыРазработки.ДатаПриема,
	|	ПроектыРазработки.ДатаСдачи,
	|	ПроектыРазработки.ПлановаяДатаРемонта,
	|	ПроектыРазработки.Состояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = ЗапросПроекта.Выполнить().Выбрать();
	МассивПроектов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПроекта = Новый Структура;
		
		СтруктураПроекта.Вставить("project_name",Строка(Выборка.Ссылка));	
		СтруктураПроекта.Вставить("day_to_end",(Выборка.ДатаСдачи-текущаядата())/(3600*24));
		СтруктураПроекта.Вставить("day_to_start",(Выборка.ПлановаяДатаРемонта-текущаядата())/(3600*24));
		СтруктураПроекта.Вставить("cost_works",Выборка.СуммаРабот);
		СтруктураПроекта.Вставить("cost_details",Выборка.СуммаДеталей);
		СтруктураПроекта.Вставить("stonks",Выборка.СуммаДокумента);
		//СтруктураПроекта.Вставить("pay_type",Выборка.ТипНаценки);
		СтруктураПроекта.Вставить("state",Строка(Выборка.Состояние));
		
		МассивПроектов.Добавить(СтруктураПроекта);
	КонецЦикла;
	
	//Сергеев Ф.В. ++ Дата: 02.05.2024
	
	ЗапросЗП = новый запрос;
	ЗапросЗП.Текст = "ВЫБРАТЬ
	|	Расходы.Работник КАК Работник,
	|	СУММА(Расходы.Сумма) КАК Сумма
	|ИЗ
	|	Документ.Расходы КАК Расходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Расходы.Работник = Сотрудники.Пользователь)
	|ГДЕ
	|	Сотрудники.Код В (&Работник)
	|СГРУППИРОВАТЬ ПО
	|	Расходы.Работник";
	МассивЧеловеков = Новый Массив;
	МассивЧеловеков.Добавить("000000043");
	МассивЧеловеков.Добавить("000000017");
	МассивЧеловеков.Добавить("000000103");

	ЗапросЗП.УстановитьПараметр("Работник", МассивЧеловеков);
	
	Выборка = ЗапросЗП.Выполнить().Выбрать();
	МассивЗП = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураЗП = Новый Структура;
		
		СтруктураЗП.Вставить("name",Строка(Выборка.Работник));	
		СтруктураЗП.Вставить("sum", Выборка.Сумма);
		
		МассивЗП.Добавить(СтруктураЗП);
	КонецЦикла;
	
	
	
	ЗапросСостоянийПроектов = новый запрос;
	ЗапросСостоянийПроектов.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПроектыРазработки.Наименование) КАК Наименование,
	|	ПроектыРазработки.Состояние
	|ИЗ
	|	Справочник.ПроектыРазработки КАК ПроектыРазработки
	|СГРУППИРОВАТЬ ПО
	|	ПроектыРазработки.Состояние";
	
	Выборка = ЗапросСостоянийПроектов.Выполнить().Выбрать();
	МассивСостоянийПроектов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураСостоянийПроектов = Новый Структура;
		
		СтруктураСостоянийПроектов.Вставить("count",Выборка.Наименование);	
		СтруктураСостоянийПроектов.Вставить("state", Строка(Выборка.Состояние));
		
		МассивСостоянийПроектов.Добавить(СтруктураСостоянийПроектов);
	КонецЦикла;
	
	
	//Сергеев Ф.В. -- Дата: 02.05.2024
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("order",МассивЗаказНарядов);
	СтруктураОтвета.Вставить("project",МассивПроектов);
	СтруктураОтвета.Вставить("zp",МассивЗП);
	СтруктураОтвета.Вставить("state_project",МассивСостоянийПроектов);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции


//	///-ГомзМА 25.04.2024
//	
//КонецФункции 

Функция ПолучитьСтатистикуПоСтроительствуgetstatisticsconstruction(Запрос)
	
	///+ГомзМА 01.04.2024
//	ДатаНачала = НачалоДня(Дата(Запрос.ПараметрыURL["datestart"]));
//	ДатаОкончания  = КонецДня(Дата(Запрос.ПараметрыURL["dateend"]));
//	
//	МассивСтроителей = Новый Массив;
//	Если Число(Запрос.ПараметрыURL["city"]) = 1 Тогда //Все
//
//	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 2 Тогда //Нижний Новгород
//
//	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 3 Тогда //Екатеринбург
//
//	ИначеЕсли Число(Запрос.ПараметрыURL["city"]) = 4 Тогда //Москва
//
//	КонецЕсли;
//	
//	ОтветИнфо = Новый Структура;
//	
//	//Получить сумму расходов на содержание
//	ЗапросСодержание = Новый Запрос;
//	ЗапросСодержание.Текст =  "ВЫБРАТЬ
//	|	Расходы.Сумма КАК Сумма
//	|ИЗ
//	|	Документ.Расходы КАК Расходы
//	|ГДЕ
//	|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//	|	И Расходы.Работник В (&Строители)";	
//	
//	ЗапросСодержание.УстановитьПараметр("ДатаНачала", ДатаНачала);
//	ЗапросСодержание.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
//	ЗапросСодержание.УстановитьПараметр("Строители", МассивСтроителей);
//	
//	РезультатЗапросаСодержание = ЗапросСодержание.Выполнить().Выбрать();
//	РезультатЗапросаСодержание.Следующий();
//
//	Попытка
//		ОтветИнфо.Вставить("expenditure_supply", Число(РезультатЗапросаСодержание.Сумма));
//	Исключение
//		ОтветИнфо.Вставить("expenditure_supply", 0);
//	КонецПопытки;
//	
//	ЗапросСтроительство = Новый Запрос;
//	ЗапросСтроительство.Текст =
//		"ВЫБРАТЬ
//		|	Расходы.Ссылка
//		|ИЗ
//		|	Документ.Расходы КАК Расходы";
//	
//	ЗапросВыручка.УстановитьПараметр("Подразделение", 	МассивФилиалов);
//	ЗапросВыручка.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
//	ЗапросВыручка.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
//	ЗапросВыручка.УстановитьПараметр("Ответственный", 	Справочники.Пользователи.НайтиПоНаименованию("Вадяева Дарья Викторовна"));
//	ЗапросВыручка.УстановитьПараметр("ЭтоНН", 			ЭтоНН);
//	
//	РезультатЗапросаВыручка = ЗапросВыручка.Выполнить().Выбрать();
//	
//	Пока РезультатЗапросаВыручка.Следующий() Цикл
//		Сумма = ?(РезультатЗапросаВыручка.СуммаПриход = Null, 0, Число(Формат(РезультатЗапросаВыручка.СуммаПриход, "ЧДЦ=0; ЧН=0;")));
//		Если РезультатЗапросаВыручка.Выручка = "Перекупка" Тогда
//			ОтветИнфо.Вставить("revenue_buying", Число(Сумма));
//		ИначеЕсли РезультатЗапросаВыручка.Выручка = "Продажи" Тогда	
//			ОтветИнфо.Вставить("revenue_sale", Число(Сумма));
//		ИначеЕсли РезультатЗапросаВыручка.Выручка = "Восстановления" Тогда
//			ОтветИнфо.Вставить("revenue_recovery", Число(Сумма));
//		ИначеЕсли РезультатЗапросаВыручка.Выручка = "Кредиты" Тогда
//			ОтветИнфо.Вставить("revenue_credit", Число(Сумма));
//		КонецЕсли;	
//	КонецЦикла;
//		
//	ОтветИнфо.Вставить("expenditure", Число(Расход));
//	
//	//Получить суммы по расходу с разбивкой
//	ЗапросРасход = Новый Запрос;
//	ЗапросРасход.Текст =
//		"ВЫБРАТЬ
//		|	""ЗП"" КАК Расход,
//		|	СУММА(Расходы.Сумма) КАК Сумма
//		|ИЗ
//		|	Документ.Расходы КАК Расходы
//		|ГДЕ
//		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
//		|	И Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.Зарплата)
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	""Оплата поставщикам"",
//		|	СУММА(Расходы.Сумма)
//		|ИЗ
//		|	Документ.Расходы КАК Расходы
//		|ГДЕ
//		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
//		|	И Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщикуЗапчастей)
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	""Текущие расходы"",
//		|	СУММА(Расходы.Сумма)
//		|ИЗ
//		|	Документ.Расходы КАК Расходы
//		|ГДЕ
//		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
//		|	И Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ТекущиеРасходы)
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	""Капитальные затраты"",
//		|	СУММА(Расходы.Сумма)
//		|ИЗ
//		|	Документ.Расходы КАК Расходы
//		|ГДЕ
//		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
//		|	И Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.КапитальныеЗатраты)
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	""Возврат заемных средств"",
//		|	СУММА(Расходы.Сумма)
//		|ИЗ
//		|	Документ.Расходы КАК Расходы
//		|ГДЕ
//		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
//		|	И Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗаёмныхСредств)
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	""Прочие"",
//		|	СУММА(Расходы.Сумма)
//		|ИЗ
//		|	Документ.Расходы КАК Расходы
//		|ГДЕ
//		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И Расходы.Инициатор.Пользователь.Подразделение В (&Подразделение)
//		|	И (Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ДополнительныеТраты)
//		|	ИЛИ Расходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю))
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	""Личные выводы"",
//		|	ВЫБОР
//		|		КОГДА &ЭтоНН = 1
//		|			ТОГДА СУММА(ЛичныйВывод.Сумма)
//		|		ИНАЧЕ 0
//		|	КОНЕЦ
//		|ИЗ
//		|	Документ.ЛичныйВывод КАК ЛичныйВывод
//		|ГДЕ
//		|	ЛичныйВывод.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
//	
//	ЗапросРасход.УстановитьПараметр("Подразделение", 	МассивФилиалов);
//	ЗапросРасход.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
//	ЗапросРасход.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
//	ЗапросРасход.УстановитьПараметр("ЭтоНН", 			ЭтоНН);
//	
//	РезультатЗапросаРасход = ЗапросРасход.Выполнить().Выбрать();
//	
//	ПрочиеРасходы = 0;
//	Пока РезультатЗапросаРасход.Следующий() Цикл
//		Сумма = ?(РезультатЗапросаРасход.Сумма = Null, 0, Число(Формат(РезультатЗапросаРасход.Сумма, "ЧДЦ=0; ЧН=0;")));
//		
//		Если РезультатЗапросаРасход.Расход = "ЗП" Тогда
//			ОтветИнфо.Вставить("expenditure_salary", Число(Сумма));
//		ИначеЕсли РезультатЗапросаРасход.Расход = "Оплата поставщикам" Тогда	
//			ОтветИнфо.Вставить("expenditure_suppliers", Число(Сумма));
//		ИначеЕсли РезультатЗапросаРасход.Расход = "Текущие расходы" Тогда
//			ОтветИнфо.Вставить("expenditure_current_consumption", Число(Сумма));
//		ИначеЕсли РезультатЗапросаРасход.Расход = "Капитальные затраты" Тогда	
//			ОтветИнфо.Вставить("expenditure_capital_expenditures", Число(Сумма));
//		ИначеЕсли РезультатЗапросаРасход.Расход = "Возврат заемных средств" Тогда
//			ОтветИнфо.Вставить("expenditure_repayment_borrowed_funds", Число(Сумма));
//		ИначеЕсли РезультатЗапросаРасход.Расход = "Прочие" Тогда	
//			ПрочиеРасходы = ПрочиеРасходы + Сумма;
//		ИначеЕсли РезультатЗапросаРасход.Расход = "Личные выводы" Тогда
//			ПрочиеРасходы = ПрочиеРасходы + Сумма;
//		КонецЕсли;	
//	КонецЦикла;
//	
//	ОтветИнфо.Вставить("expenditure_others", Число(ПрочиеРасходы));
//	
//	//Получить суммы по расходу с разбивкой по поставщикам
//	ЗапросРасходПоставщики = Новый Запрос;
//	ЗапросРасходПоставщики.Текст =
//		"ВЫБРАТЬ
//		|	""Закупка Россия"" КАК Расход,
//		|	СУММА(Расходы.Сумма) КАК Сумма
//		|ИЗ
//		|	Документ.Расходы КАК Расходы
//		|ГДЕ
//		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И Расходы.Ответственный.Подразделение В (&Подразделение)
//		|	И Расходы.ВидРасхода.Код = ""000000009""
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	""Закупка Европа"",
//		|	СУММА(Расходы.Сумма)
//		|ИЗ
//		|	Документ.Расходы КАК Расходы
//		|ГДЕ
//		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И Расходы.Ответственный.Подразделение В (&Подразделение)
//		|	И Расходы.ВидРасхода.Код = ""000000042""
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	""Закупка БУ"",
//		|	СУММА(Расходы.Сумма)
//		|ИЗ
//		|	Документ.Расходы КАК Расходы
//		|ГДЕ
//		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И Расходы.Ответственный.Подразделение В (&Подразделение)
//		|	И Расходы.ВидРасхода.Код = ""000000033""
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	""Закупка Новые"",
//		|	СУММА(Расходы.Сумма)
//		|ИЗ
//		|	Документ.Расходы КАК Расходы
//		|ГДЕ
//		|	Расходы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И Расходы.Ответственный.Подразделение В (&Подразделение)
//		|	И Расходы.ВидРасхода.Код = ""000000031""";
//	
//	ЗапросРасходПоставщики.УстановитьПараметр("Подразделение", 	МассивФилиалов);
//	ЗапросРасходПоставщики.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
//	ЗапросРасходПоставщики.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
//	
//	РезультатЗапросаРасходПоставщики = ЗапросРасходПоставщики.Выполнить().Выбрать();
//	
//	Пока РезультатЗапросаРасходПоставщики.Следующий() Цикл
//		Сумма = ?(РезультатЗапросаРасходПоставщики.Сумма = Null, 0, Число(Формат(РезультатЗапросаРасходПоставщики.Сумма, "ЧДЦ=0; ЧН=0;")));
//		Если РезультатЗапросаРасходПоставщики.Расход = "Закупка Россия" Тогда
//			ОтветИнфо.Вставить("expenditure_suppliers_russia", Число(Сумма));
//		ИначеЕсли РезультатЗапросаРасходПоставщики.Расход = "Закупка Европа" Тогда	
//			ОтветИнфо.Вставить("expenditure_suppliers_europe", Число(Сумма));
//		ИначеЕсли РезультатЗапросаРасходПоставщики.Расход = "Закупка БУ" Тогда
//			ОтветИнфо.Вставить("expenditure_suppliers_old", Число(Сумма));
//		ИначеЕсли РезультатЗапросаРасходПоставщики.Расход = "Закупка Новые" Тогда	
//			ОтветИнфо.Вставить("expenditure_suppliers_new", Число(Сумма));
//		КонецЕсли;	
//	КонецЦикла;
//		
//	ОтветИнфо.Вставить("profit", 			Число(Прибыль));
//	ОтветИнфо.Вставить("profitability", 	Число(Рентабельность));
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();
//	
//	ЗаписатьJSON(ЗаписьJSON, ОтветИнфо);
//	
//	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
//	
//	Ответ = Новый HTTPСервисОтвет(200);	
//	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
//	
//	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
//	
//	Возврат Ответ;
	///-ГомзМА 01.04.2024
	
КонецФункции


Функция ПолучитьВесьСписокЗаявокНовыйalllistapplicationnew(Запрос) 
	
	///+ГомзМА 03.05.2024
	Состояние = Запрос.ПараметрыURL["processing"];
	СостояниеСборки = Новый Массив;
	Если Состояние = "1" Тогда
		ЗапросСтатусы = Новый Запрос;
		ЗапросСтатусы.Текст =
			"ВЫБРАТЬ
			|	СтатусыWT.Ссылка КАК Ссылка,
			|	СтатусыWT.Код КАК Код
			|ИЗ
			|	Справочник.СтатусыWT КАК СтатусыWT
			|ГДЕ
			|	НЕ СтатусыWT.ПометкаУдаления";
		
		РезультатЗапросаСтатусы = ЗапросСтатусы.Выполнить().Выгрузить();
		
		Для Каждого Статус Из РезультатЗапросаСтатусы Цикл
			СостояниеСборки.Добавить(Справочники.СтатусыWT.НайтиПоКоду(Статус.Код));
		КонецЦикла;
	Иначе
		СостояниеСборки.Добавить(Справочники.СтатусыWT.НайтиПоКоду(Состояние));
	КонецЕсли;
	
	ЗапросЗаявки = Новый Запрос;
	
	///+ГомзМА 20.12.2023
	Роли = ПолучитьРолиПользователя(Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]));
	///-ГомзМА 20.12.2023
	
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
	
	///+ГомзМА 20.12.2023
//	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено Тогда
//		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено Тогда
//			ТекстЗаменыОтборОтветственныйЗаявки = "И (ЗаказКлиента.Ответственный = &Ответственный" + Символы.ПС + "		ИЛИ ЗаказКлиента.ОтветственныйЗаОбработку = &Ответственный)";
//			
//			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
//			
//			ЗапросЗаявки.УстановитьПараметр("Ответственный", Ответственный);
//		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
//			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента .WTpanel В (&WTpanel)";
//			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
//			ЗапросЗаявки.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"])); 
//			
//			МассивСтатусовВТ = Новый Массив;
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000006")); //отправка в тк
//			
//			ЗапросЗаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);	
//		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
//			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
//			
//			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
//			ЗапросЗаявки.УстановитьПараметр("Ответственный", Ответственный); 
//			
//			МассивСтатусовВТ = Новый Массив;
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003")); //сборка
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004")); //продажа 
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
//			
//			ЗапросЗаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
//		КонецЕсли;
//	Иначе
		ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="), "");
		
	//КонецЕсли;  
	
	ЗапросЗаявки.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	ЗапросЗаявки.УстановитьПараметр("СостояниеСборки", СостояниеСборки);
	ЗапросЗаявки.УстановитьПараметр("кСклады", "%"+ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе("K-")+"%");	
	ЗапросЗаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	///-ГомзМА 20.12.2023
	
	
	//запросзаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(10000, "ЧГ="));
	//
	//
	//Если Запрос.ПараметрыURL["userid"] <> Неопределено и Запрос.ПараметрыURL["userid"] <> "0" тогда 
	//	запросзаявки.Текст = запросзаявки.Текст +	" и
	//	|	(ВТ_ДанныеЗаявки.Ответственный = &Ответственный
	//	|    ИЛИ ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку = &Ответственный)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерЗаписи";
	//	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"]).Пользователь;
	//	запросзаявки.УстановитьПараметр("Ответственный", Ответственный);
	//КонецЕсли; 
	//запросзаявки.УстановитьПараметр("СостояниеСборки", СостояниеСборки);
	//запросзаявки.УстановитьПараметр("кСклады", "%"+ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе("K-")+"%");	
	//запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	
	Выборкаобщ = запросзаявки.Выполнить().Выбрать().Количество();  
	
	///+ГомзМА 20.12.2023
//	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено Тогда
//		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено Тогда
//			ТекстЗаменыОтборОтветственныйЗаявки = "И (ЗаказКлиента.Ответственный = &Ответственный" + Символы.ПС + "		ИЛИ ЗаказКлиента.ОтветственныйЗаОбработку = &Ответственный)";
//			
//			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
//			
//			ЗапросЗаявки.УстановитьПараметр("Ответственный", Ответственный);
//		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
//			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
//			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
//			ЗапросЗаявки.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["userid"])); 
//			
//			МассивСтатусовВТ = Новый Массив;
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000006")); //отправка в тк
//			
//			ЗапросЗаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);	
//		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
//			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
//			
//			ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), ТекстЗаменыОтборОтветственныйЗаявки);
//			ЗапросЗаявки.УстановитьПараметр("Ответственный", Ответственный); 
//			
//			МассивСтатусовВТ = Новый Массив;
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003")); //сборка
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004")); //продажа 
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
//			
//			ЗапросЗаявки.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
//		КонецЕсли;
//	Иначе
		ЗапросЗаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="), "");
		
	//КонецЕсли;  
	
	ЗапросЗаявки.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	запросзаявки.УстановитьПараметр("СостояниеСборки", СостояниеСборки);
	запросзаявки.УстановитьПараметр("кСклады", "%"+ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе("K-")+"%"); 
	
	Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
		запросзаявки.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
		
	Иначе 
		запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	КонецЕсли;
	
	///-ГомзМА 20.12.2023
	
	//запросзаявки.Текст =  СтрШаблон(ТекстдляСпискаЗаявок(), Формат(?(Число(Запрос.ПараметрыURL["Count"])>0,Запрос.ПараметрыURL["Count"],10000), "ЧГ="));
	//
	//Если Запрос.ПараметрыURL["userid"] <> Неопределено и Запрос.ПараметрыURL["userid"] <> "0" тогда 
	//	запросзаявки.Текст = запросзаявки.Текст +	" и
	//	|	(ВТ_ДанныеЗаявки.Ответственный = &Ответственный
	//	|    ИЛИ ВТ_ДанныеЗаявки.ОтветственныйЗаОбработку = &Ответственный)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерЗаписи";		
	//	запросзаявки.УстановитьПараметр("Ответственный", Ответственный);
	//КонецЕсли;
	//запросзаявки.УстановитьПараметр("СостояниеСборки", СостояниеСборки);
	//
	//Если Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"])))>0 и Число(Запрос.ПараметрыURL["Page"])>1 Тогда
	//	запросзаявки.УстановитьПараметр("НачинаяСЗаписи",  Число(((Запрос.ПараметрыURL["Count"])*(Запрос.ПараметрыURL["Page"]-1)+1)));
	//	
	//Иначе 
	//	запросзаявки.УстановитьПараметр("НачинаяСЗаписи", 0);
	//КонецЕсли;
	
	Выборка = запросзаявки.Выполнить().Выбрать();
	
	МассивЗаявок = Новый Массив;
	Пока выборка.Следующий() Цикл
		СтруктураЗаявки = новый Структура;
		СтруктураЗаявки.Вставить("id",Строка(выборка.Номер));
		СтруктураЗаявки.Вставить("date",Строка(выборка.Дата));
		СтруктураЗаявки.Вставить("client",Строка(выборка.Клиент));
		СтруктураЗаявки.Вставить("condition",Строка(выборка.Состояние)); 
		
		СтруктураОтветсвенного = Новый структура;
		СтруктураОтветсвенного.Вставить("id",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.Ответственный).Код));
		СтруктураОтветсвенного.Вставить("name",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.Ответственный).Наименование)); 
		СтруктураЗаявки.Вставить("responsible",СтруктураОтветсвенного); 
		
		СтруктураЗаявки.Вставить("sum",Строка(выборка.СуммаДокумента));
		СтруктураЗаявки.Вставить("callDate",Строка(выборка.ДатаСвязи));
		СтруктураЗаявки.Вставить("processing",Строка(выборка.СтатусОбработки));   
		СтруктураЗаявки.Вставить("sub_processing",Строка(выборка.ПодСтатусОбработки));
		
		
		СтруктураПортера= Новый структура;
		СтруктураПортера.Вставить("id",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.ОтветственныйЗаОбработку).Код));
		СтруктураПортера.Вставить("name",Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",выборка.ОтветственныйЗаОбработку).Наименование));		
		СтруктураЗаявки.Вставить("porter",СтруктураПортера);
		
		СтруктураЗаявки.Вставить("comment",Строка(выборка.Комментарий));
		СтруктураЗаявки.Вставить("k",Строка(выборка.НаКскладе));
		МассивЗаявок.Добавить(СтруктураЗаявки);
	КонецЦикла;  
	
	Итог = Выборкаобщ/?(Число(Запрос.ПараметрыURL["Count"])=0,Выборкаобщ,Число(Запрос.ПараметрыURL["Count"]));
	Итог = ?((Итог-Цел(Итог))>0,Цел(Итог)+1, Цел(Итог));
	
	СтруктураИнфо= новый Структура;
	СтруктураИнфо.Вставить("pages",Итог);
	СтруктураИнфо.Вставить("Count",Выборкаобщ);	
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("info",СтруктураИнфо);
	СтруктураОтвета.Вставить("data",МассивЗаявок);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 03.05.2024
	
КонецФункции


Функция ТипыЗаявокНовыйtypes_applicationnew(Запрос)
	
	///+ГомзМА 03.05.2024
	МассивЗаявок = Новый Массив;
	Ответственный = Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"]).Пользователь;
	
	///+ГомзМА 20.12.2023
	Роли = ПолучитьРолиПользователя(Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"]));
	///-ГомзМА 20.12.2023
	
	ЗапросЗаявок = новый запрос;  
	
	///+ГомзМА 20.12.2023
//	МассивСтатусовВТ = Новый Массив;
//	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено Тогда
//		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) <> Неопределено Тогда
//			ТекстЗаменыОтборОтветственныйЗаявки = "И (ЗаказКлиента.Ответственный = &Ответственный" + Символы.ПС + "		ИЛИ ЗаказКлиента.ОтветственныйЗаОбработку = &Ответственный)";
//			ТекстЗаменыОтборОтветственныйПродажи = "И (ПродажаЗапчастей.КтоПродал = &Ответственный" + Символы.ПС + " 	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный)";
//			
//			ЗапросЗаявок.Текст =  СтрШаблон(ТекстДляТиповЗаявок(), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
//			
//			ЗапросЗаявок.УстановитьПараметр("Ответственный", Ответственный);
//		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
//			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
//			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И ПродажаЗапчастей.Водитель = &Ответственный";
//			ЗапросЗаявок.Текст =  СтрШаблон(ТекстДляТиповЗаявок(), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
//			ЗапросЗаявок.УстановитьПараметр("Ответственный", Справочники.Сотрудники.НайтиПоКоду(Запрос.ПараметрыURL["user_id"])); 
//			
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000006")); //отправка в тк
//			
//			ЗапросЗаявок.УстановитьПараметр("WTpanel", МассивСтатусовВТ);	
//		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
//			ТекстЗаменыОтборОтветственныйЗаявки = "И ЗаказКлиента.WTpanel В (&WTpanel)";
//			ТекстЗаменыОтборОтветственныйПродажи = "И ПродажаЗапчастей.WTpanel В (&WTpanel)" + Символы.ПС + "И (ПродажаЗапчастей.ОтветственныйКладовщик = &Ответственный" 
//			+ Символы.ПС + "	ИЛИ ПродажаЗапчастей.ОтветственныйКладовщик = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
//			ЗапросЗаявок.Текст =  СтрШаблон(ТекстДляТиповЗаявок(), ТекстЗаменыОтборОтветственныйЗаявки, ТекстЗаменыОтборОтветственныйПродажи);
//			ЗапросЗаявок.УстановитьПараметр("Ответственный", Ответственный); 
//			
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000003")); //сборка
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000004")); //продажа 
//			МассивСтатусовВТ.Добавить(Справочники.СтатусыWT.НайтиПоКоду("000000005")); //упаковка
//			
//			ЗапросЗаявок.УстановитьПараметр("WTpanel", МассивСтатусовВТ);
//		КонецЕсли;
//	Иначе
		ЗапросЗаявок.Текст =  СтрШаблон(ТекстДляТиповЗаявок(), "", "");
	//КонецЕсли;  
	
	ЗапросЗаявок.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	ЗапросЗаявок.УстановитьПараметр("ПроверкаПродажи", Справочники.СтатусыWT.НайтиПоНаименованию("Продажа"));
	///-ГомзМА 20.12.2023	
	
	//ЗапросЗаявок.Текст = ТекстДляТиповЗаявок();
	//ЗапросЗаявок.УстановитьПараметр("Дата", ТекущаяДата()-3600*24*60);
	//ЗапросЗаявок.УстановитьПараметр("Ответственный", Ответственный);
	//ЗапросЗаявок.УстановитьПараметр("ПроверкаПродажи", Справочники.СтатусыWT.НайтиПоНаименованию("Продажа"));
	
	Выборка = ЗапросЗаявок.Выполнить().Выбрать(); 
	ОбщееКоличество = 0; 
	
	
	
	///+ГомзМА 20.12.2023  
//	Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Администратор")) = Неопределено И
//		Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Менеджер")) = Неопределено Тогда
//		
//		Если Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Водитель")) <> Неопределено Тогда
//			Пока выборка.Следующий() Цикл
//				Если Выборка.СтатусОбработки = "Упаковка" ИЛИ Выборка.СтатусОбработки = "Отправка в тк" Тогда
//					СтруктураЗаявки = новый Структура;
//					СтруктураЗаявки.Вставить("count",Выборка.Количество); 
//					СтруктураЗаявки.Вставить("title",Строка(Выборка.СтатусОбработки));
//					
//					МассивЗаявок.Добавить(СтруктураЗаявки);
//					
//					ОбщееКоличество = ОбщееКоличество + Выборка.Количество;  
//				КонецЕсли;
//			Конеццикла;
//		ИначеЕсли Роли.Найти(Справочники.ДолжностиДляУК.НайтиПоНаименованию("Кладовщик")) <> Неопределено Тогда
//			Пока выборка.Следующий() Цикл
//				
//				Если Выборка.СтатусОбработки = "Сборка" ИЛИ Выборка.СтатусОбработки = "Продажа" ИЛИ Выборка.СтатусОбработки = "Упаковка" Тогда
//					СтруктураЗаявки = новый Структура;
//					СтруктураЗаявки.Вставить("count",Выборка.Количество); 
//					СтруктураЗаявки.Вставить("title",Строка(Выборка.СтатусОбработки));
//					
//					МассивЗаявок.Добавить(СтруктураЗаявки);
//					
//					ОбщееКоличество = ОбщееКоличество + Выборка.Количество;  
//				КонецЕсли;
//			Конеццикла;
//		КонецЕсли;
//	Иначе     
		Пока выборка.Следующий() Цикл
			СтруктураЗаявки = новый Структура;
			СтруктураЗаявки.Вставить("count", Выборка.Количество); 
			СтруктураЗаявки.Вставить("title", Строка(Выборка.СтатусОбработки));
			СтруктураЗаявки.Вставить("code",  Строка(Выборка.Код));
			
			МассивЗаявок.Добавить(СтруктураЗаявки);
			
			ОбщееКоличество = ОбщееКоличество + Выборка.Количество;   
		Конеццикла;
	//КонецЕсли;  

	
	///-ГомзМА 20.12.2023
	
	//Пока выборка.Следующий() Цикл
	//	СтруктураЗаявки = новый Структура;
	//	СтруктураЗаявки.Вставить("count",Выборка.Количество); 
	//	СтруктураЗаявки.Вставить("title",Строка(Выборка.СтатусОбработки));
	//	Если Выборка.СтатусОбработки = "Обращение" Или Выборка.СтатусОбработки = "Заявка" Или Выборка.СтатусОбработки = "Сборка" тогда
	//		СтруктураЗаявки.Вставить("type","Заявка");
	//	Иначе
	//		СтруктураЗаявки.Вставить("type","Продажа");  
	//	КонецЕсли;
	//	
	//	МассивЗаявок.Добавить(СтруктураЗаявки);
	//	
	//	ОбщееКоличество = ОбщееКоличество + Выборка.Количество;   
	//Конеццикла;
	
	
	
	СтруктураЗаявки = новый Структура;
	СтруктураЗаявки.Вставить("count",ОбщееКоличество);  
	СтруктураЗаявки.Вставить("title","Все");
	СтруктураЗаявки.Вставить("code",  "1");
	
	МассивИтог = Новый массив;
	МассивИтог.Добавить(СтруктураЗаявки);
	
	//МассивЗаявок.Добавить(СтруктураЗаявки); 
	Для каждого стр из МассивЗаявок Цикл
		МассивИтог.Добавить(СТр);
	КонецЦикла;
	
	СтруктураОтвета = новый Структура;
	СтруктураОтвета.Вставить("data",МассивИтог);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, МассивИтог);
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	///-ГомзМА 03.05.2024
	
КонецФункции

