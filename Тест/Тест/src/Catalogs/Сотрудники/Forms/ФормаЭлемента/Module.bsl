
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
СсылкаНафото = ПолучитьНавигационнуюСсылку(Объект.Ссылка,"Фото");    
Элементы.СсылкаНаФото.РазмерКартинки = РазмерКартинки.АвтоРазмер;   
	// Если нет доступа, то отказ будет при открытии	
	Если Не ПолучитьДоступностьФормы() Тогда
		Возврат
	КонецЕсли;	

 	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтакты", ПоложениеЗаголовкаЭлементаФормы.Лево);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация

	Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания = КонецМесяца(ТекущаяДата());

	дт_ПодчиненныеСправочники.РазместитьПодчиненныйСправочник(ЭтаФорма, "БанковскиеСчетаСотрудников", Элементы.ГруппаБанковскиеСчетаСотрудников, "ОсновнойБанковскийСчет");
	
	ОбновитьСписки();
	РассчётОкладаиАванса();
	УправлениеФормой(ЭтаФорма);
	РассчётАдминов();
	РассчётОтпусков();
	
	///+ГомзМА 28.02.2023 (Задача 000002879 от 28.02.2023)
	Для каждого СтрокаТаблицы Из ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Если СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ИмяПоля = СтрокаТаблицы.ИмяРеквизита;
			Элементы[ИмяПоля].Маска = "+79999999999";
		КонецЕсли;	
	КонецЦикла;
	///-ГомзМА 28.02.2023 (Задача 000002879 от 28.02.2023)
	
	///+ГомзМА 22.05.2023
	ТМЦ.Параметры.УстановитьЗначениеПараметра("Ответственный", 		  Объект.Пользователь);
	Расходники.Параметры.УстановитьЗначениеПараметра("Ответственный", Объект.Пользователь);
	///-ГомзМА 22.05.2023
	
	///+ГомзМА 23.06.2023
	ДолжностиМенеджерПоПродажам = Новый Массив;
	ДолжностиМенеджерПоПродажам.Добавить(Справочники.ДолжностиПредприятия.НайтиПоКоду("000000093"));
	ДолжностиМенеджерПоПродажам.Добавить(Справочники.ДолжностиПредприятия.НайтиПоКоду("000000003"));
	//ДолжностиМенеджерПоПродажам.Добавить(Справочники.ДолжностиПредприятия.НайтиПоКоду("")); //Добавить менеджера из ЕКБ, когда будет создана должность!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
	Для каждого ДолжностьМенеджер Из ДолжностиМенеджерПоПродажам Цикл
		Если Должность = ДолжностьМенеджер Тогда
			Элементы.СтраницаПомощникиМенеджера.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	///-ГомзМА 23.06.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ФормаДоступна Тогда
		ПоказатьПредупреждение(, "Недостаточно прав доступа!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если Полноправный() ИЛИ Финансы()  Тогда
		Элементы.ГруппаЗарплата.Видимость = истина;
		Элементы.ГруппаРасчётВыплат.Видимость = истина;
	КонецЕсли;
	
		
КонецПроцедуры

&НаСервере
Функция Полноправный()
	Возврат Пользователи.ЭтоПолноправныйПользователь(Пользователи.ТекущийПользователь());
КонецФункции
&НаСервере
Функция Финансы()
	Возврат Пользователи.РолиДоступны("дт_Зарплата");
КонецФункции
	


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
    // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	
	// ns.Подчиненные справочники
	дт_ПодчиненныеСправочники.ПослеЗаписи(ЭтаФорма, 
		ТекущийОбъект, 
		ПараметрыЗаписи, 
		"БанковскиеСчетаСотрудников", 
		Элементы.ГруппаБанковскиеСчетаСотрудников, 
		"ОсновнойБанковскийСчет"
	);
	// Конец ns.Подчиненные справочники
	
	ОбновитьСписки();
	ОбновитьКадровыеДанные();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
 	
 	// Если нет доступа, то отказ будет при открытии	
	Если Не ПолучитьДоступностьФормы() Тогда
		Возврат
	КонецЕсли;	
    
 	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация

	//ОбновитьСписки();
	ОбновитьКадровыеДанные();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры



&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры



&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	
	Если ЭтоАдресВременногоХранилища(СсылкаНаФото)  Тогда 
		ФайлФото = ПолучитьИзВременногоХранилища(СсылкаНаФото); 
		ТекущийОбъект.Фото = Новый ХранилищеЗначения(ФайлФото); 
		УдалитьИзВременногоХранилища(СсылкаНаФото); 
		СсылкаНаФото = ПолучитьНавигационнуюСсылку(Объект.Ссылка,"Фото"); 
	КонецЕсли;
	
	///+ГомзМА 23.06.2023
	Если Объект.ПомощникиМенеджера.Количество() > 0 Тогда 
		Для каждого СтрокаТЧ Из Объект.ПомощникиМенеджера Цикл
			//Находим запись в регистре сведений
			ЗаписьВРегистреСведений = РегистрыСведений.ПомощникиМенеджеров.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.Помощник = СтрокаТЧ.ФИО;
			ЗаписьВРегистреСведений.Прочитать();
			//Проверка, приставлен ли уже к кому-нибудь помощник 
			Если ЗаписьВРегистреСведений.Выбран() И ЗаписьВРегистреСведений.СсылкаНаСправочник <> Объект.Ссылка Тогда
				//Удаляем помощника из справочника прошлого наставника
				СправочникОбъект = ЗаписьВРегистреСведений.СсылкаНаСправочник.ПолучитьОбъект();
				
				СтруктураДляПоиска = Новый Структура("ФИО", ЗаписьВРегистреСведений.Помощник);
				
				ТабличнаяЧастьСправочника = СправочникОбъект.ПомощникиМенеджера;
				МассивСтрок = ТабличнаяЧастьСправочника.НайтиСтроки(СтруктураДляПоиска);
				Для каждого Строка Из МассивСтрок Цикл
					ТабличнаяЧастьСправочника.Удалить(Строка);
				КонецЦикла;
				
				СправочникОбъект.Записать();
				
				//Обновляем данные в регистре сведений по помощнику
				ЗаписьВРегистреСведений = РегистрыСведений.ПомощникиМенеджеров.СоздатьМенеджерЗаписи();
				ЗаписьВРегистреСведений.Менеджер = Объект.Пользователь;
				ЗаписьВРегистреСведений.Помощник = СтрокаТЧ.ФИО;
				ЗаписьВРегистреСведений.СсылкаНаСправочник = Объект.Ссылка;
				ЗаписьВРегистреСведений.Записать();
			Иначе
				//Создаем новую запись в регистре сведений
				ЗаписьВРегистреСведений = РегистрыСведений.ПомощникиМенеджеров.СоздатьМенеджерЗаписи();
				ЗаписьВРегистреСведений.Менеджер = Объект.Пользователь;
				ЗаписьВРегистреСведений.Помощник = СтрокаТЧ.ФИО;
				ЗаписьВРегистреСведений.СсылкаНаСправочник = Объект.Ссылка;
				ЗаписьВРегистреСведений.Записать();	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	///-ГомзМА 23.06.2023
	
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(ЭлементПериод)
	
	ОбновитьСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	ПользовательПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПользовательПриИзмененииНаСервере()
	Спр = РеквизитФормыВЗначение("Объект");
	Спр.Заполнить(Объект.Пользователь);
	ЗначениеВРеквизитФормы(Спр, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	дт_СотрудникиКлиентСервер.ОбновитьНаименование(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	дт_СотрудникиКлиентСервер.ОбновитьНаименование(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	дт_СотрудникиКлиентСервер.ОбновитьНаименование(Объект);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	дт_СотрудникиКлиентСервер.ОбновитьФИО(Объект);
КонецПроцедуры


&НаКлиенте
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Период.ДатаНачала = ДобавитьМесяц(Период.ДатаНачала, Направление); 
	Период.ДатаОкончания = КонецМесяца(Период.ДатаНачала);
	ПериодПриИзменении(Элемент);
	 
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы

&НаКлиенте
Процедура СписокПродажиПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры

&НаКлиенте
Процедура СписокПомощьВПродажеПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры

&НаКлиенте
Процедура СписокДоставкиПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры

&НаКлиенте
Процедура СписокУчетТоваровПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры

&НаКлиенте
Процедура СписокВыплатыПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры


&НаКлиенте
Процедура СписокПеремещенияТоваровПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры

&НаКлиенте
Процедура СписокПриемкиТоваровПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановкиМестХраненияПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры

&НаКлиенте
Процедура СписокУщербыПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры


&НаКлиенте
Процедура СписокКлиентыПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры

&НаКлиенте
Процедура СписокВыполненныеРаботыПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры

&НаКлиенте
Процедура СписокСозданныеЗаказНарядыПриИзменении(Элемент)
	ОбновитьПоказательСписка(Элемент.Имя)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Показатели


&НаКлиенте
Процедура ПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Показатели.ТекущиеДанные.ЭтоДополнительный = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПоказателиПередНачаломИзменения(Элемент, Отказ)
	ОткрытьРасшифровкуПоказателя(Элементы.СписокПоказатели.ТекущиеДанные.Показатель);
КонецПроцедуры





&НаКлиенте
Процедура ПоказателиПоказательПриИзменении(Элемент)
	
	Элементы.Показатели.ТекущиеДанные.ЭтоДополнительный = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПомощникиМенеджераПередУдалением(Элемент, Отказ)

	///+ГомзМА 23.06.2023
	ТекСтрока = Элементы.ПомощникиМенеджера.ТекущиеДанные;
	УдалитьДанныеРегистраСведенийПомощникиМенеджеров(ТекСтрока.ФИО);
	///-ГомзМА 23.06.2023
	
КонецПроцедуры

#КонецОбласти




#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
        УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ns.ПодчиненныеСправочники
&НаКлиенте
Процедура Подключаемый_ПодчиненныеСправочникиВыполнитьКоманду(Команда)
	
	дт_ПодчиненныеСправочникиКлиент.ВыполнитьКоманду(ЭтотОбъект, 
		Команда.Имя, 
		"БанковскиеСчетаСотрудников",
		"ОсновнойБанковскийСчет"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодчиненныеСправочникиПриИзменении(Элемент)
	дт_ПодчиненныеСправочникиКлиент.ПриИзменении(ЭтотОбъект, Элемент, "БанковскиеСчетаСотрудников");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодчиненныеСправочникиДобавить(Команда)
	Подключаемый_ПодчиненныеСправочникиДобавитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПодчиненныеСправочникиДобавитьНаСервере()
	дт_ПодчиненныеСправочники.КомандаДобавить(ЭтотОбъект, "БанковскиеСчетаСотрудников");
КонецПроцедуры
// Конец ns.ПодчиненныеСправочники

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма) Экспорт
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	//Элементы.ГруппаПоказатели.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция ТекДолжностьСотрудника()
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ДолжностиСотрудниковСрезПоследних.Должность) КАК Должность,
	               |	МАКСИМУМ(ДолжностиСотрудниковСрезПоследних.Период) КАК Период
	               |ИЗ
	               |	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	               |ГДЕ
	               |	ДолжностиСотрудниковСрезПоследних.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Выборка = запрос.Выполнить().Выбрать();
	ВЫборка.Следующий();
	
	Возврат Выборка.Должность;
	
КонецФункции


&НаСервере
Функция ТекМестоРаботыСотрудника()
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ДолжностиСотрудниковСрезПоследних.Период) КАК Период,
	               |	ДолжностиСотрудниковСрезПоследних.Регистратор КАК Регистратор
	               |ИЗ
	               |	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	               |ГДЕ
	               |	ДолжностиСотрудниковСрезПоследних.Сотрудник = &Сотрудник	               
	               |СГРУППИРОВАТЬ ПО
	               |	ДолжностиСотрудниковСрезПоследних.Регистратор
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Выборка = запрос.Выполнить().Выбрать();
	ВЫборка.Следующий();
	
	Если ТипЗнч(Выборка.Регистратор) = тип("ДокументСсылка.КадровыйПриказ") Тогда
	Возврат Выборка.Регистратор.Город;
	КонецЕсли;
	
КонецФункции


	
&НаСервере
Процедура ОбновитьСписки()
	
	// Параметры дин. списков
	
	ПараметрНачалоПериода = Новый ПараметрКомпоновкиДанных("НачалоПериода");
	ПараметрКонецПериода = Новый ПараметрКомпоновкиДанных("КонецПериода");

	// Обновить показатели	
	Для Каждого Элемент Из Элементы Цикл

		Если ТипЗнч(Элемент) <> Тип("ТаблицаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДинСписок = ЭтаФорма[Элемент.Имя];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Для Каждого Параметр Из ДинСписок.Параметры.Элементы Цикл
			Если Параметр.Параметр = ПараметрНачалоПериода Или Параметр.Параметр = ПараметрКонецПериода Тогда
				Параметр.Использование = ЗначениеЗаполнено(Период);
			КонецЕсли;
		КонецЦикла;

			КонецЦикла;

КонецПроцедуры




&НаКлиенте
Процедура ОткрытьРасшифровкуПоказателя(Показатель) Экспорт
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Сотрудник", Объект.Ссылка);
	ПараметрыОтбора.Вставить("Показатель", Показатель);
	
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("Период", Период);
	
	ОткрытьФорму("РегистрСведений.ЗначенияПоказателейСотрудников.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры



&НаСервере
Процедура ОбновитьКадровыеДанные()

	Должность = Неопределено;
	Подразделение = Неопределено;
	ДатаПриема = Неопределено;
	ДатаОформления = Неопределено;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	КадровыеДанные = дт_Зарплата.ПолучитьКадровыеДанные(Объект.Ссылка);
	Если КадровыеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыДолжности = дт_Зарплата.ПолучитьПараметрыДолжности(Объект.Ссылка, ТекущаяДата(), КадровыеДанные);
	
	Организация    	   = КадровыеДанные.Организация;
	Должность     	   = КадровыеДанные.Должность;
	Подразделение  	   = КадровыеДанные.Подразделение;
	ЦФО 		   	   = дт_Зарплата.ПолучитьГоловноеПодразделение(Подразделение);
	ДатаОформления 	   = КадровыеДанные.ДатаОформления;
	ДатаПриема 	       = КадровыеДанные.ДатаПриема;
	ОкладБУ 	   	   = КадровыеДанные.ОкладБУ;
	Оклад 		   	   = ПараметрыДолжности.Оклад;
	КадровыйПриказ 	   = ПолучитьПриказ(Ложь);
	ТипДоговора    	   = ПолучитьПриказ(Истина);
	МестоРаботы 	   = ТекМестоРаботыСотрудника();
	//Объект.МестоРаботы = ТекМестоРаботыСотрудника();
КонецПроцедуры

Функция ПолучитьПриказ(Тип = Ложь)
	Запрос  = Новый запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	КадровыйПриказ.Ссылка КАК Ссылка,
	                |	КадровыйПриказ.Сотрудник КАК Сотрудник,
	                |	КадровыйПриказ.ТипДоговора КАК ТипДоговора
	                |ИЗ
	                |	Документ.КадровыйПриказ КАК КадровыйПриказ
	                |ГДЕ
	                |	КадровыйПриказ.Сотрудник = &Сотрудник
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	КадровыйПриказ.Дата УБЫВ";
	Запрос.УстановитьПараметр("Сотрудник", объект.ссылка);
	Сотрудник = Запрос.Выполнить().Выбрать();
	Сотрудник.Следующий();
	Если тип = ложь Тогда
		Возврат Сотрудник.ссылка;
	Иначе
		Возврат Сотрудник.ТипДоговора;
	КонецЕсли;
КонецФункции



&НаСервере
Процедура ОбновитьПоказательСписка(ИмяСписка) Экспорт

	Схема = Элементы[ИмяСписка].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы[ИмяСписка].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    Результат = Новый ТаблицаЗначений;
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			
	
	//ЭтаФорма[ИмяПоказателяДляСписка(ИмяСписка)] = Результат.Количество();
	
	СуммовыеПоказатели = СуммовыеПоказателиСписка(ИмяСписка);
	
	Если СуммовыеПоказатели <> Неопределено Тогда
		Для каждого Показатель Из СуммовыеПоказатели Цикл
			Если Результат.Колонки.Найти(Показатель.Значение) <> Неопределено Тогда
				ЭтаФорма[Показатель.Ключ] = Результат.Итог(Показатель.Значение);
			КонецЕсли;
				
		КонецЦикла;  
	КонецЕсли;
	
	ТабельКоличествоСтр = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(ТабельКоличество);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказатель(КомпоновщикНастроек, ТекстЗапроса, ПараметрыДинСписка, Показатель)

	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();

	// Формируем Схему
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";

	НаборДанныхЗапрос = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанныхЗапрос.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанныхЗапрос.Запрос = ТекстЗапроса;
	НаборДанныхЗапрос.Имя            = "НаборДанных";
	НаборДанныхЗапрос.ИсточникДанных = "ИсточникДанных";
	
	// Копируем параметры 
	Для Каждого Параметр Из ПараметрыДинСписка.Элементы Цикл
		ЭлементПараметра = СхемаКомпоновкиДанных.Параметры.Добавить();
		ЭлементПараметра.Имя = Строка(Параметр.Параметр);
		//ЭлементПараметра.Использование = Параметр.Использование;//ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ЭлементПараметра.Значение = Параметр.Значение;
	КонецЦикла;

	ПараметрыВыполнения = КомпоновкаДанныхСервер.ПараметрыВыгрузитьРезультатСКД();
	ПараметрыВыполнения.СхемаКомпоновки = СхемаКомпоновкиДанных;
	ПараметрыВыполнения.НастройкиКомпоновки = НастройкиКомпоновки;
	
	Результат = КомпоновкаДанныхСервер.ВыгрузитьРезультатСКД(ПараметрыВыполнения);
	
	Показатель = Результат.Количество();

КонецПроцедуры



// Имя показателя для вычисления количества строк в дин. списке
&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоказателяДляСписка(ИмяСписка)
	Возврат СтрЗаменить(ИмяСписка, "Список", "Количество");
КонецФункции

// Связь доп. показателей (кроме колоичества строк) с именами списка
//	Ключ - имя реквизиты формы
//	Значение - имя колонки дин. списка
&НаКлиентеНаСервереБезКонтекста
Функция СуммовыеПоказателиСписка(ИмяСписка)
	Результат = Неопределено;
	
	Если ИмяСписка = "СписокПродажи" Тогда
		Результат = Новый Структура();
		Результат.Вставить("ПродажиСумма", "Сумма");
	ИначеЕсли ИмяСписка = "СписокУчетТоваров" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("УчетТоваровСумма", "Сумма");
		Результат.Вставить("УчетТоваровКоличество", "Количество"); // количество единиц номенклатуры
				
	ИначеЕсли ИмяСписка = "СписокПомощьВПродаже" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ПомощьВПродажеСумма", "Сумма");
				
	ИначеЕсли ИмяСписка = "СписокВыплаты" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ВыплатыСумма", "Сумма");
		
	ИначеЕсли ИмяСписка = "СписокПеремещенияТоваров" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ПеремещенияТоваровКоличество", "Количество");
		
	ИначеЕсли ИмяСписка = "СписокПриемкиТоваров" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ПриемкиТоваровКоличество", "Количество");
	
	ИначеЕсли ИмяСписка = "СписокУщербы" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("УщербыСумма", "Сумма");
		
	ИначеЕсли ИмяСписка = "СписокВыполненныеРаботы" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ВыполненныеРаботыВремяПлан", "ВремяПлан");
		Результат.Вставить("ВыполненныеРаботыВремяФакт", "ВремяФакт");
		
	ИначеЕсли ИмяСписка = "СписокСозданныеЗаказНаряды" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("СозданныеЗаказНарядыВремяПлан", "КоличествоВремяПлан");
		Результат.Вставить("СозданныеЗаказНарядыВремяФакт", "КоличествоВремяФакт");
		
	ИначеЕсли ИмяСписка = "СписокТабель" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ТабельКоличество", "Количество");
		
	ИначеЕсли ИмяСписка = "СписокТМЦ" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ТМЦСтоимость", "Стоимость");
		
	ИначеЕсли ИмяСписка = "СписокНадбавки" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("НадбавкиСумма", "Сумма");
		
	ИначеЕсли ИмяСписка = "СписокКлиенты" Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("КоличествоКлиенты", "Количество");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция ПолучитьДоступностьФормы()
	
	Если ФормаДоступна = Неопределено Тогда
	
		ФормаДоступна =  Пользователи.ЭтоПолноправныйПользователь() 
			ИЛИ (ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПараметрыДолжностей)
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ДолжностиСотрудников)
			И ПравоДоступа("Просмотр", Метаданные.Справочники.ДолжностиПредприятия)
			И ПравоДоступа("Просмотр", Метаданные.Справочники.Подразделения));
		
	КонецЕсли;
	
	Возврат ФормаДоступна;
	
КонецФункции


&НаКлиенте
Процедура ДобавитьПоказателиЗП(Команда)
	// Сергеев открытие формы для создания новой записи
	ОткрытьФормуМодально("РегистрСведений.ПоказателиЗП.ФормаЗаписи",
	Новый Структура("ЗначенияЗаполнения",Новый Структура("Сотрудник",Объект.Ссылка))); 
	Элементы.СписокПоказателиЗП.Обновить();
	РассчётОкладаиАванса();
КонецПроцедуры

&НаКлиенте
Процедура СписокПоказателиЗПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//СергеевОткрытие записи из динамического списка 
ТекСтрока = Элементы.СписокПоказателиЗП.ТекущиеДанные;
МассивКонструктораКлюча = Новый Массив;
МассивКонструктораКлюча.Добавить(Новый Структура("Период,Дата,Сотрудник",ТекСтрока.Период,ТекСтрока.Дата,ТекСтрока.Сотрудник));

КлючЗаписиРегистра = Новый ("РегистрСведенийКлючЗаписи.ПоказателиЗП", МассивКонструктораКлюча);
ОткрытьФорму("РегистрСведений.ПоказателиЗП.Форма.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиРегистра));
ОбновитьСписки();
РассчётОкладаиАванса();
КонецПроцедуры


&НаСервере
Процедура РассчётОкладаиАванса()
	//Сергеев запрос на актуальную запись в регистре и рассчёт аванса и оклада
	
	ЗапросРабДней = Новый Запрос;
	ЗапросРабДней.Текст = "ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(МЕСЯЦ(ДанныеПроизводственногоКалендаря.Дата)) КАК Дни,
	                      |	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
	                      |ИЗ
	                      |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	                      |ГДЕ
	                      |	ДанныеПроизводственногоКалендаря.ВидДня = &ВидДня
	                      |	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ДанныеПроизводственногоКалендаря.ВидДня";
	 ЗапросРабДней.УстановитьПараметр("ДатаНачала",НачалоМесяца(ТекущаяДата()));
	 ЗапросРабДней.УстановитьПараметр("ДатаОкончания",КонецМесяца(ТекущаяДата()));
	 ЗапросРабДней.УстановитьПараметр("ВидДня",Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	 
	 ВыборкаДней = ЗапросРабДней.Выполнить().Выбрать();
	 ВыборкаДней.Следующий();

	
	запросОклада = Новый запрос;
	запросОклада.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	              |	ПоказателиЗП.Аванс КАК Аванс,
	              |	ПоказателиЗП.Подсчёт КАК Подсчёт,
	              |	ПоказателиЗП.ООклад КАК ООклад,
	              |	ПоказателиЗП.НОклад КАК НОклад,
	              |	ПоказателиЗП.Оклад КАК Оклад,
	              |	ПоказателиЗП.ДогАванс КАК ДогАванс
	              |ИЗ
	              |	РегистрСведений.ПоказателиЗП КАК ПоказателиЗП
	              |ГДЕ
	              |	ПоказателиЗП.Сотрудник = &Сотрудник
	              |	И ПоказателиЗП.Дата <= &Дата
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	ПоказателиЗП.Дата УБЫВ";
	запросОклада.УстановитьПараметр("Сотрудник",Объект.ссылка);
	запросОклада.УстановитьПараметр("Дата",НачалоМесяца(ТекущаяДата()));
	СтрокаРегистра = ЗапросОклада.Выполнить().Выбрать();
	СтрокаРегистра.Следующий();			  
	Попытка
		Оклад 		 = СтрокаРегистра.Оклад;
		//Объект.Оклад = СтрокаРегистра.Оклад;
		Аванс 		  = СтрокаРегистра.ДогАванс;
		СтоимостьДня  = СтрокаРегистра.Оклад / ВыборкаДней.Дни;
		СтоимостьЧаса = СтоимостьДня / 8;
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Элементы.СписокПоказателиЗП.Обновить();
	РассчётОкладаиАванса();
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписьНаСервере(ТекСтрока)
	//Сергеев удаление существющей записи
	Запись = РегистрыСведений.ПоказателиЗП.СоздатьМенеджерЗаписи();
	Запись.Сотрудник = ТекСтрока.Сотрудник;
	Запись.Дата = ТекСтрока.Дата;
	Запись.Удалить();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗапись(Команда)
	ТекСтрока = Элементы.СписокПоказателиЗП.ТекущиеДанные;
	УдалитьЗаписьНаСервере(ТекСтрока);
	Элементы.СписокПоказателиЗП.Обновить();
	РассчётОкладаиАванса();
КонецПроцедуры

&НаСервере
Процедура АвторИсполнительПриИзмененииНаСервере()
	Текст = "ВЫБРАТЬ
	        |	ДокументЗадача.Ссылка КАК Ссылка,
	        |	ДокументЗадача.ПометкаУдаления КАК ПометкаУдаления,
	        |	ДокументЗадача.Номер КАК Номер,
	        |	ДокументЗадача.Дата КАК Дата,
	        |	ДокументЗадача.Проведен КАК Проведен,
	        |	ДокументЗадача.Наименование КАК Наименование,
	        |	ДокументЗадача.Описание КАК Описание,
	        |	ДокументЗадача.Выполнено КАК Выполнено,
	        |	ДокументЗадача.Проект КАК Проект,
	        |	ДокументЗадача.Ответственный КАК Ответственный,
	        |	ДокументЗадача.Исполнитель КАК Исполнитель,
	        |	ДокументЗадача.Подразделение КАК Подразделение,
	        |	ДокументЗадача.ДатаНачалаПлан КАК ДатаНачалаПлан,
	        |	ДокументЗадача.ДатаОкончанияПлан КАК ДатаОкончанияПлан,
	        |	ДокументЗадача.ДатаОкончанияФакт КАК ДатаОкончанияФакт,
	        |	ДокументЗадача.ВремяВыполнения КАК ВремяВыполнения,
	        |	ДокументЗадача.Выполнение КАК Выполнение,
	        |	ДокументЗадача.Комментарий КАК Комментарий,
	        |	ДокументЗадача.Статус КАК Статус,
	        |	ДокументЗадача.МоментВремени КАК МоментВремени,
	        |	ЧекЛисты.Описание КАК Описание1,
	        |	ЧекЛисты.Выполнено КАК Выполнено1
	        |ИЗ
	        |	Документ.Задача КАК ДокументЗадача
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЧекЛисты КАК ЧекЛисты
	        |		ПО (ЧекЛисты.Задача = ДокументЗадача.Ссылка)
	        |			И (ЧекЛисты.Ответственный = ДокументЗадача.Исполнитель)
	        |ГДЕ
			|	 ДокументЗадача.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	Если АвторИсполнитель = "Автор" Тогда 
		Текст = Текст + Символы.ПС + " И ДокументЗадача.Ответственный = &Сотрудник";
	ИначеЕсли  АвторИсполнитель = "Исполнитель" Тогда
		Текст = Текст + Символы.ПС + "И ДокументЗадача.Исполнитель = &Сотрудник";
	КонецЕсли;
	СписокЗадач.ТекстЗапроса = Текст;
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("Сотрудник",Объект.Пользователь);
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ДатаНач",Период.ДатаНачала);
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ДатаКон",Период.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторИсполнительПриИзменении(Элемент)
	АвторИсполнительПриИзмененииНаСервере();
	Элементы.СписокЗадач.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдминистративный(Команда)
	ПараметрыОткрытия = Новый структура;
	ПараметрыОткрытия.Вставить("Сотрудник",Объект.Ссылка);
	Форма = ПолучитьФорму("Документ.Административный.Форма.ФормаДокумента",ПараметрыОткрытия);
	Форма.открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтпуск(Команда)
		ПараметрыОткрытия = Новый структура;
	ПараметрыОткрытия.Вставить("Сотрудник",Объект.Ссылка);
	Форма = ПолучитьФорму("Документ.Отпускные.Форма.ФормаДокумента",ПараметрыОткрытия);
	Форма.открыть();

КонецПроцедуры



Процедура РассчётАдминов()
Запрос = Новый запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	СУММА(Административный.ЧасыОтсутствия) КАК ЧасыОтсутствия
|ИЗ
|	Документ.Административный КАК Административный
|ГДЕ
|	Административный.Сотрудник = &Сотрудник";
Запрос.УстановитьПараметр("Сотрудник", объект.Ссылка);

Выборка = Запрос.Выполнить().Выбрать();
Выборка.Следующий();
ОбщееВремяАдминистративных = Выборка.ЧасыОтсутствия;
КонецПроцедуры

Процедура РассчётОтпусков()
Запрос = Новый запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	СУММА(Отпускные.ДниОтсутствия) КАК ДниОтсутствия
|ИЗ
|	Документ.Отпускные КАК Отпускные
|ГДЕ
|	Отпускные.Сотрудник = &Сотрудник";
Запрос.УстановитьПараметр("Сотрудник", объект.Ссылка);

Выборка = Запрос.Выполнить().Выбрать();
Выборка.Следующий();
ОбщееКоличествоОтпусков = Выборка.ДниОтсутствия;
КонецПроцедуры


&НаКлиенте
Процедура СписокАдминистративныхПриАктивизацииСтроки(Элемент)
	РассчётАдминов();
КонецПроцедуры

&НаКлиенте
Процедура СписокОтпусковПриАктивизацииСтроки(Элемент)
	РассчётОтпусков();
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеРегистраСведенийПомощникиМенеджеров(Помощник)

	///+ГомзМА 23.06.2023
	ЗаписьВРегистреСведений = РегистрыСведений.ПомощникиМенеджеров.СоздатьМенеджерЗаписи();
	ЗаписьВРегистреСведений.Помощник = Помощник;
	ЗаписьВРегистреСведений.Удалить();
	///-ГомзМА 23.06.2023

КонецПроцедуры


#КонецОбласти


&НаКлиенте
Процедура СсылкаНаФотоНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь; 
	Режим = РежимДиалогаВыбораФайла.Открытие; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.ПолноеИмяФайла = ""; 
	Фильтр = "Файл Jpg (*.jpg)|*.jpg"; 
	ДиалогОткрытия.Фильтр = Фильтр; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Выберете файл для загрузки"; 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗагрузкиФайла",ЭтаФорма); 
	ДиалогОткрытия.Показать(ОписаниеОповещения);	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗагрузкиФайла(ВыбранныйФайл,ДопПараметр) Экспорт 
	Если ВыбранныйФайл = Неопределено Тогда 
		Возврат; 
	КонецЕсли; 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПомещенияФайла", ЭтаФорма); 
	НачатьПомещениеФайла(ОписаниеОповещения,, ВыбранныйФайл[0], Ложь, УникальныйИдентификатор); 
КонецПроцедуры

&НаКлиенте 
Процедура ПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла,ДопПараметры) Экспорт 
	Если Не Результат Тогда 
		Возврат; 
	КонецЕсли; 
	СсылкаНаФото = Адрес; 
	Модифицированность = Истина; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбязанность(Команда)
		ОписаниеВыбора = Новый ОписаниеОповещения("ОбработатьВыборОбязанности",ЭтаФорма);
	//ОткрытьФорму("");
	ОткрытьФорму("Справочник.Обязанности.ФормаВыбора",,,,,,
ОписаниеВыбора,
РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//	Элементы.СписокЧек.Обновить();

КонецПроцедуры


&НаКлиенте

Процедура ОбработатьВыборОбязанности(РезультатЗакрытия,ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
ЗаписьКуратора(РезультатЗакрытия);
ОбновитьСписки();
КонецПроцедуры

Процедура ЗаписьКуратора(Результат)
	Отбор = Новый Структура();
	Отбор.Вставить("Сотрудник", Объект.Ссылка);
	ОбОбъект = Результат.ссылка.ПолучитьОбъект();
	НайденныеСтроки = ОбОбъект.Кураторы.НайтиСтроки(Отбор);
	Если  НайденныеСтроки.Количество() = 0 тогда
		НоваяСтрока = ОбОбъект.Кураторы.Добавить();
		НоваяСтрока.Сотрудник = Объект.Ссылка;
		ОбОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ДобавитьКвалификацю(Команда)
		ОписаниеВыбора = Новый ОписаниеОповещения("ОбработатьВыборКвалификации",ЭтаФорма);
	//ОткрытьФорму("");
	ОткрытьФорму("Справочник.Навыки.ФормаВыбора",,,,,,
ОписаниеВыбора,
РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//	Элементы.СписокЧек.Обновить();

КонецПроцедуры


&НаКлиенте

Процедура ОбработатьВыборКвалификации(РезультатЗакрытия,ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
ЗаписьКвалификации(РезультатЗакрытия);
ОбновитьСписки();
КонецПроцедуры

Процедура ЗаписьКвалификации(Результат)
	Отбор = Новый Структура();
	Отбор.Вставить("Сотрудник", Объект.Ссылка);
	ОбОбъект = Результат.ссылка.ПолучитьОбъект();
	НайденныеСтроки = ОбОбъект.Сотрудники.НайтиСтроки(Отбор);
	Если  НайденныеСтроки.Количество() = 0 тогда
		НоваяСтрока = ОбОбъект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = Объект.Ссылка;
		ОбОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьДолженЗнать(Команда)
		ОписаниеВыбора = Новый ОписаниеОповещения("ОбработатьВыборДолженЗнать",ЭтаФорма);
	//ОткрытьФорму("");
	ОткрытьФорму("Справочник.ДолженЗнать.ФормаВыбора",,,,,,
ОписаниеВыбора,
РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//	Элементы.СписокЧек.Обновить();

КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВыборДолженЗнать(РезультатЗакрытия,ДопПараметры) Экспорт
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
ЗаписьДолженЗнать(РезультатЗакрытия);
ОбновитьСписки();
КонецПроцедуры

Процедура ЗаписьДолженЗнать(Результат)
	Отбор = Новый Структура();
	Отбор.Вставить("Сотрудник", Объект.Ссылка);
	ОбОбъект = Результат.ссылка.ПолучитьОбъект();
	НайденныеСтроки = ОбОбъект.Сотрудники.НайтиСтроки(Отбор);
	Если  НайденныеСтроки.Количество() = 0 тогда
		НоваяСтрока = ОбОбъект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = Объект.Ссылка;
		ОбОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СсылкаНаЗадачу = Элементы.СписокЗадач.ТекущиеДанные.ссылка;
	
	парам = новый Структура;
	парам.вставить("Ключ",СсылкаНаЗадачу);
	ОткрытьФорму("Документ.Задача.Форма.ФормаДокумента",парам);
	
КонецПроцедуры




&НаКлиенте
Процедура ВыводНаПечатьОбязанностей(Команда)
	ТабДок = Печать(Объект.ссылка);
	
	// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ПечатьБез");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "Печать";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
	
КонецПроцедуры



Функция Печать(Ссылка,ВидМакета = 1)
	Табдок= Новый ТабличныйДокумент;
	Макет = Справочники.Сотрудники.ПолучитьМакет("Печать");
	//Если ВидМакета = 1 тогда
	//	Макет = Документы.ЧекЛист.ПолучитьМакет("Печать");
	//ИначеЕсли  ВидМакета = 2 тогда
	//	Макет = Документы.ЧекЛист.ПолучитьМакет("ПечатьАнкеты");
	//иначеЕсли ВидМакета = 3 тогда
	//	Макет = Документы.ЧекЛист.ПолучитьМакет("ПечатьБезРамок");
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Обязанности.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Обязанности КАК Обязанности
	|ГДЕ
	|	Обязанности.Кураторы.Сотрудник = &Сотрудник
	|	Или Обязанности.СписокДолжностей.Должность = &Должность";
	Запрос.Параметры.Вставить("Сотрудник", объект.Ссылка); 
	Запрос.Параметры.Вставить("Должность",ТекДолжностьСотрудника());
	//Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный);

	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСписокШапка = Макет.ПолучитьОбласть("СписокШапка");
	ОбластьСписок = Макет.ПолучитьОбласть("Список");
	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Очистить();
	
	ВставлятьРазделительСтраниц = Ложь;
	//Пока Выборка.Следующий() Цикл
		//		Выборка.Проверяющий = Выборка.ПроверяющийФамилия + " " + Лев(Выборка.ПроверяющийИмя,1) + "." + Лев(Выборка.ПроверяющийОтчество,1) + ".";
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		//ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		
		ТабДок.Вывести(ОбластьЗаголовок);
		
		Шапка.Параметры.Дата = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		Шапка.Параметры.Сотрудник = Объект.Фамилия + " " + Лев(Объект.Имя,1) + "." + Лев(Объект.Отчество,1) + ".";
		
		ТабДок.Вывести(Шапка);
		
		ТабДок.Вывести(ОбластьСписокШапка);
		НомерСтроки = 1;
		//ВыборкаЧекЛист = Выборка.ЧекЛист.Выбрать();
		Пока Выборка.Следующий() Цикл
			//		ВыборкаЧекЛист.Ответственный = ВыборкаЧекЛист.ОтветственныйФамилия + " " + Лев(ВыборкаЧекЛист.ОтветственныйИмя,1) + "." + Лев(ВыборкаЧекЛист.ОтветственныйОтчество,1) + ".";
			ОбластьСписок.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСписок.Параметры.наименование = Выборка.Наименование;
			ТабДок.Вывести(ОбластьСписок);
			НомерСтроки = НомерСтроки+1;
		КонецЦикла;
		ОбластьПодвал.Параметры.Сотрудник = Объект.Фамилия + " " + Лев(Объект.Имя,1) + "." + Лев(Объект.Отчество,1) + ".";
		ТабДок.Вывести(ОбластьПробел,);
		ТабДок.Вывести(ОбластьПодвал);
		ВставлятьРазделительСтраниц = Истина;
	//КонецЦикла;
	
	Возврат Табдок;
КонецФункции

&НаКлиенте
Процедура СписокКадровыхДвиженийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СсылкаДляОткрытия=Элементы.СписокКадровыхДвижений.ТекущиеДанные[СтрЗаменить(Поле.Имя,Элемент.имя,"")];
	ПараметрыФормы = Новый Структура("Ключ", СсылкаДляОткрытия);
	Если ТипЗнч(СсылкаДляОткрытия)=тип("ДокументСсылка.КадровыйПриказ") Тогда
		ИмяФормыДокумента="Документ.КадровыйПриказ.Форма.ФормаДокумента";
	ИначеЕсли ТипЗнч(СсылкаДляОткрытия)=тип("ДокументСсылка.УвольненияСотрудников") Тогда
		ИмяФормыДокумента="Документ.УвольненияСотрудников.Форма.ФормаДокумента";
	Иначе
		Возврат;
	КонецЕсли;
	ФормаДокумента = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	ФормаДокумента.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКадровыйПриказ(Команда)
	//ПараметрыОткрытия = Новый Структура;
	//ПараметрыОткрытия.Вставить("Сотрудник", объект.Ссылка);
	ФормаКП = ПолучитьФорму("Документ.КадровыйПриказ.Форма.ФормаДокумента");
	формаКП.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СписокОбязанностейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СсылкаДляОткрытия=Элементы.СписокОбязанностей.ТекущиеДанные[СтрЗаменить(Поле.Имя,Элемент.имя,"")];
	ПараметрыФормы = Новый Структура("Ключ", СсылкаДляОткрытия);
	Если ТипЗнч(СсылкаДляОткрытия)=тип("справочникСсылка.Обязанности") Тогда
		ИмяФормыДокумента="справочник.Обязанности.Форма.ФормаЭлемента";
	ИначеЕсли ТипЗнч(СсылкаДляОткрытия)=тип("справочникСсылка.ДолжностиПредприятия") Тогда
		ИмяФормыДокумента="справочник.ДолжностиПредприятия.Форма.ФормаЭлемента";
		Иначе
		Возврат;
	КонецЕсли;
	ФормаДокумента = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	ФормаДокумента.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Пользователь = Объект.Пользователь;
	Если ТекущаяСтраница = Элементы.ГруппаКлиенты Тогда
		СписокКлиенты.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		СписокКлиенты.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		ОбновитьПоказательСписка(Элементы.СписокКлиенты.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаKPI Тогда
		СписокKPI.Параметры.УстановитьЗначениеПараметра("Менеджер", Объект.Пользователь);
		СписокKPI.Параметры.УстановитьЗначениеПараметра("Период", НачалоГода(ТекущаяДата()));
		ОбновитьПоказательСписка(элементы.СписокKPI.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницаОбязанности Тогда
		СписокОбязанностей.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		СписокОбязанностей.Параметры.УстановитьЗначениеПараметра("Должность", ТекДолжностьСотрудника());
		ОбновитьПоказательСписка(Элементы.СписокОбязанностей.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.Навыки Тогда
		СписокКвалификаций.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		//СписокКвалификаций.Параметры.УстановитьЗначениеПараметра("Должность", ТекДолжностьСотрудника());
		ОбновитьПоказательСписка(Элементы.СписокКвалификаций.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаДоставки Тогда
		СписокДоставки.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		СписокДоставки.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокДоставки.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокДоставки.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаУчетТоваров Тогда
		СписокУчетТоваров.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		СписокУчетТоваров.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокУчетТоваров.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокУчетТоваров.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаВыплаты Тогда
		СписокВыплаты.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		СписокВыплаты.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокВыплаты.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокВыплаты.Имя);
	КонецЕсли;
	
	
	Если ТекущаяСтраница = Элементы.ГруппаПродажи Тогда
		СписокПродажи.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		СписокПродажи.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокПродажи.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокПродажи.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаПомощьВПродаже Тогда
		СписокПомощьВПродаже.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		СписокПомощьВПродаже.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокПомощьВПродаже.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокПомощьВПродаже.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаПеремещенияТоваров Тогда
		СписокПеремещенияТоваров.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		СписокПеремещенияТоваров.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокПеремещенияТоваров.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокПеремещенияТоваров.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаПриемкиТоваров Тогда
		СписокПриемкиТоваров.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		СписокПриемкиТоваров.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокПриемкиТоваров.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокПриемкиТоваров.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаУщербы Тогда
		СписокУщербы.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		СписокУщербы.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокУщербы.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокУщербы.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаУстановкиМестХранения Тогда		
		СписокУстановкиМестХранения.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		СписокУстановкиМестХранения.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокУстановкиМестХранения.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокУстановкиМестХранения.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаВыполненныеРаботы Тогда		
		СписокВыполненныеРаботы.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		СписокВыполненныеРаботы.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокВыполненныеРаботы.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокВыполненныеРаботы.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаСозданныеЗаказНаряды Тогда		
		СписокСозданныеЗаказНаряды.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		СписокСозданныеЗаказНаряды.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокСозданныеЗаказНаряды.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокСозданныеЗаказНаряды.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаТабель Тогда		
		СписокТабель.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		СписокТабель.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокТабель.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокТабель.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаПоказатели Тогда		
		СписокПоказатели.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		СписокПоказатели.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокПоказатели.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокПоказатели.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаМоиАдминистративные Тогда		
		СписокАдминистративных.Параметры.УстановитьЗначениеПараметра("ДатаНач",Период.ДатаНачала);
		СписокАдминистративных.Параметры.УстановитьЗначениеПараметра("ДатаКон",Период.ДатаОкончания);
		СписокАдминистративных.Параметры.УстановитьЗначениеПараметра("Сотрудник",Объект.Ссылка);
		ОбновитьПоказательСписка(Элементы.СписокАдминистративных.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаОтпуска Тогда		
		СписокОтпусков.Параметры.УстановитьЗначениеПараметра("ДатаНач",Период.ДатаНачала);
		СписокОтпусков.Параметры.УстановитьЗначениеПараметра("ДатаКон",Период.ДатаОкончания);
		СписокОтпусков.Параметры.УстановитьЗначениеПараметра("Сотрудник",Объект.Ссылка);
		ОбновитьПоказательСписка(Элементы.СписокОтпусков.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаМоиЗадачи Тогда		
		СписокЗадач.Параметры.УстановитьЗначениеПараметра("ДатаНач",Период.ДатаНачала);
		СписокЗадач.Параметры.УстановитьЗначениеПараметра("ДатаКон",Период.ДатаОкончания);
		Попытка
			СписокЗадач.Параметры.УстановитьЗначениеПараметра("Исполнитель", Пользователь);
		Исключение
		КонецПопытки;
		ОбновитьПоказательСписка(Элементы.СписокЗадач.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаТМЦ Тогда
		СписокТМЦ.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователь);
		ОбновитьПоказательСписка(Элементы.СписокТМЦ.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаЗарплата Тогда
		СписокПоказателиЗП.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		ОбновитьПоказательСписка(Элементы.СписокПоказателиЗП.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаДолженЗнать Тогда	
		СписокДолженЗнать.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		ОбновитьПоказательСписка(Элементы.СписокДолженЗнать.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.КадровыеПриказы Тогда
		СписокКадровыхДвижений.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		ОбновитьПоказательСписка(Элементы.СписокКадровыхДвижений.Имя);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаНадбавки Тогда
		СписокНадбавки.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);
		//СписокНадбавки.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
		СписокНадбавки.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
		ОбновитьПоказательСписка(Элементы.СписокНадбавки.Имя);
	КонецЕсли;
	
	//ОбновитьСписки();
КонецПроцедуры









