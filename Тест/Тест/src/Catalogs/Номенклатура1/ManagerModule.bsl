//#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//// СтандартныеПодсистемы.ВерсионированиеОбъектов

//// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
////
//// Параметры:
////  Настройки - Структура - настройки подсистемы.
//Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

//КонецПроцедуры

//// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

//Процедура ПроверитьЗначениеОпцииИспользоватьПериодичностьУслуг(ПериодичностьУслуг) Экспорт
//	
//	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПериодичностьУслуг")
//		И ЗначениеЗаполнено(ПериодичностьУслуг) Тогда
//	
//		УстановитьПривилегированныйРежим(Истина);
//		Константы.ИспользоватьПериодичностьУслуг.Установить(Истина);
//		УстановитьПривилегированныйРежим(Ложь);
//	
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция ЭтоМаркируемаяАлкогольнаяПродукция(Номенклатура) Экспорт
//	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС) 
//		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
//		
//		Возврат Ложь;
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
//	|ИЗ
//	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
//	|ГДЕ
//	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
//	|	И СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.ВидПродукции.Маркируемый";
//	
//	Возврат НЕ Запрос.Выполнить().Пустой();
//КонецФункции

//Функция ЭтоАлкогольнаяПродукция(Номенклатура) Экспорт
//	
//	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СведенияОбАлкогольнойПродукции) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура
//	|ИЗ
//	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
//	|ГДЕ
//	|	СведенияОбАлкогольнойПродукции.Номенклатура = &Номенклатура";
//	
//	Возврат НЕ Запрос.Выполнить().Пустой();
//	
//КонецФункции

//Процедура УстановитьАктуальноеЗначениеИсторииВидаСтавкиНДС(ВидСтавкиНДС, ИсторияВидаСтавкиНДС) Экспорт
//	
//	КоличествоЗаписей = ИсторияВидаСтавкиНДС.Количество();
//	
//	Если КоличествоЗаписей > 0 Тогда
//		
//		ИсторияВидаСтавкиНДС.Сортировать("Период");
//		АктуальнаяЗаписьИстории = ИсторияВидаСтавкиНДС[КоличествоЗаписей - 1];
//		АктуальнаяЗаписьИстории.ВидСтавкиНДС = ВидСтавкиНДС;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

//// Заполняет список команд печати.
//// 
//// Параметры:
////   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
////
//Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
//	
//	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьЭтикеток) Тогда
//		// Этикетка	
//		КомандаПечати = КомандыПечати.Добавить();
//		КомандаПечати.Идентификатор = "Ценники";
//		КомандаПечати.Представление = НСтр("ru = 'Этикетка'");
//		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Этикетка'");
//		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиЭтикеток";
//		КомандаПечати.СписокФорм    = "ФормаЭлемента";
//		КомандаПечати.Порядок       = 10;
//		
//		// Ценник
//		КомандаПечати = КомандыПечати.Добавить();
//		КомандаПечати.Идентификатор = "Ценники";
//		КомандаПечати.Представление = НСтр("ru = 'Ценник'");
//		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Ценник'");
//		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиЦенников";
//		КомандаПечати.СписокФорм    = "ФормаСписка, ФормаЭлемента";
//		КомандаПечати.Порядок       = 20;
//	КонецЕсли;
//	
//	// Спецификация	
//	КомандаПечати = КомандыПечати.Добавить();
//	КомандаПечати.Идентификатор = "Спецификация";
//	КомандаПечати.МенеджерПечати = "Обработка.ПечатьСпецификации";
//	КомандаПечати.Представление = НСтр("ru = 'Спецификация'");
//	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Спецификация сырья и материалов'");
//	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиСпецификации";
//	КомандаПечати.ФункциональныеОпции = "ВедетсяПроизводственнаяДеятельность,ИспользоватьКомплектациюНоменклатуры";
//	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаЭлемента";
//	КомандаПечати.Порядок       = 30;
//		
//КонецПроцедуры

//Функция СоответствиеИменВидовНоменклатуры()
//	
//	ТаблицаСоответствий = Новый ТаблицаЗначений;
//	ТаблицаСоответствий.Колонки.Добавить("Наименование" , ВариантыОтчетов.ОписаниеТиповСтрока(200));
//	ТаблицаСоответствий.Колонки.Добавить("Счет" , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Товары";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Материалы";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Спецодежда";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Инвентарь и хозяйственные принадлежности";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Товары на комиссии";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Оборудование (объекты основных средств)";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Оборудование к установке";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Полуфабрикаты";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.Полуфабрикаты;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Продукция";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Продукция из материалов заказчика";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Возвратная тара";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя;
//	
//	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
//	НоваяСтрока.Наименование 	= "Товары на ответственном хранении";
//	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение;
//	
//	Возврат ТаблицаСоответствий;
//	
//КонецФункции

//#Область ОбработчикиОбновления

//Процедура ЗаполнитьВидыНоменклатуры() Экспорт
//	
//	//Проверим необходимость обновления
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Номенклатура.Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)";
//	
//	Если Запрос.Выполнить().Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Запрос.УстановитьПараметр("СоответствиеИменВидовНоменклатуры", СоответствиеИменВидовНоменклатуры()); 
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	СоответствиеИменВидовНоменклатуры.Наименование,
//	|	СоответствиеИменВидовНоменклатуры.Счет
//	|ПОМЕСТИТЬ ВТСоответствиеИменВидовНоменклатуры
//	|ИЗ
//	|	&СоответствиеИменВидовНоменклатуры КАК СоответствиеИменВидовНоменклатуры
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	СчетаУчетаНоменклатуры.Номенклатура.Ссылка КАК НоменклатураСсылка,
//	|	СчетаУчетаНоменклатуры.Номенклатура.Наименование КАК НоменклатураНаименование,
//	|	СчетаУчетаНоменклатуры.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
//	|	ЕСТЬNULL(СчетаУчетаНоменклатуры.Номенклатура.ВидНоменклатуры.Услуга, НЕ ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Количественный, ЛОЖЬ)) КАК Услуга
//	|ПОМЕСТИТЬ ВТГруппыНоменклатуры
//	|ИЗ
//	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
//	|ГДЕ
//	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	Номенклатура.Ссылка,
//	|	Номенклатура.Наименование,
//	|	Номенклатура.ВидНоменклатуры,
//	|	ЕСТЬNULL(Номенклатура.ВидНоменклатуры.Услуга, ЛОЖЬ)
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.ЭтоГруппа
//	|	И Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЕСТЬNULL(ИменаВидовНоменклатуры.Наименование, ВЫБОР
//	|			КОГДА ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Количественный, ЛОЖЬ)
//	|				ТОГДА СчетаУчетаНоменклатуры.СчетУчета.Наименование
//	|			ИНАЧЕ ""Товары""
//	|		КОНЕЦ) КАК ИмяВидаНоменклатуры,
//	|	ВЫБОР
//	|		КОГДА НЕ ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Количественный, ИСТИНА)
//	|			ТОГДА СчетаУчетаНоменклатуры.СчетУчета.Наименование
//	|		ИНАЧЕ ""Услуги""
//	|	КОНЕЦ КАК ИмяВидаНоменклатурыУслуга,
//	|	НЕ ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Количественный, ИСТИНА) КАК Услуга
//	|ПОМЕСТИТЬ ВТГруппаПустыхЭлементов
//	|ИЗ
//	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеИменВидовНоменклатуры КАК ИменаВидовНоменклатуры
//	|		ПО СчетаУчетаНоменклатуры.СчетУчета = ИменаВидовНоменклатуры.Счет
//	|ГДЕ
//	|	СчетаУчетаНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	СчетаУчетаНоменклатуры.Организация,
//	|	СчетаУчетаНоменклатуры.Склад,
//	|	СчетаУчетаНоменклатуры.ТипСклада
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТГруппыНоменклатуры.НоменклатураСсылка,
//	|	ВТГруппыНоменклатуры.НоменклатураНаименование,
//	|	ВТГруппыНоменклатуры.НоменклатураНаименование КАК НоменклатураНаименованиеУслуга,
//	|	ВЫБОР
//	|		КОГДА ВТГруппыНоменклатуры.Услуга
//	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
//	|		ИНАЧЕ ВТГруппыНоменклатуры.ВидНоменклатуры
//	|	КОНЕЦ КАК ВидНоменклатуры,
//	|	ВЫБОР
//	|		КОГДА ВТГруппыНоменклатуры.Услуга
//	|			ТОГДА ВТГруппыНоменклатуры.ВидНоменклатуры
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
//	|	КОНЕЦ КАК ВидНоменклатурыУслуга,
//	|	ВТГруппыНоменклатуры.Услуга КАК Услуга
//	|ПОМЕСТИТЬ ВТВидыНоменклатуры
//	|ИЗ
//	|	ВТГруппыНоменклатуры КАК ВТГруппыНоменклатуры
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
//	|	ВТГруппаПустыхЭлементов.ИмяВидаНоменклатуры,
//	|	ВТГруппаПустыхЭлементов.ИмяВидаНоменклатурыУслуга,
//	|	ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка),
//	|	ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка),
//	|	ВТГруппаПустыхЭлементов.Услуга
//	|ИЗ
//	|	ВТГруппаПустыхЭлементов КАК ВТГруппаПустыхЭлементов
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТВидыНоменклатуры.НоменклатураСсылка КАК НоменклатураСсылка,
//	|	МАКСИМУМ(ВТВидыНоменклатуры.НоменклатураНаименование) КАК НоменклатураНаименование,
//	|	МАКСИМУМ(ВТВидыНоменклатуры.НоменклатураНаименованиеУслуга) КАК НоменклатураНаименованиеУслуга,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА ВТВидыНоменклатуры.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
//	|					И НЕ ВидыНоменклатуры.Ссылка ЕСТЬ NULL 
//	|				ТОГДА ВидыНоменклатуры.Ссылка
//	|			ИНАЧЕ ВТВидыНоменклатуры.ВидНоменклатуры
//	|		КОНЕЦ) КАК ВидНоменклатуры,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА ВТВидыНоменклатуры.ВидНоменклатурыУслуга = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
//	|					И НЕ ВидыНоменклатурыУслуга.Ссылка ЕСТЬ NULL 
//	|				ТОГДА ВидыНоменклатурыУслуга.Ссылка
//	|			ИНАЧЕ ВТВидыНоменклатуры.ВидНоменклатурыУслуга
//	|		КОНЕЦ) КАК ВидНоменклатурыУслуга,
//	|	МИНИМУМ(ВТВидыНоменклатуры.Услуга) КАК Услуга
//	|ИЗ
//	|	ВТВидыНоменклатуры КАК ВТВидыНоменклатуры
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
//	|		ПО ВТВидыНоменклатуры.НоменклатураНаименование = ВидыНоменклатуры.Наименование
//	|			И (НЕ ВидыНоменклатуры.Услуга)
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатурыУслуга
//	|		ПО ВТВидыНоменклатуры.НоменклатураНаименованиеУслуга = ВидыНоменклатурыУслуга.Наименование
//	|			И (ВидыНоменклатурыУслуга.Услуга)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТВидыНоменклатуры.НоменклатураСсылка
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	НоменклатураСсылка";
//	
//	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
//	ТаблицаРезультата.Индексы.Добавить("НоменклатураСсылка");
//	ТаблицаРезультата.Индексы.Добавить("ВидНоменклатуры");
//	ТаблицаРезультата.Индексы.Добавить("ВидНоменклатурыУслуга");
//	
//	Если ТаблицаРезультата.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СтрокаТаблицыПоУмолчанию = ТаблицаРезультата[0];
//	ПовторноеВыполнение = Ложь;
//	
//	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыПоУмолчанию.ВидНоменклатуры) Тогда
//		ЭлементСправочника = Справочники.ВидыНоменклатуры.СоздатьЭлемент();				
//		ЭлементСправочника.Наименование = СтрокаТаблицыПоУмолчанию.НоменклатураНаименование;
//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементСправочника);
//		СтрокаТаблицыПоУмолчанию.ВидНоменклатуры = ЭлементСправочника.Ссылка;
//	КонецЕсли;
//	
//	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыПоУмолчанию.ВидНоменклатурыУслуга) Тогда
//		ЭлементСправочника = Справочники.ВидыНоменклатуры.СоздатьЭлемент();				
//		ЭлементСправочника.Наименование = СтрокаТаблицыПоУмолчанию.НоменклатураНаименованиеУслуга;
//		ЭлементСправочника.Услуга = Истина;
//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементСправочника);
//		СтрокаТаблицыПоУмолчанию.ВидНоменклатурыУслуга = ЭлементСправочника.Ссылка;
//	КонецЕсли;
//	
//	Для НомерСтроки = 1 По ТаблицаРезультата.Количество()-1 Цикл
//		СтрокаРезультата = ТаблицаРезультата[НомерСтроки];
//		Если ЗначениеЗаполнено(СтрокаРезультата.ВидНоменклатуры) ИЛИ 
//			ЗначениеЗаполнено(СтрокаРезультата.ВидНоменклатурыУслуга) Тогда
//			//Вид номенклатуры уже создан и используется для товаров
//			ПовторноеВыполнение = Истина;
//		КонецЕсли;
//		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ВидНоменклатуры) Тогда
//			Если СтрокаРезультата.Услуга 
//				ИЛИ СтрокаТаблицыПоУмолчанию.НоменклатураНаименование = СтрокаРезультата.НоменклатураНаименование Тогда
//				СтрокаРезультата.ВидНоменклатуры = СтрокаТаблицыПоУмолчанию.ВидНоменклатуры;
//			Иначе
//				ЭлементСправочника = Справочники.ВидыНоменклатуры.СоздатьЭлемент();				
//				ЭлементСправочника.Наименование = СтрокаРезультата.НоменклатураНаименование;
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементСправочника);
//				СтрокаРезультата.ВидНоменклатуры = ЭлементСправочника.Ссылка;
//			КонецЕсли;
//		КонецЕсли;	
//		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ВидНоменклатурыУслуга) Тогда
//			Если (НЕ СтрокаРезультата.Услуга) 
//				ИЛИ СтрокаТаблицыПоУмолчанию.НоменклатураНаименованиеУслуга = СтрокаРезультата.НоменклатураНаименованиеУслуга Тогда
//				СтрокаРезультата.ВидНоменклатурыУслуга = СтрокаТаблицыПоУмолчанию.ВидНоменклатурыУслуга;
//			Иначе
//				ЭлементСправочника = Справочники.ВидыНоменклатуры.СоздатьЭлемент();				
//				ЭлементСправочника.Наименование = СтрокаРезультата.НоменклатураНаименованиеУслуга;
//				ЭлементСправочника.Услуга = Истина;
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементСправочника);
//				СтрокаРезультата.ВидНоменклатурыУслуга = ЭлементСправочника.Ссылка;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	ВыборкаНоменклатуры = Справочники.Номенклатура.ВыбратьИерархически();
//	
//	ТекущееПравило	= СтрокаТаблицыПоУмолчанию;
//	ТекущийУровень 	= -1;
//	
//	Пока ВыборкаНоменклатуры.Следующий() Цикл
//		Если ЗначениеЗаполнено(ВыборкаНоменклатуры.ВидНоменклатуры) Тогда
//			Продолжить;
//		КонецЕсли;
//		Если ВыборкаНоменклатуры.ЭтоГруппа Тогда
//			//Если это группа, проверим, есть ли для нее правило.
//			//Если своего правила нет, действует правило вышестоящей группы
//			ПравилоДляГруппы = ТаблицаРезультата.Найти(ВыборкаНоменклатуры.Ссылка, "НоменклатураСсылка");
//			Если ПравилоДляГруппы = Неопределено Тогда
//				//Проверим, что действующее правило определено для группы более высокого уровня
//				//При повторной обработке часть элементов могут быть пропущены, поэтому доверять можно только правилу владельца
//				Если (НЕ ВыборкаНоменклатуры.УровеньВВыборке() > ТекущийУровень)
//					ИЛИ ПовторноеВыполнение 
//					ИЛИ (НЕ ЗначениеЗаполнено(ТекущееПравило)) Тогда
//					Если ЗначениеЗаполнено(ВыборкаНоменклатуры.Родитель) Тогда
//						ТекущийВид 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаНоменклатуры.Родитель, "ВидНоменклатуры");
//						ТекущийУровень 	= ВыборкаНоменклатуры.УровеньВВыборке()-1;
//						ТекущееПравило	= ТаблицаРезультата.Найти(ТекущийВид, "ВидНоменклатуры, ВидНоменклатурыУслуга");
//					Иначе
//						ТекущийУровень 	= -1;
//						ТекущееПравило	= СтрокаТаблицыПоУмолчанию;
//					КонецЕсли;
//				КонецЕсли;
//			Иначе
//				ТекущийУровень 	= ВыборкаНоменклатуры.УровеньВВыборке();
//				ТекущееПравило 	= ПравилоДляГруппы;
//			КонецЕсли;
//		Иначе //Проверим соотвествие признака "Услуга" в номенклатуре и виде номенклатуры
//			
//			//Проверим, что действующее правило определено для группы более высокого уровня
//			//При повторной обработке часть элементов могут быть пропущены, поэтому доверять можно только правилу владельца
//			Если (НЕ ВыборкаНоменклатуры.УровеньВВыборке() > ТекущийУровень)
//				ИЛИ ПовторноеВыполнение 
//				ИЛИ (НЕ ЗначениеЗаполнено(ТекущееПравило)) Тогда
//				Если ЗначениеЗаполнено(ВыборкаНоменклатуры.Родитель) Тогда
//					ТекущийВид 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаНоменклатуры.Родитель, "ВидНоменклатуры");
//					ТекущийУровень 	= ВыборкаНоменклатуры.УровеньВВыборке()-1;
//					ТекущееПравило	= ТаблицаРезультата.Найти(ТекущийВид, "ВидНоменклатуры, ВидНоменклатурыУслуга");					
//				Иначе
//					ТекущийУровень 	= -1;
//					ТекущееПравило	= СтрокаТаблицыПоУмолчанию;
//				КонецЕсли;										
//			КонецЕсли;
//				
//		КонецЕсли;
//		
//		Если НЕ ЗначениеЗаполнено(ТекущееПравило) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		//Обработаем элемент номенклатуры
//		ЭлементНоменклатуры = ВыборкаНоменклатуры.ПолучитьОбъект();
//		Если ВыборкаНоменклатуры.ЭтоГруппа Тогда
//			ЭлементНоменклатуры.ВидНоменклатуры = ?(ТекущееПравило.Услуга, ТекущееПравило.ВидНоменклатурыУслуга, ТекущееПравило.ВидНоменклатуры);
//		Иначе
//			ЭлементНоменклатуры.ВидНоменклатуры = ?(ВыборкаНоменклатуры.Услуга, ТекущееПравило.ВидНоменклатурыУслуга, ТекущееПравило.ВидНоменклатуры);
//		КонецЕсли;
//		
//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементНоменклатуры, Истина);
//				
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ЗаполнитьВидыСтавокНДС() Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Номенклатура.Ссылка КАК Ссылка,
//	|	Номенклатура.УдалитьСтавкаНДС КАК СтавкаНДС
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|ГДЕ
//	|	Номенклатура.ВидСтавкиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.ПустаяСсылка)
//	|	И Номенклатура.УдалитьСтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
//	|	И НЕ Номенклатура.ЭтоГруппа";
//	
//	Результат = Запрос.Выполнить();
//	
//	Если Результат.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Выборка = Результат.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		НоменклатураОбъект = Выборка.Ссылка.ПолучитьОбъект();
//		НоменклатураОбъект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(Выборка.СтавкаНДС);
//		
//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоменклатураОбъект, Ложь);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ЗаполнитьПризнакПрослеживаемостиПриПереходеС20() Экспорт
//	
//	// Устанавливаем признак в номенклатуре для позиций, указанных в проведенных ПТУ и РТУ с заполненным РНПТ.
//	Запрос = Новый запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура
//	|ПОМЕСТИТЬ НоменклатураКОбработке
//	|ИЗ
//	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
//	|ГДЕ
//	|	ПоступлениеТоваровУслугТовары.УдалитьРНПТ <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
//	|	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ПоступлениеТоваровУслугОборудование.Номенклатура
//	|ИЗ
//	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
//	|ГДЕ
//	|	ПоступлениеТоваровУслугОборудование.Ссылка.Проведен
//	|	И ПоступлениеТоваровУслугОборудование.УдалитьРНПТ <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	РеализацияТоваровУслугТовары.Номенклатура
//	|ИЗ
//	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
//	|ГДЕ
//	|	РеализацияТоваровУслугТовары.Ссылка.Проведен
//	|	И РеализацияТоваровУслугТовары.УдалитьРНПТ <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	НоменклатураКОбработке.Номенклатура КАК Ссылка
//	|ИЗ
//	|	НоменклатураКОбработке КАК НоменклатураКОбработке
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
//	|		ПО НоменклатураКОбработке.Номенклатура = НоменклатураСправочник.Ссылка
//	|ГДЕ
//	|	НоменклатураСправочник.ПрослеживаемыйТовар = ЛОЖЬ";
//	
//	Результат = Запрос.Выполнить();
//	
//	Если Результат.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Если есть прослеживаемые товары, то установим константу "ВестиУчетПрослеживаемыхТоваров".
//	Если НЕ Константы.ВестиУчетПрослеживаемыхТоваров.Получить() Тогда
//		Константы.ВестиУчетПрослеживаемыхТоваров.Установить(Истина);
//	КонецЕсли;
//	
//	Выборка = Результат.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		НоменклатураОбъект = Выборка.Ссылка.ПолучитьОбъект();
//		НоменклатураОбъект.ПрослеживаемыйТовар = Истина;
//		
//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоменклатураОбъект, Ложь);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ПрограмныйИнтерфейс

//// Получает ставку НДС по номенклатуре
////
//// Параметры:
////       Номенклатура - Справочник.Номенклатура - ставку НДС которой необходимо получить
////       Период - Дата - дата получения Ставки НДС.
//// Возвращаемое значение:
////       СтавкаНДС - Перечисление.СтавкаНДС - Ставка НДС
//Функция СтавкаНДС(Номенклатура, Период = Неопределено) Экспорт
//	
//	Если Не ЗначениеЗаполнено(Период) Тогда
//		Период = ТекущаяДата();
//	КонецЕсли;
//	
//	ВидСтавкиНДС = ВидСтавкиНДСНаДату(Номенклатура, Период);
//	СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, Период);

//	Возврат СтавкаНДС;
//	
//КонецФункции

//// Получает вид ставки НДС по номенклатуре и периоду
////
//// Параметры:
////      Номенклатура - Справочник.Номенклатура - вид ставки НДС которой необходимо получить
////      ДатаСведений - Дата - дата получения вида ставки НДС.
//// Возвращаемое значение:
////      ВидСтавкиНДС - Перечисление.ВидыСтавокНДС
//Функция ВидСтавкиНДСНаДату(Номенклатура, ДатаСведений) Экспорт
//	
//	Если Не ЗначениеЗаполнено(Номенклатура)
//		Или ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
//		Возврат Перечисления.ВидыСтавокНДС.ПустаяСсылка();
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ДатаСведений) Тогда
//		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидСтавкиНДС");
//	КонецЕсли;
//	
//	СписокНоменклатуры = Новый Массив();
//	СписокНоменклатуры.Добавить(Номенклатура);
//	
//	СоответствиеСведенийОВидахСтавкиНоменклатуры = ВидыСтавокНаДатуИзИстории(СписокНоменклатуры, ДатаСведений);
//	СведенияОВидеСтавкиНДСИзИстории = СоответствиеСведенийОВидахСтавкиНоменклатуры.Получить(Номенклатура);
//	
//	Если СведенияОВидеСтавкиНДСИзИстории = Неопределено Тогда
//		ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидСтавкиНДС");
//	Иначе
//		ВидСтавкиНДС = СведенияОВидеСтавкиНДСИзИстории;
//	КонецЕсли;
//	
//	Возврат ВидСтавкиНДС;
//	
//КонецФункции

//// Получает виды ставок НДС из истории для массива номенклатуры на заданную дату
//// Параметры:
////      СписокНоменклатуры - Массив - ссылки на объекты вида Справочник.Номенклатура.
////                    Если массив пуст, то результатом будет пустое соответствие.
////      ДатаСведений - Дата - дата получения вида ставки НДС.
//// Возвращаемое значение:
////  Соответствие - список объектов Справочник.Номенклатура и значений видов ставок:
////   * Ключ - Справочник.Номенклатура - ссылка на объект;
////   * Значение - ПеречислениеСсылка.ВидыСтавокНДС - вид ставки НДС на дату сведений.
//// Для номенклатуры с пустой историей вида ставки НДС ключ будет отсутствовать.
//// 
//Функция ВидыСтавокНаДатуИзИстории(СписокНоменклатуры, ДатаСведений) Экспорт

//	ЗначенияРеквизитов = Новый Соответствие;
//	
//	Если Не ЗначениеЗаполнено(ДатаСведений) Тогда
//		Возврат ЗначенияРеквизитов;
//	КонецЕсли;
//	
//	Если СписокНоменклатуры.Количество() = 0 Тогда
//		Возврат ЗначенияРеквизитов;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос();
//	Запрос.Параметры.Вставить("Номенклатура", СписокНоменклатуры);
//	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	МАКСИМУМ(ИсторияВидаСтавкиНДС.Период) КАК Период,
//	|	ИсторияВидаСтавкиНДС.Ссылка КАК Ссылка
//	|ПОМЕСТИТЬ ЗначенияВидаСтавкиНДС
//	|ИЗ
//	|	Справочник.Номенклатура.ИсторияВидаСтавкиНДС КАК ИсторияВидаСтавкиНДС
//	|ГДЕ
//	|	ИсторияВидаСтавкиНДС.Ссылка В (&Номенклатура)
//	|	И ИсторияВидаСтавкиНДС.Период <= &ДатаСведений
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ИсторияВидаСтавкиНДС.Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ИсторияВидаСтавкиНДС.Ссылка КАК Номенклатура,
//	|	ИсторияВидаСтавкиНДС.ВидСтавкиНДС КАК ВидСтавкиНДС
//	|ИЗ
//	|	ЗначенияВидаСтавкиНДС КАК ЗначенияВидаСтавкиНДС
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ИсторияВидаСтавкиНДС КАК ИсторияВидаСтавкиНДС
//	|		ПО ЗначенияВидаСтавкиНДС.Ссылка = ИсторияВидаСтавкиНДС.Ссылка
//	|			И ЗначенияВидаСтавкиНДС.Период = ИсторияВидаСтавкиНДС.Период";

//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		ЗначенияРеквизитов[Выборка.Номенклатура] = Выборка.ВидСтавкиНДС;
//	КонецЦикла;
//	
//	Возврат ЗначенияРеквизитов;

//КонецФункции

//// Определяет есть ли в истории видов ставок НДС значение вида ставки "Без НДС"
////
//// Параметры:
////      Номенклатура - Справочник.Номенклатура - номенклатура, историю видов ставок которой необходимо проверить
//// Возвращаемое значение:
////      Булево - Истина, если в истории видов ставок НДС значение вида ставки "Без НДС", Ложь - если нет.
//Функция ВИсторииЕстьСтавкаБезНДС(Номенклатура) Экспорт
//	
//	Запрос = Новый Запрос();
//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	НоменклатураИсторияВидаСтавкиНДС.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура.ИсторияВидаСтавкиНДС КАК НоменклатураИсторияВидаСтавкиНДС
//	|ГДЕ
//	|	НоменклатураИсторияВидаСтавкиНДС.Ссылка = &Номенклатура
//	|	И НоменклатураИсторияВидаСтавкиНДС.ВидСтавкиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.БезНДС)";
//	
//	Результат = Запрос.Выполнить();
//	
//	Возврат Не Результат.Пустой();
//	
//КонецФункции

//// Определяет есть ли записи в истории видов ставок НДС
////
//// Параметры:
////      Номенклатура - Справочник.Номенклатура - номенклатура, историю видов ставок которой необходимо проверить
//// Возвращаемое значение:
////      Булево - Истина, если в истории видов ставок НДС есть записи, Ложь - если нет.
//Функция ЕстьИсторияВидовСтавокНДС(Номенклатура) Экспорт
//	
//	Запрос = Новый Запрос();
//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	НоменклатураИсторияВидаСтавкиНДС.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.Номенклатура.ИсторияВидаСтавкиНДС КАК НоменклатураИсторияВидаСтавкиНДС
//	|ГДЕ
//	|	НоменклатураИсторияВидаСтавкиНДС.Ссылка = &Номенклатура";
//	
//	Результат = Запрос.Выполнить();
//	
//	Возврат Не Результат.Пустой();
//	
//КонецФункции

//// Сопоставляет содержмое загружаемого файла с элементами справочника "Номенклатура".
//// Переопределяет процедуру СопоставитьЗагружаемыеДанные модуля менеджера обработки ЗагрузкаДанныхВТабличнуюЧасть.
//// Вызывается только в прикладной загрузке (см. ЗагрузкаДанныхИзВнешнихФайловКлиент.НовыйПараметрыЗагрузкиВТабЧасть).
////
//// Параметры:
////  ЗагружаемыеДанные - ТаблицаЗначений - содержит колонки:
////	- СтрокаИзФайла - Строка.
////	- СсылкаНайденая - СправочникСсылка.Номенклатура - сюда помещаются ссылки на найденные элементы.
////  ИмяРеквизитаДляСопоставления - Строка - имя реквизита справочника "Номенклатура".
////  ПараметрыПрикладнойЗагрузки - см. ЗагрузкаДанныхИзВнешнихФайловКлиент.НовыйПараметрыПрикладнойЗагрузки.
////
//Процедура СопоставитьЗагружаемыеДанныеИзФайла(ЗагружаемыеДанные, ИмяРеквизитаДляСопоставления, ПараметрыПрикладнойЗагрузки) Экспорт
//	
//	СтрокиИзФайла = ЗагружаемыеДанные.Скопировать(, "СтрокаИзФайла");
//	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(СтрокиИзФайла); 
//	
//	СхемаЗапроса = Новый СхемаЗапроса();
//	СхемаЗапроса.УстановитьТекстЗапроса(
//	"ВЫБРАТЬ
//	|	СтрокиИзФайла.СтрокаИзФайла КАК СтрокаИзФайла,
//	|	СтрокиИзФайла.НомерСтроки КАК НомерСтроки
//	|ПОМЕСТИТЬ ИсходныеДанные
//	|ИЗ
//	|	&СтрокиИзФайла КАК СтрокиИзФайла
//	|ГДЕ
//	|	СтрокиИзФайла.СтрокаИзФайла <> """"
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ИсходныеДанные.СтрокаИзФайла КАК СтрокаИзФайла,
//	|	ИсходныеДанные.НомерСтроки КАК НомерСтроки,
//	|	НоменклатураДляПоиска.Ссылка КАК СсылкаНайденая
//	|ИЗ
//	|	ИсходныеДанные КАК ИсходныеДанные
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураДляПоиска
//	|		ПО ИсходныеДанные.СтрокаИзФайла = НоменклатураДляПоиска.Наименование
//	|ГДЕ
//	|	(НЕ НоменклатураДляПоиска.ЭтоГруппа)
//	|	И (НЕ НоменклатураДляПоиска.ПометкаУдаления)
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	НомерСтроки");
//	
//	УсловиеСопоставления = СтрШаблон("ИсходныеДанные.СтрокаИзФайла = НоменклатураДляПоиска.%1", ИмяРеквизитаДляСопоставления);
//	СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Источники[0].Соединения[0].Условие = Новый ВыражениеСхемыЗапроса(УсловиеСопоставления);
//	
//	Запрос = Новый Запрос();
//	Запрос.УстановитьПараметр("СтрокиИзФайла", СтрокиИзФайла);
//	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
//		ЗагружаемыеДанные[Выборка.НомерСтроки - 1].СсылкаНайденая = Выборка.СсылкаНайденая;
//	КонецЦикла;
//	
//КонецПроцедуры

//// Получает актуальные остатки номенклатуры на складах
////
//// Параметры:
////      Номенклатура - СправочникСсылка.Номенклатура - номенклатура, остатки которой необходимо получить
////      ИспользуютсяНесколькоСкладов - Булево - признак того, что учет ведется по нескольким складам
//// Возвращаемое значение:                        
////      Структура - данные по остаткам на складах
////          * ОбщийОстаток     - Число
////          * ОстаткиПоСкладам - ТаблицаЗначений:
////                        ** Склад            - СправочникСсылка.Склады - склад, по которому получен остаток
////                        ** Количество       - Число - остаток номенклатуры.
////                        ** ЕдиницаИзмерения - Строка - представление единицы измерения.
////
//Функция ДанныеПоОстаткам(Номенклатура, ИспользуютсяНесколькоСкладов) Экспорт
//	
//	Результат = Новый Структура;
//	Результат.Вставить("ОбщийОстаток", 0);
//	
//	ОстаткиПоСкладам = Новый ТаблицаЗначений;
//	ОстаткиПоСкладам.Колонки.Добавить("Склад");
//	ОстаткиПоСкладам.Колонки.Добавить("Количество");
//	ОстаткиПоСкладам.Колонки.Добавить("ЕдиницаИзмерения");
//	
//	Результат.Вставить("ОстаткиПоСкладам", ОстаткиПоСкладам);
//	
//	Запрос = Новый Запрос;
//	
//	Текст = 
//	"ВЫБРАТЬ
//	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
//	|	ВЫБОР
//	|		КОГДА &Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяССылка)
//	|			ТОГДА &Склад
//	|		ИНАЧЕ &НеУказанСклад
//	|	КОНЕЦ КАК Склад,
//	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
//	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Номенклатура).ЕдиницаИзмерения) КАК ЕдиницаИзмерения
//	|ИЗ
//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет В (&СчетаУчетаТоваров), &ВидыСубконто, Субконто1 = &Номенклатура) КАК ХозрасчетныйОстатки
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	ХозрасчетныйОстатки.Субконто1,
//	|	&НеУказанСклад,
//	|	ХозрасчетныйОстатки.КоличествоОстаток,
//	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Номенклатура).ЕдиницаИзмерения)
//	|ИЗ
//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет В (&СчетаУчетаТоваровБезСкладов), &ВидыСубконтоНоменклатура, Субконто1 = &Номенклатура) КАК ХозрасчетныйОстатки
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Количество УБЫВ
//	|ИТОГИ
//	|	СУММА(Количество)
//	|ПО
//	|	Номенклатура";
//	
//	ВидыСубконтоНоменклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
//		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
//		
//	Запрос.УстановитьПараметр("ВидыСубконтоНоменклатура", ВидыСубконтоНоменклатура);
//	
//	ВидыСубконто = Новый Массив;
//	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
//	Если ИспользуютсяНесколькоСкладов Тогда
//		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
//		Текст = СтрЗаменить(Текст, "&Склад", "ХозрасчетныйОстатки.Субконто2");
//	Иначе
//		Текст = СтрЗаменить(Текст, "&Склад", НСтр("ru='""<Склад не указан>""'"));
//	КонецЕсли;
//	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
//	
//	СчетаУчетаТоваров = БухгалтерскиеОтчеты.СчетаУчетаТоваров();
//	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);
//	Запрос.УстановитьПараметр("СчетаУчетаТоваровБезСкладов", СчетаУчетаТоваровБезСкладов(СчетаУчетаТоваров));
//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
//	Запрос.УстановитьПараметр("НеУказанСклад", НСтр("ru='<Склад не указан>'"));
//	
//	Запрос.Текст = Текст;
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока ВыборкаНоменклатура.Следующий() Цикл
//		
//		Результат.ОбщийОстаток = ВыборкаНоменклатура.Количество;
//		
//		Если Не ИспользуютсяНесколькоСкладов Тогда
//			Прервать;
//		КонецЕсли;
//		
//		Выборка = ВыборкаНоменклатура.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			ЗаполнитьЗначенияСвойств(ОстаткиПоСкладам.Добавить(), Выборка);
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция СчетаУчетаТоваровБезСкладов(СчетаУчетаТоваров)

//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
//	|ПОМЕСТИТЬ ВидыСубконто
//	|ИЗ
//	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
//	|ГДЕ
//	|	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаУчетаТоваров)
//	|	И ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоСклады
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	Хозрасчетный.Ссылка КАК Счет
//	|ИЗ
//	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
//	|ГДЕ
//	|	НЕ Хозрасчетный.Ссылка В
//	|				(ВЫБРАТЬ
//	|					ВидыСубконто.Счет КАК Счет
//	|				ИЗ
//	|					ВидыСубконто КАК ВидыСубконто)
//	|	И Хозрасчетный.Ссылка В(&СчетаУчетаТоваров)";
//	
//	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);
//	Запрос.УстановитьПараметр("ВидСубконтоСклады", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
//	
//	Результат = Запрос.Выполнить();
//	
//	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
//	
//КонецФункции

//#КонецОбласти

//#КонецЕсли

