
&НаКлиенте
Процедура НачатьРаспродажу(Команда)
	НачатьРаспродажуНаСервере();
КонецПроцедуры


&НаСервере
Функция ПолучениеПоследнейЦены(Дата)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	дт_ЦеныНоменклатурыСрезПоследних.Цена КАК ПоследняяЦена
		|ИЗ
		|	РегистрСведений.дт_ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК
		|		дт_ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
		ЦенаДоИзменения = Выборка.ПоследняяЦена;
		
		Возврат ЦенаДоИзменения;
КонецФункции


&НаСервере
Процедура НачатьРаспродажуНаСервере()
	
	Объект.ЦенаДоРаспродажи = ПолучениеПоследнейЦены(ТекущаяДата());
	 
	Если Объект.РекомендованаяЦена >= Объект.ЦенаДоРаспродажи  ИЛИ Объект.РекомендованаяЦена = 0 Тогда
		Сообщить("Новая цена больше предыдущей");
		Объект.РекомендованаяЦена = Объект.ЦенаДоРаспродажи;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияРаспродажи) Тогда
		Сообщить("Дата окончания распродажи не заполонена.");
		Объект.РекомендованаяЦена = Объект.ЦенаДоРаспродажи;
		Возврат;
	ИначеЕсли Объект.ДатаОкончанияРаспродажи <= ТекущаяДата()  Тогда 
		Сообщить("Дата окончания распродажи меньше или равна текущей.");
		Объект.РекомендованаяЦена = Объект.ЦенаДоРаспродажи;
		Возврат;
	КонецЕсли;
	Объект.БылаОтменаРаспродажи = Ложь;	
	
	
	Объект.Распродажа = Истина;
	Сообщить("Распродажа до " + Объект.ДатаОкончанияРаспродажи);
	
	Элементы.НачатьРаспродажу.Доступность = Ложь;
	Элементы.РекомендованаяЦена.Доступность = Ложь;
	ЭтотОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРаспродажу(Команда)
	ЗакончитьРаспродажуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗакончитьРаспродажуНаСервере()
	
	
	Если Объект.Распродажа = Ложь Тогда
		Возврат;
	КонецЕсли;
	Объект.БылаОтменаРаспродажи = Истина;
	
	Объект.РекомендованаяЦена = Объект.ЦенаДоРаспродажи;
	Объект.ДатаОкончанияРаспродажи = '00010101';
	Объект.Распродажа = Ложь;

	Сообщить("Распродажа окончена"); 
	Элементы.НачатьРаспродажу.Доступность = Истина;
	Элементы.РекомендованаяЦена.Доступность = Истина;
	ЭтотОбъект.Записать();
КонецПроцедуры



&НаКлиенте
Процедура Уценка(Команда)
	Объект.Наименование = Объект.Наименование + " (Уценка)";
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере()
	RegExp = Новый COMОбъект("VBScript.RegExp");
	
	RegExp.IgnoreCase = Ложь; //Игнорировать регистр
	RegExp.Global = Истина; //Поиск всех вхождений шаблона
	RegExp.MultiLine = Истина; //Многострочный режим
	RegExp.Pattern = "[^a-zA-Zа-яА-Я_0-9 ]";
	Объект.АртикулПоиск = RegExp.Replace( Объект.Артикул,"");
	Объект.НомерПоиск = RegExp.Replace( Объект.НомерПроизводителя,"");
	Если Объект.ДляТэгов.Количество() > 0 Тогда
		Объект.ЕстьТэги = Истина;
	Иначе
		Объект.ЕстьТэги = Ложь;
	КонецЕсли;
	
	Если  oldprice <> Объект.РекомендованаяЦена Тогда
		Объект.ДатаИзмененияЦены = ТекущаяДата() ;
		измцен = РегистрыСведений.ИзменениеЦен.СоздатьМенеджерЗаписи();
		измцен.Дата = ТекущаяДата();
		измцен.Товар = Объект.Ссылка;
		измцен.Цена = Объект.РекомендованаяЦена;
		измцен.Ответственный = Пользователи.ТекущийПользователь();
		измцен.Записать();
	КонецЕсли;
	Объект.изменено = истина;
	
	// ++ obrv 23.05.18
	//Записать();
	// -- obrv 23.05.18
	
	
КонецПроцедуры

&НаСервере
Функция ИзмКатПодКат()
	Возврат Cat1 <> Объект.Категория ИЛИ podkat1 <> Объект.podkategoria
КонецФункции



&НаСервере
Функция КатСодержитПотомков()
	запрос = новый запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	Категории.Ссылка
	|ИЗ
	|	Справочник.Категории КАК Категории
	|ГДЕ
	|	Категории.Родитель = &Родитель";
	запрос.УстановитьПараметр("Родитель",объект.Подкатегория2);
	Возврат запрос.Выполнить().Выгрузить().Количество() > 0;
КонецФункции

&НаКлиенте
Процедура ДляТэговПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ДляТэговВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДляТэговРеквизит1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ДобавитьТегЕслиНеНайден(Текст);
КонецПроцедуры

&НаСервере
Процедура ДобавитьТегЕслиНеНайден(Текст)
	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	Тэги.Ссылка
	|ИЗ
	|	Справочник.Тэги КАК Тэги
	|ГДЕ
	|	Тэги.Наименование = &Наименование";
	запрос.УстановитьПараметр("Наименование",Текст);
	рез = запрос.Выполнить().Выгрузить();
	Если рез.Количество() = 0 Тогда
		тэг = Справочники.Тэги.СоздатьЭлемент();
		тэг.Наименование = Текст;
		тэг.Записать();
	Иначе
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДляТэговРеквизит1АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ДляТэговРеквизит1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДляТэговРеквизит1ПриИзменении(Элемент)
	
КонецПроцедуры

&НаСервере
Функция ВозвратТэга(текст)
	Возврат Справочники.Тэги.НайтиПоНаименованию(текст);
КонецФункции

&НаКлиенте
Процедура длинПриИзменении(Элемент)
	
	Объект.Объем = (Объект.длин/100)* (Объект.шир/100)*(Объект.выс/100);
	Если Объект.Объем > 0 тогда
		Объект.ДатаУстановкиРазмеров = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ширПриИзменении(Элемент)
	
	Объект.Объем = (Объект.длин/100)* (Объект.шир/100)*(Объект.выс/100);
	
	Если Объект.Объем > 0 тогда
		Объект.ДатаУстановкиРазмеров = ТекущаяДата();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура высПриИзменении(Элемент)
	
	Объект.Объем = (Объект.длин/100)* (Объект.шир/100)*(Объект.выс/100);  
	
	Если Объект.Объем > 0 тогда
		Объект.ДатаУстановкиРазмеров = ТекущаяДата();
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура УстановитьОбъектИзмЦен()
	ИзмененияЦены.Параметры.УстановитьЗначениеПараметра("Товар",Объект.Ссылка);
КонецПроцедуры


&НаСервере
Процедура ЗапКатПодКат()
	Cat1 = Объект.Категория;
	podkat1 = Объект.podkategoria ;
КонецПроцедуры

&НаСервере
Процедура ObnTmppath()
	TmpPath = "";
	Если  Объект.Подкатегория2 <> Справочники.Категории.ПустаяСсылка() Тогда
		ccat =  Объект.Подкатегория2;
		Пока ccat.Родитель <> Справочники.Категории.ПустаяСсылка() Цикл
			TmpPath = " - "+ccat.Наименование + TmpPath;
			ccat = ccat.Родитель;
		КонецЦикла;
		TmpPath = ccat.Наименование + TmpPath;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрНоваяЗП(значп)
	Объект.ЭтоНоваяЗапчасть = значп;
КонецПроцедуры

&НаСервере
Функция ДоступнаРоль(Роль)
	Возврат РольДоступна(Роль);
КонецФункции

&НаКлиенте
Процедура AddBrand(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.Бренд.ФормаОбъекта");
КонецПроцедуры


&НаСервере
Функция AddBrendS()
	Возврат Справочники.Бренд.СоздатьЭлемент();
КонецФункции

&НаКлиенте
Процедура Подкатегория2ПриИзменении(Элемент)
	ObnTmppath();
	
	///+ГомзМА 11.09.2023
	УстановитьВидимостьИДоступностьЭлементов();
	///-ГомзМА 11.09.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинку(Команда)
	//ИмяФайла = "";
	ПутьФайла = "";
	
	ФайлВыбор = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ФайлВыбор.МножественныйВыбор = Ложь;
	ОО1 = Новый ОписаниеОповещения("ДобавитьКартинкуПродолжение", ЭтаФорма);
	ФайлВыбор.Показать(ОО1);
	
	//Результат = ФайлВыбор.Выбрать();
	//Если НЕ Результат Тогда
	// Возврат;
	//КонецЕсли;
	//ИмяФайла = ФайлВыбор.ПолноеИмяФайла;
	//НовыйФайл = Новый Файл(ИмяФайла);
	//РазмерФайла = НовыйФайл.Размер();
	////Вызываем Диалоговое окно и помещаем файл Картинки из локальной файловой системы во временное хранилище
	//Если ПоместитьФайл(ПутьФайла,ИмяФайла, НовыйФайл.Имя, Ложь) = Истина Тогда
	////в строковый реквизит ФОТО нашей формы сохраняем ссылку на Картинку во временном хранилище
	//Фото = ПутьФайла;
	////для создания нового элемента в Справочнике Файлы и записи Картинки в его реквизит Файл
	////переходим на сервер с помощью вызова серверной процедуры
	//нк = УстановитьКартинку(НовыйФайл.Имя,НовыйФайл.ПолучитьУниверсальноеВремяИзменения());
	//нк.ПолучитьФорму().Открыть()
	//КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуПродолжение(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	///+ГомзМА 09.08.2023
	Если ВыбранныеФайлы <> НЕОПРЕДЕЛЕНО Тогда
		ИмяФайла = ВыбранныеФайлы[0];
		НовыйФайл = Новый Файл(ИмяФайла);
		РазмерФайла = НовыйФайл.Размер();
		
		ОО1 = Новый ОписаниеОповещения("ДобавитьКартинкуЗавершение", ЭтаФорма);
		НачатьПомещениеФайлаНаСервер(ОО1,,,, ИмяФайла, УникальныйИдентификатор);
		
		////Вызываем Диалоговое окно и помещаем файл Картинки из локальной файловой системы во временное хранилище
		//Если ПоместитьФайл(ПутьФайла,ИмяФайла, НовыйФайл.Имя, Ложь) Тогда
		/////+ГомзМА 08.08.2023
		//////Если НачатьПомещениеФайлаНаСервер(,,,, ИмяФайла) = Истина Тогда
		//////НачатьПомещениеФайлаНаСервер(,,,, ИмяФайла);
		///////-ГомзМА 08.08.2023
		//////в строковый реквизит ФОТО нашей формы сохраняем ссылку на Картинку во временном хранилище
		////Фото = ПутьФайла;
		//////для создания нового элемента в Справочнике Файлы и записи Картинки в его реквизит Файл
		//////переходим на сервер с помощью вызова серверной процедуры
		////нк = УстановитьКартинку(НовыйФайл.Имя,НовыйФайл.ПолучитьУниверсальноеВремяИзменения());
		////нк.ПолучитьФорму().Открыть()
		//КонецЕсли; 
		//	//Сообщить("Сработало!");
	КонецЕсли;
	///-ГомзМА 09.08.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуЗавершение(ПомещенныйФайл, ДопПараметры) Экспорт
	
	///+ГомзМА 09.08.2023
	Если НЕ ПомещенныйФайл.ПомещениеФайлаОтменено Тогда
		Файл = ПомещенныйФайл.СсылкаНаФайл.Файл;
		нк = УстановитьКартинку(Файл.Имя, Файл.ПолучитьУниверсальноеВремяИзменения(), ПомещенныйФайл.Адрес);
		
		ПараметрыФормы = Новый Структура("Ключ", нк);
		Форма = ПолучитьФорму("Справочник.Картинки.ФормаОбъекта", ПараметрыФормы);
		Если НЕ Форма.Открыта() Тогда
			Форма.Открыть();
		КонецЕсли;
	КонецЕсли;
	///-ГомзМА 09.08.2023
	
КонецПроцедуры


&НаСервере
Функция УстановитьКартинку(ИмяФайла,Дата, Адрес)
	нк = Справочники.Картинки.СоздатьЭлемент();
	//нк.Файл = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Фото));
	нк.Файл = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Адрес));
	нк.Наименование = ИмяФайла;
	нк.Дата = Дата;
	нк.Записать();
	нко = Объект.Картинки.Вставить(Объект.Картинки.Количество());
	нко.Картинка = нк.Ссылка;
	Возврат нк.Ссылка;
КонецФункции

&НаКлиенте
Процедура УдалитьКартинку(Команда)
	УдалитьСтрокиКартинки(Элементы.Картинки1.ТекущиеДанные.Картинка);
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиКартинки(карт)
	Отбор = Новый Структура("Картинка",карт);     
	СписокСтрок = Объект.Картинки.НайтиСтроки(Отбор);     
	Для Каждого Строка Из СписокСтрок Цикл     
		Объект.Картинки.Удалить(Строка);     
	КонецЦикла;
	карт.ПолучитьОбъект().Удалить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераЗамен(Команда)
	// Вставить содержимое обработчика.
	RegExp = Новый COMОбъект("VBScript.RegExp");
	
	RegExp.IgnoreCase = Ложь; //Игнорировать регистр
	RegExp.Global = Истина; //Поиск всех вхождений шаблона
	RegExp.MultiLine = Истина; //Многострочный режим
	
	RegExp.Pattern = "[^a-zA-Zа-яА-Я_0-9 ]";
	стр1=RegExp.Replace(Объект.Артикул,"");
	номера =  НачатьПоиск2(стр1,Объект.Артикул);
КонецПроцедуры

&НаСервере
Функция НачатьПоиск2(Поиск1,Поиск) Экспорт 
	// Вставить содержимое обработчика.
	ЭтоСкания = ЛОЖЬ;
	ЭтоЗамена = ЛОЖЬ;
	Запрос = Новый Запрос();
	Номера = Новый Массив();
	НомераВр = Новый Массив();
	//Номера.Добавить(Поиск1);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НомераСкания.Ссылка,
	|	НомераСкания.Код КАК Код,
	|	НомераСкания.Наименование,
	|	НомераСкания.НомерСкания КАК НомерСкания,
	|	НомераСкания.НомерЗамена КАК НомерЗамена,
	|	НомераСкания.Представление
	|ИЗ
	|	Справочник.НомераСкания КАК НомераСкания
	|ГДЕ
	|	НомераСкания.НомерСкания ПОДОБНО &ПарамПоиск 
	|	ИЛИ НомераСкания.НомерЗамена ПОДОБНО &ПарамПоиск1
	|	ИЛИ НомераСкания.НомерСкания ПОДОБНО &ПарамПоиск2
	|	ИЛИ НомераСкания.НомерЗамена ПОДОБНО &ПарамПоиск3
	|УПОРЯДОЧИТЬ ПО Код";
	Запрос.УстановитьПараметр("ПарамПоиск",Поиск);
	Запрос.УстановитьПараметр("ПарамПоиск1","%/"+Поиск+"/%");
	Запрос.УстановитьПараметр("ПарамПоиск2",Поиск1);
	Запрос.УстановитьПараметр("ПарамПоиск3","%/"+Поиск1+"/%");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
	Иначе
		ЭтоСкания = Истина; 
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Номера.Добавить(Выборка.НомерСкания);
			НомераВр = РазбитьСтрокуНаМассивПодстрок(Выборка.НомерЗамена,"/");
			Номер1 = НомераВр.Количество();
			Номер2 = 0;
			Пока Номер2<Номер1 Цикл
				Если СтрДлина(НомераВр[Номер2]) > 3 Тогда
					Номера.Добавить(НомераВр[Номер2]);
				КонецЕсли;
				Номер2 = Номер2 + 1;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НомераЗамен.Ссылка,
	|	НомераЗамен.ВерсияДанных,
	|	НомераЗамен.ПометкаУдаления,
	|	НомераЗамен.Предопределенный,
	|	НомераЗамен.Код,
	|	НомераЗамен.Наименование,
	|	НомераЗамен.СканияКод,
	|	НомераЗамен.НомерСкания,
	|	НомераЗамен.НомерПоиск,
	|	НомераЗамен.НомерПолный,
	|	НомераЗамен.Бренд,
	|	НомераЗамен.Представление
	|ИЗ
	|	Справочник.НомераЗамен КАК НомераЗамен
	|ГДЕ
	|	НомераЗамен.НомерСкания ПОДОБНО &ПарамПоиск
	|	ИЛИ НомераЗамен.НомерПолный ПОДОБНО &ПарамПоиск
	|	ИЛИ НомераЗамен.НомерСкания ПОДОБНО &ПарамПоиск1
	|	ИЛИ НомераЗамен.НомерПоиск ПОДОБНО &ПарамПоиск1";
	Запрос.УстановитьПараметр("ПарамПоиск",Поиск);
	Запрос.УстановитьПараметр("ПарамПоиск1",Поиск1);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
	Иначе
		ЭтоЗамена = Истина; 
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Номера.Добавить(Выборка.НомерСкания);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоЗамена ИЛИ ЭтоСкания Тогда
		
		ПоискПо = "";
		Номер1 = Номера.Количество();
		Номер2 = 0;
		Пока Номер2 < Номер1 Цикл
			ПоискПо = ПоискПо + " ИЛИ НомераЗамен.НомерСкания = """+Номера[Номер2]+"""";
			Номер2 = Номер2 +1;
		КонецЦикла;
		
		Запрос.Текст = 
		"ВЫБРАТЬ DISTINCT
		|	НомераЗамен.НомерСкания как НомерСкания,
		|	НомераЗамен.НомерПолный,
		|	НомераЗамен.НомерПоиск как НомерПоиск
		|ИЗ
		|	Справочник.НомераЗамен КАК НомераЗамен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НомераСкания КАК НомераСкания
		|		ПО НомераЗамен.НомерСкания = НомераСкания.Код
		|ГДЕ
		|	НомераЗамен.НомерСкания ПОДОБНО &ПарамПоиск
		|			ИЛИ НомераЗамен.НомерПоиск ПОДОБНО &ПарамПоиск1 "+ПоискПо;
		Запрос.УстановитьПараметр("ПарамПоиск",Поиск);
		Запрос.УстановитьПараметр("ПарамПоиск1",Поиск1);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
		Иначе 
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Номера.Добавить(Выборка.НомерСкания);
				Номера.Добавить(Выборка.НомерПоиск);
			КонецЦикла;
		КонецЕсли;
		
		Если ЭтоСкания Тогда
			Запрос.Текст=
			"ВЫБРАТЬ
			|	НомераСкания.Ссылка,
			|	НомераСкания.Код КАК Код,
			|	НомераСкания.Наименование,
			|	НомераСкания.НомерСкания КАК НомерСкания,
			|	НомераСкания.НомерЗамена КАК НомерЗамена,
			|	НомераСкания.Представление
			|ИЗ
			|	Справочник.НомераСкания КАК НомераСкания
			|ГДЕ
			|	НомераСкания.НомерСкания ПОДОБНО &ПарамПоиск 
			|	ИЛИ НомераСкания.НомерЗамена ПОДОБНО &ПарамПоиск1
			|	ИЛИ НомераСкания.НомерСкания ПОДОБНО &ПарамПоиск1 
			|	ИЛИ НомераСкания.НомерЗамена ПОДОБНО &ПарамПоиск2
			|УПОРЯДОЧИТЬ ПО Код";
			Запрос.УстановитьПараметр("ПарамПоиск",Поиск);
			Запрос.УстановитьПараметр("ПарамПоиск1","%/"+Поиск+"/%");
			Запрос.УстановитьПараметр("ПарамПоиск2",Поиск1);
			Запрос.УстановитьПараметр("ПарамПоиск3","%/"+Поиск1+"/%");
		Иначе
			ПоискПо = "";
			Номер1 = Номера.Количество();
			Номер2 = 0;
			Пока Номер2 < Номер1 Цикл
				ПоискПо = ПоискПо + " ИЛИ НомераСкания.НомерСкания = """+Номера[Номер2]+""" ИЛИ НомераСкания.НомерЗамена ПОДОБНО ""%/"+Номера[Номер2]+"/%""";
				Номер2 = Номер2 +1;
			КонецЦикла;
			
			Если ЭтоЗамена Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	НомераСкания.Ссылка,
				|	НомераСкания.Код КАК Код,
				|	НомераСкания.Наименование,
				|	НомераСкания.НомерСкания КАК НомерСкания,
				|	НомераСкания.НомерЗамена КАК НомерЗамена,
				|	НомераСкания.Представление
				|ИЗ
				|	Справочник.НомераСкания КАК НомераСкания
				|ГДЕ
				|	НомераСкания.НомерСкания ПОДОБНО &ПарамПоиск 
				|	ИЛИ НомераСкания.НомерЗамена ПОДОБНО &ПарамПоиск1
				|	ИЛИ НомераСкания.НомерСкания ПОДОБНО &ПарамПоиск2 
				|	ИЛИ НомераСкания.НомерЗамена ПОДОБНО &ПарамПоиск3" + ПоискПо;
				Запрос.УстановитьПараметр("ПарамПоиск",Поиск);
				Запрос.УстановитьПараметр("ПарамПоиск1","%/"+Поиск+"/%");
				Запрос.УстановитьПараметр("ПарамПоиск2",Поиск1);
				Запрос.УстановитьПараметр("ПарамПоиск3","%/"+Поиск1+"/%");
			КонецЕсли;
		КонецЕсли;
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
		Иначе 
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Номера.Добавить(Выборка.НомерСкания);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Для Каждого н Из Номера Цикл
		Если н <> Поиск И н <> Поиск1 Тогда
			с = Объект.НомераЗамен.Добавить();
			с.НомерЗамены = н;   
			с.Производитель = Справочники.Бренд.НайтиПоКоду("000000124");
		КонецЕсли;
	КонецЦикла;
	ВОЗВРАТ Номера; 	 
КонецФункции




&НаСервере
Функция РазбитьСтрокуНаМассивПодстрок(ИсходнаяСтрока,РазделительСтрок)
	СтрокаДляРазбора = ИсходнаяСтрока;
	СтрокаДляРазбора = СтрЗаменить(СтрокаДляРазбора, РазделительСтрок, Символы.ПС);
	МассивСтрок = новый Массив;
	КолвоСтрок = СтрЧислоСтрок(СтрокаДляРазбора);
	Для НомСтр = 1 По КолвоСтрок Цикл
		МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаДляРазбора, НомСтр));
	КонецЦикла;
	Возврат МассивСтрок;
КонецФункции




&НаСервере
Функция НайтиПользователя()
	// ++ obrv 16.01.18
	//Возврат Справочники.Пользователи.НайтиПоНаименованию(ПолноеИмяПользователя());
	Возврат ПользователиКлиентСервер.ТекущийПользователь();
	// -- obrv 16.01.18
КонецФункции



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтоНовыйЭл=Ложь;
	Если Параметры.Ключ.Пустая() Тогда 
		ЭтоНовыйЭл=Истина;
	КонецЕсли;
	
	// ++ obrv 28.02.18
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ДоступноИзменениеЦены = РольДоступна("дт_ИзменениеФиксированныхЦен") ИЛИ ЭтоПолноправныйПользователь;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьУсловноеОформление();
	
	// -- obrv 28.02.18
	
	ОбновитьРекомендованнуюЦену();
	
	ОбновитьСписки();
	
	ЗаполнитьАналитику();
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	
	///+ГомзМА 09.10.2023
	Если Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию("Трофимов Василий Юрьевич") 		 	ИЛИ
		Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию("Рожков Александр Евгеньевич") 		ИЛИ
		Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию("Сергеев Фёдор Витальевич") 		 	ИЛИ 
		Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию("Гомзякова Маргарита Александровна") Тогда
		
		Элементы.Процент.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.Процент.ТолькоПросмотр = Истина;
	КонецЕсли;
	///-ГомзМА 09.10.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПредыдущаяЦена = объект.РекомендованаяЦена;
	Если ЭтоНовыйЭл = Истина Тогда //И ДоступнаРоль("ВопросПриСоздании") Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Это новая запчасть?",Режим,0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			УстановитьПараметрНоваяЗП(Истина);
		Иначе
			УстановитьПараметрНоваяЗП(Ложь);
		КонецЕсли;
	КонецЕсли;
	oldprice = Объект.РекомендованаяЦена ;
	ЗапКатПодКат();
	ObnTmppath();
	УстановитьОбъектИзмЦен();  
	// ++ obrv 28.02.20
	//ФильтрПродаж(Объект.Код);
	// -- obrv 28.02.20
	
	Если Объект.Распродажа = Истина Тогда
		Элементы.НачатьРаспродажу.Доступность = Ложь;
		Элементы.РекомендованаяЦена.Доступность = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	Если Объект.Ссылка.Пустая() Тогда
		Объект.КтоСоздал=НайтиПользователя();
	КонецЕсли;
	Если ИзмКатПодКат() Тогда	
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Изменена Категория или Подкатегория. Проверьте, что вы изменили дополнительные категории. Продолжить?""";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если КатСодержитПотомков() = Истина Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Выбраная категория содержит подкатегории. Продолжить?""";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПередЗаписьюНаСервере();
	
	///+ГомзМА 12.05.2023
	Если Объект.Вес  <> 0 И
		Объект.длин <> 0 И
		Объект.шир  <> 0 И
		Объект.выс  <> 0 Тогда
		
		Объект.Размеры = Истина;
	Иначе
		Объект.Размеры = Ложь;
	КонецЕсли;
	///-ГомзМА 12.05.2023
	
	РедактированиеЦены();	
	
	
КонецПроцедуры



&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры



&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьСписки();
	ОбновитьСписокПродажДетально(Неопределено);
	ОбновитьРекомендованнуюЦену();	
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_МестоХранения" Тогда
		Элементы.МестаХранения.Обновить();
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Запишем место хранения
	Если ЗначениеЗаполнено(ТекущийОбъект.МестоНаСкладе2)
		И ТекущийОбъект.ДополнительныеСвойства.Свойство("ЭтоНовый")
		И ТекущийОбъект.ДополнительныеСвойства.ЭтоНовый 
		ИЛИ НЕ МестоХраненияУстановлено(ТекущийОбъект.Ссылка) Тогда
		
		Док = Документы.УстановкаМестХранения.СоздатьДокумент();
		Док.Дата = ТекущаяДата();
		Док.Заполнить(Неопределено);
		Док.Склад = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновнойСклад();
		НоваяСтрока = Док.Товары.Добавить();
		НоваяСтрока.Номенклатура = ТекущийОбъект.Ссылка;
		НоваяСтрока.МестоХраненияПолучатель = ТекущийОбъект.МестоНаСкладе2;
		
		Отказ = Ложь;
		Попытка
			
			Док.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстОшибки = СтрШаблон("Не удалось создать документ %1. %2",
			Док,
			ОписаниеОшибки()
			);
			
			ЗаписьЖурналаРегистрации("Данные. Добавление", УровеньЖурналаРегистрации.Ошибка, Объект.Ссылка.Метаданные(), Объект.Ссылка, ТекстОшибки); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ
			);
			
			
		КонецПопытки;
		
		
	КонецЕсли;
	
	
	// Запишем цену
	ДанныеЗаписи = Новый Структура("Номенклатура,ТипЦен", ТекущийОбъект.Ссылка, ТипЦены);
	дт_Ценообразование.УстановитьЦену(ДанныеЗаписи, ТекущаяДата(), ТекущийОбъект.РекомендованаяЦена);
	
	ОбновитьСписки();
	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПоступленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.СписокПоступлений.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказНарядовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	///+ГомзМА 16.02.2024
	ПоказатьЗначение(, Элементы.СписокЗаказНарядов.ТекущиеДанные.Ссылка);
	///-ГомзМА 16.02.2024
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипЦеныПриИзменении(Элемент)
	Объект.ЦенаФиксирована = ТипЦены = ПредопределенноеЗначение("Справочник.ТипыЦен.Фиксированная");
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокПродаж

&НаКлиенте
Процедура ТаблицаПродажиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.ТаблицаПродажи.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СписокПродажПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаПродажи.ТекущиеДанные = Неопределено Тогда
		
		ТаблицаПродажиДетально.Очистить();
		
		//		СписокПродажДетально.Параметры.УстановитьЗначениеПараметра("Ссылка", Неопределено);
		//		СписокПродажДетально.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
		Возврат
	КонецЕсли;
	
	ТекДанные = Новый Структура("Тип,Ссылка");
	ЗаполнитьЗначенияСвойств(ТекДанные, Элементы.ТаблицаПродажи.ТекущиеДанные);
	ОбновитьСписокПродажДетально(ТекДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПродаж() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	|	ПродажаЗапчастейТаблица.Ссылка.Дата КАК Дата,
	|	ПродажаЗапчастейТаблица.Ссылка.Номер КАК Номер,
	|	ПродажаЗапчастейТаблица.Ссылка.Клиент КАК Клиент,
	|	ПродажаЗапчастейТаблица.Цена КАК Сумма,
	|	ПродажаЗапчастейТаблица.Ссылка.Оплачено КАК Оплачено,
	|	ПродажаЗапчастейТаблица.Ссылка КАК Ссылка,
	|	Продажи.Тип КАК Тип,
	|	ПродажаЗапчастейТаблица.Ссылка.КтоПродал КАК КтоПродал
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЖурналДокументов.Продажи КАК Продажи
	|		ПО ПродажаЗапчастейТаблица.Ссылка = Продажи.Ссылка
	|ГДЕ
	|	ПродажаЗапчастейТаблица.Товар = &Товар
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ПродажиОбороты.Регистратор КАК Ссылка
	//|ПОМЕСТИТЬ втДокументы
	//|ИЗ
	//|	РегистрНакопления.Продажи.Обороты(,, Регистратор, Номенклатура = &Номенклатура) КАК ПродажиОбороты
	//|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ
	//|	ПродажаЗапчастейТаблица.Ссылка
	//|ИЗ
	//|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	//|ГДЕ
	//|	ПродажаЗапчастейТаблица.Товар = &Номенклатура
	//|	И ПродажаЗапчастейТаблица.Отменено
	//|	И ПродажаЗапчастейТаблица.Ссылка.Проведен
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ПродажиНоменклатуры.Ссылка КАК Ссылка,
	//|	Продажи.Дата КАК Дата,
	//|	Продажи.Номер КАК Номер,
	//|	Продажи.Проведен КАК Проведен,
	//|	Продажи.Клиент КАК Клиент,
	//|	Продажи.Организация КАК Организация,
	//|	Продажи.Сумма КАК Сумма,
	//|	Продажи.Тип КАК Тип,
	//|	ЕСТЬNULL(ОплатыПоСделкамОбороты.СуммаОборот, 0) >= Продажи.Сумма КАК Оплачено
	//|ИЗ
	//|	втДокументы КАК ПродажиНоменклатуры
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЖурналДокументов.Продажи КАК Продажи
	//|		ПО Продажи.Ссылка = ПродажиНоменклатуры.Ссылка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатыПоСделкам.Обороты КАК ОплатыПоСделкамОбороты
	//|		ПО ПродажиНоменклатуры.Ссылка = ОплатыПоСделкамОбороты.Документ
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Ссылка
	//|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Товар", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПродажи.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры



&НаСервере
Процедура ОбновитьСписокПродажДетально(ТекДанные)
	
	Если ТекДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	
	//	СписокПродажДетально.Параметры.УстановитьЗначениеПараметра("Ссылка", ТекДанные.Ссылка);
	//	СписокПродажДетально.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ПродажаЗапчастейТаблица.Ссылка.Дата КАК Дата,
	//|	ПродажаЗапчастейТаблица.Ссылка.Номер КАК Номер,
	//|	ПродажаЗапчастейТаблица.Ссылка.Клиент КАК Клиент,
	//|	ПродажаЗапчастейТаблица.Цена КАК Сумма,
	//|	ПродажаЗапчастейТаблица.Ссылка.Оплачено КАК Оплачено,
	//|	ПродажаЗапчастейТаблица.Ссылка КАК Ссылка,
	//|	Продажи.Тип КАК Тип
	//|ИЗ
	//|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЖурналДокументов.Продажи КАК Продажи
	//|		ПО ПродажаЗапчастейТаблица.Ссылка = Продажи.Ссылка
	//|ГДЕ
	//|	ПродажаЗапчастейТаблица.Товар = &Товар
	//|	И ПродажаЗапчастейТаблица.Ссылка = &Ссылка";
	"ВЫБРАТЬ
	|	ПродажиОбороты.Автомобиль КАК Автомобиль,
	|	ПродажиОбороты.Цена КАК Цена,
	|	ПродажиОбороты.Менеджер КАК Менеджер,
	|	ПродажиОбороты.КоличествоОборот КАК КоличествоОборот,
	|	ПродажиОбороты.СуммаОборот КАК СуммаОборот,
	|	ПродажиОбороты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ПродажиНов
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, , Регистратор, Номенклатура = &Номенклатура) КАК ПродажиОбороты
	|ГДЕ
	|	ПродажиОбороты.Регистратор = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияОПродажах.машина КАК машина,
	|	ИнформацияОПродажах.цена КАК цена,
	|	ИнформацияОПродажах.колвоОборот КАК колво,
	|	ИнформацияОПродажах.колвоОборот * ИнформацияОПродажах.цена КАК Сумма,
	|	ИнформацияОПродажах.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ПродажиСт
	|ИЗ
	|	РегистрНакопления.ИнформацияОПродажах.Обороты(, , Регистратор, товар = &Номенклатура) КАК ИнформацияОПродажах
	|ГДЕ
	|	ИнформацияОПродажах.Регистратор = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ПродажиНов.Автомобиль, ВТ_ПродажиСт.машина) КАК Автомобиль,
	|	ЕСТЬNULL(ВТ_ПродажиНов.Цена, ВТ_ПродажиСт.цена) КАК Цена,
	|	ВТ_ПродажиНов.Менеджер КАК Менеджер,
	|	СУММА(ЕСТЬNULL(ВТ_ПродажиНов.КоличествоОборот, ВТ_ПродажиСт.колво)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ВТ_ПродажиНов.СуммаОборот, ВТ_ПродажиСт.Сумма)) КАК Сумма,
	|	ЕСТЬNULL(ВТ_ПродажиНов.Регистратор, ВТ_ПродажиСт.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТ_Продажи
	|ИЗ
	|	ВТ_ПродажиНов КАК ВТ_ПродажиНов
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ПродажиСт КАК ВТ_ПродажиСт
	|		ПО ВТ_ПродажиНов.Автомобиль = ВТ_ПродажиСт.машина
	|			И ВТ_ПродажиНов.Цена = ВТ_ПродажиСт.цена
	|			И ВТ_ПродажиНов.Регистратор = ВТ_ПродажиСт.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВТ_ПродажиНов.Автомобиль, ВТ_ПродажиСт.машина),
	|	ЕСТЬNULL(ВТ_ПродажиНов.Цена, ВТ_ПродажиСт.цена),
	|	ВТ_ПродажиНов.Менеджер,
	|	ЕСТЬNULL(ВТ_ПродажиНов.Регистратор, ВТ_ПродажиСт.Регистратор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажаЗапчастейТаблица.Товар КАК Номенклатура,
	|	ПродажаЗапчастейТаблица.Количество КАК Количество,
	|	ПродажаЗапчастейТаблица.Цена КАК Цена,
	|	ПродажаЗапчастейТаблица.Сумма КАК Сумма,
	|	ПродажаЗапчастейТаблица.Партия КАК Партия,
	|	ПродажаЗапчастейТаблица.Ссылка.КтоПродал КАК Менеджер,
	|	ПродажаЗапчастейТаблица.машина КАК Автомобиль,
	|	ПродажаЗапчастейТаблица.Ссылка КАК Ссылка,
	|	ПродажаЗапчастейТаблица.Ссылка.ИтогоРекв КАК ИтогоРекв
	|ПОМЕСТИТЬ втОтмененныеПродажи
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|ГДЕ
	|	ПродажаЗапчастейТаблица.Отменено
	|	И ПродажаЗапчастейТаблица.Товар = &Номенклатура
	|	И ПродажаЗапчастейТаблица.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Продажи.Автомобиль КАК Автомобиль,
	|	РегистрНакопления1Обороты.индкод КАК Партия,
	|	ВТ_Продажи.Менеджер КАК Менеджер,
	|	ВТ_Продажи.Цена КАК Цена,
	|	РегистрНакопления1Обороты.КолвоРасход КАК Количество,
	|	РегистрНакопления1Обороты.КолвоРасход * ВТ_Продажи.Цена КАК Сумма,
	|	ЛОЖЬ КАК Отменено,
	|	ВТ_Продажи.Регистратор.Ссылка КАК Ссылка,
	|	ВТ_Продажи.Регистратор.ИтогоРекв КАК Итого
	|ИЗ
	|	ВТ_Продажи КАК ВТ_Продажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Обороты(, , Регистратор, Товар = &Номенклатура) КАК РегистрНакопления1Обороты
	|		ПО ВТ_Продажи.Регистратор = РегистрНакопления1Обороты.Регистратор
	|			И ВТ_Продажи.Автомобиль = РегистрНакопления1Обороты.машина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОтмененныеПродажи.Автомобиль,
	|	втОтмененныеПродажи.Партия,
	|	втОтмененныеПродажи.Менеджер,
	|	втОтмененныеПродажи.Цена,
	|	втОтмененныеПродажи.Количество,
	|	втОтмененныеПродажи.Сумма,
	|	ИСТИНА,
	|	NULL,
	|	NULL
	|ИЗ
	|	втОтмененныеПродажи КАК втОтмененныеПродажи";
	
	Запрос.УстановитьПараметр("Ссылка", ТекДанные.Ссылка);
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПродажиДетально.Загрузить(РезультатЗапроса.Выгрузить());
	
	
КонецПроцедуры // ОбновитьСписокПродажДетально()


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИсторияИзмененияЦен(Команда)
	
	ТипыЦен = Новый Массив();
	ТипыЦен.Добавить(ПредопределенноеЗначение("Справочник.ТипыЦен.Рекомендованная")); 
	ТипыЦен.Добавить(ПредопределенноеЗначение("Справочник.ТипыЦен.Фиксированная"));
	
	ПараметрыОткрытия = Новый Структура("Отбор", Новый Структура("Номенклатура,ТипЦен", Объект.Ссылка, ТипыЦен));
	ОткрытьФорму("РегистрСведений.дт_ЦеныНоменклатуры.ФормаСписка", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзмененийМестХранения(Команда)
	
	ПараметрыОткрытия = Новый Структура("Отбор", Новый Структура("Номенклатура", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.дт_МестаХраненияНоменклатуры.ФормаСписка", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление() Экспорт
	
	// ТаблицаПродажиДетально.Отменено
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаПродажиДетально");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"ТаблицаПродажиДетально.Отменено", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ДатаСоздания.Видимость = Форма.ЭтоПолноправныйПользователь;
	
	//Элементы.МестоНаСкладе2.Видимость = НЕ ЗначениеЗаполнено(Объект.МестоНаСкладе2) ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка);
	//Элементы.МестоХраненияТекущее.Видимость = НЕ Элементы.МестоНаСкладе2.Видимость; //ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.ТипЦены.ТолькоПросмотр = НЕ Форма.ДоступноИзменениеЦены;
	Элементы.РекомендованаяЦена.ТолькоПросмотр = Объект.ЦенаФиксирована И НЕ Форма.ДоступноИзменениеЦены;
	//ИспользоватьАвтосервис = Форма.ПолучитьФункциональнуюОпциюФормы("дт_ИспользоватьАвтосервис");
	//Элементы.ИсторияЗакупок.Видимость = ИспользоватьАвтосервис;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
Процедура ОбновитьРекомендованнуюЦену() 
	
	ТипЦены = ?(Объект.ЦенаФиксирована, 
	ПредопределенноеЗначение("Справочник.ТипыЦен.Фиксированная"),
	ПредопределенноеЗначение("Справочник.ТипыЦен.Рекомендованная")
	);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Цена = дт_Ценообразование.ПолучитьЦену(Новый Структура("Номенклатура", Объект.Ссылка), ТекущаяДата(), ТипЦены);
		
		Если Цена <> 0 И Объект.РекомендованаяЦена <> Цена  И Объект.БылаОтменаРаспродажи = Ложь Тогда
			Объект.РекомендованаяЦена = Цена;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСписки()
	СписокСписаний.Параметры.УстановитьЗначениеПараметра("Номенклатура",Объект.Ссылка);	
	СписокЗаказНарядов.Параметры.УстановитьЗначениеПараметра("Номенклатура",Объект.Ссылка);	
	ТаблицаЗаявки.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	МестаХранения, 
	"Номенклатура", 
	Объект.Ссылка, 
	ВидСравненияКомпоновкиДанных.Равно,,Истина);
	
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокНаименованияПоставщиков, 
	"Номенклатура", 
	Объект.Ссылка, 
	ВидСравненияКомпоновкиДанных.Равно,,Истина
	);
	
	//	СписокПродаж.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	ОбновитьСписокПродаж();
	
	СписокПоступлений.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Склад", дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновнойСклад());
		ПараметрыОтбора.Вставить("Дата", ТекущаяДата());
		ПараметрыОтбора.Вставить("Номенклатура", Объект.Ссылка);
		
		МестоХраненияТекущее = дт_АдресноеХранение.ПолучитьМестоХранения(ПараметрыОтбора);
		
	Иначе
		
		МестоХраненияТекущее = Неопределено;
		
	КонецЕсли;
	
	
КонецПроцедуры // ОбновитьСписки()

&НаСервереБезКонтекста
Функция МестоХраненияУстановлено(Номенклатура)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Дата", ТекущаяДата());
	Отбор.Вставить("Склад", дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновнойСклад());
	Отбор.Вставить("Номенклатура", Номенклатура);
	
	МестоХранения = дт_АдресноеХранение.ПолучитьМестоХранения(Отбор);
	
	Возврат ЗначениеЗаполнено(МестоХранения);
	
КонецФункции // МестоХраненияУстановлено()

&НаКлиенте
Процедура ТаблицаЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.ТаблицаЗаявки.ТекущиеДанные.Ссылка);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	///+ГомзМА 28.08.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПомощникБухгалтера")) Тогда
		Элементы.Аналитика.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Подкатегория2 = Справочники.Категории.НайтиПоКоду("000000501") ИЛИ 
		Объект.Подкатегория2 = Справочники.Категории.НайтиПоКоду("000000502") Тогда
		
		Элементы.Группа12.Видимость 		  = Ложь;
		Элементы.Объем.Видимость 			  = Ложь;
		Элементы.ГруппаРазмерШин.Видимость 	  = Истина;
		Элементы.ГруппаДанныеДляШин.Видимость = Истина;
	Иначе
		Элементы.Группа12.Видимость 		  = Истина;
		Элементы.Объем.Видимость 			  = Истина;
		Элементы.ГруппаРазмерШин.Видимость 	  = Ложь;
		Элементы.ГруппаДанныеДляШин.Видимость = Ложь;
	КонецЕсли;
	///-ГомзМА 28.08.2023
	
КонецПроцедуры


#КонецОбласти

Процедура ЗаполнитьАналитику()
	ЗапросПродаж = Новый Запрос;
	ЗапросПродаж.Текст =  "ВЫБРАТЬ
	|	МАКСИМУМ(Продажи.Сумма / Продажи.Количество) КАК Сумма,
	|	Продажи.Номенклатура КАК Номенклатура,
	|	СУММА(Продажи.Количество) КАК Количество
	|ПОМЕСТИТЬ Макс
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Продажи.Сумма / Продажи.Количество) КАК Сумма,
	|	Продажи.Номенклатура КАК Номенклатура,
	|	СУММА(Продажи.Количество) КАК Количество
	|ПОМЕСТИТЬ Мин
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Продажи.Количество) КАК Количество,
	|	Продажи.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Колво
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Колво.Количество КАК Колво,
	|	Макс.Сумма КАК МаксНом,
	|	Мин.Сумма КАК МинНом
	|ИЗ
	|	Макс КАК Макс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Мин КАК Мин
	|		ПО Макс.Номенклатура = Мин.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Колво КАК Колво
	|		ПО Макс.Номенклатура = Колво.Номенклатура";
	ЗапросПродаж.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Попытка
		ВыборкаПродаж = ЗапросПродаж.Выполнить().Выбрать(); 
		Если ВыборкаПродаж.Количество() > 0 Тогда
			ВыборкаПродаж.Следующий();
			
			КоличествоПроданныхДеталей = ВыборкаПродаж.Колво;
			МаксимальнаяЦенаПродажи    = ВыборкаПродаж.МаксНом;
			МинимальнаяЦенаПродажи     = ВыборкаПродаж.МинНом;
			СредняяЦенаПродажи         = (ВыборкаПродаж.МаксНом + ВыборкаПродаж.МинНом) / 2 ;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЗапросЗаявок = Новый Запрос;
	ЗапросЗаявок.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиентаТовары.Ссылка) КАК КолвоЗаявок
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Номенклатура = &Номенклатура";
	ЗапросЗаявок.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	ВыборкаЗаявок = ЗапросЗаявок.Выполнить().Выбрать();
	Если ВыборкаЗаявок.Количество() > 0 Тогда
		ВыборкаЗаявок.Следующий();
		
		КоличествоЗаявок = ВыборкаЗаявок.КолвоЗаявок;
	конецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЗапросОстатка = Новый Запрос;
	ЗапросОстатка.Текст =  "ВЫБРАТЬ
	|	РегистрНакопления1Остатки.КолвоОстаток КАК КолвоОстаток
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|ГДЕ
	|	РегистрНакопления1Остатки.Товар = &Номенклатура";
	
	ЗапросОстатка.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	ВыборкаОстатка = ЗапросОстатка.Выполнить().Выбрать();
	Если ВыборкаОстатка.Количество() > 0 Тогда
		ВыборкаОстатка.Следующий();
		
		ОстатокНаСкладе = ВыборкаОстатка.КолвоОстаток;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЗапросПредложений = Новый Запрос;
	ЗапросПредложений.Текст =  "ВЫБРАТЬ
	|	МАКСИМУМ(ЗаказКлиентаТовары.Цена) КАК Цена,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ МаксПредложение
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаказКлиентаТовары.Цена) КАК Цена,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ МинПредложение
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СРЕДНЕЕ(ЗаказКлиентаТовары.Цена) КАК Сумма,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СрЦенаОтказа
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Номенклатура = &Номенклатура
	|	И ЗаказКлиентаТовары.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Отказ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксПредложение.Цена КАК Макс,
	|	МинПредложение.Цена КАК Мин,
	|	СрЦенаОтказа.Сумма КАК СрЦенаОтказ
	|ИЗ
	|	МаксПредложение КАК МаксПредложение,
	|	СрЦенаОтказа КАК СрЦенаОтказа,
	|	МинПредложение КАК МинПредложение";
	
	ЗапросПредложений.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	ВыборкаПредложений = ЗапросПредложений.Выполнить().Выбрать();
	Если ВыборкаПредложений.Количество() > 0 Тогда
		ВыборкаПредложений.Следующий();
		
		МаксимальнаяЦенаПредложения =  ВыборкаПредложений.Макс;
		МинимальнаяЦенаПредложения  =  ВыборкаПредложений.Мин;
		СредняяЦенаПредложения      = (ВыборкаПредложений.Мин + ВыборкаПредложений.Макс) / 2;
		СредняяЦенаОтказа           =  ВыборкаПредложений.СрЦенаОтказ;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПродажиСортировкаДатаВозрНаСервере()
	ВыгрТаб = ТаблицаПродажи.Выгрузить();
	ВыгрТаб.Сортировать("Дата Возр");
	ТаблицаПродажи.Загрузить(ВыгрТаб);
КонецПроцедуры

&НаКлиенте
Процедура ПродажиСортировкаДатаВозр(Команда)
	ПродажиСортировкаДатаВозрНаСервере();
	Элементы.ПродажиСортировкаДатаВозр.Видимость = Ложь;
	Элементы.ПродажиСортировкаДатаУбыв.Видимость = Истина;
КонецПроцедуры

&НаСервере
Процедура ПродажиСортировкаДатаУбывНаСервере()
	ВыгрТаб = ТаблицаПродажи.Выгрузить();
	ВыгрТаб.Сортировать("Дата Убыв");
	ТаблицаПродажи.Загрузить(ВыгрТаб);
КонецПроцедуры

&НаКлиенте
Процедура ПродажиСортировкаДатаУбыв(Команда)
	ПродажиСортировкаДатаУбывНаСервере();
	Элементы.ПродажиСортировкаДатаВозр.Видимость = Истина;
	Элементы.ПродажиСортировкаДатаУбыв.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПродажиСортировкаСуммаВозрНаСервере()
	ВыгрТаб = ТаблицаПродажи.Выгрузить();
	ВыгрТаб.Сортировать("Сумма Возр");
	ТаблицаПродажи.Загрузить(ВыгрТаб);
КонецПроцедуры

&НаКлиенте
Процедура ПродажиСортировкаСуммаВозр(Команда)
	ПродажиСортировкаСуммаВозрНаСервере();
	Элементы.ПродажиСортировкаСуммаВозр.Видимость = Ложь;
	Элементы.ПродажиСортировкаСуммаУбыв.Видимость = Истина;
КонецПроцедуры

&НаСервере
Процедура ПродажиСортировкаСуммаУбывНаСервере()
	ВыгрТаб = ТаблицаПродажи.Выгрузить();
	ВыгрТаб.Сортировать("Сумма Убыв");
	ТаблицаПродажи.Загрузить(ВыгрТаб);
КонецПроцедуры

&НаКлиенте
Процедура ПродажиСортировкаСуммаУбыв(Команда)
	ПродажиСортировкаСуммаУбывНаСервере();
	Элементы.ПродажиСортировкаСуммаВозр.Видимость = Истина;
	Элементы.ПродажиСортировкаСуммаУбыв.Видимость = ложь;
КонецПроцедуры

&НаКлиенте
Процедура РекомендованаяЦенаПриИзменении(Элемент)
	СменаДаты();
	
КонецПроцедуры

Процедура РедактированиеЦены()
	//+Сергеев 000002974 04/12/23 
	Если ПредыдущаяЦена <> объект.РекомендованаяЦена и ПредыдущаяЦена <> 0 Тогда
		коэфициент = Объект.РекомендованаяЦена/ПредыдущаяЦена;
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИндНомер.индкод КАК индкод
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|ГДЕ
		|	ИндНомер.индкод.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если выборка.Количество() > 0 Тогда
			Пока выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
				НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					
					НовыйНомер = НаборЗаписей[0]; 
					Если НовыйНомер.цена = 0 Тогда
						НовыйНомер.цена = Объект.РекомендованаяЦена;
					Иначе
						НовыйНомер.цена = Цел(НовыйНомер.цена * коэфициент);
					КонецЕсли;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	//-Сергеев 000002974 04/12/23
КонецПроцедуры 

Процедура СменаДаты()	
	Объект.ДатаИзмененияЦены = ТекущаяДата();	
КонецПроцедуры





