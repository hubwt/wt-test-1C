#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Карточка номенклатуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриказОНазначенииМОЛ";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о назначении МОЛ'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Приказ'");
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриказОНазначенииМОЛ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПриказОНазначенииМОЛ", 
			?(МассивОбъектов.Количество() = 1, МассивОбъектов[0], НСтр("ru = 'Список МОЛ'")), 
			СформироватьПечатнуюФормуПриказОНазначенииМОЛ(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры


#Область ПечатьПриказОНазначенииМОЛ

Функция ПолучитьДанныеДляПечатиПриказОНазначенииМОЛ(МассивОбъектов)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентарь.Ответственный,
	|	Инвентарь.Ссылка,
	|	Инвентарь.Наименование,
	|	Инвентарь.Склад,
	|	Инвентарь.МестоХранения
	|ПОМЕСТИТЬ ВТ_ТМЦ
	|ИЗ
	|	Справочник.Инвентарь КАК Инвентарь
	|ГДЕ
	|	Инвентарь.Ответственный В (&МассивОбъектов)
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТМЦ.Ответственный КАК Ссылка
	|ИЗ
	|	ВТ_ТМЦ КАК ВТ_ТМЦ
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТМЦ.Ответственный
	|УПОРЯДОЧИТЬ ПО
	|	Ответственный
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|
	|	ВТ_ТМЦ.Ответственный КАК Ответственный,
	|	ВТ_ТМЦ.Ссылка КАК Ссылка,
	|	ВТ_ТМЦ.Наименование КАК Наименование,
	|	ВТ_ТМЦ.Склад,
	|	ВТ_ТМЦ.МестоХранения
	|ИЗ
	|	ВТ_ТМЦ КАК ВТ_ТМЦ
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ
	|ПО
	|	Ответственный";
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Рез = Новый Структура();
	Рез.Вставить("РезультатПоШапке", РезультатЗапроса[РезультатЗапроса.Количество() - 2]);
	Рез.Вставить("РезультатПоТабличнойЧасти", РезультатЗапроса[РезультатЗапроса.Количество() - 1]);
	
	Возврат Рез;

КонецФункции // ПолучитьДанныеДляПечати()


Функция СформироватьПечатнуюФормуПриказОНазначенииМОЛ(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	//ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПРИКАЗОНАЗНАЧЕНИИМОЛ";
	
	Макет = ПолучитьМакет("ПФ_MXL_ПриказОНазначенииМОЛ");	
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатиПриказОНазначенииМОЛ(МассивОбъектов);
	
	
	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаТовары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);	
		//СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("ФамилияИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ДанныеПечати.Ссылка));
		ДопПараметры.Вставить("Дата", ТекущаяДата());
		
		ФамилияИО_рп = СклонениеПредставленийОбъектов.ПросклонятьФИО(ДанныеПечати.Ссылка, 2); 
		Если ЗначениеЗаполнено(ФамилияИО_рп) Тогда
			ФамилияИО_рп = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФамилияИО_рп);
		Иначе	
			ФамилияИО_рп = ДопПараметры.ФамилияИО;
		КонецЕсли; 
		ДопПараметры.Вставить("ФамилияИО_рп", ФамилияИО_рп);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.Заполнить(ДопПараметры);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		// Табличная часть
		СтруктураПоиска = Новый Структура("Ответственный", ДанныеПечати.Ссылка);
		ВыборкаТовары.Сбросить();
		Если НЕ ВыборкаТовары.НайтиСледующий(СтруктураПоиска) Тогда
			Продолжить	
		КонецЕсли;
		
			
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		СтрокаТовары = ВыборкаТовары.Выбрать();
		ДопПараметрыСтрока = Новый Структура();
		НомерСтроки = 1;
		Пока СтрокаТовары.Следующий() Цикл
			ДопПараметрыСтрока.Вставить("НомерСтроки", НомерСтроки);
				
			ОбластьСтрока.Параметры.Заполнить(СтрокаТовары);
			ОбластьСтрока.Параметры.Заполнить(ДопПараметрыСтрока);
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
		ОбластьПодвал.Параметры.Заполнить(ДопПараметры);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("Служебный");
	НеРедактируемыеРеквизиты.Добавить("ИдентификаторПользователяИБ");
	НеРедактируемыеРеквизиты.Добавить("ИдентификаторПользователяСервиса");
	НеРедактируемыеРеквизиты.Добавить("СвойстваПользователяИБ");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если НЕ Параметры.Отбор.Свойство("Недействителен") Тогда
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;
	
	Если НЕ Параметры.Отбор.Свойство("Служебный") Тогда
		Параметры.Отбор.Вставить("Служебный", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Согласования

Функция РазрешеноСогласование(Объект, Пользователь) Экспорт
	
	Результат = Ложь;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасход") Тогда
		Результат = РазрешеноСогласованиеЗаявкиНаРасход(Объект, Пользователь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция РазрешеноСогласованиеЗаявкиНаРасход(Объект, Пользователь)
	
	
	#Если ТолстыйКлиентУправляемоеПриложение  Тогда
	Результат = Ложь;
	#Иначе
	Результат = Пользователи.РолиДоступны("дт_СогласованиеЗаявокНаРасход", Пользователь, Ложь, Ложь);
	#КонецЕсли
		
	
	Если Результат Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПользовательОбъект = Пользователь.ПолучитьОбъект();
		НастройкиСогласования = ПользовательОбъект.НастройкиСогласования.Получить();
		
		Если НастройкиСогласования = Неопределено 
			ИЛИ ТипЗнч(НастройкиСогласования) <> Тип("Структура") Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если НастройкиСогласования.Свойство("ЗаявкаНаРасход") Тогда
			
			НастройкаДокумента = НастройкиСогласования.ЗаявкаНаРасход;
			
			Если НастройкаДокумента = Неопределено 
				ИЛИ ТипЗнч(НастройкаДокумента) <> Тип("Структура") Тогда
					
				Возврат Результат;
					
			КонецЕсли;
			
			СуммаМаксимальная = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкаДокумента, "СуммаМаксимальная", 0);	
			ЕстьОграничеенияПоВидамРасходов = Ложь;
			
			ВидыРасходов = Неопределено;
			НастройкаДокумента.Свойство("ВидыРасходов", ВидыРасходов);
			
			Если ТипЗнч(ВидыРасходов) = Тип("Массив") Тогда
				ЕстьОграничеенияПоВидамРасходов = ВидыРасходов.Количество() <> 0;
			КонецЕсли;
			
			Результат = Объект.СуммаДокумента <= СуммаМаксимальная ИЛИ СуммаМаксимальная = 0;
			
			Если Результат Тогда
				Результат = (НЕ ЕстьОграничеенияПоВидамРасходов)
					ИЛИ ВидыРасходов.Найти(Объект.ВидРасхода) <> Неопределено;
			КонецЕсли;
				
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти
