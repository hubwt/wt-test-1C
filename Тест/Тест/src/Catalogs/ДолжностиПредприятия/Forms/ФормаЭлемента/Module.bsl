
&НаКлиенте
Процедура Печать(Команда)
		
	///+ГомзМА 16.10.2023
	ТабДокумент = ПолучитьДокументДляИнструкций();
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("Печать");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДокумент;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "Печать";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
	///-ГомзМА 16.10.2023
	
КонецПроцедуры

// Динамический список в таблицу значений.
&НаСервере
Функция СписокВТаблицуЗначений(НазваниеСписка)
	
	//Получаем схема компановки данных (здесь хранится текст запроса)
	Схема = НазваниеСписка.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	//Получаем настройки пользователя (отборы, сортировки и т.п.)
	Настройки = НазваниеСписка.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	//Выводим динамический список в таблицу значений
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//Возвращаем полученную таблицу значений
	Возврат  Результат;
	
КонецФункции
&НаСервере
Функция ПолучитьДокументДляИнструкций()
	
	///+ГомзМА 16.10.2023
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Макет = Справочники.ДолжностиПредприятия.ПолучитьМакет("Печать1");
	#Область ПолучениеОбластей
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ТелоДокумента = Макет.ПолучитьОбласть("Тело");
	
	Навыки = Макет.ПолучитьОбласть("Навыки");
	НавыкиСтрока = Макет.ПолучитьОбласть("НавыкиСтрока");
	ОкладыИОтделы = Макет.ПолучитьОбласть("ОкладыИОтделы");
	ОкладыИОтделыСтрока = Макет.ПолучитьОбласть("ОкладыИОтделыСтрока");
	Сотрудники = Макет.ПолучитьОбласть("Сотрудники");
	СотрудникиСтрока = Макет.ПолучитьОбласть("СотрудникиСтрока");
	КадровыеПриказы = Макет.ПолучитьОбласть("КадровыеПриказы");
	КадровыеПриказыСтрока = Макет.ПолучитьОбласть("КадровыеПриказыСтрока");
	Процессы = Макет.ПолучитьОбласть("Процессы");
	ПроцессыСтрока = Макет.ПолучитьОбласть("ПроцессыСтрока");
	Подвал = Макет.ПолучитьОбласть("Подвал");
	Разделитель = Макет.ПолучитьОбласть("Разделитель ");
	#КонецОбласти
	
	Шапка.Параметры.Должность = Объект.Наименование;
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(""); 
	Штрихкод.Ширина = 150; 
	Штрихкод.Высота = 150;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = Объект.Код;
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = Штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод, Истина);
	ФайлКартинки = КартинкаШтрихКод;
	
	Рисунок = Шапка.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок.Верх = 0;
	Рисунок.Высота = 45;
	Рисунок.Ширина = 45;
	Рисунок.Лево = 100;
	Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии,-1);
	Рисунок.Картинка = ФайлКартинки;

	ТабДокумент.Вывести(Шапка);
	
	ТелоДокумента.Параметры.Описание = Объект.Описание;
	ТелоДокумента.Параметры.Обязанности = Объект.ОбязанностиОбщ;
	ТелоДокумента.Параметры.Права = Объект.Права;
	ТелоДокумента.Параметры.Ответственность = Объект.Ответственность;
	ТелоДокумента.Параметры.KPI = Объект.KPI;
 
	ТабДокумент.Вывести(ТелоДокумента);
	
	ТабДокумент.Вывести(Навыки);
	Для каждого Строка из Объект.Навыки Цикл
		НавыкиСтрока.Параметры.НомерСтроки = Строка.НомерСтроки;
		НавыкиСтрока.Параметры.Навык = Строка.Навык;
		ТабДокумент.Вывести(НавыкиСтрока);
	КонецЦикла;
	
	ТабДокумент.Вывести(ОкладыИОтделы);
	ТЗСписокОкладов = СписокВТаблицуЗначений(Элементы.СписокОкладов);
	Для каждого Строка из ТЗСписокОкладов Цикл
		ОкладыИОтделыСтрока.Параметры.Отдел = Строка.Ссылка;
		ОкладыИОтделыСтрока.Параметры.Оклад = Строка.Оклад;
		ОкладыИОтделыСтрока.Параметры.Мотивация = Строка.Мотивация;
		ТабДокумент.Вывести(ОкладыИОтделыСтрока);
	КонецЦикла;
	
	ТабДокумент.Вывести(Сотрудники);
	ТЗСписокСотрудников = СписокВТаблицуЗначений(Элементы.СписокСотрудников);
	
	Для каждого Строка из ТЗСписокСотрудников Цикл
		СотрудникиСтрока.Параметры.Сотрудник = Строка.Сотрудник;
		СотрудникиСтрока.Параметры.АктуальныйПриказ = Строка.Регистратор;
		ТабДокумент.Вывести(СотрудникиСтрока);
	КонецЦикла;
	
	ТабДокумент.Вывести(КадровыеПриказы);
	ТЗКадровыеПриказы = СписокВТаблицуЗначений(Элементы.СписокКадровыеПриказы);
	
	Для каждого Строка из ТЗКадровыеПриказы Цикл
		КадровыеПриказыСтрока.Параметры.Приказ = Строка.Ссылка;
		КадровыеПриказыСтрока.Параметры.Сотрудник = Строка.Сотрудник;
		ТабДокумент.Вывести(КадровыеПриказыСтрока);
	КонецЦикла;
	
	ТабДокумент.Вывести(Процессы);
	ТЗПроцессы = СписокВТаблицуЗначений(Элементы.СписокЗадачПоДолжности);
	
	Для каждого Строка из ТЗПроцессы Цикл
		ПроцессыСтрока.Параметры.ЧекЛист = Строка.Ссылка;
		ПроцессыСтрока.Параметры.Задача = Строка.Описание;
		ПроцессыСтрока.Параметры.Обязанность = Строка.Обязанность;
		ТабДокумент.Вывести(ПроцессыСтрока);
	КонецЦикла;
	
	ТабДокумент.Вывести(Подвал);
	ТабДокумент.Вывести(Разделитель);
	Возврат ТабДокумент;
	///-ГомзМА 16.10.2023
	
КонецФункции

&НаКлиенте
Процедура СписокОкладовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
	СсылкаДляОткрытия    = Элементы.СписокОкладов.ТекущиеДанные[СтрЗаменить(Поле.Имя,Элемент.имя,"")];
	ПараметрыФормы       = Новый Структура("Ключ", СсылкаДляОткрытия);
	Если ТипЗнч(СсылкаДляОткрытия)=тип("СправочникСсылка.Подразделения") Тогда
		ИмяФормыДокумента="Справочник.Подразделения.Форма.Формаэлемента";
		//ИначеЕсли ТипЗнч(СсылкаДляОткрытия)=тип("СправочникСсылка.Обязанности") Тогда
		//ИмяФормыДокумента="Справочник.Обязанности.Форма.ФормаЭлемента";
		//Возврат;
	КонецЕсли;
	
	ФормаДокумента = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	ФормаДокумента.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СписокКадровыеПриказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
	СсылкаДляОткрытия    = Элементы.СписокКадровыеПриказы.ТекущиеДанные[СтрЗаменить(Поле.Имя,Элемент.имя,"")];
	ПараметрыФормы       = Новый Структура("Ключ", СсылкаДляОткрытия);
	Если ТипЗнч(СсылкаДляОткрытия)=тип("СправочникСсылка.Сотрудники") Тогда
		ИмяФормыДокумента="Справочник.Сотрудники.Форма.Формаэлемента";
		ИначеЕсли ТипЗнч(СсылкаДляОткрытия)=тип("ДокументСсылка.КадровыйПриказ") Тогда
		ИмяФормыДокумента="Документ.КадровыйПриказ.Форма.ФормаДокумента";
		//Возврат;
	КонецЕсли;
	
	ФормаДокумента = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	ФормаДокумента.Открыть();
КонецПроцедуры





#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправлениеФормой(ЭтаФорма);
	СписокСотрудников.Параметры.УстановитьЗначениеПараметра("Должность", объект.Ссылка);
	СписокОбязанностей.Параметры.УстановитьЗначениеПараметра("Должность", объект.Ссылка);
	СписокКадровыеПриказы.Параметры.УстановитьЗначениеПараметра("Должность", объект.Ссылка);
	СписокОкладов.Параметры.УстановитьЗначениеПараметра("Должность", объект.Ссылка);
	//СписокНавыков.Параметры.УстановитьЗначениеПараметра("Отдел", объект.Отдел);
	
	СписокЗадачПоДолжности.Параметры.УстановитьЗначениеПараметра("Должность", объект.Ссылка);
	Получитькомпоненту(); 
	Элементы.QRКод.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	
	
	
КонецПроцедуры 
 
&НаСервере
Процедура Получитькомпоненту()
	ТекстОшибки = "";
	
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(ТекстОшибки); 
	Штрихкод.Ширина = 250; 
	Штрихкод.Высота = 250;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = "{ ""id_doc"":"+ """" + Объект.Код + """" + ",""type"":" +" ""Должность""}";
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод,Истина);
	
	QRкод = ПоместитьВоВременноеХранилище(КартинкаШтрихКод,УникальныйИдентификатор);
	//возврат истина;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПолучитьПараметрыДолжности();
КонецПроцедуры
&НаКлиенте
Процедура СписокОкладовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СписокОкладовОбработкаВыбораНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокОкладовОбработкаВыбораНаСервере()
	//TODO: Вставить содержимое обработчика
КонецПроцедуры


&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьПараметрыДолжности(ТекущийОбъект.Ссылка, Отказ);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПолучитьПараметрыДолжности();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если Объект.СпособНачисленияСдельнойОплаты <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияСдельнойОплаты.ПроцентСПродажЗаВычетомОклада") 
		И Объект.СпособНачисленияСдельнойОплаты <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияСдельнойОплаты.ПроцентСПродаж") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидАналитики");	
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособНачисленияОкладаПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура СпособНачисленияСдельнойОплатыПриИзменении(Элемент)
	
	ПолучитьПараметрыДолжности();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы



#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ИсторияИзменений(Команда)
	ПараметрыОткрытия = Новый Структура("Отбор", Новый Структура("Должность", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.ПараметрыДолжностей.ФормаСписка", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	//Элементы = Форма.Элементы;
	//Объект = Форма.Объект;
	//
	//Элементы.ГруппаПараметрыОклада.Видимость = ЗначениеЗаполнено(Объект.СпособНачисленияОклада);
	//Элементы.ГруппаПараметрыСделки.Видимость = ЗначениеЗаполнено(Объект.СпособНачисленияСдельнойОплаты);
	//
	//ЕстьПроцентСПродаж = Объект.СпособНачисленияСдельнойОплаты = ПредопределенноеЗначение("Перечисление.СпособыНачисленияСдельнойОплаты.ПроцентСПродажЗаВычетомОклада")
	//	ИЛИ Объект.СпособНачисленияСдельнойОплаты = ПредопределенноеЗначение("Перечисление.СпособыНачисленияСдельнойОплаты.ПроцентСПродаж");
	//
	//
	//Элементы.ГруппаПроцентОтПродаж.Видимость = ЕстьПроцентСПродаж;
	//Элементы.Ставка.Видимость = Объект.СпособНачисленияСдельнойОплаты = ПредопределенноеЗначение("Перечисление.СпособыНачисленияСдельнойОплаты.ПоЧасам");
	//
	//Элементы.ВычитатьНеявкиИзСдельнойОплаты.Видимость = ЕстьПроцентСПродаж;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
Процедура ПолучитьПараметрыДолжности()
	
	Если НЕ ИспользоватьПараметрыДолжности() Тогда
		Возврат
	КонецЕсли;
	
	Срез = РегистрыСведений.ПараметрыДолжностей.СрезПоследних(КонецДня(ТекущаяДата()), Новый Структура("Должность", Объект.Ссылка));
	Если Срез.Количество() <> 0 Тогда
		Запись = Срез[Срез.Количество() - 1];
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Запись);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьПараметрыДолжности()

	Возврат ЗначениеЗаполнено(Объект.СпособНачисленияСдельнойОплаты) ИЛИ ЗначениеЗаполнено(Объект.СпособНачисленияОклада);

КонецФункции // ИспользоватьПараметрыДолжности()


&НаСервере
Процедура ЗаписатьПараметрыДолжности(Ссылка, Отказ = Ложь)

	Если НЕ ИспользоватьПараметрыДолжности() Тогда
		Возврат
	КонецЕсли;
	
	Срез = РегистрыСведений.ПараметрыДолжностей.СрезПоследних(КонецДня(ТекущаяДата()), Новый Структура("Должность", Ссылка));
	Если Срез.Количество() <> 0 Тогда
		Запись = Срез[Срез.Количество() - 1];
		ТекущиеПараметры = Новый Структура("Процент,Ставка,ВидАналитики,Оклад,НормироватьОтработанноеВремя");
		ЗаполнитьЗначенияСвойств(ТекущиеПараметры, ЭтаФорма);
		
		
		
		Если дт_ОбщегоНазначенияКлиентСервер.СравнитьСтруктуры(ТекущиеПараметры, Запись) Тогда
			Возврат
		КонецЕсли;
		
	КонецЕсли;
		
	ЗаписатьПараметрыДолжности_Продолжение(Ссылка, Отказ);
	
КонецПроцедуры


&НаСервере
Процедура ЗаписатьПараметрыДолжности_Продолжение(Ссылка, Отказ)

	Запись = РегистрыСведений.ПараметрыДолжностей.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, ЭтаФорма);
	Запись.Должность = Ссылка;
	Запись.Период = ТекущаяДата();
	Попытка
	
		Запись.Записать(Истина);
	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон("Не удалось записать параметры должности. %1",
				ОписаниеОшибки()),
			,
			,
			,
			Отказ
		);
			
	КонецПопытки;
		
	

КонецПроцедуры // ЗаписатьПараметрыДолжности_Продолжение()

&НаКлиенте
Процедура СписокСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СсылкаДляОткрытия=Элементы.СписокСотрудников.ТекущиеДанные[СтрЗаменить(Поле.Имя,Элемент.имя,"")];
	ПараметрыФормы = Новый Структура("Ключ", СсылкаДляОткрытия);
	Если ТипЗнч(СсылкаДляОткрытия)=тип("справочникСсылка.Сотрудники") Тогда
		ИмяФормыДокумента="справочник.Сотрудники.Форма.ФормаЭлемента";
	ИначеЕсли ТипЗнч(СсылкаДляОткрытия)=тип("ДокументСсылка.КадровыйПриказ") Тогда
		ИмяФормыДокумента="Документ.КадровыйПриказ.Форма.ФормаДокумента";
		//Возврат;
	КонецЕсли;
	ФормаДокумента = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	ФормаДокумента.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура СписокОбязанностейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СсылкаДляОткрытия=Элементы.СписокОбязанностей.ТекущиеДанные[СтрЗаменить(Поле.Имя,Элемент.имя,"")];
	ПараметрыФормы = Новый Структура("Ключ", СсылкаДляОткрытия);
	Если ТипЗнч(СсылкаДляОткрытия)=тип("справочникСсылка.Обязанности") Тогда
		ИмяФормыДокумента="справочник.Обязанности.Форма.ФормаЭлемента";
	Иначе
		Возврат;
	КонецЕсли;
	ФормаДокумента = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	ФормаДокумента.Открыть();
КонецПроцедуры



&НаКлиенте
Процедура ДобавитьОбязанность(Команда)
	ОписаниеВыбора = Новый ОписаниеОповещения("ОбработатьВыборОбязанности",ЭтаФорма);
	//ОткрытьФорму("");
	ОткрытьФорму("Справочник.Обязанности.ФормаВыбора",,,,,,
	ОписаниеВыбора,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Элементы.СписокОбязанностей.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОбязанности(РезультатЗакрытия,ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	ЗаписьДолжности(РезультатЗакрытия);
	Элементы.СписокОбязанностей.Обновить();
КонецПроцедуры

Процедура ЗаписьДолжности(Результат)
	Отбор = Новый Структура();
	Отбор.Вставить("Должность", Объект.Ссылка);
	ОбОбъект = Результат.ссылка.ПолучитьОбъект();
	НайденныеСтроки = ОбОбъект.СписокДолжностей.НайтиСтроки(Отбор);
	Если  НайденныеСтроки.Количество() = 0 тогда
		НоваяСтрока = ОбОбъект.СписокДолжностей.Добавить();
		НоваяСтрока.Должность = Объект.Ссылка;
		ОбОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВОтдел(Команда)
	ОписаниеВыбора = Новый ОписаниеОповещения("ОбработатьВыборОтдела",ЭтаФорма);
	//ОткрытьФорму("");
	ОткрытьФорму("Справочник.подразделения.ФормаВыбора",,,,,,
	ОписаниеВыбора,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Элементы.СписокОбязанностей.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОтдела(РезультатЗакрытия,ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	ЗаписьОтдела(РезультатЗакрытия);
	Элементы.СписокОкладов.Обновить();
КонецПроцедуры

Процедура ЗаписьОтдела(Результат)
	Отбор = Новый Структура();
	Отбор.Вставить("Должность", Объект.Ссылка);
	ОбОбъект = Результат.ссылка.ПолучитьОбъект();
	НайденныеСтроки = ОбОбъект.Должности.НайтиСтроки(Отбор);
	Если  НайденныеСтроки.Количество() = 0 тогда
		НоваяСтрока = ОбОбъект.Должности.Добавить();
		НоваяСтрока.Должность = Объект.Ссылка;
		ОбОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Элементы.СписокОкладов.Обновить();
КонецПроцедуры


&НаКлиенте
Процедура СписокЗадачПоДолжностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СсылкаДляОткрытия    = Элементы.СписокЗадачПоДолжности.ТекущиеДанные[СтрЗаменить(Поле.Имя,Элемент.имя,"")];
	ПараметрыФормы       = Новый Структура("Ключ", СсылкаДляОткрытия);
	Если ТипЗнч(СсылкаДляОткрытия)=тип("ДокументСсылка.ЧекЛист") Тогда
		ИмяФормыДокумента="Документ.чекЛист.Форма.ФормаДокумента";
		ИначеЕсли ТипЗнч(СсылкаДляОткрытия)=тип("СправочникСсылка.Обязанности") Тогда
		ИмяФормыДокумента="Справочник.Обязанности.Форма.ФормаЭлемента";
		Возврат;
	КонецЕсли;
	ФормаДокумента = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	ФормаДокумента.Открыть();

КонецПроцедуры

#КонецОбласти