#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	#Область СлужебныеПроцедурыИФункции

	#Область Печать

	Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "ТОРГ12", "Товарная накладная" + ?(ПараметрыПечати["ВыводитьУслуги"], "",
			" без услуг") + " (ТОРГ-12)", СформироватьПечатнуюФормуТОРГ12(СтруктураТипов, ОбъектыПечати,
			ПараметрыПечати));

	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "СчетФактура", "Счет-фактура", СформироватьПечатнуюФормуСчетФактура(СтруктураТипов,
			ОбъектыПечати, ПараметрыПечати));

	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УПД") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "УПД", "Универсальный передаточный документ (УПД)", СформироватьПечатнуюФормуУПД(
				СтруктураТипов, ОбъектыПечати, ПараметрыПечати));

	КонецЕсли;

		
	//ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, СтруктураТипов, КоллекцияПечатныхФорм);

КонецПроцедуры

	#Область Печать_ТОРГ12

	Функция СформироватьПечатнуюФормуТОРГ12(СтруктураТипов, ОбъектыПечати, ПараметрыПечати,
		КомплектыПечати = Неопределено) Экспорт

		УстановитьПривилегированныйРежим(Истина);

		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ПолеСлева = 5;
		ТабличныйДокумент.ПолеСправа = 5;
		ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
		ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОРГ12_2";

		НомерТипаДокумента = 0;

		Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

			НомерТипаДокумента = НомерТипаДокумента + 1;
			Если НомерТипаДокумента > 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);

			ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТОРГ12(ПараметрыПечати,
				СтруктураОбъектов.Значение);

			ЗаполнитьТабличныйДокументТОРГ12(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати,
				КомплектыПечати);
		КонецЦикла;
		Возврат ТабличныйДокумент;

	КонецФункции

	Процедура ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
		СведенияОПоставщике       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация,
			ДанныеПечати.Дата, , ДанныеПечати.БанковскийСчетОрганизации);
		СведенияОПокупателе       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,
			ДанныеПечати.Дата, , ДанныеПечати.БанковскийСчетКонтрагента);
		СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,
			ДанныеПечати.Дата, , ДанныеПечати.БанковскийСчетГрузополучателя);
		СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель,
			ДанныеПечати.Дата, , ДанныеПечати.БанковскийСчетГрузоотправителя);

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета,
			ДанныеПечати.Ссылка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НомерДокумента", дт_ПрефиксацияКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
		СтруктураПараметров.Вставить("ДатаДокумента", ДанныеПечати.Дата);

		Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
			СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОПоставщике));
		Иначе
			СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОГрузоотправитель,
				"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
		КонецЕсли;

		СтруктураПараметров.Вставить("ПредставлениеПодразделения", ДанныеПечати.Подразделение);
		СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
		СтруктураПараметров.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОПоставщике));
		СтруктураПараметров.Вставить("ПредставлениеПлательщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОПокупателе));
		СтруктураПараметров.Вставить("ОрганизацияПоОКПО", СведенияОГрузоотправитель.КодПоОКПО);
		СтруктураПараметров.Вставить("ВидДеятельностиПоОКДП", СведенияОПоставщике.КодОКВЭД);
		СтруктураПараметров.Вставить("ГрузополучательПоОКПО", СведенияОГрузополучателе.КодПоОКПО);
		СтруктураПараметров.Вставить("ПоставщикПоОКПО", СведенияОПоставщике.КодПоОКПО);
		СтруктураПараметров.Вставить("ПлательщикПоОКПО", СведенияОПокупателе.КодПоОКПО);
		СтруктураПараметров.Вставить("ОснованиеНомер", ДанныеПечати.ОснованиеНомер);
		СтруктураПараметров.Вставить("ОснованиеДата", ДанныеПечати.ОснованиеДата);
		СтруктураПараметров.Вставить("ТранспортнаяНакладнаяНомер", "");
		СтруктураПараметров.Вставить("ТранспортнаяНакладнаяДата", "");
		СтруктураПараметров.Вставить("АдресДоставки", ФормированиеПечатныхФорм.АдресДоставки(ДанныеПечати));

		Если ЗначениеЗаполнено(ДанныеПечати.Основание) И ТипЗнч(ДанныеПечати.Основание) = Тип(
			"ДокументСсылка.ПредварительныйСчет") Тогда

			ДанныеОснования = Новый Структура("Номер,Дата", ДанныеПечати.ОснованиеНомер, ДанныеПечати.ОснованиеДата);
			СтруктураПараметров.Вставить("Основание", Документы.ПредварительныйСчет.СформироватьЗаголовокДокумента(
				ДанныеОснования, Метаданные.Документы.ПредварительныйСчет.Синоним));

			СтруктураПараметров.Вставить("ОснованиеНомер", дт_ПрефиксацияКлиентСервер.НомерНаПечать(
				ДанныеПечати.ОснованиеНомер));

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
		ТабличныйДокумент.Вывести(ОбластьМакета);

	КонецПроцедуры

	Функция ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны)

		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

		ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"), НСтр("ru = 'г.'"), НСтр("ru = 'года'"));
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель = СтрНайти(ПолнаяДатаДокумента, " ");
		ВторойРазделитель = СтрНайти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ")
			+ ПервыйРазделитель;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """");
		СтруктураПараметров.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1,
			ВторойРазделитель - ПервыйРазделитель - 1));
		СтруктураПараметров.Вставить("ДатаДокументаГод", Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
	
	// Главный бухгалтер
		СтруктураПараметров.Вставить("ФИОГлавБухгалтера", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(
			ДанныеПечати.ГлавныйБухгалтер, ДанныеПечати.Дата));
	
	// Отпуск товара разрешил
		СтруктураПараметров.Вставить("ФИОРуководителя", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(
			ДанныеПечати.Руководитель, ДанныеПечати.Дата));
		СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.ДолжностьРуководителя);

		СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик,
			ДанныеПечати.Дата));
		СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	
	// Доверенность
		СтруктураПараметров.Вставить("ДоверенностьНомер", ДанныеПечати.ДоверенностьНомер);
		СтруктураПараметров.Вставить("ДоверенностьДата", Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"));
		СтруктураПараметров.Вставить("ДоверенностьВыдана", ДанныеПечати.ДоверенностьВыдана);
		СтруктураПараметров.Вставить("ДоверенностьЧерезКого", ДанныеПечати.ДоверенностьЛицо);

		Если ИтоговыеСуммы.ИтогоКоличествоМест > 0 Тогда
			СтруктураПараметров.Вставить("ВсегоМестПрописью", ЧислоПрописью(ИтоговыеСуммы.ИтогоКоличествоМест, ,
				",,,,,,,,0"));
		КонецЕсли;

		Если ИтоговыеСуммы.ИтогоМассаНетто > 0 Тогда
			ПараметрыМассыПрописью = ПараметрыМассыПрописью(ИтоговыеСуммы.ИтогоМассаНетто, КоэффициентПересчетаВТонны);
			СтруктураПараметров.Вставить("МассаНеттоПрописью", ЧислоПрописью(
			ИтоговыеСуммы.ИтогоМассаНетто * ПараметрыМассыПрописью.Коэффициент, "ДП=Истина",
				ПараметрыМассыПрописью.Формат));
		КонецЕсли;

		Если ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
			ПараметрыМассыПрописью = ПараметрыМассыПрописью(ИтоговыеСуммы.ИтогоМассаБрутто, КоэффициентПересчетаВТонны);
			СтруктураПараметров.Вставить("МассаБруттоПрописью", ЧислоПрописью(
			ИтоговыеСуммы.ИтогоМассаБрутто * ПараметрыМассыПрописью.Коэффициент, "ДП=Истина",
				ПараметрыМассыПрописью.Формат));
		КонецЕсли;

		СтруктураПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью",
			ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью);
		СтруктураПараметров.Вставить("СуммаПрописью", ИтоговыеСуммы.СуммаПрописью);

		ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);

		Возврат ОбластьМакета;

	КонецФункции

	Процедура ЗаполнитьТабличныйДокументТОРГ12(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати,
		КомплектыПечати)

		ВалютаРегламентированногоУчета = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();//Константы.ВалютаРегламентированногоУчета.Получить();
		КоэффициентПересчетаВТонны     = 1;//НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());

		ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
		ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		ВыводитьГТД = ?(ПараметрыПечати.Свойство("ВыводитьГТД"), ПараметрыПечати.ВыводитьГТД, Ложь);

		Если ВыводитьГТД Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12_ГТД");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12");
		КонецЕсли;

		ДатаНачалаВыводаАртикулаВНаименовании = ФормированиеПечатныхФорм.ДатаНачалаПримененияФормСАртикуломВНаименовании();

		ПервыйДокумент = Истина;
		Пока ДанныеПечати.Следующий() Цикл
		
		// Для печати комплектов
			Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
				Если КомплектПечатиПоСсылке = Неопределено Тогда
					КомплектПечатиПоСсылке = КомплектыПечати[0];
				КонецЕсли;
				Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
					Продолжить;
				КонецЕсли
				;
			КонецЕсли;

			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоДокументам.Сбросить();
			Если Не ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			//Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			//	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			//		НСтр("ru = 'В документе %1 отсутствуют внеоборотные активы. Печать ТОРГ-12 не требуется'"),
			//		ДанныеПечати.Ссылка);
			//Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 отсутствуют товары. Печать товарной накладной без услуг не требуется'"),
					ДанныеПечати.Ссылка);
			//КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст, ДанныеПечати.Ссылка);
				Продолжить;
			КонецЕсли;

			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

			ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент);

			НомерСтраницы = 1;
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
		// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
			ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
			ОбластьМакетаСтандарт   = Макет.ПолучитьОбласть("Строка");
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьВсего            = Макет.ПолучитьОбласть("Всего");

			ИспользоватьНаборы = Ложь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
				ИспользоватьНаборы = Истина;
				ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
				ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
			КонецЕсли;

			ВыводШапки = 0;

			Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
				ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
			Иначе
				ВыводитьКодНоменклатуры = Истина;
			КонецЕсли;

			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			НомерСтроки = 0;
			ВыводитьАртикул = ДанныеПечати.Дата >= ДатаНачалаВыводаАртикулаВНаименовании;
			ВыводитьНаименованиеПоставщика = ПолучитьФункциональнуюОпцию("дт_ИспользоватьНаименованияПоставщиков")
				И дт_ОбщегоНазначенияВызовСервераПовтИсп.ДатаНачалаУчетаНаименованийПоставщиков() < ДанныеПечати.Дата;

			Пока СтрокаТовары.Следующий() Цикл
			
			//Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
			//	ОбластьМакета = ОбластьМакетаНабор;
			//ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
			//	ОбластьМакета = ОбластьМакетаКомплектующие;
			//Иначе
				ОбластьМакета = ОбластьМакетаСтандарт;
			//КонецЕсли;
			
			//Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			//	ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, Неопределено);
			//Иначе
				НомерСтроки = НомерСтроки + 1;

				ВыводитьАртикулВСтроке = ВыводитьАртикул;
				Если ВыводитьНаименованиеПоставщика И Не СтрокаТовары.ЭтоСобственноеПроизводство Тогда
					ВыводитьАртикулВСтроке = Ложь;
				КонецЕсли;

				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, , , ВыводитьАртикулВСтроке);
			//КонецЕсли;

				Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
					ВыводШапки = 1;
				КонецЕсли;

				Если (НомерСтроки = 1 И ВыводШапки = 0) Или (НомерСтроки = 0 И ВыводШапки = 1) Тогда

					ВыводШапки = 2;

					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
					ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);

				КонецЕсли;

				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				Если НомерСтроки = КоличествоСтрок Тогда
					ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
					ОбластьПодвала = ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет,
						КоэффициентПересчетаВТонны);
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				КонецЕсли;

				Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					Если КоличествоСтрок > 1 Тогда

						ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
						ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);

						ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);

						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
						ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
						ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);

					КонецЕсли;
				КонецЕсли;

				ТабличныйДокумент.Вывести(ОбластьМакета);
			
			//Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
			//КонецЕсли;

			КонецЦикла;
		
		// Выводим итоги по последней странице
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);

			ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
			ОбластьМакета = Макет.ПолучитьОбласть("Всего");
			ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);

			ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
			ОбластьПодвала = ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет,
				КоэффициентПересчетаВТонны);
			ТабличныйДокумент.Вывести(ОбластьПодвала);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
			Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
				И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
				ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало, ,
					ТабличныйДокумент.ВысотаТаблицы);
				Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ОбластьКопирования);
				КонецЦикла;
			КонецЕсли;

			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
				ДанныеПечати.Ссылка);

		КонецЦикла;

	КонецПроцедуры

	#КонецОбласти

	#Область Печать_СчетФактура

	Функция СформироватьПечатнуюФормуСчетФактура(СтруктураТипов, ОбъектыПечати, ПараметрыПечати,
		КомплектыПечати = Неопределено) Экспорт

		УстановитьПривилегированныйРежим(Истина);

		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура";

		СтруктураТиповНаПечать         = Новый Структура;
		МассивСчетФактураВыданный      = Новый Массив;
		МассивСчетФактураКомиссионеру  = Новый Массив;
		МассивСчетФактураПолученный    = Новый Массив;
		ОснованияНаРеализацию          = Новый Массив;
		ОснованияКомиссионеру          = Новый Массив;
		ОснованияСчетФактураПолученный = Новый Массив;

		Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

			ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);

			Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
				Продолжить;
			КонецЕсли;
		
		//Если ИмяОбъекта = "СчетФактураВыданный" Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
		//	
		//ИначеЕсли ИмяОбъекта = "СчетФактураКомиссионеру" Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, СтруктураОбъектов.Значение);
		//	
		//ИначеЕсли ИмяОбъекта = "СчетФактураНаНеподтвержденнуюРеализацию0"
		//		Или ИмяОбъекта = "СчетФактураВыданныйАванс"
		//		Или ИмяОбъекта = "СчетФактураНалоговыйАгент" Тогда
		//		
		//	СтруктураТиповНаПечать.Вставить(ИмяОбъекта, СтруктураОбъектов.Значение);
		//	
		//ИначеЕсли ИмяОбъекта = "ОтчетКомиссионера"
		//		Или (ИмяОбъекта = "ОтчетПоКомиссииМеждуОрганизациями" И ПараметрыПечати.ВидФормы = "Комитент") Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияКомиссионеру, СтруктураОбъектов.Значение);
		//	
		//Иначе

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);
			
		//КонецЕсли;

			Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
				И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда

				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);

			КонецЕсли;

		КонецЦикла;

		Если ОснованияНаРеализацию.Количество() > 0 Тогда

			РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(
			ОснованияНаРеализацию, , ПараметрыПечати.ПечатьВВалюте);

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный,
				РезультатАнализа.СчетаФактурыНаПечать, Истина);

			СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(РезультатАнализа.ТаблицаОшибок, Ложь);

		КонецЕсли
		;
	
	//Если ОснованияКомиссионеру.Количество() > 0 Тогда
	//	
	//	РезультатАнализа = Документы.СчетФактураКомиссионеру.ПолучитьСчетаФактурыНаПечать(
	//		ОснованияКомиссионеру,
	//		ПараметрыПечати.ПечатьВВалюте);
	//	
	//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, РезультатАнализа.СчетаФактурыНаПечать, Истина);
	//	
	//	СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(РезультатАнализа.ТаблицаОшибок, Истина)
	//	
	//КонецЕсли;
	//
	//Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
	//	
	//	РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(
	//		ОснованияСчетФактураПолученный, ПараметрыПечати.ПечатьВВалюте);
	//	
	//	ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
	//	
	//	СообщитьОбОшибкахПечатиСчетФактурыПолученного(РезультатАнализа.ТаблицаОшибок)
	//	
	//КонецЕсли;

		Если МассивСчетФактураВыданный.Количество() > 0 Тогда
			СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
		КонецЕсли;

		Если МассивСчетФактураКомиссионеру.Количество() > 0 Тогда
			СтруктураТиповНаПечать.Вставить("СчетФактураКомиссионеру", МассивСчетФактураКомиссионеру);
		КонецЕсли;

		НомерТипаДокумента = 0;

		Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл

			НомерТипаДокумента = НомерТипаДокумента + 1;
			Если НомерТипаДокумента > 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];

			ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати,
				СтруктураОбъектов.Значение);

			ОпцииПечатиСчетаФактуры = Новый Структура;
			ОпцииПечатиСчетаФактуры.Вставить("СчетФактураНаАванс", ДанныеДляПечати.Свойство("СчетФактураНаАванс"));
			ОпцииПечатиСчетаФактуры.Вставить("СчетФактураНалоговыйАгент", ДанныеДляПечати.Свойство(
				"СчетФактураНалоговыйАгент"));
			ОпцииПечатиСчетаФактуры.Вставить("ПечатьВВалюте", ПараметрыПечати.ПечатьВВалюте);

			ЗаполнитьТабличныйДокументСчетФактура(
			ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ОпцииПечатиСчетаФактуры, КомплектыПечати);

		КонецЦикла;

		Возврат ТабличныйДокумент;

	КонецФункции

	Процедура ЗаполнитьРеквизитыШапкиСчетФактура(ДанныеПечати, ДанныеОснований, СведенияОПоставщике,
		ДанныеКонтрагентов, ТабличныйДокумент, ОпцииПечатиСчетаФактуры)

		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);

		ДействующиеПостановления = ОпцииПечатиСчетаФактуры.ДействующиеПостановления;

		Макет = ОпцииПечатиСчетаФактуры.Макет;
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета,
			ДанныеПечати.Ссылка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);

		НомераДаты = Новый Структура("Номер, Дата, НомерИсправления, ДатаИсправления, РеквизитыОснований");

		НомераДаты.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
		НомераДаты.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД");
		НомераДаты.НомерИсправления = ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--");
		НомераДаты.ДатаИсправления = ?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--");

		Если ДанныеПечати.КорректировочныйСчетФактура Тогда

			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ДанныеОснований.НайтиСледующий(СтруктураПоиска);
			СтрокиОснований = ДанныеОснований.Выбрать();

			РеквизитыОснований = "";

			Пока СтрокиОснований.СледующийПоЗначениюПоля("ИсходныйДокумент") Цикл

				ТекстИсходнойСФ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru=', № %1 от %2, с учетом исправления № %3 от %4'"), НомерСчетаФактурыНаПечать(
					СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения, Истина), Формат(
					СтрокиОснований.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--"), ?(ЗначениеЗаполнено(
					СтрокиОснований.НомерИсправленияСчетаФактуры), СтрокиОснований.НомерИсправленияСчетаФактуры, "--"),
					Формат(СтрокиОснований.ДатаИсправленияСчетаФактуры, "ДЛФ=ДД; ДП=--"));

				РеквизитыОснований = РеквизитыОснований + ТекстИсходнойСФ;

			КонецЦикла;

			Если Не ПустаяСтрока(РеквизитыОснований) Тогда
				РеквизитыОснований = Сред(РеквизитыОснований, 3);
			КонецЕсли;
			НомераДаты.РеквизитыОснований = РеквизитыОснований;

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(НомераДаты);

		СтруктураПараметров = Новый Структура;
	
	// Выводим данные о поставщике.
		ДополнительноеПредставление = "";
		Если ДействующиеПостановления.Постановление914 И СведенияОПоставщике.ОфициальноеНаименование
			<> СведенияОПоставщике.ПолноеНаименование Тогда
			ДополнительноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='(%1)'"), ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование"));
		КонецЕсли;

		ПредставлениеПоставщика = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Продавец: %1 %2'"), СведенияОПоставщике.ОфициальноеНаименование, ДополнительноеПредставление));

		АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Адрес: %1'"), ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));

		ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИНН/КПП продавца: %1%2'"), ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН",
			Ложь), ?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));

		СтруктураПараметров.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		СтруктураПараметров.Вставить("АдресПоставщика", АдресПоставщика);
		СтруктураПараметров.Вставить("ИННПоставщика", ИННПоставщика);

		Если Не ДанныеПечати.КорректировочныйСчетФактура Тогда
		
		// Выводим данные грузоотправителя.
			ТекстГрузоотправителя = "";
			Если ДанныеПечати.ТолькоУслуги Или (ДействующиеПостановления.Постановление1137
				И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс) Или ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
				ТекстГрузоотправителя = "--";
			ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
				ТекстГрузоотправителя = НСтр("ru='он же'");
			Иначе
				ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
			КонецЕсли;

			ПредставлениеГрузоотправителя = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Грузоотправитель и его адрес: %1'"), ТекстГрузоотправителя));

			СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);

			СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='К платежно-расчетному документу № %1'"), ?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу), НСтр(
				"ru='-- от --'"), ДанныеПечати.СтрокаПоДокументу));

			СтруктураПараметров.Вставить("ПоДокументу", СтрокаПоДокументу);

		КонецЕсли;

		ЕстьГрузополучатель = Не ДанныеПечати.КорректировочныйСчетФактура И Не (ДанныеПечати.ТолькоУслуги
			Или (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
			Или ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент);

		ПредставлениеПокупателя       = "";
		ПредставлениеАдресаПокупателя = "";
		ПредставлениеИННКПППокупателя = "";
		ПредставлениеГрузополучателя  = "";

		ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);

		Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл

			СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;

			ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1; %2'"), ПредставлениеПокупателя, ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОПокупателе, "ПолноеНаименование", Ложь));

			ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1; %2'"), ПредставлениеАдресаПокупателя, ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОПокупателе, "ЮридическийАдрес", Ложь));

			ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1; %2%3'"), ПредставлениеИННПокупателя, ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОПокупателе, "ИНН", Ложь), ?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));

			Если ЕстьГрузополучатель Тогда
				СведенияОГрузополучателе = СтрокаТаблицы.СведенияОГрузополучателе;
				ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1; %2'"), ПредставлениеГрузополучателя, ФормированиеПечатныхФорм.ОписаниеОрганизации(
					СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь));
			КонецЕсли;

		КонецЦикла;

		ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Покупатель: %1'"), Сред(ПредставлениеПокупателя, 3));

		ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Адрес: %1'"), Сред(ПредставлениеАдресаПокупателя, 3));

		ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИНН/КПП покупателя: %1'"), Сред(ПредставлениеИННПокупателя, 3));

		ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Грузополучатель и его адрес: %1'"), ?(ЕстьГрузополучатель, Сред(ПредставлениеГрузополучателя, 3),
			"--"));

		СтруктураПараметров.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
		СтруктураПараметров.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
		СтруктураПараметров.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
		Если Не ДанныеПечати.КорректировочныйСчетФактура Тогда
			СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
		КонецЕсли;

		Если ДействующиеПостановления.Постановление1137 И ЗначениеЗаполнено(ДанныеПечати.Валюта)
			И ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда

			СтруктураПараметров.Вставить("Валюта", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Валюта: наименование, код %1, %2'"), ДанныеПечати.ВалютаНаименованиеПолное,
				ДанныеПечати.ВалютаКод));

		ИначеЕсли ДействующиеПостановления.Постановление1137 Тогда
			СтруктураПараметров.Вставить("Валюта", НСтр("ru='Валюта: наименование, код Российский рубль, 643'"));
		КонецЕсли;

		СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
		ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
		Если ДействующиеПостановления.Постановление981 Тогда
			ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Идентификатор государственного контракта, договора (соглашения) (при наличии): %1'"), СокрЛП(
				СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
		Иначе
			ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Идентификатор государственного контракта, договора (соглашения): %1'"), СокрЛП(
				СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
		КонецЕсли;
		СтруктураПараметров.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);

		Если ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
		// для печати подвала берем сведения об организации из сведений о покупателе
			СведенияОПоставщике = СведенияОПокупателе;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
		ТабличныйДокумент.Вывести(ОбластьМакета);

	КонецПроцедуры

	Процедура ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации)

		СтруктураПараметров = Новый Структура;

		Если ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(СведенияОбОрганизации.ЮрФизЛицо) Тогда
			СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
			СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
		Иначе
			СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
			СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
		КонецЕсли;

		ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);

	КонецПроцедуры

	Процедура ЗаполнитьТабличныйДокументСчетФактура(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати,
		ОпцииПечатиСчетаФактуры, КомплектыПечати = Неопределено) Экспорт

		Перем ВыборкаОснований, ВыборкаКонтрагентов;

		ВалютаРегламентированногоУчета = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

		ДатаНачалаПримененияПостановления1137 = '20100101'; //Константы.ДатаНачалаПримененияПостановления1137.Получить();

		Макет451      = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура451");
		Макет1137     = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137");
		Макет1137_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_625");
		Макет981      = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура981");
		МакетКорр     = УправлениеПечатью.МакетПечатнойФормы(
			"Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137");
		МакетКорр_625 = УправлениеПечатью.МакетПечатнойФормы(
			"Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_625");
		МакетКорр_981 = УправлениеПечатью.МакетПечатнойФормы(
			"Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный981");

		ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
		ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") Тогда
			ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;
		Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
			ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;

		ЕстьПостановление914 = Ложь;
		ЕстьПостановление981 = Ложь;
		ЕстьПостановление1137_625 = Ложь;
		ЕстьПостановление1137 = Ложь;

		ПервыйДокумент = Истина;
		Пока ДанныеПечати.Следующий() Цикл
		
		// Для печати комплектов
			Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда

				КомплектПечатиПоСсылке = Неопределено;

				СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
				ВыборкаОснований.НайтиСледующий(СтруктураПоиска);
				СтрокиОснований = ВыборкаОснований.Выбрать();

				Если СтрокиОснований.Следующий() Тогда
					КомплектПечатиПоСсылке = КомплектыПечати.Найти(СтрокиОснований.ДокументОснование, "Ссылка");
				КонецЕсли;

				Если КомплектПечатиПоСсылке = Неопределено Тогда
					КомплектПечатиПоСсылке = КомплектыПечати[0];
				КонецЕсли;
				Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
					Продолжить;
				КонецЕсли
				;
			КонецЕсли;

			Если ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры) И ОпцииПечатиСчетаФактуры.ПечатьВВалюте
				И ДанныеПечати.ВалютаСчетаФактуры = ВалютаРегламентированногоУчета Тогда

				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для %1 указана валюта: рубли. Не требуется печатать счет-фактуру в иностранной валюте.'"),
					ДанныеПечати.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст, ДанныеПечати.Ссылка);

			ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры) И Не ОпцииПечатиСчетаФактуры.ПечатьВВалюте
				И ДанныеПечати.ВалютаСчетаФактуры <> ВалютаРегламентированногоУчета Тогда

				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для %1 указана иностранная валюта. Не требуется печатать счет-фактуру в рублях.'"),
					ДанныеПечати.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст, ДанныеПечати.Ссылка);

			Иначе

				ДействующиеПостановления = Новый Структура;
				ДействующиеПостановления.Вставить("Постановление914", ДанныеПечати.Дата
					< ДатаНачалаПримененияПостановления1137);
				ДействующиеПостановления.Вставить("Постановление1137", Не (ДанныеПечати.Дата
					< ДатаНачалаПримененияПостановления1137));
				ДействующиеПостановления.Вставить("Постановление1137_625", ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата,
					ДанныеПечати.ДатаИсправления));
				ДействующиеПостановления.Вставить("Постановление981", ДействуетПостановление981(ДанныеПечати.Дата,
					ДанныеПечати.ДатаИсправления));

				ОпцииПечатиСчетаФактуры.Вставить("ДействующиеПостановления", ДействующиеПостановления);

				Если ДанныеПечати.КорректировочныйСчетФактура Тогда
					Если ДействующиеПостановления.Постановление981 Тогда
						Макет = МакетКорр_981;
						ЕстьПостановление981 = Истина;
					ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
						Макет = МакетКорр_625;
						ЕстьПостановление1137_625 = Истина;
					Иначе
						Макет = МакетКорр;
						ЕстьПостановление1137 = Истина;
					КонецЕсли;
				ИначеЕсли ДействующиеПостановления.Постановление914 Тогда
					Макет = Макет451;
					ЕстьПостановление914 = Истина;
				ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
					Макет = Макет981;
					ЕстьПостановление981 = Истина;
				ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
					Макет = Макет1137_625;
					ЕстьПостановление1137_625 = Истина;
				Иначе
					Макет = Макет1137;
					ЕстьПостановление1137 = Истина;
				КонецЕсли;

				Если (ЕстьПостановление914 И ЕстьПостановление1137) Или (ЕстьПостановление914 И ЕстьПостановление981)
					Или ((ЕстьПостановление1137 Или ЕстьПостановление1137_625) И ЕстьПостановление981) Тогда

					Текст = НСтр(
						"ru = 'Недоступна одновременная печать счетов-фактур, сформированных по разным постановлениям Правительства РФ'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст, ДанныеПечати.Ссылка);

					ТабличныйДокумент.Очистить();
					Прервать;

				КонецЕсли;

				ОпцииПечатиСчетаФактуры.Вставить("Макет", Макет);

				Если Не ПервыйДокумент Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;

				ПервыйДокумент = Ложь;
				НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			// Выводим общие реквизиты шапки
				СведенияОбОрганизации = Новый Структура;
				ЗаполнитьРеквизитыШапкиСчетФактура(
				ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, ВыборкаКонтрагентов, ТабличныйДокумент,
					ОпцииПечатиСчетаФактуры);
			
			// Выводим заголовок таблицы
				ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
				Если ДействующиеПостановления.Постановление914 И Не ДанныеПечати.КорректировочныйСчетФактура Тогда
					СтруктураПараметров = Новый Структура;
					Если ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
						СтруктураПараметров.Вставить("Валюта", ДанныеПечати.Валюта);
					Иначе
						СтруктураПараметров.Вставить("Валюта", ВалютаРегламентированногоУчета);
					КонецЕсли;
					ЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				КонецЕсли;
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

				НомерСтраницы = 1;
			
			// Инициализация итогов в документе
				ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			
			// Создаем массив для проверки вывода
				МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("Строка");
				ОбластьИтого = Макет.ПолучитьОбласть("Итого");
				ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");

				СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
				ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);

				ИспользоватьНаборы = Ложь;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
					ИспользоватьНаборы = Истина;
					ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
					ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
				КонецЕсли;

				ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации);

				ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ДействующиеПостановления.Постановление981);

				СтрокаТовары = ВыборкаПоДокументам.Выбрать();
				КоличествоСтрок = СтрокаТовары.Количество();
				ТолькоСтавкаБезНДС = Истина;
				НомерСтроки = 0;
				Пока СтрокаТовары.Следующий() Цикл
				
				//Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				//	ОбластьМакета = ОбластьМакетаНабор;
				//ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				//	ОбластьМакета = ОбластьМакетаКомплектующие;
				//Иначе
					ОбластьМакета = ОбластьМакетаСтандарт;
				//КонецЕсли;
				
				//Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				//	ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, Неопределено, ДанныеПечати.КорректировочныйСчетФактура, ВыводитьКодыТНВЭД);
				//Иначе
					НомерСтроки = НомерСтроки + 1;
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки,
						ДанныеПечати.КорректировочныйСчетФактура, ВыводитьКодыТНВЭД);
					ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета);
				//КонецЕсли;

					СтруктураПараметров = Новый Структура;
					Если СтрокаТовары.СтавкаНДС = Неопределено Тогда //Перечисления.СтавкиНДС.БезНДС Тогда
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='без НДС'"));
						СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru='без НДС'"));
					ИначеЕсли СтрокаТовары.СтавкаНДС = 0 Тогда //Перечисления.СтавкиНДС.НДС0 Тогда
						СтруктураПараметров.Вставить("СуммаНДС", 0);
						ТолькоСтавкаБезНДС = Ложь;
					Иначе
						ТолькоСтавкаБезНДС = Ложь;
					КонецЕсли;
				
				//Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				//	Если ДействующиеПостановления.Постановление914 
				//		ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс
				//		ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
				//		СтруктураПараметров.Вставить("Акциз", "--");
				//	Иначе
				//		СтруктураПараметров.Вставить("Акциз", НСтр("ru='без акциза'"));
				//	КонецЕсли;
				//КонецЕсли;

					МассивВыводимыхОбластей.Очистить();
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);

					Если НомерСтроки = КоличествоСтрок Тогда
						МассивВыводимыхОбластей.Добавить(ОбластьИтого);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					КонецЕсли;

					Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда

						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

						Если Не ДействующиеПостановления.Постановление914 Тогда

							ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
							ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер,
								ДанныеПечати.ИндексПодразделения);
							ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
							ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;

							ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);

						КонецЕсли;

						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

					КонецЕсли;

					ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				
				//Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				//КонецЕсли;

				КонецЦикла;
			
			// Выводим итоги по документу
				ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);

				Если ДействующиеПостановления.Постановление1137 И (Не ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
					И (Не ДанныеПечати.КорректировочныйСчетФактура) И ТолькоСтавкаБезНДС Тогда
					ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru='без НДС'");
				КонецЕсли;
				ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
				ТабличныйДокумент.Вывести(ОбластьИтого);

				ТабличныйДокумент.Вывести(ОбластьПодвала);
			
			// Выведем нужное количество экземпляров (при печати комплектов)
				Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
					И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
					ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало, ,
						ТабличныйДокумент.ВысотаТаблицы);
					Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабличныйДокумент.Вывести(ОбластьКопирования);
					КонецЦикла;
				КонецЕсли;

				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
					ДанныеПечати.Ссылка);

			КонецЕсли;

		КонецЦикла;

	КонецПроцедуры

	Процедура СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(ТаблицаОшибок, ПечатьКомиссионеру = Ложь)

		Если ПечатьКомиссионеру Тогда
			ПредставлениеДокумента = НСтр("ru='счет-фактура комиссионера'");
		Иначе
			ПредставлениеДокумента = НСтр("ru='счет-фактура'");
		КонецЕсли;

		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл

			ТекстОшибки = "";
			ПутьКДанным = "";

			Если СтрокаТаблицы.НеТребуетсяСчетФактура Тогда
				ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2'");
			ИначеЕсли СтрокаТаблицы.НеТребуетсяПечатьВВалюте Тогда
				ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2 в иностранной валюте'");
			ИначеЕсли СтрокаТаблицы.НеВыставленСчетФактура Тогда
				ТекстОшибки = НСтр("ru = 'Для документа %1 не введен %2'");
				ПутьКДанным = "ТекстСчетФактура";
			КонецЕсли;

			Если Не ПустаяСтрока(ТекстОшибки) Тогда

				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки, СтрокаТаблицы.ДокументОснование, ПредставлениеДокумента);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаТаблицы.ДокументОснование, , ПутьКДанным);

			КонецЕсли;

		КонецЦикла;

	КонецПроцедуры

	Процедура СообщитьОбОшибкахПечатиСчетФактурыПолученного(ТаблицаОшибок)

		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл

			ТекстОшибки = "";
			ПутьКДанным = "";

			Если СтрокаТаблицы.НеТребуетсяСчетФактура Тогда
				Продолжить;
			ИначеЕсли СтрокаТаблицы.НеТребуетсяПечатьВВалюте Тогда
				ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2 в иностранной валюте'");
			ИначеЕсли СтрокаТаблицы.НеВыставленСчетФактура Тогда
				ТекстОшибки = НСтр("ru = 'Для документа %1 не введен %2'");
				ПутьКДанным = "ПредъявленСчетФактура";
			КонецЕсли;

			Если Не ПустаяСтрока(ТекстОшибки) Тогда

				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки, СтрокаТаблицы.ДокументОснование, НСтр("ru='счет-фактура посредника'"));

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаТаблицы.ДокументОснование, ПутьКДанным);

			КонецЕсли;

		КонецЦикла;

	КонецПроцедуры

	Функция СтруктураИтоговыеСуммы()

		Структура = Новый Структура;

		СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();

		Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
			Структура.Вставить("Итого" + Элемент.Ключ + "НаСтранице", 0);
			Структура.Вставить("Итого" + Элемент.Ключ, 0);
		КонецЦикла;

		Возврат Структура;

	КонецФункции

	Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)

		СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();

		Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
			ИтоговыеСуммы.Вставить("Итого" + Элемент.Ключ + "НаСтранице", 0);
		КонецЦикла;

	КонецПроцедуры

	Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары)

		СтруктураСуммПоСтроке = СтруктураРесурсовДляИтогов();

		ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтрокаТовары);
		ОкруглитьДоЦелого(СтруктураСуммПоСтроке.КоличествоМест);
		Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				ИтоговыеСуммы["Итого" + Элемент.Ключ + "НаСтранице"] = ИтоговыеСуммы["Итого" + Элемент.Ключ
					+ "НаСтранице"] + Элемент.Значение;
				ИтоговыеСуммы["Итого" + Элемент.Ключ] = ИтоговыеСуммы["Итого" + Элемент.Ключ] + Элемент.Значение;
			КонецЕсли;
		КонецЦикла;

	КонецПроцедуры

	Процедура ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)

		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, , ",,,,,,,,0"));
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(
			ИтоговыеСуммы.ИтогоСуммаСНДС, ВалютаРегламентированногоУчета));

	КонецПроцедуры

	Процедура ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки,
		ВыводитьКодНоменклатуры = Истина, ВыводитьКодТНВД = Неопределено, ДобавлятьПрефиксАртикул = Истина)

		ИспользоватьНаборы = Ложь;//ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");

		ПрефиксИПостфикс = Новый Структура("Префикс, Постфикс", "", ""); //НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);

		Если ДобавлятьПрефиксАртикул Тогда
			ПрефиксИПостфикс.Префикс = СтрокаТовары.Артикул;
			Если Не ПустаяСтрока(ПрефиксИПостфикс.Префикс) Тогда
				ПрефиксИПостфикс.Префикс = ПрефиксИПостфикс.Префикс + " ";
			КонецЕсли;
		КонецЕсли;

		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "НаименованиеПостфикс") Тогда
			Если ЗначениеЗаполнено(СтрокаТовары.НаименованиеПостфикс) Тогда
				ПрефиксИПостфикс.Постфикс = ". " + СтрокаТовары.НаименованиеПостфикс;
			КонецЕсли;
		КонецЕсли;
	
	//Если ИспользоватьНаборы
	//	И СтрокаТовары.ЭтоКомплектующие
	//	И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
	//	И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
	//	   ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
	//	// Область должна остаться незаполненной
	//	ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	//ИначеЕсли ИспользоватьНаборы
	//	И СтрокаТовары.ЭтоНабор
	//	И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
	//	И СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих Тогда
	//	// Область должна остаться незаполненной
	//	ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	//Иначе
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	//КонецЕсли;

		СтруктураПараметров = Новый Структура("КоличествоМест, КоличествоВОдномМесте, НоменклатураКод,КодТНВЭД", 0, 0,
			"", "--");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТовары);
		ОкруглитьДоЦелого(СтруктураПараметров.КоличествоМест);
		СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);

		ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;
		Если ВыводитьКодТНВД <> Неопределено Тогда
			ДополнительныеПараметрыПолученияНаименованияДляПечати.КодТНВЭД = ?(Не ВыводитьКодТНВД.ВыводитьВКолонке
				И ВыводитьКодТНВД.ВыводитьВСтроке, СтрокаТовары.КодТНВЭД, "");
			Если Не ВыводитьКодТНВД.ВыводитьВКолонке Тогда
				СтруктураПараметров.КодТНВЭД = "--";
			КонецЕсли;
		КонецЕсли;

		ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс + НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование, СтрокаТовары.ХарактеристикаНаименование, , ,
			ДополнительныеПараметрыПолученияНаименованияДляПечати) + ПрефиксИПостфикс.Постфикс;

		СтруктураПараметров.Вставить("ПредставлениеНоменклатуры", ПредставлениеНоменклатуры);
		СтруктураПараметров.Вставить("СтавкаНДС", ?(СтрокаТовары.СтавкаНДС = Неопределено, "Без НДС", Строка(
			СтрокаТовары.СтавкаНДС) + "%"));

		Если Не ВыводитьКодНоменклатуры Тогда
			СтруктураПараметров.НоменклатураКод = "";
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);

	КонецПроцедуры

	Функция НомерСчетаФактурыНаПечать(Номер, ИндексПодразделения, УдалитьПользовательскийПрефикс = Истина)

		НомерНаПечать = "";

		Если Номер <> Неопределено Тогда

			НомерНаПечать = дт_ПрефиксацияКлиентСервер.НомерНаПечать(Номер, Ложь, УдалитьПользовательскийПрефикс);

			ПозицияРазделителя = СтрНайти(НомерНаПечать, "-");
			Префикс = Лев(НомерНаПечать, ПозицияРазделителя);
			НомерБезПрефикса = Сред(НомерНаПечать, ПозицияРазделителя + 1);

			Если Лев(НомерБезПрефикса, 1) = "И" Тогда
				НомерНаПечать = Префикс + Сред(НомерБезПрефикса, 2);
			КонецЕсли;
			Если ЗначениеЗаполнено(ИндексПодразделения) Тогда
				НомерНаПечать = НомерНаПечать + "/" + ИндексПодразделения;
			КонецЕсли;

		КонецЕсли;

		Возврат НомерНаПечать;

	КонецФункции

	#КонецОбласти

	#Область Печать_УПД

	Функция СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено,
		КомплектыПечати = Неопределено) Экспорт
		УстановитьПривилегированныйРежим(Истина);

		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПД";

		СтруктураТиповНаПечать              = Новый Структура;
		МассивСчетФактураВыданный           = Новый Массив;
		МассивСчетФактураПолученный         = Новый Массив;
		ОснованияНаРеализацию               = Новый Массив;
		ОснованияСчетФактураПолученный      = Новый Массив;
		ДокументыБезВыданногоСчетаФактуры   = Новый Массив;
		ДокументыБезПолученногоСчетаФактуры = Новый Массив;

		Если ПараметрыПечати = Неопределено Тогда
			ПараметрыПечати = Новый Структура;
		КонецЕсли;

		Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

			ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);

			Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
				Продолжить;
			КонецЕсли;

			Если ИмяОбъекта = "СчетФактураВыданный" Тогда

				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);

			Иначе

				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);

			КонецЕсли;

			Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
				И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда

				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);
			КонецЕсли;

		КонецЦикла;
	
	//Если ОснованияНаРеализацию.Количество() > 0 Тогда
	//	
	//	РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(ОснованияНаРеализацию);
	//	
	//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
	//	
	//	Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
	//		Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
	//			ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	//Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
	//	
	//	РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(ОснованияСчетФактураПолученный);
	//	
	//	ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
	//	
	//	Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
	//		Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
	//			ДокументыБезПолученногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	//Если МассивСчетФактураВыданный.Количество() > 0 Тогда
	//	СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	//КонецЕсли;
		ДокументыБезВыданногоСчетаФактуры = ОснованияНаРеализацию;

		Для Каждого Документ Из ДокументыБезВыданногоСчетаФактуры Цикл

			ИмяОбъекта = Документ.Метаданные().Имя;
			Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
				СтруктураТиповНаПечать[ИмяОбъекта].Добавить(Документ);
			Иначе
				МассивДокументовТипа = Новый Массив;
				МассивДокументовТипа.Добавить(Документ);
				СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
			КонецЕсли;

		КонецЦикла;

		НомерТипаДокумента = 0;

		Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл

			НомерТипаДокумента = НомерТипаДокумента + 1;
			Если НомерТипаДокумента > 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];

			ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Истина);

			ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати,
				СтруктураОбъектов.Значение);

			ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати,
				ПараметрыПечати);

		КонецЦикла;

		СтруктураТиповНаПечать.Очистить();
		Для Каждого Документ Из ДокументыБезПолученногоСчетаФактуры Цикл

			ИмяОбъекта = Документ.Метаданные().Имя;
			Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
				СтруктураТиповНаПечать[ИмяОбъекта].Добавить(Документ);
			Иначе
				МассивДокументовТипа = Новый Массив;
				МассивДокументовТипа.Добавить(Документ);
				СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
			КонецЕсли;

		КонецЦикла;

		Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл

			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];

			ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Ложь);
			ПараметрыПечати.Вставить("НеВыводитьОсновнойУПД", Истина);

			ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати,
				СтруктураОбъектов.Значение);

			ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати,
				ПараметрыПечати);

		КонецЦикла;

		Возврат ТабличныйДокумент;

	КонецФункции

	Процедура ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОПоставщике, СведенияОПокупателе, Макет,
		ТабличныйДокумент)

		СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
		СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,
			ДанныеПечати.Дата);

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета,
			ДанныеПечати.Ссылка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);

		ПараметрыШапки = Новый Структура;

		ПараметрыШапки.Вставить("Номер", НомерСчетаФактурыНаПечать(ДанныеПечати.Номер,
			ДанныеПечати.ИндексПодразделения, Истина));
		ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДЛФ=ДД"));
		ПараметрыШапки.Вставить("НомерИсправления", ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--"));
		ПараметрыШапки.Вставить("ДатаИсправления", ?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления,
			"ДЛФ=ДД"), "--"));
	
	// Выводим данные о поставщике.
		ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"), СведенияОПоставщике.ОфициальноеНаименование);

		АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"), ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));

		ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1%2'"), ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь), ?(
			Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));

		ПараметрыШапки.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		ПараметрыШапки.Вставить("АдресПоставщика", АдресПоставщика);
		ПараметрыШапки.Вставить("ИННПоставщика", ИННПоставщика);
	
	// Выводим данные грузоотправителя.
		ТекстГрузоотправителя = "";
		Если ДанныеПечати.ТолькоУслуги Или ДанныеПечати.Грузоотправитель = Неопределено Тогда
			ТекстГрузоотправителя = "--";
		ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
			ТекстГрузоотправителя = НСтр("ru='он же'");
		Иначе
			ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
		КонецЕсли;

		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"), ТекстГрузоотправителя);

		ПараметрыШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	
	// Выводим данные грузополучателя и покупателя.
		ТекстГрузополучателя = "--";
		Если Не (ДанныеПечати.ТолькоУслуги Или ДанныеПечати.Грузополучатель = Неопределено) Тогда
			ТекстГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь);
		КонецЕсли;

		ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"), ТекстГрузополучателя);

		ПараметрыШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);

		СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='К платежно-расчетному документу № %1'"), ?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу), НСтр(
			"ru='-- от --'"), ДанныеПечати.СтрокаПоДокументу));
		
		СтрокаПоДокументуОт20241001 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"), ?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу), НСтр(
			"ru='-- от --'"), ДанныеПечати.СтрокаПоДокументу));

		Если НЕ ДействуетПостановление1096(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			ПараметрыШапки.Вставить("ПоДокументу", СтрокаПоДокументу);
		Иначе
			ПараметрыШапки.Вставить("ПоДокументу", СтрокаПоДокументуОт20241001);
		КонецЕсли;
		ПоДокументуОтгрузки = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати,
			"ПредставлениеСтроки5а") И ЗначениеЗаполнено(ДанныеПечати.ПредставлениеСтроки5а),
			ДанныеПечати.ПредставлениеСтроки5а, НСтр("ru='-- от --'"));

		ПараметрыШапки.Вставить("ПоДокументуОтгрузки", ПоДокументуОтгрузки);

		ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"), ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));

		АдресПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1'"), ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));

		ИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1%2'"), ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь), ?(
			Не ПустаяСтрока(ДанныеПечати.КПППокупателя), "/" + ДанныеПечати.КПППокупателя, ""));

		ПараметрыШапки.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
		ПараметрыШапки.Вставить("АдресПокупателя", АдресПокупателя);
		ПараметрыШапки.Вставить("ИННПокупателя", ИННПокупателя);

		ПараметрыШапки.Вставить("Валюта", НСтр("ru='Российский рубль, 643'"));

		СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
		ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
		Если ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"), СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
		Иначе
			ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1'"), СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
		КонецЕсли;
		ПараметрыШапки.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);

		ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);

		ТабличныйДокумент.Вывести(ОбластьМакета);

	КонецПроцедуры

	Процедура ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации, СведенияОКонтрагенте)

		ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		Если ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(СведенияОбОрганизации.ЮрФизЛицо) Тогда
			СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеПечати.Руководитель);
			СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
		Иначе
			СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
			СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
		КонецЕсли;

		СтруктураПараметров.Вставить("ФИОКладовщика", ДанныеПечати.Кладовщик);
		СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);

		ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"), НСтр("ru = 'г.'"), "");
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПозицияРазделителя = СтрНайти(ПолнаяДатаДокумента, " ");
		ПредставлениеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='""%1"" %2года'"), Лев(ПолнаяДатаДокумента, ПозицияРазделителя - 1), Прав(ПолнаяДатаДокумента,
			ДлинаСтроки - ПозицияРазделителя));

		СтруктураПараметров.Вставить("ДатаДокумента", ПредставлениеДаты);

		ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
		Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1, ИНН/КПП %2/%3'"), СведенияОбОрганизации.ОфициальноеНаименование, ИННПоставщика,
				ДанныеПечати.КПППоставщика);
		ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				СведенияОбОрганизации.ОфициальноеНаименование, ИННПоставщика);
		Иначе
			ПредставлениеОрганизации = СведенияОбОрганизации.ОфициальноеНаименование;
		КонецЕсли;
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);

		ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ИНН,", Ложь);
		Если ЗначениеЗаполнено(ДанныеПечати.КПППокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1, ИНН/КПП %2/%3'"), ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,
				"ПолноеНаименование", Ложь), ИННПокупателя, ДанныеПечати.КПППокупателя);
		ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
				ИННПокупателя);
		Иначе
			ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,
				"ПолноеНаименование", Ложь);
		КонецЕсли;
		СтруктураПараметров.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);

		Если ЗначениеЗаполнено(ДанныеПечати.Основание) И ТипЗнч(ДанныеПечати.Основание) = Тип(
			"ДокументСсылка.ПредварительныйСчет") Тогда

			ДанныеОснования = Новый Структура("Номер,Дата", ДанныеПечати.ОснованиеНомер, ДанныеПечати.ОснованиеДата);
			СтруктураПараметров.Вставить("Основание", Документы.ПредварительныйСчет.СформироватьЗаголовокДокумента(
				ДанныеОснования, Метаданные.Документы.ПредварительныйСчет.Синоним));

			СтруктураПараметров.Вставить("ОснованиеНомер", дт_ПрефиксацияКлиентСервер.НомерНаПечать(
				ДанныеПечати.ОснованиеНомер));

		ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата)
			И (ЗначениеЗаполнено(ДанныеПечати.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеПечати.ДоверенностьЛицо)) Тогда

			ТекстОснования = СокрЛП(ДанныеПечати.Основание) + "; "
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'по доверенности №%1 от %2, выданной %3 %4'"), ДанныеПечати.ДоверенностьНомер, Формат(
				ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"), ДанныеПечати.ДоверенностьВыдана,
				ДанныеПечати.ДоверенностьЛицо);
			СтруктураПараметров.Вставить("Основание", ТекстОснования);

		КонецЕсли;

		ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);

	КонецПроцедуры

	Процедура ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати,
		КомплектыПечати = Неопределено, ПараметрыПечати) Экспорт

		ВалютаРегламентированногоУчета = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

		МакетУПД = УправлениеПечатью.МакетПечатнойФормы(
			"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент");
		МакетУПД_625 = УправлениеПечатью.МакетПечатнойФормы(
			"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_625");
		МакетУПД_981 = УправлениеПечатью.МакетПечатнойФормы(
			"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент981");
		МакетУПД_534 = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент534");
		МакетУПД_1096 = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент1096");

		ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
		ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
			ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Иначе
			ВыборкаОснований = Неопределено;
		КонецЕсли;

		ЕстьПостановление534 = Ложь;
		ЕстьПостановление981 = Ложь;
		ЕстьПостановление1137_625 = Ложь;
		ЕстьПостановление1137 = Ложь;
		ЕстьПостановление1096 = Ложь;
	// Печать
		СПечатью = ?(ПараметрыПечати = Неопределено, Ложь, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыПечати, "СПечатью", Ложь));

		ПервыйДокумент = Истина;

		ДатаНачалаВыводаАртикулаВНаименовании = ФормированиеПечатныхФорм.ДатаНачалаПримененияФормСАртикуломВНаименовании();

		Пока ДанныеПечати.Следующий() Цикл
		
		// Для печати комплектов
			Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда

				КомплектПечатиПоСсылке = Неопределено;

				Если ВыборкаОснований <> Неопределено Тогда

					СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
					ВыборкаОснований.НайтиСледующий(СтруктураПоиска);
					СтрокиОснований = ВыборкаОснований.Выбрать();

					Если СтрокиОснований.Следующий() Тогда
						КомплектПечатиПоСсылке = КомплектыПечати.Найти(СтрокиОснований.ДокументОснование, "Ссылка");
					КонецЕсли;

				Иначе
					КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка, "Ссылка");
				КонецЕсли;

				Если КомплектПечатиПоСсылке = Неопределено Тогда
					КомплектПечатиПоСсылке = КомплектыПечати[0];
				КонецЕсли;
				Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если ДанныеПечати.СтатусУПД = 2 И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС) И ДанныеПечати.НалогообложениеНДС
				И Не ДанныеПечати.ЭтоПередачаНаКомиссию Тогда

				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен %2'"), ДанныеПечати.Ссылка, ДанныеПечати.ПредставлениеДокумента);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст, ДанныеПечати.Ссылка, , "ТекстСчетФактура");

				Продолжить;
			КонецЕсли;

			Если ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
				Макет = МакетУПД_534;
				ЕстьПостановление534 = Истина;
			ИначеЕсли ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
				Макет = МакетУПД_981;
				ЕстьПостановление981 = Истина;
			ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
				Макет = МакетУПД_625;
				ЕстьПостановление1137_625 = Истина;
			ИначеЕсли ДействуетПостановление1096(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
				Макет = МакетУПД_1096;
				ЕстьПостановление1096 = Истина;
			Иначе
				Макет = МакетУПД;
				ЕстьПостановление1137 = Истина;
			КонецЕсли;

			Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда

				Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
							 |сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст, ДанныеПечати.Ссылка);

				ТабличныйДокумент.Очистить();
				Прервать;

			КонецЕсли;

			Если (ЕстьПостановление1137_625 Или ЕстьПостановление1137) И ЕстьПостановление981 Тогда

				Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
							 |сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст, ДанныеПечати.Ссылка);

				ТабличныйДокумент.Очистить();
				Прервать;

			КонецЕсли;

			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
		// Выводим общие реквизиты шапки
			СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация,
				ДанныеПечати.Дата);
			СведенияОКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,
				ДанныеПечати.Дата);

			ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, СведенияОКонтрагенте, Макет,
				ТабличныйДокумент);
		
		// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

			НомерСтраницы = 1;
		
		// Инициализация итогов в документе
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
		// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
			ОбластьСтрокаСтандарт = Макет.ПолучитьОбласть("Строка");
			ОбластьИтого = Макет.ПолучитьОбласть("Итого");

			КартинкиМакета = Новый Структура("Печать,ПодписьПредпринимателя,ПодписьРуководителя,ПодписьОтветственныйАХО,"
				+ "ПодписьКладовщика,ПодписьГлавногоБухгалтера");
		
		// Печать
			Если СПечатью Тогда

				ДвоичныеДанныеПечати              = Справочники.Организация.ДвоичныеДанныеКартинкиОрганизации(
					ДанныеПечати.Организация, "ФайлПечать");
				ДвоичныеДанныеПодписьРуководителя = Справочники.Организация.ДвоичныеДанныеКартинкиОрганизации(
					ДанныеПечати.Организация, "ФайлПодписьРуководителя");
				ДвоичныеДанныеПодписьГлавногоБухгалтера = Справочники.Организация.ДвоичныеДанныеКартинкиОрганизации(
					ДанныеПечати.Организация, "ФайлПодписьГлавногоБухгалтера");
				Если Не ДанныеПечати.ЭтоИП И Не ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
					ДвоичныеДанныеПодписьГлавногоБухгалтера = ДвоичныеДанныеПодписьРуководителя;
				КонецЕсли;

			КонецЕсли;

			ВыводитьПечать = СПечатью И (ЗначениеЗаполнено(ДвоичныеДанныеПечати) Или ЗначениеЗаполнено(
				ДвоичныеДанныеПодписьРуководителя) Или ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера));
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");// + ?(ВыводитьПечать, "СПечатью", ""));

			ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвал, ДанныеПечати, СведенияОбОрганизации, СведенияОКонтрагенте);
		
		// Печать
			Попытка
				Для Каждого Элемент Из КартинкиМакета Цикл
					КартинкиМакета[Элемент.Ключ] = ОбластьПодвал.Рисунки[Элемент.Ключ];
					КартинкиМакета[Элемент.Ключ].ВыводитьНаПечать = ВыводитьПечать;
				КонецЦикла;
			Исключение

				ВыводитьПечать = Ложь;

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Для данной формы не предусмотрено факсимиле");

			КонецПопытки;

			Если ВыводитьПечать Тогда

				Если ЗначениеЗаполнено(ДвоичныеДанныеПечати) Тогда

					КартинкиМакета.Печать.Картинка                    = Новый Картинка(ДвоичныеДанныеПечати);
					КартинкиМакета.Печать.ВыводитьНаПечать = Истина;

				КонецЕсли;

		
			// Если есть подпись руководителя, то добавим и ее
				Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда

					КартинкиМакета.ПодписьОтветственныйАХО.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
					КартинкиМакета.ПодписьКладовщика.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
					КартинкиМакета.ПодписьОтветственныйАХО.ВыводитьНаПечать = Истина;
					КартинкиМакета.ПодписьКладовщика.ВыводитьНаПечать = Истина;

					Если ДанныеПечати.ЭтоИП Тогда
						КартинкиМакета.ПодписьПредпринимателя.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
					Иначе
						КартинкиМакета.ПодписьРуководителя.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
					КонецЕсли;

					КартинкиМакета.ПодписьПредпринимателя.ВыводитьНаПечать =  ДанныеПечати.ЭтоИП;
					КартинкиМакета.ПодписьРуководителя.ВыводитьНаПечать = Не ДанныеПечати.ЭтоИП;

				КонецЕсли;
				
			// Если есть подпись ГБ, то добавим и ее
				Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
					КартинкиМакета.ПодписьГлавногоБухгалтера.Картинка = Новый Картинка(ДвоичныеДанныеПодписьГлавногоБухгалтера);
					КартинкиМакета.ПодписьГлавногоБухгалтера.ВыводитьНаПечать = Истина;
				КонецЕсли;

			КонецЕсли;
			Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
				ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
			Иначе
				ВыводитьКодНоменклатуры = Истина;
			КонецЕсли;

			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);

			ИспользоватьНаборы = Ложь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
				ИспользоватьНаборы = Истина;
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
			КонецЕсли;

			ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981);
			ВыводитьАртикул = ДанныеПечати.Дата >= ДатаНачалаВыводаАртикулаВНаименовании;
			ВыводитьНаименованиеПоставщика = ПолучитьФункциональнуюОпцию("дт_ИспользоватьНаименованияПоставщиков")
				И дт_ОбщегоНазначенияВызовСервераПовтИсп.ДатаНачалаУчетаНаименованийПоставщиков() < ДанныеПечати.Дата;

			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			ТолькоСтавкаБезНДС = Истина;
			НомерСтроки = 0;
			Пока СтрокаТовары.Следующий() Цикл
			
			//Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
			//	ИЛИ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			//	Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
			//		И СтрокаТовары.Покупатель <> НЕОПРЕДЕЛЕНО Тогда
			//			Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
			
			//Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
			//	ОбластьСтрока = ОбластьСтрокаНабор;
			//ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
			//	ОбластьСтрока = ОбластьСтрокаКомплектующие;
			//Иначе
				ОбластьСтрока = ОбластьСтрокаСтандарт;
			//КонецЕсли;
			
			//Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			//	ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, Неопределено, , ВыводитьКодыТНВЭД);
			//Иначе
				НомерСтроки = НомерСтроки + 1;

				ВыводитьАртикулВСтроке = ВыводитьАртикул;
				Если ВыводитьНаименованиеПоставщика И Не СтрокаТовары.ЭтоСобственноеПроизводство Тогда
					ВыводитьАртикулВСтроке = Ложь;
				КонецЕсли;

				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД,
					ВыводитьАртикулВСтроке);
				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
			//КонецЕсли;

				СтруктураПараметров = Новый Структура;
				Если СтрокаТовары.СтавкаНДС = Неопределено Тогда//Перечисления.СтавкиНДС.БезНДС Тогда
					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='без НДС'"));
					СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru='без НДС'"));
				ИначеЕсли СтрокаТовары.СтавкаНДС = 0 Тогда //Перечисления.СтавкиНДС.НДС0 Тогда
					СтруктураПараметров.Вставить("СуммаНДС", 0);
					ТолькоСтавкаБезНДС = Ложь;
				Иначе
					ТолькоСтавкаБезНДС = Ложь;
				КонецЕсли;
			//Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				СтруктураПараметров.Вставить("Акциз", НСтр("ru='без акциза'"));
			//КонецЕсли;
				ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);

				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьСтрока);

				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьИтого);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
				КонецЕсли;

				Если НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда

					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

					ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
					ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер,
						ДанныеПечати.ИндексПодразделения);
					ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
					ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;

					ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

				КонецЕсли;

				ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			//Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
			//КонецЕсли;
			КонецЦикла;
		// Выводим итоги по документу
			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);

			Если ТолькоСтавкаБезНДС Тогда
				ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru='без НДС'");
			КонецЕсли;
			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
			ТабличныйДокумент.Вывести(ОбластьИтого);

			КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ составлен на %1 %2'"), НомерСтраницы, ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), НомерСтраницы));
			СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
			ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
			Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
				И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда

				ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало, ,
					ТабличныйДокумент.ВысотаТаблицы);
				Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ОбластьКопирования);
				КонецЦикла;

			КонецЕсли;

			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
				ДанныеПечати.Ссылка);

		КонецЦикла;

	КонецПроцедуры

	#КонецОбласти

	#КонецОбласти

	#Область Прочее

	Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
		ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
	КонецПроцедуры

	Функция СтруктураРесурсовДляИтогов()

		Структура = Новый Структура;

		Структура.Вставить("СуммаБезНДС", 0);
		Структура.Вставить("СуммаНДС", 0);
		Структура.Вставить("СуммаСНДС", 0);
		Структура.Вставить("Количество", 0);
		Структура.Вставить("КоличествоМест", 0);
		Структура.Вставить("КоличествоПринято", 0);
		Структура.Вставить("МассаБрутто", 0);
		Структура.Вставить("МассаНетто", 0);
		Структура.Вставить("Сумма", 0);

		Структура.Вставить("РазницаБезНДСУвеличение", 0);
		Структура.Вставить("РазницаБезНДСУменьшение", 0);
		Структура.Вставить("РазницаНДСУвеличение", 0);
		Структура.Вставить("РазницаНДСУменьшение", 0);
		Структура.Вставить("РазницаСНДСУвеличение", 0);
		Структура.Вставить("РазницаСНДСУменьшение", 0);

		Возврат Структура;

	КонецФункции

	Функция ПараметрыМассыПрописью(Масса, КоэффициентПересчетаВТонны)

		МассаТонны = Масса * КоэффициентПересчетаВТонны;
		Если МассаТонны > 1 Тогда
			Коэффициент = 1;
			СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
		ИначеЕсли МассаТонны * 1000 > 1 Тогда
			Коэффициент = 1000;
			СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент,
				"0", "3");
		Иначе
			Коэффициент = 1000000;
			СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
		КонецЕсли;

		Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент * КоэффициентПересчетаВТонны);

	КонецФункции

	Функция СведенияОГрузоотправителе(ДанныеПечати)
	
	//Если ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
	//	СведенияОГрузоотправителе = Справочники.РегистрацииВНалоговомОргане.СведенияОПодразделении(ДанныеПечати.Грузоотправитель);
	//Иначе
		СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель,
			ДанныеПечати.Дата);
	//КонецЕсли;

		Возврат СведенияОГрузоотправителе;

	КонецФункции

	Процедура ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета)

		Для Сч = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл

			ТекПараметр = ОбластьМакета.Параметры.Получить(Сч);

			Если Не ЗначениеЗаполнено(ТекПараметр) Тогда
				ОбластьМакета.Параметры.Установить(Сч, "--");
			КонецЕсли;

		КонецЦикла;

	КонецПроцедуры

	Процедура ОкруглитьДоЦелого(ОкругляемоеЧисло)
		Если ЗначениеЗаполнено(ОкругляемоеЧисло) Тогда
			Если ОкругляемоеЧисло <> Цел(ОкругляемоеЧисло) Тогда
				ОкругляемоеЧисло = Цел(ОкругляемоеЧисло) + 1;
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры

	Функция ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов)

		ТаблицаКонтрагентов = Новый ТаблицаЗначений;
		ТаблицаКонтрагентов.Колонки.Добавить("СведенияОПокупателе");
		ТаблицаКонтрагентов.Колонки.Добавить("СведенияОГрузополучателе");
		ТаблицаКонтрагентов.Колонки.Добавить("КПП");

		Если ДанныеКонтрагентов <> Неопределено Тогда

			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ДанныеКонтрагентов.НайтиСледующий(СтруктураПоиска);
			ВыборкаКонтрагентов = ДанныеКонтрагентов.Выбрать();

			Пока ВыборкаКонтрагентов.Следующий() Цикл

				СтрокаКонтрагента = ТаблицаКонтрагентов.Добавить();
				СтрокаКонтрагента.СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
				ВыборкаКонтрагентов.Контрагент, ДанныеПечати.Дата);
				СтрокаКонтрагента.СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
				ВыборкаКонтрагентов.Грузополучатель, ДанныеПечати.Дата);
				СтрокаКонтрагента.КПП = ВыборкаКонтрагентов.КПППокупателя;

			КонецЦикла;

		Иначе

			СтрокаКонтрагента = ТаблицаКонтрагентов.Добавить();
			СтрокаКонтрагента.СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Контрагент, ДанныеПечати.Дата);
			СтрокаКонтрагента.СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Грузополучатель, ДанныеПечати.Дата);
			СтрокаКонтрагента.КПП = ДанныеПечати.КПППокупателя;

		КонецЕсли;

		Возврат ТаблицаКонтрагентов;

	КонецФункции

	Функция ВыводитьКодыТНВЭД(ДанныеПечати, ДействуетПостановление981)
		ПараметрыВывода = Новый Структура("ВыводитьВСтроке, ВыводитьВКолонке");
		ПараметрыВывода.ВыводитьВСтроке = УчетНДСУТ.СтранаЯвляетсяЧленомЕАЭС(ДанныеПечати.СтранаРегистрации,
			ДанныеПечати.Дата) И ДанныеПечати.Дата >= УчетНДСУТ.ДатаНачалаДействия150ФЗ();
		ПараметрыВывода.ВыводитьВКолонке = ПараметрыВывода.ВыводитьВСтроке И ДействуетПостановление981;

		Возврат ПараметрыВывода

	КонецФункции

	Функция ВедетсяУчетНДСПоФЗ56(ДатаДокумента, ДатаИсправления)

		НачалоПримененияФЗ56 = '20170701';
        КонецПрименения = '20210701';
		Дата = ?(ЗначениеЗаполнено(ДатаИсправления), ДатаИсправления, ДатаДокумента);

		Если  Дата >= НачалоПримененияФЗ56 И Дата < КонецПрименения Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;

	КонецФункции

	Функция ДействуетПостановление981(ДатаДокумента, ДатаИсправления)

		НачалоПрименения = '20171001';
        КонецПрименения = '20210701';
		Дата = ?(ЗначениеЗаполнено(ДатаИсправления), ДатаИсправления, ДатаДокумента);

		Если Дата >= НачалоПрименения И Дата < КонецПрименения Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;

	КонецФункции

	Функция ДействуетПостановление534(ДатаДокумента, ДатаИсправления)
		НачалоПрименения = '20210701';
         КонецПрименения = '20241001';
		Дата = ?(ЗначениеЗаполнено(ДатаИсправления), ДатаИсправления, ДатаДокумента);

		Если Дата >= НачалоПрименения И Дата < КонецПрименения Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;

КонецФункции


Функция ДействуетПостановление1096(ДатаДокумента, ДатаИсправления)

		НачалоПрименения = '20241001';
        //КонецПрименения = '20210701';
		Дата = ?(ЗначениеЗаполнено(ДатаИсправления), ДатаИсправления, ДатаДокумента);

		Если Дата >= НачалоПрименения Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;


	КонецФункции

	#КонецОбласти

	#КонецОбласти

#КонецЕсли