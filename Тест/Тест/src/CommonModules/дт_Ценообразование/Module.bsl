
#Область ПрограммныйИнтерфейс

Функция ПолучитьЦену(Отбор, Дата, Знач ТипЦены = Неопределено) Экспорт

	Если ТипЦены = Неопределено Тогда
		ТипЦены = ПредопределенноеЗначение("Справочник.ТипыЦен.Розничная");
	КонецЕсли;
	
	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Партия КАК Партия,
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Партия.ДатаПоступления, ЦеныНоменклатуры.Период) КАК Период 
		|ИЗ
		|	РегистрСведений.дт_ЦеныНоменклатуры.СрезПоследних(
		|			&ДатаЦены,
		|			Номенклатура = &Номенклатура
		|				" + ?(Отбор.Свойство("Партия") И ЗначениеЗаполнено(Отбор.Партия), 
				"И Партия = &Партия", "") + "
		|				И ТипЦен = &ТипЦены) КАК ЦеныНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаЦены", КонецДня(Дата));
	Запрос.УстановитьПараметр("Номенклатура", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Номенклатура"));
	Запрос.УстановитьПараметр("Партия", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Партия"));
	Запрос.УстановитьПараметр("ТипЦены", ТипЦены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Цена;
	КонецЕсли;
	
	Возврат Результат;
	

КонецФункции // ПолучитьЦену()

// Выполняет движения регистра накопления дт_НачислениеЗарплатыУУ
//
Процедура ОтразитьДвижения(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	ТаблицаДвижения = ПараметрыПроведения.ТаблицаЦеныНоменклатуры;
	Если Отказ
	 ИЛИ ТаблицаДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ДвиженияНабор = Движения.дт_ЦеныНоменклатуры;
	ДвиженияНабор.Записывать = Истина;
	ДвиженияНабор.Загрузить(ТаблицаДвижения);
	
КонецПроцедуры

// Готовит к записи наборы записей документа (только по регистрам, входящих в подсистему)
//
Процедура ПодготовитьНаборыЗаписей(СтруктураОбъект) Экспорт
	
	РегистрыПодсистемы = Новый Массив;
	РегистрыПодсистемы.Добавить("дт_ЦеныНоменклатуры");
	
	Для каждого Регистр Из РегистрыПодсистемы Цикл
	
		НаборЗаписей = СтруктураОбъект.Движения.Найти(Регистр);
		
		Если НаборЗаписей <> Неопределено Тогда
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
				
			КонецЕсли;
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
				
			КонецЕсли;
			
			//РегистрыНакопления[Регистр].СоздатьПустуюВременнуюТаблицуИзменение(СтруктураОбъект.ДополнительныеСвойства);
		
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры

// для фиксации цены из формы номенклатуры
Процедура УстановитьЦену(ДанныеЗаполнения, Дата, Цена, Отказ = Ложь, БылоАвтоИзменениеЦеныПарам) Экспорт
	
	Если Цена = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.УстановкаЦенНоменклатуры) Тогда
		Возврат 
	КонецЕсли;
	 	
	ЦеныСрез = РегистрыСведений.дт_ЦеныНоменклатуры.СрезПоследних(Дата, ДанныеЗаполнения);
	Если ЦеныСрез.Количество() <> 0 Тогда
		Если ЦеныСрез[0].Цена = Цена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	Док.Заполнить(Неопределено);
	Док.Дата = Дата;
	Док.БылоАвтоИзменениеЦены = БылоАвтоИзменениеЦеныПарам;
	Док.ТипЦен = ДанныеЗаполнения.ТипЦен;
	НоваяСтрока = Док.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.Цена = Цена;

	Попытка
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон("Не удалось записать документ установки цен для %1. %2",
				ДанныеЗаполнения.Номенклатура,
				ОписаниеОшибки()),
			,
			,
			,
			Отказ
		);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьЦены(Документ, ИмяТЧ, Отказ = Ложь) Экспорт
	
	ТаблицаТовары = Документ[ИмяТЧ].Выгрузить(, "НомерСтроки,Товар,Цена");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Товар КАК Номенклатура,
	|	ТаблицаТовары.Цена КАК Цена
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.РекомендованаяЦена КАК ЦенаФиксированная,
	|	втТовары.НомерСтроки,
	|	втТовары.Цена,
	|	втТовары.Номенклатура
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = втТовары.Номенклатура
	|		И СпрНоменклатура.ЦенаФиксирована
	|		И СпрНоменклатура.РекомендованаяЦена > втТовары.Цена";

	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон("Строка %1. Цена %2 на %3 ниже фиксированной %4",
				Выборка.НомерСтроки,
				Выборка.Цена,
				Выборка.Номенклатура,
				Выборка.ЦенаФиксированная),
			,
			"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
			,
			Отказ
		);
 
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс



#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти