#Область ПрограммныйИнтерфейс
// Выполняет движения регистра накопления РегистрНакопления1
//
Процедура ОтразитьДвижения(ПараметрыПроведения, Движения, Отказ) Экспорт

	ТаблицаДвижения = ПараметрыПроведения.ТаблицаПродажи;
	Если Отказ Или ТаблицаДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДвиженияНабор = Движения.Продажи;
	ДвиженияНабор.Записывать = Истина;
	ДвиженияНабор.Загрузить(ТаблицаДвижения);

КонецПроцедуры

Функция ОпределитьНомерОрганизация(организация, ПродажаНомер)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ПродажаЗапчастей.Номер КАК Номер
				   |ИЗ
				   |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
				   |ГДЕ
				   |	ПродажаЗапчастей.Организация = &организация
				   |УПОРЯДОЧИТЬ ПО
				   |	Номер";
	запрос.УстановитьПараметр("организация", организация);
	рез = Запрос.Выполнить().Выгрузить();
	ном=1;
	Для Каждого стр Из рез Цикл
		Если стр.Номер = ПродажаНомер Тогда
			Возврат ном;
		КонецЕсли;
		ном=ном + 1;
	КонецЦикла;
	Возврат ном;
КонецФункции

Функция ПредставлениеДляПечати(СведенияКонтрагента)

	ПоляПредставления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"ФактическийАдрес,ИНН,Телефоны,EMail");
	Представление = "";
	Для Каждого Поле Из ПоляПредставления Цикл

		ЗначениеПоля =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияКонтрагента, Поле);
		Если Не ПустаяСтрока(ЗначениеПоля) Тогда
			Представление = Представление + ЗначениеПоля + Символы.ПС;
		КонецЕсли;

	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Представление);

	Возврат Представление;

КонецФункции

Функция ПолучитьСтеллаж(укод)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.Стеллаж КАК Стеллаж
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.наименование = &индкод";
	Запрос.УстановитьПараметр("индкод", укод);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Стеллаж;
КонецФункции

Функция НарядДоставка(Ссылка) Экспорт
	ОбъектПродажи = Ссылка.ПолучитьОбъект(); 
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет       =   ОбъектПродажи.ПолучитьМакет("НарядДоставка");
	ОбластьМакета = Макет.ПолучитьОбласть("шапка");

	ОбластьМакета.Параметры.заголовок = "Наряд на доставку №" + ОбъектПродажи.Номер + "Р";
	ОбластьМакета.Параметры.откого = ОбъектПродажи.Организация.ОтКогоДоставка;
	ОбластьМакета.Параметры.ИНН = ОбъектПродажи.Организация.ИНН;
	ОбластьМакета.Параметры.тк = ОбъектПродажи.ТранспортнаяКомпания.Наименование;
	ОбластьМакета.Параметры.куда = "" + ОбъектПродажи.ГородПолучения + "/" + ОбъектПродажи.РегионПолучения + "/"
		+ ОбъектПродажи.СтранаПолучения + "
										  |" + ОбъектПродажи.КоммДост;
	ОбластьМакета.Параметры.Ответственный = ОбъектПродажи.КтоПродал;

	Частный = Ложь;
	Если ОбъектПродажи.доставкаКлиент = Истина Тогда
		Телефон = ОбъектПродажи.Телефон;
		Фио = ОбъектПродажи.НаименованиеИлиФИО;
		Если ОбъектПродажи.частный = Истина Тогда
			Паспорт = ОбъектПродажи.Паспорт + "
											  |" + ОбъектПродажи.Прописка;
			Частный = Истина;
		Иначе
			Инн = ОбъектПродажи.ИНН;
			Частный = Ложь;
		КонецЕсли;
	Иначе
		Если ОбъектПродажи.Клиент.ЧастноеЛицо = Ложь Тогда
			Фио = ОбъектПродажи.Клиент.ПолноеНаименование;
			Инн = ОбъектПродажи.Клиент.ИНН;
			Частный = Ложь;
			Если СтрДлина(ОбъектПродажи.Клиент.РеквизитТелефон) > 3 Тогда
				телефон = ОбъектПродажи.Клиент.РеквизитТелефон;
			Иначе
				телефон = ОбъектПродажи.Клиент.Телефон;
			КонецЕсли;
		Иначе
			Фио = ОбъектПродажи.Клиент.ФИОдост;
			Частный = Истина;
			Паспорт = ОбъектПродажи.Клиент.Паспорт + "
													 |" + ОбъектПродажи.Клиент.Прописка;
			Если СтрДлина(ОбъектПродажи.Клиент.ТелефониДост) > 3 Тогда
				телефон = ОбъектПродажи.Клиент.ТелефониДост;
			Иначе
				телефон = ОбъектПродажи.Клиент.Телефон;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если частный = Ложь Тогда
		ОбластьМакета.Параметры.п1 = "Название Компании:";
		ОбластьМакета.Параметры.зп1 = фио;
		ОбластьМакета.Параметры.п2 = "ИНН:";
		ОбластьМакета.Параметры.зп2 = Инн;
		ОбластьМакета.Параметры.п3 = "Телефон:";
		ОбластьМакета.Параметры.зп3 = Телефон;
	Иначе
		ОбластьМакета.Параметры.п1 = "ФИО:";
		ОбластьМакета.Параметры.зп1 = Фио;
		ОбластьМакета.Параметры.п2 = "Паспорт/Прописка:";
		ОбластьМакета.Параметры.зп2 = паспорт;
		ОбластьМакета.Параметры.п3 = "Телефон:";
		ОбластьМакета.Параметры.зп3 = телефон;
	КонецЕсли;
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования("");
	Штрихкод.Ширина = 120;
	Штрихкод.Высота = 120;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = ОбъектПродажи.Номер;
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;

	ДвоичныйШтрихКод = Штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод, Истина);
	ОбластьМакета.Рисунки.КартинкаЗаготовка.Картинка = КартинкаШтрихКод;
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьСтроки = Макет.ПолучитьОбласть("строка");
	НомерСтроки = 0;
	Для Каждого СтрокаТабличнойЧасти Из ОбъектПродажи.Таблица Цикл
		Если СтрокаТабличнойЧасти.Отменено Тогда
			Продолжить;
		КонецЕсли;

		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.н = НомерСтроки;
		ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.Товар.Код;
		ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Товар.Артикул;
		ОбластьСтроки.Параметры.название = СтрокаТабличнойЧасти.Товар.Наименование;
		ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;
		ОбластьСтроки.Параметры.Объем = СтрокаТабличнойЧасти.Товар.Объем;
		ОбластьСтроки.Параметры.Вес = СтрокаТабличнойЧасти.Товар.Вес;
		ТабДокумент.Вывести(ОбластьСтроки);

	КонецЦикла;

	ОбластьСтроки = Макет.ПолучитьОбласть("Сборщик");
	ТабДокумент.Вывести(ОбластьСтроки);

	Возврат ТабДокумент;
КонецФункции // НарядДоставкаСервер()


Функция АктВозврата(ОбъектПродажи) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет       =   ОбъектПродажи.ПолучитьМакет("АктВозврата");
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	номерТЧ = ОпределитьНомерОрганизация(ОбъектПродажи.Организация, ОбъектПродажи.Номер);
	Если ОбъектПродажи.НомерПП > 0 Тогда
		номерТЧ = ОбъектПродажи.НомерПП;
	Иначе
		ОбъектПродажи.НомерПП = номерТЧ;
	КонецЕсли;
	ПараметрыШапки = Новый Структура;

	ПараметрыШапки.Вставить("НомерДокумента", ОбъектПродажи.Номер);
	ПараметрыШапки.Вставить("ДатаДокумента", Формат(ОбъектПродажи.Дата, "ДЛФ=D"));

	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ОбъектПродажи.Клиент, ОбъектПродажи.Дата);
	СведенияОПродавце = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ОбъектПродажи.Организация, ОбъектПродажи.Дата);
	ПараметрыШапки.Вставить("ОрганизацияНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,
		"ПолноеНаименование"));
	ПараметрыШапки.Вставить("ОрганизацияРеквизиты", ПредставлениеДляПечати(СведенияОПродавце));

	ПараметрыШапки.Вставить("ПокупательНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,
		"ПолноеНаименование"));
	ПараметрыШапки.Вставить("ПокупательРеквизиты", ПредставлениеДляПечати(СведенияОПокупателе));
	// -- obrv 02.03.18

	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования("");
	Штрихкод.Ширина = 250;
	Штрихкод.Высота = 250;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = ОбъектПродажи.Номер;
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;

	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод, Истина);
	ОбластьМакета.Рисунки.QrКод.Картинка = КартинкаШтрихКод;

	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
	// -- obrv 24.07.18

	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("заголовок2");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");

	НомерСтроки = 0;

	Итого = 0;
	Скидка = 0;
	ТаблицаТовары = ОбъектПродажи.Таблица.Выгрузить();
	Индекс = 0;
	Пока Индекс < ТаблицаТовары.Количество() Цикл
		Если Не ТаблицаТовары[Индекс].Отменено Тогда
			ТаблицаТовары.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;

	ТаблицаТовары.Колонки.Добавить("Наименование");
	ИспользоватьНаименованияПоставщиков = ПолучитьФункциональнуюОпцию("дт_ИспользоватьНаименованияПоставщиков")
		И дт_ОбщегоНазначенияВызовСервераПовтИсп.ДатаНачалаУчетаНаименованийПоставщиков() <= ОбъектПродажи.Дата;
	Если ИспользоватьНаименованияПоставщиков Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Товар КАК Номенклатура,
		|	ТаблицаТовары.укод КАК укод
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ИндКодc.Ссылка КАК Партия,
		|	ИндНомер.Стеллаж КАК Стеллаж
		|ПОМЕСТИТЬ ВТ_ТоварыПартии
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИндКод КАК ИндКодc
		|		ПО ВТ_Товары.укод = ИндКодc.Наименование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
		|		ПО ВТ_Товары.укод = ИндНомер.индкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТоварыПартии.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(НоменклатураПоставщиков.Наименование) КАК Наименование
		|ИЗ
		|	ВТ_ТоварыПартии КАК ВТ_ТоварыПартии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.дт_НоменклатураПоставщиков.СрезПоследних(
		|				&Дата,
		|				Номенклатура В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_Товары.Номенклатура
		|					ИЗ
		|						ВТ_Товары)) КАК НоменклатураПоставщиков
		|		ПО ВТ_ТоварыПартии.Номенклатура = НоменклатураПоставщиков.Номенклатура
		|			И ВТ_ТоварыПартии.Партия = НоменклатураПоставщиков.Партия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТоварыПартии.НомерСтроки";

		Запрос.УстановитьПараметр("Дата", ОбъектПродажи.Дата);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТаблицаТовары[ВыборкаДетальныеЗаписи.НомерСтроки - 1].Наименование = ВыборкаДетальныеЗаписи.Наименование;
		КонецЦикла;
	Иначе

		Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл

			СтрокаТаблицы.Наименование = СтрокаТаблицы.Товар.Наименование;

		КонецЦикла;
	КонецЕсли;
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл

		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.н = НомерСтроки;
		ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.Партия;
		ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Товар.Артикул;
		ОбластьСтроки.Параметры.НашКод = СтрокаТабличнойЧасти.Товар.Код;

		сост = СтрокаТабличнойЧасти.Товар.Состояние;

		ОбластьСтроки.Параметры.состояние = сост;
		Если ПолучитьСтеллаж(СтрокаТабличнойЧасти.укод) <> Справочники.Стеллаж.ПустаяСсылка() Тогда
			ОбластьСтроки.Параметры.адрес = ПолучитьСтеллаж(СтрокаТабличнойЧасти.укод);
		Иначе
			ОбластьСтроки.Параметры.адрес = СтрокаТабличнойЧасти.Товар.МестоНаСкладе2;
		КонецЕсли;
		Если ОбъектПродажи.АртикулВНазвании Тогда
			// ++ obrv 20.12.19

			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Артикул + " "
				+ СтрокаТабличнойЧасти.Наименование;
		Иначе

			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Наименование;
			// -- obrv 20.12.19
		КонецЕсли;

		Скидка1 = 0;
		ОбластьСтроки.Параметры.цена = СтрокаТабличнойЧасти.Цена;
		ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;

		Итого = Итого + СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		Если СтрокаТабличнойЧасти.Скидка <> Null И СтрокаТабличнойЧасти.Скидка > 0 Тогда
			Скидка = Скидка + СтрокаТабличнойЧасти.Скидка;
			Скидка1 = СтрокаТабличнойЧасти.Скидка;
		Иначе
			Скидка = Скидка + (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество) * (ОбъектПродажи.Клиент.Скидка
				/ 100);
			Скидка1 = (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество) * (ОбъектПродажи.Клиент.Скидка
				/ 100);
		КонецЕсли;
		ОбластьСтроки.Параметры.сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество - Скидка1;
		ТабДокумент.Вывести(ОбластьСтроки);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("подвал");
	ПараметрыПодвала = Новый Структура;
	ПараметрыПодвала.Вставить("КоличествоСтрок", НомерСтроки);
	ПараметрыПодвала.Вставить("СуммаИтого", Формат(Итого, "ЧДЦ=2; ЧГ=3,0"));
	ПараметрыПодвала.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(Итого,
		дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
	ПараметрыПодвала.Вставить("Заявка", ОбъектПродажи.ЗаказКлиента);

	ПараметрыПодвала.Вставить("ПродавецФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ОбъектПродажи.КтоПродал));

	Ответственные = ОбъектПродажи.Ответственные.Выгрузить();
	СтрокаТаблицы = Ответственные.Найти(ПредопределенноеЗначение("Перечисление.дт_РолиВПродаже.Сборщик"), "Роль");
	Если СтрокаТаблицы <> Неопределено Тогда

		ФИО = СтрокаТаблицы.Сотрудник;
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПодвала.Вставить("СборщикФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЕсли;

	КонецЕсли;

	СтрокаТаблицы = Ответственные.Найти(Перечисления.дт_РолиВПродаже.Упаковщик, "Роль");
	Если СтрокаТаблицы <> Неопределено Тогда

		ФИО = СтрокаТаблицы.Сотрудник;
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПодвала.Вставить("УпаковщикФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЕсли;

	КонецЕсли;

	ОбластьМакета.Параметры.Заполнить(ПараметрыПодвала);

	ТабДокумент.РазмерКолонтитулаСнизу=25;
	ТабДокумент.НижнийКолонтитул.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
	ТабДокумент.НижнийКолонтитул.Шрифт=Новый Шрифт(Макет.Область(1, 1).Шрифт, , 14);
	ТабДокумент.НижнийКолонтитул.ТекстСправа = "№" + номерТЧ + ОбъектПродажи.Организация.БукваВНакладной + " / №"
		+ ОбъектПродажи.Номер;
	ТабДокумент.НижнийКолонтитул.Выводить=Истина;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
КонецФункции


// Готовит к записи наборы записей документа (только по регистрам, входящих в подсистему)
//
Процедура ПодготовитьНаборыЗаписей(СтруктураОбъект) Экспорт

	РегистрыПодсистемы = Новый Массив;
	РегистрыПодсистемы.Добавить("Продажи");

	Для Каждого Регистр Из РегистрыПодсистемы Цикл

		НаборЗаписей = СтруктураОбъект.Движения.Найти(Регистр);

		Если НаборЗаписей <> Неопределено Тогда
			Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда

				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);

			КонецЕсли;

			Если Не НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда

				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы",
					СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);

			КонецЕсли;
			
			//РегистрыНакопления[Регистр].СоздатьПустуюВременнуюТаблицуИзменение(СтруктураОбъект.ДополнительныеСвойства);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


// Заполняет регистр сведений ПоказателиАвтомобилей
Процедура дт_РасчетПоказателейАвтомобилей() Экспорт

	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоказателиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ПоказателиАвтомобилей.Рентабельность КАК Рентабельность,
	|	ПоказателиАвтомобилей.ВыручкаОплаченная КАК ВыручкаОплаченная,
	|	ПоказателиАвтомобилей.Прибыль КАК Прибыль,
	|	ПоказателиАвтомобилей.ВыручкаПотенциальная КАК ВыручкаПотенциальная
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	РегистрСведений.ПоказателиАвтомобилей КАК ПоказателиАвтомобилей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Автомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БаланПоНакладнойОбороты.Измерение1 КАК ДокументПродажи,
	|	БаланПоНакладнойОбороты.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ ВТ_Оплаты
	|ИЗ
	|	РегистрНакопления.БаланПоНакладной.Обороты(,,,) КАК БаланПоНакладнойОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатыПоСделкамОбороты.Документ,
	|	ОплатыПоСделкамОбороты.СуммаОборот
	|ИЗ
	|	РегистрНакопления.ОплатыПоСделкам.Обороты(,,,) КАК ОплатыПоСделкамОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Оплаты.ДокументПродажи КАК ДокументПродажи,
	|	СУММА(ВТ_Оплаты.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ОплатыГр
	|ИЗ
	|	ВТ_Оплаты КАК ВТ_Оплаты
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Оплаты.ДокументПродажи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОплатыГр.ДокументПродажи КАК ДокументПродажи,
	|	ВТ_ОплатыГр.Сумма КАК СуммаОплачено,
	|	ВЫБОР
	|		КОГДА ПродажаЗапчастей.ИтогоРекв = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ВТ_ОплатыГр.Сумма, 0) >= ПродажаЗапчастей.ИтогоРекв
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ВТ_ОплатыКоэф
	|ИЗ
	|	ВТ_ОплатыГр КАК ВТ_ОплатыГр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|		ПО ВТ_ОплатыГр.ДокументПродажи = ПродажаЗапчастей.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияОПродажахОбороты.машина КАК Автомобиль,
	|	ИнформацияОПродажахОбороты.Регистратор КАК ДокументПродажи,
	|	ИнформацияОПродажахОбороты.колвоОборот * ИнформацияОПродажахОбороты.цена КАК СуммаВыручка
	|ПОМЕСТИТЬ ВТ_Продажи
	|ИЗ
	|	РегистрНакопления.ИнформацияОПродажах.Обороты(,, Регистратор,) КАК ИнформацияОПродажахОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПродажиОбороты.Автомобиль,
	|	ПродажиОбороты.Регистратор,
	|	ПродажиОбороты.СуммаОборот
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(,, Регистратор,) КАК ПродажиОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Продажи.Автомобиль КАК Автомобиль,
	|	ВТ_Продажи.ДокументПродажи КАК ДокументПродажи,
	|	СУММА(ВТ_Продажи.СуммаВыручка) КАК СуммаВыручка
	|ПОМЕСТИТЬ ВТ_ПродажиГр
	|ИЗ
	|	ВТ_Продажи КАК ВТ_Продажи
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Продажи.Автомобиль,
	|	ВТ_Продажи.ДокументПродажи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрНакопления1Остатки.машина КАК Автомобиль,
	|	РегистрНакопления1Остатки.Товар.РекомендованаяЦена * РегистрНакопления1Остатки.КолвоОстаток КАК СуммаПродажи
	|ПОМЕСТИТЬ ВТ_ПродажиПотенциальные
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки({(&КонецПериода)},) КАК РегистрНакопления1Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеЗапчастей.Таблица КАК ПоступлениеЗапчастейТаблица
	|		ПО РегистрНакопления1Остатки.Товар = ПоступлениеЗапчастейТаблица.Товар
	|		И РегистрНакопления1Остатки.машина = ПоступлениеЗапчастейТаблица.Ссылка.Машина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиРасчетныеДетально.Автомобиль КАК Автомобиль,
	|	СУММА(ПоказателиРасчетныеДетально.СуммаВыручка) КАК СуммаВыручка,
	|	СУММА(ПоказателиРасчетныеДетально.СуммаВыручкаОплаченная) КАК СуммаВыручкаОплаченная,
	|	СУММА(ПоказателиРасчетныеДетально.СуммаВыручкаПотенциальная) КАК СуммаВыручкаПотенциальная
	|ПОМЕСТИТЬ ВТ_ПоказателиРасчетные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Продажи.Автомобиль КАК Автомобиль,
	|		ВТ_Продажи.СуммаВыручка КАК СуммаВыручка,
	|		ВТ_Продажи.СуммаВыручка * ЕСТЬNULL(ВТ_ОплатыКоэф.Коэффициент, 0) КАК СуммаВыручкаОплаченная,
	|		0 КАК СуммаВыручкаПотенциальная
	|	ИЗ
	|		ВТ_ПродажиГр КАК ВТ_Продажи
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОплатыКоэф КАК ВТ_ОплатыКоэф
	|			ПО ВТ_Продажи.ДокументПродажи = ВТ_ОплатыКоэф.ДокументПродажи
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВТ_ПродажиПотенциальные.Автомобиль,
	|		0,
	|		0,
	|		ВТ_ПродажиПотенциальные.СуммаПродажи
	|	ИЗ
	|		ВТ_ПродажиПотенциальные КАК ВТ_ПродажиПотенциальные) КАК ПоказателиРасчетныеДетально
	|СГРУППИРОВАТЬ ПО
	|	ПоказателиРасчетныеДетально.Автомобиль
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Автомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрНакопления1Остатки.машина КАК машина,
	|	СУММА(РегистрНакопления1Остатки.КолвоОстаток) КАК КолвоОстаток,
	|	СУММА(РегистрНакопления1Остатки.Товар.РекомендованаяЦена) КАК ПотенциальнаяВыручка
	|ПОМЕСТИТЬ ПотенцВыручка
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|ГДЕ
	|	РегистрНакопления1Остатки.КолвоОстаток > 0
	|СГРУППИРОВАТЬ ПО
	|	РегистрНакопления1Остатки.машина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоказателиРасчетные.Автомобиль КАК Автомобиль,
	|	ВТ_ПоказателиРасчетные.СуммаВыручкаОплаченная КАК ВыручкаОплаченная,
	|	ВТ_ПоказателиРасчетные.СуммаВыручкаОплаченная - Машины.Сумма КАК Прибыль,
	|	ВЫБОР
	|		КОГДА Машины.Сумма = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ((ВТ_ПоказателиРасчетные.СуммаВыручкаОплаченная - Машины.Сумма) / Машины.Сумма * 100 КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК Рентабельность,
	|	ВЫРАЗИТЬ(ПотенцВыручка.ПотенциальнаяВыручка КАК ЧИСЛО(10, 2)) КАК ВыручкаПотенциальная
	|ИЗ
	|	ВТ_ПоказателиРасчетные КАК ВТ_ПоказателиРасчетные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Машины КАК Машины
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПотенцВыручка КАК ПотенцВыручка
	|			ПО (Машины.Ссылка = ПотенцВыручка.машина.Ссылка)
	|		ПО (ВТ_ПоказателиРасчетные.Автомобиль = Машины.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК ВТ_Показатели
	|		ПО (ВТ_ПоказателиРасчетные.Автомобиль = ВТ_Показатели.Автомобиль)";
//	|ГДЕ
//	|	(ВТ_Показатели.Автомобиль ЕСТЬ NULL
//	|	ИЛИ ВТ_Показатели.Рентабельность <> ВЫБОР
//	|		КОГДА Машины.Сумма = 0
//	|			ТОГДА 0
//	|		ИНАЧЕ ВЫРАЗИТЬ((ВТ_ПоказателиРасчетные.СуммаВыручкаОплаченная - Машины.Сумма) / Машины.Сумма * 100 КАК ЧИСЛО(10, 2))
//	|	КОНЕЦ
//	|	ИЛИ ВТ_Показатели.Прибыль <> ВТ_ПоказателиРасчетные.СуммаВыручкаОплаченная - Машины.Сумма
//	|	ИЛИ ВТ_Показатели.ВыручкаОплаченная <> ВТ_ПоказателиРасчетные.СуммаВыручкаОплаченная
//	|	ИЛИ ВТ_Показатели.ВыручкаПотенциальная <> ВТ_ПоказателиРасчетные.СуммаВыручкаПотенциальная)";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		Запись = РегистрыСведений.ПоказателиАвтомобилей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);

		Попытка

			Запись.Записать(Истина);

		Исключение
			ТекстСообщения = СтрШаблон("Не удалось записать показатели автомобиля %1. %2",
				ВыборкаДетальныеЗаписи.Автомобиль, ОписаниеОшибки());
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;

	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти