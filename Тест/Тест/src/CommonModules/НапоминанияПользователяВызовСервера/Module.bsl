#Область СлужебныеПроцедурыИФункции

// Выполняет запрос по напоминаниям для текущего пользователя на момент времени ТекущаяДатаСеанса() + 30минут.
// Момент времени смещен от текущего для использования функции из модуля с повторным использованием
// возвращаемых значений.
// При обработке результата выполнения функции необходимо учитывать эту особенность.
//
// Параметры:
//	Нет
//
// Возвращаемое значение
//  Массив - таблица значений, сконвертированная в массив из структур, содержащих данные строк таблицы.
Функция ПолучитьНапоминанияТекущегоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Напоминания.Пользователь КАК Пользователь,
	|	Напоминания.ВремяСобытия КАК ВремяСобытия,
	|	Напоминания.Источник КАК Источник,
	|	Напоминания.СрокНапоминания КАК СрокНапоминания,
	|	Напоминания.Описание КАК Описание,
	|	2 КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК Напоминания
	|ГДЕ
	|	Напоминания.СрокНапоминания <= &ТекущаяДата
	|	И Напоминания.Пользователь = &Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяСобытия";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса() + 30*60);// +30 минут для кэша
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = НапоминанияПользователяСлужебный.ПолучитьМассивСтруктурИзТаблицы(Запрос.Выполнить().Выгрузить());
	
	Возврат Результат;
	
КонецФункции

// Создает новое напоминание на время, рассчитанное относительно времени в предмете.
Функция ПодключитьНапоминаниеДоВремениПредмета(Текст, Интервал, Предмет, ИмяРеквизита, ПовторятьЕжегодно = Ложь) Экспорт
	
	Возврат НапоминанияПользователяСлужебный.ПодключитьНапоминаниеДоВремениПредмета(
		Текст, Интервал, Предмет, ИмяРеквизита, ПовторятьЕжегодно);
	
КонецФункции

Функция ПодключитьНапоминание(Текст, ВремяСобытия, ИнтервалДоСобытия = 0, Предмет = Неопределено) Экспорт
	
	Возврат НапоминанияПользователяСлужебный.ПодключитьПроизвольноеНапоминание(
		Текст, ВремяСобытия, ИнтервалДоСобытия, Предмет);
	
КонецФункции


Процедура НапоминаниеОДР() Экспорт
	
	///+ГомзМА 09.01.2023 (Задача 000002521 от 09.01.2023)
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ДолжностиСотрудниковСрезПоследних.Период) КАК Период,
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_Должности
	|ИЗ
	|	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	|ГДЕ
	|	ЕСТЬNULL(ДолжностиСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДолжностиПредприятия.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник,
	|	ДолжностиСотрудниковСрезПоследних.Сотрудник.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Должности.Сотрудник КАК Сотрудник,
	|	ВТ_Должности.Период КАК Период,
	|	ДолжностиСотрудников.Должность КАК Должность,
	|	ВТ_Должности.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_ДолжностиСДатами
	|ИЗ
	|	ВТ_Должности КАК ВТ_Должности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиСотрудников КАК ДолжностиСотрудников
	|		ПО ВТ_Должности.Сотрудник = ДолжностиСотрудников.Сотрудник
	|			И ВТ_Должности.Период = ДолжностиСотрудников.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ВТ_ДолжностиСДатами.Сотрудник КАК Сотрудник,
	|	ВТ_ДолжностиСДатами.Должность КАК Должность,
	|	ЕСТЬNULL(ВТ_ДолжностиСДатами.Пользователь, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Пользователь
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиСДатами КАК ВТ_ДолжностиСДатами
	|		ПО Сотрудники.Ссылка = ВТ_ДолжностиСДатами.Сотрудник
	|ГДЕ
	|	Сотрудники.ПометкаУдаления = ЛОЖЬ
	|	И НЕ Сотрудники.Пользователь.Недействителен";
	
	ДанныеСотрудника = Запрос.Выполнить().Выбрать();
	
	ФИОИменинников = Новый Массив();
	ФИОСотрудников = Новый Массив();
	
	Пока ДанныеСотрудника.Следующий() Цикл    
		Если День(ДанныеСотрудника.ДатаРождения) = День(ТекущаяДатаСеанса()) И Месяц(ДанныеСотрудника.ДатаРождения) = Месяц(ТекущаяДатаСеанса()) Тогда
			ФИОИменинников.Добавить(ДанныеСотрудника.Пользователь);
		Иначе
			ФИОСотрудников.Добавить(ДанныеСотрудника.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ФИОИменинников) Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникИсключенИзОповещения = Справочники.Пользователи.НайтиПоНаименованию("Трофимов Василий Юрьевич");
	Для каждого Именинник Из ФИОИменинников Цикл
		Если Именинник = ТекущийПользователь Тогда
			СтрокаВывода = "" + Именинник + ", WorkTruck поздравляет Вас с Днём Рождения!";
			ЗаписьВРегистреСведений = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.ВремяСобытия = ТекущаяДатаСеанса() + 60;
			ЗаписьВРегистреСведений.СрокНапоминания = ТекущаяДатаСеанса() + 60;
			ЗаписьВРегистреСведений.Пользователь = Пользователи.ТекущийПользователь();
			ЗаписьВРегистреСведений.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
			ЗаписьВРегистреСведений.Описание = СтрокаВывода;
			ЗаписьВРегистреСведений.Записать();
		КонецЕсли;
		Для каждого Сотрудник Из ФИОСотрудников Цикл
			Если Сотрудник <> Справочники.Сотрудники.ПустаяСсылка() Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Сотрудник.ИдентификаторПользователяИБ);
				Если ПользовательИБ <> Неопределено Тогда
					Если Сотрудник = Справочники.Пользователи.НайтиПоНаименованию("Вадяева Дарья Викторовна") Тогда
//					Если НЕ Сотрудник = СотрудникИсключенИзОповещения И (ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти("дт_Зарплата")) ИЛИ 
//						ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти("дт_Кадры")) ИЛИ
//						ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти("ОтделIT")) ИЛИ
//						ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти("Реклама"))) Тогда
						СтрокаВывода = "Уважаемые коллеги, напоминаем, что сегодня день рождения у сотрудника: " + Именинник;
						ЗаписьВРегистреСведений = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
						ЗаписьВРегистреСведений.ВремяСобытия = ТекущаяДатаСеанса() + 60;
						ЗаписьВРегистреСведений.СрокНапоминания = ТекущаяДатаСеанса() + 60;
						ЗаписьВРегистреСведений.Пользователь = Справочники.Пользователи.НайтиПоНаименованию(Сотрудник);
						ЗаписьВРегистреСведений.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
						ЗаписьВРегистреСведений.Описание = СтрокаВывода;
						ЗаписьВРегистреСведений.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	///-ГомзМА 09.01.2023 (Задача 000002521 от 09.01.2023)
	
КонецПроцедуры

#КонецОбласти
