
#Область ПрограммныйИнтерфейс

// Функция возвращает, имя дополнительной колонки, выводимой в таблицу товаров
//
// Возвращаемое значение:
//  Строка - Имя дополнительной колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	ДопКолонка =  "Код"; //"Артикул";
	Возврат ДопКолонка;
	
КонецФункции // ИмяДополнительнойКолонки()

// Возвращает строку со сводным описанием организации / контрагента / физ.лица.
//
// Параметры: 
//  СписокСведений - Структура - значения параметров организации, формируется функцией СведенияОЮрФизЛице()
//  Список         - Строка - перечень запрашиваемых параметров организации, разделенных запятыми
//  СПрефиксом     - Булево - признак вывода префикса параметра организации
//
// Возвращаемое значение:
//  Строка - описание организации / контрагента / физ.лица
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Если ПустаяСтрока(Список) Тогда
		// Формат описания по умолчанию
		Список = "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;
	
	// Перечень выводимых в описание реквизитов
	МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Список, ",", Истина);
	
	// Перечень реквизитов, которые идут как дополнение к "основным" реквизитам: НомерСчета и Свидетельство
	ДополнительныеРеквизиты = Новый Структура("Банк,БИК,КоррСчет,СвидетельствоДатаВыдачи");
	ЗаполнитьЗначенияСвойств(ДополнительныеРеквизиты, СписокСведений);
	
	// Пояснения к некоторым видам реквизитов, выводимые в описание
	ПрефиксыРеквизитов = Новый Структура;
	ПрефиксыРеквизитов.Вставить("ИНН",			НСтр("ru='ИНН %1'"));
	ПрефиксыРеквизитов.Вставить("КПП",			НСтр("ru='КПП %1'"));
	ПрефиксыРеквизитов.Вставить("Свидетельство",НСтр("ru='%1 от %2'"));
	ПрефиксыРеквизитов.Вставить("Телефоны",		НСтр("ru='тел.: %1'"));
	ПрефиксыРеквизитов.Вставить("НомерСчета",	НСтр("ru='р/с %1 в банке %2 БИК %3 к/с %4'"));
	ПрефиксыРеквизитов.Вставить("КодПоОКПО",	НСтр("ru='Код по ОКПО %1'"));
	ПрефиксыРеквизитов.Вставить("КодОКВЭД",		НСтр("ru='Код ОКВЭД %1'"));
	
	Описание = "";
	ПрефиксРеквизита  = Неопределено;
	ЗначениеРеквизита = Неопределено;
	
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		
		Если СПрефиксом И ДополнительныеРеквизиты.Свойство(ИмяРеквизита) Тогда
			Продолжить; // будет выведен вместе с "основным" реквизитом
		КонецЕсли;
		
		СписокСведений.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить; // или вообще нет такого реквизита, или он не заполнен
		КонецЕсли;
		
		Если СПрефиксом Тогда
			ПрефиксыРеквизитов.Свойство(ИмяРеквизита, ПрефиксРеквизита);
		КонецЕсли;
		
		Если СПрефиксом И ИмяРеквизита = "НомерСчета" Тогда
			
			ДополнениеОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПрефиксРеквизита,
				СокрЛП(ЗначениеРеквизита),
				СокрЛП(ДополнительныеРеквизиты.Банк),
				СокрЛП(ДополнительныеРеквизиты.БИК),
				СокрЛП(ДополнительныеРеквизиты.КоррСчет),
				);
			
		ИначеЕсли СПрефиксом И ИмяРеквизита = "Свидетельство"
		 И ЗначениеЗаполнено(ДополнительныеРеквизиты.СвидетельствоДатаВыдачи) Тогда
			
			ДополнениеОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПрефиксРеквизита,
				СокрЛП(ЗначениеРеквизита),
				СокрЛП(ДополнительныеРеквизиты.СвидетельствоДатаВыдачи));
			
		ИначеЕсли ЗначениеЗаполнено(ПрефиксРеквизита) Тогда
			
			// У всех остальных реквизитов, кроме указанных выше, в префикс входит только один параметр
			ДополнениеОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПрефиксРеквизита,
				СокрЛП(ЗначениеРеквизита));
			
		Иначе
			
			ДополнениеОписания = СокрЛП(ЗначениеРеквизита);
			
		КонецЕсли;
		
		Описание = Описание	+ ?(ПустаяСтрока(Описание), "", ", ") + ДополнениеОписания;
		
	КонецЦикла;
	
	Возврат СокрЛП(Описание);
	
КонецФункции

// Функция формирует сведения об указанном юридическом или физическом лице.
// К сведениям относятся: наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, Знач БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм,
		|КодПоОКПО, КодОКВЭД, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, ОГРН, Город");

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	Если (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организация")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Клиенты")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")) Тогда
	
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организация") Тогда
			Реквизиты = Справочники.Организация.ПолучитьРеквизитыОрганизации(ЮрФизЛицо);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчета.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчета.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
			Сведения.Вставить("КодОКВЭД", Реквизиты.КодОКВЭД);
			АдресДоставки = Реквизиты.ФактическийАдрес;
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Клиенты") Тогда
			Реквизиты = Справочники.Клиенты.РеквизитыКонтрагента(ЮрФизЛицо);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчета.ПолучитьБанковскийСчетКлиентаПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчета.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
			Сведения.Вставить("КодОКВЭД", "");
			АдресДоставки = Реквизиты.АдресДоставки;
			
			Если ОбщегоНазначенияУТКлиентСервер.ЭтоЧастноеЛицо(Реквизиты.ЮрФизЛицо) Тогда
				Сведения.Вставить("Паспорт",	 Реквизиты.Паспорт);
				Сведения.Вставить("Прописка", 	 Реквизиты.Прописка);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			Реквизиты = Справочники.Контрагенты.РеквизитыКонтрагента(ЮрФизЛицо);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчета.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчета.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
			Сведения.Вставить("КодОКВЭД", "");
			
			АдресДоставки = Реквизиты.ФактическийАдрес;
		КонецЕсли;

		Сведения.Вставить("Представление", 				 Реквизиты.Представление);
		Сведения.Вставить("СокращенноеНаименование", 	 Реквизиты.Представление);
		Сведения.Вставить("ПолноеНаименование", 		 Реквизиты.НаименованиеПолное);
		Сведения.Вставить("НаименованиеДляПечатныхФорм", Реквизиты.НаименованиеПолное);
		Сведения.Вставить("ИНН", 						 Реквизиты.ИНН);
		Сведения.Вставить("КодПоОКПО", 					 Реквизиты.КодПоОКПО);
		Сведения.Вставить("ЮрФизЛицо", 					 Реквизиты.ЮрФизЛицо);
		Сведения.Вставить("ОГРН", 					 	Реквизиты.ОГРН);
		Сведения.Вставить("Город", 					 	Реквизиты.ФактическийАдрес);
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организация") Тогда
			Сведения.Вставить("ОфициальноеНаименование", Реквизиты.НаименованиеПолное);
			Сведения.Вставить("Свидетельство", 			 Реквизиты.Свидетельство);
			РеквизитЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ЮрФизЛицо");

		Иначе
			Сведения.Вставить("ОфициальноеНаименование", Реквизиты.Наименование);
			Сведения.Вставить("Свидетельство", 			 "");
			РеквизитЮрФизЛицо = Реквизиты.ЮрФизЛицо;//ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ТипКлиента");

		КонецЕсли;
		
		// Сокращенное наименование
		Если РеквизитЮрФизЛицо = Перечисления.дт_ТипыКлиентов.ЮрЛицо Тогда
			
			СтрокаЗамены = "Общество с ограниченной ответственностью";
			
			СокращенноеНаименование = Реквизиты.Наименование;
			СокращенноеНаименование = СтрЗаменить(СокращенноеНаименование, СтрокаЗамены, "ООО");
			СокращенноеНаименование = СтрЗаменить(СокращенноеНаименование, нрег(СтрокаЗамены), "ООО");
			СокращенноеНаименование = СтрЗаменить(СокращенноеНаименование, врег(СтрокаЗамены), "ООО");
			
			Сведения.СокращенноеНаименование = СокращенноеНаименование;
			
		ИначеЕсли РеквизитЮрФизЛицо = Перечисления.дт_ТипыКлиентов.ИП Тогда
			
			СтрокаЗамены = "Индивидуальный предприниматель";
			
			СокращенноеНаименование = Реквизиты.Наименование;
			СокращенноеНаименование = СтрЗаменить(СокращенноеНаименование, СтрокаЗамены, "ИП");
			СокращенноеНаименование = СтрЗаменить(СокращенноеНаименование, нрег(СтрокаЗамены), "ИП");
			СокращенноеНаименование = СтрЗаменить(СокращенноеНаименование, врег(СтрокаЗамены), "ИП");
			
			Сведения.СокращенноеНаименование = СокращенноеНаименование;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКЛиентСервер.ЭтоБизнесКлиент(РеквизитЮрФизЛицо) Тогда
			Сведения.Вставить("КПП", Реквизиты.КПП);
		Иначе
			Сведения.Вставить("КПП", "");
		КонецЕсли;
		
		
		Сведения.Вставить("НомерСчета", 	  РеквизитыСчета.НомерСчета);
		Сведения.Вставить("Банк", 			  РеквизитыСчета.Банк);
		Сведения.Вставить("БИК", 			  РеквизитыСчета.БИК);
		Сведения.Вставить("КоррСчет", 		  РеквизитыСчета.КоррСчет);
		Сведения.Вставить("АдресБанка", 	  РеквизитыСчета.АдресБанка);

		Сведения.Вставить("Телефоны", 	  		Реквизиты.Телефоны);
		Сведения.Вставить("ЮридическийАдрес", Реквизиты.ЮридическийАдрес);
		Сведения.Вставить("ФактическийАдрес", Реквизиты.ФактическийАдрес);
		Сведения.Вставить("АдресДоставки", АдресДоставки);
		Сведения.Вставить("Email", Реквизиты.Email);
	
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Реквизиты = Справочники.Сотрудники.ПолучитьРеквизиты(ЮрФизЛицо);
		
		Сведения.Вставить("Email");		
		Сведения.Вставить("ФактическийАдрес");
		Сведения.Вставить("Паспорт");
		Сведения.Вставить("ПаспортСерияНомер");
		Сведения.Вставить("ПаспортДатаВыдачи");
		Сведения.Вставить("ПаспортКемВыдан");
		Сведения.Вставить("ФамилияИнициалы");
				
		ЗаполнитьЗначенияСвойств(Сведения, Реквизиты);
		
	КонецЕсли;
		
	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

Функция АдресДоставки(ДанныеПечати, ОбратныйПорядок = Ложь, Разделитель = ", ") Экспорт
	ПоляДоставки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("СтранаДоставки,РегионДоставки,ГородДоставки");
	Результат = "";
	Для каждого Поле Из ПоляДоставки Цикл
	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, Поле) Тогда
			
			Значение = ДанныеПечати[Поле];
			Если ЗначениеЗаполнено(Значение) Тогда
				
				Если ОбратныйПорядок Тогда
					Результат = Строка(Значение) + Разделитель + Результат;
				Иначе	
					Результат = Результат + Значение + Разделитель;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	
	КонецЦикла;
	
	Если Не ПустаяСтрока(Результат) Тогда
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Результат, СтрДлина(Разделитель));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//	Дата - Дата - Дата, на которую надо получить юридический адрес организации. При незаполненном параметре будет получен 
//                   актуальный адрес. Для других типов адресов этот параметр можно не заполнять.
//
// Возвращаемое значение:
//  Строка - представление найденного адреса
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "", Дата = Неопределено) Экспорт

	
	Возврат "";

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение:
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект) Экспорт

	Возврат "";
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  РезультирующаяСтрока - Строка - отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Форматирует сумму банковского платежного документа.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  ВыводитьСуммуБезКопеек - Булево - Флаг представления суммы без копеек.
//
// Возвращаемое значение:
//  Результат - Строка - Отформатированная строка.
//
Функция СуммаПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		
		Если ВыводитьСуммуБезКопеек Тогда
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, СтрНайти(Результат, "="));
			
		Иначе
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СуммаПлатежногоДокумента()

// Функция формирует представление суммы в рублях и копейках.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  Валюта - СправочникСсылка.Валюты - Валюта, в которой нужно представить сумму.
//  ВалютаРегламентированногоУчета - СправочникСсылка.Валюты - Валюта регламентированного учета.
//
// Возвращаемое значение:
//  СуммаРубКоп - Строка - Отформатированная сумма.
//
Функция СуммаРубКоп(Сумма, Валюта, ВалютаРегламентированногоУчета) Экспорт
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		Рубли = Цел(Сумма);
		Копейки = Окр(100 * (Сумма - Рубли), 0, 1);
		СуммаРубКоп = "" 
			+ Формат(Рубли, "ЧДЦ=0; ЧГ=0")
			+ " руб. " 
			+ Цел(Копейки /10) 
			+ (Копейки - 10 * Цел(Копейки / 10))
			+" коп."
		;
	Иначе
		СуммаРубКоп = СуммаПлатежногоДокумента(Сумма, Ложь);
	КонецЕсли;
	
	Возврат СуммаРубКоп;
	
КонецФункции // СуммаРубКоп()

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
//  ТекстНДСПоСтавке - Строка - строка.
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции // ТекстНДСПоСтавке()

// Создает соответствие ставок и сумм НДС
//
// Возвращаемое значение:
//  СоответствиеСтавокНДС - Соответствие - соотвествие ставок и сумм НДС.
//
Функция ПолучитьСоответствиеСтавокНДС() Экспорт
	
	СоответствиеСтавокНДС = Новый Соответствие();
	//СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10,     0);
	//СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, 0);
	//СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18,     0);
	//СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, 0);
	//СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС0,      0);
	
	Возврат СоответствиеСтавокНДС;
	
КонецФункции // ПолучитьСоответствиеСтавокНДС()

// Формирует текст НДС
//
// Параметры:
//  НалогообложениеНДС  - Строка - Наименование типа НалогообложенияНДС, для которого необходимо сформировать текст
//  ЦенаВключаетНДС 	- Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
//  Строка - сформированный текст.
//
Функция СформироватьТекстНДС(НалогообложениеНДС, ЦенаВключаетНДС)Экспорт
	
	Возврат НалогообложениеНДС + ?(ЦенаВключаетНДС,Нстр("ru='. Цена включает НДС.'"),Нстр("ru='. Цена не включает НДС.'"));
	
КонецФункции // СформироватьТекстНДС()


// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - число, которое необходимо отформатировать
//
// Возвращаемое значение:
//  Строка - отформатированное должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ДатаНачалаПримененияФормСАртикуломВНаименовании() Экспорт

	Возврат '20180313';

КонецФункции // ДатаНачалаПримененияФормСАртикуломВНаименовании()()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
