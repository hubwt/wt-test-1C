#Область СлужебныеПроцедурыИФункции
Функция ШлюзПоИмяИБ()
	СтрокаИБ = СтрокаСоединенияИнформационнойБазы();
			СтрокаИБ = СтрокаСоединенияИнформационнойБазы();
		Если СтрНайти(СтрокаИБ,"worktruck") = 0 Тогда
			Шлюз = 8185;
		Иначе
			Шлюз = 8085; 
		КонецЕсли;
Возврат Шлюз;	
КонецФункции

Функция ЕстьКириллица(ИсходнаяСтрока) Экспорт
	ИсходнаяСтрока=СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока) > 0 Тогда
		Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
//@skip-check use-non-recommended-method
			Если Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура ПересчётСуммыЗаявки(СсылкаНаЗаявку) Экспорт
	ОбъектЗаявки = СсылкаНаЗаявку.ПолучитьОбъект();
	Товары = ОбъектЗаявки.Товары;
	ОбщСумма = 0;

	Для Каждого Стр Из товары Цикл
		Стр.Сумма = Стр.Количество * стр.Цена;
		ОбщСумма = ОбщСумма + Стр.Сумма;
	КонецЦикла;
	ОбъектЗаявки.СуммаДокумента = ОбщСумма;
	ОбъектЗаявки.Записать();
КонецПроцедуры

Процедура ПересчётСуммыЗН(СсылкаНаЗН) Экспорт
	ОбъектЗН = СсылкаНаЗН.ПолучитьОбъект();
	Товары = ОбъектЗН.Товары;
	ОбщСумма = 0;

	Для Каждого Стр Из товары Цикл
		Стр.Сумма = Стр.Количество * стр.Цена;
		ОбщСумма = ОбщСумма + Стр.Сумма;
	КонецЦикла;
	ОбъектЗН.СуммаТовары = ОбщСумма;
	ОбъектЗН.Записать();
КонецПроцедуры

//ПересчётСуммыОбъектЗН

Функция СформироватьОтветСтруктурой(Success, Message, Data = "", Error = "") Экспорт

	СтруктураОтвета = Новый Структура;
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтруктураОтвета.Вставить("success", Success);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("data", Data);
	СтруктураОтвета.Вставить("error", Error);
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Возврат СтрокаДляОтвета;
КонецФункции

Функция СформироватьСтруктуруОшибки(Сode="", Message, Details)Экспорт

	СтруктураОтвета = Новый Структура;
//	СтруктураОтвета.Вставить("code", Сode);
	СтруктураОтвета.Вставить("message", Message);
	СтруктураОтвета.Вставить("details", Details);

	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучениеФото(ИндКод) Экспорт
//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL());  
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", ШлюзПоИмяИБ());

		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		//@skip-check module-unused-local-variable
		Для Каждого Стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;
КонецФункции

Функция ПолучениеФотокарточек(ИндКод) Экспорт
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", ШлюзПоИмяИБ());

		СтрокаЗапроса = "/v2/card";//s/count/4";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		////Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("cardId", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
//			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
//			Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
//			тело = Ответ.ПолучитьТелоКакСтроку();
//			ЧтениеJSON = Новый ЧтениеJSON;
//			ЧтениеJSON.УстановитьСтроку(Тело);
//
//			Ответ  = ПрочитатьJSON(ЧтениеJSON);
//			Сообщить(Ответ);
//			ответ = Неопределено;

//		МассивПустыхФото = Новый массив;

		МассивОтвета = Новый массив;
		СтруктураОтвета = Новый структура;
		СтруктураМассива = Новый Структура;

		СтруктураМассива.Вставить("common", Строка(Новый массив));

		СтруктураОтвета.Вставить("images", СтруктураМассива);
		МассивОтвета.Добавить(СтруктураОтвета);
		Возврат МассивОтвета;
		КонецЕсли;
		Возврат Ответ;
	Исключение
//		МассивПустыхФото = Новый массив;

		МассивОтвета = Новый массив;
		СтруктураОтвета = Новый структура;
		СтруктураМассива = Новый Структура;

		СтруктураМассива.Вставить("common", Строка(Новый массив));

		СтруктураОтвета.Вставить("images", СтруктураМассива);
		МассивОтвета.Добавить(СтруктураОтвета);
		Возврат МассивОтвета;
	КонецПопытки;

КонецФункции

Функция ЕстьНаКСкладе(Номенклатура) Экспорт
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""%K-%""
				   |			ИЛИ ИндНомер.Стеллаж.Наименование ПОДОБНО ""%К-%"")
				   |	И ИндНомер.индкод.Владелец = &Владелец
				   |	И РегистрНакопления1Остатки.КолвоОстаток > 0";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Выборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьНормализованныйНомер(Номер) Экспорт

	//Сергеев Ф.В. ++ Дата: 14.05.2024
	ПромежуточныйНомер = "";
	ДопустимыеСимволы = "0123456789";
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	Для Сч1 = 1 По ДлинаНомера Цикл
		ТекСимвол = Сред(СокрЛП(Номер), Сч1, 1);
		Если СтрНайти(ДопустимыеСимволы, ТекСимвол) > 0 Тогда
			ПромежуточныйНомер = ПромежуточныйНомер + ТекСимвол;
			Если Лев(ПромежуточныйНомер, 1) = "8" Тогда
				ПромежуточныйНомер = "7";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Лев(ПромежуточныйНомер, 1) = "7" Тогда
		ПромежуточныйНомер = "+" + ПромежуточныйНомер;
	КонецЕсли;

	ФорматированныйНомер = Лев(ПромежуточныйНомер, 2) + " " + Сред(ПромежуточныйНомер, 3, 3) + " " + Сред(
		ПромежуточныйНомер, 6, 3) + "-" + Сред(ПромежуточныйНомер, 9, 2) + "-" + Сред(ПромежуточныйНомер, 11);

	Возврат ФорматированныйНомер;
	//Сергеев Ф.В. -- Дата: 14.05.2024

КонецФункции

Функция ПолучитьПродажуЧерезЗаявку(Номер) Экспорт
	
	///+ГомзМА 25.07.2024
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПродажаЗапчастей.Номер КАК Номер
		|ИЗ
		|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		|ГДЕ
		|	ПродажаЗапчастей.ЗаказКлиента.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", Номер);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.Номер;
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 25.07.2024
КонецФункции


Функция УбираемЛидНули(НомерДок) Экспорт
Если Лев(НомерДок, 1) = "0" Тогда
	Возврат УбираемЛидНули(Прав(НомерДок, СтрДлина(НомерДок) - 1)); 
Иначе
	Возврат НомерДок;
КонецЕсли;
КонецФункции

Функция ПолучитьКодСотрудника(Имя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Код
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Имя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи.Следующий(); 
	Возврат ВыборкаДетальныеЗаписи.Код;
		
КонецФункции

Функция ПолучитьМашину(ИндКодДетали) Экспорт
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	РегистрНакопления1.машина КАК машина
				   |ИЗ
				   |	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1
				   |ГДЕ
				   |	РегистрНакопления1.индкод = &индкод";
	Запрос.УстановитьПараметр("ИндКод", ИндКодДетали);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат выборка.машина;
КонецФункции

Процедура ЛогированиеWT10(Заявка, Автор, Лог) Экспорт
	Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогWT10.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.Источник = Заявка;
	МенеджерЗаписиЛога.Пользователь = Автор;
	МенеджерЗаписиЛога.Лог = "--------------------------" + Символы.ПС + Автор + Лог;
	МенеджерЗаписиЛога.Записать();
КонецПроцедуры

Процедура ЛогированиеИндНомера(Индкод, Автор, Лог, Стеллажж = Неопределено, Поддон = Неопределено,ПредСтеллаж = Неопределено, ПредПоддон = Неопределено) Экспорт
	Авторец = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
	МенеджерЗаписиЛога = РегистрыСведений.ЛогИндНомера.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.индкод = Справочники.ИндКод.НайтиПоНаименованию(индкод);
	//@skip-check use-non-recommended-method
	МенеджерЗаписиЛога.дата = ТекущаяДата();
	//@skip-check use-non-recommended-method
	МенеджерЗаписиЛога.период = ТекущаяДата();
	Если Поддон <> Неопределено Тогда  
		//Поддон = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.Поддон  = Справочники.Поддоны.НайтиПоНаименованию(Поддон);
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	Если Стеллажж <> Неопределено Тогда  
		//Стеллажж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.Стеллаж = Справочники.Стеллаж.НайтиПоНаименованию(Стеллажж);
		МенеджерЗаписиЛога.ПредыдущийСтеллаж = ПредСтеллаж;
		МенеджерЗаписиЛога.ПредыдущийПоддон = ПредПоддон;
	КонецЕсли;

	МенеджерЗаписиЛога.Ответственный = Авторец;
	МенеджерЗаписиЛога.Текст = "--------------------------" + Символы.ПС + Авторец + Лог;
	МенеджерЗаписиЛога.Записать();
	
КонецПроцедуры

Функция пользТелеги(Автор) Экспорт
	Запрос =Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Telegram_Пользователи.ID_Пользователя КАК ID_Пользователя
				   |ИЗ
				   |	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
				   |ГДЕ
				   |	Telegram_Пользователи.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Автор);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат выборка.ID_Пользователя;
КонецФункции

Функция РедактироватьПолку(Индкод, Место = Неопределено, Автор)экспорт
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", Индкод);

	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
	КонецЕсли;
	// При перемещении из ячейки рвр на другую полку, убирать партии и статус товара в заказ наряде
	Если СтрНайти(Строка(Выборка.Стеллаж), "yachejka RVR") <> 0 Тогда
		Попытка
		ИндКодСсылка = Справочники.ИндКод.НайтиПоНаименованию(Индкод);
		ЗапросЗаказНаряда = Новый Запрос;
		ЗапросЗаказНаряда.Текст =
		"ВЫБРАТЬ
		|	ЗаказНарядТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
		|ГДЕ
		|	ЗаказНарядТовары.Партия = &Партия";
		
		ЗапросЗаказНаряда.УстановитьПараметр("Партия", ИндКодСсылка);
		
		ВыборкаЗН = ЗапросЗаказНаряда.Выполнить().Выбрать();
		
		Пока ВыборкаЗН.Следующий() Цикл
			ЗаказНарядОбъект = ВыборкаЗН.Ссылка.ПолучитьОбъект();
			НайденнаяСтрока = ЗаказНарядОбъект.Товары.Найти(ИндКодСсылка, "Партия"); 
			Если НайденнаяСтрока <> Неопределено Тогда
				
				НайденнаяСтрока.Партия = Справочники.ИндКод.ПустаяСсылка();
				НайденнаяСтрока.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.ПустаяСсылка(); 
				НайденнаяСтрока.Автомобиль = Справочники.Машины.ПустаяСсылка();
				ЗаказНарядОбъект.Записать();	
			КонецЕсли;
		КонецЦикла;  
	Исключение
	КонецПопытки;
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;

	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
		
		///+ГомзМА 31.01.2024
//		Если СтрНайти(НаборЗаписей[0].Стеллаж, "Korzina") > 0 И СтрНайти(Место, "Korzina") > 0 Тогда
//			Ответ = Новый HTTPСервисОтвет(415);
//			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//			Ответ.УстановитьТелоИзСтроки("Невозможно переместить в корзину. Деталь находится у другого пользователя в "
//				+ НаборЗаписей[0].Стеллаж);
//			Возврат ответ;
//		Иначе
		НовыйНомер = НаборЗаписей[0];
		Полка = Справочники.Стеллаж.НайтиПоНаименованию(место);
		Если Полка <> Справочники.Стеллаж.ПустаяСсылка() Тогда
			Лог =  " сменил полку с " + НовыйНомер.Стеллаж + " на " + Полка;
			ЛогированиеИндНомера(НовыйНомер.индкод, Автор, Лог, Полка, , НовыйНомер.Стеллаж, НовыйНомер.Поддон);
			НовыйНомер.Стеллаж = Полка;
			НовыйНомер.Поддон = Справочники.Поддоны.ПустаяСсылка();

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
			Если СтрНайти(Место, "Korzina") > 0 Тогда
				Автор = Справочники.Сотрудники.НайтиПоКоду(Автор).Пользователь;
				ТекстЛога = " Поместил в корзину " + Строка(Справочники.Сотрудники.НайтиПоРеквизиту("Тележка", Полка))
					+ " " + Строка(Выборка.индкод.Владелец) + " с кодом " + индкод;
					//ИндКоды = Новый массив;
					//ИндКоды.Добавить(индкод);
				Фотки = РаботаССайтомWT.ПолучениеФотоДляТелеги(индкод);
				НайденныеФотки = Фотки[0].urls;
					//ТекстЛога = ТекстЛога + Символы.ПС + НайденныеФотки[0];
					//@skip-check empty-except-statement
				Попытка
					Telegram_Сервер.ОтправитьКартинкуПользователю("-1001874958074", НайденныеФотки[0]);
				Исключение

				КонецПопытки;

				Telegram_Сервер.ОтправитьСообщениеПользователю("-1001874958074", Строка(Автор) + ТекстЛога);
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЕсли;
		Возврат ответ;
		//КонецЕсли;
		///-ГомзМА 31.01.2024

	Иначе
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Полка не найдена");
		Возврат ответ;

	КонецЕсли;
КонецФункции

Функция РедактироватьПоддон(Индкод, Место = Неопределено, Автор) экспорт
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод,
				   |	ИндНомер.Код КАК Код,
				   |	ИндНомер.Стеллаж КАК Стеллаж,
				   |	ИндНомер.Комментарий КАК Комментарий,
				   |	ИндНомер.ЦенаПроверена КАК ЦенаПроверена,
				   |	ИндНомер.Модель КАК Модель,
				   |	ИндНомер.ДатаИзмененияКонвеера КАК ДатаИзмененияКонвеера,
				   |	ИндНомер.Ответственный КАК Ответственный,
				   |	ИндНомер.ЕстьФото КАК ЕстьФото,
				   |	ИндНомер.Комментарий КАК Комментарий1,
				   |	ИндНомер.Цена КАК Цена
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод.Наименование = &Код";
	запрос.УстановитьПараметр("Код", Индкод);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
	Иначе
		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
		Возврат ответ;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.индкод.Установить(Выборка.индкод);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

		Ответ = Новый HTTPСервисОтвет(415);
		Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки("Нет такого");
	ИначеЕсли НаборЗаписей.Количество() = 1 Тогда

		НовыйНомер = НаборЗаписей[0];
		Поддон = Справочники.Поддоны.НайтиПоНаименованию(место);
		Если Поддон <> Справочники.Поддоны.ПустаяСсылка() Тогда
			Лог =  " сменил поддон с " + НовыйНомер.поддон + " на " + Поддон;

			ЛогированиеИндНомера(Строка(НовыйНомер.индкод), Автор, Лог, Строка(Поддон.Стеллаж), Поддон,
				НовыйНомер.Стеллаж, НовыйНомер.поддон);

			НовыйНомер.поддон = Поддон;
			НовыйНомер.Стеллаж = Поддон.Стеллаж;

			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Успех");
		Иначе
			Ответ = Новый HTTPСервисОтвет(404);
			Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
			Ответ.УстановитьТелоИзСтроки("Поддон не найден");
		КонецЕсли;
	КонецЕсли;

	НаборЗаписей.Записать();
	Возврат ответ;

КонецФункции

Функция ПолучениеФотоДляТелеги(ИндКод) Экспорт
//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", ШлюзПоИмяИБ());

		СтрокаЗапроса = "/v1/images?type=outlinks&ind_code=" + ИндКод;
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		//Для Каждого ЭлементМассива из ИндКод Цикл
		//СтрокаЗапроса = СтрокаЗапроса + ЭлементМассива;
		//Конеццикла;
		//Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		//В запросе можно обратиться к нужному ресурсу и с нужными параметрами
		//Запрос = Новый HTTPЗапрос("/index.php?param1=1¶m2=2"); 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);	
		//ЗапросСтруктура = Новый Структура();
		//
		//ЗапросСтруктура.Вставить("id", ИндКод);
		//
		//
		//// параметры запроса
		//ПотокJSON = Новый ЗаписьJSON();
		//ПотокJSON.УстановитьСтроку();
		//
		//ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		//СтрокаJSON = ПотокJSON.Закрыть();
		//Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: " + Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;
	Исключение
		МассивПустыхФото = Новый массив;

		//@skip-check module-unused-local-variable
		Для Каждого Стр Из ИндКод Цикл
			urls = Новый массив;
			МассивПустыхФото.Добавить(urls);

		КонецЦикла;

		Возврат МассивПустыхФото;
	КонецПопытки;
КонецФункции

Функция ПолучитьМесто(Партия) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.Стеллаж КАК Стеллаж
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.стеллаж;
КонецФункции

Функция ПолучитьПоддон(Партия) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.поддон КАК поддон
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |ГДЕ
				   |	ИндНомер.индкод = &индкод";
	Запрос.УстановитьПараметр("индкод", Партия);
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.поддон;
КонецФункции


Функция ЕстьНаПолкеРВРВ(Номенклатура) Экспорт
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИндНомер.индкод КАК индкод
				   |ИЗ
				   |	РегистрСведений.ИндНомер КАК ИндНомер
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
				   |		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
				   |ГДЕ
				   |	(ИндНомер.Стеллаж.Наименование ПОДОБНО ""K-2-11-1"")
				   |	И ИндНомер.индкод.Владелец = &Владелец
				   |	И РегистрНакопления1Остатки.КолвоОстаток > 0";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьИнформациюОПартии(Ind_code) экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ПОМЕСТИТЬ ВТ_предКоды
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""~""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегИндНомер.индкод.Владелец КАК Наименование,
	|	РегИндНомер.индкод КАК индкод,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Цена > 0
	|			ТОГДА РегИндНомер.Цена
	|		ИНАЧЕ РегИндНомер.индкод.Владелец.РекомендованаяЦена
	|	КОНЕЦ КАК Цена,
	|	РегИндНомер.Комментарий КАК Комментарий,
	|	РегИндНомер.индкод.Владелец.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.Подкатегория2) КАК Подкатегория2,
	|	ВЫБОР
	|		КОГДА РегИндНомер.Стеллаж <> ЗНАЧЕНИЕ(справочник.Стеллаж.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РегИндНомер.Стеллаж)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РегИндНомер.индкод.Владелец.МестоНаСкладе2)
	|	КОНЕЦ КАК Адрес,
	|	РегистрНакопления1Остатки.Склад КАК Склад,
	|	РегИндНомер.Поддон КАК Поддон,
	|	РегИндНомер.АвитоЧастник КАК АвитоЧастник,
	|	РегИндНомер.индкод.Владелец.Размеры КАК Размеры,
	|	РегИндНомер.индкод.Владелец.Вес КАК Вес,
	|	РегИндНомер.индкод.Владелец.выс КАК выс,
	|	РегИндНомер.индкод.Владелец.длин КАК длин,
	|	РегИндНомер.индкод.Владелец.шир КАК шир,
	|	РегистрНакопления1Остатки.машина КАК Машина,
	|	РегистрНакопления1Остатки.машина.Год КАК годМашины
	|ИЗ
	|	ВТ_предКоды КАК ИндНомер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК РегИндНомер
	|		ПО ИндНомер.индкод = РегИндНомер.индкод";
	
	Запрос.УстановитьПараметр("Наименование", Ind_code);
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтвета = Новый Структура;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		//СтруктураОтвета.Вставить("Цена",   Выборка.Цена);
		СтруктураОтвета.Вставить("Склад",  Выборка.Склад);
		СтруктураОтвета.Вставить("Партия", Выборка.индкод);
		СтруктураОтвета.Вставить("Машина", Выборка.Машина);
		СтруктураОтвета.Вставить("Стеллаж", Выборка.Адрес);
		СтруктураОтвета.Вставить("Поддон", Выборка.Поддон);
		СтруктураОтвета.Вставить("ГодМашины", Выборка.Поддон);
		//СтруктураОтвета.Вставить("Товар",  Выборка.Наименование);
	Иначе
		//СтруктураОтвета.Вставить("Цена",   0);
		СтруктураОтвета.Вставить("Склад",    "Отсутствует");
		СтруктураОтвета.Вставить("Партия",   "Отсутствует");
		СтруктураОтвета.Вставить("Машина",   "Отсутствует");
		СтруктураОтвета.Вставить("Стеллаж",  "Отсутствует");
		СтруктураОтвета.Вставить("Поддон", 	  "Отсутствует");
		СтруктураОтвета.Вставить("ГодМашины", 0);
	//	СтруктураОтвета.Вставить("Товар",  "Отсутствует");
	КонецЕсли;

	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучитьСтруктуруТоваров(Номер) Экспорт
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	СтатусыТовараВЗаказНаряде.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ ВТ_Статусы
				   |ИЗ
				   |	Перечисление.СтатусыТовараВЗаказНаряде КАК СтатусыТовараВЗаказНаряде
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	КОЛИЧЕСТВО(ЗаказНарядТовары.НомерСтроки) КАК КоличествоСтрок,
				   |	ЗаказНарядТовары.Состояние КАК Состояние
				   |ПОМЕСТИТЬ ВТ_Условие
				   |ИЗ
				   |	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
				   |ГДЕ
				   |	ЗаказНарядТовары.Ссылка.Номер = &Номер
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ЗаказНарядТовары.Состояние
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ВТ_Статусы.Ссылка КАК Ссылка,
				   |	ЕСТЬNULL(ВТ_Условие.КоличествоСтрок, 0) КАК КоличествоСтрок
				   |ИЗ
				   |	ВТ_Статусы КАК ВТ_Статусы
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Условие КАК ВТ_Условие
				   |		ПО ВТ_Статусы.Ссылка = ВТ_Условие.Состояние";
	Запрос.УстановитьПараметр("Номер", Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивТоваров = Новый массив;
	Пока Выборка.Следующий() Цикл
		СтруктураСтатусов = Новый Структура;
		СтруктураСтатусов.Вставить("state", Строка(Выборка.Ссылка));
		СтруктураСтатусов.Вставить("state_pose", Перечисления.СтатусыТовараВЗаказНаряде.Индекс(выборка.Ссылка));
		СтруктураСтатусов.Вставить("count", Выборка.КоличествоСтрок);
		МассивТоваров.Добавить(СтруктураСтатусов);
	КонецЦикла;
	Возврат МассивТоваров;
КонецФункции

Функция ПолучениеФотоБезИндНомер(ИндКод) Экспорт
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL());  
	//@skip-check empty-except-statement
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", ШлюзПоИмяИБ());

		СтрокаЗапроса = "/v1/images";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
 
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
		ЗапросСтруктура = Новый Структура;

		ЗапросСтруктура.Вставить("indCode", ИндКод);
		
		
		// параметры запроса
		ПотокJSON = Новый ЗаписьJSON;
		ПотокJSON.УстановитьСтроку();

		ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
		СтрокаJSON = ПотокJSON.Закрыть();
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);

		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
		Иначе
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			ответ = Неопределено;
		КонецЕсли;
//		Массив = Новый Массив; 
	
		Возврат Ответ; 
	Исключение
//		МассивПустыхФото = Новый массив;
//
//		Для Каждого стр Из ИндКод Цикл
//			urls = Новый массив;
//			МассивПустыхФото.Добавить(urls);
//
//		КонецЦикла;
//
//		Возврат МассивПустыхФото;
	КонецПопытки;
КонецФункции

Функция ПолучениеФотоУчтенногоТовара(Страница, Количество) Экспорт
	//@skip-check empty-except-statement
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245", ШлюзПоИмяИБ());

		СтрокаЗапроса = "/v2/product?page=" + Страница + "&limit=" + Количество + "&order_by=DESC";
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);

		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);

		Если Ответ.КодСостояния = 200 Тогда
			Тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Возврат Ответ;
		Иначе

			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Тело);

			Ответ  = ПрочитатьJSON(ЧтениеJSON);

		КонецЕсли;
		Возврат Ответ;
	Исключение

		//сообщить("");
	КонецПопытки
КонецФункции


Функция ПолучитьИнформациюОТоваре(Code) экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Номенклатура.Ссылка КАК Ссылка,
				   |	Номенклатура.РекомендованаяЦена КАК РекомендованаяЦена
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.Код = &Код";

	Запрос.УстановитьПараметр("Код", code);

	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураОтвета = Новый Структура;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		СтруктураОтвета.Вставить("Цена", Выборка.РекомендованаяЦена);
		СтруктураОтвета.Вставить("Товар", Выборка.Ссылка);
	Иначе
		СтруктураОтвета.Вставить("Цена", 0);
		СтруктураОтвета.Вставить("Товар", 0);
	КонецЕсли;

	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучитьПроцентНалога(Организация) Экспорт
	
	///+ГомзМА 11.10.2023
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организация.Налог КАК Налог
	|ИЗ
	|	Справочник.Организация КАК Организация
	|ГДЕ
	|	Организация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Организация);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	РезультатЗапроса.Следующий();
	
	Результат = РезультатЗапроса.Налог;
	
	Возврат Результат;
	///-ГомзМА 11.10.2023
	
КонецФункции // ПолучитьПроцентНалога()
#КонецОбласти