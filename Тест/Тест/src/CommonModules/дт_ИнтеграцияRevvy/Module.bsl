//
//  https://nov-soft.ru
//

#Область ПрограммныйИнтерфейс

Процедура ДобавитьВОчередьНаОтправкуАнкеты(Ссылка) Экспорт
	
	Свойство =  ПолучитьСвойствоОтправлен(Ссылка);
	
	Если Свойство = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Значения = УправлениеСвойствами.ЗначенияСвойств(Ссылка, Ложь, Истина, Свойство);
	ЗначениеУстановлено = НЕ Значения.Количество() = 0;
	
	Значение = ?(ЗначениеУстановлено, Значения[0], Неопределено);
	
	Если Значение = Неопределено Тогда
		Значение = Ложь; 
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив")  Тогда
		Если Значение.Количество() = 0 Тогда
			Значение = Ложь;
		Иначе
			Значение = Значение[0].Значение;
			ЗначениеУстановлено = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		ЗначениеУстановлено = Истина;
	Иначе	
		Значение = Ложь;
	Конецесли;
	
	Если НЕ ЗначениеУстановлено Тогда
		дт_ОбщегоНазначения.УстановитьДопСведение(Ссылка, Свойство, Значение);
	КонецЕсли;
	
	
КонецПроцедуры


Процедура ОтправитьАнкеты() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваСписок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ЗаказНаряд_ОпросОтправлен,ПродажаЗапчастей_ОпросОтправлен");
	Свойства = Новый Структура();
	
	Для каждого Свойство из СвойстваСписок Цикл
		Свойства.Вставить(Свойство, дт_ОбщегоНазначения.ПолучитьСвойство(Свойство));
		Если Свойства[Свойство] = Неопределено Тогда
			ВызватьИсключение "Не найдено свойство " + Свойство;
		КонецЕсли;
	КонецЦикла;
	
	Адресаты = ПолучитьАдресатов(Свойства);
	Если Адресаты.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Соединение = Неопределено;
	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	
	//Если Не ТокенВалидный() Тогда
		ОбновитьТокен(ПараметрыПодключения, Соединение);
	//КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		Соединение = ПолучитьСоединение(ПараметрыПодключения);
	КонецЕсли;
	
	Отказ = Ложь;
	КоличествоОшибок = 0;
	МаксКоличествоОшибок = 5;
	Счетчик = 0;
	
	Для каждого Получатель Из Адресаты Цикл
		
		ОтказЛок = Ложь;
		Доки = получатель.документы;
		
		Если Доки.Количество() > 1 Тогда
			//Если (доки[0].Дата - доки[1].Дата) >(3600*24*30) и 
			
			/// Комлев 10/07/24 +++
			
			Если (ТекущаяДата() - доки[0].Дата) >= (3600*24*7) И (ТекущаяДата() - доки[0].Дата) <= (3600*24*14) Тогда
				ОтправитьАнкету(Получатель, ПараметрыПодключения, Соединение, ОтказЛок);
			КонецЕсли;
			
			/// Комлев 10/07/24 ---
			
		//ИначеЕсли (ТекущаяДата() - доки[0].Дата) >= (3600*24*7) тогда
			//ОтправитьАнкету(Получатель, ПараметрыПодключения, Соединение, ОтказЛок);
		КонецЕсли;
		
		
		
		Если НЕ ОтказЛок Тогда
			Для каждого ДокументКлиента Из Получатель.Документы Цикл
				
				Свойство = ПолучитьСвойствоОтправлен(ДокументКлиента);
				дт_ОбщегоНазначения.УстановитьДопСведение(ДокументКлиента, Свойство, Истина);
				Счетчик = Счетчик + 1;
			КонецЦикла;
		Иначе 
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецЕсли;
		
		
		Отказ = Отказ ИЛИ ОтказЛок;
		
		Если КоличествоОшибок > МаксКоличествоОшибок Тогда
			Прервать
		КонецЕсли;
		
	КонецЦикла;
	
	Соединение = Неопределено;
	
	Если Счетчик <> 0 Тогда	
		дт_ОбщегоНазначения.ЗаписьВЛог("Revvy", СтрШаблон("Отправлено анкет: %1", Счетчик));
	КонецЕсли;	
	
	Если Отказ Тогда
		ВызватьИсключение "Ошибки при отправке анкет (см. журнал регистрации)";
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСвойствоОтправлен(Ссылка)
	
	ИмяСвойства = Ссылка.Метаданные().Имя + "_ОпросОтправлен";
	
	Возврат дт_ОбщегоНазначения.ПолучитьСвойство(ИмяСвойства);
	
КонецФункции


Процедура ОбновитьТокен(ПараметрыПодключения, Соединение)
	
	Если Соединение = Неопределено Тогда
		Соединение = ПолучитьСоединение(ПараметрыПодключения);
	КонецЕсли;	
	
	Запрос = Новый HTTPЗапрос(ПутьФункции(ПараметрыПодключения, "authentication"));
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ЗапросСтруктура = Новый Структура();
	ЗапросСтруктура.Вставить("name", ПараметрыПодключения.ИмяПользователя);
	ЗапросСтруктура.Вставить("password", ПараметрыПодключения.Пароль);
	
	// параметры запроса
	ПотокJSON = Новый ЗаписьJSON();
	ПотокJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
	СтрокаJSON = ПотокJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	
	//Запрос.Заголовки.Вставить("Content-Length", СтрДлина(СтрокаJSON));
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстОтвета);
		ТекстОшибки = СтрШаблон("Ошибка %1. %2", Ответ.КодСостояния, ТекстОшибки);
		дт_ОбщегоНазначения.ЗаписьВЛог("Revvy", ТекстОшибки, Истина); 
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДанныеJSON = дт_ОбщегоНазначения.ПолучитьЗначениеИзJSONСтроки(ТекстОтвета, "Revvy");
	Если ДанныеJSON = Неопределено Тогда
		ВызватьИсключение "Ошибка чтение json"; 
	КонецЕсли;
	
	Данные = дт_ОбщегоНазначения.ПолучитьСвойствоОбъектаJSON(ДанныеJSON, "jwtToken");
	Если Данные = Неопределено Тогда
		ВызватьИсключение "Не удалось получить токен"; 
	КонецЕсли;
	
	Константы.дт_Revvy_Токен.Установить(Данные);
	Константы.дт_Revvy_ТокенСрокДействия.Установить(ТекущаяДата() + 30 * 24 * 3600);
	
КонецПроцедуры

Функция ТокенВалидный() 
	
	СрокДействияТокена = Константы.дт_Revvy_ТокенСрокДействия.Получить();
	
	Возврат ЗначениеЗаполнено(СрокДействияТокена) 
	И ТекущаяДата() < СрокДействияТокена;
	
КонецФункции


Функция ПолучитьПараметрыПодключения() Экспорт
	
	ПараметрыПодключения = НовыеПараметрыПодключения();
	
	URL = Константы.дт_Revvy_АдресСервера.Получить();
	
	Если Не ЗначениеЗаполнено(URL) Тогда
		ВызватьИсключение "Не заполнен адрес сервера Revvy";
	КонецЕсли;
	
	Логин = Константы.дт_Revvy_Логин.Получить();
	Пароль = Константы.дт_Revvy_Пароль.Получить();
	
	Если Не ЗначениеЗаполнено(Логин)
		ИЛИ Не ЗначениеЗаполнено(Пароль) Тогда
		
		ВызватьИсключение "Не заполнены логин и/или пароль Revvy";
		
	КонецЕсли;
	
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);	
	
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, СтруктураАдреса);
	
	ПараметрыПодключения.URL = URL;
	ПараметрыПодключения.ИмяПользователя = Логин;
	ПараметрыПодключения.Пароль = Пароль;
	
	ПараметрыПодключения.ИспользоватьSSL = СтруктураАдреса.Схема = "https";
	ПараметрыПодключения.Вставить("Токен", Константы.дт_Revvy_Токен.Получить());	
	
	Возврат ПараметрыПодключения;	
КонецФункции

Функция ПреобразоватьНаименование(Представление, ЮрФизЛицо) Экспорт
	
	Если ЮрФизЛицо = Перечисления.дт_ТипыКлиентов.ЮрЛицо Тогда
		Возврат "Уважаемый клиент";
	КонецЕсли;
	
	Результат = СтрЗаменить(Представление, "  ", " "); // двойные пробелы
	
	СимволыЗамены = "–-";
	Индекс = 1;
	Пока Индекс < СтрДлина(СимволыЗамены) Цикл
		
		Симв1 = Сред(СимволыЗамены, Индекс, 1);
		Симв2 = Сред(СимволыЗамены, Индекс + 1, 1);
		
		Результат = СтрЗаменить(Результат, Симв1, Симв2);
		
		Индекс = Индекс + 2;
		
	КонецЦикла;
	
	НедопустимыеСимволы = "«»" + Символы.ВК + Символы.ПС + Символы.ВТаб + """0123456789";
	Индекс = 1;
	Пока Индекс < СтрДлина(НедопустимыеСимволы) Цикл
		
		Симв1 = Сред(НедопустимыеСимволы, Индекс, 1);
		
		Результат = СтрЗаменить(Результат, Симв1, "");
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Результат = СокрЛП(Результат);
	
	Если Прав(Результат, 1) = "-" Тогда
		Результат = СокрП(Сред(Результат, 1, СтрДлина(Результат) - 1));
	КонецЕсли;
	
	
	Возврат Результат;
	
	
КонецФункции // ПреобразоватьНаименование()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс



Функция НовыеПараметрыПодключения() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Хост");
	Результат.Вставить("ПутьНаСервере");
	Результат.Вставить("URL");
	Результат.Вставить("ИмяПользователя");
	Результат.Вставить("Пароль");
	Результат.Вставить("Порт");
	Результат.Вставить("Таймаут");
	Результат.Вставить("ПассивныйРежим");
	Результат.Вставить("ИспользоватьSSL");
	Результат.Вставить("РезультатВыполнения", Новый Структура("МассивОшибок", Новый Массив()));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСоединение(ПараметрыПодключения) Экспорт
	
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыПодключения.ИспользоватьSSL Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()
		);
	КонецЕсли;
	
	
	СоединениеHTTP = Новый HTTPСоединение(ПараметрыПодключения.Хост, 
	ПараметрыПодключения.Порт, 
	ПараметрыПодключения.ИмяПользователя, 
	ПараметрыПодключения.Пароль,
	Неопределено, 
	ПараметрыПодключения.Таймаут, 
	ЗащищенноеСоединение
	);
	
	
	Возврат СоединениеHTTP;
	
	
КонецФункции // ПолучитьСоединениеHTTP()

Функция ПутьФункции(ПараметрыПодключения, ИмяФункции)
	
	Путь = ПараметрыПодключения.ПутьНаСервере;
	Если НЕ СтрЗаканчиваетсяНа(Путь, "/") Тогда
		Путь = Путь + "/";
	КонецЕсли;
	
	Возврат Путь + ИмяФункции;
	
КонецФункции


Функция ПолучитьДатаНачалаИспользованияОпросов()
	Возврат Дата(2024, 05, 16);
КонецФункции


Функция ПолучитьАдресатов(СвойстваПризнакОтправки)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПродажаЗапчастей.Ссылка КАК Ссылка,
	|	ПродажаЗапчастей.Клиент КАК Клиент,
	|	&Свойство2 КАК Свойство
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.Проведен
	|	И ПродажаЗапчастей.СтатусДоставки = &СтатусДоставки
	|	И ПродажаЗапчастей.Дата >= &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументы.Ссылка КАК Ссылка,
	|	втДокументы.Клиент КАК Клиент
	|ПОМЕСТИТЬ втДокументы2
	|ИЗ
	|	втДокументы КАК втДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО втДокументы.Ссылка = ДополнительныеСведения.Объект
	|			И (ДополнительныеСведения.Свойство = втДокументы.Свойство)
	|ГДЕ
	|	(ВЫРАЗИТЬ(ЕСТЬNULL(ДополнительныеСведения.Значение, ЛОЖЬ) КАК БУЛЕВО)) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Клиент КАК Клиент
	|ПОМЕСТИТЬ втКлиенты
	|ИЗ
	|	втДокументы2 КАК Док
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Клиент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Клиенты.Телефон КАК Телефон,
	|	Клиенты.Ссылка КАК Ссылка,
	|	втДокументы.Ссылка КАК Документ
	|ИЗ
	|	втКлиенты КАК втКлиенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Клиенты КАК Клиенты
	|		ПО втКлиенты.Клиент = Клиенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДокументы КАК втДокументы
	|		ПО (Клиенты.Ссылка = втДокументы.Клиент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(Телефон)
	|ПО
	|	Ссылка";
	
	//Запрос.УстановитьПараметр("Состояние", ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен"));
	Запрос.УстановитьПараметр("СтатусДоставки", ПредопределенноеЗначение("Перечисление.СтатусОтправки.Отправлен"));
	Запрос.УстановитьПараметр("НачалоПериода", ПолучитьДатаНачалаИспользованияОпросов());
	//Запрос.УстановитьПараметр("Свойство1", СвойстваПризнакОтправки.ЗаказНаряд_ОпросОтправлен);
	
	
	//Комлев 10/07/24 +++
	//Запрос.УстановитьПараметр("Свойство2", СвойстваПризнакОтправки.ПродажаЗапчастей_ОпросОтправлен);
	Запрос.УстановитьПараметр("Свойство2", "ПродажаЗапчастей_ОпросОтправлен");
	
	//Комлев 10/07/24 ---
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Телефон");
	Результат.Колонки.Добавить("Имя");
	Результат.Колонки.Добавить("Наименование");
	Результат.Колонки.Добавить("Документы");
	
	ТДата = ТекущаяДата();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Телефон) Тогда
			
			дт_ОбщегоНазначения.ЗаписьВЛог("Revvy", 
			СтрШаблон("Не заполнен номер телефона клиента %1. Анкета не отправлена", Выборка.Ссылка), 
			Неопределено,
			Выборка.Ссылка.Метаданные(),
			Выборка.Ссылка
			);
			Продолжить;
		КонецЕсли;
		
		//Телефоны = дт_моиЗвонки.ПреобразоватьНомерТелефона(Выборка.Телефон);
		ДопустимыеСимволы = "0123456789";

		ЛишниеСимволы = СтрСоединить(СтрРазделить(Выборка.Телефон,ДопустимыеСимволы));

		Телефон = СтрСоединить(СтрРазделить(Выборка.Телефон,ЛишниеСимволы));
		
		//Если ТипЗнч(Телефоны) = Тип("Массив") Тогда
		//	Телефон = Телефоны[0];
		//Иначе
		//	Телефон = Телефоны;
		//КонецЕсли;
		//
		//Если СтрНачинаетсяС(Телефон, "+") Тогда
		//	Телефон = Сред(Телефон, 2);
		//КонецЕсли;
		
		СтрокаТаблицы = Результат.Найти(Телефон, "Телефон");
		
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = Результат.Добавить();
			СтрокаТаблицы.Телефон = Телефон;
			
			СведенияОКлиенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Ссылка, ТДата);
			
			СтрокаТаблицы.Имя = ПреобразоватьНаименование(СведенияОКлиенте.СокращенноеНаименование, СведенияОКлиенте.ЮрФизЛицо);
			СтрокаТаблицы.Наименование = СведенияОКлиенте.СокращенноеНаименование;
			СтрокаТаблицы.Документы = Новый Массив();
		КонецЕсли;
		
		
		
		
		// Массив  документов клиента
		ВыборкаДокументы = Выборка.Выбрать();		
		Пока ВыборкаДокументы.Следующий() Цикл
			СтрокаТаблицы.Документы.Добавить(ВыборкаДокументы.Документ);	
		КонецЦикла;
		
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьАнкету(Получатель, ПараметрыПодключения, Соединение, Отказ)
	
	Если Соединение = Неопределено Тогда
		Соединение = ПолучитьСоединение(ПараметрыПодключения);
	КонецЕсли;	
	
	Запрос = Новый HTTPЗапрос(ПутьФункции(ПараметрыПодключения, "reviews/request"));
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ЗапросСтруктура = Новый Структура();
	ЗапросСтруктура.Вставить("name", Получатель.Имя);
	ЗапросСтруктура.Вставить("phone", Получатель.Телефон);
	
	// параметры запроса
	ПотокJSON = Новый ЗаписьJSON();
	ПотокJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ПотокJSON, ЗапросСтруктура);
	СтрокаJSON = ПотокJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	
	//Запрос.Заголовки.Вставить("Content-Length", СтрДлина(СтрокаJSON));
	ИндексПопытки = 0;
	КоличествоПопыток = 1;
	
	Пока ИндексПопытки < КоличествоПопыток Цикл
		
		Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Константы.дт_Revvy_Токен.Получить())); 
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		Если Ответ.КодСостояния <> 200 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстОтвета);
			ТекстОшибки = СтрШаблон("Ошибка %1. %2 %3. %4", 
			Ответ.КодСостояния, 
			Получатель.Телефон, 
			Получатель.Наименование,
			ТекстОшибки
			);
			
			
			дт_ОбщегоНазначения.ЗаписьВЛог("Revvy", ТекстОшибки, Истина);
			
			ТекстОшибки = "Заголовки ответа: "; 
			Для каждого Заголовок Из Ответ.Заголовки Цикл
				ТекстОшибки = ТекстОшибки + Символы.ПС +  СтрШаблон("%1:%2", Заголовок.Ключ, Заголовок.Значение);
			КонецЦикла;
			дт_ОбщегоНазначения.ЗаписьВЛог("Revvy", ТекстОшибки, Истина);
			
			Отказ = Истина;
			
			// Дополнительно проверим валидность токена
			Если Ответ.КодСостояния = 401 Тогда
				ТекстОшибки = Ответ.Заголовки.Получить("WWW-Authenticate");
				Если ТекстОшибки <> Неопределено Тогда
					Если СтрНайти(ТекстОшибки, "invalid_token") <> 0 Тогда
						дт_ОбщегоНазначения.ЗаписьВЛог("Revvy", "Требуется обновить токен", Неопределено);
						ОбновитьТокен(ПараметрыПодключения, Соединение);
						Отказ = Ложь;
						КоличествоПопыток = КоличествоПопыток + 1;
					КонецЕсли;
				КонецЕсли;
				// дополнительно проверим ошибку повторной отправки
				// For client with phone=.... request for feedback was send early by WhatsApp 
			ИначеЕсли Ответ.КодСостояния = 400 Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстОтвета);
				Если СтрНайти(ТекстОшибки, "was send early") <> 0 Тогда
					Отказ = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			дт_ОбщегоНазначения.ЗаписьВЛог("Revvy", СтрШаблон("Анкета отправлена. Получатель: %1, %2", Получатель.Телефон, Получатель.Наименование), Ложь)
		КонецЕсли;
		
		ИндексПопытки = ИндексПопытки + 1;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти