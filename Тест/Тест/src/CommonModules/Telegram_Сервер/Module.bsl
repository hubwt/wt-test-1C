
//Прочитать сообщение пользователя
Процедура ПрочитатьСообщенияПользователя() Экспорт
	СтруктураНастроек = ПолучитьНастройкиTelegram();
	
	//Установим соединение
	Источник = "bot" + СтруктураНастроек.token + "/getUpdates";
	HTTPСоединение  =  Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());	
	HTTPЗапрос = Новый HTTPЗапрос(Источник);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");	
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Данные = ДесериализоватьJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
		Если Данные.ok И Данные.result.Количество()>0 Тогда
			//Запишем историю сообщений
			
			Для каждого СтрокаМассива Из Данные.result  Цикл
				СообщениеID = СтрокаМассива.update_id;
				Если ПроверитьНаличиеСообщенияПоID(СообщениеID) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаМассива.Свойство("message") Тогда
					Попытка
						Команда = ВернутьКомандуTelegram(СтрокаМассива.message.text); 
					Исключение
						Команда = ВернутьКомандуTelegram("/start"); 
					КонецПопытки;
					ЗаписатьИсториюСообщений(СтрокаМассива.message,СообщениеID,Команда);					 
					ОбработатьОтветПользователя(Команда,СтруктураНастроек,СтрокаМассива.message,СообщениеID);
				Иначе
					//Команда = ВернутьКомандуTelegram(СтрокаМассива.message.text);
					//ЗаписатьИсториюСообщений(СтрокаМассива.message,СообщениеID,Команда);					 
					//ОбработатьОтветПользователя(Команда,СтруктураНастроек,СтрокаМассива.message,СообщениеID);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 		
	КонецЕсли;
КонецПроцедуры

//Отправить сообщение пользователю
Процедура ОтправитьСообщениеПользователюНаСогласование(ID_Пользователя,ТекстСогласования) Экспорт
	СтруктураНастроек = ПолучитьНастройкиTelegram();
	
	МассивКнопок = Новый Массив;
	МассивКнопок.Добавить("Согласовать");
	МассивКнопок.Добавить("Не согласовать");
	Кнопки = Новый Массив;
	Для каждого кнопка ИЗ МассивКнопок Цикл
		Кнопки.Добавить(Новый Структура("text, callback_data", кнопка, СтрЗаменить(кнопка, " ", "")+"/"+"Истина"+"/"+"Ложь"));
	КонецЦикла;
	Строки = Новый Массив;
	Строки.Добавить(Кнопки);
	КнопкиJs = ЗаписатьJS(Новый Структура("inline_keyboard", Строки));
	
	Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(ID_Пользователя, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ТекстСогласования + "&reply_markup="+КнопкиJs;
	HTTPСоединение  =  Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос(Приемник);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	ЗаписатьИсториюОтветов(ТекстСогласования,Справочники.Telegram_КомандыСистемы.Согласование,"");
	
	
	
КонецПроцедуры   

Процедура ОтправитьСообщениеПользователю(ID_Пользователя, ТекстСогласования) Экспорт
	СтруктураНастроек = ПолучитьНастройкиTelegram();
	
	Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + ID_Пользователя + "&text=" + ТекстСогласования; //+ "&reply_markup="+КнопкиJs;
	HTTPСоединение  =  Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос(Приемник);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	ЗаписатьИсториюОтветов(ТекстСогласования,Справочники.Telegram_КомандыСистемы.Согласование,"");
	
	
	
КонецПроцедуры


Процедура ОтправитьКартинкуПользователю(ID_Пользователя,путь) Экспорт
	СтруктураНастроек = ПолучитьНастройкиTelegram();
	
	Приемник = "bot" + СтруктураНастроек.token + "/sendPhoto?chat_id=" + ID_Пользователя + "&photo=" + путь; //+ "&reply_markup="+КнопкиJs;
	HTTPСоединение  =  Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос(Приемник);
	Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	//ЗаписатьИсториюОтветов(ТекстСогласования,Справочники.Telegram_КомандыСистемы.Согласование,"");
	
	
	
КонецПроцедуры
//Функция Телеграм_ОтправкаКартинки(АйдиЧата,ПутьКФайлуКартинки,ИмяКартинки,ПодписьККартинке="") Экспорт
Функция Телеграм_ОтправкаКартинки(ПутьКФайлу) Экспорт
    СтруктураНастроек = ПолучитьНастройкиTelegram();
    AccessToken = СтруктураНастроек.token;

   //Получаем Chat ID Телеграм заранее написав боту любое сообщение
   //https://api.telegram.org/bot123456789:XXXXXX-X-XXXX-XXXXXXXXXXXXXXXXXXXXXX/getUpdates,
   //где 123456789:XXXXXX-X-XXXX-XXXXXXXXXXXXXXXXXXXXXX - это токен нашего бота
   ServerTg  = "api.telegram.org";
   ChatID      = "-1002106229478";

   ФайлДляОтправки = Новый Файл(ПутьКФайлу);

   СтрокаСоединения = "bot" + AccessToken + "/sendDocument";

   // Разделитель;
   Boundary = "----"+Строка(Новый УникальныйИдентификатор());

   // Определяем массив для процедуры ОбъединитьФайлы;
   МассивФайловДляОбъединения = Новый Массив;

   // Формируем начальный фрагмент файла POST-запроса;
   ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt");
   ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.UTF8);

   // Формируем конечный фрагмент файла POST-запроса;
   ИмяФайлаЗаписи = ПолучитьИмяВременногоФайла("txt");
   ФайлаЗаписи = Новый ЗаписьТекста(ИмяФайлаЗаписи, КодировкаТекста.UTF8);

   ТекстОтправки = "";
   ТекстОтправки = ТекстОтправки + "--" + Boundary + Символы.ПС;
   ТекстОтправки = ТекстОтправки + "Content-Disposition: form-data; name=""chat_id""" + Символы.ПС + Символы.ПС + СтрЗаменить(Формат(ChatID, "ЧДЦ=0; ЧС=; ЧРГ=.; ЧГ=0"), ".", "") + Символы.ПС;
   ТекстОтправки = ТекстОтправки + "--" + Boundary + Символы.ПС;
   ТекстОтправки = ТекстОтправки + "Content-Disposition: form-data; name=""document""; filename=""/" + ФайлДляОтправки.Имя + """" + Символы.ПС;

   // Записываем ФайлОтправки;
   ФайлОтправки.ЗаписатьСтроку(ТекстОтправки);
   ФайлОтправки.Закрыть();

   ТекстОтправки = "" + Символы.ПС;
   ТекстОтправки = ТекстОтправки + "--" +  Boundary+"--";

   // Записываем ФайлаЗаписи;
   ФайлаЗаписи.ЗаписатьСтроку(ТекстОтправки);
   ФайлаЗаписи.Закрыть();

   // Заполняем массив;
   МассивФайловДляОбъединения.Добавить(ИмяФайлаЗаписи);
   МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);
   МассивФайловДляОбъединения.Добавить(СокрЛП(ПутьКФайлу));

   // Формируем ИмяФайлаОтправки;
   ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("txt");
   ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);

   HTTPЗапрос     = Новый HTTPЗапрос;
   Заголовки     = Новый Соответствие;
   // Формируем Заголовки HTTP Запроса;
   HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
   HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary);
   HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);
   // Установим АдресРесурса;
   HTTPЗапрос.АдресРесурса     = СтрокаСоединения;

   SSL  = Новый ЗащищенноеСоединениеOpenSSL();
   СоединениеHTTP = Новый HTTPСоединение(ServerTg, 443,,,,, SSL);

   Попытка
       // POST запрос;
       Ответ = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
       КодСостояния     = Ответ.КодСостояния;
       СтрокаОтвета     = Ответ.ПолучитьТелоКакСтроку();
       Если КодСостояния = 200 Тогда
           // Читаем JSON;
           ЧтениеJSON = Новый ЧтениеJSON;
           ЧтениеJSON.УстановитьСтроку(СтрокаОтвета);
           РезультатСтруктура = ПрочитатьJSON(ЧтениеJSON);
           Если РезультатСтруктура.ok = Истина Тогда
               СтруктураMessage = РезультатСтруктура.result;
           КонецЕсли;
       Иначе
           Сообщить("КодСостояния " + КодСостояния);
           Сообщить(СтрокаОтвета);
       КонецЕсли;

   Исключение
       // Здесь может быть обработчик ошибки или вход в резервную функцию
   КонецПопытки;

	
	
	
	
//	
//		Перем Boundary,Сервер,ИмяФайлаОтправки,ЗаписьДанных,ДвоичныеДанныеИзображения,HTTPЗапрос,HTTPСоединение,ДанныеКакСтрока,АдресЗапроса,Заголовки;
//СтруктураНастроек = ПолучитьНастройкиTelegram();
//	Boundary = Строка(Новый УникальныйИдентификатор());
//	//ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);  //НЕ РАБОТАЕТ! НЕ Реализован метод ОбъединитьФайлы!!

//	//Вместо ОбъединитьФайлы (в версих 1С до 8.3.9) сейчас (начиная с 8.3.9) используются:
//	//Поток, ПотокВПамяти, ФайловыйПоток
//	//
//	//https://infostart.ru/public/561328/


//		ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("txt");
//		Сообщить(ИмяФайлаОтправки);
//		ЗаписьДанных = Новый ЗаписьДанных(ИмяФайлаОтправки);

//	// ЧАТ
//		ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
//		ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""chat_id""");
//		ЗаписьДанных.ЗаписатьСтроку("");
//		ЗаписьДанных.ЗаписатьСтроку(СокрЛП(АйдиЧата));
//	// ПОДПИСЬ
//		ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
//		ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""caption""");
//		ЗаписьДанных.ЗаписатьСтроку("");
//		ЗаписьДанных.ЗаписатьСтроку(СокрЛП(ПодписьККартинке));

//	// ФОТО
//		ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
//		ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""photo""; filename="""+ИмяКартинки+"""");
//		ЗаписьДанных.ЗаписатьСтроку("Content-Type: image/jpeg");
//		ЗаписьДанных.ЗаписатьСтроку("");
//		ИмяФайлаКартинки = ПутьКФайлуКартинки+ИмяКартинки;
//		ДвоичныеДанныеИзображения = Новый ДвоичныеДанные(ИмяФайлаКартинки);
//		ЗаписьДанных.Записать(ДвоичныеДанныеИзображения);
//		ЗаписьДанных.ЗаписатьСтроку("");

//	// ЗАВЕРШЕНИЕ
//		ЗаписьДанных.ЗаписатьСтроку("--" + Boundary + "--");	//Завершение сообщения для сервера
//		ЗаписьДанных.ЗаписатьСтроку("");
//		ЗаписьДанных.Закрыть();

//		TOKENID=СтруктураНастроек.token;
//		АдресЗапроса="https://api.telegram.org/bot"+TOKENID+"/sendPhoto";

//	Заголовки  = Новый Соответствие;
//	HTTPЗапрос = Новый HTTPЗапрос;
//	HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
//	HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary);

//	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);
//	//УстановитьТелоИзСтроки();

//	АдресЗапроса="/bot"+TOKENID+"/sendPhoto";
//	HTTPЗапрос.АдресРесурса = АдресЗапроса;

//	//Сервер = "https://api.telegram.org/"; //В родном 1С-ном методе Нельзя указывать протокол!!!
//	//НО по инструкции http://oscript.io/syntax/page/HTTP%D0%A1%D0%BE%D0%B5%D0%B4%D0%B8%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5
//	//для реализации https - как раз его и нужно указать в адресе!!!
//	Сервер = "https://api.telegram.org";
//	HTTPСоединение = Новый HTTPСоединение(Сервер);

//	//Сообщить("1. Отправляем запрос:");
//	ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
//	//Сообщить("2. Отправили запрос:");

//	ДанныеКакСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();

//	//Сообщить("3. Отчет:");
//	//Сообщить(ДанныеКакСтрока);

//	HTTPЗапрос=""; HTTPСоединение="";
КонецФункции

//Запишим историю сообщений
Процедура ЗаписатьИсториюСообщений(СтруктураСообщения, ID_Сообщения,Команда)
	
	МенеджерЗаписи = РегистрыСведений.Telegram_ИсторияСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();  
	Попытка
	МенеджерЗаписи.Сообщение = СокрЛП(СтруктураСообщения.text); 
Исключение
	МенеджерЗаписи.Сообщение = "Текст"; 
	КонецПопытки;
	МенеджерЗаписи.Команда = Команда;
	МенеджерЗаписи.ВидСообщения = Перечисления.Telegram_ВидСообщения.Входящее;
	Попытка
		МенеджерЗаписи.Пользователь = ВернутьСоздатьПользователяTelegram(СтруктураСообщения.chat.last_name + " " + СтруктураСообщения.chat.first_name, СтруктураСообщения.chat.id);
	Исключение
	КонецПопытки;
	
	МенеджерЗаписи.ID_Сообщения = ID_Сообщения;
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

//Запишим историю сообщений
Процедура ЗаписатьИсториюОтветов(ОтветСистемы,Команда,ID_Сообщения)
	
	МенеджерЗаписи = РегистрыСведений.Telegram_ИсторияСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Сообщение = ОтветСистемы;
	МенеджерЗаписи.Команда = Команда;
	МенеджерЗаписи.ВидСообщения = Перечисления.Telegram_ВидСообщения.Исходящее;
	МенеджерЗаписи.Пользователь = Справочники.Пользователи.ПустаяСсылка();
	МенеджерЗаписи.ID_Сообщения = ID_Сообщения;
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

//Дадим обратную связь пользователю
Процедура ОбработатьОтветПользователя(Команда,СтруктураНастроек,СтруктураСообщения,СообщениеID)
	
	Если НЕ ЗначениеЗаполнено(Команда) Тогда
		ОтветСистемы = "Извините, но я такого не знаю";
		
	Иначе
		ИмяФайла = "";
		ОтветСистемы = "";                                                                                                          
		Выполнить(Команда.КодОбработки);
	КонецЕсли; 	 
	
	
	Если Команда.ТипКоманды = Перечисления.Telegram_ТипыКоманд.Файл Тогда
		
		Boundary = "----"+Строка(Новый УникальныйИдентификатор());
		
		//Определяем массив для процедуры ОбъединитьФайлы
		МассивФайловДляОбъединения = Новый Массив;
		
		//Формируем начальный фрагмент файла POST-запроса
		ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt");
		ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.UTF8);
		
		//Формируем конечный фрагмент файла POST-запроса
		ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt");
		ФайлаОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.UTF8);
		
		ТекстДляОтправки = "";
		
		ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;
		ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""chat_id""" + Символы.ПС + Символы.ПС;
		ТекстДляОтправки = ТекстДляОтправки + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + Символы.ПС;
		
		ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;
		ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""document""; filename=""report.xlsx""" + Символы.ПС;
		
		ФайлОтправкиНачало.ЗаписатьСтроку(ТекстДляОтправки );
		ФайлОтправкиНачало.Закрыть();
		
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);
		
		МассивФайловДляОбъединения.Добавить(СокрЛП(ИмяФайла));
		
		ТекстДляОтправки = "" + Символы.ПС;
		ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary+"--";
		ФайлаОтправкиКонец.ЗаписатьСтроку(ТекстДляОтправки);
		ФайлаОтправкиКонец.Закрыть();
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец);
		
		ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("txt");
		ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
		
		
		HTTPЗапрос = Новый HTTPЗапрос;
		Заголовки = Новый Соответствие;
		
		HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary);
		
		HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);
		HTTPЗапрос.АдресРесурса = "/bot" + СтруктураНастроек.token + "/sendDocument";
		
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
		HTTPСоединение = Новый HTTPСоединение(СтруктураНастроек.api,,,,,, ЗащищенноеСоединение);
		
		Попытка
			ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Исключение	
		КонецПопытки;
	Иначе  
		Приемник = "bot" + СтруктураНастроек.token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(СтруктураСообщения.chat.id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ОтветСистемы;
		HTTPСоединение  =  Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		HTTPЗапрос = Новый HTTPЗапрос(Приемник);
		Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		ЗаписатьИсториюОтветов(ОтветСистемы,Команда,СообщениеID);
	КонецЕсли; 
	
	
КонецПроцедуры


Функция ПроверитьНаличиеСообщенияПоID(ID_Сообщения)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Telegram_ИсторияСообщений.Период КАК Период
	|ИЗ
	|	РегистрСведений.Telegram_ИсторияСообщений КАК Telegram_ИсторияСообщений
	|ГДЕ
	|	Telegram_ИсторияСообщений.ID_Сообщения = &ID_Сообщения";
	
	ЗАпрос.УстановитьПараметр("ID_Сообщения",ID_Сообщения);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Количество()>0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;  
	
КонецФункции // ПроверитьНаличиеСообщенияПоID()


Функция ВернутьСтруктуруСогласования() 
	
	Строки = Новый Массив;
	Кнопки = Новый Массив;
	СтруктураСогласования = Новый Структура;
	
	Для каждого кнопка ИЗ СтруктураСогласования.МассивКнопок Цикл
		Кнопки.Добавить(Новый Структура("text, callback_data", кнопка, СтрЗаменить(кнопка, " ", "")+"/"+СтруктураСогласования.Предмет+"/"+СтруктураСогласования.ПолеПоиска));
	КонецЦикла;
	
	
	Строки.Добавить(Кнопки);
	
	КнопкиJs = ЗаписатьJS(Новый Структура("inline_keyboard", Строки));
	
	Возврат Новый Структура("Текст,Кнопки", СтруктураСогласования.Описание, КнопкиJs);
	
КонецФункции 


#Область ОбщиеКоманды 
//Получим настройки подключения
Функция ПолучитьНастройкиTelegram() Экспорт
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяБота","");
	СтруктураНастроек.Вставить("token","");
	СтруктураНастроек.Вставить("api","");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Telegram_Настройки.ИмяБота КАК bot,
	|	Telegram_Настройки.token КАК token,
	|	Telegram_Настройки.api КАК api
	|ИЗ
	|	РегистрСведений.Telegram_Настройки КАК Telegram_Настройки";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Количество()>0 Тогда
		ВыборкаЗапроса.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураНастроек,ВыборкаЗапроса);
	КонецЕсли;
	Возврат СтруктураНастроек;
КонецФункции // ПолучитьПараметры()

//Возвращаем команду по наименованию
Функция ВернутьКомандуTelegram(НаименованиеКоманды)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Telegram_КомандыСистемы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Telegram_КомандыСистемы КАК Telegram_КомандыСистемы
	|ГДЕ
	|	Telegram_КомандыСистемы.Наименование = &НаименованиеКоманды";
	Запрос.УстановитьПараметр("НаименованиеКоманды",НРег(НаименованиеКоманды));
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Количество()>0 Тогда
		ВыборкаЗапроса.Следующий();
		Возврат ВыборкаЗапроса.Ссылка;
	Иначе
		Возврат Справочники.Telegram_КомандыСистемы.ПустаяСсылка();
	КонецЕсли;  
	
КонецФункции // ВернутьКомандуTelegram()

//Возвращаем команду по наименованию
Функция ВернутьСоздатьПользователяTelegram(ИмяПользователяТелеграм,ID_Пользователя)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Telegram_Пользователи.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
	|ГДЕ
	|	Telegram_Пользователи.ID_Пользователя = &ID_Пользователя";
	Запрос.УстановитьПараметр("ID_Пользователя",ID_Пользователя);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Количество()>0 Тогда
		ВыборкаЗапроса.Следующий();
		Возврат ВыборкаЗапроса.Пользователь;
	Иначе
		МенеджерЗаписи = РегистрыСведений.Telegram_Пользователи.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИмяПользователяТелеграм = ИмяПользователяТелеграм;
		Строка = СтрЗаменить(Строка(ID_Пользователя)," ",""); 
		Строка = СтрЗаменить(Строка,Символы.НПП,"");
		МенеджерЗаписи.ID_Пользователя =  Строка;
		МенеджерЗаписи.Записать(Истина);
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;  
	
КонецФункции // ВернутьСоздатьПользователяTelegram()

//Десериализуем JSON
Функция ДесериализоватьJSON(СтрокаJSON) 
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	Данные = ПрочитатьJSON(Чтение, Ложь);
	Чтение.Закрыть();	
	
	Возврат Данные;
	
КонецФункции 

Функция ЗаписатьJS(СтруктураJS)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,СтруктураJS);
	Возврат ЗаписьJSON.Закрыть();	
	
КонецФункции // ЗаписатьJS()

#КонецОбласти

Процедура ЗакрытьВремяЗадачи(Задача)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВремяВыполненияЗадач.Задача КАК Задача,
	               |	ВремяВыполненияЗадач.ДатаСреза КАК ДатаСреза
	               |ИЗ
	               |	РегистрСведений.ВремяВыполненияЗадач КАК ВремяВыполненияЗадач
	               |ГДЕ
	               |	ВремяВыполненияЗадач.Задача = &Задача
	               |	И ВремяВыполненияЗадач.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВремяВыполненияЗадач.ДатаСреза УБЫВ";
	Запрос.УстановитьПараметр("Задача",Задача);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 тогда
		Выборка.Следующий();
		НаборЗаписей = РегистрыСведений.ВремяВыполненияЗадач.СоздатьНаборЗаписей();  			
		НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);
		НаборЗаписей.Отбор.ДатаСреза.Установить(Выборка.ДатаСреза);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда	
			НашЗамер = НаборЗаписей[0];
			НашЗамер.КонецЗамера = ТекущаяДата();
			НашЗамер.Срок		 = НашЗамер.КонецЗамера - НашЗамер.НачалоЗамера;
			НаборЗаписей.Записать();
		КонецЕсли; 	
	КонецЕсли;
	
КонецПроцедуры

Процедура конецРабочегоДня() экспорт
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задача.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.ВРаботе)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			Док = Выборка.Ссылка.ПолучитьОбъект();
			ЗакрытьВремяЗадачи(Выборка.ссылка);
			Док.Статус = Перечисления.СтатусыЗадач.Отложена;
			Док.Записать();
			//Сообщить("" + Док.Ссылка + " переведена в статус Отложена");
			
		КонецЦикла;
	
	
КонецПроцедуры

#Область Заготовки

Функция ПолучитьСписокКоманд()
	ОтветСистемы = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Telegram_КомандыСистемы.Наименование КАК Наименование,
	|	Telegram_КомандыСистемы.Описание КАК Описание
	|ИЗ
	|	Справочник.Telegram_КомандыСистемы КАК Telegram_КомандыСистемы";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ОтветСистемы = ОтветСистемы + " " + ВыборкаЗапроса.Наименование + " - " + ВыборкаЗапроса.Описание + Символы.ПС; 	
	КонецЦикла;  
	
КонецФункции // ПолучитьСписокКоманд()

Функция ОтправитьФайл()
	
	ТабДок = Новый ТабличныйДокумент;
	
	Отчеты.Telegram_ИсторияСообщений.Создать().СкомпоноватьРезультат(ТабДок);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	
	ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
	
	
КонецФункции // ОтправитьФайл()


#КонецОбласти 


&НаСервере
Процедура ОтправитьСообщениеПользователямНаСервере() экспорт
	
	запросСотрудников = Новый Запрос;
	запросСотрудников.Текст =  текстДляСпискаСотрудников(); 
	
	запросСотрудников.УстановитьПараметр("ОтделНов",Справочники.Подразделения.НайтиПоКоду("000000040"));
	ВыборкаСотрудников = запросСотрудников.Выполнить().Выбрать();
	
	    Запрос = Новый Запрос;
	    Запрос.Текст = "ВЫБРАТЬ
	                   |	Telegram_Пользователи.ИмяПользователяТелеграм КАК ИмяПользователяТелеграм,
	                   |	Telegram_Пользователи.ID_Пользователя КАК ID_Пользователя,
	                   |	Telegram_Пользователи.Пользователь КАК Пользователь
	                   |ИЗ
	                   |	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
	                   |ГДЕ
	                   |	Telegram_Пользователи.Пользователь = &Пользователь";
	    Пока ВыборкаСотрудников.Следующий() Цикл
	   		 ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
			 Если ВыборкаЗапроса.Количество() > 0 Тогда
				 ВыборкаЗапроса.Следующий();
	         Telegram_Сервер.ОтправитьСообщениеПользователю(ВыборкаЗапроса.ID_Пользователя,"Мусор не забываем выносить!");
		 КонецЕсли;
		 
	    	
	    КонецЦикла;  
КонецПроцедуры

//Функция КтоНеРаботаетТотНеЕст()
// 	Запрос = новый Запрос;
//	Запрос.Текст = 
//КонецФункции

Функция текстДляСпискаСотрудников() 
	Текст =  "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задача.Ссылка) КАК КоличествоЗадач,
	|	Задача.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_Задачи
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	(Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Создана)
	|			ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Вработе)
	|			ИЛИ Задача.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗадач.Отложена))
	|
	|СГРУППИРОВАТЬ ПО
	|	Задача.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КадровыйПриказ.Должность) КАК Должность,
	|	МАКСИМУМ(КадровыйПриказ.Отдел) КАК Отдел,
	|	КадровыйПриказ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадровыйПриказ.Дата) КАК ДатаДоговора
	|ПОМЕСТИТЬ ВТ_ДолжностиНовые
	|ИЗ
	|	Документ.КадровыйПриказ КАК КадровыйПриказ
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыйПриказ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонЛичный
	|ПОМЕСТИТЬ ТелефоныЛичные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаЛичный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СотрудникиКонтактнаяИнформация.Представление КАК Представление,
	|	СотрудникиКонтактнаяИнформация.Представление КАК ТелефонСлужебный
	|ПОМЕСТИТЬ ТелефоныСлужебные
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.Код КАК Код,
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	ВТ_ДолжностиНовые.Отдел КАК ОтделНов,
	|	ВТ_ДолжностиНовые.Должность КАК ДолжностьНов ,
	|	ТелефоныЛичные.ТелефонЛичный КАК ТелефонЛичный,
	|	ТелефоныСлужебные.ТелефонСлужебный КАК ТелефонСлужебный,
	|	Сотрудники.Пользователь КАК Пользователь,
	|	естьNULL(ВТ_Задачи.КоличествоЗадач,0) КАК КоличествоЗадач
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжностиНовые КАК ВТ_ДолжностиНовые
	|		ПО (ВТ_ДолжностиНовые.Сотрудник = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныЛичные КАК ТелефоныЛичные
	|		ПО (ТелефоныЛичные.Ссылка = Сотрудники.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСлужебные КАК ТелефоныСлужебные
	|		ПО (ТелефоныСлужебные.Ссылка = Сотрудники.Ссылка)
	| 		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
	|		ПО (ВТ_Задачи.Исполнитель = Сотрудники.Пользователь)
	|ГДЕ
	|	НЕ Сотрудники.Пользователь.Недействителен
	|	И ВТ_ДолжностиНовые.Отдел = &ОтделНов
	|УПОРЯДОЧИТЬ ПО
	|ОтделНов,
	|Наименование";
	Возврат Текст;
КонецФункции 