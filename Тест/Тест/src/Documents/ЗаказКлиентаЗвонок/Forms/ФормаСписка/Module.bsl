#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры




#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПересчётИтогиДокументов();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	// Состояние Ожидание или Думает
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы, "ИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "Состояние",
		ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение(
			"Перечисление.дт_СостоянияЗаказовКлиента.Ожидание"));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "Состояние",
		ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение(
			"Перечисление.дт_СостоянияЗаказовКлиента.Думает"));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ДатаСвязи",
		//ВидСравненияКомпоновкиДанных.Меньше, НачалоДня(ТекущаяДата()) - 24*3600);
		//Сергеев проверка по новому реквизиту [ДатаСвязи]
		ВидСравненияКомпоновкиДанных.Меньше, НачалоДня(ТекущаяДата()));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоРозовый);
	
	
					
КонецПроцедуры


#КонецОбласти


&НаСервере
Функция СписокВКоллекциюЗначений()
	
	//Получаем схема компановки данных (здесь хранится текст запроса)
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	//Получаем настройки пользователя (отборы, сортировки и т.п.)
	Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	//Выводим динамический список в таблицу значений
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//Возвращаем полученную таблицу значений
	Возврат  Результат;
	
КонецФункции

Процедура ПересчётИтогиДокументов()
	
	Таб 				 = СписокВКоллекциюЗначений();
	КоличествоДокументов = 0;
	СуммаДокументов      = 0;
	КоличествоДокументов = Таб.количество();
	Для каждого стр из таб цикл	
		СуммаДокументов 	 = СуммаДокументов + стр.СуммаДокумента;
	КонецЦикла;
	//651 005 092
	//650 970 229
КонецПроцедуры
