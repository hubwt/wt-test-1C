 &НаКлиенте
 Перем Кэш;
 
 #Область ОбработчикиСобытийФормы
 
 &НаСервере
 Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	 //Состояния   = Новый массив();
	 //Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Отказ);
	 //Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Продажа);
	 //Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.НетВНаличии);
	 //Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ЖдёмДенег);
	 
	 Попытка
		 Менеджер = Параметры.менеджер;
		 //Список.Параметры.УстановитьЗначениеПараметра("Дататекущая", НачалоДня(ТекущаяДата()));
		 //Список.Параметры.УстановитьЗначениеПараметра("ДатаСвязи", КонецДня(ТекущаяДата()));
		 //Список.Параметры.УстановитьЗначениеПараметра("Состояния", Состояния);
		 Список.Параметры.УстановитьЗначениеПараметра("Ответственный", Параметры.менеджер);
		 Заголовок = Параметры.менеджер;
	 Исключение
		 
	 КонецПопытки;
	 
	 
	 
	 // СтандартныеПодсистемы.ПодключаемыеКоманды
	 ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	 // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	 
	 //УстановитьУсловноеОформление();
	 
	 Список.Параметры.УстановитьЗначениеПараметра("ТекДата", НачалоДня(ТекущаяДата())); 
	 СписокНаКонтролле.Параметры.УстановитьЗначениеПараметра("ТекДата", НачалоДня(ТекущаяДата()));

	 СменаСтраницыСервер(1);
	 ///+ГомзМА 03.02.2023 (Задача 000002653 от 03.02.2023)
	 // НА КНОПКУ ПолучитьКоличествоЗвонков();
	 ///-ГомзМА 03.02.2023 (Задача 000002653 от 03.02.2023)
	 
	 ///+ГомзМА 22.02.2023 (Задача 000002844 от 22.02.2023)
	 Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;
	 ///-ГомзМА 22.02.2023 (Задача 000002844 от 22.02.2023)
	 
	 ///+ГомзМА 02.03.2023 
	 ЗаполнениеСписков();
	 //ОбновлениеСписка();
	 ///-ГомзМА 02.03.2023
	 
	 ///+ГомзМА 27.07.2023
	 //ЗаполнитьПодвал(1);
	 НомерСтраницы = 1;
	 ///-ГомзМА 27.07.2023
	 
	 
 КонецПроцедуры
 
// 
 
 
 #КонецОбласти
 
 #Область ОбработчикиСобытийЭлементовШапкиФормы
 
 
 
 #КонецОбласти
 
 #Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы
 
 
 
 
 #КонецОбласти
 
 #Область ОбработчикиКомандФормы
 
 // СтандартныеПодсистемы.ПодключаемыеКоманды
 &НаКлиенте
 Процедура Подключаемый_ВыполнитьКоманду(Команда)
	 ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
 КонецПроцедуры
 
 &НаСервере
 Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	 ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Подключаемый_ОбновитьКоманды()
	 ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
 КонецПроцедуры
 // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
 
 
 #КонецОбласти
 
 #Область СлужебныеПроцедурыИФункции
 
 &НаСервере
 Процедура УстановитьУсловноеОформление()
	 
	 //ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	 //// Состояние Ожидание или Думает
	 //ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы, "ИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	 //ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "Состояние",
	 //	ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение(
	 //		"Перечисление.дт_СостоянияЗаказовКлиента.Ожидание"));
	 //ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "Состояние",
	 //	ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение(
	 //		"Перечисление.дт_СостоянияЗаказовКлиента.Думает"));
	 //ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ДатаСвязи",
	 //	//ВидСравненияКомпоновкиДанных.Меньше, НачалоДня(ТекущаяДата()) - 24*3600);
	 //	//Сергеев проверка по новому реквизиту [ДатаСвязи]
	 //	ВидСравненияКомпоновкиДанных.Меньше, НачалоДня(ТекущаяДата()));
	 //ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоРозовый);
	 //
	 //
	 //				
 КонецПроцедуры
 
 &НаСервере
 Процедура ПолучитьКоличествоЗвонков()
	 
	 ///+ГомзМА 03.02.2023 (Задача 000002653 от 03.02.2023)
	 Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 КоличествоЗаявок = Результат.Количество(); 
	 
	 КоличествоОжидание 		= 0;
	 КоличествоДумает 		= 0;
	 КоличествоОтказ 		= 0;
	 КоличествоПродажа 		= 0;
	 КоличествоНетВНаличии 	= 0;
	 КоличествоСрочно 		= 0;
	 КоличествоЖдёмДенег 	= 0;
	 //Для каждого Строка из Результат Цикл
	 //	Если Строка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Ожидание Тогда
	 //		КоличествоОжидание = КоличествоОжидание + Строка.КоличествоОжидание;
	 //	ИначеЕсли Строка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Думает Тогда
	 //		КоличествоДумает = КоличествоДумает + Строка.КоличествоДумает;
	 //	ИначеЕсли Строка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Отказ Тогда
	 //		КоличествоОтказ = КоличествоОтказ + Строка.КоличествоОтказ;	
	 //	ИначеЕсли Строка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Продажа Тогда
	 //		КоличествоПродажа = КоличествоПродажа + Строка.КоличествоПродажа;	
	 //	ИначеЕсли Строка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.НетВНаличии Тогда
	 //		КоличествоНетВНаличии = КоличествоНетВНаличии + Строка.КоличествоНетВНаличии;
	 //	ИначеЕсли Строка.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Срочно Тогда
	 //		КоличествоСрочно = КоличествоСрочно + Строка.КоличествоСрочно;
	 //	КонецЕсли;
	 
	 //КонецЦикла;
	 КоличествоОжидание 	  =  Формат(Результат.Итог("КоличествоОжидание"),"ЧДЦ=0; ЧН=-");
	 КоличествоДумает   	  =  Формат(Результат.Итог("КоличествоДумает"),"ЧДЦ=0; ЧН=-");
	 КоличествоОтказ   	  =  Формат(Результат.Итог("КоличествоОтказ"),"ЧДЦ=0; ЧН=-");
	 КоличествоПродажа     =  Формат(Результат.Итог("КоличествоПродажа"),"ЧДЦ=0; ЧН=-");
	 КоличествоНетВНаличии =  Формат(Результат.Итог("КоличествоНетВНаличии"),"ЧДЦ=0; ЧН=-");
	 КоличествоСрочно 	  =  Формат(Результат.Итог("КоличествоСрочно"),"ЧДЦ=0; ЧН=-");
	 КоличествоЖдёмДенег   =  Формат(Результат.Итог("КоличествоЖдёмДенег"),"ЧДЦ=0; ЧН=-");
	 
	 //
	 ЭтотОбъект.ЭтаФорма.Элементы.СуммаДокумента.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 ЭтотОбъект.ЭтаФорма.Элементы.Оплачено.ГоризонтальноеПоложениеВПодвале 		= ГоризонтальноеПоложениеЭлемента.Право;
	 ЭтотОбъект.ЭтаФорма.Элементы.Ждём.ГоризонтальноеПоложениеВПодвале 			= ГоризонтальноеПоложениеЭлемента.Право;
	 
	 ЭтотОбъект.ЭтаФорма.Элементы.СуммаДокумента.ТекстПодвала =  Формат(Результат.Итог("СуммаДокумента"),"ЧДЦ=0; ЧН=-");
	 ЭтотОбъект.ЭтаФорма.Элементы.Оплачено.ТекстПодвала   	 =  Формат(Результат.Итог("Оплачено"),"ЧДЦ=0; ЧН=-");
	 ЭтотОбъект.ЭтаФорма.Элементы.Ждём.ТекстПодвала    	     =  Формат(Результат.Итог("Ждём"),"ЧДЦ=0; ЧН=-");
	 
	 //-СерФ 16.03.2023 (Задача 000002653 от 03.02.2023)
	 ///-ГомзМА 03.02.2023 (Задача 000002653 от 03.02.2023)
	 
 КонецПроцедуры
 
 #КонецОбласти
 
 
 &НаСервере
 Функция СписокВКоллекциюЗначений()
	 
	 //Получаем схема компановки данных (здесь хранится текст запроса)
	 Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 
	 //Получаем настройки пользователя (отборы, сортировки и т.п.)
	 Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 
	 //Выводим динамический список в таблицу значений
	 КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	 МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 
	 ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 
	 //Возвращаем полученную таблицу значений
	 Возврат  Результат;
	 
 КонецФункции
 
 Процедура ПересчётИтогиДокументов()
	 
	 Таб 				 = СписокВКоллекциюЗначений();
	 КоличествоДокументов = 0;
	 СуммаДокументов      = 0;
	 КоличествоДокументов = Таб.количество();
	 //Для каждого стр из таб цикл	
	 //	СуммаДокументов 	 = СуммаДокументов + стр.СуммаДокумента;
	 //КонецЦикла;
	 
	 Схема = Элементы.список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 Настройки = Элементы.список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 
	 
	 
	 //651 005 092
	 //650 970 229
 КонецПроцедуры
 
 &НаСервере
 Процедура НеобработанныеПриИзмененииНаСервере()
	 Текст =  "ВЫБРАТЬ
	 |	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаПрихода,
	 |	ПриходДенегНаСчет.Сделка.ЗаказКлиента КАК СделкаЗаказКлиента
	 |ПОМЕСТИТЬ ВТ_Приходы
	 |ИЗ
	 |	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	 |СГРУППИРОВАТЬ ПО
	 |	ПриходДенегНаСчет.Сделка.ЗаказКлиента
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	МАКСИМУМ(ПредварительныйСчет.Ссылка) КАК Ссылка,
	 |	ПредварительныйСчет.Основание КАК Основание
	 |ПОМЕСТИТЬ ВТ_Счета
	 |ИЗ
	 |	Документ.ПредварительныйСчет КАК ПредварительныйСчет
	 |СГРУППИРОВАТЬ ПО
	 |	ПредварительныйСчет.Основание
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	МАКСИМУМ(ПродажаЗапчастей.Ссылка) КАК Ссылка,
	 |	ПродажаЗапчастей.ЗаказКлиента КАК ЗаказКлиента
	 |ПОМЕСТИТЬ ВТ_Продажи
	 |ИЗ
	 |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	 |СГРУППИРОВАТЬ ПО
	 |	ПродажаЗапчастей.ЗаказКлиента
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиЗвонков.Дата) КАК Дата,
	 |	ЗаписиЗвонков.НомерТелефона КАК НомерТелефона,
	 |	СУММА(ЗаписиЗвонков.Длительность) КАК Длительность,
	 |	ЗаписиЗвонков.Заявка КАК Заявка
	 |ПОМЕСТИТЬ ВТ_Звонки
	 |ИЗ
	 |	РегистрСведений.ЗаписиЗвонков КАК ЗаписиЗвонков
	 |СГРУППИРОВАТЬ ПО
	 |	ЗаписиЗвонков.НомерТелефона,
	 |	ЗаписиЗвонков.Заявка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ДокументЗаказКлиента.Ссылка КАК Ссылка,
	 |	ДокументЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
	 |	ДокументЗаказКлиента.Номер КАК Номер,
	 |	ДокументЗаказКлиента.Дата КАК Дата,
	 |	ДокументЗаказКлиента.Проведен КАК Проведен,
	 |	ДокументЗаказКлиента.КлиентНаименование КАК КлиентНаименование,
	 |	ДокументЗаказКлиента.Клиент КАК Клиент,
	 |	ДокументЗаказКлиента.НомерТелефона КАК НомерТелефона,
	 |	ВЫРАЗИТЬ(ДокументЗаказКлиента.Комментарий КАК СТРОКА(150)) КАК Комментарий,
	 |	ДокументЗаказКлиента.Состояние КАК Состояние,
	 |	ДокументЗаказКлиента.Ответственный КАК Ответственный,
	 |	ДокументЗаказКлиента.Проект КАК Проект,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.СуммаДокумента = 0
	 |			ТОГДА ДокументЗаказКлиента.ПотенциальнаяЦена
	 |		ИНАЧЕ ДокументЗаказКлиента.СуммаДокумента
	 |	КОНЕЦ КАК СуммаДокумента,
	 |	ДокументЗаказКлиента.Склад КАК Склад,
	 |	ДокументЗаказКлиента.Согласовал КАК Согласовал,
	 |	ДокументЗаказКлиента.ДатаИзмененияСостояния КАК ДатаИзмененияСостояния,
	 |	ДокументЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
	 |	ДокументЗаказКлиента.МоментВремени КАК МоментВремени,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.ДатаСвязи < &ТекДата
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК Проверка,
	 |	ДокументЗаказКлиента.НомерВнешний КАК НомерВнешний,
	 |	ДокументЗаказКлиента.СтатусКонтроля КАК СтатусКонтроля,
	 |	ДокументЗаказКлиента.Контролёр КАК Контролёр,
	 |	ДокументЗаказКлиента.ТекстовыйМенеджер КАК ТекстовыйМенеджер,
	 |	ДокументЗаказКлиента.ТипЗаявки КАК ТипЗаявки,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Ожидание)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоОжидание,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Думает)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоДумает,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Отказ)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоОтказ,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Продажа)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоПродажа,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.НетВНаличии)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоНетВНаличии,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Срочно)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоСрочно,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.ЖдёмДенег)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоЖдёмДенег,
	 |	ДокументЗаказКлиента.Канал КАК Канал,
	 |	ВТ_Приходы.СуммаПрихода КАК Оплачено,
	 |	ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(ВТ_Приходы.СуммаПрихода, 0) КАК Ждём,
	 |	ВТ_Продажи.Ссылка КАК СсылкаНаПродажу,
	 |	ВТ_Счета.Ссылка КАК СсылкаНаСчёт,
	 |	ДокументЗаказКлиента.СуммаПредлагаемойЦены КАК СуммаПредлагаемойЦены,
	 |	ДокументЗаказКлиента.ДатаПоследнегоВзаимодействия КАК ДатаПоследнегоВзаимодействия,
	 |	ДокументЗаказКлиента.Прослушано КАК Прослушано,
	 |	ДокументЗаказКлиента.Закрыта КАК Закрыта,
	 |	ДокументЗаказКлиента.АтоматическоеСоздание КАК АтоматическоеСоздание,
	 |	ВТ_Звонки.Длительность КАК Длительность,
	 |	ВТ_Звонки.Дата КАК КолвоЗвонков,
	 |	ДокументЗаказКлиента.Помощник
	 |{ГДЕ
	 |	(ДокументЗаказКлиента.Ответственный = &Ответственный) КАК Поле2}
	 |ИЗ
	 |	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приходы КАК ВТ_Приходы
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_Приходы.СделкаЗаказКлиента
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счета КАК ВТ_Счета
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_Счета.Основание
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Продажи КАК ВТ_Продажи
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_Продажи.ЗаказКлиента
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Звонки КАК ВТ_Звонки
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_Звонки.Заявка";
	 
	 
	 Если необработанные = "Все" Тогда
		 Список.ТекстЗапроса = Текст;
	 ИначеЕсли необработанные = "Необработанные" Тогда
		 Текст = Текст + Символы.ПС + "ГДЕ" + Символы.ПС + "ДокументЗаказКлиента.ДатаСвязи <= &ДатаСвязи";
		 Список.ТекстЗапроса = Текст;
		 Текст = Текст + Символы.ПС + "И" + Символы.ПС + "Не ДокументЗаказКлиента.Состояние В (&Состояния)";
		 Список.ТекстЗапроса = Текст;
		 
		 Состояния   = Новый массив();
		 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Отказ);
		 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Продажа);
		 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.НетВНаличии);
		 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ЖдёмДенег);
		 
		 Список.Параметры.УстановитьЗначениеПараметра("ДатаСвязи", КонецДня(ТекущаяДата()));
		 Список.Параметры.УстановитьЗначениеПараметра("Состояния", Состояния);
		 
	 ИначеЕсли необработанные = "Актуальные" Тогда
		 Текст = Текст + Символы.ПС + "ГДЕ" + Символы.ПС + "(ДокументЗаказКлиента.ДатаСвязи <= &ДатаСвязи";
		 Список.ТекстЗапроса = Текст;
		 Текст = Текст + Символы.ПС + "И" + Символы.ПС + "Не ДокументЗаказКлиента.Состояние В (&Состояния)";
		 Список.ТекстЗапроса = Текст;
		 Текст = Текст + Символы.ПС + "И" + Символы.ПС + "ДокументЗаказКлиента.Ответственный = &Ответственный)";
		 Список.ТекстЗапроса = Текст;
		 Текст = Текст + Символы.ПС + "ИЛИ" + Символы.ПС + "(ДокументЗаказКлиента.Дата > &Дататекущая";
		 Список.ТекстЗапроса = Текст;
		 Текст = Текст + Символы.ПС + "И" + Символы.ПС + "ДокументЗаказКлиента.Ответственный = &Ответственный)";
		 Список.ТекстЗапроса = Текст;
		 
		 Состояния   = Новый массив();
		 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Отказ);
		 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Продажа);
		 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.НетВНаличии);
		 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ЖдёмДенег);
		 
		 
		 Список.Параметры.УстановитьЗначениеПараметра("Дататекущая", НачалоДня(ТекущаяДата()));
		 Список.Параметры.УстановитьЗначениеПараметра("ДатаСвязи", КонецДня(ТекущаяДата()));
		 Список.Параметры.УстановитьЗначениеПараметра("Состояния", Состояния);
		 Список.Параметры.УстановитьЗначениеПараметра("Ответственный", Пользователи.ТекущийПользователь());
	 КонецЕсли;
	 
	 Элементы.Список.Обновить();
	 
	 
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура НеобработанныеПриИзменении(Элемент)
	 НеобработанныеПриИзмененииНаСервере();
 КонецПроцедуры
 
 &НаСервере
 Процедура НоменклатураПриИзмененииНаСервере()
	 Текст =  "ВЫБРАТЬ
	 |	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаПрихода,
	 |	ПриходДенегНаСчет.Сделка.ЗаказКлиента КАК СделкаЗаказКлиента
	 |ПОМЕСТИТЬ ВТ_Приходы
	 |ИЗ
	 |	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	 |СГРУППИРОВАТЬ ПО
	 |	ПриходДенегНаСчет.Сделка.ЗаказКлиента
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	МАКСИМУМ(ПредварительныйСчет.Ссылка) КАК Ссылка,
	 |	ПредварительныйСчет.Основание КАК Основание
	 |ПОМЕСТИТЬ ВТ_Счета
	 |ИЗ
	 |	Документ.ПредварительныйСчет КАК ПредварительныйСчет
	 |СГРУППИРОВАТЬ ПО
	 |	ПредварительныйСчет.Основание
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	МАКСИМУМ(ПродажаЗапчастей.Ссылка) КАК Ссылка,
	 |	ПродажаЗапчастей.ЗаказКлиента КАК ЗаказКлиента
	 |ПОМЕСТИТЬ ВТ_Продажи
	 |ИЗ
	 |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	 |СГРУППИРОВАТЬ ПО
	 |	ПродажаЗапчастей.ЗаказКлиента
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиЗвонков.Дата) КАК Дата,
	 |	ЗаписиЗвонков.НомерТелефона КАК НомерТелефона,
	 |	СУММА(ЗаписиЗвонков.Длительность) КАК Длительность,
	 |	ЗаписиЗвонков.Заявка КАК Заявка
	 |ПОМЕСТИТЬ ВТ_Звонки
	 |ИЗ
	 |	РегистрСведений.ЗаписиЗвонков КАК ЗаписиЗвонков
	 |СГРУППИРОВАТЬ ПО
	 |	ЗаписиЗвонков.НомерТелефона,
	 |	ЗаписиЗвонков.Заявка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ДокументЗаказКлиента.Ссылка КАК Ссылка,
	 |	ДокументЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
	 |	ДокументЗаказКлиента.Номер КАК Номер,
	 |	ДокументЗаказКлиента.Дата КАК Дата,
	 |	ДокументЗаказКлиента.Проведен КАК Проведен,
	 |	ДокументЗаказКлиента.КлиентНаименование КАК КлиентНаименование,
	 |	ДокументЗаказКлиента.Клиент КАК Клиент,
	 |	ДокументЗаказКлиента.НомерТелефона КАК НомерТелефона,
	 |	ВЫРАЗИТЬ(ДокументЗаказКлиента.Комментарий КАК СТРОКА(150)) КАК Комментарий,
	 |	ДокументЗаказКлиента.Состояние КАК Состояние,
	 |	ДокументЗаказКлиента.Ответственный КАК Ответственный,
	 |	ДокументЗаказКлиента.Проект КАК Проект,
	 |	ДокументЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	 |	ДокументЗаказКлиента.Склад КАК Склад,
	 |	ДокументЗаказКлиента.Согласовал КАК Согласовал,
	 |	ДокументЗаказКлиента.ДатаИзмененияСостояния КАК ДатаИзмененияСостояния,
	 |	ДокументЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
	 |	ДокументЗаказКлиента.МоментВремени КАК МоментВремени,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.ДатаСвязи < &ТекДата
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК Проверка,
	 |	ДокументЗаказКлиента.НомерВнешний КАК НомерВнешний,
	 |	ДокументЗаказКлиента.СтатусКонтроля КАК СтатусКонтроля,
	 |	ДокументЗаказКлиента.Контролёр КАК Контролёр,
	 |	ДокументЗаказКлиента.ТекстовыйМенеджер КАК ТекстовыйМенеджер,
	 |	ДокументЗаказКлиента.ТипЗаявки КАК ТипЗаявки,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Ожидание)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоОжидание,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Думает)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоДумает,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Отказ)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоОтказ,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Продажа)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоПродажа,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.НетВНаличии)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоНетВНаличии,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Срочно)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоСрочно,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.ЖдёмДенег)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоЖдёмДенег,
	 |	ДокументЗаказКлиента.Канал КАК Канал,
	 |	ВТ_Приходы.СуммаПрихода КАК Оплачено,
	 |	ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(ВТ_Приходы.СуммаПрихода, 0) КАК Ждём,
	 |	ВТ_Продажи.Ссылка КАК СсылкаНаПродажу,
	 |	ВТ_Счета.Ссылка КАК СсылкаНаСчёт,
	 |	ДокументЗаказКлиента.СуммаПредлагаемойЦены КАК СуммаПредлагаемойЦены,
	 |	ДокументЗаказКлиента.ДатаПоследнегоВзаимодействия КАК ДатаПоследнегоВзаимодействия,
	 |	ДокументЗаказКлиента.Прослушано КАК Прослушано,
	 |	ДокументЗаказКлиента.Закрыта КАК Закрыта,
	 |	ДокументЗаказКлиента.АтоматическоеСоздание КАК АтоматическоеСоздание,
	 |	ВТ_Звонки.Длительность КАК Длительность,
	 |	ВТ_Звонки.Дата КАК КолвоЗвонков,
	 |	ДокументЗаказКлиента.Помощник
	 |{ГДЕ
	 |	(ДокументЗаказКлиента.Ответственный = &Ответственный) КАК Поле2}
	 |ИЗ
	 |	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приходы КАК ВТ_Приходы
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_Приходы.СделкаЗаказКлиента
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счета КАК ВТ_Счета
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_Счета.Основание
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Продажи КАК ВТ_Продажи
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_Продажи.ЗаказКлиента
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Звонки КАК ВТ_Звонки
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_Звонки.Заявка";
	 
	 
	 Если Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		 Список.ТекстЗапроса = Текст;
	 Иначе 
		 Текст = Текст + Символы.ПС + "ГДЕ" + Символы.ПС + "ДокументЗаказКлиента.Товары.Номенклатура = &Номенклатура";
		 Список.ТекстЗапроса = Текст;
		 
		 Список.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);
	 КонецЕсли;
	 
	 Элементы.Список.Обновить();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура НоменклатураПриИзменении(Элемент)
	 НоменклатураПриИзмененииНаСервере();
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Обновить(Команда)
	 ПолучитьКоличествоЗвонков();
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура СоздатьДозвон(Команда)
	 
	 ///+ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	 КоличесвтоЗаписейВМассиве = ПолучитьКоличествоДозвоновЗаТекущийГод(ТекущиеДанные);
	 
	 Если КоличесвтоЗаписейВМассиве > 0 Тогда
		 Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
		 
		 ПоказатьВопрос(Оповещение, "Дозвон с этим номером телефона в текущем году уже существует! Создать новый?", РежимДиалогаВопрос.ДаНет);
	 Иначе
		 Док = СоздатьДокДозвон(Элементы.Список.ТекущиеДанные.Клиент);
		 ПараметрыФормы = Новый Структура("Ключ", Док);
		 ОткрытьФорму("Документ.Дозвон.ФормаОбъекта", ПараметрыФормы);
	 КонецЕсли;
	 ///-ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	 
	 ///+ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 Если Результат = КодВозвратаДиалога.Да Тогда
		 Док = СоздатьДокДозвон(Элементы.Список.ТекущиеДанные.Клиент);
		 ПараметрыФормы = Новый Структура("Ключ", Док);
		 ОткрытьФорму("Документ.Дозвон.ФормаОбъекта", ПараметрыФормы);
	 Иначе
		 Возврат;
	 КонецЕсли;
	 ///-ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 
 КонецПроцедуры
 
 
 
 
 
 &НаСервере
 Функция ПолучитьКоличествоДозвоновЗаТекущийГод(ТекущиеДанные)
	 
	 ///+ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	Дозвон.Дата КАК Дата,
	 |	Дозвон.Телефон КАК Телефон,
	 |	Дозвон.Клиент КАК Клиент
	 |ИЗ
	 |	Документ.Дозвон КАК Дозвон";
	 
	 СписокДозвонов = Запрос.Выполнить().Выбрать();
	 
	 МассивДозвоновЗаТекущийГод = Новый Массив;
	 Пока СписокДозвонов.Следующий() Цикл
		 Если ТекущиеДанные.НомерТелефона = СписокДозвонов.Телефон И Год(ТекущаяДатаСеанса()) = Год(СписокДозвонов.Дата) Тогда
			 МассивДозвоновЗаТекущийГод.Добавить(СписокДозвонов);
		 КонецЕсли;
	 КонецЦикла;
	 
	 Возврат МассивДозвоновЗаТекущийГод.Количество();
	 ///-ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 
 КонецФункции
 
 &НаСервере
 Функция СоздатьДокДозвон(Клиент)
	 
	 ///+ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 Док = Документы.Дозвон.СоздатьДокумент();
	 
	 Док.Клиент 			= Клиент;
	 Док.Дата 			= ТекущаяДата();
	 Док.Телефон 		= Док.Клиент.Телефон;
	 Док.Автор 			= НайтиПользователя();
	 Док.Статус 			= Перечисления.СтатусыДозвона.Ожидание;
	 ТаблицаДляСкрипта 	= ПолучитьСкрипт();
	 
	 Пока  ТаблицаДляСкрипта.Следующий() Цикл
		 Док.Скрипт.Добавить().Описание = ТаблицаДляСкрипта.Описание;
	 КонецЦикла;
	 
	 Док.Записать();
	 
	 Возврат Док.Ссылка;
	 ///-ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 
 КонецФункции
 
 &НаСервере
 Функция НайтиПользователя()
	 
	 ///+ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 Возврат ПользователиКлиентСервер.ТекущийПользователь();
	 ///+ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 
 КонецФункции
 
 Функция  ПолучитьСкрипт()
	 
	 ///+ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ЧекЛистЧекЛист.Описание КАК Описание
	 |ИЗ
	 |	Документ.ЧекЛист.ЧекЛист КАК ЧекЛистЧекЛист
	 |ГДЕ
	 |	ЧекЛистЧекЛист.Ссылка = &Чеклист";
	 
	 Запрос.УстановитьПараметр("Чеклист", Константы.БЗДляДозвона.Получить());
	 Выборка = Запрос.Выполнить().Выбрать();
	 
	 Возврат Выборка;
	 ///-ГомзМА 16.02.2023 (Задача 000002740 от 16.02.2023)
	 
 КонецФункции
 
 &НаКлиенте
 Процедура ОтобразитьПоказатели(Команда)
	 
	 ///+ГомзМА 22.02.2023 (Задача 000002844 от 22.02.2023)
	 Элементы.ОтобразитьПоказатели.Видимость = НЕ Элементы.ОтобразитьПоказатели.Видимость;
	 Элементы.СкрытьПоказатели.Видимость 	= НЕ Элементы.СкрытьПоказатели.Видимость;
	 Элементы.ГруппаСчетчик.Видимость 		= НЕ Элементы.ГруппаСчетчик.Видимость;
	 ///-ГомзМА 22.02.2023 (Задача 000002844 от 22.02.2023)
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СкрытьПоказатели(Команда)
	 
	 ///+ГомзМА 22.02.2023 (Задача 000002844 от 22.02.2023)
	 Элементы.ОтобразитьПоказатели.Видимость = НЕ Элементы.ОтобразитьПоказатели.Видимость;
	 Элементы.СкрытьПоказатели.Видимость 	= НЕ Элементы.СкрытьПоказатели.Видимость;
	 Элементы.ГруппаСчетчик.Видимость 		= НЕ Элементы.ГруппаСчетчик.Видимость;
	 ///-ГомзМА 22.02.2023 (Задача 000002844 от 22.02.2023)
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОтобразитьОтбор(Команда)
	 
	 ///+ГомзМА 22.02.2023 (Задача 000002844 от 22.02.2023)
	 Элементы.ОтобразитьОтбор.Видимость 										= НЕ Элементы.ОтобразитьОтбор.Видимость;
	 Элементы.СкрытьОтбор.Видимость 											= НЕ Элементы.СкрытьОтбор.Видимость;
	 Элементы.Группа4.Видимость 												= НЕ Элементы.Группа4.Видимость;
	 Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость 	= НЕ Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость;
	 ///-ГомзМА 22.02.2023 (Задача 000002844 от 22.02.2023)
	 
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СкрытьОтбор(Команда)
	 
	 ///+ГомзМА 22.02.2023 (Задача 000002844 от 22.02.2023)
	 Элементы.ОтобразитьОтбор.Видимость 										= НЕ Элементы.ОтобразитьОтбор.Видимость;
	 Элементы.СкрытьОтбор.Видимость 											= НЕ Элементы.СкрытьОтбор.Видимость;
	 Элементы.Группа4.Видимость 												= НЕ Элементы.Группа4.Видимость;
	 Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость 	= НЕ Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость;
	 ///-ГомзМА 22.02.2023 (Задача 000002844 от 22.02.2023)
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура МенеджерПриИзменении(Элемент)
	 
	 ОбновлениеСписка();
	 //Список.Параметры.УстановитьЗначениеПараметра("Ответственный", Менеджер);
	 ЭтаФорма.Модифицированность = Ложь;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПриОткрытии(Отказ)
	 
	 ОбновлениеСписка();
	 УстановитьЗначенияПараметров();
	 //ЗаполнитьПодвал();   
	 
	 //Элементы.СтраницаДата1.Заголовок =  Строка(день(НачалоДня(ТекущаяДата())+1*24*3600))+ "/" + Строка(месяц(НачалоДня(ТекущаяДата())+1*24*3600));
	 //Элементы.СтраницаДата2.Заголовок =  Строка(день(НачалоДня(ТекущаяДата())+2*24*3600))+ "/" + Строка(месяц(НачалоДня(ТекущаяДата())+2*24*3600));
	 //Элементы.СтраницаДата3.Заголовок =  Строка(день(НачалоДня(ТекущаяДата())+3*24*3600))+ "/" + Строка(месяц(НачалоДня(ТекущаяДата())+3*24*3600));
	 
	// Элементы.ФильтрЗаявок.Заголовок =  Строка(день(НачалоДня(ТекущаяДата())+1*24*3600))+ "/" + Строка(месяц(НачалоДня(ТекущаяДата())+1*24*3600));
	// Элементы.СтраницаДата2.Заголовок =  Строка(день(НачалоДня(ТекущаяДата())+2*24*3600))+ "/" + Строка(месяц(НачалоДня(ТекущаяДата())+2*24*3600));
	 //Элементы.СтраницаДата3.Заголовок =  Строка(день(НачалоДня(ТекущаяДата())+3*24*3600))+ "/" + Строка(месяц(НачалоДня(ТекущаяДата())+3*24*3600)); 
	 ///+ГомзМА 18.08.2023
//	 Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВРаботе;
	 ///-ГомзМА 18.08.2023
	 ЗаполнитьФильтр();
 КонецПроцедуры
 
 
 
 &НаСервере
 Процедура ОбновлениеСписка()
	 
	 ///+ГомзМА 02.03.2023
	 Если ЗначениеЗаполнено(Менеджер) Тогда
		 ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		 Список, 
		 "Ответственный", 
		 Менеджер, // Значение отбора
		 ВидСравненияКомпоновкиДанных.Равно,, Истина);
	 Иначе	
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	Пользователи.Ссылка КАК Ссылка,
		 |	Пользователи.Представление КАК Представление
		 |ИЗ
		 |	Справочник.Пользователи КАК Пользователи
		 |ГДЕ
		 |	НЕ Пользователи.Недействителен";
		 
		 РезультатЗапроса = Запрос.Выполнить().Выбрать();
		 
		 МассивПользователей = Новый Массив;
		 МассивПользователей.Добавить(Справочники.Пользователи.ПустаяСсылка());
		 Пока РезультатЗапроса.Следующий() Цикл
			 МассивПользователей.Добавить(РезультатЗапроса.Ссылка);
		 КонецЦикла;
		 
		 
		 ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		 Список, 
		 "Ответственный", 
		 МассивПользователей, // Значение отбора
		 ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	 КонецЕсли;
	 ///-ГомзМА 02.03.2023
	 
 КонецПроцедуры
 
 Процедура ЗаполнениеСписков()
	 
	 ///+ГомзМА 02.03.2023
	 ЗапросМенеджеров = Новый Запрос;
	 
	 ЗапросМенеджеров.Текст = 
	 "ВЫБРАТЬ
	 |	ДолжностиСотрудниковСрезПоследних.Сотрудник.Пользователь КАК СотрудникПользователь,
	 |	ДолжностиСотрудниковСрезПоследних.Сотрудник.Фамилия КАК Представление
	 |ИЗ
	 |	РегистрСведений.ДолжностиСотрудников.СрезПоследних КАК ДолжностиСотрудниковСрезПоследних
	 |ГДЕ
	 |	ДолжностиСотрудниковСрезПоследних.Должность.Отдел В(&Отдел)
	 |	И НЕ ДолжностиСотрудниковСрезПоследних.Сотрудник.Пользователь.Недействителен
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	СотрудникПользователь";
	 
	 Отдел = Новый Массив;
	 Отдел.Добавить(Справочники.Подразделения.НайтиПоКоду("000000038"));
	 Отдел.Добавить(Справочники.Подразделения.НайтиПоКоду("000000055"));
	 
	 ЗапросМенеджеров.УстановитьПараметр("Отдел", Отдел);
	 ВыборкаМенеджеров = ЗапросМенеджеров.Выполнить().Выбрать();
	 
	 Элементы.Менеджер.СписокВыбора.Очистить();
	 Элементы.Менеджер.СписокВыбора.Добавить(Справочники.Пользователи.ПустаяСсылка(), "ВСЕ");
	 
	 Пока ВыборкаМенеджеров.Следующий() Цикл
		 Элементы.Менеджер.СписокВыбора.Добавить(ВыборкаМенеджеров.СотрудникПользователь, ВыборкаМенеджеров.Представление);
	 КонецЦикла;
	 ///-ГомзМА 02.03.2023
	 
	 
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ОчиститьНаСервере()
	 
	 ///+ГомзМА 07.03.2023
	 Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	 НоменклатураПриИзмененииНаСервере();
	 ///-ГомзМА 07.03.2023
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Очистить(Команда)
	 ОчиститьНаСервере();
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокУпущеннаяПрибыльВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 
	 ///+ГомзМА 27.07.2023
	 //ТекСтрока = Элементы.СписокАналитика.ТекущиеДанные;
	 //Если Поле = Элементы.СписокАналитикаДокумент Тогда
	 //	
	 //	СсылкаДляОткрытия    = ТекСтрока.Документ;
	 //	ПараметрыФормы       = Новый Структура("Ключ", СсылкаДляОткрытия);
	 //	
	 //	ФормаДокумента 		 = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента", ПараметрыФормы);
	 //	ФормаДокумента.Открыть();
	 //КонецЕсли;
	 ///+ГомзМА 27.07.2023
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ЗаполнитьПодвал(Стр)
	 
	 ///+ГомзМА 27.07.2023
	 //Динамический список СписокУпущеннаяПрибыль
	 //Схема = Элементы.СписокАналитика.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //Настройки = Элементы.СписокАналитика.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //
	 //ЭтотОбъект.ЭтаФорма.Элементы.СписокАналитикаСумма.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 
	 //ЭтотОбъект.ЭтаФорма.Элементы.СписокАналитикаСумма.ТекстПодвала 	=  Формат(Результат.Итог("Сумма"), "ЧДЦ=0; ЧН=-");
	 ///-ГомзМА 27.07.2023
	 
	// Если Стр = 0 Тогда
		 Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
		 Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
		 КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		 МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		 ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		 ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		 ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		 Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		 
		 ЭтотОбъект.ЭтаФорма.Элементы.Номер.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		 
		 ЭтотОбъект.ЭтаФорма.Элементы.Номер.ТекстПодвала = Строка(Результат.Количество());
	 //ИначеЕсли Стр = 1 Тогда
	 //    
	 //    Схема = Элементы.СписокВРаботе.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокВРаботе.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер1.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер1.ТекстПодвала = Строка(Результат.Количество());
	 //    
	 //ИначеЕсли Стр = 2 Тогда
	 //    Схема = Элементы.СписокДумает.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокДумает.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер2.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер2.ТекстПодвала = Строка(Результат.Количество());
	 //    
	 //ИначеЕсли Стр = 4 Тогда
	 //    Схема = Элементы.СписокЖдёмДенег.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокЖдёмДенег.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер4.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер4.ТекстПодвала = Строка(Результат.Количество());
	 //    
	 //ИначеЕсли Стр = 3 Тогда
	 //    Схема = Элементы.СписокПродажа.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокПродажа.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер3.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер3.ТекстПодвала = Строка(Результат.Количество());
	 //    
	 //ИначеЕсли Стр = 5 Тогда
	 //    Схема = Элементы.СписокОжидаетПриход.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокОжидаетПриход.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер5.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер5.ТекстПодвала = Строка(Результат.Количество());
	 //    
	 //ИначеЕсли Стр = 9 Тогда
	 //    Схема = Элементы.СписокДата1.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокДата1.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер6.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер6.ТекстПодвала = Строка(Результат.Количество());
	 //    
	 //ИначеЕсли Стр = 10 Тогда
	 //    Схема = Элементы.СписокДата2.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокДата2.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер7.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер7.ТекстПодвала = Строка(Результат.Количество());
	 //    
	 //ИначеЕсли Стр = 11 Тогда
	 //    Схема = Элементы.СписокДата3.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокДата3.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер8.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер8.ТекстПодвала = Строка(Результат.Количество());
	 //ИначеЕсли Стр = 6 Тогда
	 //    Схема = Элементы.СписокНетВНаличии.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокНетВНаличии.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер9.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер9.ТекстПодвала = Строка(Результат.Количество());
	 //    
	 //ИначеЕсли Стр = 7 Тогда
	 //    Схема = Элементы.СписокОтказ.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокОтказ.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер10.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер10.ТекстПодвала = Строка(Результат.Количество());
	 //    
	 //ИначеЕсли Стр = 8 Тогда
	 //    Схема = Элементы.СписокСпам.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	 //    Настройки = Элементы.СписокСпам.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	 //    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 //    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 //    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	 //    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	 //    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	 //    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер11.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	 //    
	 //    ЭтотОбъект.ЭтаФорма.Элементы.Номер11.ТекстПодвала = Строка(Результат.Количество());
	 //КонецЕсли;
	 //
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПериодУпущеннаяПрибыльПриИзменении(Элемент)
	 
	 ///+ГомзМА 27.07.2023
	 УстановитьЗначенияПараметров();
	 //ЗаполнитьПодвал();
	 ///-ГомзМА 27.07.2023
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура УстановитьЗначенияПараметров()
	 
	 ///+ГомзМА 27.07.2023
	 //СписокАналитика.Параметры.УстановитьЗначениеПараметра("ДатаНачала",		ПериодАналитика.ДатаНачала);
	 //СписокАналитика.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",	ПериодАналитика.ДатаОкончания);
	 ///-ГомзМА 27.07.2023
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Прослушать(Команда)
	 Если Элементы.СписокДашборд1.ТекущиеДанные = Неопределено Тогда
		 Возврат
	 КонецЕсли;
	 
	 Если Кэш = Неопределено Тогда
		 Кэш = Новый Структура();
		 Кэш.Вставить("ФайлыЗвонков", Новый Соответствие());
	 КонецЕсли;
	 
	 СсылкаНаФайл = Элементы.СписокДашборд1.ТекущиеДанные.URL;
	 СсылкаНаФайлЛокальная = Кэш.ФайлыЗвонков.Получить(СсылкаНаФайл);
	 
	 Если СсылкаНаФайлЛокальная = Неопределено Тогда
		 
		 СсылкаНаФайлЛокальная = дт_МоиЗвонкиКлиент.ПолучитьФайлЗаписи(СсылкаНаФайл);
		 Если СсылкаНаФайлЛокальная = Неопределено Тогда
			 Возврат
		 КонецЕсли;
		 
		 Кэш.ФайлыЗвонков.Вставить(СсылкаНаФайл, СсылкаНаФайлЛокальная);
		 
	 КонецЕсли;
	 дт_МоиЗвонкиКлиент.ПрослушатьФайл(СсылкаНаФайлЛокальная);	
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Прослушать2(Команда)
	 Если Элементы.СписокДашборд2.ТекущиеДанные = Неопределено Тогда
		 Возврат
	 КонецЕсли;
	 
	 Если Кэш = Неопределено Тогда
		 Кэш = Новый Структура();
		 Кэш.Вставить("ФайлыЗвонков", Новый Соответствие());
	 КонецЕсли;
	 
	 СсылкаНаФайл = Элементы.СписокДашборд2.ТекущиеДанные.URL;
	 СсылкаНаФайлЛокальная = Кэш.ФайлыЗвонков.Получить(СсылкаНаФайл);
	 
	 Если СсылкаНаФайлЛокальная = Неопределено Тогда
		 
		 СсылкаНаФайлЛокальная = дт_МоиЗвонкиКлиент.ПолучитьФайлЗаписи(СсылкаНаФайл);
		 Если СсылкаНаФайлЛокальная = Неопределено Тогда
			 Возврат
		 КонецЕсли;
		 
		 Кэш.ФайлыЗвонков.Вставить(СсылкаНаФайл, СсылкаНаФайлЛокальная);
		 
	 КонецЕсли;
	 дт_МоиЗвонкиКлиент.ПрослушатьФайл(СсылкаНаФайлЛокальная);	
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокДашборд1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//ТекСписок = Элемент.имя;
	 Если Элемент.ТекущиеДанные = Неопределено Тогда
		 Возврат
	 КонецЕсли;
	 
	 Если Кэш = Неопределено Тогда
		 Кэш = Новый Структура();
		 Кэш.Вставить("ФайлыЗвонков", Новый Соответствие());
	 КонецЕсли;
	 
	 СсылкаНаФайл = Элемент.ТекущиеДанные.URL;
	 СсылкаНаФайлЛокальная = Кэш.ФайлыЗвонков.Получить(СсылкаНаФайл);
	 
	 Если СсылкаНаФайлЛокальная = Неопределено Тогда
		 
		 СсылкаНаФайлЛокальная = дт_МоиЗвонкиКлиент.ПолучитьФайлЗаписи(СсылкаНаФайл);
		 Если СсылкаНаФайлЛокальная = Неопределено Тогда
			 Возврат
		 КонецЕсли;
		 
		 Кэш.ФайлыЗвонков.Вставить(СсылкаНаФайл, СсылкаНаФайлЛокальная);
		 
	 КонецЕсли;
	 дт_МоиЗвонкиКлиент.ПрослушатьФайл(СсылкаНаФайлЛокальная);	
 КонецПроцедуры

 &НаКлиенте
 Процедура СписокДашборд2Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
 	Если Элемент.ТекущиеДанные = Неопределено Тогда
		 Возврат
	 КонецЕсли;
	 
	 Если Кэш = Неопределено Тогда
		 Кэш = Новый Структура();
		 Кэш.Вставить("ФайлыЗвонков", Новый Соответствие());
	 КонецЕсли;
	 
	 СсылкаНаФайл = Элемент.ТекущиеДанные.URL;
	 СсылкаНаФайлЛокальная = Кэш.ФайлыЗвонков.Получить(СсылкаНаФайл);
	 
	 Если СсылкаНаФайлЛокальная = Неопределено Тогда
		 
		 СсылкаНаФайлЛокальная = дт_МоиЗвонкиКлиент.ПолучитьФайлЗаписи(СсылкаНаФайл);
		 Если СсылкаНаФайлЛокальная = Неопределено Тогда
			 Возврат
		 КонецЕсли;
		 
		 Кэш.ФайлыЗвонков.Вставить(СсылкаНаФайл, СсылкаНаФайлЛокальная);
		 
	 КонецЕсли;
	 дт_МоиЗвонкиКлиент.ПрослушатьФайл(СсылкаНаФайлЛокальная);	
 КонецПроцедуры

 
 &НаКлиенте
 Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница) 
	 
	 
	 Если ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		 СписокТоварыОбщ.Параметры.УстановитьЗначениеПараметра("ДатаСреза", НачалоДня(ТекущаяДата())-3600*24*30);
	 КонецЕсли;
	 
	 //Если ТекущаяСтраница = Элементы.СтраницаВРаботе Тогда
	 //    СменаСтраницыСервер(1);
	 //   // ЗаполнитьПодвал(1);
	 //    НомерСтраницы = 1;
	 //КонецЕсли;
	 //
	 //Если ТекущаяСтраница = Элементы.СтраницаДумает Тогда
	 //    СменаСтраницыСервер(2);
	 //    //ЗаполнитьПодвал(2);
	 //    НомерСтраницы = 2;
	 //КонецЕсли;
	 //
	 //Если ТекущаяСтраница = Элементы.СтраницаПродажа Тогда
	 //    СменаСтраницыСервер(3);
	 //    ЗаполнитьПодвал(3);
	 //    НомерСтраницы = 3;
	 //КонецЕсли;
	 //
	 //Если ТекущаяСтраница = Элементы.СтраницаЖдёмДенег Тогда
	 //    СменаСтраницыСервер(4);
	 //    ЗаполнитьПодвал(4);
	 //    НомерСтраницы = 4;
	 //КонецЕсли; 
	 //
	 //Если ТекущаяСтраница = Элементы.СтраницаОжидаетПриход Тогда
	 //    СменаСтраницыСервер(5);
	 //    ЗаполнитьПодвал(5);
	 //    НомерСтраницы = 5;
	 //КонецЕсли;
	 //
	 //Если ТекущаяСтраница = Элементы.СтраницаНетВНаличии Тогда
	 //    СменаСтраницыСервер(6);
	 //    ЗаполнитьПодвал(6);
	 //    НомерСтраницы = 6;
	 //КонецЕсли;
	 //
	 //Если ТекущаяСтраница = Элементы.СтраницаОтказ Тогда
	 //    СменаСтраницыСервер(7);
	 //    ЗаполнитьПодвал(7);
	 //    НомерСтраницы = 7;
	 //КонецЕсли;
	 //
	 //Если ТекущаяСтраница = Элементы.СтраницаСпам Тогда
	 //    СменаСтраницыСервер(8);
	 //    ЗаполнитьПодвал(8);
	 //    НомерСтраницы = 8;
	 //КонецЕсли;
	 //
	 //Если ТекущаяСтраница = Элементы.СтраницаДата1 Тогда
	 //    СменаСтраницыСервер(9);
	 //    ЗаполнитьПодвал(9);
	 //    НомерСтраницы = 9;
	 //КонецЕсли;
	 //
	 //Если ТекущаяСтраница = Элементы.СтраницаДата2 Тогда
	 //    СменаСтраницыСервер(10);
	 //    ЗаполнитьПодвал(10);
	 //    НомерСтраницы = 10;
	 //КонецЕсли;
	 //
	 //Если ТекущаяСтраница = Элементы.СтраницаДата3 Тогда
	 //    СменаСтраницыСервер(11);
	 //    ЗаполнитьПодвал(11);
	 //    НомерСтраницы = 11;
	 //КонецЕсли;
	 
 КонецПроцедуры
 
 Процедура СменаСтраницыСервер(Стр, ДатаПарам = Неопределено)
	 Текст =  "ВЫБРАТЬ
	 |	СУММА(ПриходДенегНаСчет.СуммаДокумента) КАК СуммаПрихода,
	 |	ПриходДенегНаСчет.Сделка.ЗаказКлиента КАК СделкаЗаказКлиента
	 |ПОМЕСТИТЬ ВТ_Приходы
	 |ИЗ
	 |	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	 |СГРУППИРОВАТЬ ПО
	 |	ПриходДенегНаСчет.Сделка.ЗаказКлиента
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	МАКСИМУМ(ПредварительныйСчет.Ссылка) КАК Ссылка,
	 |	ПредварительныйСчет.Основание КАК Основание
	 |ПОМЕСТИТЬ ВТ_Счета
	 |ИЗ
	 |	Документ.ПредварительныйСчет КАК ПредварительныйСчет
	 |СГРУППИРОВАТЬ ПО
	 |	ПредварительныйСчет.Основание
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ПредварительныйСчет.Номер КАК Номер,
	 |	МАКСИМУМ(ПредварительныйСчет.Ссылка) КАК Ссылка,
	 |	ВТ_Счета.Основание КАК Основание
	 |ПОМЕСТИТЬ ВТ_НомерСчета
	 |ИЗ
	 |	ВТ_Счета КАК ВТ_Счета
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПредварительныйСчет КАК ПредварительныйСчет
	 |		ПО ВТ_Счета.Ссылка = ПредварительныйСчет.Ссылка
	 |СГРУППИРОВАТЬ ПО
	 |	ВТ_Счета.Основание,
	 |	ПредварительныйСчет.Номер
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	МАКСИМУМ(ПродажаЗапчастей.Ссылка) КАК Ссылка,
	 |	ПродажаЗапчастей.ЗаказКлиента КАК ЗаказКлиента
	 |ПОМЕСТИТЬ ВТ_Продажи
	 |ИЗ
	 |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	 |СГРУППИРОВАТЬ ПО
	 |	ПродажаЗапчастей.ЗаказКлиента
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ПродажаЗапчастей.Номер КАК Номер,
	 |	ВТ_Продажи.ЗаказКлиента КАК ЗаказКлиента,
	 |	МАКСИМУМ(ПродажаЗапчастей.Ссылка) КАК Ссылка1
	 |ПОМЕСТИТЬ ВТ_НомерПродажи
	 |ИЗ
	 |	ВТ_Продажи КАК ВТ_Продажи
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	 |		ПО ВТ_Продажи.Ссылка = ПродажаЗапчастей.Ссылка
	 |СГРУППИРОВАТЬ ПО
	 |	ВТ_Продажи.ЗаказКлиента,
	 |	ПродажаЗапчастей.Номер
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиЗвонков.Дата) КАК Дата,
	 |	ЗаписиЗвонков.НомерТелефона КАК НомерТелефона,
	 |	СУММА(ЗаписиЗвонков.Длительность) КАК Длительность,
	 |	ЗаписиЗвонков.Заявка КАК Заявка
	 |ПОМЕСТИТЬ ВТ_Звонки
	 |ИЗ
	 |	РегистрСведений.ЗаписиЗвонков КАК ЗаписиЗвонков
	 |СГРУППИРОВАТЬ ПО
	 |	ЗаписиЗвонков.НомерТелефона,
	 |	ЗаписиЗвонков.Заявка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ДокументЗаказКлиента.Ссылка КАК Ссылка,
	 |	ДокументЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
	 |	ДокументЗаказКлиента.Номер КАК Номер,
	 |	ДокументЗаказКлиента.Дата КАК Дата,
	 |	ДокументЗаказКлиента.Проведен КАК Проведен,
	 |	ДокументЗаказКлиента.КлиентНаименование КАК КлиентНаименование,
	 |	ДокументЗаказКлиента.Клиент КАК Клиент,
	 |	ДокументЗаказКлиента.НомерТелефона КАК НомерТелефона,
	 |	ВЫРАЗИТЬ(ДокументЗаказКлиента.Комментарий КАК СТРОКА(150)) КАК Комментарий,
	 |	ДокументЗаказКлиента.Состояние КАК Состояние,
	 |	ДокументЗаказКлиента.Ответственный КАК Ответственный,
	 |	ДокументЗаказКлиента.Проект КАК Проект,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.СуммаДокумента = 0
	 |			ТОГДА ДокументЗаказКлиента.ПотенциальнаяЦена
	 |		ИНАЧЕ ДокументЗаказКлиента.СуммаДокумента
	 |	КОНЕЦ КАК СуммаДокумента,
	 |	ДокументЗаказКлиента.Склад КАК Склад,
	 |	ДокументЗаказКлиента.Согласовал КАК Согласовал,
	 |	ДокументЗаказКлиента.ДатаИзмененияСостояния КАК ДатаИзмененияСостояния,
	 |	ДокументЗаказКлиента.ДатаСвязи КАК ДатаСвязи,
	 |	ДокументЗаказКлиента.МоментВремени КАК МоментВремени,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.ДатаСвязи < &ТекДата
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК Проверка,
	 |	ДокументЗаказКлиента.НомерВнешний КАК НомерВнешний,
	 |	ДокументЗаказКлиента.СтатусКонтроля КАК СтатусКонтроля,
	 |	ДокументЗаказКлиента.Контролёр КАК Контролёр,
	 |	ДокументЗаказКлиента.ТекстовыйМенеджер КАК ТекстовыйМенеджер,
	 |	ДокументЗаказКлиента.ТипЗаявки КАК ТипЗаявки,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Ожидание)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоОжидание,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Думает)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоДумает,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Отказ)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоОтказ,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Продажа)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоПродажа,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.НетВНаличии)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоНетВНаличии,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Срочно)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоСрочно,
	 |	ВЫБОР
	 |		КОГДА ДокументЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.ЖдёмДенег)
	 |			ТОГДА 1
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК КоличествоЖдёмДенег,
	 |	ДокументЗаказКлиента.Канал КАК Канал,
	 |	ВТ_Приходы.СуммаПрихода КАК Оплачено,
	 |	ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(ВТ_Приходы.СуммаПрихода, 0) КАК Ждём,
	 |	ДокументЗаказКлиента.СуммаПредлагаемойЦены КАК СуммаПредлагаемойЦены,
	 |	ДокументЗаказКлиента.ДатаПоследнегоВзаимодействия КАК ДатаПоследнегоВзаимодействия,
	 |	ДокументЗаказКлиента.Прослушано КАК Прослушано,
	 |	ДокументЗаказКлиента.Закрыта КАК Закрыта,
	 |	ДокументЗаказКлиента.АтоматическоеСоздание КАК АтоматическоеСоздание,
	 |	ВТ_Звонки.Длительность КАК Длительность,
	 |	ВТ_Звонки.Дата КАК КолвоЗвонков,
	 |	NULL КАК ПустоеПоле,
	 |	ВТ_НомерСчета.Номер КАК НомерСчета,
	 |	ВТ_НомерСчета.Ссылка КАК СсылкаНаСчёт,
	 |	ВТ_НомерСчета.Основание КАК Основание,
	 |	ВТ_НомерПродажи.Номер КАК НомерПродажи,
	 |	ВТ_НомерПродажи.ЗаказКлиента КАК ЗаказКлиента,
	 |	ВТ_НомерПродажи.Ссылка1 КАК СсылкаНаПродажу,
	 |	ДокументЗаказКлиента.Целевая КАК Целевая,
	 |	ДокументЗаказКлиента.Контроль КАК Контроль,
	 |	ДокументЗаказКлиента.Закрыта КАК Закрыта1,
	 |	ДокументЗаказКлиента.СтатусОбработки КАК СтатусОбработки,
	 |	ДокументЗаказКлиента.Помощник
	 |{ГДЕ
	 |	(ДокументЗаказКлиента.Ответственный = &Ответственный) КАК Поле2}
	 |ИЗ
	 |	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приходы КАК ВТ_Приходы
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_Приходы.СделкаЗаказКлиента
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Звонки КАК ВТ_Звонки
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_Звонки.Заявка
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НомерСчета КАК ВТ_НомерСчета
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_НомерСчета.Основание
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НомерПродажи КАК ВТ_НомерПродажи
	 |		ПО ДокументЗаказКлиента.Ссылка = ВТ_НомерПродажи.ЗаказКлиента";
	 
	 Состояния   = Новый массив();
	 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Отказ);
	 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Продажа);
	 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.НетВНаличии);
	 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ЖдёмДенег);
	 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Спам);  
	 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ДругаяМарка);
	 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ОжидаетПриход);
	 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Дорого);
	 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Консультация);
	 Состояния.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Дубль);
	 
	 
	 Состояние = Новый массив();
	 Состояние.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Думает);
	 Состояние.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Продажа);
	 Состояние.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ЖдёмДенег);
	 Состояние.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ОжидаетПриход);
	 Состояние.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.НетВНаличии);
	 Состояние.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Отказ);
	 Состояние.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Спам);
	 Состояние.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Дорого);
	 ПервыйДеньНедели = НачалоНедели(ТекущаяДата()); 
	 ПоследнийДеньНедели = КонецНедели(ТекущаяДата());
	 
	 Если стр = 0 Тогда
		 Если Менеджер <> Справочники.Пользователи.ПустаяСсылка() Тогда  
			 Текст = Текст + Символы.ПС  + "ГДЕ" + Символы.ПС + "ДокументЗаказКлиента.Ответственный = &Ответственный";
			 Список.ТекстЗапроса = Текст; 
			 
			 //Текст = Текст + Символы.ПС + "ИЛИ" + Символы.ПС + "ДокументЗаказКлиента.Контролёр = &Ответственный";
			 //Список.ТекстЗапроса = Текст;
			 
			 Список.Параметры.УстановитьЗначениеПараметра("Ответственный", Менеджер);
		 Иначе
			 Список.ТекстЗапроса = Текст;
		 КонецЕсли;
	 Иначе
		 Если стр = 1 Тогда 
			 
			 
			 Текст = Текст + Символы.ПС + "ГДЕ" + Символы.ПС + "(ДокументЗаказКлиента.ДатаСвязи <= &ДатаСвязи ";
			 Список.ТекстЗапроса = Текст;
			 
			 Если Менеджер <> Справочники.Пользователи.ПустаяСсылка() Тогда
				 Текст = Текст + Символы.ПС + "И" + Символы.ПС + "Не ДокументЗаказКлиента.Состояние В (&Состояния)";
				 Список.ТекстЗапроса = Текст;	
				 Текст = Текст + Символы.ПС + "И" + Символы.ПС + "ДокументЗаказКлиента.Ответственный = &Ответственный)";
				 Список.ТекстЗапроса = Текст;
				 Текст = Текст + Символы.ПС + "ИЛИ" + Символы.ПС + "ДокументЗаказКлиента.Контролёр = &Ответственный";
				 Список.ТекстЗапроса = Текст;
			 Иначе
				 Текст = Текст + Символы.ПС + "И" + Символы.ПС + "Не ДокументЗаказКлиента.Состояние В (&Состояния))";
				 Список.ТекстЗапроса = Текст;
			 КонецЕсли;
			 //Текст = Текст + Символы.ПС + "ИЛИ" + Символы.ПС + "(ДокументЗаказКлиента.Дата Между &ДататекущаяНачало и &ДататекущаяОкончание";
			 //Список.ТекстЗапроса = Текст;
			 //Текст = Текст + Символы.ПС + "И" + Символы.ПС + "ДокументЗаказКлиента.Ответственный = &Ответственный)";
			 //Список.ТекстЗапроса = Текст;
			 
			 Список.Параметры.УстановитьЗначениеПараметра("ДатаСвязи", КонецДня(ТекущаяДата()));
			 
			 //Список.Параметры.УстановитьЗначениеПараметра("ДататекущаяНачало", НачалоДня(ТекущаяДата()));
			 //Список.Параметры.УстановитьЗначениеПараметра("ДататекущаяОкончание", КонецДня(ТекущаяДата()));
			 
			 Список.Параметры.УстановитьЗначениеПараметра("Состояния", Состояния);
			 Если  Менеджер <> Справочники.Пользователи.ПустаяСсылка() Тогда
				 Список.Параметры.УстановитьЗначениеПараметра("Ответственный", Менеджер);
			 КонецЕсли;
		 ИначеЕсли стр > 1  и стр < 10 Тогда
			 Если стр = 2 тогда
				 Текст = Текст + Символы.ПС + "ГДЕ"+ Символы.ПС + "ДокументЗаказКлиента.Состояние = &Состояние";
				 Список.ТекстЗапроса = Текст; 
				 Текст = Текст + Символы.ПС + "И" + Символы.ПС + "ДокументЗаказКлиента.ДатаСвязи > &ДатаСвязи";
				 Список.ТекстЗапроса = Текст;
				 Список.Параметры.УстановитьЗначениеПараметра("ДатаСвязи", КонецДня(ТекущаяДата()));
				 
			 иначе
				 Текст = Текст + Символы.ПС + "ГДЕ"+ Символы.ПС + "ДокументЗаказКлиента.Состояние = &Состояние";
				 Список.ТекстЗапроса = Текст; 
			 КонецЕсли;
			 
			 Если Менеджер <> Справочники.Пользователи.ПустаяСсылка() Тогда
				 
				 Текст = Текст + Символы.ПС + "И" + Символы.ПС + "ДокументЗаказКлиента.Ответственный = &Ответственный";
				 Список.ТекстЗапроса = Текст;
				 //Текст = Текст + Символы.ПС + "ИЛИ" + Символы.ПС + "ДокументЗаказКлиента.Контролёр = &Ответственный)";
				 //Список.ТекстЗапроса = Текст;
			 КонецЕсли;
			 
			 Список.Параметры.УстановитьЗначениеПараметра("Состояние", Состояние[стр-2]);
			 Если Менеджер <> Справочники.Пользователи.ПустаяСсылка() Тогда
				 Список.Параметры.УстановитьЗначениеПараметра("Ответственный", Менеджер);
			 КонецЕсли;
		 ИначеЕсли стр > 10  и стр <= 13 Тогда 	
			 
			 Если Менеджер <> Справочники.Пользователи.ПустаяСсылка() Тогда
				 Текст = Текст + Символы.ПС + "ГДЕ" + Символы.ПС + "(НАЧАЛОПЕРИОДА(ДокументЗаказКлиента.ДатаСвязи, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаСвязи, ДЕНЬ)";
				 Список.ТекстЗапроса = Текст;
				 Текст = Текст + Символы.ПС + "И" + Символы.ПС + "ДокументЗаказКлиента.Ответственный = &Ответственный)";
				 Список.ТекстЗапроса = Текст;
				 //Текст = Текст + Символы.ПС + "ИЛИ" + Символы.ПС + "ДокументЗаказКлиента.Контролёр = &Ответственный))";
				 //Список.ТекстЗапроса = Текст;
			 Иначе
				 Текст = Текст + Символы.ПС + "ГДЕ" + Символы.ПС + "НАЧАЛОПЕРИОДА(ДокументЗаказКлиента.ДатаСвязи, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаСвязи, ДЕНЬ)";
				 Список.ТекстЗапроса = Текст;
			 КонецЕсли;
			 
			 Список.Параметры.УстановитьЗначениеПараметра("ДатаСвязи", ДатаПарам);
			
			 Если Менеджер <> Справочники.Пользователи.ПустаяСсылка() Тогда
				 Список.Параметры.УстановитьЗначениеПараметра("Ответственный", Менеджер);	
			 КонецЕсли;
		 КонецЕсли; 	
	 КонецЕсли;
	 
	 Элементы.Список.Обновить();
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 
	 ///+ГомзМА 17.08.2023
	 //СсылкаНаЗаявку    = Элементы.Список.ТекущиеДанные[СтрЗаменить(Поле.Имя,Элемент.имя,"")];
	 
	 СсылкаНаЗаявку = Элементы.Список.ТекущиеДанные.Ссылка;
	 
	 СсылкаДляОткрытия = ПолучитьСчетИЛИПродажуПоЗаявке(Поле.Имя, СсылкаНаЗаявку);
	 //СсылкаНаДок = Строка(ПолучитьСсылкуНаДокумент(Поле.Имя, СсылкаДляОткрытия));
	 
	 Если СсылкаДляОткрытия <> Неопределено Тогда
		 ПараметрыФормы = Новый Структура("Ключ", СсылкаДляОткрытия);
		 Если ТипЗнч(СсылкаДляОткрытия) = Тип("ДокументСсылка.ПредварительныйСчет") Тогда
			 СтандартнаяОбработка = Ложь;
			 ИмяФормыДокумента 	= "Документ.ПредварительныйСчет.Форма.ФормаДокумента";
			 ФормаДокумента 		= ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
			 ФормаДокумента.Открыть();
		 ИначеЕсли ТипЗнч(СсылкаДляОткрытия) = Тип("ДокументСсылка.ПродажаЗапчастей") Тогда
			 СтандартнаяОбработка = Ложь;
			 ИмяФормыДокумента="Документ.ПродажаЗапчастей.Форма.ФормаДокумента";
			 ФормаДокумента = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
			 ФормаДокумента.Открыть();
		 Иначе
			 СтандартнаяОбработка = Истина;
			 Возврат;
		 КонецЕсли;
	 иначе
		 СтандартнаяОбработка = Истина;
		 
	 КонецЕсли;
	 ///-ГомзМА 17.08.2023
	 
 КонецПроцедуры
 
 &НаСервере
 Функция ПолучитьСсылкуНаДокумент(Поле, Номер)
	 
	 ///+ГомзМА 17.08.2023
	 Результат = Неопределено;
	 
	 Если Поле = "НомерСчета" Тогда
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ПредварительныйСчет.Ссылка КАК Ссылка
		 |ИЗ
		 |	Документ.ПредварительныйСчет КАК ПредварительныйСчет
		 |ГДЕ
		 |	ПредварительныйСчет.Номер = &Номер";
		 
		 Запрос.УстановитьПараметр("Номер", Номер);
		 
		 РезультатЗапроса = Запрос.Выполнить().Выбрать();
		 
		 Если РезультатЗапроса > 0 Тогда
			 РезультатЗапроса.Следующий();
			 Результат = РезультатЗапроса.Ссылка;
			 
			 Возврат Результат;
		 КонецЕсли;
	 ИначеЕсли Поле = "НомерПродажи" Тогда
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ПродажаЗапчастей.Ссылка КАК Ссылка
		 |ИЗ
		 |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		 |ГДЕ
		 |	ПродажаЗапчастей.Номер = &Номер";
		 
		 Запрос.УстановитьПараметр("Номер", Номер);
		 
		 РезультатЗапроса = Запрос.Выполнить().Выбрать();
		 
		 Если РезультатЗапроса > 0 Тогда
			 РезультатЗапроса.Следующий();
			 Результат = РезультатЗапроса.Ссылка;
			 
			 Возврат Результат;
		 КонецЕсли;
		 
	 КонецЕсли;
	 ///-ГомзМА 17.08.2023
	 
 КонецФункции // ()
 
 &НаСервере
 Функция ПолучитьСчетИЛИПродажуПоЗаявке(Поле, Заявка)
	 
	 ///+ГомзМА 17.08.2023
	 Результат = Неопределено;
	 
	 Если Поле = "НомерСчета" Тогда
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ПредварительныйСчет.Ссылка КАК Ссылка
		 |ИЗ
		 |	Документ.ПредварительныйСчет КАК ПредварительныйСчет
		 |ГДЕ
		 |	ПредварительныйСчет.Основание = &Заявка";
		 
		 Запрос.УстановитьПараметр("Заявка", Заявка);
		 
		 РезультатЗапроса = Запрос.Выполнить().Выбрать();
		 
		 Если РезультатЗапроса.Количество() > 0 Тогда
			 РезультатЗапроса.Следующий();
			 Результат = РезультатЗапроса.Ссылка;
			 
			 Возврат Результат;
		 КонецЕсли;
	 ИначеЕсли Поле = "НомерПродажи" Тогда
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ПродажаЗапчастей.Ссылка КАК Ссылка
		 |ИЗ
		 |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		 |ГДЕ
		 |	ПродажаЗапчастей.ЗаказКлиента = &Заявка";
		 
		 Запрос.УстановитьПараметр("Заявка", Заявка);
		 
		 РезультатЗапроса = Запрос.Выполнить().Выбрать();
		 
		 Если РезультатЗапроса.Количество() > 0 Тогда
			 РезультатЗапроса.Следующий();
			 Результат = РезультатЗапроса.Ссылка;
			 
			 Возврат Результат;
		 КонецЕсли;
		 
	 КонецЕсли;
	 ///-ГомзМА 17.08.2023
	 
 КонецФункции // ПолучитьСчетИПродажуПоЗаявке()
 
 
 &НаКлиенте
 Процедура СписокВРаботеПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокВРаботе.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокВРаботе.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокДумаетПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокДумает.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокДумает.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокПродажаПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокПродажа.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокПродажа.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокЖдёмДенегПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокЖдёмДенег.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокЖдёмДенег.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокОжидаетПриходПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокОжидаетПриход.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокОжидаетПриход.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокДата1ПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокДата1.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокДата1.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокДата2ПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокДата2.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокДата2.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокДата3ПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокДата3.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокДата3.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокНетВНаличииПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокНетВНаличии.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокНетВНаличии.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокОтказПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокОтказ.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокОтказ.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СписокСпамПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокСпам.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокСпам.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 
 
 &НаКлиенте
 Процедура СписокПриАктивизацииСтроки(Элемент)
	 // СтандартныеПодсистемы.ПодключаемыеКоманды
	 ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	 // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	 //ПересчётИтогиДокументов(); 
	 Если Элементы.список.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.список.ТекущиеДанные);
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОбновитьОтборТоваров(ТекДанные)
	 //текэлемент = ЭтаФорма.ТекущийЭлемент;
	 //ТекДанные = Элементы.список.ТекущиеДанные;
	 
	 //Номенклатура = ?(ТекДанные = Неопределено, Неопределено, ТекДанные.Номенклатура);
	 СписокДашборд1.Параметры.УстановитьЗначениеПараметра("СсылкаНаЗаявку",ТекДанные.ссылка);
	// СписокДашборд2.Параметры.УстановитьЗначениеПараметра("СсылкаНаЗаявку",ТекДанные.ссылка);
	 Товары.Параметры.УстановитьЗначениеПараметра("СсылкаНаЗаявку",ТекДанные.ссылка);
	 //Партии.Параметры.УстановитьЗначениеПараметра("Товар", ТекДанные.Номенклатура);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОбновитьПодвал(Команда)
	 
	 
	 //Если НомерСтраницы = 0 Тогда
	 //    
	 //    ЗаполнитьПодвал(0);
	 //КонецЕсли;
	 //
	 //Если НомерСтраницы = 1 Тогда
	 //    
	 //    ЗаполнитьПодвал(1);
	 //КонецЕсли;
	 //
	 //Если НомерСтраницы = 2 Тогда
	 //    
	 //    ЗаполнитьПодвал(2);
	 //КонецЕсли;
	 //
	 //Если НомерСтраницы = 3 Тогда
	 //    
	 //    ЗаполнитьПодвал(3);
	 //КонецЕсли;
	 //
	 //Если НомерСтраницы = 4 Тогда
	 //    
	 //    ЗаполнитьПодвал(4);
	 //КонецЕсли; 
	 //
	 //Если НомерСтраницы = 5 Тогда
	 //    
	 //    ЗаполнитьПодвал(5);
	 //КонецЕсли;
	 //
	 //Если НомерСтраницы = 6 Тогда
	 //    
	 //    ЗаполнитьПодвал(6);
	 //КонецЕсли;
	 //
	 //Если НомерСтраницы = 7 Тогда
	 //    
	 //    ЗаполнитьПодвал(7);
	 //КонецЕсли;
	 //
	 //Если НомерСтраницы = 8 Тогда
	 //    
	 //    ЗаполнитьПодвал(8);
	 //КонецЕсли;
	 //
	 //Если НомерСтраницы = 9 Тогда
	 //    
	 //    ЗаполнитьПодвал(9);
	 //КонецЕсли;
	 //
	 //Если НомерСтраницы = 10 Тогда
	 //    
	 //    ЗаполнитьПодвал(10);
	 //КонецЕсли;
	 //
	 //Если НомерСтраницы = 11 Тогда
		 
		 ЗаполнитьПодвал(11);
	// КонецЕсли;
	 
 КонецПроцедуры

 &НаКлиенте
 Процедура СписокНаКонтроллеПриАктивизацииСтроки(Элемент)
	 Если Элементы.СписокНаКонтролле.ТекущиеДанные <> Неопределено Тогда
		 ОбновитьОтборТоваров(Элементы.СписокНаКонтролле.ТекущиеДанные);
	 КонецЕсли;
 КонецПроцедуры
 
 &НаСервере
 Процедура АктивироватьКонтрольНаСервере(Заявка)
	 ОбъектЗаявки = Заявка.получитьОбъект();
	 ОбъектЗаявки.Контролёр = Пользователи.ТекущийПользователь();
	 ОбъектЗаявки.Контроль  = Истина;
	 ОбъектЗаявки.записать();
 КонецПроцедуры
 
 &НаКлиенте
 Процедура АктивироватьКонтроль(Команда)
	 
	 Если  ТипЗнч(ТекущийЭлемент) = Тип("Таблицаформы")  Тогда
		 АктивироватьКонтрольНаСервере( ТекущийЭлемент.ТекущиеДанные.ссылка);
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ПролушаноНаСервере(Заявка)
	 ОбъектЗаявки = Заявка.получитьОбъект();
	 // ОбъектЗаявки.Контролёр = Пользователи.ТекущийПользователь();
	 ОбъектЗаявки.Прослушано  = Истина;
	 ОбъектЗаявки.записать();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Пролушано(Команда)
	 Если  ТипЗнч(ТекущийЭлемент) = Тип("Таблицаформы")  Тогда
		 ПролушаноНаСервере( ТекущийЭлемент.ТекущиеДанные.ссылка);
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ЗакрытьНаСервере(Заявка)
	 ОбъектЗаявки = Заявка.получитьОбъект();
	 // ОбъектЗаявки.Контролёр = Пользователи.ТекущийПользователь();
	 ОбъектЗаявки.Закрыта  = Истина;
	 ОбъектЗаявки.записать(); 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ЗакрытьЗаявку(Команда)
	 Если  ТипЗнч(ТекущийЭлемент) = Тип("Таблицаформы")  Тогда
		 ЗакрытьНаСервере( ТекущийЭлемент.ТекущиеДанные.ссылка);
	 КонецЕсли;
 КонецПроцедуры

&НаКлиенте
 Процедура ФильтрЗаявокПриИзменении(Элемент)
	  Если ФильтрЗаявок = "ВсеЗаявки" Тогда
		 СменаСтраницыСервер(0);
		// ЗаполнитьПодвал(0);
		 НомерСтраницы = 0;
	 КонецЕсли;
	 
	 Если ФильтрЗаявок = "ВРаботе" Тогда
		 СменаСтраницыСервер(1);
		// ЗаполнитьПодвал(1);
		 НомерСтраницы = 1;
	 КонецЕсли;
	 
	 Если ФильтрЗаявок = "Думает" Тогда
		 СменаСтраницыСервер(2);
		 //ЗаполнитьПодвал(2);
		 НомерСтраницы = 2;
	 КонецЕсли; 
	 
	  Если 	ФильтрЗаявок = "Продажа" Тогда
		 СменаСтраницыСервер(3);
		// ЗаполнитьПодвал(3);
		 НомерСтраницы = 3;

	 КонецЕсли;

	 Если ФильтрЗаявок = "ЖдёмДенег" Тогда
		 СменаСтраницыСервер(4);
		// ЗаполнитьПодвал(3);
		 НомерСтраницы = 4;
	 КонецЕсли;
	 
	  Если ФильтрЗаявок = "ОжидаетПоступления" Тогда
		 СменаСтраницыСервер(5);
		// ЗаполнитьПодвал(4);
		 НомерСтраницы = 5;
	 КонецЕсли; 
	 
	 Если ФильтрЗаявок = "НетВНаличии" Тогда
		 СменаСтраницыСервер(6);
		// ЗаполнитьПодвал(5);
		 НомерСтраницы = 6;
	 КонецЕсли;
	 
	  Если ФильтрЗаявок = "Отказ" Тогда
		 СменаСтраницыСервер(7);
		// ЗаполнитьПодвал(6);
		 НомерСтраницы = 7;
	 КонецЕсли;
	 
	 Если ФильтрЗаявок = "Спам" Тогда
		 СменаСтраницыСервер(8);
		// ЗаполнитьПодвал(7);
		 НомерСтраницы = 8;
	 КонецЕсли;
	 
	  Если ФильтрЗаявок = "Дорого" Тогда
		 СменаСтраницыСервер(9);
		// ЗаполнитьПодвал(11);
		 НомерСтраницы = 9;
	 КонецЕсли;
	 
	  Если ФильтрЗаявок = "НаКонтроле" Тогда
		 СменаСтраницыСервер(10);
		// ЗаполнитьПодвал(8);
		 НомерСтраницы = 10;
	 КонецЕсли;
	 

	 
	 Если ФильтрЗаявок = "Дата1" Тогда
		 СменаСтраницыСервер(11, ТекущаяДата() + 86400);
		// ЗаполнитьПодвал(9);
		 НомерСтраницы = 11;
	 КонецЕсли;
	 
	  Если ФильтрЗаявок = "Дата2" Тогда
		 СменаСтраницыСервер(12, ТекущаяДата() + (2 * 86400));
		// ЗаполнитьПодвал(10);
		 НомерСтраницы = 12;
	 КонецЕсли;
	 
	  Если ФильтрЗаявок = "Дата3" Тогда
		 СменаСтраницыСервер(13, ТекущаяДата() + (3 * 86400));
		// ЗаполнитьПодвал(11);
		 НомерСтраницы = 13;
	 КонецЕсли;


 КонецПроцедуры 
 
 
 Процедура ЗаполнитьФильтр()
элементы.ФильтрЗаявок.СписокВыбора.Очистить();	
элементы.ФильтрЗаявок.СписокВыбора.Добавить("ВсеЗаявки","Все заявки"); 
элементы.ФильтрЗаявок.СписокВыбора.Добавить("ВРаботе","В работе");
элементы.ФильтрЗаявок.СписокВыбора.Добавить("Думает","Думает");
элементы.ФильтрЗаявок.СписокВыбора.Добавить("Продажа","Продажа");
элементы.ФильтрЗаявок.СписокВыбора.Добавить("ЖдёмДенег","Ждём денег");
элементы.ФильтрЗаявок.СписокВыбора.Добавить("ОжидаетПоступления","Ожидаем приход");
элементы.ФильтрЗаявок.СписокВыбора.Добавить("Дата1",Строка(день(НачалоДня(ТекущаяДата())+1*24*3600))+ "/" + Строка(месяц(НачалоДня(ТекущаяДата())+1*24*3600)));
элементы.ФильтрЗаявок.СписокВыбора.Добавить("Дата2",Строка(день(НачалоДня(ТекущаяДата())+2*24*3600))+ "/" + Строка(месяц(НачалоДня(ТекущаяДата())+2*24*3600)));
элементы.ФильтрЗаявок.СписокВыбора.Добавить("Дата3",Строка(день(НачалоДня(ТекущаяДата())+3*24*3600))+ "/" + Строка(месяц(НачалоДня(ТекущаяДата())+3*24*3600)));
элементы.ФильтрЗаявок.СписокВыбора.Добавить("НетВНаличии","Нет в налиии");
элементы.ФильтрЗаявок.СписокВыбора.Добавить("Отказ","Отказ");
элементы.ФильтрЗаявок.СписокВыбора.Добавить("Спам","Спам");
элементы.ФильтрЗаявок.СписокВыбора.Добавить("Спам","Спам");
элементы.ФильтрЗаявок.СписокВыбора.Добавить("Дорого","Дорого"); 
Фильтрзаявок ="ВРаботе";
конецПроцедуры

&НаКлиенте
Процедура СписокТоварыОбщВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить("Ключ", Элементы.СписокТоварыОбщ.ТекущиеДанные.Ссылка);
	
ОткрытьФорму("Документ.ЗаказКлиента.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьОтборПартий()
	ТекДанные = Элементы.СписокТоварыОбщ.Текущиеданные;
	
	//Номенклатура = ?(ТекДанные = Неопределено, Неопределено, ТекДанные.Номенклатура);
	
	списокПартии.Параметры.УстановитьЗначениеПараметра("Товар", ТекДанные.Наименование);
	СписокДашборд2.Параметры.УстановитьЗначениеПараметра("СсылкаНаЗаявку",ТекДанные.ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоварыОбщПриАктивизацииСтроки(Элемент)
	Если Элементы.СписокТоварыОбщ.ТекущиеДанные <> Неопределено Тогда
		ОбновитьОтборПартий();
	КонецЕсли;
	
	 
КонецПроцедуры
 
 
