&НаКлиенте
Перем Кэш;

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	Если НЕ Объект.Ссылка.Пустая() Тогда  
		Объект.ДатаИзмененияСостояния = ТекущаяДата();
		//ЗапретЗаписи();
		ЗаписьЛога("Сменил статус на " + объект.Состояние);
	КонецЕсли;
	
	СостояниеПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура СостояниеПриИзмененииСервер()
	Если Объект.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.ДругаяМарка
		ИЛИ Объект.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Консультация
		ИЛИ Объект.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Спам
		ИЛИ Объект.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Дубль Тогда
		
		Объект.Целевая = Ложь;
		ЭтаФорма.Записать();
	КонецЕсли;
КонецПроцедуры




#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПроверкаПродаж(Объект.Ссылка);
	ПараметрыДлительнойОперации = Новый Структура("Завершено, АдресРезультата, Идентификатор, Ошибка, ПодробноеПредставлениеОшибки");
	
	ПараметрыДлительнойОперации.Вставить("ИнтервалОжидания", 5);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьСписокКонтролёров();
	ЗаполнитьСписокСогласовантов();
	ОбновитьДобавленныеКолонки();
	УстановитьУсловноеОформление();
	
	Элементы.НомерВнешний.ТолькоПросмотр = Не Пользователи.ЭтоПолноправныйПользователь();
	Если ЗначениеЗаполнено(Объект.НомерТелефона) И ИностранныйНомер = Истина Тогда
		Элементы.НомерТелефона.Маска = "";
		Элементы.ДополнительныйТелефон.Маска = "";
	Иначе
		Элементы.НомерТелефона.Маска = "+7 ### ###-##-##";
		Элементы.ДополнительныйТелефон.Маска = "+7 ### ###-##-##";
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// Позиционируемся на строке
	Для каждого ТабличнаяЧасть Из Объект.Ссылка.Метаданные().ТабличныеЧасти Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Имя;
		ИмяПараметра = ИмяТЧ + "_НомерСтроки";
		Если Параметры.Свойство(ИмяПараметра) Тогда
			Элементы[ИмяТЧ].ТекущаяСтрока = Параметры[ИмяПараметра];
			//			ИмяСтраницы = "Группа" + ИмяТЧ;
			//			Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница = Элементы[ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если пользователи.РолиДоступны("ТекстовыйМенеджер") Тогда
			объект.ТекстовыйМенеджер = Пользователи.ТекущийПользователь();
		КонецЕсли;
	Иначе
		Если объект.Ответственный <> Пользователи.ТекущийПользователь() И объект.Ответственный <> Справочники.Пользователи.ПустаяСсылка()
			И не(  Пользователи.РолиДоступны("Руководитель") ИЛИ  Пользователи.РолиДоступны("ТекстовыйМенеджер") ИЛИ Пользователи.РолиДоступны("Контролёр")) Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЕсли;
	ПроверкаТипЗаявки = объект.ТипЗаявки;
	ТипЗаявкиПриИзмененииСерв();
	ВыводЛога();
	Звонки.Параметры.УстановитьЗначениеПараметра("ДатаНачала",Объект.Дата - 3600*24*2); 
	Звонки.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",Объект.ДатаСвязи + 3600*24*5); 
	Звонки.Параметры.УстановитьЗначениеПараметра("Клиент",объект.Клиент); 
	Звонки.Параметры.УстановитьЗначениеПараметра("НомерТелефона",объект.НомерТелефона); 
	ПроверкаДатыПоследнегоВзаимодействия();
	СтатусДляПроверки = Объект.СтатусОбработки;
	//Элементы.Состояние.СписокВыбора.Очистить();
	//Элементы.Состояние.СписокВыбора.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Думает);
	//Элементы.Состояние.СписокВыбора.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.ЖдёмДенег);
	//Элементы.Состояние.СписокВыбора.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.НетВНаличии);
	//Элементы.Состояние.СписокВыбора.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Ожидание);
	//Элементы.Состояние.СписокВыбора.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Отказ);
	//Элементы.Состояние.СписокВыбора.Добавить(Перечисления.дт_СостоянияЗаказовКлиента.Продажа);
	///
	//	Партии.Параметры.УстановитьЗначениеПараметра("ЕстьОтборПоСкладу", ЗначениеЗаполнено(Объект.Склад));
	
	//Волков ИО 09.01.24 ++
	ПроверкаСтатусаWT = Объект.WTPanel;
	Объект.Целевая = Истина;
	
	//Волков ИО 09.01.24 --
	
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	КлиентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Клиенты.Телефон
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Объект.НомерТелефона = ВыборкаДетальныеЗаписи.Телефон;
		КонецЦикла;
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаСервере
Процедура WTPanelПриИзмененииНаСервере()
	
	Если ПроверкаСтатусаWT <> Объект.WTPanel Тогда
		
		Если Объект.WTPanel = Справочники.СтатусыWT.НайтиПоКоду("000000013") Тогда
			ЗакрытьВремяЗК();
		ИначеЕсли Объект.WTPanel = Справочники.СтатусыWT.НайтиПоКоду("000000015") Тогда
			
			//ЗакрытьВремяЗК();
		    ОткрытьВремяЗК(объект.Ссылка, Справочники.Пользователи.ПустаяСсылка(), Объект.WTPanel);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьВремяЗК()
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВремяВыполненияЗаявок.ЗаявкаПродажа КАК Задача,
				   |	ВремяВыполненияЗаявок.Период КАК ДатаСреза
				   |ИЗ
				   |	РегистрСведений.ВремяВыполненияЗаявок КАК ВремяВыполненияЗаявок
				   |ГДЕ
				   |	 ВремяВыполненияЗаявок.КонецЗамера < ДАТАВРЕМЯ(2000, 1, 1)
				   |И ВремяВыполненияЗаявок.ЗаявкаПродажа = &ЗаявкаПродажа
				   |УПОРЯДОЧИТЬ ПО
				   |	ВремяВыполненияЗаявок.Период УБЫВ";
	Запрос.УстановитьПараметр("ЗаявкаПродажа", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ВремяВыполненияЗаявок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаявкаПродажа.Установить(Выборка.Задача);
			НаборЗаписей.Отбор.Период.Установить(Выборка.ДатаСреза);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				НашЗамер = НаборЗаписей[0];
				НашЗамер.КонецЗамера = ТекущаяДата();
				НашЗамер.Срок		 = НашЗамер.КонецЗамера - НашЗамер.НачалоЗамера;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьВремяЗК(ЗК, Ответственный, Статус)

	НаборЗаписей = РегистрыСведений.ВремяВыполненияЗаявок.СоздатьМенеджерЗаписи();

	НаборЗаписей.ЗаявкаПродажа = ЗК ;
	НаборЗаписей.Период = ТекущаяДата();
	НаборЗаписей.НачалоЗамера = ТекущаяДата();
	НаборЗаписей.КонецЗамера = ТекущаяДата();
	НаборЗаписей.Ответственный = Ответственный;
	НаборЗаписей.Статус = Статус;
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ПроверкаПродаж(Заявка)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	ПродажаЗапчастей.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.ЗаказКлиента = &ЗаказКлиента
	|	И ПродажаЗапчастей.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.заказКлиента.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ЗаказКлиента",Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 тогда
		Выборка.Следующий();
		Продажа = выборка.ссылка;	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);  
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды  
	
	QRКод = "";
	// Проверка = ГенераторШтрихКодаКлиент.УстановитьКомпонентуШтрихКодирования("");
	штрихкод = Получитькомпоненту();  
	Элементы.QRКод.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	
	СостояниеПриИзмененииСервер();
	
	/// Комлев 24/05/24 +++
	// Получаем остатки по складам.
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		СтруктураОстатки = ПолучениеОстатковПоСкладам(СтрокаТЧ.Номенклатура);
		СтрокаТЧ.НН = СтруктураОстатки.НН;
		СтрокаТЧ.МСК = СтруктураОстатки.МСК;
		СтрокаТЧ.ЕКБ = СтруктураОстатки.ЕКБ;
	КонецЦикла;
	/// Комлев 24/05/24 ---
КонецПроцедуры


&НаСервере
Функция Получитькомпоненту()
	ТекстОшибки = "";
	
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(ТекстОшибки); 
	Штрихкод.Ширина = 250; 
	Штрихкод.Высота = 250;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = объект.Номер;
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод,Истина);
	
	QRкод = ПоместитьВоВременноеХранилище(КартинкаШтрихКод,УникальныйИдентификатор);
	возврат истина;
КонецФункции


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Описание = ТекущийОбъект.хранилищеОписания.Получить();
	
КонецПроцедуры



&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьДобавленныеКолонки();
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(строка(объект.НомерТелефона));
	
	ФоновыеЗадания.Выполнить("МоиЗвонкиИЗаявки.ПолучитьТаблицуЗвонковПоНомеруТелефонаОбр",МассивПараметров,Новый УникальныйИдентификатор);	
	Если  Параметры.Ключ.Пустая() 
		и объект.ТипЗаявки = Перечисления.ТипЗаявки.Услуги Тогда
		Попытка
			ОтправитьСообщение("Сформирована заявка на восстановление: ");
		Исключение
		КонецПопытки;
	ИначеЕсли НЕ Параметры.Ключ.Пустая() 
		и объект.ТипЗаявки <> ПроверкаТипЗаявки 
		и объект.ТипЗаявки = Перечисления.ТипЗаявки.Услуги Тогда
		Попытка                                                                                                                                    
			ОтправитьСообщение("Сформирована заявка на восстановление: ");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
Процедура ПроверкаДатыПоследнегоВзаимодействия()
	Запрос =Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаписиЗвонков.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ЗаписиЗвонков КАК ЗаписиЗвонков
	|ГДЕ
	|	ЗаписиЗвонков.Заявка = &Заявка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	запрос.УстановитьПараметр("Заявка", объект.Ссылка);
	
	ВЫборка = запрос.Выполнить().Выбрать();
	Если выборка.Количество() > 0 Тогда
		выборка.Следующий();	
		Если Объект.ДатаПоследнегоВзаимодействия < выборка.Дата Тогда
			Объект.ДатаПоследнегоВзаимодействия = выборка.Дата;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	//	Если дт_Нумерация.ГодИзменен(Объект.Ссылка, Объект.Дата) Тогда
	//		Объект.Номер = "";
	//	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзмененииСервер()

&НаКлиенте
Процедура НомерТелефонаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НайтиКлиента(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Товары

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеЗаполнения)
	
	ДанныеЗаполнения.МестоХранения = дт_АдресноеХранение.ПолучитьМестоХранения(ДанныеЗаполнения);
	
	дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(ДанныеЗаполнения, ПредопределенноеЗначение("Справочник.ТипыЦен.Рекомендованная"));
	
	ЗаполнитьПродажиОстатки(ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере 
Функция ПолучениеОстатковПоСкладам(Товар)
	/// Комлев 24/05/24 +++

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(РегистрНакопления1Остатки.КолвоОстаток, 0) КАК ОстаткиЕКБ
		|ПОМЕСТИТЬ ЕКБ
		|ИЗ
		|	РегистрНакопления.РегистрНакопления1.Остатки(, Склад.Код = ""000000008""
		|	И Товар = &Товар) КАК РегистрНакопления1Остатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РегистрНакопления1Остатки.КолвоОстаток, 0) КАК ОстаткиМСК
		|ПОМЕСТИТЬ МСК
		|ИЗ
		|	РегистрНакопления.РегистрНакопления1.Остатки(, Склад.Код = ""000000005""
		|	И Товар = &Товар) КАК РегистрНакопления1Остатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрНакопления1Остатки.КолвоОстаток КАК ОстаткиНН,
		|	ЕКБ.ОстаткиЕКБ,
		|	МСК.ОстаткиМСК
		|ИЗ
		|	РегистрНакопления.РегистрНакопления1.Остатки(, Склад.Код = ""000000002""
		|	И Товар = &Товар) КАК РегистрНакопления1Остатки,
		|	ЕКБ КАК ЕКБ,
		|	МСК КАК МСК";
		
	Запрос.УстановитьПараметр("Товар", Товар);
	ОстаткиСтруктура = Новый Структура();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОстаткиСтруктура.Вставить("НН", ВыборкаДетальныеЗаписи.ОстаткиНН);
		ОстаткиСтруктура.Вставить("МСК", ВыборкаДетальныеЗаписи.ОстаткиМСК);
		ОстаткиСтруктура.Вставить("ЕКБ", ВыборкаДетальныеЗаписи.ОстаткиЕКБ);
	КонецЦикла;
	
	Возврат ОстаткиСтруктура;
	/// Комлев 24/05/24 +++
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ДанныеЗаполнения = Новый Структура("МестоХранения,Цена,Номенклатура,КоличествоПродано,КоличествоОстаток,НомерСтроки");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Элементы.Товары.ТекущиеДанные);
	
	ДанныеЗаполнения.Вставить("Дата",			Объект.Дата);
	ДанныеЗаполнения.Вставить("Склад",			Объект.Склад);
	
	//ДанныеЗаполнения.Вставить("Партия",			Неопределено);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеЗаполнения, , "Номенклатура");
	
	ОбработкаИзмененияСтроки("Товары");
	элементы.Товары.ТекущиеДанные.Цена 		 = ВозвратЦены(элементы.Товары.ТекущиеДанные.Номенклатура);
	Элементы.Товары.ТекущиеДанные.Количество = 1;
	Элементы.Товары.ТекущиеДанные.сумма = элементы.Товары.ТекущиеДанные.Цена*Элементы.Товары.ТекущиеДанные.Количество;
	
	заполнитьСумму();
	
	
	/// Комлев 24/05/24 +++
	// Получаем остатки по складам.
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ОстаткиСтруктура = ПолучениеОстатковПоСкладам(ТекДанные.Номенклатура);
	ТекДанные.НН = ОстаткиСтруктура.НН;
	ТекДанные.МСК = ОстаткиСтруктура.МСК;
	ТекДанные.ЕКБ = ОстаткиСтруктура.ЕКБ;
	
	/// Комлев 24/05/24 ---
	
	/// Комлев 29/05/24 +++
	
	
		ТекДанные = Элементы.Товары.ТекущиеДанные;
	
		ПартииТовара.Параметры.УстановитьЗначениеПараметра("Товар", ТекДанные.Номенклатура);
	
		
	
	
	/// Комлев 29/05/24 ---
	
	Если Объект.Товары.Количество() <> 0 Тогда
		СписокНеЛиквид.Параметры.УстановитьЗначениеПараметра("Ссылка", ТекДанные.Номенклатура);
	Иначе
		СписокНеЛиквид.Параметры.УстановитьЗначениеПараметра("Ссылка", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ВозвратЦены(Товар)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.РекомендованаяЦена КАК РекомендованаяЦена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("ссылка", товар);
	
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.РекомендованаяЦена;
КонецФункции

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент) 
	Текстрока = элементы.Товары.ТекущиеДанные;
	КолВотовара = Текстрока.Количество;
	
	Если  КолВотовара > 1 Тогда
		Текстрока.Количество = 1;
		ТекСтрока = элементы.Товары.ТекущаяСтрока;
		ДобавитьСтрокиТоваров(КолВотовара,Текстрока);
	конецЕсли;
	ОбработкаИзмененияСтроки("Товары", "Количество");
	
КонецПроцедуры

Процедура ДобавитьСтрокиТоваров(КолВотовара,Текстрока) 
	
	НСтрока = 0;
	Пока НСтрока < КолВотовара-1 Цикл
		НоваяСтрока = Объект.Товары.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Объект.Товары.НайтиПоИдентификатору(Текстрока));
		Если Объект.НачислятьНДС Тогда
			СуммаНДС = НоваяСтрока.Цена * 0.2;	
			НоваяСтрока.Сумма = (НоваяСтрока.Цена + СуммаНДС) * НоваяСтрока.Количество;
			НоваяСтрока.СуммаНДС = СуммаНДС * НоваяСтрока.Количество;
		Иначе
			НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
			НоваяСтрока.СуммаНДС = 0;
		КонецЕсли;


		НСтрока = НСтрока + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары", "Цена");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары", "Сумма");
КонецПроцедуры


&НаКлиенте
Процедура НачислятьНДСПриИзменении(Элемент)
	
	///+ГомзМА 06.04.2023
	//УстановитьВидимостьИДоступностьЭлементов();
	//
	//заполнитьСумму();
	//Объект.СуммаДокументаНДС = Объект.СуммаДокумента / 1.2 * 0.2;
	//
	//ТекСтрока = Элементы.Товары.ТекущиеДанные;
	//Если Объект.НачислятьНДС Тогда
	//	Если ЗначениеЗаполнено(Объект.Товары) Тогда
	//		Для каждого Строка Из Объект.Товары Цикл
	//			СуммаНДС = Строка.Цена * 0.2;
	//			Строка.Сумма = (Строка.Цена + СуммаНДС) * Строка.Количество;
	//			Строка.СуммаНДС = СуммаНДС * Строка.Количество;
	//		КонецЦикла;
	//		заполнитьСумму();
	//		Объект.СуммаДокументаНДС = Объект.СуммаДокумента / 1.2 * 0.2;
	//	КонецЕсли;
	//Иначе
	//	Если ЗначениеЗаполнено(Объект.Товары) Тогда
	//		Для каждого Строка Из Объект.Товары Цикл
	//			СуммаНДС = Строка.Цена * 0;
	//			Строка.Сумма = (Строка.Цена + СуммаНДС) * Строка.Количество;
	//			Строка.СуммаНДС = СуммаНДС * Строка.Количество;
	//		КонецЦикла;
	//		заполнитьСумму();
	//		Объект.СуммаДокументаНДС = 0;
	//	КонецЕсли;
	//КонецЕсли;
	///-ГомзМА 06.04.2023
	
КонецПроцедуры



&НаКлиенте
Процедура ИностранныйНомерПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НомерТелефона) ИЛИ (НЕ ЗначениеЗаполнено(Объект.НомерТелефона) И ИностранныйНомер = Истина) Тогда
		Элементы.НомерТелефона.Маска = "";
		Элементы.ДополнительныйТелефон.Маска = "";
	Иначе	
		Элементы.НомерТелефона.Маска = "+7 ### ###-##-##";
		Элементы.ДополнительныйТелефон.Маска = "+7 ### ###-##-##";
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаКлиенте
Процедура ОткрытьНаСайте(Команда)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		Возврат
	КонецЕсли;
	
	Код = ПолучитьКодНоменклатуры(Элементы.Товары.ТекущиеДанные.Номенклатура); 
	
	ОбщДействия.ПоискКодаНаСтаромСайте(Код);
	
КонецПроцедуры

Функция ПолучитьАртикул(Номенклатура)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Код")
КонецФункции

&НаКлиенте
Процедура ОткрытьНаНовомСайте(Команда)
	/// Комлев 21/05/24 +++
	Если Элементы.Товары.ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Номенклатура) Тогда
		Возврат
	КонецЕсли;
	
	Артикул = ПолучитьАртикул(Элементы.Товары.ТекущиеДанные.Номенклатура);
	ОбщДействия.ПоискАртикулаНаНовомСайте(Артикул);
	/// Комлев 21/05/24 ---
КонецПроцедуры


&НаКлиенте
Процедура НайтиКлиента(Команда)
	ПоискКлиента();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиента()
	Клиенты = НайтиКлиентаНаСервере(Объект.НомерТелефона);
	
	Если Клиенты = Неопределено Тогда
		ПоказатьОповещениеПользователя("Не найдено");
		Оповещение = Новый ОписаниеОповещения("ДобавлениеКлиента", ЭтаФорма);
		ПоказатьВопрос(Оповещение,"Добавить нового клиента?", РежимДиалогаВопрос.ДаНет);
		//ВыполнитьОбработкуОповещения(Оповещение,); 
	ИначеЕсли Клиенты.Количество() > 1 Тогда
		
		ПоказатьОповещениеПользователя(СтрШаблон("Найдено: %1", Клиенты.Количество()));
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("НайтиКлиента_Завершение", ЭтаФорма);
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Ссылка", Клиенты));
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.Клиент);
		
		ОткрытьФорму("Справочник.Клиенты.Форма.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, ,, ОповещениеОЗакрытии);
		
	Иначе
		Если Объект.Клиент = Клиенты[0] Тогда
			ПоказатьОповещениеПользователя("Найдено", , "Обновление не требуется");
		Иначе
			Объект.Клиент = Клиенты[0];
			Объект.КлиентНаименование = Строка(Клиенты[0]);
			ПоказатьОповещениеПользователя("Найдено", , "Обновлено");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеКлиента(Ответ, ДополнительныеПараметры) Экспорт 
	//Ответ = ПоказатьВопрос("Добавить нового клиента?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда	 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	
	ПараметрыОткрытия.Вставить("НомерТелефона", Объект.НомерТелефона);
	ПараметрыОткрытия.Вставить("КлиентНаименование", Объект.КлиентНаименование);
	ПараметрыОткрытия.Вставить("Ответственный", Объект.Ответственный);
	
	ОповещениеОЗакрытииНового = Новый ОписаниеОповещения("НайтиКлиентанового_Завершение", ЭтаФорма);
	ОткрытьФорму("Справочник.Клиенты.Форма.ФормаЭлемента",ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, ,,ОповещениеОЗакрытииНового );
	
	
	//Клиенты = НайтиКлиентаНаСервере(Объект.НомерТелефона);
	//			Объект.Клиент = Клиенты[0];
	//		ПоказатьОповещениеПользователя("Найдено", , "Обновлено");
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция НайтиКлиентаНаСервере(Знач НомерТелефона)
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(НомерТелефона) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Клиенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	НЕ Клиенты.ПометкаУдаления
	|	И (Клиенты.Телефон = &НомерТелефона
	|			ИЛИ Клиенты.ДополнительныеКонтакты.Телефон = &НомерТелефона)";
	
	// С префиксом +7 и без разделителей
	//НомерТелефона = дт_МоиЗвонки.ПреобразоватьНомерТелефона(НомерТелефона);
	// без префикса
	//НомерТелефона = Прав(НомерТелефона, 10);
	
	Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НайтиКлиентанового_Завершение(П1, П2) Экспорт
	
	ПоискКлиента();
	
КонецПроцедуры


&НаКлиенте
Процедура НайтиКлиента_Завершение(П1, П2) Экспорт
	
	Если П1 <> Неопределено Тогда
		Объект.Клиент = П1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции



&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	
КонецПроцедуры // УправлениеФормой()


&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Товары.Отменено
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Товары");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Объект.Товары.Отменено", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	
	Элементы.Согласовал.Доступность = Пользователи.РолиДоступны("дт_СогласованиеЗаказовКлиентов");
	Элементы.ТекстовыйМенеджер.Доступность = Пользователи.РолиДоступны("ТекстовыйМенеджер");
	//Элементы.Канал.Доступность = Пользователи.РолиДоступны("ТекстовыйМенеджер");
	//Элементы.Контролёр.Доступность = Пользователи.РолиДоступны("Контролёр");
	//Элементы.Контролёр1.Доступность = Пользователи.РолиДоступны("Контролёр");
	//Элементы.Контролёр.Доступность = Пользователи.РолиДоступны("РОП");
	//Элементы.Контролёр1.Доступность = Пользователи.РолиДоступны("РОП");
	///+ГомзМА 15.08.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("Контролёр")) 	 ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) 	 ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава")) ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("РОП")) 			 Тогда
		Элементы.Контролёр.Доступность  = Истина;
		Элементы.Контролёр1.Доступность = Истина;
	Иначе
		Элементы.Контролёр.Доступность  = Ложь;
		Элементы.Контролёр1.Доступность = Ложь;
	КонецЕсли;
	///-ГомзМА 15.08.2023
	Элементы.СтатусКонтроля.Доступность = Пользователи.РолиДоступны("Контролёр");
КонецПроцедуры

&НаСервере
Процедура ОбновитьДобавленныеКолонки()
	
	дт_АдресноеХранение.ЗаполнитьМестаХранения(ЭтаФорма, "Склад", "Товары", "Номенклатура");
	
	ЗаполнитьПродажиОстатки(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПродажиОстатки(ДанныеЗаполнения, строка=неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.НомерСтроки КАК НомерСтроки,
	|	Т.Номенклатура,
	|	ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) КАК КоличествоПродано,
	|	ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 0) КАК СуммаОборот,
	|	ЕСТЬNULL(РегистрНакопления1Остатки.КолвоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	Т КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки(, Товар В
	|			(ВЫБРАТЬ
	|				Т.Номенклатура
	|			ИЗ
	|				Т)) КАК РегистрНакопления1Остатки
	|		ПО Т.Номенклатура = РегистрНакопления1Остатки.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(,,, Номенклатура В
	|			(ВЫБРАТЬ
	|				Т.Номенклатура
	|			ИЗ
	|				Т)) КАК ПродажиОбороты
	|		ПО ПродажиОбороты.Номенклатура = Т.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ЗаполнениеДокумента = ТипЗнч(ДанныеЗаполнения) = Тип("ДанныеФормыСтруктура");
	ЗаполнениеДокумента2 = ТипЗнч(ДанныеЗаполнения)= Тип("Структура");
	Если ЗаполнениеДокумента Тогда
		Товары = ДанныеЗаполнения.Товары.Выгрузить();
	Иначе
		
		Товары = Новый ТаблицаЗначений();
		Товары.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(4));
		Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ДанныеЗаполнения);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	
		РезультатЗапроса = Запрос.Выполнить();
	
		Выборка = РезультатЗапроса.Выбрать();
	
		Пока Выборка.Следующий() Цикл
		
			Если ЗаполнениеДокумента  Тогда
				СтрокаТовары = ДанныеЗаполнения.Товары[Выборка.НомерСтроки - 1];
			
				СтрокаТовары.КоличествоПродано = Выборка.КоличествоПродано;
			
				СтрокаТовары.КоличествоОстаток = Выборка.КоличествоОстаток;
			ИначеЕсли ЗаполнениеДокумента2 Тогда
				Попытка
					Строка.КоличествоПродано = Выборка.КоличествоПродано;
					Строка.КоличествоОстаток = Выборка.КоличествоОстаток;
				Исключение
					ДанныеЗаполнения.КоличествоПродано = Выборка.КоличествоПродано; 	
					ДанныеЗаполнения.КоличествоОстаток = Выборка.КоличествоОстаток;
				КонецПопытки;
			Иначе
			
				ДанныеЗаполнения.КоличествоПродано = Выборка.КоличествоПродано; 	
				ДанныеЗаполнения.КоличествоОстаток = Выборка.КоличествоОстаток;
			КонецЕсли;
		КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСтроки(ИмяТабличнойЧасти, Поле = Неопределено, ДанныеСтроки = Неопределено)
	
	ТекДанные = ?(ДанныеСтроки = Неопределено, Элементы[ИмяТабличнойЧасти].ТекущиеДанные, ДанныеСтроки);
	
	Если Поле = "Сумма" Тогда
		Если ТекДанные.Количество <> 0 Тогда
			///+ГомзМА 27.10.2023
			Если Объект.НачислятьНДС Тогда
				//ТекДанные.Цена = ТекДанные.Сумма
			Иначе
				///-ГомзМА 27.10.2023
				ТекДанные.Цена = ТекДанные.Сумма / ТекДанные.Количество;
			КонецЕсли;
		КонецЕсли;	
	Иначе
		//Если Объект.НачислятьНДС Тогда
		//	СуммаНДС = ТекДанные.Цена * 0.2;	
		//	ТекДанные.Сумма = (ТекДанные.Цена + СуммаНДС) * ТекДанные.Количество;
		//	ТекДанные.СуммаНДС = СуммаНДС * ТекДанные.Количество;
		//Иначе
			ТекДанные.Сумма = ТекДанные.Цена * ТекДанные.Количество;
			ТекДанные.СуммаНДС = 0;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаИзмененияСтроки()

&НаСервере
Процедура ЗаполнитьСписокСогласовантов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Элементы.Согласовал.СписокВыбора.Очистить();
	Элементы.Согласовал.СписокВыбора.Добавить(Справочники.Пользователи.ПустаяСсылка(), "Не согласовано");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.Представление
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Недействителен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Пользователи.РолиДоступны("дт_СогласованиеЗаказовКлиентов", ВыборкаДетальныеЗаписи.Ссылка, Ложь, Ложь) Тогда
			
			ФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаДетальныеЗаписи.Представление);
			Элементы.Согласовал.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ФИО);
			
		КонецЕсли;	
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКонтролёров()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Элементы.Контролёр.СписокВыбора.Очистить();
	Элементы.Контролёр.СписокВыбора.Добавить(Справочники.Пользователи.ПустаяСсылка(), "Без контроля");
	
	Элементы.Контролёр1.СписокВыбора.Очистить();
	Элементы.Контролёр1.СписокВыбора.Добавить(Справочники.Пользователи.ПустаяСсылка(), "Без контроля");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.Представление
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Недействителен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Пользователи.РолиДоступны("Контролёр", ВыборкаДетальныеЗаписи.Ссылка, Ложь, Ложь) Тогда
			
			ФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаДетальныеЗаписи.Представление);
			Элементы.Контролёр.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ФИО);
			Элементы.Контролёр1.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ФИО);
			
		КонецЕсли;	
	КонецЦикла;
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьКодНоменклатуры(Номенклатура)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Код");
КонецФункции

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	///+ГомзМА 06.04.2023
	Если Объект.НачислятьНДС Тогда
		Элементы.СуммаДокументаНДС.Видимость 						 = Истина;
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаНДС.Видимость = Истина;	
	Иначе
		Элементы.СуммаДокументаНДС.Видимость 						 = Ложь;
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаНДС.Видимость = Ложь;
	КонецЕсли;
	///-ГомзМА 06.04.2023
	
КонецПроцедуры


&НаСервере
Функция ПолучитьРандомнуюПартию(Товар)

	///+ГомзМА 12.12.2023
	Результат = Справочники.ИндКод.ПустаяСсылка();
	
	//Находим партии на К-складе
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИндНомер.индкод КАК индкод
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
	|ГДЕ
	|	ИндНомер.ЕстьФото
	|	И ИндНомер.индкод.Владелец = &Товар
	|	И ИндНомер.АвитоЧастник
	|	И РегистрНакопления1Остатки.КолвоОстаток > 0
	|	И (ИндНомер.Стеллаж.ГруппаМестХранения = &ГруппаМестХранения
	|			ИЛИ ИндНомер.Стеллаж = &КСклад)";
	
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("ГруппаМестХранения", Справочники.ГруппыМестХранения.НайтиПоКоду("000000008")); //К
	Запрос.УстановитьПараметр("КСклад", Справочники.Стеллаж.НайтиПоКоду("000001749")); //1_K СКЛАД
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		
		ГСЧ = Новый ГенераторСлучайныхЧисел;
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1, РезультатЗапроса.Количество());
		
		СтрокаТЗ = РезультатЗапроса[СлучайноеЧисло - 1];
		
		Результат = СтрокаТЗ.индкод;
	Иначе
		//Находим товар на остальных стеллажах
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИндНомер.индкод КАК индкод
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
		|		ПО ИндНомер.индкод = РегистрНакопления1Остатки.индкод
		|ГДЕ
		|	ИндНомер.ЕстьФото
		|	И ИндНомер.индкод.Владелец = &Товар
		|	И ИндНомер.АвитоЧастник
		|	И РегистрНакопления1Остатки.КолвоОстаток > 0";
	
		
		Запрос.УстановитьПараметр("Товар", Товар);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() > 0 Тогда
			
			ГСЧ = Новый ГенераторСлучайныхЧисел;
			СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1, РезультатЗапроса.Количество());
			
			СтрокаТЗ = РезультатЗапроса[СлучайноеЧисло - 1];
			
			Результат = СтрокаТЗ.индкод;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 12.12.2023

КонецФункции // ПолучитьРандомнуюПартию()



#КонецОбласти



&НаКлиенте
Процедура НарядНаСборку(Команда)  
	
	
	//Если Объект.ИтогоРекв = 0 Тогда
	//	ПосчитатьИтоги();
	//КонецЕсли;
	ТабДокумент = НарядНаСборкуСервер("Код");
	ТабДокумент.Показать();
КонецПроцедуры

&НаКлиенте
Процедура НарядНаСборкуПоМесту(Команда)
	//Если НЕ Объект.сох Тогда
	//	ПоказатьПредупреждение(, "Для выполнения команды необходимо провести документ");
	//	Возврат
	//КонецЕсли;
	
	//Если Объект.ИтогоРекв = 0 Тогда
	//	ПосчитатьИтоги();
	//КонецЕсли;
	ТабДокумент = НарядНаСборкуСервер("Место");
	ТабДокумент.Показать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакет(название)
	Возврат  Документы.ЗаказКлиента.ПолучитьМакет(название);
КонецФункции

&НаСервере
Функция НарядНаСборкуСервер(Сортировка = Неопределено)
	ЭтотОбъект.Записать();
	// Вставить содержимое обработчика.
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет       =   ПолучитьМакет("НарядНаСборку");
	ОбластьМакета = Макет.ПолучитьОбласть("шапка");
	ОбластьМакета.Параметры.заголовок = "Заявка  № "+Объект.Номер+"Р от " + Объект.Дата;
	ОбластьМакета.Параметры.покупатель = Объект.Клиент;
	ОбластьМакета.Параметры.Ответственный = Объект.Ответственный;
	ОбластьМакета.Параметры.Продажа = Продажа;
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(""); 
	Штрихкод.Ширина = 250; 
	Штрихкод.Высота = 250;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = объект.Номер;
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод,Истина);
	ФайлКартинки 			             = КартинкаШтрихКод;
	ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаШтрихКод;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// ++ obrv 24.07.18
	Запрос = Новый Запрос();
	Запрос.Текст = 
	//Волков ИО 29.02.24 ++ 
	//Было
	//"ВЫБРАТЬ
	//|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
	//|	ЗаказКлиентаТовары.Номенклатура КАК название,
	//|	ЗаказКлиентаТовары.Количество КАК Колво,
	//|	ЗаказКлиентаТовары.Цена КАК Цена,
	//|	ЗаказКлиентаТовары.Склад КАК Склад,
	//|	дт_МестаХраненияНоменклатурыСрезПоследних.МестоХранения КАК Место,
	//|	ЗаказКлиентаТовары.Номенклатура.Код КАК Код,
	//|	ЗаказКлиентаТовары.Номенклатура.Артикул КАК Артикул,
	//|	ЗаказКлиентаТовары.Номенклатура.НомерПроизводителя КАК нпроизв
	//|ИЗ
	//|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дт_МестаХраненияНоменклатуры.СрезПоследних КАК дт_МестаХраненияНоменклатурыСрезПоследних
	//|		ПО ЗаказКлиентаТовары.Номенклатура = дт_МестаХраненияНоменклатурыСрезПоследних.Номенклатура
	//|			И ЗаказКлиентаТовары.Склад = дт_МестаХраненияНоменклатурыСрезПоследних.Склад
	//|ГДЕ
	//|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	&ПолеСортировки";
	
	//Стало
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказКлиентаТовары.Номенклатура КАК название,
	|	ЗаказКлиентаТовары.Количество КАК Колво,
	|	ЗаказКлиентаТовары.Цена КАК Цена,
	|	ЗаказКлиентаТовары.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ИндНомер.Стеллаж <> ЗНАЧЕНИЕ(Справочник.стеллаж.пустаяссылка)
	|			ТОГДА ИндНомер.Стеллаж
	|		ИНАЧЕ дт_МестаХраненияНоменклатурыСрезПоследних.МестоХранения
	|	КОНЕЦ КАК Место,
	|	ЗаказКлиентаТовары.Номенклатура.Код КАК Код,
	|	ЗаказКлиентаТовары.Номенклатура.Артикул КАК Артикул,
	|	ЗаказКлиентаТовары.Номенклатура.НомерПроизводителя КАК нпроизв
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дт_МестаХраненияНоменклатуры.СрезПоследних КАК дт_МестаХраненияНоменклатурыСрезПоследних
	|		ПО ЗаказКлиентаТовары.Номенклатура = дт_МестаХраненияНоменклатурыСрезПоследних.Номенклатура
	|			И ЗаказКлиентаТовары.Склад = дт_МестаХраненияНоменклатурыСрезПоследних.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО ЗаказКлиентаТовары.Партия = ИндНомер.индкод
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	&ПолеСортировки";
	//Волков ИО 29.02.24 --	
	
	ПолеСортировки = ?(Сортировка = Неопределено, "НомерСтроки", Сортировка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеСортировки", ПолеСортировки);
	
	//Запрос.УстановитьПараметр("ТаблицаДокумента",  Объект.товары.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка",  Объект.ссылка);
	//Запрос.УстановитьПараметр("ДатаДокумента",  Объект.Дата);
	
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	// -- obrv 24.07.18
	
	
	ОбластьСтроки = Макет.ПолучитьОбласть("строка");
	НомерСтроки = 0;
	// ++ obrv 24.07.18
	//Для Каждого СтрокаТабличнойЧасти Из Объект.Таблица Цикл
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаДокумента Цикл
		// -- obrv 24.07.18
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.н = НомерСтроки;
		// ++ obrv 24.07.18
		//ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.укод; 
		//ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Товар.Артикул;
		//ОбластьСтроки.Параметры.название = СтрокаТабличнойЧасти.Товар.Наименование;
		//ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;
		//ОбластьСтроки.Параметры.место = СтрокаТабличнойЧасти.Товар.МестоНаСкладе2;
		//ОбластьСтроки.Параметры.нпроизв = СтрокаТабличнойЧасти.Товар.НомерПроизводителя;
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		// -- obrv 24.07.18
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	ОбластьСтроки = Макет.ПолучитьОбласть("footer");
	ОбластьСтроки.Параметры.Комментарий = Объект.Комментарий;
	ТабДокумент.Вывести(ОбластьСтроки);
	
	Возврат ТабДокумент;
	
КонецФункции // НарядНаСборкуСервер()

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.Склад = Объект.Склад;
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыНоменклатура;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьМестоХранения(Номенклатура, Склад)
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Результат = дт_АдресноеХранение.ПолучитьМестоХранения(Новый Структура("Дата,Склад,Номенклатура", Объект.Дата, Склад, Номенклатура));
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Элементы.товары.ТекущиеДанные.МестоХранения = ПолучитьМестоХранения(Элементы.товары.ТекущиеДанные.Номенклатура, 
	Элементы.товары.ТекущиеДанные.Склад);
	заполнитьСумму();
	СтрокаТЧ = элементы.Товары.Текущиеданные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("изменил/добавил " + СтрокаТЧ.НомерСтроки + " " + СтрокаТЧ.Номенклатура + " "+ СтрокаТЧ.Цена);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура заполнитьСумму()
	объект.СуммаДокумента = дт_ОбщегоНазначения.ИтоговаяСумма(Объект, "Товары", "Отменено");
КонецПроцедуры

#Область Звонки
&НаСервере
Функция ЗапуститьПолучениеЗвонковНаСервере()
	
	Если НЕ ПолучитьФункциональнуюОпцию("дт_ИспользоватьИнтеграциюМоиЗвонки") 
		ИЛИ НЕ  ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;	
	
	Если НЕ ПараметрыДлительнойОперации.Идентификатор = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ПараметрыДлительнойОперации.Идентификатор);
	КонецЕсли;
	
	
	ПараметрыДлительнойОперации.Идентификатор   = Неопределено;
	ПараметрыДлительнойОперации.Завершено       = Истина;
	ПараметрыДлительнойОперации.АдресРезультата = Неопределено;
	ПараметрыДлительнойОперации.Ошибка          = Неопределено;
	
	//ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Ссылка", Объект.Ссылка);
	
	НаименованиеМетода = НСтр("ru = 'Заполнение списка звонков'");
	
	Попытка
		
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"дт_МоиЗвонки.ЗапуститьПолучениеТаблицыЗвонковПоЗаявке",
		ПараметрыМетода,
		НаименованиеМетода);
		
		
	Исключение
		
		ПараметрыДлительнойОперации.Ошибка = ОписаниеОшибки();
		
		Возврат Ложь;
	КонецПопытки;
	
	
	ПараметрыДлительнойОперации.Идентификатор   = РезультатВыполнения.ИдентификаторЗадания;
	ПараметрыДлительнойОперации.Завершено       = РезультатВыполнения.ЗаданиеВыполнено;
	ПараметрыДлительнойОперации.АдресРезультата = РезультатВыполнения.АдресХранилища;
	
	Возврат РезультатВыполнения.ЗаданиеВыполнено;
	
КонецФункции


&НаКлиенте
Процедура ЗагрузитьПолученныеЗвонки()
	
	ЗагрузитьПолученныеЗвонкиСервер();
	ПоказатьОповещениеПользователя("Список звонков получен");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПолученныеЗвонкиСервер()
	
	ТаблицаЗвонки.Очистить();
	
	Если ПараметрыДлительнойОперации.АдресРезультата = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(ПараметрыДлительнойОперации.АдресРезультата);
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		ТаблицаРезультат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполнения, "ТаблицаРезультат");
		Если ТаблицаРезультат <> Неопределено Тогда
			
			Сч = 0;
			ТаблицаЗвонки.Загрузить(ТаблицаРезультат);
			Пока (Сч < ТаблицаЗвонки.Количество()) Цикл 
				Строка = ТаблицаЗвонки.Получить(Сч);
				Если Строка.Дата < НачалоДня(Объект.Дата)-(3600*24*2) или Строка.Дата > объект.ДатаИзмененияСостояния + (24*3600*5) тогда
					ТаблицаЗвонки.Удалить(Сч);
					
					
				Иначе
					Сч = Сч+1;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗвонки.Сортировать("Дата Убыв");
		КонецЕсли;
		
	КонецЕсли;
	
	//	Если НЕ ПустаяСтрока(РезультатВыполнения.ТекстОшибки) Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатВыполнения.ТекстОшибки);
	//	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрослушатьЗаписьЗвонка(Команда)
	Если Элементы.Звонки.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Структура();
		Кэш.Вставить("ФайлыЗвонков", Новый Соответствие());
	КонецЕсли;
	
	СсылкаНаФайл = Элементы.Звонки.ТекущиеДанные.URL;
	СсылкаНаФайлЛокальная = Кэш.ФайлыЗвонков.Получить(СсылкаНаФайл);
	
	Если СсылкаНаФайлЛокальная = Неопределено Тогда
		
		СсылкаНаФайлЛокальная = дт_МоиЗвонкиКлиент.ПолучитьФайлЗаписи(СсылкаНаФайл);
		Если СсылкаНаФайлЛокальная = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		Кэш.ФайлыЗвонков.Вставить(СсылкаНаФайл, СсылкаНаФайлЛокальная);
		
	КонецЕсли;
	дт_МоиЗвонкиКлиент.ПрослушатьФайл(СсылкаНаФайлЛокальная);	  
КонецПроцедуры


&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаЗвонки Тогда
		
		ЗаданиеВыполнялосьРанее = ЗначениеЗаполнено(ПараметрыДлительнойОперации.Идентификатор);
		
		Если ЗаданиеВыполнялосьРанее  Тогда
			Возврат
		КонецЕсли;
		
		ЗаданиеВыполнено = ЗапуститьПолучениеЗвонковНаСервере();
		
		Если НЕ ЗаданиеВыполнено Тогда
			ПоказатьОповещениеПользователя("Получение списка звонков...");
			ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеДлительнойОперации", 0.1, Истина);
		Иначе
			
			ЗагрузитьПолученныеЗвонки();
			
		КонецЕсли;
		//	ЗаполнитьЗвонки();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ОжиданиеДлительнойОперации()
	
	// Обновим статус
	Состояние = СостояниеФоновогоЗадания();
	Если Не ПустаяСтрока(Состояние.Ошибка) Тогда
		// Завершено с ошибкой, сообщим и вернемся на первую страницу.
		//Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборРегионовЗагрузки;
		//Элементы.АвторизацияНаСайтеПоддержкиПользователей.Видимость = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Состояние.Ошибка);
		Возврат;
		
	ИначеЕсли Состояние.Завершено Тогда
		//ПодтверждениеЗакрытияФормы = Истина;
		ЗагрузитьПолученныеЗвонки();
		
		Возврат;
		
	КонецЕсли;
	
	// Процесс продолжается
	Если ТипЗнч(Состояние.Прогресс) = Тип("Структура") Тогда
		
		ТекстПрогресса = Состояние.Прогресс.Текст;
		ИндикаторПрогресса = Состояние.Прогресс.Процент;
		
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеДлительнойОперации", ПараметрыДлительнойОперации.ИнтервалОжидания, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьФоновоеЗадание()
	
	Если ПараметрыДлительнойОперации.Идентификатор <> Неопределено Тогда
		
		ПрерватьФоновоеЗаданиеСервер(ПараметрыДлительнойОперации.Идентификатор);
		ПараметрыДлительнойОперации.Идентификатор = Неопределено;
		
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ОжиданиеДлительнойОперации");
	
	//УстановитьВидимость(Ложь);
	
КонецПроцедуры // ПрерватьФоновоеЗадание()


&НаСервереБезКонтекста
Процедура ПрерватьФоновоеЗаданиеСервер(Знач Идентификатор)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(Идентификатор);
	
КонецПроцедуры

&НаСервере
Функция СостояниеФоновогоЗадания()
	Результат = Новый Структура("Прогресс, Завершено, Ошибка, ПодробноеПредставлениеОшибки");
	
	Результат.Ошибка = "";
	Если ПараметрыДлительнойОперации.Идентификатор = Неопределено Тогда
		Результат.Завершено = Истина;
		Результат.Прогресс  = Неопределено;
		Результат.ПодробноеПредставлениеОшибки = ПараметрыДлительнойОперации.ПодробноеПредставлениеОшибки;
		Результат.Ошибка                       = ПараметрыДлительнойОперации.Ошибка;
	Иначе
		Попытка
			Результат.Завершено = ДлительныеОперации.ЗаданиеВыполнено(ПараметрыДлительнойОперации.Идентификатор);
			Результат.Прогресс  = ДлительныеОперации.ПрочитатьПрогресс(ПараметрыДлительнойОперации.Идентификатор);
		Исключение
			Информация = ИнформацияОбОшибке();
			Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Информация);
			Результат.Ошибка                       = КраткоеПредставлениеОшибки(Информация);
		КонецПопытки
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


#КонецОбласти

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ХранилищеОписания = Новый ХранилищеЗначения(Описание);
	
	WTPanelПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ДопустимыеСимволы = "0123456789";
	
	
	Попытка
		КОбъект = Новый COMОбъект("htmlfile");
		ДанныеБуфера = КОбъект.ParentWindow.ClipboardData.Getdata("Text");
	Исключение
		ДанныеБуфера = "";
	КонецПопытки;
	ЛишниеСимволы = СтрСоединить(СтрРазделить(ДанныеБуфера,ДопустимыеСимволы));
	
	ИтоговаяСтрока = СтрСоединить(СтрРазделить(ДанныеБуфера,ЛишниеСимволы));
	
	Если СтрДлина(ИтоговаяСтрока) = 10 Тогда
		КОбъект.ParentWindow.ClipboardData.Setdata("Text", "");
		МассивСтрок = Новый Массив;
		Для Сч = 1 По СтрДлина(ИтоговаяСтрока) Цикл
			МассивСтрок.Добавить(Сред(ИтоговаяСтрока, Сч, 1));
		КонецЦикла;
		
		МассивСтрок[0] = "+7 "+МассивСтрок[0];
		//МассивСтрок[1] = " "+МассивСтрок[1];
		МассивСтрок[3] = " "+МассивСтрок[3];
		МассивСтрок[6] = "-"+МассивСтрок[6];
		МассивСтрок[8] = "-"+МассивСтрок[8];
		НомерКлиента = СтрСоединить(МассивСтрок,"");
		Объект.НомерТелефона = НомерКлиента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере  
Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт
	ДобавлениеЗапчасти(Значение);
КонецПроцедуры


&НаКлиенте
Процедура Добавить(Команда)
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбора", ЭтаФорма,"ПодборРеализации");
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", ПараметрыОткрытия, ЭтаФорма,,,,ОбработкаВыбора);
	
КонецПроцедуры

&НаСервере
Процедура  ДобавлениеЗапчасти(ДанныеЗаполнения)
	
	Строка = Объект.Товары.Добавить();
	Строка.номенклатура = ДанныеЗаполнения.Номенклатура;
	Строка.местоХранения = ДанныеЗаполнения.МестоХранения;
	Строка.Склад = Объект.Склад;
	Строка.Цена = ДанныеЗаполнения.РекЦена;
	Строка.КоличествоПродано = ДанныеЗаполнения.Продано;
	Строка.КоличествоОстаток = ДанныеЗаполнения.Остаток; 
	Строка.партия = получитПартию(ДанныеЗаполнения.укод);
	
	Данныезаполнения.Вставить("Склад",Объект.склад);
	
	//ЗаполнитьПродажиОстатки(ДанныеЗаполнения,строка);
	//дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(ДанныеЗаполнения, ПредопределенноеЗначение("Справочник.ТипыЦен.Рекомендованная"));
КонецПроцедуры 

Функция получитПартию(укод)
	Возврат Справочники.ИндКод.НайтиПоНаименованию(укод);
КонецФункции


&НаКлиенте
Процедура ЗаполнениеЗапчасти()
	ДанныеЗаполнения = Новый Структура("МестоХранения,Цена,Номенклатура,КоличествоПродано,КоличествоОстаток,НомерСтроки");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Элементы.Товары.ТекущиеДанные);
	
	ДанныеЗаполнения.Вставить("Дата",			Объект.Дата);
	ДанныеЗаполнения.Вставить("Склад",			Объект.Склад);
	//ДанныеЗаполнения.Вставить("Партия",			Неопределено);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеЗаполнения, , "Номенклатура");
	
	ОбработкаИзмененияСтроки("Товары");
КонецПроцедуры


Процедура ЗаписьЛога(Событие)
	
	ТекстЛога =  "----------------------------------------------------" + Символы.ПС + ТекущаяДата() + Символы.ПС + Пользователи.ТекущийПользователь() + Символы.ПС +" "+ Событие + Символы.ПС ;
	
	Запись = РегистрыСведений.ЛогЗаявок.СоздатьМенеджерЗаписи();
	Запись.Заявка		 = Объект.Ссылка;
	Запись.Дата 		 = ТекущаяДата();
	Запись.Автор	     = Пользователи.ТекущийПользователь();
	Запись.Текст         = ТекстЛога;
	Запись.Записать();
	ВыводЛога();
	
КонецПроцедуры

Процедура ВыводЛога()
	НаборЛогов = "";
	Запрос = Новый запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ЛогЗаявок.Текст КАК Текст
	|ИЗ
	|	РегистрСведений.ЛогЗаявок КАК ЛогЗаявок
	|ГДЕ
	|	ЛогЗаявок.Заявка = &Заявка";
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	
	Логи = Запрос.Выполнить().Выбрать();
	
	Пока Логи.Следующий() Цикл
		НаборЛогов = НаборЛогов + Логи.Текст;
	КонецЦикла;
	Лог = НаборЛогов;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Сменил ответственного на " + Объект.Ответственный );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Параметры.Ключ.Пустая() Тогда
		Нов = Истина;
	КонецЕсли; 
	
		
	Если ПроверкаСборщика() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОСборщике",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		,
		РежимДиалогаВопрос.ДаНетОтмена,
		0, 
		КодВозвратаДиалога.Да, // (необ.) кнопка по умолчанию
		"Данная заявка уже в обработке сборщиком " + объект.ОтветственныйЗаОбработку + ". Вы хотите продолжить заполнение текущей?" // (необ.) заголовок
		); 
	КонецЕсли; 
	
	СостояниеПриИзмененииСервер();
	

	
КонецПроцедуры 

Процедура оповещениеВТелеге()
	Если объект.СтатусОбработки <> СтатусДляПроверки и Объект.СтатусОбработки = Перечисления.СтатусыОбработкиЗаявок.ВОбработке Тогда
		//Telegram_Сервер.ОтправитьСообщениеПользователю("-1001905387489","Заявка " + объект.Номер + " отправлена в обработку.")	
	КонецЕсли;                                                                                                                       
КонецПроцедуры
	

Функция ПроверкаСборщика()
	Если Объект.ОтветственныйЗаОбработку <> Справочники.Пользователи.ПустаяСсылка() и объект.СтатусОбработки = Перечисления.СтатусыОбработкиЗаявок.ВРаботе Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ПослеЗакрытияВопросаОСборщике(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		отказ = истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если Нов тогда
		ТекстЛога = "Создал заявку " + объект.номер;
		ЗаписьЛога(ТекстЛога);
		Нов = Ложь;
		ОткрытьВремяЗКнов();
	КонецЕсли;
	оповещениеВТелеге();
		
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаявкиПриИзменении(Элемент)
	ТипЗаявкиПриИзмененииСерв();
	
КонецПроцедуры

Процедура ОткрытьВремяЗКнов()

	НаборЗаписей = РегистрыСведений.ВремяВыполненияЗаявок.СоздатьМенеджерЗаписи();

	НаборЗаписей.ЗаявкаПродажа = Объект.Ссылка ;
	НаборЗаписей.Период        = ТекущаяДата();
	НаборЗаписей.НачалоЗамера  = ТекущаяДата();
	НаборЗаписей.КонецЗамера   = ТекущаяДата();
	НаборЗаписей.Ответственный = Справочники.Пользователи.ПустаяСсылка();
	НаборЗаписей.Статус = Справочники.СтатусыWT.НайтиПоКоду("000000009");
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ТипЗаявкиПриИзмененииСерв()
	Если объект.ТипЗаявки = Перечисления.ТипЗаявки.Продажа Тогда
		
		Элементы.Проект.Видимость = Ложь;
		Элементы.Склад.Видимость = Истина;
	Иначе
		Элементы.Проект.Видимость = Истина;
		Элементы.Склад.Видимость = Ложь;
		
	КонецЕсли;
	
	///+ГомзМА 21.08.2023
	Если Объект.ТипЗаявки = Перечисления.ТипЗаявки.Продажа Тогда
		Если Объект.Склад <> Справочники.Склады.ПустаяСсылка() Тогда
			СкладПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	///-ГомзМА 21.08.2023
	
КонецПроцедуры


&НаСервере
Процедура ОтправитьСообщение(Текст)
	
	Запрос =Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	СотрудникиКонтактнаяИнформация.Ссылка.ОтправлятьСМС КАК ОтправлятьСМС
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Ссылка.пользователь = &Пользователь
	|	И СотрудникиКонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный);
	//Запрос.УстановитьПараметр("Пользователь",объект.Ответственный);
	Запрос.УстановитьПараметр("Пользователь",Справочники.Пользователи.НайтиПоНаименованию("Грязев Илья Константинович"));
	Телефон = Запрос.Выполнить().Выбрать();
	Телефон.Следующий();
	
	НомераПреобразованные = дт_МоиЗвонки.ПреобразоватьНомерТелефона(Телефон.НомерТелефона);
	
	Если ТипЗнч(НомераПреобразованные) = Тип("Массив") Тогда
		НомерТелефона = НомераПреобразованные[0]; 
	Иначе
		НомерТелефона = НомераПреобразованные;
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Если Телефон.ОтправлятьСМС Тогда
		дт_УведомленияСМС.ОтправитьСМС(НомерТелефона, Текст +объект.Номер, Константы.дт_SMS_Подпись.Получить() );	
	КонецЕсли;			   
КонецПроцедуры

&НаКлиенте
Процедура Товары1ПриАктивизацииСтроки(Элемент)
	Если Элементы.Товары1.ТекущиеДанные <> Неопределено Тогда
		ОбновитьОтборПартий();
	КонецЕсли;
КонецПроцедуры      


&НаКлиенте
Процедура ОбновитьОтборПартий()
	ТекДанные = Элементы.Товары1.ТекущиеДанные;
	
	//Номенклатура = ?(ТекДанные = Неопределено, Неопределено, ТекДанные.Номенклатура);
	
	Партии.Параметры.УстановитьЗначениеПараметра("Товар", ТекДанные.Номенклатура);
	Партии.Параметры.УстановитьЗначениеПараметра("индкод", ТекДанные.Партия);
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриИзменении(Элемент)
	
	СтараяЗаявка = ПроверкаЗаявки(); 
	Если СтараяЗаявка <> Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",
		ЭтотОбъект,СтараяЗаявка);	
		
		ПоказатьВопрос(Оповещение,
		"Нажмите Да чтобы продолжить. Нажмите Нет чтобы открыть существующую заявку.",
		РежимДиалогаВопрос.ДаНетОтмена,
		0, 
		КодВозвратаДиалога.Да, // (необ.) кнопка по умолчанию
		"По данному номеру уже создана заявка. Вы хотите продолжить заполнение текущей?" // (необ.) заголовок
		); 
	КонецЕсли
	
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПредупреждениеПервомуМенеджеру(СтараяЗаявка)
	/// Комлев 24/05/24 +++
	Если НЕ ЗначениеЗаполнено(СтараяЗаявка.Ответственный) Тогда
		Возврат;
	КонецЕсли;
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	НапоминаниеПользователю = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
	НапоминаниеПользователю.Пользователь = СтараяЗаявка.Ответственный;
	НапоминаниеПользователю.ВремяСобытия = ТекущаяДата() + 20;
	НапоминаниеПользователю.СрокНапоминания = ТекущаяДата() + 25;
	НапоминаниеПользователю.Описание = "" + ТекущийПользователь.ПолноеИмя + " создал заявку с номером клиента " + СтараяЗаявка.НомерТелефона;
	НапоминаниеПользователю.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
	НапоминаниеПользователю.ИнтервалВремениНапоминания = 120;
	НапоминаниеПользователю.Записать();
	/// Комлев 24/05/24 ---
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		/// Комлев 24/05/24 +++
		ПоказатьПредупреждениеПервомуМенеджеру(Параметры);
		/// Комлев 24/05/24 ---
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ПараметрыФормы = Новый Структура("Ключ", Параметры);
		ОткрытьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента", ПараметрыФормы);
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
функция ПроверкаЗаявки()
	Запрос  = новый запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	(ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Ожидание)
	|			ИЛИ ЗаказКлиента.Состояние = ЗНАЧЕНИЕ(Перечисление.дт_СостоянияЗаказовКлиента.Думает))
	|	И ЗаказКлиента.НомерТелефона = &НомерТелефона
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказКлиента.Дата УБЫВ";
	Запрос.УстановитьПараметр("НомерТелефона", объект.НомерТелефона);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат Выборка.ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
Конецфункции

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	///+ГомзМА 21.08.2023
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Склад = Объект.Склад;
	КонецЦикла;
	///-ГомзМА 21.08.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПартияНачалоВыбора(Элемент, "Товары", ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры




&НаКлиенте
Процедура ПартияНачалоВыбора(Элемент, ИмяТаблицы, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Владелец", ТекДанные.Номенклатура);
	
	ПараметрыОткрытия = Новый Структура();
	//ПараметрыОткрытия.Вставить("ДатаОстатков", ТекущаяДата());
	//ПараметрыОткрытия.Вставить("Склад", ТекДанные.Склад);
	//ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекДанные.Партия);
	ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
	
	
	ОткрытьФорму("Справочник.ИндКод.ФормаВыбора", ПараметрыОткрытия, Элемент, ЭтаФорма.УникальныйИдентификатор); 
	
КонецПроцедуры // ПартияНачалоВыбора()

&НаСервере
Процедура ЗаполнитьИзФайлаНаСервере(артикулДетали)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.РекомендованаяЦена КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул";
	
	Запрос.УстановитьПараметр("Артикул",артикулДетали);
	ВыборкаДеталей = Запрос.Выполнить().Выбрать();

	Если ВыборкаДеталей.Количество() = 0 Тогда
		Сообщить("Товар с артикулом " + артикулДетали + " не найден!" );
	КонецЕсли;  
	
	Если ВыборкаДеталей.Количество() > 1 Тогда
		Сообщить("Товар с артикулом " + артикулДетали + " найден в количестве " + ВыборкаДеталей.Количество() + " шт." );
	КонецЕсли;
	
	Пока ВыборкаДеталей.Следующий() Цикл		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.склад = Объект.Склад;
		НоваяСтрока.Номенклатура = ВыборкаДеталей.Номенклатура;
		НоваяСтрока.Цена = ВыборкаДеталей.Цена;
		Если Объект.НачислятьНДС Тогда
			СуммаНДС = НоваяСтрока.Цена * 0.2;	
			НоваяСтрока.Сумма = (НоваяСтрока.Цена + СуммаНДС) * НоваяСтрока.Количество;
			НоваяСтрока.СуммаНДС = СуммаНДС * НоваяСтрока.Количество;
		Иначе
			НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
			НоваяСтрока.СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры 

	

&НаКлиенте
Процедура ЗаполнитьИзФайла(Команда)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выбор файла";
	Диалог.Фильтр = "Excel файлы(*.xls;*.xlsx)|*.xls;*.xlsx";
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Ложь; 
	//Диалог.ПолноеИмяФайла = ПутьКФайлу;
	
	Если Диалог.Выбрать() Тогда
		Попытка
			Эксель = Новый COMОбъект("Excel.Application");
			Эксель.DisplayAlerts = 0;
			Эксель.Visible = 0;
		Исключение
			Сообщить(ОписаниеОшибки()); 
			Возврат;
		КонецПопытки;
		
		ЭксельКнига = Эксель.Workbooks.Open(Диалог.ПолноеИмяФайла);	
		КоличествоСтраниц = ЭксельКнига.Sheets.Count;
		
		// Перебираем все листы
		Для НомерЛиста = 1 По КоличествоСтраниц Цикл 
			Лист = ЭксельКнига.Sheets(НомерЛиста);
			КоличествоСтрок = Лист.Cells(1, 1).SpecialCells(11).Row;
			КоличествоКолонок = Лист.Cells(1, 1).SpecialCells(11).Column;
			
			// Перебираем строки
			Для НомерСтроки = 2 По КоличествоСтрок Цикл 
				артикулДетали = Строка(Лист.Cells(НомерСтроки, 1).Text); 
				артикулДетали = СтрЗаменить(артикулДетали," ","");
				ЗаполнитьИзФайлаНаСервере(артикулДетали);
				
			КонецЦикла;	
		КонецЦикла;
		
		Эксель.Workbooks.Close();
		Эксель.Application.Quit();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура видQRкод(Команда)
	Если элементы.QRкод.Видимость = Истина Тогда 
		Элементы.ВидQRкод.Заголовок = "Показать QR-код";
		элементы.QRкод.Видимость = Ложь;	
	Иначе 
		Элементы.ВидQRкод.Заголовок = "Скрыть QR-код";
		элементы.QRкод.Видимость = Истина;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	/// Комлев 29/05/24 +++
	Если Объект.Товары.Количество() <> 0 Тогда
		ТекДанные = Элементы.Товары.ТекущиеДанные;
	
		ПартииТовара.Параметры.УстановитьЗначениеПараметра("Товар", ТекДанные.Номенклатура);
		//ПартииТовара.Параметры.УстановитьЗначениеПараметра("индкод", ТекДанные.Номенклатура.ин);
	Иначе
		ПартииТовара.Параметры.УстановитьЗначениеПараметра("Товар", Неопределено);
	КонецЕсли;
	/// Комлев 29/05/24 ---	
	// ++МазинЕС 07-06-24
	Если Объект.Товары.Количество() <> 0 Тогда
		ТекДанные = Элементы.Товары.ТекущиеДанные;
		СписокНеЛиквид.Параметры.УстановитьЗначениеПараметра("Ссылка", ТекДанные.Номенклатура);
	Иначе
		СписокНеЛиквид.Параметры.УстановитьЗначениеПараметра("Ссылка", Неопределено);
	КонецЕсли;
	// --МазинЕС 07-06-24
		
КонецПроцедуры




&НаСервере
Процедура УстановитьПараметрыСписка()
	
	СкладОтбор = Объект.Склад;
	
	Если НЕ ЗначениеЗаполнено(СкладОтбор) Тогда
		СкладОтбор = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновнойСклад();
	КонецЕсли;
	
	
	ПартииТовара.Параметры.УстановитьЗначениеПараметра("Склад", СкладОтбор);
	
	ПартииТовара.Параметры.УстановитьЗначениеПараметра("ЕстьОтборПоСкладу", ЗначениеЗаполнено(Объект.Склад));
	ПартииТовара.Параметры.УстановитьЗначениеПараметра("Склад", СкладОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДетальНаСайте(Команда)
	ИндКод = Элементы.ПартииТовара.ТекущиеДанные.индкод;
	ОбщДействия.ОткрытьДетальНаСайте(ИндКод);
КонецПроцедуры

&НаКлиенте
Процедура WTPanelАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	WTPanelАвтоПодборНаСервере();
КонецПроцедуры

&НаСервере
Процедура WTPanelАвтоПодборНаСервере()
	//TODO: Вставить содержимое обработчика
КонецПроцедуры

 

 



