#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс





#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТоварыИсточник = Неопределено;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПродажаЗапчастей") Тогда
		
		//ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ПродажаЗапчастейТаблица.Отменено) КАК ЕстьВозврат
			|ПОМЕСТИТЬ втПризнакВозврата
			|ИЗ
			|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
			|ГДЕ
			|	ПродажаЗапчастейТаблица.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Док.Клиент,
			|	Док.Комментарий,
			|	Док.Проект,
			|	Док.Склад,
			|	Док.Ссылка КАК Основание,
			|	втПризнакВозврата.ЕстьВозврат
			|ИЗ
			|	Документ.ПродажаЗапчастей КАК Док
			|		ЛЕВОЕ СОЕДИНЕНИЕ втПризнакВозврата КАК втПризнакВозврата
			|		ПО ИСТИНА
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Товар КАК Номенклатура,
			|	Товары.Партия КАК Партия,
			|	Товары.машина КАК Автомобиль,
			|	Товары.Количество,
			|	Товары.Цена,
			|	Товары.Сумма,
			|	Товары.укод КАК ПартияНомер
			|ИЗ
			|	Документ.ПродажаЗапчастей.Таблица КАК Товары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПризнакВозврата КАК втПризнакВозврата
			|		ПО Товары.Отменено = втПризнакВозврата.ЕстьВозврат
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[1].Выгрузить()[0]);
		
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект, Шапка);
		
		ВидОперации = ?(Шапка.ЕстьВозврат, 
			Перечисления.ВидыОперацийЗаявокНаСборку.ВозвратОтКлиента, 
			Перечисления.ВидыОперацийЗаявокНаСборку.СборкаСоСклада 
		);
		
		ТоварыИсточник  = РезультатЗапроса[2].Выгрузить();
		
		Для каждого СтрокаТаблицы Из ТоварыИсточник Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Партия)
				И ЗначениеЗаполнено(СтрокаТаблицы.ПартияНомер) Тогда
				
				СтрокаТаблицы.Партия = Справочники.ИндКод.ПолучитьПартиюПоКоду(СтрокаТаблицы.ПартияНомер, 
					СтрокаТаблицы.Номенклатура, 
					Неопределено
				);
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПредварительныйСчет") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Клиент,
			|	Док.Комментарий,
			|	Док.Проект,
			|	Док.Ссылка КАК Основание
			|ИЗ
			|	Документ.ПредварительныйСчет КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Товар КАК Номенклатура,
			|	Товары.машина КАК Автомобиль,
			|	Товары.Количество,
			|	Товары.Цена,
			|	Товары.Сумма
			|ИЗ
			|	Документ.ПредварительныйСчет.Таблица КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[0].Выгрузить()[0]);
		
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект, Шапка);
		
		ВидОперации = Перечисления.ВидыОперацийЗаявокНаСборку.СборкаСоСклада;
		
		ТоварыИсточник  = РезультатЗапроса[1].Выгрузить();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Клиент,
			|	Док.Комментарий,
			|	Док.Проект,
			|	Док.Склад,
			|	Док.Ссылка КАК Основание
			|ИЗ
			|	Документ.ЗаказНаряд КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Автомобиль КАК Автомобиль,
			|	Товары.Партия КАК Партия,
			|	Товары.Количество
			|ИЗ
			|	Документ.ЗаказНаряд.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[0].Выгрузить()[0]);
		
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект, Шапка);
		
		ВидОперации = Перечисления.ВидыОперацийЗаявокНаСборку.СборкаСоСклада;
		
		ТоварыИсточник = РезультатЗапроса[1].Выгрузить();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Комментарий,
			|	Док.Проект,
			|	Док.СкладОтправитель КАК Склад,
			|	Док.Ссылка КАК Основание
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Товар КАК Номенклатура,
			|	Товары.Автомобиль КАК Автомобиль,
			|	Товары.Партия КАК Партия,
			|	Товары.Количество
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[0].Выгрузить()[0]);
		
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект, Шапка);
		
		ВидОперации = Перечисления.ВидыОперацийЗаявокНаСборку.СборкаСоСклада;
		
		ТоварыИсточник = РезультатЗапроса[1].Выгрузить();
		
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеЗапчастей") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.Комментарий КАК Комментарий,
			|	Док.Проект КАК Проект,
			|	Док.Склад КАК Склад,
			|	Док.Ссылка КАК Основание,
			|	Док.Машина КАК Машина,
			|	Док.Ссылка КАК Ссылка,
			|	Док.СкладТранзитный КАК СкладТранзитный
			|ПОМЕСТИТЬ втШапка
			|ИЗ
			|	Документ.ПоступлениеЗапчастей КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Ссылка КАК Ссылка,
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Товар КАК Номенклатура,
			|	Товары.Колво КАК Количество,
			|	Товары.Партия КАК Партия,
			|	Товары.Автомобиль КАК Автомобиль,
			|	Товары.Комментарий КАК Комментарий
			|ПОМЕСТИТЬ втТовары
			|ИЗ
			|	Документ.ПоступлениеЗапчастей.Таблица КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА Товары.Автомобиль = ЗНАЧЕНИЕ(Справочник.Машины.ПустаяСсылка)
			|			ТОГДА Шапка.Машина
			|		ИНАЧЕ Товары.Автомобиль
			|	КОНЕЦ КАК Автомобиль,
			|	Товары.Количество КАК Количество,
			|	Товары.Партия КАК Партия,
			|	Шапка.СкладТранзитный КАК СкладТранзитный,
			|	Товары.Комментарий КАК Комментарий
			|ПОМЕСТИТЬ втТоварыИт
			|ИЗ
			|	втТовары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ втШапка КАК Шапка
			|		ПО Товары.Ссылка = Шапка.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СкладТранзитный,
			|	Номенклатура,
			|	Автомобиль,
			|	Партия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втШапка.Комментарий КАК Комментарий,
			|	втШапка.Проект КАК Проект,
			|	втШапка.Склад КАК Склад,
			|	втШапка.Основание КАК Основание
			|ИЗ
			|	втШапка КАК втШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втТоварыИт.НомерСтроки КАК НомерСтроки,
			|	втТоварыИт.Номенклатура КАК Номенклатура,
			|	втТоварыИт.Автомобиль КАК Автомобиль,
			|	ВЫБОР
			|		КОГДА втТоварыИт.Количество > Остатки.КолвоОстаток
			|			ТОГДА Остатки.КолвоОстаток
			|		ИНАЧЕ Остатки.КолвоОстаток
			|	КОНЕЦ КАК Количество,
			|	втТоварыИт.Партия КАК Партия,
			|	&Ссылка КАК Распоряжение,
			|	втТоварыИт.Комментарий КАК Комментарий
			|ИЗ
			|	втТоварыИт КАК втТоварыИт
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки(
			|				,
			|				(Склад, Товар, Машина, ИндКод) В
			|					(ВЫБРАТЬ
			|						втТоварыИт.СкладТранзитный,
			|						втТоварыИт.Номенклатура,
			|						втТоварыИт.Автомобиль,
			|						втТоварыИт.Партия
			|					ИЗ
			|						втТоварыИт)) КАК Остатки
			|		ПО втТоварыИт.СкладТранзитный = Остатки.Склад
			|			И втТоварыИт.Номенклатура = Остатки.Товар
			|			И (Остатки.машина = втТоварыИт.Автомобиль)
			|			И втТоварыИт.Партия = Остатки.индкод
			|ГДЕ
			|	Остатки.КолвоОстаток <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить()[0]);
		
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект, Шапка);
		
		ВидОперации = Перечисления.ВидыОперацийЗаявокНаСборку.РазнесениеПоСкладу;
		
		ТоварыИсточник = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить();
		
	КонецЕсли;
	
	Если ТоварыИсточник <> Неопределено Тогда
		Товары.Загрузить(ТоварыИсточник);
	КонецЕсли;
	//дт_Склад.УстановитьТранзитныйСклад(ЭтотОбъект);
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Состояние = Перечисления.дт_СтатусыЗаявокНаСборку.ВРаботе;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = Перечисления.ВидыОперацийЗаявокНаСборку.РазнесениеПоСкладу;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Инициатор) Тогда
		Инициатор = Ответственный;
	КонецЕсли;
	
КонецПроцедуры



Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаявокНаСборку.РазнесениеПоСкладу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Клиент");
	КонецЕсли;
	
	Если Состояние <> Перечисления.дт_СтатусыЗаявокНаСборку.Выполнено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Партия");
	КонецЕсли;
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	дт_Склад.УстановитьТранзитныйСклад(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
ДополнительныеСвойства.Вставить("ЭтоНовый",                    ЭтоНовый()); 
	ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Ложь); 
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаявокНаСборку.РазнесениеПоСкладу Тогда
	ПараметрыПроведения = Документы.ЗаявкаНаСборку.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявокНаСборку.СборкаСоСклада Тогда
	ПараметрыПроведения =Документы.ЗаявкаНаСборку.ПодготовитьПараметрыПроведенияВТранзит(Ссылка, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	дт_ОбщегоНазначения.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	дт_Склад.ПодготовитьНаборыЗаписей(ЭтотОбъект);
	
	// Формирование движений
	дт_Склад.ОтразитьДвижения(ПараметрыПроведения, Движения, Отказ);
	дт_Склад.ОтразитьДвиженияТоварыВТранзитнойЗоне(ПараметрыПроведения, Движения, Отказ);
	
	Движения.Записать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыВТранзитнойЗоне", ПараметрыПроведения.ТаблицаТоварыВТранзитнойЗоне);
	ДополнительныеСвойства.ДляПроведения.МоментКонтроля = Новый Граница(МоментВремени(), ВидГраницы.Включая);
	
	// Контроль отрицательных остаткок по регистрам накопления (только в рамках Д_Доработок)
	Документы.ЗаявкаНаСборку.ВыполнитьКонтроль(ЭтотОбъект, ДополнительныеСвойства, Отказ);
	
	
	
	///+ГомзМА 23.03.2023
	// Запись и перезапись комментария
	// Получим таблицу
	ТаблицаТовары = Товары.Выгрузить();
	МассивТоваров = новый массив;
	Для Каждого ТекСтрокаТаблица Из ТаблицаТовары Цикл
		индкод = ТекСтрокаТаблица.Партия;
		ЗаписьВРегистреСведений 		= РегистрыСведений.Комментарии.СоздатьМенеджерЗаписи();
		ЗаписьВРегистреСведений.Машина  = ТекСтрокаТаблица.Автомобиль;
		ЗаписьВРегистреСведений.Товар 	= ТекСтрокаТаблица.Номенклатура;
		ЗаписьВРегистреСведений.индкод  = индкод;
		ЗаписьВРегистреСведений.Прочитать();
		Если (Не ЗаписьВРегистреСведений.Выбран()) И (Не ПустаяСтрока(ТекСтрокаТаблица.Комментарий)) Тогда
			ЗаписьВРегистреСведений.Комментарий = ТекСтрокаТаблица.Комментарий;
			ЗаписьВРегистреСведений.Машина 		= ТекСтрокаТаблица.Автомобиль;
			ЗаписьВРегистреСведений.Товар 		= ТекСтрокаТаблица.Номенклатура;
			ЗаписьВРегистреСведений.индкод 		= индкод;

            ЗаписьВРегистреСведений.Записать();
		Иначе
			ЗаписьВРегистреСведений.Комментарий = ТекСтрокаТаблица.Комментарий;
			ЗаписьВРегистреСведений.Записать(Истина);
		КонецЕсли;
		МассивТоваров.Добавить(ТекСтрокаТаблица.Номенклатура);

	КонецЦикла;
	///-ГомзМА 23.03.2023
	//Попытка
	//	дт_ОбменССайтами.СформироватьСписокДеталейПоштучно(МассивТоваров);
	//Исключение 
	//	Для каждого Товар из МассивТоваров Цикл
	//МенеджерТоваров = РегистрыСведений.ПроверкаВырузкиНаСайт.СоздатьМенеджерЗаписи();
	//МенеджерТоваров.РегистраторВыгрузки  = Ссылка;
	//МенеджерТоваров.Товар = Товар;
	//МенеджерТоваров.Записать();
	//КонецЦикла;
//КонецПопытки;


КонецПроцедуры

Процедура ОбработкаПроведенияБэк()
//ДополнительныеСвойства.Вставить("ЭтоНовый",                    ЭтоНовый()); 
//	ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Ложь); 
//	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
//	
//	
//	ПараметрыПроведения = Документы.ЗаявкаНаСборку.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	дт_ОбщегоНазначения.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
//	дт_Склад.ПодготовитьНаборыЗаписей(ЭтотОбъект);
//	
//	// Формирование движений
//	дт_Склад.ОтразитьДвижения(ПараметрыПроведения, Движения, Отказ);
//	дт_Склад.ОтразитьДвиженияТоварыВТранзитнойЗоне(ПараметрыПроведения, Движения, Отказ);
//	
//	Движения.Записать();
//	
//	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыВТранзитнойЗоне", ПараметрыПроведения.ТаблицаТоварыВТранзитнойЗоне);
//	ДополнительныеСвойства.ДляПроведения.МоментКонтроля = Новый Граница(МоментВремени(), ВидГраницы.Включая);
//	
//	// Контроль отрицательных остаткок по регистрам накопления (только в рамках Д_Доработок)
//	Документы.ЗаявкаНаСборку.ВыполнитьКонтроль(ЭтотОбъект, ДополнительныеСвойства, Отказ);
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти

#КонецЕсли