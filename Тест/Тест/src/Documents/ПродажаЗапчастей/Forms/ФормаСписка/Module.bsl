
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	//ОчиститьПоиск();
	
КонецПроцедуры


&НаКлиенте
Процедура Поиск(Команда)
	НачатьПоиск();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	// Вставить содержимое обработчика.
	 ОчиститьПоиск()
КонецПроцедуры

&НаСервере
Процедура НачатьПоиск()
	//Пск = РазбитьСтрокуНаМассивПодстрок(Поиск," ");
	// ++ obrv 18.10.18
	//ТекстЗапроса = "ВЫБРАТЬ
	//                      |	ПродажаЗапчастей.Ссылка,
	//                      |	ПродажаЗапчастей.ВерсияДанных,
	//                      |	ПродажаЗапчастей.ПометкаУдаления,
	//                      |	ПродажаЗапчастей.Номер,
	//                      |	ПродажаЗапчастей.Дата,
	//                      |	ПродажаЗапчастей.Проведен,
	//                      |	ПродажаЗапчастей.Клиент,
	//                      |	ПродажаЗапчастей.Комментарий,
	//                      |	ПродажаЗапчастей.Доставка,
	//                      |	ПродажаЗапчастей.Расход,
	//                      |	ПродажаЗапчастей.СрокПроверки,
	//                      |	ПродажаЗапчастей.Организация,
	//                      |	ПродажаЗапчастей.ИтогоРекв,
	//                      |	ПродажаЗапчастей.КтоПродал,
	//                      |	ПродажаЗапчастей.Оплачено,
	//                      |	ПродажаЗапчастей.УжеОплачено,
	//                      |	ПродажаЗапчастей.Откат,
	//                      |	ПродажаЗапчастей.КомуОткат,
	//                      |	ПродажаЗапчастей.ОтданоМарату,
	//                      |	ПродажаЗапчастей.ИтогоБезнал,
	//                      |	ПродажаЗапчастей.АртикулВНазвании,
	//                      |	ПродажаЗапчастей.ВычитатьИзСуммы,
	//                      |	ПродажаЗапчастей.ПотеряНаОбналичку,
	//                      |	ПродажаЗапчастей.Представление,
	//					  |	ПродажаЗапчастей.ОстатокДенег,
	//                      |	ПродажаЗапчастей.МоментВремени,
	//					  | ПродажаЗапчастей.Новые,
	//					  | ПродажаЗапчастей.ДокументыПолучены
	//                      |ИЗ
	//                      |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей";
	ТекстЗапроса = Список.ТекстЗапроса;
	// Исключим условия из текста запроса
	ИндексУсловия = СтрНайти(ТекстЗапроса, "ГДЕ");
	Если ИндексУсловия <> 0 Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, ИндексУсловия - 1);
	КонецЕсли;
	// -- obrv 18.10.18
	//ном = 1;
	//Для Каждого элем из Пск Цикл
		//Если ном = 1 Тогда
			ТекстЗапроса = ТекстЗапроса + " ГДЕ ДокументПродажаЗапчастей.Номер = ""%"+Поиск+""" ИЛИ ДокументПродажаЗапчастей.Счет = """+Поиск+""" ИЛИ ДокументПродажаЗапчастей.СчетФактура = """+Поиск+""" ИЛИ ДокументПродажаЗапчастей.ТоварнаяНакладная = """+Поиск+""" ИЛИ ДокументПродажаЗапчастей.Клиент.Наименование = ""%"+Поиск+"%"""+ " ИЛИ ДокументПродажаЗапчастей.Клиент.ФИО = ""%"+Поиск+"%""" + " ИЛИ ДокументПродажаЗапчастей.Клиент.Телефон = ""%"+Поиск+"%""";
		//Иначе
			//ТекстЗапроса = ТекстЗапроса + " ИЛИ ДокументПродажаЗапчастей.Номер ПОДОБНО ""%"+элем+""" ИЛИ ДокументПродажаЗапчастей.Счет ПОДОБНО """+элем+""" ИЛИ ДокументПродажаЗапчастей.СчетФактура ПОДОБНО """+элем+""" ИЛИ ДокументПродажаЗапчастей.Клиент.Наименование ПОДОБНО ""%"+элем+"%"""+ " ИЛИ ДокументПродажаЗапчастей.Клиент.ФИО ПОДОБНО ""%"+элем+"%""" + " ИЛИ ДокументПродажаЗапчастей.Клиент.Телефон ПОДОБНО ""%"+элем+"%""";
		//КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " ИЛИ  ДокументПродажаЗапчастей.Клиент.ИНН = """ + Поиск + "%""";
		//ном = 2;
	//КонецЦикла;
	Список.ТекстЗапроса = ТекстЗапроса;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	табл = Запрос.Выполнить().Выгрузить();
	СуммаНал = 0;
	СуммаБезнал = 0;
	Погашено = 0;
	Для Каждого товар Из табл Цикл
		СуммаНал = СуммаНал + товар.ИтогоРекв;	
		СуммаБезнал = СуммаБезнал + товар.ИтогоБезнал;
		Если товар.Оплачено = Истина Тогда
			Погашено = Погашено + товар.ИтогоРекв;
		Иначе
			Погашено = Погашено + товар.УжеОплачено;
		КонецЕсли;
	КонецЦикла

КонецПроцедуры

&НаСервере
Функция РазбитьСтрокуНаМассивПодстрок(ИсходнаяСтрока,РазделительСтрок)
   СтрокаДляРазбора = ИсходнаяСтрока;
   СтрокаДляРазбора = СтрЗаменить(СтрокаДляРазбора, РазделительСтрок, Символы.ПС);
   МассивСтрок = новый Массив;
   КолвоСтрок = СтрЧислоСтрок(СтрокаДляРазбора);
   Для НомСтр = 1 По КолвоСтрок Цикл
      МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаДляРазбора, НомСтр));
  КонецЦикла;
   Возврат МассивСтрок;
КонецФункции

&НаСервере
Процедура ОчиститьПоиск()
	// ++ obrv 18.10.18
	//Список.ТекстЗапроса = 
	   //"ВЫБРАТЬ
	   //|	ДокументПродажаЗапчастей.Ссылка КАК Ссылка,
	   //|	ДокументПродажаЗапчастей.ВерсияДанных КАК ВерсияДанных,
	   //|	ДокументПродажаЗапчастей.ПометкаУдаления КАК ПометкаУдаления,
	   //|	ДокументПродажаЗапчастей.Номер КАК Номер,
	   //|	ДокументПродажаЗапчастей.Дата КАК Дата,
	   //|	ДокументПродажаЗапчастей.Проведен КАК Проведен,
	   //|	ДокументПродажаЗапчастей.Клиент КАК Клиент,
	   //|	ДокументПродажаЗапчастей.Комментарий КАК Комментарий,
	   //|	ДокументПродажаЗапчастей.Доставка КАК Доставка,
	   //|	ДокументПродажаЗапчастей.Расход КАК Расход,
	   //|	ДокументПродажаЗапчастей.СрокПроверки КАК СрокПроверки,
	   //|	ДокументПродажаЗапчастей.Организация КАК Организация,
	   //|	ДокументПродажаЗапчастей.ИтогоРекв КАК ИтогоРекв,
	   //|	ДокументПродажаЗапчастей.КтоПродал КАК КтоПродал,
	   //|	ДокументПродажаЗапчастей.Оплачено КАК Оплачено,
	   //|	ДокументПродажаЗапчастей.УжеОплачено КАК УжеОплачено,
	   //|	ДокументПродажаЗапчастей.Откат КАК Откат,
	   //|	ДокументПродажаЗапчастей.КомуОткат КАК КомуОткат,
	   //|	ДокументПродажаЗапчастей.ОтданоМарату КАК ОтданоМарату,
	   //|	ДокументПродажаЗапчастей.ИтогоБезнал КАК ИтогоБезнал,
	   //|	ДокументПродажаЗапчастей.АртикулВНазвании КАК АртикулВНазвании,
	   //|	ДокументПродажаЗапчастей.ВычитатьИзСуммы КАК ВычитатьИзСуммы,
	   //|	ДокументПродажаЗапчастей.ПотеряНаОбналичку КАК ПотеряНаОбналичку,
	   //|	ДокументПродажаЗапчастей.Таблица.(
	   //|		Ссылка КАК Ссылка,
	   //|		НомерСтроки КАК НомерСтроки,
	   //|		Товар КАК Товар,
	   //|		Количество КАК Количество,
	   //|		Цена КАК Цена,
	   //|		Скидка КАК Скидка,
	   //|		машина КАК машина,
	   //|		цена1 КАК цена1,
	   //|		Комментарий КАК Комментарий,
	   //|		Сумма КАК Сумма
	   //|	) КАК Таблица,
	   //|	ДокументПродажаЗапчастей.МоментВремени КАК МоментВремени,
	   //|	ДокументПродажаЗапчастей.ОстатокДенег КАК ОстатокДенег,
	   //|	ДокументПродажаЗапчастей.ЕстьДоставка КАК ЕстьДоставка,
	   //|	ДокументПродажаЗапчастей.ДоставкаНеЗаполнена КАК ДоставкаНеЗаполнена,
	   //|	ДокументПродажаЗапчастей.Новые КАК Новые,
	   //|	ДокументПродажаЗапчастей.TipOplati КАК TipOplati,
	   //|	ДокументПродажаЗапчастей.СтатусДоставки КАК СтатусДоставки,
	   //|	ДокументПродажаЗапчастей.ДокументыПолучены КАК ДокументыПолучены,
	   //|	ДокументПродажаЗапчастей.ИтогоРекв - ЕСТЬNULL(Оплаты.Сумма, 0) КАК остаток1,
	   //|	ДокументПродажаЗапчастей.ДоговорКонтрагента КАК ДоговорКонтрагента,
	   //|	ДокументПродажаЗапчастей.НомерУПД КАК НомерУПД,
	   //|	ДокументПродажаЗапчастей.ДатаУПД КАК ДатаУПД,
	   //|	ДокументПродажаЗапчастей.ТоварнаяНакладная КАК ТоварнаяНакладная,
	   //|	ДокументПродажаЗапчастей.ДатаТоварнойНакладной КАК ДатаТоварнойНакладной,
	   //|	ЕСТЬNULL(Оплаты.Сумма, 0) КАК ОплаченоНа
	   //|ИЗ
	   //|	Документ.ПродажаЗапчастей КАК ДокументПродажаЗапчастей
	   //|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	   //|			Оплаты.Документ КАК Документ,
	   //|			СУММА(Оплаты.Сумма) КАК Сумма
	   //|		ИЗ
	   //|			(ВЫБРАТЬ
	   //|				БаланПоНакладнойОстатки.Измерение1 КАК Документ,
	   //|				БаланПоНакладнойОстатки.СуммаОстаток КАК Сумма
	   //|			ИЗ
	   //|				РегистрНакопления.БаланПоНакладной.Остатки КАК БаланПоНакладнойОстатки
	   //|			
	   //|			ОБЪЕДИНИТЬ ВСЕ
	   //|			
	   //|			ВЫБРАТЬ
	   //|				ОплатыПоСделкамОбороты.Документ,
	   //|				ОплатыПоСделкамОбороты.СуммаОборот
	   //|			ИЗ
	   //|				РегистрНакопления.ОплатыПоСделкам.Обороты КАК ОплатыПоСделкамОбороты) КАК Оплаты
	   //|		
	   //|		СГРУППИРОВАТЬ ПО
	   //|			Оплаты.Документ) КАК Оплаты
	   //|		ПО ДокументПродажаЗапчастей.Ссылка = Оплаты.Документ";
	   
	ТекстЗапроса = Список.ТекстЗапроса;
	// Исключим условия из текста запроса
	ИндексУсловия = СтрНайти(ТекстЗапроса, "ГДЕ");
	Если ИндексУсловия <> 0 Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, ИндексУсловия - 1);
		Список.ТекстЗапроса = ТекстЗапроса;
	КонецЕсли;
	   // -- obrv 18.10.18

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                      |	ПродажаЗапчастей.Ссылка,
	                      |	ПродажаЗапчастей.ВерсияДанных,
	                      |	ПродажаЗапчастей.ПометкаУдаления,
	                      |	ПродажаЗапчастей.Номер,
	                      |	ПродажаЗапчастей.Дата,
	                      |	ПродажаЗапчастей.Проведен,
	                      |	ПродажаЗапчастей.Клиент,
	                      |	ПродажаЗапчастей.Комментарий,
	                      |	ПродажаЗапчастей.Доставка,
	                      |	ПродажаЗапчастей.Расход,
	                      |	ПродажаЗапчастей.СрокПроверки,
	                      |	ПродажаЗапчастей.Организация,
	                      |	ПродажаЗапчастей.ИтогоРекв,
	                      |	ПродажаЗапчастей.КтоПродал,
	                      |	ПродажаЗапчастей.Оплачено,
	                      |	ПродажаЗапчастей.УжеОплачено,
	                      |	ПродажаЗапчастей.Откат,
	                      |	ПродажаЗапчастей.КомуОткат,
	                      |	ПродажаЗапчастей.ОтданоМарату,
	                      |	ПродажаЗапчастей.ИтогоБезнал,
	                      |	ПродажаЗапчастей.АртикулВНазвании,
	                      |	ПродажаЗапчастей.ВычитатьИзСуммы,
	                      |	ПродажаЗапчастей.ПотеряНаОбналичку,
	                      |	ПродажаЗапчастей.Представление,
						  |	ПродажаЗапчастей.ОстатокДенег,
	                      |	ПродажаЗапчастей.МоментВремени,
						  | ПродажаЗапчастей.Новые,
						  | ПродажаЗапчастей.ДокументыПолучены
	                      |ИЗ
	                      |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей";

	табл = Запрос.Выполнить().Выгрузить();
	СуммаНал = 0;
	СуммаБезнал = 0;
	Погашено = 0;

	Для Каждого товар Из табл Цикл
		СуммаНал = СуммаНал + товар.ИтогоРекв;	
		СуммаБезнал = СуммаБезнал + товар.ИтогоБезнал;
		Если товар.Оплачено = Истина Тогда
			Погашено = Погашено + товар.ИтогоРекв;
		Иначе
			Погашено = Погашено + товар.УжеОплачено;
		КонецЕсли;
	КонецЦикла


КонецПроцедуры


&НаСервере
Процедура ОбновитьСуммы()
		
КонецПроцедуры

&НаКлиенте
Процедура Показать(Команда)
	// Вставить содержимое обработчика.
	ФильтрОрганизация()

КонецПроцедуры

 &НаСервере
Процедура ФильтрОрганизация()
	Пск = РазбитьСтрокуНаМассивПодстрок(Поиск," "); 
	Если неопл = Истина Тогда
		неоплачено = " ПродажаЗапчастей.Оплачено = ЛОЖЬ И ";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПродажаЗапчастей.Ссылка,
	               |	ПродажаЗапчастей.ВерсияДанных,
	               |	ПродажаЗапчастей.ПометкаУдаления,
	               |	ПродажаЗапчастей.Номер,
	               |	ПродажаЗапчастей.Дата,
	               |	ПродажаЗапчастей.Проведен,
	               |	ПродажаЗапчастей.Клиент,
	               |	ПродажаЗапчастей.Комментарий,
	               |	ПродажаЗапчастей.Доставка,
	               |	ПродажаЗапчастей.Расход,
	               |	ПродажаЗапчастей.СрокПроверки,
	               |	ПродажаЗапчастей.Организация,
	               |	ПродажаЗапчастей.ИтогоРекв,
	               |	ПродажаЗапчастей.КтоПродал,
	               |	ПродажаЗапчастей.Оплачено,
	               |	ПродажаЗапчастей.УжеОплачено,
	               |	ПродажаЗапчастей.Откат,
	               |	ПродажаЗапчастей.КомуОткат,
	               |	ПродажаЗапчастей.ОтданоМарату,
	               |	ПродажаЗапчастей.ИтогоБезнал,
	               |	ПродажаЗапчастей.АртикулВНазвании,
	               |	ПродажаЗапчастей.ВычитатьИзСуммы,
	               |	ПродажаЗапчастей.ПотеряНаОбналичку,
	               |	ПродажаЗапчастей.Представление,
	               |	ПродажаЗапчастей.ОстатокДенег,
	               |	ПродажаЗапчастей.МоментВремени,
	               |	ПродажаЗапчастей.Новые,
	               |	ПродажаЗапчастей.TipOplati,
				   | ПродажаЗапчастей.ДокументыПолучены
	               |ИЗ
	               |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	               |ГДЕ
	               |	ПродажаЗапчастей.TipOplati = &TipOplati";
	ном = 1;
	Если неопл = Истина Тогда
		ТекстЗапроса = ТекстЗапроса + " И ПродажаЗапчастей.Оплачено = Ложь "
	КонецЕсли;
	Для Каждого элем из Пск Цикл
		Если ном = 1 Тогда
			ТекстЗапроса = ТекстЗапроса + " И ( ПродажаЗапчастей.Номер ПОДОБНО ""%"+элем+""" ИЛИ ПродажаЗапчастей.Счет ПОДОБНО """+элем+""" ИЛИ ПродажаЗапчастей.СчетФактура ПОДОБНО """+элем+""" ИЛИ ПродажаЗапчастей.ТоварнаяНакладная ПОДОБНО """+элем+""" ИЛИ ПродажаЗапчастей.Клиент.Наименование ПОДОБНО ""%"+элем+"%"""+ " ИЛИ ПродажаЗапчастей.Клиент.ФИО ПОДОБНО ""%"+элем+"%""" + " ИЛИ ПродажаЗапчастей.Клиент.Телефон ПОДОБНО ""%"+элем+"%""";
		Иначе
			ТекстЗапроса = ТекстЗапроса + " ИЛИ ПродажаЗапчастей.Номер ПОДОБНО ""%"+элем+""" ИЛИ ПродажаЗапчастей.Счет ПОДОБНО """+элем+""" ИЛИ ПродажаЗапчастей.СчетФактура ПОДОБНО """+элем+""" ИЛИ ПродажаЗапчастей.ТоварнаяНакладная ПОДОБНО """+элем+""" ИЛИ ПродажаЗапчастей.Клиент.Наименование ПОДОБНО ""%"+элем+"%"""+ " ИЛИ ПродажаЗапчастей.Клиент.ФИО ПОДОБНО ""%"+элем+"%""" + " ИЛИ ПродажаЗапчастей.Клиент.Телефон ПОДОБНО ""%"+элем+"%""";
		КонецЕсли;
		ном = 2;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + " ) ";
	Список.ТекстЗапроса = ТекстЗапроса;
	Список.Параметры.УстановитьЗначениеПараметра("TipOplati",ТипОплаты);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("TipOplati",ТипОплаты);
	табл = Запрос.Выполнить().Выгрузить();
	СуммаНал = 0;
	СуммаБезнал = 0;
	Погашено = 0;

	Для Каждого товар Из табл Цикл
		СуммаНал = СуммаНал + товар.ИтогоРекв;	
		СуммаБезнал = СуммаБезнал + товар.ИтогоБезнал;
		Если товар.Оплачено = Истина Тогда
			Погашено = Погашено + товар.ИтогоРекв;
		Иначе
			Погашено = Погашено + товар.УжеОплачено;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстаток(Команда)
	// Вставить содержимое обработчика.
	ОбновитьОстатокСерв(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура БыстроОбновитьОстаток(Команда)
	// Вставить содержимое обработчика.
	ОбновитьОстатокСерв(Истина);
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстатокСерв(быстрый)
	запрос = Новый Запрос;
	итг_д = 0;
	итг_р = 0;
	итг_н = 0;
	итг_м = 0;
	итг_ч = 0;
	итг_а = 0;
	итг_отк = 0;
	итг_нов = 0;
	итг_раснов = 0;
	итг_раснов2 = 0;
	итг_откн = 0;
	итг_мн = 0;
	Если быстрый Тогда
		запрос.Текст = "ВЫБРАТЬ
		               |	ПродажаЗапчастей.Ссылка,
		               |	ПродажаЗапчастей.Номер
		               |ИЗ
		               |	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		               |ГДЕ
		               |	ПродажаЗапчастей.ОстатокДенег > 0";
	Иначе
		запрос.Текст = "ВЫБРАТЬ
		|	ПродажаЗапчастей.Ссылка,
		|	ПродажаЗапчастей.Номер
		|ИЗ
		|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей";
	КонецЕсли;
	табл1 = запрос.Выполнить().Выгрузить();
	Для Каждого строка Из табл1 Цикл
		об1 = Документы.ПродажаЗапчастей.НайтиПоНомеру(строка.Номер)  ;
		об = об1.ПолучитьОбъект();
		Если об.ОстатокДенег < 0 Тогда
			Сообщить("=============================" + об.Номер);
			Сообщить(" "+об.ИтогоРекв);
		КонецЕсли;
		итг_д = итг_д + об.ИтогоРекв; 
		Если об1.Новые Тогда
			итг_нов = итг_нов + об.ИтогоРекв;
		КонецЕсли;
		
		запрос1 = Новый Запрос;
		запрос1.текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		          |	СУММА(Расходы.Сумма) КАК Сумма
		          |ИЗ
		          |	Документ.Расходы КАК Расходы
		          |ГДЕ
		          |	Расходы.Откуда = &Откуда";
	    запрос1.УстановитьПараметр("Откуда", об1.Ссылка);
		расх = запрос1.Выполнить().Выгрузить().Итог("Сумма");
		Если об.ОстатокДенег < 0 Тогда
			Сообщить(" "+расх);
		КонецЕсли;
		Если об1.Новые Тогда
			итг_раснов = итг_раснов + расх;
		КонецЕсли;
		
		запрос1 = Новый Запрос;
		запрос1.текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                |	СУММА(Расходы.Сумма) КАК Сумма
		                |ИЗ
		                |	Документ.Расходы КАК Расходы
		                |ГДЕ
		                |	Расходы.Откуда = &Откуда
		                |	И Расходы.Новые = ИСТИНА";
	    запрос1.УстановитьПараметр("Откуда", об1.Ссылка);
		расх2 = запрос1.Выполнить().Выгрузить().Итог("Сумма");
		Если об.ОстатокДенег < 0 Тогда
			Сообщить(" "+расх);
		КонецЕсли;
		итг_раснов2 = итг_раснов2 + расх2;


		об.ОстатокДенег = об.ИтогоРекв - расх;
		итг_р = итг_р + расх;
		//Если об.ОстатокДенег < 0 Тогда
		//	об.ОстатокДенег = 0;
		//КонецЕсли;
		запрос1.текст = "ВЫБРАТЬ
		                |	ВыводДенегИзРазборки.Таблица.(
		                |		нам,
		                |		марату,
		                |		Artem,
		                |		МаратуНаличкой
		                |	)
		                |ИЗ
		                |	Документ.ВыводДенегИзРазборки КАК ВыводДенегИзРазборки
		                |ГДЕ
		                |	ВыводДенегИзРазборки.Таблица.Документ = &Документ";
		запрос1.УстановитьПараметр("Документ", об1.Ссылка);
        рез1 = запрос1.Выполнить().Выгрузить();
		потр1 = 0;
		
		Для Каждого стр Из рез1 Цикл
			потр1 = потр1 + стр.Таблица.Итог("Нам");
			итг_н = итг_н + стр.Таблица.Итог("Нам");
			потр1 = потр1 + стр.Таблица.Итог("Марату");
			потр1 = потр1 + стр.Таблица.Итог("Artem");
			итг_м = итг_м + стр.Таблица.Итог("Марату");
			итг_а = итг_а + стр.Таблица.Итог("Artem");
			итг_мн = итг_мн + стр.Таблица.Итог("МаратуНаличкой");
			потр1 = потр1 + стр.Таблица.Итог("МаратуНаличкой");
		КонецЦикла;
		Если об.ОстатокДенег < 0 Тогда
			Сообщить(" "+потр1);
			Сообщить(" "+об.Откат);
		КонецЕсли;
		об.ОстатокДенег = об.ОстатокДенег - потр1-об.Откат;
		Если об1.Новые Тогда
			итг_откн = итг_откн + об.Откат;
		КонецЕсли;
		итг_отк = итг_отк + об.Откат;
		//Если об.ОстатокДенег < 0 Тогда
		//	об.ОстатокДенег = 0;
		//КонецЕсли;

		Если об.Оплачено <> Истина Тогда
			//об.ОстатокДенег = 0;
			//Сообщить("Неоплачено "+ об.ИтогоРекв + " " +  об.УжеОплачено);
			об.ОстатокДенег = 0 + об.УжеОплачено - расх - потр1-об.Откат;
			итг_ч = итг_ч + об.УжеОплачено;
			//Сообщить("Неоплачено "+ об.ОстатокДенег);
		КонецЕсли;
			
		об.Записать();
	КонецЦикла;
	Сообщить("итг_д"+итг_д);
	Сообщить("итг_р"+итг_р);
	Сообщить("итг_н"+итг_н);
	Сообщить("итг_м"+итг_м);
	Сообщить("итг_ч"+итг_ч);
	Сообщить("итг_отк"+итг_отк);
	Сообщить("итг_а "+итг_а);
    Сообщить("итг_нов "+итг_нов);
	Сообщить("итг_раснов "+итг_раснов);
	Сообщить("итг_откн "+итг_откн);
	Сообщить("итг_раснов2 "+итг_раснов2);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Оповестить("ОстаткиИзменение");

КонецПроцедуры

&НаКлиенте
Процедура СписокПередРазворачиванием(Элемент, Строка, Отказ)
	// Вставить содержимое обработчика.


КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Вставить содержимое обработчика.

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииЯчейки(Элемент)
//   ПараметрыИтоги = ПолучитьИтогиДокументов(Список.Отбор, ПолучитьСтруктуруТиповПолей(Список.Отбор));	

КонецПроцедуры

&НаСервере
Процедура Сум1(отб)
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИтогиДокументов(Знач Отбор, СтруктураТиповПолей)
	
	// Получаем массив использованных полей отбора первого уровня
	ЭлементыОтбора = Отбор.Элементы;	
	МассивИспользуемыхПолейОтбора = ПолучитьМассивВключенныхЭлементов(ЭлементыОтбора);
	
	// Если нет использованных полей отбора, тогда возвращаем пустой результат
	ПараметрыВозврат = Новый Структура;  
	Если МассивИспользуемыхПолейОтбора.Количество() = 0 Тогда
		ПараметрыВозврат.Вставить("Сумма", "---");
		ПараметрыВозврат.Вставить("Рейтинг", "---");
		Возврат ПараметрыВозврат;
	КонецЕсли;
	
	// Формируем запрос, аналогичный запросу динамического списка
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПродажаЗапчастей.Ссылка,
	|	ПродажаЗапчастей.ВерсияДанных,
	|	ПродажаЗапчастей.ПометкаУдаления,
	|	ПродажаЗапчастей.Номер,
	|	ПродажаЗапчастей.Дата,
	|	ПродажаЗапчастей.Проведен,
	|	ПродажаЗапчастей.Клиент,
	|	ПродажаЗапчастей.Комментарий,
	|	ПродажаЗапчастей.Доставка,
	|	ПродажаЗапчастей.Расход,
	|	ПродажаЗапчастей.СрокПроверки,
	|	ПродажаЗапчастей.Организация,
	|	ПродажаЗапчастей.ИтогоРекв,
	|	ПродажаЗапчастей.КтоПродал,
	|	ПродажаЗапчастей.Оплачено,
	|	ПродажаЗапчастей.УжеОплачено,
	|	ПродажаЗапчастей.Откат,
	|	ПродажаЗапчастей.КомуОткат,
	|	ПродажаЗапчастей.ОтданоМарату,
	|	ПродажаЗапчастей.ИтогоБезнал,
	|	ПродажаЗапчастей.АртикулВНазвании,
	|	ПродажаЗапчастей.ВычитатьИзСуммы,
	|	ПродажаЗапчастей.ПотеряНаОбналичку,
	|	ПродажаЗапчастей.ОстатокДенег,
	|	ПродажаЗапчастей.ВозвратТовара,
	|	ПродажаЗапчастей.СуммаВозврат,
	|	ПродажаЗапчастей.Представление,
	|	ПродажаЗапчастей.МоментВремени
	|ПОМЕСТИТЬ ПредварительныеДанные
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей ";
	
	// Устанавливаем условия запроса в соответствии с установленным отбором
	ТекстУсловийЗапроса = "ГДЕ ";
	Для Каждого Эл Из МассивИспользуемыхПолейОтбора Цикл 
		// Обрабатываем текущий элемент отбора верхнего уровня
		ОбработатьЭлементОтбора(Эл, ТекстУсловийЗапроса, "И",
								СтруктураТиповПолей, Запрос, ТекстЗапроса);		
	КонецЦикла;
	ТекстУсловийЗапроса = УбратьЛишнийОператорУсловия(ТекстУсловийЗапроса);
	
	// Добвляем к основному запросу текст условий отбора
	ТекстЗапроса = ТекстЗапроса + ТекстУсловийЗапроса;
	
	// Добавляем к запросу текст получения итогов
	ТекстЗапроса = ТекстЗапроса +
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПредварительныеДанные.ИтогоРекв) КАК Сумма
	|ИЗ
	|	ПредварительныеДанные КАК ПредварительныеДанные";
	
	// Устанавливаем текст запроса
	Запрос.Текст = ТекстЗапроса;
	
	// Обрабатываем результат
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПараметрыВозврат.Вставить("Сумма", "---");
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПараметрыВозврат.Вставить("Сумма", Формат(Выборка.Сумма, "ЧДЦ=2; ЧГ=0"));
	КонецЕсли;
	СуммаНал = ПараметрыВозврат.Сумма;
	Возврат ПараметрыВозврат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруТиповПолей(Отбор)
	
	СтруктураТиповПолей = Новый Структура;
	Для Каждого Эл Из Отбор.ДоступныеПоляОтбора.Элементы Цикл
		СтруктураТиповПолей.Вставить(Эл.Поле, Эл.ТипЗначения);
	КонецЦикла;
	Возврат СтруктураТиповПолей;
	
КонецФункции

// Получаем массив полей из коллекции элементов
// с установленным флагом "Использование"
//
&НаСервереБезКонтекста
Функция ПолучитьМассивВключенныхЭлементов(ЭлементыОтбора)
	
	МассивИспользуемыхПолейОтбора = Новый Массив;
	Для Каждого ЭлОтбора Из ЭлементыОтбора Цикл
		Если ЭлОтбора.Использование Тогда
			МассивИспользуемыхПолейОтбора.Добавить(ЭлОтбора);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивИспользуемыхПолейОтбора;
	
КонецФункции

// Убираем лишний оператор логического сравнения из условия в запросе на конце
//
&НаСервереБезКонтекста
Функция УбратьЛишнийОператорУсловия(ТекстЗапроса)
	
	ТекстЗапроса = СокрЛП(ТекстЗапроса);
	
	Длина = СтрДлина(ТекстЗапроса);
	
	Пока Длина <> 0 Цикл
		СимволТекущий = Сред(ТекстЗапроса, Длина, 1);
		Если СимволТекущий = " " Тогда
			Прервать;
		КонецЕсли;
		Длина = Длина - 1;
	КонецЦикла;
	
	Возврат Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-(СтрДлина(ТекстЗапроса)-Длина));
	
КонецФункции

// Процедура обрабатывает переданный элемент отбора
// Параметры:
//	1. Эл - элемент отбора (группа или поле отбора)
//	2. ТекстУсловийЗапроса - строковая переменная, в которую добисываются условия запроса
//	3. ВидСравненияУсловия - вид сравнения в условии (зависит от группы элементов отбора)
//	4. СтруктураТиповПолей - структура, содержащая описание типов полей для полей отбора
//	5. Запрос - класс запроса, который будет в дальнейшем выполнен для получения результата
//	6. ТекстЗапроса - исходный текст запроса динамического списка
//
&НаСервереБезКонтекста
Процедура ОбработатьЭлементОтбора(Эл, ТекстУсловийЗапроса, ВидСравненияУсловияВерхнийУровень, СтруктураТиповПолей, Запрос, ТекстЗапроса) 	
	// Если это группа элементов отбора
	Если ТипЗнч(Эл) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда  		
		ВидСравненияУсловия = "";
		Отрицание = "";
		Если Эл.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
			ВидСравненияУсловия = "И";
		ИначеЕсли Эл.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда 
			ВидСравненияУсловия = "ИЛИ"; 	
		ИначеЕсли Эл.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			ВидСравненияУсловия = "И";
			Отрицание = " НЕ ";
		КонецЕсли;

		ТекстУсловийЗапроса = ТекстУсловийЗапроса + Отрицание +"(";   		
		ЭлементыГруппы = Эл.Элементы;     		
		МассивЭлементовОтбора = ПолучитьМассивВключенныхЭлементов(ЭлементыГруппы);		
		Если МассивЭлементовОтбора.Количество() = 0 Тогда
			ТекстУсловийЗапроса = ТекстУсловийЗапроса + "ИСТИНА"
		Иначе
			Для Каждого ЭлГр Из Эл.Элементы Цикл 				
				Если ЭлГр.Использование Тогда
					ОбработатьЭлементОтбора(ЭлГр, ТекстУсловийЗапроса, ВидСравненияУсловия, СтруктураТиповПолей, Запрос, ТекстЗапроса);			
				КонецЕсли; 				
			КонецЦикла;    			
			ТекстУсловийЗапроса = Лев(ТекстУсловийЗапроса, СтрДлина(ТекстУсловийЗапроса)-(СтрДлина(ВидСравненияУсловия)+1)); 
		КонецЕсли;     				
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ") " + ВидСравненияУсловияВерхнийУровень;   		
	Иначе // Если это поле отбора              		
		ИмяПоляОтбора = Строка(Эл.ЛевоеЗначение); 		
		ТекстУсловийЗапроса = ТекстУсловийЗапроса
		+ " " +ПолучитьТекстПоляПоПредставлению(ТекстЗапроса, ИмяПоляОтбора) // Получаем текст поля, по которому делается отбор
		        // Получаем выражение сравнения для полученного ранее поля отбора
		+ " " + ПолучитьВидСравненияИЗначение(Эл.ВидСравнения, Эл.ПравоеЗначение, ИмяПоляОтбора, ВидСравненияУсловияВерхнийУровень); 
		// Если "ВидСравнения" - "Заполнено" или "Не заполнено", тогда в условие сравнения подставляем пустое значение для поля отбора по его типу
		Если Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено ИЛИ 
			Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда  			
			Запрос.УстановитьПараметр("Заполнено"+ИмяПоляОтбора, 
								СтруктураТиповПолей[СтрЗаменить(ИмяПоляОтбора, "Заполнено", "")].ПривестиЗначение());    			
		Иначе // Иначе устанавливаем значение параметра в соответствии с переданным значением      			
						                                         // Получаем значение для передачи в запрос параметром
			Запрос.УстановитьПараметр(СтрЗаменить(ИмяПоляОтбора, ".", ""), ПолучитьЗначениеДляПараметра(Эл.ПравоеЗначение, ИмяПоляОтбора));				
		КонецЕсли;
	КонецЕсли;   	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеДляПараметра(ЗначениеОтбора, ИмяПоляОтбора)
	
	// Для стандартной даты начала получаем значение непосредственно даты
	Если ТипЗнч(ЗначениеОтбора) = Тип("СтандартнаяДатаНачала") Тогда
		Возврат ЗначениеОтбора.Дата;	
	Иначе
		Возврат ЗначениеОтбора; // иначе возвращаем исходное значение отбора
	КонецЕсли;
	
КонецФункции

// Функция получает текст поля запроса из непосредственно текста запроса
// Поиск осуществляется по представлению поля. 
// Актуально для полей из составных выражений.
//
&НаСервереБезКонтекста
Функция ПолучитьТекстПоляПоПредставлению(ТекстЗапроса, ИмяПредставленияПоля)
	
	ПозицияНайденная = Найти(ТекстЗапроса, "КАК " + ИмяПредставленияПоля);
	Если ПозицияНайденная = 0 Тогда
		Возврат ИмяПредставленияПоля;
	Иначе
		НачалоЦикла = ПозицияНайденная - 1;
		ТекстЗапросаДляПоиска = Лев(ТекстЗапроса, НачалоЦикла);
		
		ПозицияНачалоПоля = 0;
		Пока НачалоЦикла <> 0 Цикл
			Если Сред(ТекстЗапросаДляПоиска, НачалоЦикла, 1) = "," Тогда
				ПозицияНачалоПоля = НачалоЦикла+1;	
				Прервать;
			КонецЕсли;
			НачалоЦикла = НачалоЦикла - 1;
		КонецЦикла;
		Если ПозицияНачалоПоля = 0 Тогда
			ПозицияНачалоПоля = Найти(ТекстЗапросаДляПоиска, "ВЫБРАТЬ");
			Если ПозицияНачалоПоля <> 0 Тогда
				ПозицияНачалоПоля = ПозицияНачалоПоля + 7;
			Иначе
				Возврат ИмяПредставленияПоля;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Сред(ТекстЗапросаДляПоиска, ПозицияНачалоПоля, ПозицияНайденная-ПозицияНачалоПоля);	
	КонецЕсли;
	
КонецФункции

// Получаем вид сравнения по имени поля и значению отбора, а также виду сравнения в сусловии
// Параметры:
//	1. ВидСравненияОтбор - вид сравнения в поле отбора (тип "ВидСравненияКомпоновкиДанных")
//	2. ЗначениеСравнения - ПравоеЗначение из элемента отбора
//	3. ИмяПоляОтбора - имя поля в отборе
//	4. ВидСравненияУсловия - вид сравнения условия в зависимости от текущей родительской 
// группы элементов в отборе (корневая группа - условие "И")
//
&НаСервереБезКонтекста
Функция ПолучитьВидСравненияИЗначение(ВидСравненияОтбор, ЗначениеСравнения,
												ИмяПоляОтбора, ВидСравненияУсловия)
	
	ДопИмя = СтрЗаменить(Строка(ВидСравненияОтбор), " ", "");
	ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, ".", "")+ДопИмя;
	
	Если ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Равно Тогда
		Возврат "= &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Возврат "<> &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Возврат "В ИЕРАРХИИ (&" + ИмяПоляОтбора + ") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ (&" + ИмяПоляОтбора + ") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Возврат "< &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Возврат "<= &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат "> &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Возврат ">= &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Возврат "В (&" + ИмяПоляОтбора + ") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Возврат "НЕ В (&" + ИмяПоляОтбора + ") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Содержит Тогда
		Возврат "ПОДОБНО (""%" + ЗначениеСравнения + "%"") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Возврат "НЕ ПОДОБНО (""%" + ЗначениеСравнения + "%"") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Возврат "<> &" + "Заполнено"+ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		Возврат "= &" + "Заполнено"+ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
    //ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//цен=0;
	//безнал = 0;
	//СуммаНеоплачено = 0;
	//Для Каждого стр Из Элементы.Список.ВыделенныеСтроки Цикл
	//	цен = цен + стр.ИтогоРекв;
	//	безнал = безнал + стр.ИтогоБезнал;
	//	Если стр.Оплачено <> Истина Тогда
	//		СуммаНеоплачено = СуммаНеоплачено + стр.ИтогоРекв; 
	//	КонецЕсли;
	//КонецЦикла;
	//СуммаНал = цен;
	//СуммаБезнал = безнал;
    //ПересчётИтогиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура неоплПриИзменении(Элемент)
	НеоплПриизмененииСеревер();	
КонецПроцедуры

Процедура НеоплПриизмененииСеревер()
	Запрос = новый запрос;
	Запрос.текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажаЗапчастейТаблица.НомерСтроки) КАК Товары,
	|	СУММА(ВЫБОР
	|		КОГДА ПродажаЗапчастейТаблица.Партия = ЗНАЧЕНИЕ(Справочник.ИндКод.ПустаяСсылка)
	|		И ПродажаЗапчастейТаблица.Товар.Категория.Наименование <> ""Услуги""
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК пусто,
	|	ПродажаЗапчастейТаблица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_пусто
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|СГРУППИРОВАТЬ ПО
	|	ПродажаЗапчастейТаблица.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажаЗапчастейТаблица.НомерСтроки) КАК Товары,
	|	СУММА(ВЫБОР
	|		КОГДА ПродажаЗапчастейТаблица.СтатусТовара
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Выдано,
	|	ПродажаЗапчастейТаблица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Выдача
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|СГРУППИРОВАТЬ ПО
	|	ПродажаЗапчастейТаблица.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументПродажаЗапчастей.Ссылка КАК Ссылка,
	|	ДокументПродажаЗапчастей.ВерсияДанных КАК ВерсияДанных,
	|	ДокументПродажаЗапчастей.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументПродажаЗапчастей.Номер КАК Номер,
	|	ДокументПродажаЗапчастей.Дата КАК Дата,
	|	ДокументПродажаЗапчастей.Проведен КАК Проведен,
	|	ДокументПродажаЗапчастей.Клиент КАК Клиент,
	|	ДокументПродажаЗапчастей.Комментарий КАК Комментарий,
	|	ДокументПродажаЗапчастей.Доставка КАК Доставка,
	|	ДокументПродажаЗапчастей.Расход КАК Расход,
	|	ДокументПродажаЗапчастей.СрокПроверки КАК СрокПроверки,
	|	ДокументПродажаЗапчастей.Организация КАК Организация,
	|	ДокументПродажаЗапчастей.ИтогоРекв КАК ИтогоРекв,
	|	ДокументПродажаЗапчастей.КтоПродал КАК КтоПродал,
	|	ДокументПродажаЗапчастей.Оплачено КАК Оплачено,
	|	ДокументПродажаЗапчастей.УжеОплачено КАК УжеОплачено,
	|	ДокументПродажаЗапчастей.Откат КАК Откат,
	|	ДокументПродажаЗапчастей.КомуОткат КАК КомуОткат,
	|	ДокументПродажаЗапчастей.ОтданоМарату КАК ОтданоМарату,
	|	ДокументПродажаЗапчастей.ИтогоБезнал КАК ИтогоБезнал,
	|	ДокументПродажаЗапчастей.АртикулВНазвании КАК АртикулВНазвании,
	|	ДокументПродажаЗапчастей.ВычитатьИзСуммы КАК ВычитатьИзСуммы,
	|	ДокументПродажаЗапчастей.ПотеряНаОбналичку КАК ПотеряНаОбналичку,
	|	ДокументПродажаЗапчастей.МоментВремени КАК МоментВремени,
	|	ДокументПродажаЗапчастей.ОстатокДенег КАК ОстатокДенег,
	|	ДокументПродажаЗапчастей.ЕстьДоставка КАК ЕстьДоставка,
	|	ДокументПродажаЗапчастей.ДоставкаНеЗаполнена КАК ДоставкаНеЗаполнена,
	|	ДокументПродажаЗапчастей.Новые КАК Новые,
	|	ДокументПродажаЗапчастей.TipOplati КАК TipOplati,
	|	ДокументПродажаЗапчастей.СтатусДоставки КАК СтатусДоставки,
	|	ДокументПродажаЗапчастей.ДокументыПолучены КАК ДокументыПолучены,
	|	ДокументПродажаЗапчастей.ИтогоРекв - ЕСТЬNULL(Оплаты.Сумма, 0) КАК остаток1,
	|	ДокументПродажаЗапчастей.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДокументПродажаЗапчастей.НомерУПД КАК НомерУПД,
	|	ДокументПродажаЗапчастей.ДатаУПД КАК ДатаУПД,
	|	ДокументПродажаЗапчастей.ТоварнаяНакладная КАК ТоварнаяНакладная,
	|	ДокументПродажаЗапчастей.ДатаТоварнойНакладной КАК ДатаТоварнойНакладной,
	|	ЕСТЬNULL(Оплаты.Сумма, 0) КАК ОплаченоНа,
	|	ДокументПродажаЗапчастей.НомерЗаказНаряда КАК НомерЗаказНаряда,
	|	ДокументПродажаЗапчастей.НомерВнешний КАК НомерВнешний,
	|	ДокументПродажаЗапчастей.Склад КАК Склад,
	|	ДокументПродажаЗапчастей.Проект КАК Проект,
	|	ЕСТЬNULL(ДокументПродажаЗапчастей.ДоговорКонтрагента.Подписан, ИСТИНА) КАК ДоговорПодписан,
	|	ДокументПродажаЗапчастей.Клиент.ИНН КАК КлиентИНН,
	|	ДокументПродажаЗапчастей.ЗаказКлиента.Канал КАК Канал,
	|	ДокументПродажаЗапчастей.СтатусПродажи КАК СтатусПродажи,
	|	ДокументПродажаЗапчастей.Закрыта КАК Закрыта,
	|	ДокументПродажаЗапчастей.ЖдемДенегВТечение КАК ЖдемДенегВТечение,
	|	ДокументПродажаЗапчастей.ОжидаемаяДатаВыплаты КАК ОжидаемаяДатаВыплаты,
	|	ВТ_Выдача.Товары КАК Товары,
	|	ВТ_Выдача.Выдано КАК Выдано,
	|	ВТ_Пусто.пусто КАК Пустые
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ДокументПродажаЗапчастей
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Оплаты.Документ КАК Документ,
	|			СУММА(Оплаты.Сумма) КАК Сумма
	|		ИЗ
	|			(ВЫБРАТЬ
	|				БаланПоНакладнойОстатки.Измерение1 КАК Документ,
	|				БаланПоНакладнойОстатки.СуммаОстаток КАК Сумма
	|			ИЗ
	|				РегистрНакопления.БаланПоНакладной.Остатки КАК БаланПоНакладнойОстатки
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ
	|				ОплатыПоСделкамОбороты.Документ,
	|				ОплатыПоСделкамОбороты.СуммаОборот
	|			ИЗ
	|				РегистрНакопления.ОплатыПоСделкам.Обороты КАК ОплатыПоСделкамОбороты) КАК Оплаты
	|		СГРУППИРОВАТЬ ПО
	|			Оплаты.Документ) КАК Оплаты
	|		ПО ДокументПродажаЗапчастей.Ссылка = Оплаты.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выдача КАК ВТ_Выдача
	|		ПО ДокументПродажаЗапчастей.Ссылка = ВТ_Выдача.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_пусто КАК ВТ_Пусто
	|		ПО ДокументПродажаЗапчастей.Ссылка = ВТ_Пусто.Ссылка %1";
	Если неопл Тогда
		Текст = 	"ГДЕ
	|	ДокументПродажаЗапчастей.КтоПродал = &КтоПродал
	|	И ДокументПродажаЗапчастей.СтатусПродажи = &СтатусПродажи";
	Список.ТекстЗапроса = СтрШаблон(Запрос.Текст,	Текст);
	Список.Параметры.УстановитьЗначениеПараметра("КтоПродал",Пользователи.ТекущийПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("СтатусПродажи",Перечисления.СтатусыПродажи.Актуальная);
	Иначе
		Текст = 	"";
	Список.ТекстЗапроса = СтрШаблон(Запрос.Текст,	Текст);
	
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура усторг(Команда)
	// Вставить содержимое обработчика.
	усторг_с();
КонецПроцедуры

&НаСервере
Процедура усторг_с()
	выборка = Документы.ПродажаЗапчастей.Выбрать();
	орг = Справочники.Организация.НайтиПоКоду("000000004");
	типопл = Справочники.TipOplati.НайтиПоКоду("000000002");
	Пока выборка.Следующий() Цикл
		Если выборка.TipOplati.Пустая() Тогда
			об = выборка.ПолучитьОбъект();
			об.Организация = орг;
			об.TipOplati = типопл;
			об.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

			
		

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	

	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьУсловноеОформление();
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы



#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Договор
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДоговорКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДоговорПодписан", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()

	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("РедактированиеДоставкиВПродаже")) Тогда
		Элементы.Группа4.Видимость 					= Ложь;
		Элементы.Организация1.Видимость 			= Ложь;
		Элементы.TipOplatiSokrNazvanie.Видимость 	= Ложь;
		Элементы.Название.Видимость 				= Ложь;
		Элементы.ИтогоРекв.Видимость	 			= Ложь;
		Элементы.Оплачено.Видимость 				= Ложь;
		Элементы.Закрыта.Видимость 					= Ложь;
		Элементы.СтатусПродажи.Видимость 			= Ложь;
		Элементы.ОплаченоНа.Видимость 				= Ложь;
		Элементы.ДоговорКонтрагента.Видимость 		= Ложь;
		Элементы.Склад.Видимость 					= Ложь;
		Элементы.Проект.Видимость 					= Ложь;
		Элементы.СтатусДоставки.Видимость 			= Ложь;
		Элементы.КлиентИНН.Видимость 				= Ложь;
		Элементы.НомерЗаказНаряда.Видимость 		= Ложь;
		Элементы.ГруппаУПД.Видимость 				= Ложь;
		Элементы.ГруппаНакладная.Видимость 			= Ложь;
		Элементы.НомерВнешний.Видимость 			= Ложь;
		Элементы.Группа2.Видимость 					= Ложь;
	КонецЕсли;

КонецПроцедуры


#КонецОбласти


&НаСервере
Функция СписокВКоллекциюЗначений()
	
	//Получаем схема компановки данных (здесь хранится текст запроса)
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	//Получаем настройки пользователя (отборы, сортировки и т.п.)
	Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	//Выводим динамический список в таблицу значений
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//Возвращаем полученную таблицу значений
	Возврат  Результат;
	
КонецФункции

Процедура ПересчётИтогиДокументов()
	//Орг 		= Справочники.Организация.НайтиПоКоду("000000001"); 
	//Таб 		= СписокВКоллекциюЗначений();
	//СуммаНал 	= 0;
	//СуммаБезнал = 0;
	//СуммаПоИП   = 0;
	//Для каждого стр из таб цикл
	//	СуммаНал 	= СуммаНал 	  + стр.ИтогоРекв;	
	//	СуммаБезнал = СуммаБезнал + стр.ИтогоБезнал;
	//	Если стр.Организация =  Орг Тогда
	//		СуммаПоИП   = СуммаПоИП + стр.ИтогоБезнал;
	//	КонецЕсли;
	//КонецЦикла;
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
    //СуммаПоИП =  Формат(Результат.Итог("ИтогоБезнал"),"ЧДЦ=0; ЧН=-");
	СуммаБезнал =  Формат(Результат.Итог("ИтогоБезнал"),"ЧДЦ=0; ЧН=-");
	СуммаНал =  Формат(Результат.Итог("ИтогоРекв"),"ЧДЦ=0; ЧН=-");
	СуммаОприходовано =  Формат(Результат.Итог("ОплаченоНа"),"ЧДЦ=0; ЧН=-");
	//651 005 092
	//650 970 229
КонецПроцедуры

&НаКлиенте
Процедура ПересчетИтогов(Команда)
	
	ПересчётИтогиДокументов();
	
КонецПроцедуры





