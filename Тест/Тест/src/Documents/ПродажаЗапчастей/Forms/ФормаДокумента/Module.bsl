//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	Если объект.СтатусПродажи = Перечисления.СтатусыПродажи.Сорвалась И ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) тогда
		ЭтаФорма.Элементы.Страницы.Доступность = Истина;
	КонецЕсли;
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) 
	//	И Не ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//	"Документ " + Объект.Ссылка.Метаданные().Синоним + " можно создать только на основании заявки клиента",
	//	,
	//	,
	//	,
	//	Отказ
	//	);
	//	Возврат
	//КонецЕсли;
	
	//НомерНакладной=ОпредеалитьНомер();
	Расходы.Параметры.УстановитьЗначениеПараметра("Откуда",Объект.Ссылка);
	ВыводДенег.Параметры.УстановитьЗначениеПараметра("Документ",Объект.Ссылка);
	
	// ++ obrv 10.05.18
	// Перенесено в условное оформление
	//Если Не РольДоступна("Администратор") Тогда
	//	Элементы.Расходы.Видимость = Ложь;
	//	Элементы.ВыводДенег.Видимость = Ложь;
	//КонецЕсли;
	// -- obrv 10.05.18
	
	ОбновитьПризнакУчетаНДС();
	ОбновитьДобавленныеКолонки();
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтаФорма);
	
	рассчётКоличества();
	СтатусПродажиПриИзмененииНаСервере();
	УстановитьВидимостьИДоступностьЭлементов();
	
	///+ГомзМА 11.05.2023
	Объект.ВклВыклРасходникиВСтоимость = Перечисления.ВклВыклРасходниковВСтоимость.ВключитьРасходникиВСтоимость;
	///-ГомзМА 11.05.2023
	
	#Если НЕ МобильныйКлиент тогда
		СписокПоступлений.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	#КонецЕсли
	

	// Смотрим есть ли у клиента бонусы.
	//ПолучениеСуммыБонусовКлиента();
	
КонецПроцедуры


Процедура рассчётКоличества()
	КоличествоДеталей = 0;
	Для Каждого стр из Объект.Таблица  Цикл
		КоличествоДеталей = КоличествоДеталей + Стр.количество;	
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция ПроверитьРольПользователя()
	
	///+ГомзМА 21.03.2023
	ПользовательСодержитРоль = Ложь;
	Если (ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_Зарплата")) 
		ИЛИ ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава")) 
		ИЛИ ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава"))) Тогда
		ПользовательСодержитРоль = Истина;
	КонецЕсли;
	Возврат ПользовательСодержитРоль;
	///-ГомзМА 21.03.2023
	
КонецФункции 


&НаСервере
Функция ПроверитьРольКладовщик()
	
	///+Сергеев 07.09.2023
	ПользовательСодержитРоль = Ложь;
	Если  ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("СписаниеТоваров")) ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя = Справочники.Пользователи.НайтиПоНаименованию("Сергеев Фёдор Витальевич").Наименование ИЛИ		
		ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя = Справочники.Пользователи.НайтиПоНаименованию("Гомзякова Маргарита Александровна").Наименование Тогда 
		ПользовательСодержитРоль = Истина;
	КонецЕсли;
	Возврат ПользовательСодержитРоль;
	///-Сергеев 07.09.2023
	
КонецФункции


&НаСервере
Процедура ПодключитьВнешнююКомпонентуПоПути()
	
	
	ПодключитьВнешнююКомпоненту("C:\Program Files\1cv8\8.3.22.1750\bin\KbdHook64.dll", "СС", ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

  Функция ПроверкаНаМенеджера () 
  	// ++МазинЕС  22-07-2024
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("МенеджерПоПродажам")) Тогда  
		 //Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаСоздать.Видимость = ЛОЖЬ;
		 Если  НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда   
			 Возврат истина;
			иначе  Возврат Ложь;  
		 КонецЕсли; 
	Иначе Возврат Ложь; 
	КонецЕсли;
	// ++МазинЕС  22-07-2024
	КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// ++МазинЕС  22-07-2024
		Если  ПроверкаНаМенеджера () тогда 
		 Сообщение = новый СообщениеПользователю; 
		Сообщение.Текст = "Продажи можно создавать ТОЛЬКО чере сай WT10 !!!"; 
			 Сообщение.Сообщить();
		Отказ = Истина ; 
		КонецЕсли;
	// --МазинЕС 22-07-2024
	///+ГомзМА 09.08.2023
	#Если МобильныйКлиент Тогда
		Элементы.СканироватьКоды.Видимость = Истина;
	#Иначе
		Элементы.СканироватьКоды.Видимость = Ложь;
	#КонецЕсли
	///-ГомзМА 09.08.2023
	
	//
	ПользовательСодержитРоль = ПроверитьРольПользователя();
	
	//Если Объект.Дата < '20220303' Тогда
	//	Если Не ЗначениеЗаполнено(объект.ЗаказКлиента) И НЕ ПользовательСодержитРоль Тогда
	//		СтандартнаяОбработка = Ложь;
	//		ПоказатьОповещениеПользователя("Продажа по данной заявке уже есть!");
	//		ЭтаФорма.Закрыть();
	//	КонецЕсли;
	//КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	элементы.ТаблицаСтатусТовара.Доступность = ПроверитьРольКладовщик();
	
	// ++ obrv 10.05.18
	//Если Параметры.Ключ.Пустая() Тогда
	//	Объект.КтоПродал = НайтиПользователя();
	//КонецЕсли;
	// -- obrv 10.05.18
	
	Если ПолностьюОплачено() Тогда
		Элементы.УжеОплачено.Видимость = Ложь;
	Иначе
		Элементы.УжеОплачено.Видимость = Истина;
	КонецЕсли;
	Если ПоказыватьРекЦену Тогда
		Элементы.ТаблицаТоварРекомендованаяЦена.Видимость = ИСТИНА;
	Иначе
		Элементы.ТаблицаТоварРекомендованаяЦена.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	Если ВозвратЗначение() = Истина Тогда
		Элементы.СуммаВозврат.Видимость = Истина;
	Иначе
		Элементы.СуммаВозврат.Видимость = Ложь;
	КонецЕсли;
	
	ПосчитатьИтоги();
	//ПересчетИтоговСУчетомСписанияБонусов();
	
//	Если Объект.БылоСписаниеБонусов = Истина Тогда
//		Элементы.ИтогоРекв.Заголовок = "Сумма заказа с учетом списания бонусов";
//		
//	Иначе
//		Элементы.ИтогоРекв.Заголовок = "Сумма заказа";
//	КонецЕсли;
	
	
	колво = 0;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Таблица Цикл	
		колво = колво + СтрокаТабличнойЧасти.Количество;
	КонецЦикла;
	Если Объект.ЕстьДоставка = Истина Тогда
		ЭтаФорма.Элементы.ГруппаДоставкаТранспортнаяКомпания.Видимость = Истина;
		ЭтаФорма.Элементы.Группа21.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ГруппаДоставкаТранспортнаяКомпания.Видимость = Ложь;
		ЭтаФорма.Элементы.Группа21.Видимость = Ложь;
	КонецЕсли;
	Если Объект.Скидка > 0 Тогда
		Элементы.Группа17.Видимость = Истина;
		Процент = Истина;
		Элементы.ПолнаяЦена.Видимость = Истина;
		ПосчитатьИтоги();
		//ПересчетИтоговСУчетомСписанияБонусов()
	КонецЕсли;
	Если  НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		УстановитьЗначПоУм();
	КонецЕсли;
	
	Если Объект.доставкаКлиент = Истина Тогда
		Элементы.Группа20.Видимость = Истина;
		Если Объект.частный = Истина Тогда
			Элементы.Паспорт.Видимость = Истина;
			Элементы.Прописка.Видимость = Истина;
			Элементы.ИНН.Видимость = Ложь;
			Элементы.НаименованиеИлиФИО.Заголовок = "ФИО";
		Иначе
			Элементы.Паспорт.Видимость = Ложь;
			Элементы.Прописка.Видимость = Ложь;
			Элементы.ИНН.Видимость = Истина;
			Элементы.НаименованиеИлиФИО.Заголовок = "Наименование";
		КонецЕсли;
	Иначе
		Элементы.Группа20.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДляБланкаОтчёта.Заголовок = "Для бланка отчёта "+ "("+КоличествоДеталей+")";
	УстановитьВидимостьДоступность();
	
	Для каждого СтрокаТаблицы Из Объект.Таблица Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
			СтрокаТаблицы.Склад = Объект.Склад;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДобавленныеКолонки();
	
	///+ГомзМА 23.10.2023
	СодержитРоли = ПользовательСодержитРоли();
	///-ГомзМА 23.10.2023
	
	///+ГомзМА 04.05.2023
	Если ЭтаФорма.ТолькоПросмотр = Истина И
		НЕ СодержитРоли Тогда
		ЭтаФорма.ТолькоПросмотр = Ложь;
		
		Элементы.Группа3.ТолькоПросмотр 						= Истина;
		Элементы.Группа4.ТолькоПросмотр 						= Истина;
		//Волков ИО 20.02.24 ++
		
		//Элементы.ГруппаШапка.ТолькоПросмотр 					= Истина;
		Элементы.ГруппаШапкаЛево.ТолькоПросмотр 				= Истина;
		Элементы.НомерВнешний.ТолькоПросмотр					= Истина;
		Элементы.ЗаказНаряд.ТолькоПросмотр						= Истина;
		Элементы.СтатусОбработки.ТолькоПросмотр 				= Истина;
		Элементы.ГруппаСчет.ТолькоПросмотр 						= Истина;
		Элементы.ГруппаДоговор.ТолькоПросмотр 					= Истина;
		Элементы.ЗаказКлиента.ТолькоПросмотр 					= Истина;
		//Волков ИО 20.02.24 --
		Элементы.Группа19.ТолькоПросмотр 						= Истина;
		Элементы.Расходы.ТолькоПросмотр 						= Истина;
		Элементы.ВыводДенег.ТолькоПросмотр 						= Истина;
		Элементы.БухгалтерскиеДокументы.ТолькоПросмотр			= Истина;
		Элементы.Группа27.ТолькоПросмотр 						= Истина;
		Элементы.ГруппаОтветственные.ТолькоПросмотр 			= Истина;
		Элементы.Разное.ТолькоПросмотр 							= Истина;
		Элементы.ДляБланкаОтчёта.ТолькоПросмотр 				= Истина;
		//Элементы табличной части Таблица
		Элементы.Таблица.КоманднаяПанель.Доступность 			= Ложь;
		Элементы.ТаблицаНомерСтроки.ТолькоПросмотр 				= Истина;
		Элементы.ТаблицаПартия.ТолькоПросмотр 					= Истина;
		Элементы.ТаблицаТоварКод.ТолькоПросмотр 				= Истина;
		Элементы.ТаблицаТоварАртикул.ТолькоПросмотр 			= Истина;
		Элементы.ТаблицаТоварНомерПроизводителя.ТолькоПросмотр 	= Истина;
		Элементы.ТаблицаТовар.ТолькоПросмотр 					= Истина;
		Элементы.ТаблицаТоварРекомендованаяЦена.ТолькоПросмотр 	= Истина;
		Элементы.ТаблицаМестоХранения.ТолькоПросмотр 			= Истина;
		Элементы.ТаблицаКоличество.ТолькоПросмотр 				= Истина;
		Элементы.ТаблицаЦена.ТолькоПросмотр 					= Истина;
		Элементы.ТаблицаСумма.ТолькоПросмотр 					= Истина;
		Элементы.ТаблицаСуммаНДС.ТолькоПросмотр 				= Истина;
		Элементы.ТаблицаСклад.ТолькоПросмотр 					= Истина;
		Элементы.ТаблицаКомментарий.ТолькоПросмотр 				= Истина;
		Элементы.Таблицамашина.ТолькоПросмотр 					= Истина;
		
		Элементы.ТаблицаОтменено.ТолькоПросмотр = Ложь;
	КонецЕсли;
	///-ГомзМА 04.05.2023
	
	//Волков ИО 20.02.24 Наряд 000005414 ++
	Элементы.Проект.ТолькоПросмотр = Ложь;
	//Волков ИО 20.02.24 Наряд 000005414 --
	
	
	РассчетКоличестваРасходников();
	QRКод = "";
	// Проверка = ГенераторШтрихКодаКлиент.УстановитьКомпонентуШтрихКодирования("");
	штрихкод = Получитькомпоненту();  
	Элементы.QRКод.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	
	ВыводЛога();
	// Смотрим есть ли у клиента бонусы.
	//ПолучениеСуммыБонусовКлиента();
	
	
	
КонецПроцедуры  
&НаСервере
Функция Получитькомпоненту()
	ТекстОшибки = "";
	
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(ТекстОшибки); 
	Штрихкод.Ширина = 250; 
	Штрихкод.Высота = 250;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = объект.Номер;
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод,Истина);
	
	QRкод = ПоместитьВоВременноеХранилище(КартинкаШтрихКод,УникальныйИдентификатор);
	возврат истина;
КонецФункции



&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если   (Объект.Дата - Объект.ПроверкаЗапрета) > 1800 Тогда	
		ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	///+ГомзМА 19.12.2023
	Если Параметры.Ключ.Пустая() Тогда
		Нов = Истина;
	КонецЕсли; 
	///-ГомзМА 19.12.2023
	
	ПосчитатьИтоги();
	//ПересчетИтоговСУчетомСписанияБонусов();
	ОбновитьОстатокДенег();
	Доставка();
	
	// ++ obrv 24.01.18
	Если ЭтаФорма.Модифицированность
		И ЗначениеЗаполнено(Объект.Основание) 
		И НЕ ПараметрыЗаписи.Свойство("ОтключитьПроверкуСчета") Тогда
		
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписью_ОбновитьСчет", ЭтотОбъект), "Обновить данные счета?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	// -- obrv 24.01.18
	
	// ++ obrv 24.05.18
	Если Не Отказ И ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		ПодготовитьНапоминанияОтветственным();
	КонецЕсли;
	// -- obrv 24.05.18
	Если Объект.Дата > '20200101' Тогда
		Объект.ДатаСписания = ТекущаяДата();
	КонецЕсли;
	
	///+ГомзМА 23.01.2023
	//При наличии продажи статус клиента меняется с "потенциального" на "действующий"
	ЗаменитьЗначениеСтатусКлиентаВСправочникеКлиенты();
	///-ГомзМА 23.01.2023
	
	//Волков И.О. 22.11.23 ++ 
	

	Если не ЗначениеЗаполнено(Объект.ДатаОтгрузкиСоСклада) Тогда 
		
		ПроставтьДатуОтгрузкиСоСклада = Ложь;
		
		Для Каждого стр из Объект.Таблица Цикл 
			
			Если стр.СтатусТовара Тогда
				ПроставтьДатуОтгрузкиСоСклада = Истина;
			Иначе 
				ПроставтьДатуОтгрузкиСоСклада  = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПроставтьДатуОтгрузкиСоСклада Тогда 
			
			Объект.ДатаОтгрузкиСоСклада = ТекущаяДата();	
			
		КонецЕсли;
		
		
	КонецЕсли;    
	
	//Волков И.О. 22.11.23 --
	

	
	
КонецПроцедуры



&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если РеквизитФормыВЗначение("Объект").ЭтоНовый() тогда
	//	СоздатьКаталог("C:\Продажи\"+объект.Номер);
	//КонецЕсли;
	
	///+ГомзМА 06.02.2023
	//Проверка на наличие дублирующихся строк в табличной части
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажаЗапчастейТаблица.Товар КАК Товар,
	|	ПродажаЗапчастейТаблица.Партия КАК Партия,
	|	ПродажаЗапчастейТаблица.Склад КАК Склад,
	|	ПродажаЗапчастейТаблица.машина КАК машина,
	|	ПродажаЗапчастейТаблица.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Продажа
	|ИЗ
	|	Документ.ПродажаЗапчастей.Таблица КАК ПродажаЗапчастейТаблица
	|ГДЕ
	|	ПродажаЗапчастейТаблица.Ссылка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Продажа.Товар КАК Товар,
	|	ВТ_Продажа.Партия КАК Партия,
	|	ВТ_Продажа.Склад КАК Склад,
	|	ВТ_Продажа.машина КАК машина,
	|	ВТ_Продажа.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Продажа КАК ВТ_Продажа
	|ГДЕ
	|	(ВТ_Продажа.Товар, ВТ_Продажа.Партия, ВТ_Продажа.Склад, ВТ_Продажа.машина) В
	|			(ВЫБРАТЬ
	|				ВТ_Продажа.Товар КАК Товар,
	|				ВТ_Продажа.Партия КАК Партия,
	|				ВТ_Продажа.Склад КАК Склад,
	|				ВТ_Продажа.машина КАК машина
	|			ИЗ
	|				ВТ_Продажа КАК ВТ_Продажа
	|			СГРУППИРОВАТЬ ПО
	|				ВТ_Продажа.Товар,
	|				ВТ_Продажа.Партия,
	|				ВТ_Продажа.Склад,
	|				ВТ_Продажа.машина
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(ВТ_Продажа.НомерСтроки) > 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Товар,
	|	Партия,
	|	Склад,
	|	машина";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не Пользователи.РолиДоступны("ПолныеПрава") тогда
		Если НЕ РезультатЗапроса.Пустой() И Объект.Дата > '20230205' Тогда
			ВыборкаТовар = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТовар.Следующий() Цикл 
				ВыборкаПартия = ВыборкаТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
				Пока ВыборкаПартия.Следующий() Цикл 
					Если ВыборкаПартия.Партия <> Справочники.ИндКод.ПустаяСсылка() Тогда
						ВыборкаСклад = ВыборкаПартия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаСклад.Следующий() Цикл
							ВыборкаМашина = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаМашина.Следующий() Цикл
								Выборка = ВыборкаМашина.Выбрать();
								ТекстСообщения = "";
								Пока Выборка.Следующий() Цикл
									ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", ", ") + " Номер строки - " + Выборка.НомерСтроки + ", Номенклатура - " + Выборка.Товар;
								КонецЦикла;
								//ТекстСообщения = "Невозможно провести документ! Обнаружено дублирование строк: " + ТекстСообщения;
								//Сообщить(ТекстСообщения);
								//Отказ = Истина;
							КонецЦикла;
						КонецЦикла; 
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	///-ГомзМА 06.02.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ОбновитьСчетПослеЗаписи Тогда
		
		ОбновитьСчетНаСервере();
		ОбновитьСчетПослеЗаписи = Ложь;
		
	КонецЕсли;
	
	
	// Создаем напоминания
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		СоздатьНапоминанияОтветственным();
	КонецЕсли;
	
	
	
	//ОповеститьОбИзменении(Объект.Ссылка);
	Оповестить("ОстаткиИзменение");
	
	///+ГомзМА 19.12.2023
	Если Нов тогда
		ТекстЛога = "Создал заявку " + объект.номер;
		ЗаписьЛога(ТекстЛога);
		Нов = Ложь;
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
	//ПолучениеСуммыБонусовКлиента();
	
КонецПроцедуры



&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьДобавленныеКолонки();
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(строка(объект.ЗаказКлиента.НомерТелефона));
	
	ФоновыеЗадания.Выполнить("МоиЗвонкиИЗаявки.ПолучитьТаблицуЗвонковПоНомеруТелефонаОбр",МассивПараметров,Новый УникальныйИдентификатор);	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	Если Объект.БылоСписаниеБонусов = Истина Тогда
		Элементы.ОтменитьСписание.Доступность = Ложь;
	КонецЕсли;
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	// Вставить содержимое обработчика.
	Перем Команда;
	Перем деталь;
	Перем код;
	Перем машина;
	Перем цена;
	Перем укод;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);
		Если Команда = "ПравильныйПоиск" Тогда
			ДобавлениеЗапчасти(ВыбранноеЗначение);
		ИначеЕсли Команда = "МножественныйВыбор" Тогда
			ДобавлениеЗапчастиГруппой(ВыбранноеЗначение);	
		КонецЕсли;
		
		ТаблицаТоварПриИзменении(Неопределено);
		ПосчитатьИтоги();
		//ПересчетИтоговСУчетомСписанияБонусов();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ИндКод") Тогда
		
		ИмяТабличнойЧасти = "Таблица";	
		Элементы[ИмяТабличнойЧасти].ТекущиеДанные.Партия = ВыбранноеЗначение;
		Если ИмяТабличнойЧасти = "Таблица" Тогда
			ТоварыПартияПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли     
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// Вставить содержимое обработчика.
	Если Объект.ЕстьДоставка <> Истина И Объект.Самовывоз <> Истина Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указанспособ доставки на вкладке Доставка!";
		Сообщение.Поле = "Доставка или Самовывоз";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;    
	//	Если Объект.ЕстьДоставка = Истина И Объект.СтатусДоставки.Пустая() Тогда
	//		Сообщение = Новый СообщениеПользователю();
	//    	Сообщение.Текст = "Необходимо указать статус доставки";
	//    	Сообщение.Поле = "СтатусДоставки";
	//    	Сообщение.Сообщить();
	// 		Отказ = Истина;
	//	КонецЕсли;
	
	// ++ obrv 10.09.18
	//Для Каждого стр Из Объект.Таблица Цикл
	//	з = Новый Запрос;
	//	з.Текст = "ВЫБРАТЬ
	//	          |	РегистрНакопления1.Колво
	//	          |ИЗ
	//	          |	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1
	//	          |ГДЕ
	//	          |	РегистрНакопления1.Товар = &Товар
	//	          |	И РегистрНакопления1.машина = &машина
	//	          |	И РегистрНакопления1.ВидДвижения = &ВидДвижения";
	//	з.УстановитьПараметр("машина",стр.машина);
	//	з.УстановитьПараметр("Товар",стр.Товар);
	//	з.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Приход);
	//	к = з.Выполнить().Выгрузить().Итог("Колво");
	//	Если стр.Количество > к Тогда
	//		Сообщение = Новый СообщениеПользователю();
	//    	Сообщение.Текст = "Для Товара "+стр.Товар.Наименование+" указано неправильное количество! Было учтено всего "+к+" деталей с машины "+стр.машина.Наименование;
	//    	Сообщение.Поле = "Количество";
	//    	Сообщение.Сообщить();
	// 		Отказ = Истина;
	//	КонецЕсли;
	//КонецЦикла; 	
	// -- obrv 10.09.18
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Для каждого СтрокаТаблицы Из Объект.Таблица Цикл
		СтрокаТаблицы.Склад = Объект.Склад;
	КонецЦикла;
	
	ОбновитьДобавленныеКолонки();
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил склад на " + Объект.Склад);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	Если Процент = Истина Тогда
		Элементы.Группа17.Видимость = Истина;
		Элементы.ПолнаяЦена.Видимость = Истина;
	Иначе
		Элементы.Группа17.Видимость = Ложь;
		Элементы.ПолнаяЦена.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура доставкаКлиентПриИзменении(Элемент)
	Если Объект.доставкаКлиент = Истина Тогда
		Элементы.Группа20.Видимость = Истина;
		Если Объект.частный = Истина Тогда
			Элементы.Паспорт.Видимость = Истина;
			Элементы.Прописка.Видимость = Истина;
			Элементы.ИНН.Видимость = Ложь;
			Элементы.НаименованиеИлиФИО.Заголовок = "ФИО";
		Иначе
			Элементы.Паспорт.Видимость = Ложь;
			Элементы.Прописка.Видимость = Ложь;
			Элементы.ИНН.Видимость = Истина;
			Элементы.НаименованиеИлиФИО.Заголовок = "Наименование";
		КонецЕсли;
	Иначе
		Элементы.Группа20.Видимость = Ложь;
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура частныйПриИзменении(Элемент)
	Если Объект.доставкаКлиент = Истина Тогда
		Элементы.Группа20.Видимость = Истина;
		Если Объект.частный = Истина Тогда
			Элементы.Паспорт.Видимость = Истина;
			Элементы.Прописка.Видимость = Истина;
			Элементы.ИНН.Видимость = Ложь;
			Элементы.НаименованиеИлиФИО.Заголовок = "ФИО";
		Иначе
			Элементы.Паспорт.Видимость = Ложь;
			Элементы.Прописка.Видимость = Ложь;
			Элементы.ИНН.Видимость = Истина;
			Элементы.НаименованиеИлиФИО.Заголовок = "Наименование";
		КонецЕсли;
	Иначе
		Элементы.Группа20.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПриИзменении(Элемент)
	Если Объект.Скидка > 25 Тогда
		Сообщить("Слишком большое значение. Изменено на 25");
		Объект.Скидка = 25 ;
	КонецЕсли;
	ПосчитатьИтоги();
	
	//ПересчетИтоговСУчетомСписанияБонусов();
КонецПроцедуры


&НаКлиенте
Процедура НовыеПриИзменении(Элемент)
	Если Объект.Новые = ИСТИНА Тогда
		Если Найти(Объект.Комментарий,"Новые запчасти") = 0 Тогда
			Объект.Комментарий = Объект.Комментарий + " Новые запчасти"
		КонецЕсли;
	Иначе
		Объект.Комментарий = СтрЗаменить(Объект.Комментарий,"Новые запчасти","");
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ЕстьДоставкаПриИзменении(Элемент)
	
	объект.Самовывоз = не объект.ЕстьДоставка;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СамовывозПриИзменении(Элемент)
	
	Объект.ЕстьДоставка = Не Объект.Самовывоз;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоПриИзменении(Элемент)
	Если ПолностьюОплачено() Тогда
		Элементы.УжеОплачено.Видимость = Ложь;
	Иначе
		Элементы.УжеОплачено.Видимость = Истина;
	КонецЕсли;
	
	Попытка 
		ПереписьЗаявки();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПродолжение", ЭтотОбъект), "Заполнить по данным счета?", РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ЗаполнитьПродолжение(Неопределено, Неопределено);
		
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПризнакУчетаНДС();
	
	УстановитьВидимостьДоступность();
КонецПроцедуры



&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил клиента на " + Объект.Клиент);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	//
	 
	 
	ПриИзмененииКлиентНаСервере();
	
	
КонецПроцедуры

Процедура ПриИзмененииКлиентНаСервере()
	
	//КлиентОбъект = Объект.Клиент.ПолучитьОбъект();
	//
	//	Объект.СуммаБонусов = КлиентОбъект.БонусыКлиента.Итог("Бонусы");
	
	
КонецПроцедуры





//&НаКлиенте
//Процедура СколькоСписатьОкончаниеВводаТекста1(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
//	Если Объект.СколькоСписать > Объект.СуммаБонусов Или Объект.СколькоСписать = 0 Тогда
//		Элементы.СписатьБонусы.Доступность = Ложь;
//	Иначе 
//		Элементы.СписатьБонусы.Доступность = Истина;
//	КонецЕсли;
//КонецПроцедуры


//&НаКлиенте
//Процедура СколькоСписатьПриИзменении(Элемент)
//	Если Объект.СколькоСписать > Объект.СуммаБонусов Или Объект.СколькоСписать = 0 Тогда
//		Элементы.СписатьБонусы.Доступность = Ложь;
//	Иначе 
//		Элементы.СписатьБонусы.Доступность = Истина;
//	КонецЕсли;
//КонецПроцедуры

//&НаКлиенте
//Процедура СколькоСписатьИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
//	Если Объект.СколькоСписать > Объект.СуммаБонусов Или Объект.СколькоСписать = 0 Тогда
//		Элементы.СписатьБонусы.Доступность = Ложь;
//	Иначе 
//		Элементы.СписатьБонусы.Доступность = Истина;
//	КонецЕсли;
//КонецПроцедуры




//Процедура ПолучениеСуммыБонусовКлиента() 

//	// Перед проверкой ставим в ноль, чтобы не аккамулировать сумму в цикле.
//	
//	Если ЗначениеЗаполнено(Объект.Клиент)  Тогда
//		Объект.СуммаБонусов = 0;
//		
//		Если ЗначениеЗаполнено(Объект.Клиент) Тогда
//			КлиентОбъект = Объект.Клиент.ПолучитьОбъект();
//		КонецЕсли;
//		
//		Если КлиентОбъект.БонусыКлиента.Количество() = 0 Тогда
//			Объект.СуммаБонусов = 0;
//		Иначе 
//			Для Счетчик = 0 По КлиентОбъект.БонусыКлиента.Количество() -1 Цикл
//				Если КлиентОбъект.БонусыКлиента[Счетчик].Продажа = Объект.Ссылка  ИЛИ 
//				 	КлиентОбъект.БонусыКлиента[Счетчик].Списаны = Истина 
//				 	ИЛИ КлиентОбъект.БонусыКлиента[Счетчик].Дата > Объект.Дата Тогда
//					Продолжить;
//				Иначе 
//					Объект.СуммаБонусов = Объект.СуммаБонусов + КлиентОбъект.БонусыКлиента[Счетчик].Бонусы;	
//				КонецЕсли;
//		
//			КонецЦикла;
//		
//		КонецЕсли;
//	
//			Если Объект.БылоСписаниеБонусов = Истина И Объект.СуммаБонусов <> 0 Тогда 
//		
//				Элементы.СписатьБонусы.Доступность = Ложь;
//			КонецЕсли;
//			
//	КонецЕсли;
//	Если Объект.СколькоСписать = 0 Тогда
//		Элементы.СписатьБонусы.Доступность = Ложь;
//	КонецЕсли;
//	
//	
//КонецПроцедуры





//Процедура ПересчетИтоговСУчетомСписанияБонусов()
//	
//	
//	Если Объект.БылоСписаниеБонусов = Истина Тогда
//			Объект.ИтогоРекв = дт_ОбщегоНазначения.ИтоговаяСумма(Объект, "Таблица", "Отменено") - Объект.СколькоСписать;
//			
//	Иначе 
//			Объект.ИтогоРекв = дт_ОбщегоНазначения.ИтоговаяСумма(Объект, "Таблица", "Отменено");
//	КонецЕсли;
//	
//	Если Объект.ИтогоРекв <= 0 Тогда
//		Объект.ИтогоРекв = 0;
//	КонецЕсли;
//	
//	Если Объект.БылоСписаниеБонусов = Истина Тогда
//		Элементы.ИтогоРекв.Заголовок = "Сумма заказа с учетом списания бонусов";
//		
//	Иначе
//		Элементы.ИтогоРекв.Заголовок = "Сумма заказа";
//	КонецЕсли;
//		
//		
//КонецПроцедуры

//Процедура МаксимальнаяСуммаСписания()
//		Объект.МаксимальнаяСуммаСписанияБонусов = Объект.ИтогоРекв / 100 * 30;
//		
//		Если Объект.СколькоСписать > Объект.МаксимальнаяСуммаСписанияБонусов Тогда
//			
//			Сообщить("" + Объект.МаксимальнаяСуммаСписанияБонусов + " Максимальная сумма списания");
//			Объект.СколькоСписать = Объект.МаксимальнаяСуммаСписанияБонусов;
//		
//		КонецЕсли;
//КонецПроцедуры


//&НаКлиенте
//Процедура СписатьБонусы(Команда)
//	СписатьБонусыНаСервере();
//КонецПроцедуры

//&НаСервере
//Процедура СписатьБонусыНаСервере()
//	МаксимальнаяСуммаСписания = Объект.ИтогоРекв / 100 * 30;
//	
//	Сообщение = Новый СообщениеПользователю();
//	
//	Если Объект.СуммаБонусов <=  МаксимальнаяСуммаСписания Тогда
//		Объект.ИтогоРекв = дт_ОбщегоНазначения.ИтоговаяСумма(Объект, "Таблица", "Отменено");
//		
//		КлиентОбъект = Объект.Клиент.ПолучитьОбъект();
//		Для каждого СтрокаТЧ из КлиентОбъект.БонусыКлиента Цикл
//			СтрокаТЧ.Списаны = Истина;
//		КонецЦикла;
//		КлиентОбъект.Записать();
//		Сообщение.Текст = "Бонусы списаны.";
//		Сообщение.Сообщить();
//		Объект.СуммаБонусов = 0;
//		
//		
//		Возврат;
//		
//	ИначеЕсли Объект.СуммаБонусов >  МаксимальнаяСуммаСписания Тогда
//		
//		Если Объект.Таблица.Количество() <> 0 Тогда
//			СуммаСписания = МаксимальнаяСуммаСписания / Объект.Таблица.Количество();
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(Объект.Клиент) Тогда
//			КлиентОбъект = Объект.Клиент.ПолучитьОбъект();
//			
//			СколькоСписатьПерем = Объект.СколькоСписать;
//		
//		Пока СколькоСписатьПерем > 0 Цикл
//			Для каждого СтрокаТЧ из  КлиентОбъект.БонусыКлиента Цикл
//				Если СтрокаТЧ.Бонусы < СколькоСписатьПерем И СтрокаТЧ.Списаны = Ложь Тогда
//					СколькоСписатьПерем = СколькоСписатьПерем - СтрокаТЧ.Бонусы;
//					СтрокаТЧ.Списаны = Истина;
//					СтрокаТЧ.Бонусы = 0;
//				
//				ИначеЕсли  СтрокаТЧ.Бонусы > СколькоСписатьПерем И СтрокаТЧ.Списаны = Ложь Тогда
//					СтрокаТЧ.Бонусы = СтрокаТЧ.Бонусы - СколькоСписатьПерем;
//					СколькоСписатьПерем = 0;
//				ИначеЕсли СтрокаТЧ.Бонусы = СколькоСписатьПерем И СтрокаТЧ.Списаны = Ложь Тогда
//					СтрокаТЧ.Бонусы = СтрокаТЧ.Бонусы - СколькоСписатьПерем;
//					СтрокаТЧ.Списаны = Истина;
//					СтрокаТЧ.Бонусы = 0;
//					
//					СколькоСписатьПерем = 0;
//				КонецЕсли;

//			КонецЦикла;
//		
//		КонецЦикла;

//	КлиентОбъект.Записать();

//		КонецЕсли; 
//		
//		

//	//ПересчетИтоговСУчетомСписанияБонусов();
//	//Элементы.СписатьБонусы.Доступность = Ложь;
//	//ПолучениеСуммыБонусовКлиента(); 
//	//Элементы.ОтменитьСписание.Доступность = Истина;	
//	КонецЕсли;

//КонецПроцедуры



//&НаКлиенте
//Процедура ОтменитьСписание(Команда)
//	ОтменитьСписаниеНаСервере();
//КонецПроцедуры

//&НаСервере
//Процедура ОтменитьСписаниеНаСервере()
//	Если Объект.БылоСписаниеБонусов = Истина Тогда
//		Объект.БылоСписаниеБонусов = Ложь;
//	
//		Элементы.СписатьБонусы.Доступность = Истина;
//	
//		Если ЗначениеЗаполнено(Объект.Клиент) Тогда
//			КлиентОбъект = Объект.Клиент.ПолучитьОбъект();
//	
//			СписаннаяСумма = Объект.СколькоСписать;
//	
//		Пока СписаннаяСумма > 0 Цикл
//			Для Каждого СтрокаТЧ Из КлиентОбъект.БонусыКлиента Цикл 
//			
//				СтрокаТЧ.Бонусы = СтрокаТЧ.Бонусы + СписаннаяСумма;
//				СтрокаТЧ.Списаны = Ложь;
//				СписаннаяСумма = СписаннаяСумма - СтрокаТЧ.Бонусы;
//				Если СписаннаяСумма <= 0 Тогда
//					Прервать;
//				КонецЕсли;
//			КонецЦикла;
//		
//		КонецЦикла;
//	
//	
//		КлиентОбъект.Записать();
//			ПересчетИтоговСУчетомСписанияБонусов();
//		ПолучениеСуммыБонусовКлиента();
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры



&НаКлиенте
Процедура TipOplatiПриИзменении(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил тип оплаты на " + Объект.TipOplati);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура БезДоговораПриИзменении(Элемент)
	
	Если Объект.БезДоговора Тогда
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КтоПродалПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяНакладнаяПриИзменении(Элемент)
	
	Подключаемый_ОбновитьКоманды();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерУПДПриИзменении(Элемент)
	
	Подключаемый_ОбновитьКоманды();
	
КонецПроцедуры


&НаКлиенте
Процедура НачислятьНДСПриИзменении(Элемент)
	
	///+ГомзМА 10.04.2023
	//УстановитьВидимостьИДоступностьЭлементов();
	//
	//ПосчитатьИтоги();
	//Объект.СуммаДокументаНДС = Объект.Таблица.Итог("Сумма") / 1.2 * 0.2;
	//
	//ТекСтрока = Элементы.Таблица.ТекущиеДанные;
	//Если Объект.НачислятьНДС Тогда
	//	Если ЗначениеЗаполнено(Объект.Таблица) Тогда
	//		Для каждого Строка Из Объект.Таблица Цикл
	//			СуммаНДС = Строка.Цена * 0.2;
	//			Строка.Сумма = (Строка.Цена + СуммаНДС) * Строка.Количество;
	//			Строка.СуммаНДС = СуммаНДС * Строка.Количество;
	//		КонецЦикла;
	//		ПосчитатьИтоги();
	//		Объект.СуммаДокументаНДС = Объект.Таблица.Итог("Сумма") / 1.2 * 0.2;
	//	КонецЕсли;
	//Иначе
	//	Если ЗначениеЗаполнено(Объект.Таблица) Тогда
	//		Для каждого Строка Из Объект.Таблица Цикл
	//			СуммаНДС = Строка.Цена * 0;
	//			Строка.Сумма = (Строка.Цена + СуммаНДС) * Строка.Количество;
	//			Строка.СуммаНДС = СуммаНДС * Строка.Количество;
	//		КонецЦикла;
	//		ПосчитатьИтоги();
	//		Объект.СуммаДокументаНДС = 0;
	//	КонецЕсли;
	//КонецЕсли;
	///-ГомзМА 06.04.2023
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Ответственные

&НаКлиенте
Процедура ОтветственныеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура СоздатьСчетНаСервере()
	ДокСчет = Документы.ПредварительныйСчет.СоздатьДокумент();
	
	ДокСчет.Дата = ТекущаяДата();
	
	ДокСчет.Заполнить(Объект.Ссылка);
	Попытка
		
		ДокСчет.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтрШаблон("Не удалось записать счет. %1",
		ОписаниеОшибки())
		);
		Возврат;	
	КонецПопытки;	
	
	
	Объект.Основание = ДокСчет.Ссылка;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Оприходовано(Команда)
	// Вставить содержимое обработчика.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Попытка
			
			Записать();	
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат
		КонецПопытки;
	КонецЕсли;
	
	Если МожноОприходовать() Тогда
		док = ОприходоватьСерв();
		ПоказатьЗначение(, док);
	Иначе
		док = ПолучитьПриход();
		ТекстВопроса = "Эта продажа уже оприходована в документе "+ док +". Открыть документ?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОприходоватьПродолжение", ЭтотОбъект, Док), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОприходоватьПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		//ОткрытьФорму("Документ.ПриходДенегНаСчет.Форма.ФормаДокумента", Новый Структура("Ключ", ДополнительныеПараметры), ЭтаФорма);
		
		ПоказатьЗначение(, ДополнительныеПараметры);
		
	КонецЕсли;
	
	
КонецПроцедуры // ОприходоватьПродолжение()

&НаКлиенте
Процедура ТоварныйЧек(Команда)
	Если НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(, "Для выполнения команды необходимо провести документ");
		Возврат
	КонецЕсли;
	
	Если Объект.ИтогоРекв = 0 Тогда
		ПосчитатьИтоги();
		//ПересчетИтоговСУчетомСписанияБонусов();
	КонецЕсли;
	ПечатьНовые();
КонецПроцедуры

&НаКлиенте
Процедура НарядДоставка(Команда)
	//Объект.Ссылка.Пустая()
	Если  НЕ ЭтаФорма.Модифицированность  Тогда 
	ТабДокумент = НарядДоставкаСервер();
	ТабДокумент.Показать();
	Иначе ОткрытьЗначениеАсинх ("Для печати необходимо сохранить документ!")  
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайт(Команда)
	// Вставить содержимое обработчика.
	ОбщДействия.ПоискКодаНаСтаромСайте(ПолучитьКодТовара(ЭтаФорма.Элементы.Таблица.ТекущиеДанные.Товар));
КонецПроцедуры

&НаКлиенте
Процедура НарядНаСборку(Команда)  
	
	Если НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(, "Для выполнения команды необходимо провести документ");
		Возврат
	КонецЕсли;
	
	Если Объект.ИтогоРекв = 0 Тогда
		ПосчитатьИтоги();
		//ПересчетИтоговСУчетомСписанияБонусов();
	КонецЕсли;
	ТабДокумент = НарядНаСборкуСервер("Код");
	ТабДокумент.Показать();
КонецПроцедуры


&НаКлиенте
Процедура СоздатьСчет(Команда)
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		Возврат
	КонецЕсли;
	
	Попытка
		
		Записать(Новый Структура("ОтключитьПроверкуСчета", Истина));
		
	Исключение
		Возврат;
	КонецПопытки;
	
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли;
	
	
	СоздатьСчетНаСервере();
	
	УстановитьВидимостьДоступность();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры


&НаКлиенте
Процедура ПосчитатьИтого(Команда)
	// Вставить содержимое обработчика.
	ПосчитатьИтоги();
	//ПересчетИтоговСУчетомСписанияБонусов();
	ОбновитьОстатокДенег();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСчетНаСервере()
	ДокСчет = Объект.Основание.ПолучитьОбъект();
	
	Попытка
		ДокСчет.Заблокировать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Не удалось заблокировать счет для изменения. Закройте форму счета и повторите попытку"
		);
		Возврат;
	КонецПопытки;
	
	Попытка
		
		ДокСчет.Заполнить(Объект.Ссылка);
		ДокСчет.Записать();
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтрШаблон("Не удалось обновить счет. %1",
		ОписаниеОшибки())
		);
		Возврат;	
	КонецПопытки;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчет(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Основание) Тогда
		Возврат
	КонецЕсли;
	
	Попытка
		
		Записать(Новый Структура("ОтключитьПроверкуСчета", Истина));	
		
	Исключение
		Возврат;
	КонецПопытки;
	
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли;
	
	
	ОбновитьСчетНаСервере();
	
	УстановитьВидимостьДоступность();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПоказатьОповещениеПользователя("Счет обновлен");
	
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//	СтрШаблон("Счет обновлен")
	//);
КонецПроцедуры


&НаСервере
Функция ПроверитьДанные()
	
	///+ГомзМА 29.03.2023
	ДанныеСовпадают = Ложь;
	Если Объект.Основание <> Документы.ПредварительныйСчет.ПустаяСсылка() Тогда
		//Если Объект.Организация = Объект.Основание.Организация И
		// 	Объект.Клиент = Объект.Основание.Клиент Тогда
		Если Объект.Клиент = Объект.Основание.Клиент Тогда
			ДанныеСовпадают = Истина;
			
		КонецЕсли;
	Иначе
		ДанныеСовпадают = Истина;
	КонецЕсли;
	
	Возврат ДанныеСовпадают;
	///+ГомзМА 29.03.2023
	
КонецФункции // ДанныеСовпадают()


&НаКлиенте
Функция ПроверитьЗаполнениеДанных()
	
	///+ГомзМА 25.05.2023
	ДанныеЗаполнены = Истина;
	Если Объект.Таблица.Количество() = 0 Тогда
		ДанныеЗаполнены = Ложь;
	Иначе
		Для каждого СтрокаТЧ Из Объект.Таблица Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Партия) Тогда
				ДанныеЗаполнены = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены; 
	///-ГомзМА 25.05.2023
	
КонецФункции // ПроверитьЗаполнениеДанных()



&НаКлиенте
Процедура СформироватьУПД(Команда)
	Если объект.СтатусДоставки = ПолучитьСтатусДоставки() тогда
		Сообщить("При статусе отправки ""сборка"" Формирование УПД невозможно!");
	Иначе
		///+ГомзМА 28.03.2023 
		ДанныеСовпадают = ПроверитьДанные();
		ДанныеЗаполнены = ПроверитьЗаполнениеДанных();
		
		//Если ДанныеСовпадают И ДанныеЗаполнены Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
		
		СтрокаВывода = СтрШаблон("Сформировать номер УПД для организации ""%1"" и клиента ""%2""?", Объект.Организация, Объект.Клиент);
		ПоказатьВопрос(Оповещение, СтрокаВывода, РежимДиалогаВопрос.ДаНет);
		//ИначеЕсли НЕ ДанныеЗаполнены И НЕ ДанныеСовпадают Тогда
		//	Сообщить("Невозможно сформировать номер УПД! Не заполнены товары или заполнены не все партии; Не соответствует клиент или организация в счете.");
		//ИначеЕсли НЕ ДанныеЗаполнены Тогда
		//	Сообщить("Невозможно сформировать номер УПД! Не заполнены товары или заполнены не все партии.");
		//ИначеЕсли НЕ ДанныеСовпадают Тогда
		//	Сообщить("Невозможно сформировать номер УПД! Не соответствует клиент или организация в счете.");
		//КонецЕсли; 
	КонецЕсли;
	///+ГомзМА 28.03.2023
	
	//СформироватьУПДНаСервере();
	//ПоказатьОповещениеПользователя("УПД сформирован", , "Номер УПД заполнен");		
	
	//Подключаемый_ОбновитьКоманды();	
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Сформировал УПД");
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры 
&НаСервере
Функция ПолучитьСтатусДоставки()
	Возврат Перечисления.СтатусОтправки.Сборка;
КонецФункции


&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	///+ГомзМА 28.03.2023 
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьУПДНаСервере();
		ПоказатьОповещениеПользователя("УПД сформирован", , "Номер УПД заполнен");
		
		Подключаемый_ОбновитьКоманды();
	Иначе
		Возврат;
	КонецЕсли;
	///+ГомзМА 28.03.2023 
	
КонецПроцедуры


&НаСервере
Процедура СформироватьУПДНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаУПД) Тогда
		Объект.ДатаУПД = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерУПД) ИЛИ НЕ дт_Нумерация.НомерУникален(Объект, Истина, Истина, Истина, "НомерУПД") Тогда
		
		ПрефиксОрганизации = дт_ОбщегоНазначения.ПрефиксОрганизации(Объект.Организация);
		
		НомерУПД1 = дт_Нумерация.СвободныйНомерДокумента(
		Объект.Ссылка.Метаданные().Имя, 
		Объект.ДатаУПД, 
		ПрефиксОрганизации,
		"НомерУПД",
		Объект.Ссылка
		);
		
		НомерУПД2 = дт_Нумерация.СвободныйНомерДокумента(
		"ЗаказНаряд", 
		Объект.ДатаУПД, 
		ПрефиксОрганизации,
		"НомерУПД"
		);
		
		Объект.НомерУПД = Макс(НомерУПД1, НомерУПД2);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура СформироватьНомерНакладнойНаСервере()
	
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаТоварнойНакладной) Тогда
		Объект.ДатаТоварнойНакладной = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТоварнаяНакладная) ИЛИ НЕ дт_Нумерация.НомерУникален(Объект, Истина, Истина, Истина, "ТоварнаяНакладная") Тогда
		
		Объект.ТоварнаяНакладная = дт_Нумерация.СвободныйНомерДокумента(
		Объект.Ссылка.Метаданные().Имя, 
		Объект.ДатаТоварнойНакладной, 
		дт_ОбщегоНазначения.ПрефиксОрганизации(Объект.Организация),
		"ТоварнаяНакладная",
		Объект.Ссылка
		);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьНомерНакладной(Команда)
	
	СформироватьНомерНакладнойНаСервере();
	ПоказатьОповещениеПользователя("Номер накладной сформирован", , "Номер накладной заполнен");		
	
	Подключаемый_ОбновитьКоманды();	
	
КонецПроцедуры


&НаКлиенте
Процедура НарядНаСборкуПоМесту(Команда)
	Если НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(, "Для выполнения команды необходимо провести документ");
		Возврат
	КонецЕсли;
	
	Если Объект.ИтогоРекв = 0 Тогда
		ПосчитатьИтоги();
		//ПересчетИтоговСУчетомСписанияБонусов();
	КонецЕсли;
	ТабДокумент = НарядНаСборкуСервер("Место");
	ТабДокумент.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)	
	Если Объект.ИтогоРекв = 0 Тогда
		ПосчитатьИтоги();
		//ПересчетИтоговСУчетомСписанияБонусов();
	КонецЕсли;
	ТабДокумент = ПечатьБУ();
	ТабДокумент.Показать();
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьНовые()
	
	ТабДокумент = ПолучитьТабличныйДокументТоварныйЧек();
	
	ТабДокумент.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ТоварПоПоступлению(Команда)
	
	ТабДокумент = Товары123ПоПоступлениюСервер();
	ТабДокумент.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	// ++ obrv 24.07.18
	//Форма = ПолучитьФорму("Обработка.ВыборНоменклатуры.Форма.ФормаСписка");
	//Форма.ВладелецФормы = ЭтаФорма;       
	//Форма.Открыть();
	ПараметрыОткрытия = Новый Структура();
	//ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	//ПараметрыОткрытия.Вставить("ТекущаяСтрока", Элементы.Таблица.ТекущиеДанные.Товар);
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	// -- obrv 24.07.18
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГород(Команда)
	// Вставить содержимое обработчика.
	Форма = ПолучитьФорму("Справочник.Город.ФормаОбъекта");
	Форма.ВладелецФормы = ЭтаФорма;       
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУПДВДиадок(Команда)
	
	//ОткрытьФорму("ОбщаяФорма.ПечатьДокументов");
	//ЗагрузитьУПДВДиадокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьКоды(Команда)
	
	///+ГомзМА 09.08.2023
	ОО1 = Новый ОписаниеОповещения("ОбработкаОкончанияСканирования", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаСканироватьКоды",, ЭтаФорма,,,, ОО1);
	///-ГомзМА 09.08.2023
	
КонецПроцедуры






#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ОбновитьДобавленныеКолонки()
	
	//дт_АдресноеХранение.ЗаполнитьМестаХранения(ЭтаФорма, "Таблица.Склад", "Таблица", "Товар");
	Для каждого стр из Объект.Таблица Цикл
		Попытка
			стр.МестоХранения = ПолучитьМестоХранения(стр.Товар, 
			стр.Склад,стр.Партия);
		Исключение
		КонецПопытки;
	КонецЦикла
	
КонецПроцедуры




&НаКлиенте
Процедура ОбработкаИзмененияСтроки(ИмяТабличнойЧасти, Поле = Неопределено, ДанныеСтроки = Неопределено)
	
	ТекДанные = ?(ДанныеСтроки = Неопределено, Элементы[ИмяТабличнойЧасти].ТекущиеДанные, ДанныеСтроки);
	///+ГомзМА 10.04.2023
	//Если Объект.НачислятьНДС Тогда
	//	СуммаНДС = ТекДанные.Цена * 0.2;	
	//	ТекДанные.Сумма = (ТекДанные.Цена + СуммаНДС) * ТекДанные.Количество;
	//	ТекДанные.СуммаНДС = СуммаНДС * ТекДанные.Количество;
	//Иначе
	//	ТекДанные.Сумма = ТекДанные.Цена * ТекДанные.Количество;
	//	ТекДанные.СуммаНДС = 0;
	//КонецЕсли;
	///-ГомзМА 10.04.2023
	
	/////+ГомзМА 11.10.2023
	//Если Объект.Дата < '20231010' Тогда
	//	НДС = 0;
	//Иначе
	//	НДС = ПолучитьПроцентНалога();
	//КонецЕсли;
	//СуммаНДС = ТекДанные.Цена * НДС / 100;	
	//ТекДанные.Сумма = (ТекДанные.Цена + СуммаНДС) * ТекДанные.Количество;
	//ТекДанные.СуммаНДС = СуммаНДС * ТекДанные.Количество;
	/////-ГомзМА 11.10.2023
	
	
	
	текДанные.Машина = ПолучитьМашину(ТекДанные.Партия);
	текДанные.Комментарий = текДанные.Машина;
	
КонецПроцедуры // ОбработкаИзмененияСтроки()

&НаСервере
Функция ПолучитьМашину(ИндКодДетали)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегистрНакопления1.машина КАК машина
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1
	|ГДЕ
	|	РегистрНакопления1.индкод = &индкод";
	Запрос.УстановитьПараметр("ИндКод",ИндКодДетали);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат выборка.машина;
КонецФункции


&НаКлиенте
Процедура ЗаполнитьПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоОснованию();
	КонецЕсли;
	
	
	УстановитьВидимостьДоступность();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ДоговорКонтрагента.Видимость = НЕ Объект.БезДоговора;
	
	ЕстьСчет = ЗначениеЗаполнено(Объект.Основание);
	Элементы.СоздатьСчет.Видимость = НЕ ЕстьСчет;
	Элементы.ОбновитьСчет.Видимость = ЕстьСчет;
	
	
	Элементы.ГруппаУПД.Видимость = Истина;
	Элементы.ГруппаУПД.ТолькоПросмотр = Объект.ПометкаУдаления;
	Элементы.СформироватьУПД.Видимость = НЕ Объект.ПометкаУдаления;
	
	
	Элементы.Расходы.Видимость = ЭтоПолноправныйПользователь;
	Элементы.ВыводДенег.Видимость = ЭтоПолноправныйПользователь;
	Элементы.ГруппаОтветственные.ТолькоПросмотр = Не РазрешеноРедактированиеОтветственных;
	
	
	УчетПоСкладам = дт_ОбщегоНазначенияКлиентСервер.УчетПоСкладам(Объект.Дата);
	Элементы.Склад.Видимость = УчетПоСкладам;
	Элементы.ТаблицаСклад.Видимость = УчетПоСкладам; 
	
	Элементы.НадписьОтветственные.Заголовок = НадписьОтветственные();
	
	Элементы.Дата.ТолькоПросмотр = Не ЭтоПолноправныйПользователь;
	
	Элементы.Оплачено.Доступность = РазрешеноЗакрытиеДокумента;
	
КонецПроцедуры // УстановитьВидимостьДоступность()



// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьПоОснованию()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.Заполнить(ДокОбъект.Основание);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры // ЗаполнитьПоОснованию()


&НаКлиенте
Процедура ПередЗаписью_ОбновитьСчет(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбновитьСчетПослеЗаписи = Истина;
	КонецЕсли;
	
	Записать(Новый Структура("ОтключитьПроверкуСчета", Истина));
	
КонецПроцедуры


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ОбновитьПризнакУчетаНДС()
	
	ЕстьУчетНДС = Ложь;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЕстьУчетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЕстьУчетНДС");
		
	КонецЕсли;
	
	
КонецПроцедуры // ОбновитьПризнакУчетаНДС()


&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	
	// Товары.Отменено
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Таблица");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Объект.Таблица.Отменено", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	Если ПолучитьФункциональнуюОпцию("дт_ОтгрузкаСРазныхСкладов") Тогда	
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Таблица");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Таблица.Склад", ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных("Объект.Склад")); //дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновнойСклад());
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Желтый);
	КонецЕсли;
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Таблица");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Объект.Таблица.статусТовара", ВидСравненияКомпоновкиДанных.Равно, Истина); //дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновнойСклад());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЗеленаяЛужайка);
КонецПроцедуры



// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	РазрешеноРедактированиеОтветственных = Пользователи.ЭтоПолноправныйПользователь()
	ИЛИ Пользователи.РолиДоступны("дт_ДобавлениеИзменениеОтветственныхЗаПродажу")
	ИЛИ Пользователи.ТекущийПользователь() = Объект.КтоПродал;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	РазрешеноЗакрытиеДокумента = РольДоступна("дт_ИзменениеПризнакаЗакрыто") 
	ИЛИ ЭтоПолноправныйПользователь; 
КонецПроцедуры // УстановитьФункциональныеОпцииФормы()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция НадписьОтветственные()
	
	Результат = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсточник.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_Источник
	|ИЗ
	|	&ТаблицаИсточник КАК ТаблицаИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Источник.Сотрудник КАК Сотрудник,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТ_Ответственные
	|ИЗ
	|	ВТ_Источник КАК ВТ_Источник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&КтоПродал,
	|	0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Ответственные.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ВТ_Ответственные.Порядок) КАК Порядок
	|ПОМЕСТИТЬ ВТ_ОтветственныеГрп
	|ИЗ
	|	ВТ_Ответственные КАК ВТ_Ответственные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Ответственные.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Наименование КАК ФИО,
	|	ВТ_Ответственные.Порядок КАК Порядок
	|ИЗ
	|	ВТ_ОтветственныеГрп КАК ВТ_Ответственные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ВТ_Ответственные.Сотрудник = Пользователи.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Ответственные.Порядок";
	
	Запрос.УстановитьПараметр("КтоПродал", Объект.КтоПродал);
	Запрос.УстановитьПараметр("ТаблицаИсточник", Объект.Ответственные.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = Результат + ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаДетальныеЗаписи.ФИО) + ", ";
	КонецЦикла;
	
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Результат, 2);
		Результат = "Ответственные: " + Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НадписьОтветственные()


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПодготовитьНапоминанияОтветственным()
	
	// очистить кеш напоминаний
	КешНапоминаний.Очистить();
	
	Если ОсновнойОтветственныйБылИзменен() Тогда
		СоздатьНапоминаниеОтветственному(Объект.КтоПродал, Неопределено, Истина, Истина);
	КонецЕсли;
	
	// Получить список новых ответственных (относительно записанного документа)
	ДобавленныеОтветственные = ПолучитьСписокДобавленныхОтветственных();
	
	Для каждого СтрокаТаблицы Из ДобавленныеОтветственные Цикл
		
		СоздатьНапоминаниеОтветственному(СтрокаТаблицы.Сотрудник, СтрокаТаблицы.Роль, Ложь, Истина);
		
	КонецЦикла;
КонецПроцедуры // ПодготовитьНапоминанияОтветственным()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура СоздатьНапоминанияОтветственным()
	
	//	Если КешНапоминаний = Неопределено Тогда
	//		Возврат
	//	КонецЕсли;
	
	Для каждого НапоминаниеЗапись Из КешНапоминаний Цикл
		
		Текст = НапоминаниеЗапись.Текст;
		Если Прав(Текст, 1) = " " Тогда
			Текст = Текст + Объект.Ссылка;
		КонецЕсли;
		
		дт_НапоминанияПользователяКлиент.Напомнить(Текст, ТекущаяДата(), , Объект.Ссылка, НапоминаниеЗапись.Ответственный);	
		
		
	КонецЦикла;
	
	КешНапоминаний.Очистить();
КонецПроцедуры // СоздатьНапоминанияОтветственным()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ОсновнойОтветственныйБылИзменен()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Результат = Истина;
	Иначе
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажаЗапчастей.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		|ГДЕ
		|	ПродажаЗапчастей.Ссылка = &Ссылка
		|	И ПродажаЗапчастей.КтоПродал <> &КтоПродал";
		
		Запрос.УстановитьПараметр("КтоПродал", Объект.КтоПродал);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Результат = НЕ Запрос.Выполнить().Пустой();
		
		
	КонецЕсли;
	Возврат Результат;
	
КонецФункции // ОсновнойОтветственныйБылИзменен()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьСписокДобавленныхОтветственных()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТаблицаОтветственные = Объект.Ответственные.Выгрузить();
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Источник.Сотрудник КАК Сотрудник,
		|	Источник.Роль КАК Роль
		|ПОМЕСТИТЬ ВТ_Источник
		|ИЗ
		|	&Источник КАК Источник
		|ГДЕ
		|	Источник.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Роль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтветственныеДоИзменения.Сотрудник КАК Сотрудник,
		|	ОтветственныеДоИзменения.Роль КАК Роль
		|ПОМЕСТИТЬ ВТ_ОтветственныеДоИзменения
		|ИЗ
		|	Документ.ПродажаЗапчастей.Ответственные КАК ОтветственныеДоИзменения
		|ГДЕ
		|	ОтветственныеДоИзменения.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Роль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Источник.Сотрудник КАК Сотрудник,
		|	ВТ_Источник.Роль КАК Роль
		|ИЗ
		|	ВТ_Источник КАК ВТ_Источник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтветственныеДоИзменения КАК ВТ_ОтветственныеДоИзменения
		|		ПО (ВТ_ОтветственныеДоИзменения.Сотрудник = ВТ_Источник.Сотрудник)
		|			И (ВТ_ОтветственныеДоИзменения.Роль = ВТ_Источник.Роль)
		|ГДЕ
		|	ВТ_ОтветственныеДоИзменения.Сотрудник ЕСТЬ NULL");
		
		Запрос.УстановитьПараметр("Источник", Объект.Ответственные.Выгрузить());
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		ТаблицаОтветственные = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаОтветственные);
	
	
КонецФункции // ПолучитьСписокДобавленныхОтветственных()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура СоздатьНапоминаниеОтветственному(Ответственный, Роль, ЭтоОсновнойОтветственный, ЗаписьВКеш = Ложь)
	
	Если Не ЗначениеЗаполнено(Ответственный)
		ИЛИ Ответственный = ПользователиКлиентСервер.ТекущийПользователь() Тогда 
		Возврат
	КонецЕсли;
	
	Текст = СтрШаблон(
	"Вы назначены%1 ответственным%2 по документу %3",
	?(ЭтоОсновнойОтветственный, " основным", ""),
	?(ЗначениеЗаполнено(Роль), " на роль " + Роль, ""),
	?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, "")
	);
	// Если документ не записан, то напоминания будем создавать после записи
	Если ЗаписьВКеш Тогда
		
		//Если КешНапоминаний <> Неопределено Тогда
		//	Кеш = КешНапоминаний.Получить();
		//Иначе
		//	Кеш = Новый Массив();
		//КонецЕсли;
		НоваяСтрока = КешНапоминаний.Добавить();
		НоваяСтрока.Ответственный = Ответственный;
		НоваяСтрока.Текст = Текст;
		//Кеш.Добавить(Новый Структура("Текст,Ответственный", Текст, Ответственный));
		//КешНапоминаний = Новый ХранилищеЗначения(Кеш);
	Иначе	
		дт_НапоминанияПользователяКлиент.Напомнить(Текст, ТекущаяДата(), , Объект.Ссылка, Ответственный);	
	КонецЕсли;
	
КонецПроцедуры // СоздатьНапоминаниеОтветственному()

&НаКлиенте
Процедура ДатаТоварнойНакладнойПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТоварнаяНакладная) 
		И ЗначениеЗаполнено(Объект.ДатаТоварнойНакладной) Тогда 
		ДатаТоварнойНакладнойПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ДатаТоварнойНакладнойПриИзмененииСервер()
	
	НовоеЗначение = Объект.ДатаТоварнойНакладной;
	СтароеЗначение = Объект.ДатаТоварнойНакладной;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтароеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДатаТоварнойНакладной");
	КонецЕсли;
	
	// Если изменился год, то номер очистим
	Если ЗначениеЗаполнено(СтароеЗначение) Тогда
		Если Год(СтароеЗначение) <> Год(НовоеЗначение) Тогда
			Объект.ТоварнаяНакладная = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаТоварнойНакладнойПриИзмененииСервер()



&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Водитель.Видимость = Объект.ЕстьДоставка И Не Объект.Самовывоз;
	Элементы.ГруппаДоставкаТранспортнаяКомпания.Видимость = Объект.ЕстьДоставка;
	Элементы.Группа21.Видимость = Объект.ЕстьДоставка;
	
	//Элементы.ОтветственныйКладовщик.Видимость = ЗначениеЗаполнено(Объект.ОтветственныйКладовщик);
	Элементы.Декорация1.Видимость = НЕ Элементы.ОтветственныйКладовщик.Видимость;
	
	
КонецПроцедуры


&НаСервере
Процедура ЗаменитьЗначениеСтатусКлиентаВСправочникеКлиенты()
	
	///+ГомзМА 23.01.2023
	Если Объект.Клиент.СтатусКлиента = Справочники.СтатусыКлиентов.НайтиПоКоду("000000001") Тогда
		СправочникОбъект = Объект.Клиент.ПолучитьОбъект();
		СправочникОбъект.СтатусКлиента = Справочники.СтатусыКлиентов.НайтиПоКоду("000000002");
		СправочникОбъект.Записать();
	КонецЕсли;
	///-ГомзМА 23.01.2023
	
КонецПроцедуры


&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	///+ГомзМА 14.02.2023 (Задача 000002625 от 30.01.2023)
	Если ТекущаяСтраница = Элементы.СтраницаПоступления Тогда
		СписокПоступлений.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
		Элементы.СписокПоступлений.Обновить();	
	КонецЕсли;
	///+ГомзМА 14.02.2023 (Задача 000002625 от 30.01.2023)
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПоступленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	///+ГомзМА 14.02.2023 (Задача 000002625 от 30.01.2023)
	СтандартнаяОбработка = Ложь;
	СсылкаДляОткрытия    = Элементы.СписокПоступлений.ТекущиеДанные[СтрЗаменить(Поле.Имя, Элемент.имя, "")];
	ПараметрыФормы       = Новый Структура("Ключ", СсылкаДляОткрытия);
	Если ТипЗнч(СсылкаДляОткрытия) = Тип("ДокументСсылка.ПоступлениеЗапчастей") Тогда
		ИмяФормыДокумента = "Документ.ПоступлениеЗапчастей.Форма.ФормаДокумента";
	Иначе
		Возврат;
	КонецЕсли;
	ФормаДокумента = ПолучитьФорму(ИмяФормыДокумента, ПараметрыФормы);
	ФормаДокумента.Открыть();
	///+ГомзМА 14.02.2023 (Задача 000002625 от 30.01.2023)
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	///+ГомзМА 10.04.2023
	//Если Объект.НачислятьНДС Тогда
	//	Элементы.СуммаДокументаНДС.Видимость 						   = Истина;
	//	Элементы.Таблица.ПодчиненныеЭлементы.ТаблицаСуммаНДС.Видимость = Истина;	
	//Иначе
	//	Элементы.СуммаДокументаНДС.Видимость 						   = Ложь;
	//	Элементы.Таблица.ПодчиненныеЭлементы.ТаблицаСуммаНДС.Видимость = Ложь;
	//КонецЕсли;
	///-ГомзМА 10.04.2023
	
	///+ГомзМА 12.05.2023
	Если Объект.ВклВыклРасходникиВСтоимость = Перечисления.ВклВыклРасходниковВСтоимость.ВключитьРасходникиВСтоимость И ЗначениеЗаполнено(Объект.ТМЦ) Тогда
		Элементы.РасходникиВключеныВСтоимость.Видимость		= Истина;
		Элементы.РасходникиНеВключеныВСтоимость.Видимость 	= Ложь;
	ИначеЕсли Объект.ВклВыклРасходникиВСтоимость = Перечисления.ВклВыклРасходниковВСтоимость.НеВключатьРасходникиВСтоимость И ЗначениеЗаполнено(Объект.ТМЦ) Тогда
		Элементы.РасходникиВключеныВСтоимость.Видимость 	= Ложь;
		Элементы.РасходникиНеВключеныВСтоимость.Видимость 	= Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ТМЦ) Тогда
		Элементы.РасходникиВключеныВСтоимость.Видимость 	= Ложь;
		Элементы.РасходникиНеВключеныВСтоимость.Видимость 	= Ложь;
	КонецЕсли;
	///-ГомзМА 12.05.2023
	
	///+ГомзМА 15.09.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("МенеджерПоПродажам")) И 
		НЕ (ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) 	 ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава"))  	 ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("СписаниеТоваров"))  	 ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("Разборщик"))) 	 	 Тогда
		Элементы.ТаблицаПартия.ТолькоПросмотр = Истина;
	КонецЕсли;
	///-ГомзМА 15.09.2023
	
	///+ГомзМА 18.09.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_Зарплата")) 	 ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава"))  ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("Разборщик"))  	 ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) 	 Тогда
		Элементы.ГруппаОтветственные.Видимость = Истина;
	КонецЕсли;
	///-ГомзМА 18.09.2023
	
	///+ГомзМА 10.10.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("РедактированиеДоставкиВПродаже")) Тогда
		Элементы.ПодменюПечать.Видимость 					= Ложь;
		Элементы.ПодменюЗагрузитьДокументВДиадок.Видимость 	= Ложь;
		Элементы.ПодменюНарядНаСборку.Видимость 			= Ложь;
		Элементы.ФормаТоварПоПоступлению.Видимость 			= Ложь;
		Элементы.ФормаОприходовано.Видимость 				= Ложь;
		Элементы.СтраницаПоступления.Видимость 				= Ложь;
		Элементы.СканироватьКоды.Видимость 					= Ложь;
		Элементы.ВидQRкод.Видимость 						= Ложь;
		Элементы.ИтогоРекв.Видимость 						= Ложь;
		Элементы.СуммаДокументаНДС.Видимость 				= Ложь;
		//Элементы.НачислятьНДС.Видимость 					= Ложь;
		Элементы.ПосчитатьИтого.Видимость 					= Ложь;
		Элементы.ОстатокДенег.Видимость 					= Ложь;
		Элементы.ИтогоБезнал.Видимость 						= Ложь;
		Элементы.СтатусПродажи.Видимость 					= Ложь;
		Элементы.ДатаСписания.Видимость 					= Ложь;
		Элементы.АртикулВНазвании.Видимость 				= Ложь;
		Элементы.ПоказыватьРекЦену.Видимость 				= Ложь;
		Элементы.Новые.Видимость 							= Ложь;
		Элементы.РасходникиВключеныВСтоимость.Видимость 	= Ложь;
		Элементы.РасходникиНеВключеныВСтоимость.Видимость 	= Ложь;
		Элементы.СтатусДоставки1.Видимость 					= Ложь;
		Элементы.Группа1.Видимость 							= Ложь;
		Элементы.Организация.Видимость 						= Ложь;
		Элементы.Название.Видимость 						= Ложь;
		Элементы.TipOplati.Видимость 						= Ложь;
		Элементы.Склад.Видимость 							= Ложь;
		Элементы.ГруппаШапкаПраво.Видимость 				= Ложь;
		Элементы.Группа9.Видимость 							= Ложь;
		Элементы.Расходы.Видимость 							= Ложь;
		Элементы.БухгалтерскиеДокументы.Видимость 			= Ложь;
		Элементы.Разное.Видимость 							= Ложь;
		Элементы.ДляБланкаОтчёта.Видимость 					= Ложь;
		Элементы.КтоПродал1.Видимость 						= Истина;
		
		Элементы.Номер.ТолькоПросмотр 						= Истина;
		Элементы.Клиент.ТолькоПросмотр 						= Истина;
		Элементы.Склад.ТолькоПросмотр	 					= Истина;
		Элементы.Вес.ТолькоПросмотр 						= Истина;
		Элементы.ГородОтправки.ТолькоПросмотр 				= Истина;
		Элементы.СтранаПолучения.ТолькоПросмотр 			= Истина;
		Элементы.РегионПолучения.ТолькоПросмотр 			= Истина;
		Элементы.ГородПолучения.ТолькоПросмотр 				= Истина;
		Элементы.СтоимостьДоставки.ТолькоПросмотр 			= Истина;
		Элементы.КоммДост.ТолькоПросмотр 					= Истина;
		Элементы.Водитель.ТолькоПросмотр 					= Истина;
		Элементы.Группа23.ТолькоПросмотр 					= Истина;
		Элементы.Группа21.ТолькоПросмотр 					= Истина;
		Элементы.Группа16.ТолькоПросмотр 					= Истина;
		Элементы.КтоПродал1.ТолькоПросмотр 					= Истина;
	КонецЕсли;
	///-ГомзМА 10.10.2023
	
	///+ГомзМА 11.10.2023
	Если Объект.СтатусПродажи = Перечисления.СтатусыПродажи.Актуальная Тогда
		Элементы.ЖдемДенегВТечение.Видимость = Истина;
		Элементы.Декорация2.Видимость 		 = Истина;
	Иначе
		Элементы.ЖдемДенегВТечение.Видимость = Ложь;
		Элементы.Декорация2.Видимость 		 = Ложь;
	КонецЕсли;
	///-ГомзМА 11.10.2023
	
	///+ГомзМА 23.10.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("СписаниеТоваров")) И
		НЕ (ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава"))) И
		Не Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию("Урунов Муминджон Мойдинович") И
		Не Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию("Наумов Николай Борисович") И
		Не Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию("Дубнов Евгений Владимирович") И 
		Не Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоНаименованию("Кузмичёв Иван Сергеевич") Тогда
		Элементы.Группа3.ТолькоПросмотр 						= Истина;
		Элементы.Группа4.ТолькоПросмотр 						= Истина;
		Элементы.ГруппаШапка.ТолькоПросмотр 					= Истина;
		Элементы.Доставка.ТолькоПросмотр 						= Истина;
		Элементы.Группа2.ТолькоПросмотр 						= Истина;
		Элементы.ТаблицаНомерСтроки.ТолькоПросмотр 				= Истина;
		Элементы.ТаблицаТоварКод.ТолькоПросмотр 				= Истина;
		Элементы.ТаблицаТоварАртикул.ТолькоПросмотр 			= Истина;
		Элементы.ТаблицаТоварНомерПроизводителя.ТолькоПросмотр 	= Истина;
		Элементы.ТаблицаТовар.ТолькоПросмотр 					= Истина;
		Элементы.ТаблицаТоварРекомендованаяЦена.ТолькоПросмотр 	= Истина;
		Элементы.ТаблицаМестоХранения.ТолькоПросмотр 			= Истина;
		Элементы.ТаблицаКоличество.ТолькоПросмотр 				= Истина;
		Элементы.ТаблицаЦена.ТолькоПросмотр 					= Истина;
		Элементы.ТаблицаСуммаНДС.ТолькоПросмотр 				= Истина;
		Элементы.ТаблицаСумма.ТолькоПросмотр 					= Истина;
		Элементы.ТаблицаОтменено.ТолькоПросмотр 				= Истина;
		Элементы.ТаблицаКомментарий.ТолькоПросмотр 				= Истина;
		Элементы.Таблицамашина.ТолькоПросмотр 					= Истина;
		Элементы.СтраницаВТСпасибо.ТолькоПросмотр 				= Истина;
		Элементы.СтраницаРасходники.ТолькоПросмотр 				= Истина;
		Элементы.Группа19.ТолькоПросмотр 						= Истина;
		Элементы.Расходы.ТолькоПросмотр 						= Истина;
		Элементы.ВыводДенег.ТолькоПросмотр	 					= Истина;
		Элементы.БухгалтерскиеДокументы.ТолькоПросмотр 			= Истина;
		Элементы.Группа27.ТолькоПросмотр 						= Истина;
		Элементы.ГруппаОтветственные.ТолькоПросмотр 			= Истина;
		Элементы.Разное.ТолькоПросмотр 							= Истина;
		Элементы.ДляБланкаОтчёта.ТолькоПросмотр 				= Истина;
		Элементы.Группа5.ТолькоПросмотр 						= Истина;
		Элементы.СтраницаПоступления.ТолькоПросмотр 			= Истина;
	КонецЕсли;
	///-ГомзМА 23.10.2023
	
	///+ГомзМА 05.02.2024
//	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_Зарплата")) ИЛИ
//		 ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава"))Тогда
//		 //Элементы.СписатьСБалансаКлиента.Видимость = Истина;
//	Иначе
//		 Элементы.СписатьСБалансаКлиента.Видимость = Ложь;
//	КонецЕсли;
	///-ГомзМА 05.02.2024
	
КонецПроцедуры

&НаКлиенте
Процедура РассчетКоличестваРасходников()
	
	///+ГомзМА 17.05.2023
	КоличествоРасходников = 0;
	
	Для Каждого Строка из Объект.ТМЦ Цикл
		КоличествоРасходников = КоличествоРасходников + 1;	
	КонецЦикла;
	
	Если КоличествоРасходников <> 0 Тогда
		Элементы.СтраницаРасходники.Заголовок = "Расходники " + "(" + КоличествоРасходников + ")";
	Иначе
		Элементы.СтраницаРасходники.Заголовок = "Расходники";
	КонецЕсли;
	///-ГомзМА 17.05.2023
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОкончанияСканирования(Результат, ДопПараметры) Экспорт
	
	///+ГомзМА 10.08.2023
	Если Результат.Количество() <> 0 Тогда
		Для каждого Код Из Результат Цикл
			Код = Строка(Код);
			Элементы.Таблица.ТекущаяСтрока = ВнешнееСобытиеНаСервере(Код);
			ОбработкаИзмененияСтроки("Таблица");
			СтруктураСтроки = Новый Структура("Номенклатура, Партия, Цена");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.Таблица.ТекущиеДанные);
			СтруктураСтроки.Номенклатура = Элементы.Таблица.ТекущиеДанные.Товар;
			СтруктураСтроки.Вставить("Дата", Объект.Дата);
			ЗаполнитьЗначенияСвойств(Элементы.Таблица.ТекущиеДанные, СтруктураСтроки,, "Партия");
		КонецЦикла;
	КонецЕсли;
	///-ГомзМА 10.08.2023
	
КонецПроцедуры


&НаСервере
Функция ПолучитьПроцентНалога()
	
	///+ГомзМА 11.10.2023
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организация.Налог КАК Налог
	|ИЗ
	|	Справочник.Организация КАК Организация
	|ГДЕ
	|	Организация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	РезультатЗапроса.Следующий();
	
	Результат = РезультатЗапроса.Налог;
	
	Возврат Результат;
	///-ГомзМА 11.10.2023
	
КонецФункции // ПолучитьПроцентНалога()


&НаСервере
Функция ПользовательСодержитРоли()
	
	///+ГомзМА 23.10.2023
	Результат = Ложь;
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("СписаниеТоваров")) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 23.10.2023
	
КонецФункции // ПользовательСодержитРоли()



Процедура ЗаписьЛога(Событие)
	
	///+ГомзМА 19.12.2023
	ТекстЛога =  "----------------------------------------------------" + Символы.ПС + ТекущаяДата() + Символы.ПС + Пользователи.ТекущийПользователь() + Символы.ПС +" "+ Событие + Символы.ПС ;
	
	Запись = РегистрыСведений.ЛогПродаж.СоздатьМенеджерЗаписи();
	Запись.Продажа		 = Объект.Ссылка;
	Запись.Дата 		 = ТекущаяДата();
	Запись.Менеджер	     = Пользователи.ТекущийПользователь();
	Запись.Текст         = ТекстЛога;
	Запись.Записать();
	ВыводЛога();
	///-ГомзМА 19.12.2023
	
КонецПроцедуры



Процедура ВыводЛога()
	
	///+ГомзМА 19.12.2023
	НаборЛогов = "";
	Запрос = Новый запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ЛогПродаж.Текст КАК Текст
	|ИЗ
	|	РегистрСведений.ЛогПродаж КАК ЛогПродаж
	|ГДЕ
	|	ЛогПродаж.Продажа = &Продажа";
	Запрос.УстановитьПараметр("Продажа", Объект.Ссылка);
	
	Логи = Запрос.Выполнить().Выбрать();
	
	Пока Логи.Следующий() Цикл
		НаборЛогов = НаборЛогов + Логи.Текст;
	КонецЦикла;
	Лог = НаборЛогов;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

#КонецОбласти






#Область ОбработчикиСобытийЭлементовТаблицыФормы_Таблица

&НаКлиенте
Процедура ТаблицаСкладПриИзменении(Элемент)
	Элементы.Таблица.ТекущиеДанные.МестоХранения = ПолучитьМестоХранения(Элементы.Таблица.ТекущиеДанные.Товар, 
	Элементы.Таблица.ТекущиеДанные.Склад, Элементы.Таблица.ТекущиеДанные.Партия);
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил склад на " + ТекДанные.Склад);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Таблица.ТекущиеДанные.Склад = Объект.Склад;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	колво = 0;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Таблица Цикл	
		колво = колво +  СтрокаТабличнойЧасти.Количество;
	КонецЦикла;
	
	//ПосчитатьИтоги();
	
	//Если Объект.БылоСписаниеБонусов = Истина Тогда
	//	
	//	ОтменитьСписаниеНаСервере();
	// 	МаксимальнаяСуммаСписания();
	// 	СписатьБонусыНаСервере();
	// Иначе 
	//	ПересчетИтоговСУчетомСписанияБонусов();
	//КонецЕсли;
 
	///+ГомзМА 10.04.2023
	//Если Объект.НачислятьНДС Тогда
	//	Объект.СуммаДокументаНДС = Объект.ИтогоРекв / 1.2 * 0.2;
	//Иначе
	//	Объект.СуммаДокументаНДС = 0;
	//КонецЕсли;
	///-ГомзМА 10.04.2023
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварПриИзменении(Элемент)
	Попытка
		Элементы.Таблица.ТекущиеДанные.МестоХранения = ПолучитьМестоХранения(Элементы.Таблица.ТекущиеДанные.Товар, 
		Элементы.Таблица.ТекущиеДанные.Склад,Элементы.Таблица.ТекущиеДанные.Партия);
	Исключение
	КонецПопытки;
	
		///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке №" + ТекДанные.НомерСтроки + " товар на " + ТекДанные.Товар);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМестоХранения(Номенклатура, Склад, ИндКод)
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		//Результат = дт_АдресноеХранение.ПолучитьМестоХранения(Новый Структура("Дата,Склад,Номенклатура", Объект.Дата, Склад, Номенклатура)); 
		Результат = ПолучитьАдрес(Номенклатура, Склад, ИндКод)
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаСервере
Функция ПолучитьАдрес(Номенклатура, Склад, ИндКод)  
	Запрос  = Новый запрос;
	Запрос. текст = "ВЫБРАТЬ
	|	дт_МестаХраненияНоменклатурыСрезПоследних.МестоХранения КАК МестоХранения,
	|	ЕСТЬNULL(Стеллажик.ГруппаМестХранения, ЗНАЧЕНИЕ(Справочник.ГруппыМестХранения.ПустаяСсылка)) КАК ГруппаМестХранения,
	|	ВЫБОР
	|		КОГДА ИндНомер.Стеллаж <> ЗНАЧЕНИЕ(Справочник.стеллаж.пустаяссылка)
	|			ТОГДА ИндНомер.Стеллаж
	|		ИНАЧЕ Стеллажик.Ссылка
	|	КОНЕЦ КАК Стеллаж
	|ИЗ
	|	РегистрСведений.дт_МестаХраненияНоменклатуры.СрезПоследних(
	|			&ДатаСреза,
	|			Склад = &Склад
	|				И Номенклатура = &Номенклатура) КАК дт_МестаХраненияНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Стеллаж КАК Стеллажик
	|		ПО дт_МестаХраненияНоменклатурыСрезПоследних.МестоХранения = Стеллажик.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
	|		ПО дт_МестаХраненияНоменклатурыСрезПоследних.Номенклатура = ИндНомер.индкод.Владелец
	|ГДЕ
	|	ИндНомер.индкод = &индкод";
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("индкод",ИндКод);
	Запрос.УстановитьПараметр("ДатаСреза",ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат Выборка.стеллаж;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции



&НаКлиенте
Процедура ТаблицаПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПартияНачалоВыбора("Таблица", ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПартияНачалоВыбора(ИмяТаблицы, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Владелец", ТекДанные.Товар);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ДатаОстатков", ТекущаяДата());
	ПараметрыОткрытия.Вставить("Склад", ТекДанные.Склад);
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекДанные.Партия);
	ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
	
	
	ОткрытьФорму("Справочник.ИндКод.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор); 
	
КонецПроцедуры // ПартияНачалоВыбора()

&НаКлиенте
Процедура ТоварыПартияПриИзменении(Элемент)
	
	СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.Таблица.ТекущиеДанные);
	СтруктураСтроки.Номенклатура = Элементы.Таблица.ТекущиеДанные.Товар;
	СтруктураСтроки.Вставить("Дата", Объект.Дата);
	
	//дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(СтруктураСтроки, ПредопределенноеЗначение("Справочник.ТипыЦен.Рекомендованная"));
	ЗаполнитьЗначенияСвойств(Элементы.Таблица.ТекущиеДанные, СтруктураСтроки,, "Партия");
	//Элементы.Таблица.ТекущиеДанные.Товар = СтруктураСтроки.Номенклатура;
	
	ОбработкаИзмененияСтроки("Таблица");
	Элементы.Таблица.ТекущиеДанные.укод = Строка(СтруктураСтроки.Партия);
	Если не ЗначениеЗаполнено(Элементы.Таблица.ТекущиеДанные.Цена) тогда
		Элементы.Таблица.ТекущиеДанные.Цена = ВозвратЦены(Элементы.Таблица.ТекущиеДанные.Товар)
	КонецЕсли;
	Попытка
		Элементы.Таблица.ТекущиеДанные.МестоХранения = ПолучитьМестоХранения(Элементы.Таблица.ТекущиеДанные.Товар, 
		Элементы.Таблица.ТекущиеДанные.Склад,Элементы.Таблица.ТекущиеДанные.Партия);
	Исключение
	КонецПопытки;
	
	///+ГомзМА 26.09.2023
	ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
	Партия = ТекущиеДанные.Партия;
	Склад = ПолучитьСкладПоПартии(Партия);
	ТекущиеДанные.Склад = Склад;
	///-ГомзМА 26.09.2023
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке №" + ТекДанные.НомерСтроки + " партию на " + ТекДанные.Партия);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
	
КонецПроцедуры

Функция ВозвратЦены(Товар)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.РекомендованаяЦена КАК РекомендованаяЦена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("ссылка", товар);
	
	Выборка = запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.РекомендованаяЦена;
	
КонецФункции



&НаКлиенте
Процедура ТаблицаКоличествоПриИзменении(Элемент)

	ОбработкаИзмененияСтроки("Таблица");
	
	//ПосчитатьИтоги();
	
	//ПересчетИтоговСУчетомСписанияБонусов();
	Элементы.ДляБланкаОтчёта.Заголовок = "Для бланка отчёта "+ "("+КоличествоДеталей+")";
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке №" + ТекДанные.НомерСтроки + " количество на " + ТекДанные.Количество);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
	// ++ Посчитать сумму после изменеия колличество
	ОрганизацияПриИзменении1(ЭтаФорма.Объект.Организация);
	// -- Посчитать сумму после изменеия колличество
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаЦенаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Таблица");
	
	///+ГомзМА 11.10.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	
	Если Объект.Дата < '20231010' Тогда
		НДС = 0;
	Иначе
		НДС = ПолучитьПроцентНалога();
	КонецЕсли;
	СуммаНДС = ТекДанные.Цена * НДС / 100;	
	
	Если Объект.СуммаСНДС = Истина  Тогда  
		ТекДанные.Сумма = (ТекДанные.Цена + СуммаНДС) * ТекДанные.Количество;
	Иначе 
		ТекДанные.Сумма = ТекДанные.Цена * ТекДанные.Количество;
	КонецЕсли;
		ТекДанные.СуммаНДС = СуммаНДС * ТекДанные.Количество;
	///-ГомзМА 11.10.2023
	
	//ПосчитатьИтоги();
	
	//ПересчетИтоговСУчетомСписанияБонусов();
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке №" + ТекДанные.НомерСтроки + " цену на " + ТекДанные.Цена);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
	
	Для Каждого СтрокаТаблицы Из Объект.Таблица Цикл
		СуммаНДС = СтрокаТаблицы.Цена * НДС / 100;	
			// ++ Пересдитать сумму если стоит истина в Объект.СуммаССНД 
			Если Объект.СуммаСНДС = Истина  Тогда 
				СтрокаТаблицы.Сумма = (СтрокаТаблицы.Цена + СуммаНДС) * СтрокаТаблицы.Количество;
			Иначе 
				СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена  * СтрокаТаблицы.Количество;
			КонецЕсли;
			// -- Пересдитать сумму если стоит истина в Объект.СуммаССНД 
		СтрокаТаблицы.СуммаНДС = СуммаНДС * СтрокаТаблицы.Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСуммаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ПересчитатьЦену();
	ПосчитатьИтоги();
	
	//ПересчетИтоговСУчетомСписанияБонусов();
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке №" + ТекДанные.НомерСтроки + " сумму на " + ТекДанные.Сумма);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Функция ПересчитатьЦену()
	ТекСтрокаТаблица = Элементы.Таблица.ТекущиеДанные;
	НДС = ПолучитьПроцентНалога();
	Если НДС = 0 Тогда
		ТекСтрокаТаблица.Цена = ?(ТекСтрокаТаблица.Количество = 0, ТекСтрокаТаблица.Сумма, ТекСтрокаТаблица.Сумма/ТекСтрокаТаблица.Количество);
	Иначе
		///+ГомзМА 20.10.2023
		ТекСтрокаТаблица.Цена 		= ?(ТекСтрокаТаблица.Количество = 0, ТекСтрокаТаблица.Сумма, ТекСтрокаТаблица.Сумма/ТекСтрокаТаблица.Количество/1.2);
		ТекСтрокаТаблица.СуммаНДС 	= ?(ТекСтрокаТаблица.Количество = 0, 0, ТекСтрокаТаблица.Сумма/ТекСтрокаТаблица.Количество/1.2*0.2*ТекСтрокаТаблица.Количество);
	КонецЕсли;
	///-ГомзМА 20.10.2023
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеДляПечати(СведенияКонтрагента)
	
	ПоляПредставления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ФактическийАдрес,ИНН,Телефоны,EMail");
	
	
	Представление = "";
	Для каждого Поле Из ПоляПредставления Цикл
		
		ЗначениеПоля =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияКонтрагента, Поле);
		Если НЕ ПустаяСтрока(ЗначениеПоля) Тогда
			Представление = Представление + ЗначениеПоля + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Представление);
	
	Возврат Представление;
	
КонецФункции // ПредставлениеДляПечати()



&НаСервере
Функция ПолучитьТабличныйДокументТоварныйЧек()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет       =   ПолучитьМакет("ТоварнаяНакладная1");
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	номерТЧ = ОпределитьНомерОрганизация(Объект.Организация);
	Если объект.НомерПП > 0 Тогда
		номерТЧ = объект.НомерПП;
	Иначе
		объект.НомерПП = номерТЧ;
	КонецЕсли;
	
	// ++ obrv 24.07.18
	//ОбластьМакета.Параметры.ТекстЗаголовка = "Товарный чек № "+Объект.Номер +" от "+ Объект.Дата;
	
	ПараметрыШапки = Новый Структура();
	//ПараметрыШапки.Вставить("ТекстЗаголовка", СтрШаблон("Товарный чек № %1 от %2", Объект.Номер, Формат(Объект.Дата, "ДЛФ=DD")));
	ПараметрыШапки.Вставить("НомерДокумента", Объект.Номер);
	ПараметрыШапки.Вставить("ДатаДокумента", Формат(Объект.Дата, "ДЛФ=D"));
	// -- obrv 24.07.18
	
	// ++ obrv 02.03.18
	//ОбластьМакета.Параметры.Покупатель = Объект.Клиент.ФИО;
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Клиент, Объект.Дата);
	СведенияОПродавце = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	
	
	ПараметрыШапки.Вставить("ОрганизацияНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование"));
	ПараметрыШапки.Вставить("ОрганизацияРеквизиты",		ПредставлениеДляПечати(СведенияОПродавце));
	
	ПараметрыШапки.Вставить("ПокупательНаименование",	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование"));
	ПараметрыШапки.Вставить("ПокупательРеквизиты",		ПредставлениеДляПечати(СведенияОПокупателе));
	// -- obrv 02.03.18
	
	// ++ obrv 24.07.18
	//Если  ПустаяСтрока(Объект.Клиент.ИНН) <> Истина Тогда
	//	ОбластьМакета.Параметры.Покупатель = ОбластьМакета.Параметры.Покупатель + ", ИНН "+	Объект.Клиент.ИНН;
	//КонецЕсли;
	//ОбластьМакета.Параметры.организация = Объект.Организация.ПолноеНаименование + ", ИНН " + Объект.Организация.ИНН;
	//обл = "";
	//Если Объект.Клиент.Область.Пустая() <> Истина Тогда
	//	обл = Объект.Клиент.Область.Наименование + ", ";
	//КонецЕсли;
	//ОбластьМакета.Параметры.Адрес = Объект.Клиент.Страна2.Наименование + ", " + Объект.Клиент.Область.Наименование + ", " + Объект.Клиент.Город2.Наименование;
	//ОбластьМакета.Параметры.Телефон = Объект.Клиент.Телефон;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
	// -- obrv 24.07.18
	
	ТабДокумент.Вывести(ОбластьМакета); 
	ОбластьМакета = Макет.ПолучитьОбласть("заголовок2");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	
	НомерСтроки = 0;
	
	Итого = 0;
	Скидка = 0;
	
	
	ТаблицаТовары = Объект.Таблица.Выгрузить();
	Индекс = 0;
	Пока Индекс < ТаблицаТовары.Количество() Цикл
		Если ТаблицаТовары[Индекс].Отменено Тогда
			ТаблицаТовары.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары.Колонки.Добавить("Наименование");
	ИспользоватьНаименованияПоставщиков = ПолучитьФункциональнуюОпцию("дт_ИспользоватьНаименованияПоставщиков")
	И дт_ОбщегоНазначенияВызовСервераПовтИсп.ДатаНачалаУчетаНаименованийПоставщиков() <= Объект.Дата;
	
	
	Если ИспользоватьНаименованияПоставщиков Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Товар КАК Номенклатура,
		|	ТаблицаТовары.укод КАК укод
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ИндКод.Ссылка КАК Партия
		|ПОМЕСТИТЬ ВТ_ТоварыПартии
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИндКод КАК ИндКод
		|		ПО ВТ_Товары.укод = ИндКод.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТоварыПартии.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(НоменклатураПоставщиков.Наименование) КАК Наименование
		|ИЗ
		|	ВТ_ТоварыПартии КАК ВТ_ТоварыПартии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.дт_НоменклатураПоставщиков.СрезПоследних(
		|				&Дата,
		|				Номенклатура В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_Товары.Номенклатура
		|					ИЗ
		|						ВТ_Товары)) КАК НоменклатураПоставщиков
		|		ПО ВТ_ТоварыПартии.Номенклатура = НоменклатураПоставщиков.Номенклатура
		|			И ВТ_ТоварыПартии.Партия = НоменклатураПоставщиков.Партия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТоварыПартии.НомерСтроки";
		
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТаблицаТовары[ВыборкаДетальныеЗаписи.НомерСтроки - 1].Наименование = ВыборкаДетальныеЗаписи.Наименование;
		КонецЦикла;
		
		
		
	Иначе		
		
		Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			
			СтрокаТаблицы.Наименование = СтрокаТаблицы.Товар.Наименование;	
			
		КонецЦикла;
	КонецЕсли;
	
	Итого = Объект.ИтогоРекв;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.н = НомерСтроки;
		ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.укод; 
		ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Товар.Артикул;
		//ОбластьСтроки.Параметры.нпроизв = СтрокаТабличнойЧасти.Товар.НомерПроизводителя;
		сост = СтрокаТабличнойЧасти.Товар.Состояние;
		
		ОбластьСтроки.Параметры.состояние = сост;
		Если Объект.АртикулВНазвании Тогда
			// ++ obrv 20.12.19
			//ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Артикул + " " +СтрокаТабличнойЧасти.Товар.Наименование;
			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Артикул + " " +СтрокаТабличнойЧасти.Наименование;
		Иначе
			//ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Наименование;
			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Наименование;
			// -- obrv 20.12.19
		КонецЕсли;
		
		Скидка1 = 0;
		
		
		ОбластьСтроки.Параметры.цена = СтрокаТабличнойЧасти.Цена;
		ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;
		
		//Итого = Итого + СтрокаТабличнойЧасти.Сумма;
		Если СтрокаТабличнойЧасти.Скидка <> Null И СтрокаТабличнойЧасти.Скидка > 0 Тогда
			Скидка = Скидка + СтрокаТабличнойЧасти.Скидка;
			Скидка1 = СтрокаТабличнойЧасти.Скидка;
		Иначе
			Скидка = Скидка + (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
			Скидка1 = (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
		КонецЕсли;
		ОбластьСтроки.Параметры.сумма = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество - Скидка1;
		//ОбластьСтроки.Параметры.скидка = Скидка1; 
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("подвал");
	
	//ОбластьМакета.Параметры.СрокПроверки = "5 дней";
	//ОбластьМакета.Параметры.доставка = "" + Объект.Доставка;
	
	// ++ obrv 24.07.18
	//ОбластьМакета.Параметры.ИтогоСумма = "" + Итого + " р.";
	//ФормСтрока = "Л = ru_RU; ДП = Истина";
	//ОбластьМакета.Параметры.прописью = ЧислоПрописью(Итого - Скидка,ФормСтрока,"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	ПараметрыПодвала = Новый Структура();
	ПараметрыПодвала.Вставить("КоличествоСтрок", НомерСтроки);
	ПараметрыПодвала.Вставить("СуммаИтого", Формат(Итого, "ЧДЦ=2; ЧГ=3,0"));
	ПараметрыПодвала.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(Итого, дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
	
	
	ПараметрыПодвала.Вставить("ПродавецФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Объект.КтоПродал));
	
	Ответственные = Объект.Ответственные.Выгрузить(); 
	СтрокаТаблицы = Ответственные.Найти(ПредопределенноеЗначение("Перечисление.дт_РолиВПродаже.Сборщик"), "Роль");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ФИО = СтрокаТаблицы.Сотрудник;
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПодвала.Вставить("СборщикФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЕсли;	
		
	КонецЕсли;
	
	СтрокаТаблицы = Ответственные.Найти(Перечисления.дт_РолиВПродаже.Упаковщик, "Роль");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ФИО = СтрокаТаблицы.Сотрудник;
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПодвала.Вставить("УпаковщикФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЕсли;	
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыПодвала);
	// -- obrv 24.07.18
	
	//ОбластьМакета.Параметры.Скидка = "" + Скидка+ " р.";
	
	//ОбластьМакета.Параметры.Продавец = Объект.КтоПродал.ФИО;
	
	ТабДокумент.РазмерКолонтитулаСнизу=25;
	ТабДокумент.НижнийКолонтитул.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
	ТабДокумент.НижнийКолонтитул.Шрифт=Новый Шрифт(Макет.Область(1,1).Шрифт,,14);
	ТабДокумент.НижнийКолонтитул.ТекстСправа = "№"+номерТЧ+объект.Организация.БукваВНакладной+" / №"+объект.Номер;
	ТабДокумент.НижнийКолонтитул.Выводить=Истина; 
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции // ПолучитьТабличныйДокументТоварныйЧек()



&НаСервере
Функция ПечатьБУ()
	// Вставить содержимое обработчика.
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет       =   ПолучитьМакет("ТоварнаяНакладная");
	//Если Объект.Организация.Код = "000000001" Тогда
	//	 Макет       =   ПолучитьМакет("ТоварнаяНакладнаяИП");
	//КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Товарная Накладная № "+Объект.Номер+"Р";
	ОбластьМакета.Параметры.Дата = "Дата: "+Формат(Объект.Дата,"ДЛФ=Д")+" время: "+Формат(Объект.Дата,"ДФ=ЧЧ:мм");
	ОбластьМакета.Параметры.Продавец = Объект.Организация.ПолноеНаименование + ", ИНН " + Объект.Организация.ИНН + ", email: info@dt-trans.ru";
	
	// ++ obrv 01.03.18
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Клиент, Объект.Дата);
	//покупатель = Объект.Клиент.ФИО;
	покупатель = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ИНН,Телефоны,Email");
	
	//Если  ПустаяСтрока(Объект.Клиент.ИНН) <> Истина Тогда
	//	покупатель = покупатель + ", ИНН "+	Объект.Клиент.ИНН;
	//КонецЕсли;
	//Если  ПустаяСтрока(Объект.Клиент.Email) <> Истина Тогда
	//	покупатель = покупатель + ", email "+	Объект.Клиент.Email;
	//КонецЕсли;
	// -- obrv 01.03.18
	
	
	обл = "";
	ОбластьМакета.Параметры.Покупатель  = покупатель;
	Если Объект.Клиент.Область.Пустая() <> Истина Тогда
		обл = Объект.Клиент.Область.Наименование + ", ";
	КонецЕсли;
	//ОбластьМакета.Параметры.Адрес = Объект.Клиент.Страна2.Наименование + ", " + Объект.Клиент.Область.Наименование + ", " + Объект.Клиент.Город2.Наименование;
	//ОбластьМакета.Параметры.Телефон = Объект.Клиент.Телефон;
	ТабДокумент.Вывести(ОбластьМакета); 
	ОбластьМакета = Макет.ПолучитьОбласть("заголовок2");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	
	НомерСтроки = 0;
	
	Итого = 0;
	Скидка = 0;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Таблица Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.н = НомерСтроки;
		ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.укод; 
		ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Товар.Артикул;
		//ОбластьСтроки.Параметры.нпроизв = СтрокаТабличнойЧасти.Товар.НомерПроизводителя;
		сост = СтрокаТабличнойЧасти.Товар.Состояние;
		
		ОбластьСтроки.Параметры.состояние = сост;
		Если Объект.АртикулВНазвании Тогда
			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Артикул + " " +СтрокаТабличнойЧасти.Товар.Наименование;
		Иначе
			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Наименование;
		КонецЕсли;
		
		Скидка1 = 0;
		
		
		ОбластьСтроки.Параметры.цена = СтрокаТабличнойЧасти.Цена;
		ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;
		
		Итого = Итого + СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
		Если СтрокаТабличнойЧасти.Скидка <> Null И СтрокаТабличнойЧасти.Скидка > 0 Тогда
			Скидка = Скидка + СтрокаТабличнойЧасти.Скидка;
			Скидка1 = СтрокаТабличнойЧасти.Скидка;
		Иначе
			Скидка = Скидка + (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
			Скидка1 = (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
		КонецЕсли;
		ОбластьСтроки.Параметры.сумма = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество - Скидка1;
		//ОбластьСтроки.Параметры.скидка = Скидка1; 
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("подвал");
	Если Число(Объект.СрокПроверки) < 5 Тогда
		ОбластьМакета.Параметры.СрокПроверки = "" + Объект.СрокПроверки + " дня";
	Иначе
		ОбластьМакета.Параметры.СрокПроверки = "" + Объект.СрокПроверки + " дней";
	КонецЕсли;
	
	Если Объект.TipOplati.ВидРасчета.Пустая() Тогда
		ОбластьМакета.Параметры.видрасчета = "" + ВидРасходаНаличные();
	Иначе
		ОбластьМакета.Параметры.видрасчета = "" + Объект.TipOplati.Наименование;
	КонецЕсли;
	
	//ОбластьМакета.Параметры.расход = "" + Объект.Расход + " р.";
	
	//ОбластьМакета.Параметры.Скидка = "" + Скидка+ " р.";
	Если ВидРасходаСндс() Тогда
		ндс = (Объект.ИтогоРекв * 0.18)/1.18;
		ОбластьМакета.Параметры.ИтогоСумма = "" + Формат((Объект.ИтогоРекв - ндс),"ЧЦ=10; ЧДЦ=2") + " р.";
		ОбластьМакета.Параметры.Парам1 = "НДС:"; 		
		ОбластьМакета.Параметры.Парам1Знач = "" + Формат(ндс,"ЧЦ=10; ЧДЦ=2") + " р." ;
		ОбластьМакета.Параметры.Парам2 = "Итого:";
		ОбластьМакета.Параметры.Парам2Знач = "" + (Объект.ИтогоРекв)+ " р.";
	Иначе
		ОбластьМакета.Параметры.ИтогоСумма = "" + Итого + " р.";
		ОбластьМакета.Параметры.Парам1 = "Итого:";
		ОбластьМакета.Параметры.Парам1Знач = "" + (Объект.ИтогоРекв)+ " р.";
	КонецЕсли;
	//Если Объект.Организация.Код = "000000001" Тогда
	//    ОбластьМакета.Параметры.Продавец = "";
	//Иначе
	ОбластьМакета.Параметры.Продавец = Объект.КтоПродал.ФИО;
	//КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции

&НаСервере
Функция ВидРасходаНаличные()
	Возврат Перечисления.ВидРасчета.Наличные;
КонецФункции

&НаСервере
Функция ВидРасходаСндс()
	рез = ложь;
	Если Объект.TipOplati.ВидРасчета = Перечисления.ВидРасчета.БезналСНДС Тогда
		рез = истина;
	КонецЕсли;
	
	Возврат рез;
КонецФункции

&НаСервере
Функция ПолучитьМакет(название)
	Возврат  Документы.ПродажаЗапчастей.ПолучитьМакет(название);
КонецФункции

&НаСервере
Функция НарядНаСборкуСервер(Сортировка = Неопределено)
	
	// Вставить содержимое обработчика.
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет         =   ПолучитьМакет("НарядНаСборку");
	ОбластьМакета = Макет.ПолучитьОбласть("шапка");
	ОбластьМакета.Параметры.заголовок	  = "Наряд на сборку №"+Объект.Номер+"Р";
	ОбластьМакета.Параметры.покупатель 	  = Объект.Клиент;
	ОбластьМакета.Параметры.Ответственный = Объект.КтоПродал;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// ++ obrv 24.07.18
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Товар КАК Товар,
	|	ТаблицаДокумента.Склад КАК Склад,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.укод КАК укод,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	НЕ ТаблицаДокумента.Отменено
	|	И ТаблицаДокумента.Склад = &Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Товар КАК Товар,
	|	ВТ_Товары.Количество КАК колво,
	|	ВТ_Товары.укод КАК Код,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	ЕСТЬNULL(дт_МестаХранения.МестоХранения.Наименование, """") КАК Место,
	|	СпрНоменклатура.НомерПроизводителя КАК нпроизв,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА СпрНоменклатура.Наименование
	|		ИНАЧЕ СпрНоменклатура.НаименованиеПолное
	|	КОНЕЦ КАК название,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВТ_Товары.Товар = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дт_МестаХраненияНоменклатуры.СрезПоследних(, Склад = &Склад
	|		И Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Товар
	|			ИЗ
	|				ВТ_Товары)) КАК дт_МестаХранения
	|		ПО ВТ_Товары.Товар = дт_МестаХранения.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	&ПолеСортировки";
	
	ПолеСортировки = ?(Сортировка = Неопределено, "НомерСтроки", Сортировка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеСортировки", ПолеСортировки);
	
	Запрос.УстановитьПараметр("ТаблицаДокумента",  Объект.Таблица.Выгрузить());
	Запрос.УстановитьПараметр("Склад",  Объект.Склад);
	Запрос.УстановитьПараметр("ДатаДокумента",  Объект.Дата);
	
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	// -- obrv 24.07.18
	
	
	ОбластьСтроки = Макет.ПолучитьОбласть("строка");
	НомерСтроки = 0;
	// ++ obrv 24.07.18
	//Для Каждого СтрокаТабличнойЧасти Из Объект.Таблица Цикл
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаДокумента Цикл
		// -- obrv 24.07.18
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.н = НомерСтроки;
		// ++ obrv 24.07.18
		//ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.укод; 
		//ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Товар.Артикул;
		//ОбластьСтроки.Параметры.название = СтрокаТабличнойЧасти.Товар.Наименование;
		//ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;
		//ОбластьСтроки.Параметры.место = СтрокаТабличнойЧасти.Товар.МестоНаСкладе2;
		//ОбластьСтроки.Параметры.нпроизв = СтрокаТабличнойЧасти.Товар.НомерПроизводителя;
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		// -- obrv 24.07.18
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	ОбластьСтроки = Макет.ПолучитьОбласть("footer");
	ТабДокумент.Вывести(ОбластьСтроки);
	
	Возврат ТабДокумент;
	
КонецФункции // НарядНаСборкуСервер()



&НаКлиенте
Процедура ВычитатьИзСуммыПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ПосчитатьИтоги();
	//ПересчетИтоговСУчетомСписанияБонусов();
КонецПроцедуры


&НаКлиенте
Процедура ПоказыватьРекЦенуПриИзменении(Элемент)
	Если ПоказыватьРекЦену Тогда
		Элементы.ТаблицаТоварРекомендованаяЦена.Видимость = ИСТИНА;
	Иначе
		Элементы.ТаблицаТоварРекомендованаяЦена.Видимость = ЛОЖЬ;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПриИзменении(Элемент)
	Если ВозвратЗначение() = Истина Тогда
		Элементы.СуммаВозврат.Видимость = Истина;
	Иначе
		Элементы.СуммаВозврат.Видимость = Ложь;
	КонецЕсли
КонецПроцедуры

&НаСервере
Функция ВозвратЗначение()
	Возврат Объект.ВозвратТовара;
КонецФункции


&НаСервере
Процедура ДобавлениеЗапчасти(ДанныеЗаполнения)
	Строка = Объект.Таблица.Добавить();
	Строка.Товар = ДанныеЗаполнения.Товар;
	
	//	Если ПоказыватьРекЦену Тогда
	//	 	Строка.Цена = деталь.Цена;
	//	Иначе
	//		Строка.Цена = 0;
	//	КонецЕсли;
	
	Строка.Цена1 = ДанныеЗаполнения.Цена;//деталь.Цена;
	Строка.Цена = ДанныеЗаполнения.цена;
	Строка.Количество = ДанныеЗаполнения.Количество;
	Строка.машина = ДанныеЗаполнения.машина;
	Строка.Комментарий = ДанныеЗаполнения.машина;
	Строка.укод = ДанныеЗаполнения.укод;
	Строка.Партия = ДанныеЗаполнения.Партия;
	Строка.Склад = ДанныеЗаполнения.Склад;
	Строка.МестоХранения = ДанныеЗаполнения.Деталь.МестоХранения;
	
	// ++ obrv 24.01.18
	ЭтаФорма.Модифицированность = Истина;
	// -- obrv 24.01.18
	//Если Товар.ЭтоНоваяЗапчасть = Истина Тогда
	//	 Строка.ПродНак = деталь.ПродНак;
	//КонецЕсли;
	//Строка.Стеллаж = деталь.Стеллаж;
КонецПроцедуры

#Область МножественноеДобавление

&НаСервере
Процедура ДобавлениеЗапчастиГруппой(Данные)
	
	Для Каждого эл ИЗ Данные.МассивДанных Цикл
		
		Строка = Объект.Таблица.Добавить();
		
		Строка.Товар 			= эл.Товар;
		Строка.Цена1 			= эл.наценкаФ;//деталь.Цена;
		Строка.Цена 			= эл.наценкаФ;
		Строка.Количество 	= эл.КолвоОстаток;
		Строка.машина 		= эл.Машина;
		Строка.Комментарий 	= эл.Машина;
		Строка.укод 			= эл.Код;
		Строка.Партия 		= эл.индкод;
		Строка.Склад 			= эл.Склад;
		Строка.МестоХранения 	= эл.МестоХранения;
		
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура Доставка()
	Если Объект.ЕстьДоставка = Истина Тогда
		// ++ obrv 13.06.18
		//Если Объект.Вес = 0 ИЛИ Объект.Объем = 0 ИЛИ Объект.КоличествоМест = 0 ИЛИ Объект.ГородОтправки = Справочники.Город.ПустаяСсылка() ИЛИ Объект.РегионПолучения = Справочники.Область.ПустаяСсылка() ИЛИ  Объект.ГородПолучения = Справочники.Город.ПустаяСсылка() ИЛИ Объект.СтоимостьДоставки = 0 ИЛИ Объект.ТранспортнаяКомпания = Справочники.ТранспротнаяКомпания.ПустаяСсылка() Тогда
		Если Объект.Вес = 0 ИЛИ Объект.ГородОтправки = Справочники.Город.ПустаяСсылка() ИЛИ Объект.РегионПолучения = Справочники.Область.ПустаяСсылка() ИЛИ  Объект.ГородПолучения = Справочники.Город.ПустаяСсылка() ИЛИ Объект.СтоимостьДоставки = 0 ИЛИ Объект.ТранспортнаяКомпания = Справочники.ТранспротнаяКомпания.ПустаяСсылка() Тогда
			// -- obrv 13.06.18	
			Объект.ДоставкаНеЗаполнена = Истина;
		Иначе
			Объект.ДоставкаНеЗаполнена = Ложь;
		КонецЕсли;
	Иначе
		Объект.ДоставкаНеЗаполнена = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура УстановитьЗначПоУм()
	Объект.СтранаПолучения = Справочники.Страна.НайтиПоКоду("000000001");
	Объект.ГородОтправки = Справочники.Город.НайтиПоКоду("000000002");
КонецПроцедуры

&НаСервере
Функция НайтиПользователя()
	// ++ obrv 16.01.18
	//Возврат Справочники.Пользователи.НайтиПоНаименованию(ПолноеИмяПользователя());
	Возврат ПользователиКлиентСервер.ТекущийПользователь();
	// -- obrv 16.01.18
КонецФункции

&НаКлиенте	
Функция ПолностьюОплачено()
	
	
	Возврат Объект.Оплачено;
КонецФункции

&НаСервере
Процедура ПереписьЗаявки()
	Объект.СтатусПродажи = Перечисления.СтатусыПродажи.Оплачено;
	ОбъектЗаявки = Объект.ЗаказКлиента.ПолучитьОбъект();
	ОбъектЗаявки.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.Продажа;
	ОбъектЗаявки.записать();
КонецПроцедуры




&НаСервере
Процедура ПосчитатьИтоги()
	
	Объект.ИтогоРекв =  0;
	
	
	///+ГомзМА 11.10.2023
	Объект.СуммаДокументаНДС = 0;
//	Если НЕ Объект.РучнаяКорректировкаСкидки Тогда
//		Объект.СкидкаВТСпасибо = 0;
//	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.Таблица Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена + СтрокаТаблицы.СуммаНДС;
		КонецЕсли;
		
		Объект.ИтогоРекв = Объект.ИтогоРекв + СтрокаТаблицы.Сумма;
		Объект.СуммаДокументаНДС = Объект.СуммаДокументаНДС + СтрокаТаблицы.СуммаНДС;
		
		///+ГомзМА 18.10.2023
//		Если Объект.Рекомендатель <> Справочники.Клиенты.ПустаяСсылка() И НЕ Объект.РучнаяКорректировкаСкидки Тогда
//			Объект.СкидкаВТСпасибо = Объект.СкидкаВТСпасибо + СтрокаТаблицы.Сумма;
//		КонецЕсли;
		///-ГомзМА 18.10.2023
	КонецЦикла;
	///-ГомзМА 11.10.2023
	
	///+ГомзМА 18.10.2023
//	Если Объект.Рекомендатель <> Справочники.Клиенты.ПустаяСсылка() Тогда
//		Если Объект.РучнаяКорректировкаСкидки Тогда
//			Объект.ИтогоРекв = Объект.ИтогоРекв - Объект.СкидкаВТСпасибо;
//		Иначе
//			Объект.СкидкаВТСпасибо = Объект.СкидкаВТСпасибо * 0.05;
//			Объект.ИтогоРекв = Объект.ИтогоРекв - Объект.СкидкаВТСпасибо;
//		КонецЕсли;
//	КонецЕсли;
	///-ГомзМА 18.10.2023
	
	Если ЗначениеЗаполнено(Объект.ТМЦ) И Объект.ВклВыклРасходникиВСтоимость = Перечисления.ВклВыклРасходниковВСтоимость.ВключитьРасходникиВСтоимость Тогда
		Для каждого СтрокаТМЦ Из Объект.ТМЦ Цикл
			Если СтрокаТМЦ.Сумма = 0 Тогда
				СтрокаТМЦ.Сумма = СтрокаТМЦ.Количество * СтрокаТМЦ.Цена;
			КонецЕсли;
			
			Объект.ИтогоРекв = Объект.ИтогоРекв + СтрокаТМЦ.Сумма;
		КонецЦикла;
	КонецЕсли;
	рассчётКоличества();
	Объект.ИтогоБезнал = Объект.ИтогоРекв;
	
КонецПроцедуры



&НаСервере
Функция Товары123ПоПоступлениюСервер()
	// Вставить содержимое обработчика.
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет       =   ПолучитьМакет("ТоварПоПоступлению");
	ОбластьМакета = Макет.ПолучитьОбласть("заголовок"); 
	ТабДокумент.Вывести(ОбластьМакета);
	
	маш =  Макет.ПолучитьОбласть("поступление");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	сум = Макет.ПолучитьОбласть("сумма");
	общ = Макет.ПолучитьОбласть("общ");
	НомерСтроки = 0;
	
	Итого = 0;
	Скидка = 0;
	машины = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Таблица Цикл
		рез = машины.Найти(СтрокаТабличнойЧасти.Машина);
		Если рез = неопределено Тогда
			машины.Добавить(СтрокаТабличнойЧасти.Машина);
		КонецЕсли;
	КонецЦикла;
	Для Каждого машина Из машины Цикл
		маш.Параметры.имяПоступление = машина.Наименование;
		ТабДокумент.Вывести(маш);
		НомерСтроки = 0;
		итогоМаш = 0;
		скидкаМаш = 0;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Таблица Цикл
			Если машина = СтрокаТабличнойЧасти.Машина Тогда
				НомерСтроки = НомерСтроки + 1;
				ОбластьСтроки.Параметры.н = НомерСтроки;
				ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.Товар.Код; 
				ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Товар.Артикул;
				//ОбластьСтроки.Параметры.нпроизв = СтрокаТабличнойЧасти.Товар.НомерПроизводителя;
				
				ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Наименование;
				Скидка1 = 0;
				Если(СтрДлина(СтрокаТабличнойЧасти.Комментарий)>2) Тогда
					ОбластьСтроки.Параметры.наименование = ОбластьСтроки.Параметры.наименование + ", " + СтрокаТабличнойЧасти.Комментарий;
				КонецЕсли;
				
				ОбластьСтроки.Параметры.цена = СтрокаТабличнойЧасти.Цена;
				ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;
				итогоМаш = итогоМаш + СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
				Итого = Итого + СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
				Если СтрокаТабличнойЧасти.Скидка <> Null И СтрокаТабличнойЧасти.Скидка > 0 Тогда
					Скидка = Скидка + СтрокаТабличнойЧасти.Скидка;
					скидкаМаш = скидкаМаш + СтрокаТабличнойЧасти.Скидка;
					Скидка1 = СтрокаТабличнойЧасти.Скидка;
				Иначе
					Скидка = Скидка + (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
					скидкаМаш = скидкаМаш + (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
					Скидка1 = (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
				КонецЕсли;
				ОбластьСтроки.Параметры.сумма = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество - Скидка1;
				//ОбластьСтроки.Параметры.скидка = Скидка1; 
				
				ТабДокумент.Вывести(ОбластьСтроки);
			КонецЕсли;
		КонецЦикла;
		сум.Параметры.сумма = итогоМаш - скидкаМаш;
		ТабДокумент.Вывести(сум);
	КонецЦикла;
	
	общ.Параметры.сумма = Итого - Скидка;
	ТабДокумент.Вывести(общ);
	
	
	
	Возврат ТабДокумент;	
КонецФункции


&НаСервере
Процедура ЗаменаКомментарий()
	Если Объект.Новые = ИСТИНА Тогда
		Если Найти(Объект.Комментарий,"Новые запчасти") = 0 Тогда
			Объект.Комментарий = Объект.Комментарий + " Новые запчасти"
		КонецЕсли;
	Иначе
		Рез = СтрЗаменить(Объект.Комментарий,"Новые запчасти","");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьКодТовара(Ссылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Код");	
	
КонецФункции // ПолучитьКодТовара()

&НаСервере
Функция ОпределитьНомер()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродажаЗапчастей.Номер КАК Номер
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.Новые = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	рез = Запрос.Выполнить().Выгрузить();
	ном=1;
	Для Каждого стр Из рез Цикл
		Если стр.Номер = Объект.Номер Тогда
			возврат ном;
		КонецЕсли;
		ном=ном+1
	КонецЦикла;
	возврат ном;
КонецФункции

&НаСервере
Функция ОпределитьНомерОрганизация(организация)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродажаЗапчастей.Номер КАК Номер
	|ИЗ
	|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
	|ГДЕ
	|	ПродажаЗапчастей.Организация = &организация
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	запрос.УстановитьПараметр("организация",организация);
	рез = Запрос.Выполнить().Выгрузить();
	ном=1;
	Для Каждого стр Из рез Цикл
		Если стр.Номер = Объект.Номер Тогда
			возврат ном;
		КонецЕсли;
		ном=ном+1
	КонецЦикла;
	возврат ном;
КонецФункции

&НаСервере
Функция НарядДоставкаСервер() Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет       =   ПолучитьМакет("НарядДоставка");
	ОбластьМакета = Макет.ПолучитьОбласть("шапка");
	
	ОбластьМакета.Параметры.заголовок = "Наряд на доставку №"+Объект.Номер+"Р";
	ОбластьМакета.Параметры.откого = Объект.Организация.ОтКогоДоставка;
	ОбластьМакета.Параметры.тк = Объект.ТранспортнаяКомпания.Наименование;
	ОбластьМакета.Параметры.куда = ""+Объект.ГородПолучения+"/"+Объект.РегионПолучения+"/"+Объект.СтранаПолучения+"
	|"+Объект.КоммДост;
	ОбластьМакета.Параметры.Ответственный = объект.КтоПродал;
	получатель = "";
	частный = ложь;
	Если Объект.доставкаКлиент = Истина Тогда
		телефон = Объект.Телефон;
		фио = Объект.НаименованиеИлиФИО;  		
		Если Объект.частный = Истина Тогда 			
			паспорт = Объект.Паспорт+"
			|"+Объект.Прописка;
			частный = истина;
		Иначе
			инн = Объект.ИНН;
			частный = ложь;
		КонецЕсли;
	Иначе
		Если Объект.Клиент.ЧастноеЛицо = Ложь Тогда
			фио = Объект.Клиент.ПолноеНаименование;
			инн = Объект.Клиент.ИНН;
			частный = ложь;
			Если СтрДлина(Объект.Клиент.РеквизитТелефон)>3 Тогда
				телефон = Объект.Клиент.РеквизитТелефон;
			Иначе
				телефон = Объект.Клиент.Телефон;
			КонецЕсли;
		Иначе
			фио = Объект.Клиент.ФИОдост;
			частный = истина;
			паспорт = Объект.Клиент.Паспорт+"
			|"+Объект.Клиент.Прописка;
			Если СтрДлина(Объект.Клиент.ТелефониДост)>3 Тогда
				телефон = Объект.Клиент.ТелефониДост;
			Иначе
				телефон = Объект.Клиент.Телефон;
			КонецЕсли;
		КонецЕсли
	КонецЕсли;	
	Если частный = Ложь Тогда
		ОбластьМакета.Параметры.п1 = "Название Компании:";
		ОбластьМакета.Параметры.зп1 = фио;
		ОбластьМакета.Параметры.п2 = "ИНН:";
		ОбластьМакета.Параметры.зп2 = инн;
		ОбластьМакета.Параметры.п3 = "Телефон:";
		ОбластьМакета.Параметры.зп3 = телефон;		 
	Иначе
		ОбластьМакета.Параметры.п1 = "ФИО:";
		ОбластьМакета.Параметры.зп1 = фио;
		ОбластьМакета.Параметры.п2 = "Паспорт/Прописка:";
		ОбластьМакета.Параметры.зп2 = паспорт;
		ОбластьМакета.Параметры.п3 = "Телефон:";
		ОбластьМакета.Параметры.зп3 = телефон;
	КонецЕсли;
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(""); 
	Штрихкод.Ширина = 120; 
	Штрихкод.Высота = 120;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = Объект.Номер;
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = Штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод, Истина);
	
	
	
	
	ОбластьМакета.Рисунки.КартинкаЗаготовка.Картинка = КартинкаШтрихКод;
	
	
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьСтроки = Макет.ПолучитьОбласть("строка");
	НомерСтроки = 0;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Таблица Цикл
		Если СтрокаТабличнойЧасти.Отменено Тогда
			Продолжить
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.н = НомерСтроки;
		ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.укод; 
		ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Товар.Артикул;
		ОбластьСтроки.Параметры.название = СтрокаТабличнойЧасти.Товар.Наименование;
		ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;
		ОбластьСтроки.Параметры.Объем = СтрокаТабличнойЧасти.Товар.Объем;
		ОбластьСтроки.Параметры.Вес = СтрокаТабличнойЧасти.Товар.Вес;
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	//Волков ИО 18.01.24 ++
	ОбластьСтроки = Макет.ПолучитьОбласть("Сборщик");
    ТабДокумент.Вывести(ОбластьСтроки);
	//Волков ИО 18.01.24 --

	
	Возврат ТабДокумент;	 
	
	
КонецФункции // НарядДоставкаСервер()

&НаСервере
Процедура ОбновитьОстатокДенег()
	расх = 0;
	потр1 = 0;
	Если Объект.Ссылка.Пустая() <> Истина Тогда
		запрос1 = Новый Запрос;
		запрос1.текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(Расходы.Сумма) КАК Сумма
		|ИЗ
		|	Документ.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Откуда = &Откуда";
		запрос1.УстановитьПараметр("Откуда", Объект.Ссылка);
		расх = запрос1.Выполнить().Выгрузить().Итог("Сумма");	
		
		Объект.ОстатокДенег = Объект.ИтогоРекв - расх;
		
		запрос1.текст = "ВЫБРАТЬ
		|	ВыводДенегИзРазборки.Таблица.(
		|		нам,
		|		марату,
		|       Artem
		|	)
		|ИЗ
		|	Документ.ВыводДенегИзРазборки КАК ВыводДенегИзРазборки
		|ГДЕ
		|	ВыводДенегИзРазборки.Таблица.Документ = &Документ";
		запрос1.УстановитьПараметр("Документ", Объект.Ссылка);
		рез1 = запрос1.Выполнить().Выгрузить();
		потр1 = 0;
		Для Каждого стр Из рез1 Цикл
			потр1 = потр1 + стр.Таблица.Итог("Нам");
			потр1 = потр1 + стр.Таблица.Итог("Марату");
			потр1 = потр1 + стр.Таблица.Итог("Artem");
		КонецЦикла;
	КонецЕсли;
	
	Объект.ОстатокДенег = Объект.ОстатокДенег - потр1-Объект.Откат;
	
	Если Объект.Оплачено <> Истина Тогда
		Объект.ОстатокДенег = 0 + Объект.УжеОплачено - расх - потр1-Объект.Откат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОприходоватьСерв()
	док = Документы.ПриходДенегНаСчет.СоздатьДокумент();
	док.Заполнить(Объект.Ссылка);
	Док.Дата = ТекущаяДата();
	//док.Дата = ТекущаяДата();
	//док.ОбщаяСумма = Объект.ИтогоРекв; 
	//стр = док.ТабличнаяЧасть1.Вставить(1);
	//стр.Документ = Объект.Ссылка;
	//стр.Сумма = Объект.ИтогоРекв;
	док.Записать(РежимЗаписиДокумента.Запись);
	Возврат док.Ссылка;
КонецФункции

&НаСервере
Функция МожноОприходовать()
	рез = истина;
	з=новый запрос;
	з.Текст="ВЫБРАТЬ
	|	ПриходДенегНаСчет.Ссылка,
	|	ПриходДенегНаСчет.Номер
	|ИЗ
	|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	|ГДЕ
	|	ПриходДенегНаСчет.Сделка = &Документ";
	з.УстановитьПараметр("Документ",Объект.Ссылка);
	р=з.Выполнить().Выгрузить();
	Если р.Количество() > 0 Тогда
		рез = ложь;
	КОнецЕсли;
	возврат рез;
КонецФункции

&НаСервере
Функция ПолучитьПриход()
	з=новый запрос;
	з.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходДенегНаСчет.Ссылка КАК Ссылка,
	|	ПриходДенегНаСчет.Номер КАК Номер
	|ИЗ
	|	Документ.ПриходДенегНаСчет КАК ПриходДенегНаСчет
	|ГДЕ
	|	ПриходДенегНаСчет.Сделка = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходДенегНаСчет.Дата УБЫВ";
	з.УстановитьПараметр("Документ",Объект.Ссылка);
	р=з.Выполнить().Выгрузить();
	
	Результат = Неопределено;
	Если р.Количество() <> 0 Тогда
		Результат = р[0].Ссылка;
	КонецЕсли;
	
	возврат Результат;
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если объект.Ссылка.Пустая() тогда
		Попытка
			ОбъектЗаявки = Объект.ЗаказКлиента.ПолучитьОбъект();
			ОбъектЗаявки.Состояние = Перечисления.дт_СостоянияЗаказовКлиента.ЖдёмДенег;
			ОбъектЗаявки.записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура СтатусПродажиПриИзмененииНаСервере()
	Если объект.СтатусПродажи = Перечисления.СтатусыПродажи.Сорвалась И  НЕ ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) тогда
		ЭтаФорма.Элементы.Страницы.Доступность = Ложь;
	КонецЕсли;
	
	Если объект.СтатусПродажи = Перечисления.СтатусыПродажи.Оплачено тогда
		Если Объект.Оплачено Тогда
			Элементы.УжеОплачено.Видимость = Ложь;
			
		Иначе
			Элементы.УжеОплачено.Видимость = Истина;
		КонецЕсли;
		
		Попытка 
			ПереписьЗаявки();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПродажиПриИзменении(Элемент)
	СтатусПродажиПриИзмененииНаСервере();
	УстановитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Функция  ВнешнееСобытиеНаСервере(Код)
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндКод.Ссылка КАК Ссылка,
	|	ИндКод.Владелец КАК Владелец
	|ИЗ
	|	Справочник.ИндКод КАК ИндКод
	|ГДЕ
	|	ИндКод.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование",Код);
	
	Результат = запрос.Выполнить().Выгрузить();
	
	СтруктураДляПоиска = Новый Структура;
	структураДляПоиска.Вставить("Товар",Результат[0].Владелец);
	
	МассивСтрок = Объект.таблица.НайтиСтроки(структураДляПоиска);
	Если  МассивСтрок.количество() > 0 Тогда
		
		СтруктураДляПоиска = Новый Структура;
		структураДляПоиска.Вставить("Партия",Справочники.ИндКод.ПустаяСсылка());
		структураДляПоиска.Вставить("Товар",Результат[0].Владелец);
		
		МассивСтрок = Объект.таблица.НайтиСтроки(структураДляПоиска);
		Если  МассивСтрок.количество() > 0 Тогда
			МассивСтрок[0].партия = Результат[0].Ссылка;
			МассивСтрок[0].Укод = Код;
			//элементы.Таблица.ТекущаяСтрока = 
			Возврат МассивСтрок[0].ПолучитьИдентификатор();	
		КонецЕсли;
		
		
	Иначе	
		НоваяСтрока = объект.Таблица.Добавить();
		НоваяСтрока.товар = Результат[0].Владелец;
		НоваяСтрока.партия = Результат[0].Ссылка;
		НоваяСтрока.Укод = Код;
		НоваяСтрока.количество = 1;
		НоваяСтрока.Склад = Объект.Склад;
		НоваяСтрока.Цена = ВозвратЦены(Результат[0].Владелец);
		
		//элементы.Таблица.ТекущаяСтрока = НоваяСтрока;
		Возврат НоваяСтрока.ПолучитьИдентификатор();	
	КонецЕсли;	
	
	
	СтруктураДляПоиска = Новый Структура;
	структураДляПоиска.Вставить("Партия",Результат[0].Ссылка);
	структураДляПоиска.Вставить("Товар",Результат[0].Владелец);
	
	МассивСтрок = Объект.таблица.НайтиСтроки(структураДляПоиска);
	Если  МассивСтрок.количество() = 0 Тогда
		НоваяСтрока = объект.Таблица.Добавить();
		НоваяСтрока.товар = Результат[0].Владелец;
		НоваяСтрока.партия = Результат[0].Ссылка;
		НоваяСтрока.Укод = Код;
		НоваяСтрока.количество = 1;
		НоваяСтрока.Склад = Объект.Склад;
		НоваяСтрока.Цена = ВозвратЦены(Результат[0].Владелец);
		Возврат НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	//Если Событие = "Штрихкод" Тогда
	
	//элементы.Таблица.ТекущаяСтрока = ВнешнееСобытиеНаСервере(Данные);
	//
	//ОбработкаИзмененияСтроки("Таблица");
	//СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
	//ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.Таблица.ТекущиеДанные);
	//СтруктураСтроки.Номенклатура = Элементы.Таблица.ТекущиеДанные.Товар;
	//СтруктураСтроки.Вставить("Дата", Объект.Дата);
	//ЗаполнитьЗначенияСвойств(Элементы.Таблица.ТекущиеДанные, СтруктураСтроки,, "Партия");
	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТМЦИнвентарныйНомерПриИзменении(Элемент)
	
	///+ГомзМА 11.05.2023
	ТекСтрока = Элементы.ТМЦ.ТекущиеДанные;
	
	РаботаСДокументамиТМЦКлиент.УстановитьДанныеПоИнвентарномуНомеру(ТекСтрока);
	
	//Потом переделать  
	ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
	///-ГомзМА 11.05.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТМЦКоличествоПриИзменении(Элемент)
	
	///+ГомзМА 11.05.2023
	ТекСтрока = Элементы.ТМЦ.ТекущиеДанные;
	
	//Потом переделать  
	ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
	///-ГомзМА 11.05.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТМЦЦенаПриИзменении(Элемент)
	
	///+ГомзМА 11.05.2023
	ТекСтрока = Элементы.ТМЦ.ТекущиеДанные;
	
	//Потом переделать  
	ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
	///-ГомзМА 11.05.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТМЦПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	ПосчитатьИтоги();
	//ПересчетИтоговСУчетомСписанияБонусов();
КонецПроцедуры

&НаКлиенте
Процедура ВклВыклРасходникиВСтоимостьПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	ПосчитатьИтоги();
	//ПересчетИтоговСУчетомСписанияБонусов();
КонецПроцедуры


&НаСервере
Функция СформироватьПечатныеФормы(ИменаМакетов)
	
	//Результат = Неопределено;
	//// Формирование табличных документов.
	//Если ЗначениеЗаполнено(Параметры.ИсточникДанных) Тогда
	//	УправлениеПечатью.ПечатьПоВнешнемуИсточнику(
	//		Параметры.ИсточникДанных,
	//		Параметры.ПараметрыИсточника,
	//		Результат,
	//		ОбъектыПечати,
	//		ПараметрыВывода);
	//Иначе
	//ТипыОбъектовПечати = Новый Массив;
	//Параметры.ПараметрыПечати.Свойство("ТипыОбъектовПечати", ТипыОбъектовПечати);
	//ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(Параметры.ИмяМенеджераПечати, ИменаМакетов,
	//	Параметры.ПараметрКоманды, Параметры.ПараметрыПечати.ДополнительныеПараметры, ТипыОбъектовПечати);
	//ОбъектыПечати = ПечатныеФормы.ОбъектыПечати;
	//ПараметрыВывода = ПечатныеФормы.ПараметрыВывода;
	//Результат = ПечатныеФормы.КоллекцияПечатныхФорм;
	//КонецЕсли;
	//
	//// Установка признака сохранения печатной формы в файл (не открывать форму, сразу сохранять в файл).
	//Если ТипЗнч(Параметры.ПараметрыПечати) = Тип("Структура") И Параметры.ПараметрыПечати.Свойство("ФорматСохранения") Тогда
	//	НайденныйФормат = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента().Найти(Параметры.ПараметрыПечати.ФорматСохранения, "ТипФайлаТабличногоДокумента");
	//	Если НайденныйФормат <> Неопределено Тогда
	//		НастройкиФорматаСохранения = Новый Структура("ТипФайлаТабличногоДокумента,Представление,Расширение,Фильтр");
	//		ЗаполнитьЗначенияСвойств(НастройкиФорматаСохранения, НайденныйФормат);
	//		НастройкиФорматаСохранения.Фильтр = НастройкиФорматаСохранения.Представление + "|*." + НастройкиФорматаСохранения.Расширение;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьУПДВДиадокНаСервере()
	
	///+ГомзМА 23.05.2023
	//ТабДок = Новый ТабличныйДокумент;
	
	//Макет = Обработки.ПечатьОбщихФорм.ПолучитьМакет("ПФ_MXL_УниверсальныйПередаточныйДокумент");
	
	//Обработки.ПечатьОбщихФорм.ЗаполнитьТабличныйДокументУПД(
	
	
	//Результат = СформироватьПечатныеФормы("УПД");
	//ОткрытьФорму("ОбщаяФорма.ПечатьДокументов");
	
	//
	//МассивОбъектов = Новый Массив;
	//МассивОбъектов.Добавить(Объект.Ссылка);
	//
	//ПараметрыСтруктуры = Новый Структура;
	//ПараметрыСтруктуры.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
	//
	//
	//ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы("Обработка.ПечатьОбщихФорм", "УПД", МассивОбъектов, ПараметрыСтруктуры);
	
	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УПД") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//	КоллекцияПечатныхФорм,
	//	"УПД",
	//	"Универсальный передаточный документ (УПД)",
	//	СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	//	
	//КонецЕсли;
	///-ГомзМА 23.05.2023
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	////в посимвольном режиме
	//  ЧтениеДжей = новый ЧтениеJSON;
	//  ЧтениеДжей.УстановитьСтроку(Параметр);
	//  структура_= ПрочитатьJSON(ЧтениеДжей);
	//  ЧтениеДжей.Закрыть();
	
	//  ЭтаФорма.Реквизит1 = ЭтаФорма.Реквизит1 + структура_.key;
	//  Сообщить(Параметр);
	
	//  //в режиме перехвата эмуляции клавиатуры
	//  ЧтениеДжей = новый ЧтениеJSON;
	//  ЧтениеДжей.УстановитьСтроку(Параметр);
	//  массив_ = ПрочитатьJSON(ЧтениеДжей);
	//  ЧтениеДжей.Закрыть();
	
	//  Для каждого эм из массив_ Цикл
	//     Сообщить(Строка(эм.sc));             //Скан-код клавиши
	//КонецЦикла;
КонецПроцедуры


&НаСервере
Функция ПолучитьСкладПоПартии(индкод)
	
	///+ГомзМА 26.09.2023
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрНакопления1Остатки.Товар КАК Товар,
	|	РегистрНакопления1Остатки.индкод КАК индкод,
	|	РегистрНакопления1Остатки.Склад КАК Склад
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
	|ГДЕ
	|	РегистрНакопления1Остатки.индкод = &индкод";
	
	Запрос.УстановитьПараметр("индкод", индкод);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.Склад;
	///-ГомзМА 26.09.2023
	
КонецФункции // ПолучитьСкладПоПартии()




#КонецОбласти

&НаКлиенте
Процедура ПечатьСписания()
	
	ТабДокумент = ПолучитьТабличныйДокументСписание();
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ВыдачаТовара");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДокумент;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "ВыдачаТовара";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
	
	//ТабДокумент.Показать();
КонецПроцедуры

&НаКлиенте
Процедура СписаниеТовара(Команда)
	ПечатьСписания();
КонецПроцедуры  


&НаСервере
Функция ПолучитьТабличныйДокументСписание()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет       =   ПолучитьМакет("ВыдачаТовара");
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	номерТЧ = ОпределитьНомерОрганизация(Объект.Организация);
	Если объект.НомерПП > 0 Тогда
		номерТЧ = объект.НомерПП;
	Иначе
		объект.НомерПП = номерТЧ;
	КонецЕсли;
	
	// ++ obrv 24.07.18
	//ОбластьМакета.Параметры.ТекстЗаголовка = "Товарный чек № "+Объект.Номер +" от "+ Объект.Дата;
	
	ПараметрыШапки = Новый Структура();
	//ПараметрыШапки.Вставить("ТекстЗаголовка", СтрШаблон("Товарный чек № %1 от %2", Объект.Номер, Формат(Объект.Дата, "ДЛФ=DD")));
	ПараметрыШапки.Вставить("НомерДокумента", Объект.Номер);
	ПараметрыШапки.Вставить("ДатаДокумента", Формат(Объект.Дата, "ДЛФ=D"));
	// -- obrv 24.07.18
	
	// ++ obrv 02.03.18
	//ОбластьМакета.Параметры.Покупатель = Объект.Клиент.ФИО;
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Клиент, Объект.Дата);
	СведенияОПродавце = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	
	
	ПараметрыШапки.Вставить("ОрганизацияНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование"));
	ПараметрыШапки.Вставить("ОрганизацияРеквизиты",		ПредставлениеДляПечати(СведенияОПродавце));
	
	ПараметрыШапки.Вставить("ПокупательНаименование",	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование"));
	ПараметрыШапки.Вставить("ПокупательРеквизиты",		ПредставлениеДляПечати(СведенияОПокупателе));
	// -- obrv 02.03.18
	
	// ++ obrv 24.07.18
	//Если  ПустаяСтрока(Объект.Клиент.ИНН) <> Истина Тогда
	//	ОбластьМакета.Параметры.Покупатель = ОбластьМакета.Параметры.Покупатель + ", ИНН "+	Объект.Клиент.ИНН;
	//КонецЕсли;
	//ОбластьМакета.Параметры.организация = Объект.Организация.ПолноеНаименование + ", ИНН " + Объект.Организация.ИНН;
	//обл = "";
	//Если Объект.Клиент.Область.Пустая() <> Истина Тогда
	//	обл = Объект.Клиент.Область.Наименование + ", ";
	//КонецЕсли;
	//ОбластьМакета.Параметры.Адрес = Объект.Клиент.Страна2.Наименование + ", " + Объект.Клиент.Область.Наименование + ", " + Объект.Клиент.Город2.Наименование;
	//ОбластьМакета.Параметры.Телефон = Объект.Клиент.Телефон; 
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(""); 
	Штрихкод.Ширина = 250; 
	Штрихкод.Высота = 250;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = объект.Номер;
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод,Истина);
	ФайлКартинки 			             = КартинкаШтрихКод;
	ОбластьМакета.Рисунки.QrКод.Картинка = КартинкаШтрихКод;
	//ОбластьМакета.Параметры.QrКод         = КартинкаШтрихКод;
	
	//КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
	// -- obrv 24.07.18
	
	ТабДокумент.Вывести(ОбластьМакета); 
	ОбластьМакета = Макет.ПолучитьОбласть("заголовок2");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	
	НомерСтроки = 0;
	
	Итого = 0;
	Скидка = 0;
	
	
	ТаблицаТовары = Объект.Таблица.Выгрузить();
	Индекс = 0;
	Пока Индекс < ТаблицаТовары.Количество() Цикл
		Если ТаблицаТовары[Индекс].Отменено Тогда
			ТаблицаТовары.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары.Колонки.Добавить("Наименование");
	ИспользоватьНаименованияПоставщиков = ПолучитьФункциональнуюОпцию("дт_ИспользоватьНаименованияПоставщиков")
	И дт_ОбщегоНазначенияВызовСервераПовтИсп.ДатаНачалаУчетаНаименованийПоставщиков() <= Объект.Дата;
	
	
	Если ИспользоватьНаименованияПоставщиков Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Товар КАК Номенклатура,
		|	ТаблицаТовары.укод КАК укод
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ИндКодc.Ссылка КАК Партия,
		|	ИндНомер.Стеллаж КАК Стеллаж
		|ПОМЕСТИТЬ ВТ_ТоварыПартии
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИндКод КАК ИндКодc
		|		ПО ВТ_Товары.укод = ИндКодc.Наименование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
		|		ПО ВТ_Товары.укод = ИндНомер.индкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТоварыПартии.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(НоменклатураПоставщиков.Наименование) КАК Наименование
		|ИЗ
		|	ВТ_ТоварыПартии КАК ВТ_ТоварыПартии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.дт_НоменклатураПоставщиков.СрезПоследних(
		|				&Дата,
		|				Номенклатура В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_Товары.Номенклатура
		|					ИЗ
		|						ВТ_Товары)) КАК НоменклатураПоставщиков
		|		ПО ВТ_ТоварыПартии.Номенклатура = НоменклатураПоставщиков.Номенклатура
		|			И ВТ_ТоварыПартии.Партия = НоменклатураПоставщиков.Партия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТоварыПартии.НомерСтроки";
		
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТаблицаТовары[ВыборкаДетальныеЗаписи.НомерСтроки - 1].Наименование = ВыборкаДетальныеЗаписи.Наименование;
		КонецЦикла;
		
		
		
	Иначе		
		
		Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			
			СтрокаТаблицы.Наименование = СтрокаТаблицы.Товар.Наименование;	
			
		КонецЦикла;
	КонецЕсли;
	
	
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.н = НомерСтроки;
		ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.Партия; 
		ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Товар.Артикул;
		ОбластьСтроки.Параметры.НашКод = СтрокаТабличнойЧасти.Товар.Код;
		//ОбластьСтроки.Параметры.нпроизв = СтрокаТабличнойЧасти.Товар.НомерПроизводителя;
		сост = СтрокаТабличнойЧасти.Товар.Состояние;
		
		ОбластьСтроки.Параметры.состояние = сост;  
		Если ПолучитьСтеллаж(СтрокаТабличнойЧасти.укод) <> Справочники.Стеллаж.ПустаяСсылка() Тогда
			ОбластьСтроки.Параметры.адрес = ПолучитьСтеллаж(СтрокаТабличнойЧасти.укод)
		Иначе
			ОбластьСтроки.Параметры.адрес = СтрокаТабличнойЧасти.Товар.МестоНаСкладе2;
		КонецЕсли;
		Если Объект.АртикулВНазвании Тогда
			// ++ obrv 20.12.19
			//ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Артикул + " " +СтрокаТабличнойЧасти.Товар.Наименование;
			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Артикул + " " +СтрокаТабличнойЧасти.Наименование;
		Иначе
			//ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Наименование;
			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Наименование;
			// -- obrv 20.12.19
		КонецЕсли;
		
		Скидка1 = 0;
		
		
		ОбластьСтроки.Параметры.цена = СтрокаТабличнойЧасти.Цена;
		ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;
		
		
		
		Итого = Итого + СтрокаТабличнойЧасти.Сумма;
		Если СтрокаТабличнойЧасти.Скидка <> Null И СтрокаТабличнойЧасти.Скидка > 0 Тогда
			Скидка = Скидка + СтрокаТабличнойЧасти.Скидка;
			Скидка1 = СтрокаТабличнойЧасти.Скидка;
		Иначе
			Скидка = Скидка + (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
			Скидка1 = (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
		КонецЕсли;
		ОбластьСтроки.Параметры.сумма = СтрокаТабличнойЧасти.Сумма - Скидка1;
		//ОбластьСтроки.Параметры.скидка = Скидка1; 
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("подвал");
	
	//ОбластьМакета.Параметры.СрокПроверки = "5 дней";
	//ОбластьМакета.Параметры.доставка = "" + Объект.Доставка;
	
	// ++ obrv 24.07.18
	//ОбластьМакета.Параметры.ИтогоСумма = "" + Итого + " р.";
	//ФормСтрока = "Л = ru_RU; ДП = Истина";
	//ОбластьМакета.Параметры.прописью = ЧислоПрописью(Итого - Скидка,ФормСтрока,"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	
	Если Объект.БылоСписаниеБонусов = Истина Тогда
		Итого = Итого - Объект.СколькоСписать;
		ОбластьМакета.Параметры.СУчетомСкидки = "С учетом скидки " + Объект.СколькоСписать;
	КонецЕсли;
	
	ПараметрыПодвала = Новый Структура();
	ПараметрыПодвала.Вставить("КоличествоСтрок", НомерСтроки);
	ПараметрыПодвала.Вставить("СуммаИтого", Формат(Итого, "ЧДЦ=2; ЧГ=3,0"));
	ПараметрыПодвала.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(Итого, дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
	ПараметрыПодвала.Вставить("Заявка", Объект.ЗаказКлиента);
	
	ПараметрыПодвала.Вставить("ПродавецФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Объект.КтоПродал));
	
	Ответственные = Объект.Ответственные.Выгрузить(); 
	СтрокаТаблицы = Ответственные.Найти(ПредопределенноеЗначение("Перечисление.дт_РолиВПродаже.Сборщик"), "Роль");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ФИО = СтрокаТаблицы.Сотрудник;
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПодвала.Вставить("СборщикФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЕсли;	
		
	КонецЕсли;
	
	СтрокаТаблицы = Ответственные.Найти(Перечисления.дт_РолиВПродаже.Упаковщик, "Роль");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ФИО = СтрокаТаблицы.Сотрудник;
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПодвала.Вставить("УпаковщикФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЕсли;	
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыПодвала);
	// -- obrv 24.07.18
	
	//ОбластьМакета.Параметры.Скидка = "" + Скидка+ " р.";
	
	//ОбластьМакета.Параметры.Продавец = Объект.КтоПродал.ФИО;
	
	ТабДокумент.РазмерКолонтитулаСнизу=25;
	ТабДокумент.НижнийКолонтитул.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
	ТабДокумент.НижнийКолонтитул.Шрифт=Новый Шрифт(Макет.Область(1,1).Шрифт,,14);
	ТабДокумент.НижнийКолонтитул.ТекстСправа = "№"+номерТЧ+объект.Организация.БукваВНакладной+" / №"+объект.Номер;
	ТабДокумент.НижнийКолонтитул.Выводить=Истина; 
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции // ПолучитьТабличныйДокументТоварныйЧек()

Функция ПолучитьСтеллаж(укод)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод.наименование = &индкод";
	Запрос.УстановитьПараметр("индкод",укод);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	возврат Выборка.Стеллаж;
КонецФункции

&НаСервере
Процедура ЗакрытаПриИзмененииНаСервере()
	
	///+ГомзМА 14.09.2023
	Если Объект.Закрыта И Объект.СтатусПродажи = Перечисления.СтатусыПродажи.Актуальная Тогда
		Объект.СтатусПродажи = Перечисления.СтатусыПродажи.Оплачено;
	КонецЕсли;
	///-ГомзМА 14.09.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытаПриИзменении(Элемент)
	ЗакрытаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура QRкод(Команда)
	Если элементы.QRкод.Видимость = Истина Тогда 
		Элементы.ВидQRкод.Заголовок = "Показать QR-код";
		элементы.QRкод.Видимость = Ложь;	
	Иначе 
		Элементы.ВидQRкод.Заголовок = "Скрыть QR-код";
		элементы.QRкод.Видимость = Истина;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ТрекНомерПриИзмененииНаСервере()
	
	///+ГомзМА 10.10.2023
	Результат = ПолучитьСсылкуДляОтслеживанияТовара();
	СсылкаДляОтслеживанияТовара = Результат.СсылкаНаОтслеживание;
	ВставкаДляСсылкиОтслеживания = Результат.ВставкаДляСсылкиОтслеживания;
	Если СсылкаДляОтслеживанияТовара <> "" Тогда
		Если Объект.ТрекНомер <> "" И ВставкаДляСсылкиОтслеживания <> "" Тогда
			Объект.СсылкаНаОтслеживаниеДоставки = СсылкаДляОтслеживанияТовара + ВставкаДляСсылкиОтслеживания + Объект.ТрекНомер;
		Иначе
			Объект.СсылкаНаОтслеживаниеДоставки = СсылкаДляОтслеживанияТовара;
		КонецЕсли;
	Иначе
		Объект.СсылкаНаОтслеживаниеДоставки = "";
	КонецЕсли;
	///-ГомзМА 10.10.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТрекНомерПриИзменении(Элемент)
	ТрекНомерПриИзмененииНаСервере();
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил трек-номер на " + Объект.ТрекНомер);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры


&НаКлиенте
Процедура СсылкаНаОтслеживаниеДоставкиНажатие(Элемент, СтандартнаяОбработка)
	
	///+ГомзМА 10.10.2023
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Объект.СсылкаНаОтслеживаниеДоставки);
	///-ГомзМА 10.10.2023
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуДляОтслеживанияТовара()
	
	///+ГомзМА 10.10.2023
	Результат = "";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТранспротнаяКомпания.СсылкаНаОтслеживание КАК СсылкаНаОтслеживание,
	|	ТранспротнаяКомпания.ВставкаДляСсылкиОтслеживания КАК ВставкаДляСсылкиОтслеживания
	|ИЗ
	|	Справочник.ТранспротнаяКомпания КАК ТранспротнаяКомпания
	|ГДЕ
	|	ТранспротнаяКомпания.Ссылка = &ТК";
	
	Запрос.УстановитьПараметр("ТК", Объект.ТранспортнаяКомпания);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		
		Результат = РезультатЗапроса;
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 10.10.2023
	
КонецФункции // ПолучитьСсылкуДляОтслеживанияТовара()

&НаКлиенте
Процедура ТранспортнаяКомпанияПриИзменении(Элемент)
	
	///+ГомзМА 10.10.2023
	ТрекНомерПриИзмененииНаСервере();
	///-ГомзМА 10.10.2023
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил транспортную компанию на " + Объект.ТранспортнаяКомпания);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении1(Элемент)
	 
	///+ГомзМА 11.10.2023
	Если Объект.Дата < '20231010' Тогда
		НДС = 0;
	Иначе
		НДС = ПолучитьПроцентНалога();
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из Объект.Таблица Цикл
		СуммаНДС = СтрокаТаблицы.Цена * НДС / 100;	
			// ++ Пересдитать сумму если стоит истина в Объект.СуммаССНД 
			Если Объект.СуммаСНДС = Истина  Тогда 
				СтрокаТаблицы.Сумма = (СтрокаТаблицы.Цена + СуммаНДС) * СтрокаТаблицы.Количество;
			Иначе 
				СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена  * СтрокаТаблицы.Количество;
			КонецЕсли;
			// -- Пересдитать сумму если стоит истина в Объект.СуммаССНД 
		СтрокаТаблицы.СуммаНДС = СуммаНДС * СтрокаТаблицы.Количество;
	КонецЦикла;
	ПосчитатьИтоги();
	///-ГомзМА 11.10.2023
	//ПересчетИтоговСУчетомСписанияБонусов();
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил организацию на " + Объект.Организация);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСНДСПриИзменении(Элемент)
	ОрганизацияПриИзменении1(ЭтаФорма.Объект.Организация);
КонецПроцедуры


&НаСервере
Функция АктВозвратаНаСервере()
	
	///+ГомзМА 16.10.2023
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет       =   ПолучитьМакет("АктВозврата");
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	номерТЧ = ОпределитьНомерОрганизация(Объект.Организация);
	Если объект.НомерПП > 0 Тогда
		номерТЧ = объект.НомерПП;
	Иначе
		объект.НомерПП = номерТЧ;
	КонецЕсли;
	
	// ++ obrv 24.07.18
	//ОбластьМакета.Параметры.ТекстЗаголовка = "Товарный чек № "+Объект.Номер +" от "+ Объект.Дата;
	
	ПараметрыШапки = Новый Структура();
	//ПараметрыШапки.Вставить("ТекстЗаголовка", СтрШаблон("Товарный чек № %1 от %2", Объект.Номер, Формат(Объект.Дата, "ДЛФ=DD")));
	ПараметрыШапки.Вставить("НомерДокумента", Объект.Номер);
	ПараметрыШапки.Вставить("ДатаДокумента", Формат(Объект.Дата, "ДЛФ=D"));
	// -- obrv 24.07.18
	
	// ++ obrv 02.03.18
	//ОбластьМакета.Параметры.Покупатель = Объект.Клиент.ФИО;
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Клиент, Объект.Дата);
	СведенияОПродавце = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	
	
	ПараметрыШапки.Вставить("ОрганизацияНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование"));
	ПараметрыШапки.Вставить("ОрганизацияРеквизиты",		ПредставлениеДляПечати(СведенияОПродавце));
	
	ПараметрыШапки.Вставить("ПокупательНаименование",	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование"));
	ПараметрыШапки.Вставить("ПокупательРеквизиты",		ПредставлениеДляПечати(СведенияОПокупателе));
	// -- obrv 02.03.18
	
	// ++ obrv 24.07.18
	//Если  ПустаяСтрока(Объект.Клиент.ИНН) <> Истина Тогда
	//	ОбластьМакета.Параметры.Покупатель = ОбластьМакета.Параметры.Покупатель + ", ИНН "+	Объект.Клиент.ИНН;
	//КонецЕсли;
	//ОбластьМакета.Параметры.организация = Объект.Организация.ПолноеНаименование + ", ИНН " + Объект.Организация.ИНН;
	//обл = "";
	//Если Объект.Клиент.Область.Пустая() <> Истина Тогда
	//	обл = Объект.Клиент.Область.Наименование + ", ";
	//КонецЕсли;
	//ОбластьМакета.Параметры.Адрес = Объект.Клиент.Страна2.Наименование + ", " + Объект.Клиент.Область.Наименование + ", " + Объект.Клиент.Город2.Наименование;
	//ОбластьМакета.Параметры.Телефон = Объект.Клиент.Телефон; 
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(""); 
	Штрихкод.Ширина = 250; 
	Штрихкод.Высота = 250;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = объект.Номер;
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод,Истина);
	ФайлКартинки 			             = КартинкаШтрихКод;
	ОбластьМакета.Рисунки.QrКод.Картинка = КартинкаШтрихКод;
	//ОбластьМакета.Параметры.QrКод         = КартинкаШтрихКод;
	
	//КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
	// -- obrv 24.07.18
	
	ТабДокумент.Вывести(ОбластьМакета); 
	ОбластьМакета = Макет.ПолучитьОбласть("заголовок2");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	
	НомерСтроки = 0;
	
	Итого = 0;
	Скидка = 0;
	
	
	ТаблицаТовары = Объект.Таблица.Выгрузить();
	Индекс = 0;
	Пока Индекс < ТаблицаТовары.Количество() Цикл
		Если НЕ ТаблицаТовары[Индекс].Отменено Тогда
			ТаблицаТовары.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары.Колонки.Добавить("Наименование");
	ИспользоватьНаименованияПоставщиков = ПолучитьФункциональнуюОпцию("дт_ИспользоватьНаименованияПоставщиков")
	И дт_ОбщегоНазначенияВызовСервераПовтИсп.ДатаНачалаУчетаНаименованийПоставщиков() <= Объект.Дата;
	
	
	Если ИспользоватьНаименованияПоставщиков Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Товар КАК Номенклатура,
		|	ТаблицаТовары.укод КАК укод
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ИндКодc.Ссылка КАК Партия,
		|	ИндНомер.Стеллаж КАК Стеллаж
		|ПОМЕСТИТЬ ВТ_ТоварыПартии
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИндКод КАК ИндКодc
		|		ПО ВТ_Товары.укод = ИндКодc.Наименование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИндНомер КАК ИндНомер
		|		ПО ВТ_Товары.укод = ИндНомер.индкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТоварыПартии.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(НоменклатураПоставщиков.Наименование) КАК Наименование
		|ИЗ
		|	ВТ_ТоварыПартии КАК ВТ_ТоварыПартии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.дт_НоменклатураПоставщиков.СрезПоследних(
		|				&Дата,
		|				Номенклатура В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_Товары.Номенклатура
		|					ИЗ
		|						ВТ_Товары)) КАК НоменклатураПоставщиков
		|		ПО ВТ_ТоварыПартии.Номенклатура = НоменклатураПоставщиков.Номенклатура
		|			И ВТ_ТоварыПартии.Партия = НоменклатураПоставщиков.Партия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТоварыПартии.НомерСтроки";
		
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТаблицаТовары[ВыборкаДетальныеЗаписи.НомерСтроки - 1].Наименование = ВыборкаДетальныеЗаписи.Наименование;
		КонецЦикла;
		
		
		
	Иначе		
		
		Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			
			СтрокаТаблицы.Наименование = СтрокаТаблицы.Товар.Наименование;	
			
		КонецЦикла;
	КонецЕсли;
	
	
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.н = НомерСтроки;
		ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.Партия; 
		ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Товар.Артикул;
		ОбластьСтроки.Параметры.НашКод = СтрокаТабличнойЧасти.Товар.Код;
		//ОбластьСтроки.Параметры.нпроизв = СтрокаТабличнойЧасти.Товар.НомерПроизводителя;
		сост = СтрокаТабличнойЧасти.Товар.Состояние;
		
		ОбластьСтроки.Параметры.состояние = сост;  
		Если ПолучитьСтеллаж(СтрокаТабличнойЧасти.укод) <> Справочники.Стеллаж.ПустаяСсылка() Тогда
			ОбластьСтроки.Параметры.адрес = ПолучитьСтеллаж(СтрокаТабличнойЧасти.укод)
		Иначе
			ОбластьСтроки.Параметры.адрес = СтрокаТабличнойЧасти.Товар.МестоНаСкладе2;
		КонецЕсли;
		Если Объект.АртикулВНазвании Тогда
			// ++ obrv 20.12.19
			//ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Артикул + " " +СтрокаТабличнойЧасти.Товар.Наименование;
			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Артикул + " " +СтрокаТабличнойЧасти.Наименование;
		Иначе
			//ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Наименование;
			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Наименование;
			// -- obrv 20.12.19
		КонецЕсли;
		
		Скидка1 = 0;
		
		
		ОбластьСтроки.Параметры.цена = СтрокаТабличнойЧасти.Цена;
		ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;
		
		Итого = Итого + СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
		Если СтрокаТабличнойЧасти.Скидка <> Null И СтрокаТабличнойЧасти.Скидка > 0 Тогда
			Скидка = Скидка + СтрокаТабличнойЧасти.Скидка;
			Скидка1 = СтрокаТабличнойЧасти.Скидка;
		Иначе
			Скидка = Скидка + (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
			Скидка1 = (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
		КонецЕсли;
		ОбластьСтроки.Параметры.сумма = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество - Скидка1;
		//ОбластьСтроки.Параметры.скидка = Скидка1; 
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("подвал");
	
	//ОбластьМакета.Параметры.СрокПроверки = "5 дней";
	//ОбластьМакета.Параметры.доставка = "" + Объект.Доставка;
	
	// ++ obrv 24.07.18
	//ОбластьМакета.Параметры.ИтогоСумма = "" + Итого + " р.";
	//ФормСтрока = "Л = ru_RU; ДП = Истина";
	//ОбластьМакета.Параметры.прописью = ЧислоПрописью(Итого - Скидка,ФормСтрока,"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	ПараметрыПодвала = Новый Структура();
	ПараметрыПодвала.Вставить("КоличествоСтрок", НомерСтроки);
	ПараметрыПодвала.Вставить("СуммаИтого", Формат(Итого, "ЧДЦ=2; ЧГ=3,0"));
	ПараметрыПодвала.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(Итого, дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
	ПараметрыПодвала.Вставить("Заявка", Объект.ЗаказКлиента);
	
	ПараметрыПодвала.Вставить("ПродавецФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Объект.КтоПродал));
	
	Ответственные = Объект.Ответственные.Выгрузить(); 
	СтрокаТаблицы = Ответственные.Найти(ПредопределенноеЗначение("Перечисление.дт_РолиВПродаже.Сборщик"), "Роль");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ФИО = СтрокаТаблицы.Сотрудник;
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПодвала.Вставить("СборщикФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЕсли;	
		
	КонецЕсли;
	
	СтрокаТаблицы = Ответственные.Найти(Перечисления.дт_РолиВПродаже.Упаковщик, "Роль");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ФИО = СтрокаТаблицы.Сотрудник;
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПодвала.Вставить("УпаковщикФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЕсли;	
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыПодвала);
	// -- obrv 24.07.18
	
	//ОбластьМакета.Параметры.Скидка = "" + Скидка+ " р.";
	
	//ОбластьМакета.Параметры.Продавец = Объект.КтоПродал.ФИО;
	
	ТабДокумент.РазмерКолонтитулаСнизу=25;
	ТабДокумент.НижнийКолонтитул.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
	ТабДокумент.НижнийКолонтитул.Шрифт=Новый Шрифт(Макет.Область(1,1).Шрифт,,14);
	ТабДокумент.НижнийКолонтитул.ТекстСправа = "№"+номерТЧ+объект.Организация.БукваВНакладной+" / №"+объект.Номер;
	ТабДокумент.НижнийКолонтитул.Выводить=Истина; 
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	///-ГомзМА 16.10.2023
	
КонецФункции

&НаКлиенте
Процедура АктВозврата(Команда)
	
	///+ГомзМА 16.10.2023
	ТабДокумент = АктВозвратаНаСервере();
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("АктВозврата");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДокумент;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "АктВозврата";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
	///-ГомзМА 16.10.2023
	
КонецПроцедуры

&НаСервере
Процедура РекомендательПриИзмененииНаСервере()
	
	///+ГомзМА 18.10.2023
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Клиенты.Телефон КАК Телефон
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Ссылка = &Клиент";
	
	Запрос.УстановитьПараметр("Клиент", Объект.Рекомендатель);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	РезультатЗапроса.Следующий();
	
	Объект.ТелефонРекомендателя = РезультатЗапроса.Телефон;
	///-ГомзМА 18.10.2023
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендательПриИзменении(Элемент)
	РекомендательПриИзмененииНаСервере();
	//Если ЗначениеЗаполнено(Объект.Рекомендатель) Тогда
	//	Объект.СкидкаВТСпасибо = Объект.СкидкаВТСпасибо * 0.05;
	//КонецЕсли;
	//ПосчитатьИтоги();
	//ПересчетИтоговСУчетомСписанияБонусов()
КонецПроцедуры

&НаКлиенте
Процедура СкидкаВТСпасибоПриИзменении(Элемент)
	
	///+ГомзМА 18.10.2023
	//ПосчитатьИтоги();
	///-ГомзМА 18.10.2023
	//ПересчетИтоговСУчетомСписанияБонусов()
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		Если ТекДанные = Неопределено Тогда
			ЗаписьЛога("Добавил строку №1");
		Иначе
			ЗаписьЛога("Добавил строку №" + Число(ТекДанные.НомерСтроки + 1));
		КонецЕсли;
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередУдалением(Элемент, Отказ)
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("удалил строку №" + ТекДанные.НомерСтроки + ", " + ТекДанные.Партия + ", " + ТекДанные.Товар + ", " 
		+ ТекДанные.Количество + ", " + ТекДанные.Цена + ", " + ТекДанные.СуммаНДС + ", " + ТекДанные.Сумма + ", " + ТекДанные.Комментарий + ", " + ТекДанные.Машина);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицамашинаПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке №" + ТекДанные.НомерСтроки + " машину на " + ТекДанные.Машина);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ВесПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил вес на " + Объект.Вес);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ГородОтправкиПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил город отправки на " + Объект.ГородОтправки);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаПолученияПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил страну отправления на " + Объект.СтранаПолучения);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура РегионПолученияПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил регион получения на " + Объект.РегионПолучения);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ГородПолученияПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил город получения на " + Объект.ГородПолучения);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьДоставкиПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил стоимость доставки на " + Объект.СтоимостьДоставки);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура КоммДостПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил комментарий к доставке на " + Объект.КоммДост);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил водителя на " + Объект.Водитель);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидаемаяДатаВыплатыПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил дату оплаты на " + Объект.ОжидаемаяДатаВыплаты);
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтатусТовараПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Если ТекДанные.СтатусТовара Тогда
			ЗаписьЛога("Установил галочку выдача");
		Иначе
			ЗаписьЛога("Снял галочку выдача");
		КонецЕсли;
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
	///+ГомзМА 06.03.2024
	Если ТекДанные.СтатусТовара = Истина Тогда
		ТекДанные.ДатаВыдачи = ТекущаяДата();
		ТекДанные.ОтветственныйЗаВыдачу = ПолучитьТекущегоПользователя();
	Иначе
		ТекДанные.ДатаВыдачи = '00010101';
		ТекДанные.ОтветственныйЗаВыдачу = ПолучитьПустогоПользователя();
	КонецЕсли;
	///-ГомзМА 06.03.2024
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущегоПользователя()

	///+ГомзМА 20.03.2024
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	Результат = Справочники.Пользователи.НайтиПоНаименованию(ТекущийПользователь);
	
	Возврат Результат;
	///-ГомзМА 20.03.2024

КонецФункции

&НаСервере
Функция ПолучитьПустогоПользователя()

	///+ГомзМА 20.03.2024
	Результат = Справочники.Пользователи.ПустаяСсылка();
	
	Возврат Результат;
	///-ГомзМА 20.03.2024

КонецФункции

&НаКлиенте
Процедура ТаблицаОтмененоПриИзменении(Элемент)
	
	///+ГомзМА 19.12.2023
	ТекДанные = Элементы.Таблица.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Если ТекДанные.Отменено Тогда
			ЗаписьЛога("Установил галочку отменено");
		Иначе
			ЗаписьЛога("Снял галочку отменено");
		КонецЕсли;
	КонецЕсли;
	///-ГомзМА 19.12.2023
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьТрогатьПродажуНаСервере()
	Объект.ПроверкаЗапрета = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьТрогатьПродажу(Команда)
	РазрешитьТрогатьПродажуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АктСверки(Команда)
	ТабДокумент = АктСверкиНаСервере();
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("АктСверки");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДокумент;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "АктСверки";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);
	
	
КонецПроцедуры

&НаСервере
Функция АктСверкиНаСервере()
	ТаблДок = Новый ТабличныйДокумент;
	Макет = Документы.ПродажаЗапчастей.ПолучитьМакет("АктСверки");
	
	Шапка = Макет.ПолучитьОбласть("Шапка"); 
	Заголовок2 = Макет.ПолучитьОбласть("Заголовок2"); 
	ШапкаТч = Макет.ПолучитьОбласть("ШапкаТЧ"); 
	СтрокаТч = Макет.ПолучитьОбласть("СтрокаТЧ"); 
	
	Подвал = Макет.ПолучитьОбласть("Подвал"); 
	Разделитель = Макет.ПолучитьОбласть("Разделитель"); 
	
	Шапка.Параметры.НомерДокумента = Объект.Номер; 
	Шапка.Параметры.ДатаДокумента = Формат(Объект.Дата, "ДФ=dd.MM.yyyy;");
	Шапка.Параметры.ОрганизацияНаименование = Объект.Организация.Наименование;
	Шапка.Параметры.Контрагент = Объект.Клиент;
	ТаблДок.Вывести(Шапка);
	ТаблДок.Вывести(Заголовок2);
	ТаблДок.Вывести(ШапкаТч);
	
	Для каждого СтрокаТабЧасти Из Объект.Таблица Цикл
		СтрокаТЧ.Параметры.Заполнить(СтрокаТабЧасти);	
		ТаблДок.Вывести(СтрокаТЧ);
	КонецЦикла; 
	
	Подвал.Параметры.КоличествоИтого = Объект.Таблица.Итог("Количество");
	
     
	ТаблДок.Вывести(Подвал);
	ТаблДок.Вывести(Разделитель);
	
	Возврат ТаблДок;
КонецФункции

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	ОтправитьСообщениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеНаСервере()
	/// Комлев 27/05/24  +++
	
	ТекстСогласования =  ""  + Объект.КтоПродал + Символы.ПС
	 											+  Объект.Клиент + Символы.ПС  
	 											+  Объект.Клиент.ИНН  + Символы.ПС 
	 											+ Объект.Организация + Символы.ПС 
	 											+ Объект.Номер + Символы.ПС 
	 											+ Объект.ИтогоРекв  + Символы.ПС 
	 											+ "УПД";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Telegram_Пользователи.ID_Пользователя КАК ВадяеваИД
	|ПОМЕСТИТЬ Вадяева
	|ИЗ
	|	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи
	|ГДЕ
	|	Telegram_Пользователи.Пользователь.Наименование = ""Вадяева Дарья Викторовна""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Telegram_Пользователи.ID_Пользователя КАК ЛазареваИД,
	|	Вадяева.ВадяеваИД
	|ИЗ
	|	РегистрСведений.Telegram_Пользователи КАК Telegram_Пользователи,
	|	Вадяева КАК Вадяева
	|ГДЕ
	|	Telegram_Пользователи.Пользователь.Наименование = ""Лазарева Алёна Владимировна""";
	
	
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		Лазарева = ВыборкаЗапроса.ЛазареваИД;
		Вадяева = ВыборкаЗапроса.ВадяеваИД;
	КонецЦикла;  
	Попытка
		Telegram_Сервер.ОтправитьСообщениеПользователю(Лазарева, ТекстСогласования );
		Telegram_Сервер.ОтправитьСообщениеПользователю(Вадяева, ТекстСогласования );
	Исключение
		
	КонецПопытки;
	Сообщить("Сообщение отправлено.");
	
	/// Комлев 27/05/24  ----
КонецПроцедуры


&НаКлиенте
Процедура ПерейтиВЗаявкуWT10(Команда)
	НомерЗаявки = ПерейтиВЗаявкуWT10НаСервере();
	ОбщДействия.ОткрытьЗаявкуНаСайтеWT10(НомерЗаявки);
КонецПроцедуры

&НаСервере
Функция ПерейтиВЗаявкуWT10НаСервере()
	Номер = Объект.Номер; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПродажаЗапчастей.ЗаказКлиента.Номер КАК НомерЗаяв
		|ИЗ
		|	Документ.ПродажаЗапчастей КАК ПродажаЗапчастей
		|ГДЕ
		|	ПродажаЗапчастей.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", Номер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерЗаявки = ВыборкаДетальныеЗаписи.НомерЗаяв; 
	КонецЦикла;
	
	Возврат НомерЗаявки; 
КонецФункции


//Волков ИО 21.11.2023 ++
//&НаКлиенте
//Процедура ТаблицаСтатусТовараПриИзменении(Элемент)
//	
//	ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
//	
//	Если ТекущиеДанные.СтатусТовара Тогда
//		ТекущиеДанные.ДатаОтгрузкиСоСклада = ТекущаяДата();
//	КонецЕсли;
//	
//КонецПроцедуры

//Волков ИО 21.11.2023 --






