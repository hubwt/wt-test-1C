
&НаКлиенте
Процедура ФайлыСОблакаПриАктивизацииЯчейки(Элемент)
//	ПерейтиПоНавигационнойСсылке(Элементы.ФайлыСОблака.ТекущиеДанные.СсылкаНаФайл);
КонецПроцедуры



&НаКлиенте
Процедура ФайлыСОблакаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)  
	Если Поле.Имя = "ФайлыСОблакаСсылкаНаФайл" Тогда
		ПерейтиПоНавигационнойСсылке(Элементы.ФайлыСОблака.ТекущиеДанные.СсылкаНаФайл); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлыСОблака(Команда)
	ПолучитьФайлыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьФайлыНаСервере()
	Попытка
        Фотки = ПолучениеФайловПриказа(Объект.номер);


        Отбор = Новый Структура();
        Отбор.Вставить("СсылкаНаФайл",  Фотки.prikazFile.link);
        НайденноеЗначение = таблицассылок.НайтиСтроки(Отбор);


        Если НайденноеЗначение.Количество() = 0 Тогда
        	
		МассивФото = таблицассылок.Добавить();  
		МассивФото.СсылкаНаФайл   = Фотки.prikazFile.link;
		МассивФото.Наименование   = Фотки.prikazFile.name;
		МассивФото.id   		  = Фотки.prikazFile.id;
		КонецЕсли;

		Для каждого Фотка Из Фотки.pinnedFiles Цикл
		Отбор = Новый Структура();
        Отбор.Вставить("СсылкаНаФайл", Фотка.link);
        НайденноеЗначение = таблицассылок.НайтиСтроки(Отбор);	
        
        Если НайденноеЗначение.Количество() = 0 Тогда
			МассивФото = таблицассылок.Добавить();  
			МассивФото.СсылкаНаФайл   = Фотка.link;
			МассивФото.Наименование   = Фотка.name;
			МассивФото.id   		  = Фотка.id;
        КонецЕсли;
        
		КонецЦикла; 
	Исключение
		//@skip-check use-non-recommended-method
		Сообщить("Файлов нет");
		КонецПопытки;
		//тз.Сортировать("колФото Убыв");
КонецПроцедуры

Функция ПолучениеФайловПриказа(ИндКод)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245",8085);
		
		СтрокаЗапроса = "/document/flow/prikaz?odinc_id=";
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса+ИндКод);
		
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			//Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			//Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		
		Возврат "";
	КонецПопытки;
	
КонецФункции


&НаКлиенте
Процедура ТаблицаСсылокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
Если Поле.Имя = "ТаблицаСсылокСсылкаНаФайл" Тогда
		ПерейтиПоНавигационнойСсылке(Элементы.ТаблицаСсылок.ТекущиеДанные.СсылкаНаФайл);
	КонецЕсли; 
КонецПроцедуры



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	///+ГомзМА 04.07.2023
	//Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
	//	ПоследнийНомерДоговора = ПолучитьПоследнийНомерДокумента();
	//	
	//	ПоследнийНомерДоговора = СтрЗаменить(ПоследнийНомерДоговора, " ", "");
	//	ПоследнийНомерДоговора = СокрЛП(ПоследнийНомерДоговора);
	//	КоличествоСимволовНомера = СтрДлина(ПоследнийНомерДоговора);
	//	Если Число(Прав(ПоследнийНомерДоговора, 4)) < Год(ТекущаяДатаСеанса()) Тогда
	//		ПоследнийНомерДоговора = 0;
	//		ТекущийГод = Число(Год(ТекущаяДатаСеанса()));
	//		ТекущийГод = Формат(ТекущийГод, "ЧГ=");
	//		
	//		Объект.Номер = СтрШаблон("%1/%2", ПоследнийНомерДоговора + 1, ТекущийГод);	
	//	Иначе		
	//		ПоследнийНомерДоговора = Число(Лев(ПоследнийНомерДоговора, КоличествоСимволовНомера - 5));
	//		ТекущийГод = Число(Год(ТекущаяДатаСеанса()));
	//		ТекущийГод = Формат(ТекущийГод, "ЧГ=");
			
	//		Объект.Номер = СтрШаблон("%1/%2", ПоследнийНомерДоговора + 1, ТекущийГод); 
	//	КонецЕсли;
	//КонецЕсли;

	
	//QRКод = "";
	// Проверка = ГенераторШтрихКодаКлиент.УстановитьКомпонентуШтрихКодирования("");
	Получитькомпоненту(); 
	Элементы.QRКод.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	
	
ПолучитьФайлыНаСервере();	
КонецПроцедуры 
 
&НаСервере
Процедура Получитькомпоненту()
	ТекстОшибки = "";
	
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(ТекстОшибки); 
	Штрихкод.Ширина = 250; 
	Штрихкод.Высота = 250;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = "{ ""id_doc"":"+ """" + Объект.Номер + """" + ",""type"":" +" ""Приказ""}";
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод,Истина);
	
	QRкод = ПоместитьВоВременноеХранилище(КартинкаШтрихКод,УникальныйИдентификатор);
	//возврат истина;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
    РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры




#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Сотрудники



&НаКлиенте
Процедура СотрудникиСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", Элементы.Сотрудники.ТекущиеДанные.Сотрудник);
	ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Сотрудники.Форма.ФормаВыбора" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для Индекс = 0 По ВыбранноеЗначение.Количество() - 1 Цикл
				
				НоваяСтрока = ?(Индекс = 0, Элементы.Сотрудники.ТекущиеДанные, Объект.Сотрудники.Добавить());
				НоваяСтрока.Сотрудник = ВыбранноеЗначение[Индекс];
				
			КонецЦикла;
			
		Иначе
			Элементы.Сотрудники.ТекущиеДанные.Сотрудник = ВыбранноеЗначение;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры





#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьПоследнийНомерДокумента()

	///+ГомзМА 04.07.2023
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Приказ.Номер КАК Номер,
		|	Приказ.Дата КАК Дата
		|ИЗ
		|	Документ.Приказ КАК Приказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.Номер;
	///-ГомзМА 04.07.2023


КонецФункции // ПолучитьПоследнийНомерДокумента()


Функция ПереименоватьФайл(id, name)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245",8085);
		
		СтрокаЗапроса = "/document/flow/file?file_id="+id+"&name="+name;
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса);

		Ответ = Соединение.ВызватьHTTPМетод("PUT", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		Иначе
			Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаСсылокНаименованиеПриИзменении(Элемент)
	ТекСтрока = Элементы.ТаблицаСсылок.ТекущиеДанные;
	ПереименоватьФайл(ТекСтрока.id, ТекСтрока.Наименование);
КонецПроцедуры

Функция УдалитьФайл(id)
	//Соединение = Новый HTTPСоединение("192.168.0.44",80,,,,,Новый ЗащищенноеСоединениеOpenSSL()); 
	Попытка
		Соединение = Новый HTTPСоединение("192.168.0.245",8085);
		
		СтрокаЗапроса = "/document/flow/prikaz/pinned_file?odinc_id="+объект.Номер+"&file_id="+id;
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса);

		Ответ = Соединение.ВызватьHTTPМетод("DELETE", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 
		ИначеЕсли Ответ.КодСостояния = 404 Тогда
		СтрокаЗапроса = "/document/flow/prikaz/pikaz_file?odinc_id="+объект.Номер;
		Заголовки = Новый Соответствие;    
		Заголовки.Вставить("Content-Type", "application/json");
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса);

		Ответ = Соединение.ВызватьHTTPМетод("DELETE", Запрос); //Соединение.ОтправитьДляОбработки(Запрос);	
		тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ); //получим HTML-код страницы 	
		Иначе
			
			Сообщить("Код ответа: "+Ответ.КодСостояния); //анализируем код состояния и делаем выводы  
			тело = Ответ.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Тело);
			
			Ответ  = ПрочитатьJSON(ЧтениеJSON);
			Сообщить(Ответ);
			ответ = неопределено;
		КонецЕсли;
		
		
		Возврат Ответ;
	Исключение 
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаСсылокПередУдалением(Элемент, Отказ)
		ТекСтрока = Элементы.ТаблицаСсылок.ТекущиеДанные;
	УдалитьФайл(ТекСтрока.id);
КонецПроцедуры


#КонецОбласти