


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьУсловноеОформление();
	
	ОбновитьСуммуДокумента(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	ОбновитьСписки(ЭтаФорма);
	
	Период.ДатаНачала = Объект.ДатаНачала;
	Период.ДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ОбновитьСуммуДокумента(ЭтаФорма);
	
	ОбновитьПоказанияОдометраДетально(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеФормойКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьСписки(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	ОбновитьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		АвтомобильПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьДанныеПоСчетчикам("Расстояние", "ПоказанияОдометра");
	
	ОбновитьСписки(ЭтаФорма);
КонецПроцедуры


&НаСервере
Процедура АвтомобильПриИзмененииСервер()
	Объект.Водитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Автомобиль, "Водитель");
	Объект.ПоказанияОдометраНачало = дт_Грузоперевозки.ПолучитьПоказаниеОдометра(
		Объект.Автомобиль, 
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.ДатаНачала, Неопределено)
	);
	
	Объект.ТопливоВБакеНачало = дт_Грузоперевозки.ПолучитьТопливоВБаке(
		Объект.Автомобиль, 
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.ДатаНачала, Неопределено)
	);

КонецПроцедуры // АвтомобильПриИзмененииСервер()

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.ДатаНачала = ЭтаФорма.Период.ДатаНачала; //НачалоМесяца(объект.Дата);
	Объект.ДатаОкончания = ЭтаФорма.Период.ДатаОкончания;//КонецМесяца(Объект.Дата);
	ОбновитьРасходСУчетомЗаправок(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		АвтомобильПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьРасходСУчетомЗаправок(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ОбновитьРасходСУчетомЗаправок(Неопределено);
КонецПроцедуры


&НаКлиенте
Процедура ПоказанияОдометраНачалоПриИзменении(Элемент)
	
	ОбновитьДанныеПоСчетчикам("Расстояние", "ПоказанияОдометра");
	РасстояниеПриИзменении(Неопределено);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказанияОдометраОкончаниеПриИзменении(Элемент)
	
	ОбновитьДанныеПоСчетчикам("Расстояние", "ПоказанияОдометра");
	РасстояниеПриИзменении(Неопределено);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоВБакеНачалоПриИзменении(Элемент)
	
	ОбновитьДанныеПоСчетчикам("ТопливоРасход", "ТопливоВБаке", Истина);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоВБакеОкончаниеПриИзменении(Элемент)
	
	ОбновитьДанныеПоСчетчикам("ТопливоРасход", "ТопливоВБаке", Истина);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоРасходПриИзменении(Элемент)
	ОбновитьРасходСУчетомЗаправокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РасстояниеПриИзменении(Элемент)
	ОбновитьСуммуДокумента(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ДатаПриИзмененииСервер()

	Если дт_Нумерация.ГодИзменен(Объект.Ссылка, Объект.Дата) Тогда
		Объект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ДатаПриИзмененииСервер()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Маршрут

&НаКлиенте
Процедура МаршрутЗаказНаДоставкуПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Маршрут.ТекущиеДанные;
	
	ДанныеСтроки = Новый Структура("ЗаказНаДоставку,Расстояние,МассаГруза,ПунктОтправления,ПунктНазначения,ПунктОтправленияАдрес,ПунктНазначенияАдрес,ДатаНачала");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекСтрока);
	
	МаршрутЗаказНаДоставкуПриИзмененииСервер(ДанныеСтроки);
	
	Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаДоставку) Тогда
		ЗаполнитьЗначенияСвойств(ТекСтрока, ДанныеСтроки);
	КонецЕсли;
	
	ОбновитьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура МаршрутЗаказНаДоставкуПриИзмененииСервер(ДанныеСтроки)

	// Данные строки
	Если ЗначениеЗаполнено(ДанныеСтроки.ЗаказНаДоставку) Тогда
		
		Реквизиты = "";
		Для каждого Поле Из ДанныеСтроки Цикл
			
			Если Поле.Ключ = "ЗаказНаДоставку" Тогда
				Продолжить
			КонецЕсли;
			
			Реквизиты = Реквизиты + Поле.Ключ + ",";
			
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Реквизиты);
		
		ДанныеСтроки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.ЗаказНаДоставку, Реквизиты);
		
	КонецЕсли;
	
	// Сумма документа
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ОбновитьСуммуДокумента();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры // МаршрутЗаказНаДоставкуПриИзмененииСервер()


&НаКлиенте
Процедура МаршрутПоказанияОдометраНачалоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Маршрут.ТекущиеДанные;
	
	ОбновитьДанныеПоСчетчикам("Расстояние", "ПоказанияОдометра",, ТекДанные);
	
	ОбновитьПоказанияОдометраДетально(ЭтаФорма);
	МаршрутРасстояниеПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПоказанияОдометраОкончаниеПриИзменении(Элемент)
	
	ТекДанные = Элементы.Маршрут.ТекущиеДанные;
	
	ОбновитьДанныеПоСчетчикам("Расстояние", "ПоказанияОдометра",, ТекДанные);
	
	ОбновитьПоказанияОдометраДетально(ЭтаФорма);
	МаршрутРасстояниеПриИзменении(Неопределено);
	
КонецПроцедуры


&НаКлиенте
Процедура МаршрутРасстояниеПриИзменении(Элемент)
	
	Объект.Расстояние = Объект.Маршрут.Итог("Расстояние");
	РасстояниеПриИзменении(Неопределено);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура МаршрутПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		// найдем предудыщее показания
		ТекСтрока = Элементы.Маршрут.ТекущиеДанные;
		Индекс = Объект.Маршрут.Количество();
		Если Индекс > 1
			И ТекСтрока.ПоказанияОдометраНачало = 0 Тогда
			
			ПредСтрока = Объект.Маршрут[Индекс - 2];
			ТекСтрока.ПоказанияОдометраНачало = ПредСтрока.ПоказанияОдометраОкончание;
			
		Иначе
			ДатаПоказания = ?(ЗначениеЗаполнено(ТекСтрока.ДатаНачала), ТекСтрока.ДатаНачала, Объект.Дата);
			ТекСтрока.ПоказанияОдометраНачало = дт_ГрузоперевозкиВызовСервера.ПолучитьПоказаниеОдометра(Объект.Автомобиль, ДатаПоказания);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДатаНачалаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Маршрут.ТекущиеДанные;
	Если ТекСтрока.НомерСтроки = 1
		И ЗначениеЗаполнено(ТекСтрока.ДатаНачала) Тогда
		// определим показания одометра по данным истории
		
		ДатаПоказания = ТекСтрока.ДатаНачала - 1;
		ТекСтрока.ПоказанияОдометраНачало = дт_ГрузоперевозкиВызовСервера.ПолучитьПоказаниеОдометра(Объект.Автомобиль, ДатаПоказания);
		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНаДоставку.Ссылка КАК ЗаказНаДоставку,
		|	ЗаказНаДоставку.ПунктОтправления КАК ПунктОтправления,
		|	ЗаказНаДоставку.ПунктНазначения КАК ПунктНазначения,
		|	ЗаказНаДоставку.Расстояние КАК Расстояние
		|ИЗ
		|	Документ.ЗаказНаДоставку КАК ЗаказНаДоставку
		|ГДЕ
		|	ЗаказНаДоставку.Автомобиль = &Автомобиль
		|	И ЗаказНаДоставку.Водитель = &Водитель
		|	И ЗаказНаДоставку.ДатаНачала >= &ДатаНачала
		|	И ЗаказНаДоставку.ДатаНачала <= &ДатаОкончания
		|	И ЗаказНаДоставку.ДатаОкончания >= &ДатаНачала
		|	И ЗаказНаДоставку.ДатаОкончания <= &ДатаОкончания
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказНаДоставку.Дата";
	
	Запрос.УстановитьПараметр("Автомобиль", Объект.Автомобиль);
	Запрос.УстановитьПараметр("Водитель", Объект.Водитель);
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);
	
	МаршрутИсточник = Запрос.Выполнить().Выгрузить();
	Объект.Маршрут.Загрузить(МаршрутИсточник);	
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутПунктОтправленияАдрес");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутПунктНазначенияАдрес");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутМассаГруза");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Маршрут.ЗаказНаДоставку", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутРасстояние");
	
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы, "ИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.Маршрут.ПоказанияОдометраНачало", ВидСравненияКомпоновкиДанных.Заполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.Маршрут.ПоказанияОдометраОкончание", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	

КонецПроцедуры // УстановитьУсловноеОформление()



&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	//Элементы.Расстояние.Доступность = Не ЗначениеЗаполнено(Объект.ПоказанияОдометраНачало) И НЕ ЗначениеЗаполнено(Объект.ПоказанияОдометраОкончание);
	Элементы.ГруппаОдометр.Видимость = НЕ Форма.ПоказанияОдометраДетально;
	
	Элементы.ТопливоРасход.Доступность = Не ЗначениеЗаполнено(Объект.ТопливоВБакеНачало) И НЕ ЗначениеЗаполнено(Объект.ТопливоВБакеОкончание);
	
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаКлиенте
Процедура УправлениеФормойКлиент()

	ШрифтРубляУстановлен = дт_ШрифтРубляКлиентПовтИсп.ШрифтУстановлен();
	Элементы.ДекорацияРубль.Видимость = ШрифтРубляУстановлен;
	Элементы.ДекорацияРубльАльт.Видимость = НЕ ШрифтРубляУстановлен;

КонецПроцедуры // УправлениеФормойКлиент()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСписки(Форма)

	Объект = Форма.Объект;
	Список = Форма.СписокРасходы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"Автомобиль", 
		Объект.Автомобиль, 
		ВидСравненияКомпоновкиДанных.Равно,,Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"МаршрутныйЛист", 
		Объект.Ссылка, 
		ВидСравненияКомпоновкиДанных.Равно,,Истина);

КонецПроцедуры // ОбновитьСписки()

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьПериод_Продолжение", ЭтотОбъект);
	//Период = Новый СтандартныйПериод(Объект.ДатаНачала, Объект.ДатаОкончания);
	
	ПоказатьВводЗначения(ОповещениеОЗакрытии, Период, "Выбрать период", Новый ОписаниеТипов("СтандартныйПериод"));
	
КонецПроцедуры


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ВыбратьПериод_Продолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Объект.ДатаНачала = РезультатЗакрытия.ДатаНачала;
	

КонецПроцедуры // ВыбратьПериод_Продолжение()


&НаКлиенте
Процедура ОбновитьДанныеПоСчетчикам(ИмяПоля, ПрефиксСвязанных, ОбратныйРасчет = Ложь, Источник = Неопределено)
	
	Если Источник = Неопределено Тогда
		Источник = Объект;
	КонецЕсли;
	
	А = Источник[ПрефиксСвязанных + "Начало"];
	Б = Источник[ПрефиксСвязанных + "Окончание"];
	
	Если ОбратныйРасчет Тогда
		Источник[ИмяПоля] =  А - Б;
	Иначе
		Источник[ИмяПоля] =  Б - А;
	КонецЕсли;

КонецПроцедуры // ОбновитьДанныеПоСчетчикам()


&НаСервере
Процедура ОбновитьРасходСУчетомЗаправокНаСервере()
	Объект.ТопливоРасходВсего = дт_Грузоперевозки.ПолучитьОборотыТопливаВБаке(Объект.Автомобиль, Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Ссылка) + Объект.ТопливоРасход;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасходСУчетомЗаправок(Команда)
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) 
		И ЗначениеЗаполнено(Объект.ДатаНачала)
		И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		
		ОбновитьРасходСУчетомЗаправокНаСервере();
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не заполнено одно из полей: Автомобиль, Период выполнения",
			,
			,
			"ДатаНачала"
		);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммуДокумента(Форма)

	Объект = Форма.Объект;
	ФорматСуммы = "ЧДЦ=2; ЧН=0; ЧГ=3,0";
	
	Форма.Элементы.СуммаДокумента.Заголовок = Формат(Объект.СуммаДокумента, ФорматСуммы);

	Форма.Элементы.НадписьРасстояние.Заголовок = Формат(Объект.Расстояние, "ЧДЦ=0") + " км";
		
		
КонецПроцедуры // ОбновитьСуммуДокумента()


&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПоказанияОдометраДетально(Форма)
	
	Объект = Форма.Объект;
	
	
	Форма.ПоказанияОдометраДетально = Ложь;
	
	Для каждого СтрокаТаблицы Из Объект.Маршрут Цикл
	
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПоказанияОдометраНачало)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.ПоказанияОдометраОкончание) Тогда
			Форма.ПоказанияОдометраДетально = Истина;
			Прервать
		КонецЕсли;
	
	КонецЦикла;
	

КонецПроцедуры // ОбновитьПоказанияОдометраДетально()






#КонецОбласти