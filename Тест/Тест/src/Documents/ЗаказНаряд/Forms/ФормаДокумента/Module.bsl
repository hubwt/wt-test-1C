


#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьСуммуДокумента(ЭтаФорма);
	ОбновитьПризнакУчетаНДС();
	УправлениеФормой(ЭтаФорма);
	
	Элементы.ТоварыОтветственный.ТолькоПросмотр = НЕ Пользователи.ЭтоПолноправныйПользователь(); 
	
	Для каждого ТабличнаяЧасть Из Объект.Ссылка.Метаданные().ТабличныеЧасти Цикл
	
		ИмяТЧ = ТабличнаяЧасть.Имя;
		ИмяПараметра = ИмяТЧ + "_НомерСтроки";
		Если Параметры.Свойство(ИмяПараметра) Тогда
			Элементы[ИмяТЧ].ТекущаяСтрока = Параметры[ИмяПараметра];
			
			ИмяСтраницы = "Группа" + ИмяТЧ;
			Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница = Элементы[ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры




&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьСписокКонтактныхЛиц();
	ОбновитьСуммуДокумента(ЭтаФорма);
	ОбновитьПризнакУчетаНДС();
	ОбновитьПоказателиТоваров(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеФормойКлиент();
	/// Комлев 30/05/24 +++
	Если ЗначениеЗаполнено(Объект.ПричинаОбращения) Тогда
		Элементы.ГруппаПричинаОбращения.Показать();
	КонецЕсли;
	/// Комлев 30/05/24 +++
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен") Тогда
		ПроверитьЗаполнениеИсполнителей(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Предварительный")
		И (Объект.Товары.Количество() <> 0
		ИЛИ Объект.Материалы.Количество() <> 0) Тогда
		Оповестить("ОстаткиИзменение");
	КонецЕсли;
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен") 
		И Объект.Работы.Количество() <> 0 Тогда
		Оповестить("РаботыИзменение");
	КонецЕсли;
	
	ОбновитьПоказателиТоваров(Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	Прочитать();
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПоступлениеЗапчастей") Тогда
		ИмяТабличнойЧасти = ?(Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница = Элементы.ГруппаМатериалы, "Материалы", "Товары");	
		ЗаполнитьПоПоступлениюСервер(ВыбранноеЗначение, ИмяТабличнойЧасти);
		ОбновитьСуммуДокумента(ЭтаФорма);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ИндКод") Тогда
		
		ИмяТабличнойЧасти = ?(Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница = Элементы.ГруппаМатериалы, "Материалы", "Товары");	
		Элементы[ИмяТабличнойЧасти].ТекущиеДанные.Партия = ВыбранноеЗначение;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ТоварыПартияПриИзменении(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура РекомендацииПриИзменении(Элемент)
	ОбновитьПризнакРекомендации(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
	ОбновитьПоказателиТоваров(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен") Тогда
		Объект.ДатаОкончания = ТекущаяДата();
		Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			Объект.ДатаНачала = Объект.ДатаОкончания;
		КонецЕсли;
		
		СформироватьУПД(Неопределено);
		
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.ВРаботе") Тогда
		Объект.ДатаНачала = ТекущаяДата();
		Объект.ДатаОкончания = '00010101';
		Объект.НомерУПД = "";
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Предварительный") Тогда	
		Объект.ДатаНачала = '00010101';
		Объект.ДатаОкончания = '00010101';
		Объект.НомерУПД = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	 ОбновитьСписокКонтактныхЛиц();
КонецПроцедуры

&НаКлиенте
Процедура ГарантииПриИзменении(Элемент)
	ОбновитьПризнакГарантии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОбращенияПриИзменении(Элемент)
	ОбновитьПризнакПричинаОбращения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура БезДоговораПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьПризнакУчетаНДС();
	//ОбновитьПоказателиТоваров(Истина);
	Объект.НомерУПД = "";
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен") Тогда
		СформироватьУПД(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен") Тогда
		Объект.ДатаУПД = Объект.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Работы

&НаКлиенте
Процедура РаботыРаботаПриИзменении(Элемент)
	
	СтруктураСтроки = Новый Структура("Работа,Цена,Нормочас,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.Работы.ТекущиеДанные);
	//РаботаПриИзмененииСервер(СтруктураСтроки);
	СтруктураСтроки.Вставить("ТипНаценки", Объект.ТипНаценки);
	
	дт_АвтосервисВызовСервера.РаботаПриИзменении(СтруктураСтроки);
	ЗаполнитьЗначенияСвойств(Элементы.Работы.ТекущиеДанные, СтруктураСтроки,, "Работа");
	
	
	ОбработкаИзмененияСтроки("Работы");
	
КонецПроцедуры


&НаСервере
Процедура РаботаПриИзмененииСервер(ДанныеСтроки)

	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Работа) Тогда
		Возврат
	КонецЕсли;
	
	Цены = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.Работа, Новый Структура("ВремяВыполнения,Нормочас", "ВремяВыполнения", "КатегорияРабот.Нормочас"));
	ДанныеСтроки.Нормочас = Цены.ВремяВыполнения;
	ДанныеСтроки.Цена = Цены.Нормочас;
	

КонецПроцедуры // РаботаПриИзмененииСервер()


&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Работы");
КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Работы");
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Работы", "Сумма");
КонецПроцедуры

&НаКлиенте
Процедура РаботыСкидкаПроцентПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Работы", "СкидкаПроцент");
КонецПроцедуры

&НаКлиенте
Процедура РаботыСкидкаСуммаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Работы", "СкидкаСумма");
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаВсегоПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Работы", "СуммаВсего");
КонецПроцедуры

&НаКлиенте
Процедура РаботыНормочасПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Работы", "Нормочас");
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьУПД(Команда)
	
	СформироватьУПДНаСервере();
	ПоказатьОповещениеПользователя("УПД сформирован", , "Номер УПД заполнен");		
	
	Подключаемый_ОбновитьКоманды();	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьУПДНаСервере()
	
	Объект.ДатаУПД = Объект.ДатаОкончания;
	//Если НЕ ЗначениеЗаполнено(Объект.ДатаУПД) Тогда
	//	Объект.ДатаУПД = ТекущаяДата();
	//КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.НомерУПД) ИЛИ НЕ дт_Нумерация.НомерУникален(Объект, Истина, Истина, Ложь, "НомерУПД") Тогда
	
		Объект.НомерУПД = дт_Нумерация.СвободныйНомерДокумента(
				Объект.Ссылка.Метаданные().Имя, 
				Объект.ДатаУПД, 
				дт_ОбщегоНазначения.ПрефиксОрганизации(Объект.Организация),
				"НомерУПД",
				Объект.Ссылка
			);
				
	КонецЕсли;
			
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьПартииПоОстаткам(Команда)

	Если Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ИмяТабличнойЧасти = СтрЗаменить(Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница.Имя, "Группа", "");
		
	
	Если НЕ ПроверитьЗаполнениеВФорме(ИмяТабличнойЧасти) Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьПартииПоОстаткамНаСервере(ИмяТабличнойЧасти);
	
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьПартииПоОстаткамНаСервере(ИмяТабличнойЧасти)

	
	Источник = Объект[ИмяТабличнойЧасти].Выгрузить(); //, "НомерСтроки,Номенклатура,Количество,Склад");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Источник.НомерСтроки КАК НомерСтроки,
		|	Источник.Номенклатура КАК Номенклатура,
		|	Источник.Количество КАК Количество,
		|	Источник.Склад КАК Склад,
		|	Источник.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ ВТ_Источник
		|ИЗ
		|	&Источник КАК Источник";
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Запрос.Выполнить();
	
	дт_Склад.ЗаполнитьПартииПоОстаткамНаСервере(Объект,
		 ИмяТабличнойЧасти,
		 "Склад",
		  Новый Граница(ПолучитьДатуОстатков(ЭтаФорма), ВидГраницы.Исключая),
		  Запрос.МенеджерВременныхТаблиц
	);

КонецПроцедуры // ЗаполнитьПартииПоОстаткамНаСервере()


&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)
	 ПараметрыОткрытия = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	 ОткрытьФорму("Документ.ПоступлениеЗапчастей.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	 
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоПоступлениюСервер(ПоступлениеСсылка, ИмяТабличнойЧасти)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Товар КАК Номенклатура,
		|	Товары.Колво КАК Количество,
		|	ИндКод.Ссылка КАК Партия,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Ссылка.Машина КАК Автомобиль
		|ПОМЕСТИТЬ ВТ_ТоварыПартии
		|ИЗ
		|	Документ.ПоступлениеЗапчастей.Таблица КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИндКод КАК ИндКод
		|		ПО Товары.Товар = ИндКод.Владелец
		|			И (ИндКод.ДокументПоступления = &Ссылка)
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТоварыПартии.Номенклатура КАК Номенклатура,
		|	ВТ_ТоварыПартии.Количество КАК Количество,
		|	ВТ_ТоварыПартии.Автомобиль КАК Автомобиль,
		|	ВТ_ТоварыПартии.Партия КАК Партия,
		|	ЕСТЬNULL(дт_ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		|	ВТ_ТоварыПартии.Количество * ЕСТЬNULL(дт_ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Сумма,
		|	&Ответственный КАК Ответственный
		|ИЗ
		|	ВТ_ТоварыПартии КАК ВТ_ТоварыПартии
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дт_ЦеныНоменклатуры.СрезПоследних(
		|				,
		|				ТипЦен = &ТипЦен
		|					И (Номенклатура, Партия) В
		|						(ВЫБРАТЬ
		|							ВТ_ТоварыПартии.Номенклатура,
		|							ВТ_ТоварыПартии.Партия
		|						ИЗ
		|							ВТ_ТоварыПартии)) КАК дт_ЦеныНоменклатурыСрезПоследних
		|		ПО ВТ_ТоварыПартии.Номенклатура = дт_ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВТ_ТоварыПартии.Партия = дт_ЦеныНоменклатурыСрезПоследних.Партия
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТоварыПартии.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ПоступлениеСсылка);
	Запрос.УстановитьПараметр("ТипЦен", Справочники.ТипыЦен.Розничная);
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтроки(Объект, ИмяТабличнойЧасти, НоваяСтрока);
		
	КонецЦикла;

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПризнакРекомендации(Форма)

	Объект = Форма.Объект;
	Рекомендации = СокрЛП(Объект.Рекомендации);
	Форма.ПризнакРекомендации = Мин(СтрЧислоСтрок(Рекомендации), СтрДлина(Рекомендации));

КонецПроцедуры // ОбновитьПризнакРекомендации()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПризнакГарантии(Форма)

	Форма.ПризнакГарантии = НЕ ПустаяСтрока(Форма.Объект.Гарантии)

КонецПроцедуры // ОбновитьПризнакГарантии()


&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПризнакПричинаОбращения(Форма)

	Форма.ПризнакПричинаОбращения = НЕ ПустаяСтрока(Форма.Объект.ПричинаОбращения)

КонецПроцедуры // ОбновитьПризнакПричинаОбращения()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ОбновитьПризнакРекомендации(Форма);	
	ОбновитьПризнакГарантии(Форма);	
	ОбновитьПризнакПричинаОбращения(Форма);	
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СкладЗаполненВШапке = ЗначениеЗаполнено(Объект.Склад);
	РаботыНачаты = Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Предварительный");
	РаботыВыполнены = Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен");
	
	Элементы.МатериалыСклад.Видимость = НЕ СкладЗаполненВШапке;
	Элементы.ТоварыСклад.Видимость = НЕ СкладЗаполненВШапке;

	Элементы.ГруппаРекомендации.Видимость = РаботыНачаты;
	
	Элементы.ДоговорКонтрагента.Видимость = Не Объект.БезДоговора;
	
	// УПД
	Элементы.ГруппаУПД.Видимость = РаботыВыполнены;//Форма.ЕстьУчетНДС;
	Элементы.ГруппаУПД.ТолькоПросмотр = Объект.ПометкаУдаления;
	
	// Все, кроме ГруппаДополнительно 
	Для каждого Элемент Из Элементы.ГруппаТабличныеЧасти.ПодчиненныеЭлементы Цикл
		Если Элемент = Элементы.ГруппаДополнительно Тогда
			Продолжить
		КонецЕсли;
		 
		 Элемент.ТолькоПросмотр = РаботыВыполнены;
	КонецЦикла;
	
	//Элементы.СформироватьУПД.Видимость = НЕ Объект.ПометкаУдаления;
	
	//Элементы.ДатаУПД.Видимость = Форма.ЕстьУчетНДС;	
	//Элементы.ДатаУПД.ТолькоПросмотр = Объект.ПометкаУдаления;
	
	
КонецПроцедуры 

&НаКлиенте
Процедура УправлениеФормойКлиент()

	ШрифтРубляУстановлен = дт_ШрифтРубляКлиентПовтИсп.ШрифтУстановлен();
	Элементы.ДекорацияРубль.Видимость = ШрифтРубляУстановлен;
	Элементы.ДекорацияРубльАльт.Видимость = НЕ ШрифтРубляУстановлен;

КонецПроцедуры // УправлениеФормойКлиент()


&НаСервере
Процедура ОбновитьСписокКонтактныхЛиц()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КлиентыДополнительныеКонтакты.ФИО КАК СТРОКА(100)) КАК ФИО,
		|	КлиентыДополнительныеКонтакты.Телефон КАК Телефон
		|ИЗ
		|	Справочник.Клиенты.ДополнительныеКонтакты КАК КлиентыДополнительныеКонтакты
		|ГДЕ
		|	КлиентыДополнительныеКонтакты.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФИО";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Элементы.КонтактноеЛицо.СписокВыбора.Очистить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Элементы.КонтактноеЛицо.СписокВыбора.Добавить(Выборка.ФИО, Выборка.ФИО + " " + Выборка.Телефон);
	
	КонецЦикла; 

КонецПроцедуры // ОбновитьСписокКонтактныхЛиц()

&НаКлиенте
Процедура КонтактноеЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ключ", Объект.Клиент);
	ПараметрыОткрытия.Вставить("ТекущаяВкладка", "КонтактныеЛица");
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		ПараметрыОткрытия.Вставить("КонтактноеЛицо", Объект.КонтактноеЛицо);
	КонецЕсли;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("КонтактноеЛицоОкончаниеРедактирование", ЭтаФорма);
	ОткрытьФорму("Справочник.Клиенты.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.КлючУникальности, , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоОкончаниеРедактирование(Парам1, Парам2) Экспорт

	ОбновитьСписокКонтактныхЛиц();	

КонецПроцедуры // КонтактноеЛицоОкончаниеРедактирование()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммуДокумента(Форма)

	Объект = Форма.Объект;
	СуммаРаботы = Объект.Работы.Итог("СуммаВсего");
	СуммаТовары = Объект.Товары.Итог("СуммаВсего");
	СуммаТоварыНаКомиссии = Объект.ТоварыНаКомиссии.Итог("СуммаВсего");
	СуммаБезТоваровНаКомиссии = СуммаРаботы + СуммаТовары;
	СуммаВсего = СуммаБезТоваровНаКомиссии + СуммаТоварыНаКомиссии;
	ФорматСуммы = "ЧДЦ=2; ЧН=0; ЧГ=3,0";
	
	Форма.Элементы.СуммаДокумента.Заголовок = Формат(СуммаБезТоваровНаКомиссии, ФорматСуммы);

	Форма.Элементы.СуммаДетально.Заголовок = "работы " + Формат(СуммаРаботы, ФорматСуммы) + "   товары " + Формат(СуммаТовары, ФорматСуммы) + Символы.ПС 
		+ "б/у " + Формат(СуммаТоварыНаКомиссии, ФорматСуммы)+ ".  Итого " + Формат(СуммаВсего, ФорматСуммы);
	
КонецПроцедуры // ОбновитьСуммуДокумента()

&НаКлиенте
Процедура ОбработкаИзмененияСтроки(ИмяТабличнойЧасти, Поле = Неопределено, ДанныеСтроки = Неопределено)
	
	ТекДанные = ?(ДанныеСтроки = Неопределено, Элементы[ИмяТабличнойЧасти].ТекущиеДанные, ДанныеСтроки);
	дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтроки(Объект, ИмяТабличнойЧасти, ТекДанные, Поле);
	ОбновитьСуммуДокумента(ЭтаФорма);

КонецПроцедуры // ОбработкаИзмененияСтроки()

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ДатаПриИзмененииСервер()

	Если дт_Нумерация.ГодИзменен(Объект.Ссылка, Объект.Дата) Тогда
		Объект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ДатаПриИзмененииСервер()

&НаКлиенте
Процедура ПроцентАгентскихПриИзменении(Элемент)
	
	Для каждого СтрокаТаблицы Из Объект.ТоварыНаКомиссии Цикл
	
		ОбработкаИзмененияСтроки("ТоварыНаКомиссии",, СтрокаТаблицы);
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ДанныеЗаполнения = Новый Структура("МестоХранения,Цена,Номенклатура,КоличествоПродано,КоличествоОстаток,НомерСтроки");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Элементы.Товары.ТекущиеДанные);
	
	ДанныеЗаполнения.Вставить("Дата",			Объект.Дата);
	ДанныеЗаполнения.Вставить("Склад",			Объект.Склад);
	//ДанныеЗаполнения.Вставить("Партия",			Неопределено);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеЗаполнения, , "Номенклатура");
	
	ОбработкаИзмененияСтроки("Товары");
	//элементы.Товары.ТекущиеДанные.Цена = ВозвратЦены(элементы.Товары.ТекущиеДанные.Номенклатура);

	ОбновитьСуммуДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеЗаполнения)
	
	ДанныеЗаполнения.МестоХранения = дт_АдресноеХранение.ПолучитьМестоХранения(ДанныеЗаполнения);
	
	дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(ДанныеЗаполнения, ПредопределенноеЗначение("Справочник.ТипыЦен.Рекомендованная"));
	
	ЗаполнитьПродажиОстатки(ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПродажиОстатки(ДанныеЗаполнения,строка=неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.НомерСтроки КАК НомерСтроки,
	|	Т.Номенклатура,
	|	ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) КАК КоличествоПродано,
	|	ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 0) КАК СуммаОборот,
	|	ЕСТЬNULL(РегистрНакопления1Остатки.КолвоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	Т КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки(, Склад = &Склад
	|		И Товар В
	|			(ВЫБРАТЬ
	|				Т.Номенклатура
	|			ИЗ
	|				Т)) КАК РегистрНакопления1Остатки
	|		ПО Т.Номенклатура = РегистрНакопления1Остатки.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(,,, Номенклатура В
	|			(ВЫБРАТЬ
	|				Т.Номенклатура
	|			ИЗ
	|				Т)) КАК ПродажиОбороты
	|		ПО ПродажиОбороты.Номенклатура = Т.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ЗаполнениеДокумента = ТипЗнч(ДанныеЗаполнения) = Тип("ДанныеФормыСтруктура");
	ЗаполнениеДокумента2 = ТипЗнч(ДанныеЗаполнения)= Тип("Структура");
	Если ЗаполнениеДокумента Тогда
		Товары = ДанныеЗаполнения.Товары.Выгрузить();
	Иначе
		
		Товары = Новый ТаблицаЗначений();
		Товары.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(4));
		Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ДанныеЗаполнения);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("Склад", ДанныеЗаполнения.Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗаполнениеДокумента  Тогда
			СтрокаТовары = ДанныеЗаполнения.Товары[Выборка.НомерСтроки - 1];
			СтрокаТовары.КоличествоПродано = Выборка.КоличествоПродано;
			СтрокаТовары.КоличествоОстаток = Выборка.КоличествоОстаток;
		ИначеЕсли ЗаполнениеДокумента2 Тогда
			Попытка
				Строка.КоличествоПродано = Выборка.КоличествоПродано;
				Строка.КоличествоОстаток = Выборка.КоличествоОстаток;
			Исключение
				ДанныеЗаполнения.КоличествоПродано = Выборка.КоличествоПродано; 	
				ДанныеЗаполнения.КоличествоОстаток = Выборка.КоличествоОстаток;
			КонецПопытки;
		Иначе
			
			ДанныеЗаполнения.КоличествоПродано = Выборка.КоличествоПродано; 	
			ДанныеЗаполнения.КоличествоОстаток = Выборка.КоличествоОстаток;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры




&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары");
	ОбновитьПоказателиТоваров();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары");
	ОбновитьПоказателиТоваров();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаСуммаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары", "СкидкаСумма");
	ОбновитьПоказателиТоваров();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаПроцентПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары", "СкидкаПроцент");
	ОбновитьПоказателиТоваров();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары", "Сумма");
	ОбновитьПоказателиТоваров();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары", "СуммаВсего");
	ОбновитьПоказателиТоваров();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.Товары.ТекущиеДанные);
	СтруктураСтроки.Вставить("Дата", Объект.Дата);

	дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(СтруктураСтроки);
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, СтруктураСтроки,, "Номенклатура");
	
	ОбработкаИзмененияСтроки("Товары");
	
	ОбновитьПоказателиТоваров(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПартияНачалоВыбора("Товары", ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПартияПриИзменении(Элемент)
	
	//СтруктураСтроки = Новый Структура("Номенклатура,Партия,цена");
	//ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.Товары.ТекущиеДанные);
	//СтруктураСтроки.Вставить("Дата", Объект.Дата);
	//
	//Если Не ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Цена) тогда
	//	дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(СтруктураСтроки);
	//КонецЕсли;
	//
	//ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, СтруктураСтроки,, "Номенклатура,Партия,Цена");
	//
	//ОбработкаИзмененияСтроки("Товары");
	//ОбновитьПоказателиТоваров(Истина);	
	ЗаполнитьАвтомобиль();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	ОбновитьПоказателиТоваров(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Материалы

&НаКлиенте
Процедура МатериалыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПартияНачалоВыбора("Материалы", ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_МатериалыЗаказчика

&НаКлиенте
Процедура МатериалыЗаказчикаПриИзменении(Элемент)
	ОбновитьСуммуДокумента(ЭтаФорма);
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТоварыНаКомиссии

&НаКлиенте
Процедура ТоварыНаКомиссииПриИзменении(Элемент)
	ОбновитьСуммуДокумента(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаКомиссииНоменклатураПриИзменении(Элемент)
	СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.ТоварыНаКомиссии.ТекущиеДанные);
	СтруктураСтроки.Вставить("Дата", Объект.Дата);

	дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(СтруктураСтроки);
	ЗаполнитьЗначенияСвойств(Элементы.ТоварыНаКомиссии.ТекущиеДанные, СтруктураСтроки,, "Номенклатура");
	
	ОбработкаИзмененияСтроки("ТоварыНаКомиссии");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаКомиссииКоличествоПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("ТоварыНаКомиссии");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаКомиссииЦенаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("ТоварыНаКомиссии");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаКомиссииСкидкаСуммаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("ТоварыНаКомиссии", "СкидкаСумма");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаКомиссииСкидкаПроцентПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("ТоварыНаКомиссии", "СкидкаПроцент");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаКомиссииСуммаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("ТоварыНаКомиссии", "Сумма");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаКомиссииСуммаВсегоПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("ТоварыНаКомиссии", "СуммаВсего");
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Работы

&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	ОбновитьСуммуДокумента(ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)
	дт_СвязанныеТабличныеЧастиКлиент.ПередУдалениемСтрокиГлавнойТабличнойЧасти(
		ЭтаФорма,
		Элемент,
		"Исполнители",
		Отказ
	);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРаботуВНаряд(Команда)
	ПараметрыФормы = Новый Структура("РежимВыбора",Истина);
	
	
	Форма = ПолучитьФорму("Документ.ЗаказНаряд.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	ВыбранныйДокумент = Форма.ОткрытьМодально();
	
	Если ВыбранныйДокумент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	
	ТекДанные = Элементы.РаботыСписок.ТекущиеДанные ;
	
	
ДобавитьРаботуВНарядНаСервере(ВыбранныйДокумент, 
								ТекДанные.Работа,  
								ТекДанные.Количество, 	
								ТекДанные.Нормочас, 
								ТекДанные.Цена, 
								ТекДанные.Сумма,
								ТекДанные.СкидкаСумма,
								ТекДанные.СуммаВсего,
								ТекДанные.Содержание,
								ТекДанные.ИдентификаторСтроки,
								ТекДанные.ВремяФакт,
								ТекДанные.ВремяПлан,
								ТекДанные.СуммаНалог,
								ТекДанные.Ответственный
								);
								

								
		Сообщить("" + ВыбранныйДокумент + "изменен.");
КонецПроцедуры

&НаСервере
Процедура ДобавитьРаботуВНарядНаСервере(ВыбранныйДокумент, 
	                                     Работа, 
	                                     Количество, 
	                                     Нормочас, 
	                                     Цена, 
	                                     Сумма,
	                                     СкидкаСумма,
										 СуммаВсего,
										 Содержание,
										 ИдентификаторСтроки,
										 ВремяФакт,
										 ВремяПлан,
										 СуммаНалог,
										 Ответственный
										  )
	
	
	ДокументДляИзменения = ВыбранныйДокумент.ПолучитьОбъект();
	
	СтрокаТЧ = ДокументДляИзменения.Работы.Добавить();
	
	СтрокаТЧ.Работа = Работа;
	СтрокаТЧ.Количество = Количество;
	СтрокаТЧ.Нормочас = Нормочас;
	СтрокаТЧ.Цена = Цена;
	СтрокаТЧ.Сумма = Сумма;
	СтрокаТЧ.СкидкаСумма = СкидкаСумма;
	СтрокаТЧ.СуммаВсего = СуммаВсего;
	СтрокаТЧ.Содержание = Содержание;
	СтрокаТЧ.ИдентификаторСтроки = Новый УникальныйИдентификатор();;
	СтрокаТЧ.ВремяФакт = ВремяФакт;
	СтрокаТЧ.ВремяПлан = ВремяПлан;
	СтрокаТЧ.СуммаНалог = СуммаНалог;
	
	
	
	СтрокаТЧОтветственные = ДокументДляИзменения.Ответственные.Добавить();
	СтрокаТЧОтветственные.Сотрудник = Ответственный;

	
	
	
	СтрокаТЧИсп = ДокументДляИзменения.Исполнители.Добавить();
	СтрокаТЧИсп.Исполнитель = Ответственный;
	СтрокаТЧИсп.ИдентификаторСтрокиРодитель = СтрокаТЧ.ИдентификаторСтроки;
	
	ДокументДляИзменения.Записать();
КонецПроцедуры


&НаКлиенте
Процедура РаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	дт_СвязанныеТабличныеЧастиКлиент.ПередОкончаниемРедактированияГлавнойТабличнойЧасти(
		ЭтаФорма,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования,
		Отказ,
		"Исполнители"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриАктивизацииСтроки(Элемент)
	дт_СвязанныеТабличныеЧастиКлиент.ОбновитьОтборСтрокПодчиненнойТабличнойЧасти(
		ЭтаФорма,
		Элемент, 
		"Исполнители"
	);
	
	дт_СвязанныеТабличныеЧастиКлиент.ОбновитьОтборСтрокПодчиненнойТабличнойЧасти(
		ЭтаФорма,
		Элемент, 
		"Исполнители"
	);
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	дт_СвязанныеТабличныеЧастиКлиент.ПриНачалеРедактированияCтрокиГлавнойТабличнойЧасти(
		ЭтаФорма,
		Элемент,
		НоваяСтрока,
		Копирование,
		"Исполнители"
	);
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Исполнители

&НаКлиенте
Процедура ИсполнителиПриИзменении(Элемент)
	ОбновитьСуммуДокумента(ЭтаФорма);
КонецПроцедуры



&НаКлиенте
Процедура ИсполнителиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	дт_СвязанныеТабличныеЧастиКлиент.ПередОкончаниемРедактированияПодчиненнойТабличнойЧасти(
		ЭтаФорма,
		Элемент, 
		НоваяСтрока, 
		ОтменаРедактирования, 
		Отказ, 
		"Работы"
	);
КонецПроцедуры
	
#КонецОбласти



#Область Служебные

&НаКлиенте
Процедура ПартияНачалоВыбора(ИмяТаблицы, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Владелец", ТекДанные.Номенклатура);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ДатаОстатков", ПолучитьДатуОстатков(ЭтаФорма));
	ПараметрыОткрытия.Вставить("Склад", ?(ЗначениеЗаполнено(ТекДанные.Склад), ТекДанные.Склад, Объект.Склад));
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекДанные.Партия);
	ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
	
	
	ОткрытьФорму("Справочник.ИндКод.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор); 

КонецПроцедуры // ПартияНачалоВыбора()


&НаСервере
Процедура ОбновитьПризнакУчетаНДС()

	ЕстьУчетНДС = Ложь;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЕстьУчетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЕстьУчетНДС");
		
	КонецЕсли;
	

КонецПроцедуры // ОбновитьПризнакУчетаНДС()

&НаКлиенте
Функция ПроверитьЗаполнениеВФорме(ИмяТабличнойЧасти)

	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, "Склад");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Склад",
			,
			Отказ
		);
			
	КонецЕсли;
	
	СкладЗаполненВШапке = ЗначениеЗаполнено(Объект.Склад);
	
	Для каждого СтрокаТаблицы Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если НЕ СкладЗаполненВШапке 
			И Не ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, "Склад", СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Склад");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				Поле,
				,
				Отказ
				);
			
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, "Номенклатура", СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				Поле,
				"Объект",
				Отказ
				);
			
		КонецЕсли;	
		
		
	КонецЦикла;
	
	Возврат Не Отказ;

КонецФункции // ПроверитьЗаполнениеВФорме()

&НаКлиенте
Процедура ПроверитьЗаполнениеИсполнителей(Корректировать, Отказ = Ложь)

	Если Объект.Исполнители.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ИмяГлавнойТабличнойЧасти = "Работы";
	ИмяПодчиненнойТабличнойЧасти = "Исполнители";
	
	Если Корректировать Тогда
		
		ИсполнителиШаблон = Новый Массив();
		// найдем первую строку с исполнителями
		Для каждого СтрокаТаблицы Из Объект[ИмяГлавнойТабличнойЧасти] Цикл
		
			ЗначениеОтбора = СтрокаТаблицы.ИдентификаторСтроки;
			СтрокиИсполнители = Объект[ИмяПодчиненнойТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодитель", ЗначениеОтбора));
			
			Если СтрокиИсполнители.Количество() <> 0 Тогда
				
				Для каждого СтрокаИсполнитель Из СтрокиИсполнители Цикл
					ИсполнителиШаблон.Добавить(СтрокаИсполнитель.Исполнитель);	
				КонецЦикла;
				
				Прервать;
				
			КонецЕсли;
			
		
		КонецЦикла; 
		
		Если ИсполнителиШаблон.Количество() = 0 Тогда
			ПоказатьОповещениеПользователя(,,"Нет данных об исполнителях в первой строке");
			Возврат
		КонецЕсли;
	КонецЕсли;	
	
	Для каждого СтрокаТаблицы Из Объект[ИмяГлавнойТабличнойЧасти] Цикл
		
		ЗначениеОтбора = СтрокаТаблицы.ИдентификаторСтроки;
		СтрокиИсполнители = Объект[ИмяПодчиненнойТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодитель", ЗначениеОтбора));
		
		Если СтрокиИсполнители.Количество() = 0 Тогда
			
			Если Корректировать Тогда
				
				Для каждого Исполнитель Из ИсполнителиШаблон Цикл
				
					НоваяСтрока = Объект[ИмяПодчиненнойТабличнойЧасти].Добавить();
					НоваяСтрока.Исполнитель = Исполнитель;
					НоваяСтрока.ИдентификаторСтрокиРодитель = ЗначениеОтбора;
				
				КонецЦикла;
				
			Иначе
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяГлавнойТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "НомерСтроки");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон("Не заполнены исполнители в строке %1 таблицы %2",
						СтрокаТаблицы.НомерСтроки,
						ИмяГлавнойТабличнойЧасти),
					,
					Поле,
					"Объект",
					Отказ
				);
				
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Если Отказ И НЕ Корректировать Тогда
		//Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоПервойСтроке", ЭтаФорма);
		//ПоказатьВопрос(Оповещение, "Заполнить исполнителей по данным первой строки?", РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеИсполнителей()


&НаКлиенте
Процедура ЗаполнитьИсполнителейПоПервойСтроке(КодВозврата, Парам2) Экспорт

	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат
	КонецЕсли;
	
	ПроверитьЗаполнениеИсполнителей(Истина);
	
КонецПроцедуры // ЗаполнитьИсполнителейПоПервойСтроке()


&НаСервере
Процедура ОбновитьПоказателиТоваров(ОбновитьСебестоимость = Ложь)

	// Себестоимость	
	Если ОбновитьСебестоимость Тогда
		
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Склад КАК Склад,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Партия КАК Партия,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрганизацийОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыОрганизацийОбороты.Партия КАК Партия,
		|	ТоварыОрганизацийОбороты.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ТоварыОрганизацийОбороты.КоличествоПриход = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыОрганизацийОбороты.СтоимостьПриход / ТоварыОрганизацийОбороты.КоличествоПриход КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СебестомостьЕдиницы,
		|	ВЫБОР
		|		КОГДА ТоварыОрганизацийОбороты.КоличествоПриход = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыОрганизацийОбороты.СтоимостьПриход / ТоварыОрганизацийОбороты.КоличествоПриход КАК ЧИСЛО(15, 2))
		|	КОНЕЦ * ВТ_Товары.Количество КАК Себестоимость
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Обороты(
		|			,
		|			,
		|			,
		|			(Склад, Номенклатура, Партия) В
		|				(ВЫБРАТЬ
		|					ВТ_Товары.Склад,
		|					ВТ_Товары.Номенклатура,
		|					ВТ_Товары.Партия
		|				ИЗ
		|					ВТ_Товары)) КАК ТоварыОрганизацийОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
		|		ПО ТоварыОрганизацийОбороты.Номенклатура = ВТ_Товары.Номенклатура
		|			И ТоварыОрганизацийОбороты.Партия = ВТ_Товары.Партия
		|ИТОГИ
		|	СУММА(Себестоимость)
		|ПО
		|	ОБЩИЕ";
		
		Товары = Объект.Товары.Выгрузить();
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Товары.ЗаполнитьЗначения(Объект.Склад, "Склад");
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("Товары", Товары);
		
		СуммаСебестоимость = 0;
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			СтрокаТаблицы.СебестоимостьЕдиницы = 0;
		КонецЦикла;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаВсего = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаВсего.Следующий() Тогда
			СуммаСебестоимость = ВыборкаВсего.Себестоимость;
			
			ВыборкаДетальныеЗаписи = ВыборкаВсего.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				СтрокиКлюч = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура,Партия", 
						ВыборкаДетальныеЗаписи.Номенклатура,
						ВыборкаДетальныеЗаписи.Партия
					)
				);
				

				Для каждого СтрокаТаблицы Из СтрокиКлюч Цикл
				
					СтрокаТаблицы.СебестоимостьЕдиницы = ВыборкаДетальныеЗаписи.СебестомостьЕдиницы;
				
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.ВаловаяПрибыль =  СтрокаТаблицы.СуммаВсего - (СтрокаТаблицы.СебестоимостьЕдиницы * СтрокаТаблицы.Количество);
	КонецЦикла;
	
	СуммаВаловаяПрибыль = Объект.Товары.Итог("СуммаВсего") - СуммаСебестоимость;
	Рентабельность = ?(СуммаСебестоимость = 0, 0, Окр(СуммаВаловаяПрибыль * 100 / СуммаСебестоимость, 2));

КонецПроцедуры // ОбновитьПоказателиТоваров()


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуОстатков(Форма)

	Объект = Форма.Объект;
	ДатаОстатков = ?(Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен"),
		Объект.ДатаОкончания,
		ТекущаяДата()
	);
	
	Возврат ДатаОстатков;
	

КонецФункции // ПолучитьДатуОстатков()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция УстановитьУсловноеОформление()

	// Товары.ВаловаяПрибыль
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВаловаяПрибыль");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СебестоимостьЕдиницы", ВидСравненияКомпоновкиДанных.Равно, 0);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	// Товары.СебестоимостьЕдиницы
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимостьЕдиницы");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СебестоимостьЕдиницы", ВидСравненияКомпоновкиДанных.Равно, 0);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);
	
	// Товары.ВаловаяПрибыль
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВаловаяПрибыль");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	

КонецФункции
 // УстановитьУсловноеОформление()
 
 &НаСервере
 Процедура УстановитьВидимостьИДоступность()
 
 	
 
 КонецПроцедуры
 
#КонецОбласти

Процедура ЗаполнитьАвтомобиль()
	
	КодАвто   	= Элементы.Товары.ТекущиеДанные.партия.Наименование;
	ДлинаСтроки = СтрДлина(КодАвто);
	СтрокаНач 	= СтрНайти(КодАвто, "S");
	КодАвто  	= Прав(КодАвто, (1+ДлинаСтроки-СтрокаНач));
	
	ДлинаСтроки = СтрДлина(КодАвто);          
	СтрокаКон 	= СтрНайти(КодАвто, "_");
	КодАвто     = Лев(КодАвто,СтрокаКон-1);
	Попытка
		Элементы.Товары.ТекущиеДанные.Автомобиль = ЗаполнитьАвтомобильНаСервере(КодАвто);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

функция ЗаполнитьАвтомобильНаСервере(КодАвто)
	Автомобиль = Справочники.Машины.НайтиПоРеквизиту("КодМашины",КодАвто);
	Возврат	Автомобиль;
КонецФункции

&НаСервере
Процедура ВнешнееСобытиеНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	ВнешнееСобытиеНаСервере();
КонецПроцедуры



