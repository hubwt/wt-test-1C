
//Перем ВключитьВСтоимость;


#Область ОбработчикиСобытийФормы

//Мазин --------------Начало
&НаСервере
Процедура ПересчетТаблицТоварыИРаботаСкидкаНаценка (СкидкаНаценка)


Дата = ТекущаяДата(); 
Дата = ?(ЗначениеЗаполнено(Объект.Дата),  Объект.Дата, "");

// Изменяем цену в ТЧ Товары и ТЧ Работы с учетом скидки или наценки

Если Объект.НаценкаМенеджер = 0  И Объект.СкидкаМенеджер > 0 Тогда 
	Если Объект.Товары.Количество() > 0 Тогда 
		Для Каждого СтрокаТЧ ИЗ Объект.Товары Цикл
			СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
			СтруктураСтроки.Вставить("Дата", Дата);  
			дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(СтруктураСтроки, ПредопределенноеЗначение("Справочник.ТипыЦен.Рекомендованная"));
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСтроки);
			СтрокаТЧ.Цена = СтрокаТЧ.Цена - СтрокаТЧ.Цена * СкидкаНаценка / 100 ;
			ОбработкаИзмененияСтрокиНаСервере("Товары",, СтрокаТЧ);  
		КонецЦикла;
	КонецЕсли;

			Если Объект.Работы.Количество() <>  0 Тогда
				Для Каждого СтрокаТЧ ИЗ Объект.Работы Цикл 
					СтруктураСтроки = Новый Структура("Работа,Цена,Нормочас,Количество,ВремяПлан");
					ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
					СтруктураСтроки.Вставить("ТипНаценки", Объект.ТипНаценки);
					дт_АвтосервисВызовСервера.РаботаПриИзменении(СтруктураСтроки, Ложь);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСтроки,, "Работа");
					СтрокаТЧ.Цена = СтрокаТЧ.Цена - СтрокаТЧ.Цена * СкидкаНаценка / 100 ; 
					ОбработкаИзмененияСтрокиНаСервере("Работы",, СтрокаТЧ); 
				КонецЦикла
		 	КонецЕсли; 
КонецЕсли;
 
Если Объект.НаценкаМенеджер > 0  И Объект.СкидкаМенеджер = 0 Тогда 
	Если Объект.Товары.Количество() > 0 Тогда 
		Для Каждого СтрокаТЧ ИЗ Объект.Товары Цикл
			СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
			СтруктураСтроки.Вставить("Дата", Дата);  
			дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(СтруктураСтроки, ПредопределенноеЗначение("Справочник.ТипыЦен.Рекомендованная"));
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСтроки);
			СтрокаТЧ.Цена = СтрокаТЧ.Цена + СтрокаТЧ.Цена * СкидкаНаценка / 100 ; 
			ОбработкаИзмененияСтрокиНаСервере("Товары",, СтрокаТЧ);
		КонецЦикла;
	КонецЕсли;
		Если Объект.Работы.Количество() <>  0 Тогда
				Для Каждого СтрокаТЧ ИЗ Объект.Работы Цикл 
					СтруктураСтроки = Новый Структура("Работа,Цена,Нормочас,Количество,ВремяПлан");
					ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
					СтруктураСтроки.Вставить("ТипНаценки", Объект.ТипНаценки);
					дт_АвтосервисВызовСервера.РаботаПриИзменении(СтруктураСтроки, Ложь);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСтроки,, "Работа");
					СтрокаТЧ.Цена = СтрокаТЧ.Цена + СтрокаТЧ.Цена * СкидкаНаценка / 100 ; 
					ОбработкаИзмененияСтрокиНаСервере("Работы",, СтрокаТЧ); 
				КонецЦикла
		КонецЕсли; 
		
КонецЕсли;

Если Объект.СкидкаМенеджер = 0 И  Объект.НаценкаМенеджер = 0  Тогда
	Если Объект.Товары.Количество() > 0 Тогда 
		Для Каждого СтрокаТЧ ИЗ Объект.Товары Цикл
			СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
			СтруктураСтроки.Вставить("Дата", Дата);  
			дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(СтруктураСтроки, ПредопределенноеЗначение("Справочник.ТипыЦен.Рекомендованная"));
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСтроки);
			СтрокаТЧ.Цена = СтрокаТЧ.Цена;
			ОбработкаИзмененияСтрокиНаСервере("Товары",, СтрокаТЧ); 
		КонецЦикла;
	КонецЕсли; 
			Если Объект.Работы.Количество() <>  0 Тогда
				Для Каждого СтрокаТЧ ИЗ Объект.Работы Цикл 
					СтруктураСтроки = Новый Структура("Работа,Цена,Нормочас,Количество,ВремяПлан");
					ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
					СтруктураСтроки.Вставить("ТипНаценки", Объект.ТипНаценки);
					дт_АвтосервисВызовСервера.РаботаПриИзменении(СтруктураСтроки, Ложь);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСтроки,, "Работа");
					СтрокаТЧ.Цена = СтрокаТЧ.Цена; 
					ОбработкаИзмененияСтрокиНаСервере("Работы",, СтрокаТЧ); 
				КонецЦикла
		 	КонецЕсли; 
КонецЕсли;

ОбновитьПоказателиТоваров(Истина);

КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияСтрокиНаСервере(ИмяТабличнойЧасти, Поле = Неопределено, ДанныеСтроки = Неопределено)
	
	ТекДанные = ?(ДанныеСтроки = Неопределено, Элементы[ИмяТабличнойЧасти].ТекущиеДанные, ДанныеСтроки);
	Если Поле = "Нормочас" Тогда
		ТекДанные.Нормочас = дт_ОбщегоНазначенияКлиентСервер.ВремяСтрВЧасы(ТекДанные.НормочасСек);
		ТекДанные.ВремяПлан = ТекДанные.Нормочас * ТекДанные.Количество;
	КонецЕсли;
	
	///дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтроки(Объект, ИмяТабличнойЧасти, ТекДанные, Поле);
	
	Если ИмяТабличнойЧасти = "Работы" Тогда
		ТекДанные.НормочасСек = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(ТекДанные.Нормочас);
		ТекДанные.ВремяПланСек = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(ТекДанные.ВремяПлан);
		дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтроки(Объект, ИмяТабличнойЧасти, ТекДанные, Поле);
//			//++Мазин
//			Если  (Объект.СкидкаМенеджер > 0  ИЛИ Объект.НаценкаМенеджер > 0)  Тогда
//			дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтрокиСкидкаНаценка (Объект, ИмяТабличнойЧасти, ТекДанные, Поле);
//			КонецЕсли;
//			//--Мазин
	КонецЕсли;
	
		Если Объект.Дата > Дата("20240110") И ИмяТабличнойЧасти = "Товары" Тогда
			ТекДанные.Сумма = ТекДанные.количество * ТекДанные.Цена;
			Если Объект.ТипНаценки = ПроверкаНДС() Тогда
				ТекДанные.СуммаНалог = ТекДанные.Сумма * 0.2;
				СуммаВсегоОкр = ТекДанные.Сумма + ТекДанные.СуммаНалог;
				ТекДанные.СуммаВсего = Окр(СуммаВсегоОкр); 

			КонецЕсли; 
		//++Мазин 
			Если Объект.ТипНаценки = ПроверкаБезНДС() Тогда
				ТекДанные.СуммаНалог = ТекДанные.Сумма * 0.06;
				СуммаВсегоОкр = ТекДанные.Сумма + ТекДанные.СуммаНалог;
				ТекДанные.СуммаВсего = Окр(СуммаВсегоОкр);
			КонецЕсли;
			Если Объект.ТипНаценки = Наличка() ИЛИ Объект.ТипНаценки = ТипНаценкиПустой() Тогда
				ТекДанные.СуммаНалог = 0;
				СуммаВсегоОкр = ТекДанные.Сумма + ТекДанные.СуммаНалог;
				ТекДанные.СуммаВсего = Окр(СуммаВсегоОкр);
			КонецЕсли;

		КонецЕсли;
	
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	
КонецПроцедуры
// ОбработкаИзмененияСтроки()


&НаКлиенте
Процедура СкидкаМенеджерПриИзменении(Элемент)	 
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипНаценки) Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Тип оплаты - не заполнен";
		Сообщение.Сообщить();
		Объект.СкидкаМенеджер = 0;  
	Возврат ;
	КонецЕсли; 
	Объект.НаценкаМенеджер = 0; 
	ПересчетТаблицТоварыИРаботаСкидкаНаценка (Объект.СкидкаМенеджер);

КонецПроцедуры

&НаКлиенте
Процедура НаценкаМенеджерПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ТипНаценки) Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Тип оплаты - не заполнен";
		Сообщение.Сообщить();
		Объект.НаценкаМенеджер = 0;  
	Возврат ;
	КонецЕсли; 
	
	Объект.СкидкаМенеджер = 0;
	ПересчетТаблицТоварыИРаботаСкидкаНаценка (Объект.НаценкаМенеджер);
	
КонецПроцедуры



//Мазин---------------Конец


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДоступноИзменениеЦеныРаботы = РольДоступна("дт_ИзменениеЦенНаРаботы") 
	ИЛИ Пользователи.ЭтоПолноправныйПользователь();
	
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	ОбновитьПризнакУчетаНДС();
	УправлениеФормой(ЭтаФорма);
	
	Для каждого ТабличнаяЧасть Из Объект.Ссылка.Метаданные().ТабличныеЧасти Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Имя;
		ИмяПараметра = ИмяТЧ + "_НомерСтроки";
		Если Параметры.Свойство(ИмяПараметра) Тогда
			Элементы[ИмяТЧ].ТекущаяСтрока = Параметры[ИмяПараметра];
			
			ИмяСтраницы = "Группа" + ИмяТЧ;
			Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница = Элементы[ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьУсловноеОформление();
	рассчётКоличества();
	
	///+ГомзМА 25.01.2023
	Если НЕ (ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава")) ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава"))    ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("Руководитель"))ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ЗаказНаряд"))) Тогда
		
		Элементы.ЗаказКлиента.ТолькоПросмотр = Истина;
	КонецЕсли;
	///-ГомзМА 25.01.2023
	ЗаполнитьПродажиОстатки(Объект);
	
	///+ГомзМА 25.01.2023
	Если   ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ЗаказНаряд")) Тогда
		
		
		Элементы.ГруппаШапка.ТолькоПросмотр = Истина;
		Элементы.Работы.ТолькоПросмотр = Истина;
	КонецЕсли;
	///-ГомзМА 25.01.2023
	
	///+ГомзМА 11.05.2023
	Объект.ВклВыклРасходникиВСтоимость = Перечисления.ВклВыклРасходниковВСтоимость.ВключитьРасходникиВСтоимость;
	///-ГомзМА 11.05.2023
	
	///+ГомзМА 04.10.2023
	Если Объект.Мастер = Справочники.Пользователи.ПустаяСсылка() И Объект.ВнутреннийЗаказНаряд Тогда
		Объект.Мастер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	///-ГомзМА 04.10.2023
	
	УстановитьСписокВыбора();
	
	ВключитьРасходникиВСтоимость();
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	//Волков ИО 05.12.2023++
	//Объект.Состояние = Перечисления.СостоянияЗаказНаряда.ВРаботе;
	ПроверитьПользователя();  
	//Волков ОИ 05.12.2023--
	//УстановитьСписокВыбора();
	////+Сергеев 27/02/2024
	УстановитьДатуЗакрытия();
	////-Сергеев 27/02/2024
	
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкладНН  = ПолучитьСклады().СкладНН;
	СкладМСК  = ПолучитьСклады().СкладМСК;
	СкладЕКБ  = ПолучитьСклады().СкладЕКБ;

	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.КоличествоОстаток = ПолучитьОстаткиПоСкладам(СтрокаТЧ.Номенклатура, СкладНН, Объект.Дата);
		СтрокаТЧ.ОстаткиМСК = ПолучитьОстаткиПоСкладам(СтрокаТЧ.Номенклатура, СкладМСК, Объект.Дата);
		СтрокаТЧ.ОстаткиЕКБ = ПолучитьОстаткиПоСкладам(СтрокаТЧ.Номенклатура, СкладЕКБ, Объект.Дата);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) ТОгда 
		СсылкаНаВТ10 = "https://zapchasti10.ru/zakaz-naryads/" + Объект.Номер;
	КонецЕсли;  
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьОжиданиеНаСрочно(Команда)
	ЗаменитьОжиданиеНаСрочноНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаменитьОжиданиеНаСрочноНаСервере()
	
	Для Каждого Строка ИЗ Объект.Товары Цикл 
		
		Если Строка.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Ожидание Тогда 
			Строка.Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Срочно; 
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры


&НаСервере
Процедура УстановитьДатуЗакрытия()
	
	//Если объект.Состояние = Перечисления.СостоянияЗаказНаряда.ВРаботе или объект.Состояние = Перечисления.СостоянияЗаказНаряда.Ожидание Тогда
	//	объект.ДатаОкончания = НачалоДня(ТекущаяДата()) + 3600*18;	
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	///+ГомзМА 12.05.2023
	Если Объект.ВклВыклРасходникиВСтоимость = Перечисления.ВклВыклРасходниковВСтоимость.ВключитьРасходникиВСтоимость И ЗначениеЗаполнено(Объект.ТМЦ) Тогда
		Элементы.РасходникиВключены.Видимость 	= Истина;
		Элементы.РасходникиНеВключены.Видимость	= Ложь;
	ИначеЕсли Объект.ВклВыклРасходникиВСтоимость = Перечисления.ВклВыклРасходниковВСтоимость.НеВключатьРасходникиВСтоимость И ЗначениеЗаполнено(Объект.ТМЦ) Тогда
		Элементы.РасходникиВключены.Видимость 	= Ложь;
		Элементы.РасходникиНеВключены.Видимость	= Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ТМЦ) Тогда
		Элементы.РасходникиВключены.Видимость 	= Ложь;
		Элементы.РасходникиНеВключены.Видимость	= Ложь;
	КонецЕсли;
	///-ГомзМА 12.05.2023
	
	///+ГомзМА 03.10.2023
	Если Объект.ВнутреннийЗаказНаряд Тогда
		Элементы.РаботыНормочас.Видимость 				= Истина;
		Элементы.РаботыГруппаВремя.Видимость 			= Истина;
		Элементы.ИсполнителиВремяФактСек.Видимость 		= Истина;
		Элементы.ИсполнителиПроцент.Видимость 			= Истина;
		Элементы.ГруппаИтогиПоОтветственным.Видимость 	= Истина;
		Элементы.Организация.Видимость 					= Ложь;
		Элементы.Клиент.Видимость 						= Ложь;
		Элементы.Подразделение.Видимость 				= Ложь;
		Элементы.РешениеКлиента.Видимость 				= Ложь;
		Элементы.СостояниеРасчетов.Видимость 			= Ложь;
		Элементы.ТипНаценки.Видимость 					= Ложь;
		Элементы.Склад.Видимость 						= Ложь;
		Элементы.ВосстановлениеДеталей.Видимость 		= Ложь;
		Элементы.Мастер.Видимость 						= Истина;
		Элементы.ЗаказКлиента.Видимость 				= Ложь;
		Элементы.ГруппаВины.Видимость 					= Ложь;
		Элементы.ИсполнителиВремяНормСек.Видимость 		= Истина;
	Иначе
		Элементы.РаботыНормочас.Видимость 				= Ложь;
		Элементы.РаботыГруппаВремя.Видимость 			= Ложь;
		Элементы.ИсполнителиВремяФактСек.Видимость 		= Ложь;
		Элементы.ИсполнителиПроцент.Видимость 			= Ложь;
		Элементы.ГруппаИтогиПоОтветственным.Видимость 	= Ложь;
		Элементы.Организация.Видимость 					= Истина;
		Элементы.Клиент.Видимость 						= Истина;
		Элементы.Подразделение.Видимость 				= Истина;
		Элементы.РешениеКлиента.Видимость 				= Истина;
		Элементы.СостояниеРасчетов.Видимость 			= Истина;
		Элементы.ТипНаценки.Видимость 					= Истина;
		Элементы.Склад.Видимость 						= Истина;
		Элементы.ВосстановлениеДеталей.Видимость 		= Истина;
		Элементы.Мастер.Видимость 						= Ложь;
		Элементы.ЗаказКлиента.Видимость 				= Истина;
		Элементы.ГруппаВины.Видимость 					= Истина;
		Элементы.ИсполнителиВремяНормСек.Видимость 		= Ложь;
	КонецЕсли;
	///-ГомзМА 03.10.2023
	
	
	///+ГомзМА 16.11.2023
	Если НЕ (ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава")) ИЛИ  
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("РедактированиеПартии"))) Тогда      
		
		Элементы.ТоварыПартия.ТолькоПросмотр = Истина;
	КонецЕсли;
	///-ГомзМА 16.11.2023
	
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьДобавленныеКолонки(ЭтаФорма);
	ОбновитьДобавленныеКолонкиСервер();
	
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	ОбновитьПризнакУчетаНДС();
	ОбновитьПоказателиТоваров(Истина);
	
КонецПроцедуры

Процедура ПроверитьПользователя()
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	Если Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Емелин Константин Валерьевич")  
		Или  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Грязев Илья Константинович")
		Или  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Волков Илья Олегович")
		Или  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Сергеев Фёдор Витальевич")
		ИЛИ  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Гомзякова Маргарита Александровна")
		ИЛИ  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Вадяев Илья Владимирович")
		ИЛИ  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Комлев Алексей Андреевич")
		ИЛИ  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Мазин Евгений Сергеевич")
		//Волков ИО 14.12.23 ++
		ИЛИ  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Каширин Владислав Александрович")
		//Волков ИО 14.12.23 --
		Тогда
		
		Элементы.ЗаблокироватьТЧТовары.Доступность 	= Истина;
		Элементы.ТоварыПартия.ТолькоПросмотр 		= Ложь;
	КонецЕсли;
	
	БлокироватьТЧТовары();	
	
	Элементы.СписатьСБалансаКлиента.Видимость = Ложь;
	Элементы.СписатьСБалансаКлиента.Доступность = Ложь;
	
	Если Пользователи = Справочники.Пользователи.НайтиПоНаименованию("Вадяева Дарья Викторовна") 
		Или  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Волков Илья Олегович")
		Или  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Сергеев Фёдор Витальевич")
		ИЛИ  Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Гомзякова Маргарита Александровна")
		Тогда 
		
		Элементы.СписатьСБалансаКлиента.Видимость = Истина;
		Элементы.СписатьСБалансаКлиента.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	/// Комлев АА 05/12/24 +++
	ЗаблокироватьРазблокироватьЗаказНаряд();
	/// Комлев АА 05/12/24 ---
	
	//Элементы.ЗаблокироватьТЧТовары.Видимость = Ложь;	
	
	//ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПроверитьПользователя();
	
	
	
	///+ГомзМА 09.08.2023
	#Если МобильныйКлиент Тогда
		Элементы.СканироватьКоды.Видимость = Истина;
	#Иначе
		Элементы.СканироватьКоды.Видимость = Ложь;
	#КонецЕсли
	///-ГомзМА 09.08.2023
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеФормойКлиент();
	Элементы.ДляБланкаОтчёта.Заголовок = "Для бланка отчёта "+ "("+КоличествоДеталей+")";
	РассчетКоличестваРасходников();
	
	ВыводЛога();
		
		Если  ЗаказНарядВзятВРаботу() Тогда 
		Для каждого Строка	 из Объект.Работы Цикл
			Строка.ВРаботе = Истина;
		КонецЦикла;
		
		Для каждого Строка Из Объект.Товары Цикл
			Строка.ВРаботе = Истина;
		КонецЦикла;
	КонецЕсли;
	/// Комлев 30/05/24 +++
	Если ЗначениеЗаполнено(Объект.ПричинаОбращения) Тогда
		Элементы.ГруппаПричинаОбращения.Показать();
	КонецЕсли;
	/// Комлев 30/05/24 ---
КонецПроцедуры

&НаКлиенте
Процедура РассчетКоличестваРасходников()
	
	///+ГомзМА 17.05.2023
	КоличествоРасходников = 0;
	
	Для Каждого Строка из Объект.ТМЦ Цикл
		КоличествоРасходников = КоличествоРасходников + 1;	
	КонецЦикла;
	
	Если КоличествоРасходников <> 0 Тогда
		Элементы.ГруппаТМЦ.Заголовок = "Расходники " + "(" + КоличествоРасходников + ")";
	Иначе
		Элементы.ГруппаТМЦ.Заголовок = "Расходники";
	КонецЕсли;
	///-ГомзМА 17.05.2023
	
КонецПроцедуры


Процедура рассчётКоличества()
	КоличествоДеталей = 0;
	
	
	Для Каждого стр из Объект.Товары  Цикл
		КоличествоДеталей = КоличествоДеталей + Стр.количество;	
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	///+ГомзМА 22.12.2023
	Если Параметры.Ключ.Пустая() Тогда
		Нов = Истина;
	КонецЕсли; 
	///-ГомзМА 22.12.2023
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен") Тогда
		//ПроверитьЗаполнениеИсполнителей(Ложь);
	КонецЕсли;
	//Рассчёт зп 
	ЗаписьЗП();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Предварительный")
		И (Объект.Товары.Количество() <> 0
		ИЛИ Объект.Материалы.Количество() <> 0) Тогда
		Оповестить("ОстаткиИзменение");
	КонецЕсли;
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен") 
		И Объект.Работы.Количество() <> 0 Тогда
		Оповестить("РаботыИзменение");
	КонецЕсли;
	
	ОбновитьПоказателиТоваров(Истина);
	ОбновитьДобавленныеКолонки(ЭтаФорма);
	
	///+ГомзМА 22.12.2023
	Если Нов тогда
		ТекстЛога = "Создал заявку " + объект.номер;
		ЗаписьЛога(ТекстЛога);
		Нов = Ложь;
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
	Если  ЗаказНарядВзятВРаботу() Тогда 
		Для каждого Строка	 из Объект.Работы Цикл
			Строка.ВРаботе = Истина;
		КонецЦикла;
		
		Для каждого Строка Из Объект.Товары Цикл
			Строка.ВРаботе = Истина;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры



&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьДобавленныеКолонкиСервер();
КонецПроцедуры


&НаКлиенте
Процедура ПриПовторномОткрытии()
	Прочитать();
КонецПроцедуры




&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПоступлениеЗапчастей") Тогда
		ИмяТабличнойЧасти = ?(Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница = Элементы.ГруппаМатериалы, "Материалы", "Товары");	
		ЗаполнитьПоПоступлениюСервер(ВыбранноеЗначение, ИмяТабличнойЧасти);
		
		ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
		ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ИндКод") Тогда
		
		ИмяТабличнойЧасти = ?(Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница = Элементы.ГруппаМатериалы, "Материалы", "Товары");	
		Элементы[ИмяТабличнойЧасти].ТекущиеДанные.Партия = ВыбранноеЗначение;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ТоварыПартияПриИзменении(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписьЗП()
	Для каждого стр из Объект.Работы Цикл
		Если НЕ стр.Работа.НЕрассчёт Тогда//<> Справочники.АвтоРаботы.НайтиПоКоду("000000293") тогда
			стр.СуммаЗп = стр.суммаВсего*0.4;
		Иначе
			стр.СуммаЗп = 0;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция УдалитьБонусыКладовПриУдоленСтроки(Строка)
	СтрокаУдаления = Строка; 
	
	МестоРаботыННКод			= "000000003"; 
	СкладНН 					= "000000002";
	КоличествоКладовщиковНН 	= 0;
				
	МестоРаботыМСККод			= "000000002";
	СкладМСК					= "000000005";
	КоличествоКладовщиковМСК 	= 0;
	
	МестоРаботыЕКБКод			= "000000004";
	СкладЕКБ					= "000000008";
	КоличествоКладовщиковЕКБ 	= 0;
	
Для Каждого Сотрудник ИЗ Объект.Ответственные Цикл 
	Если Сотрудник.Роль = Перечисления.дт_РолиВПродаже.Получить(2)  Тогда
		СтрокаМестоРаботы =  ВернутьМестоРаботыпользователя(Сотрудник.Сотрудник); 
		Если  СтрокаМестоРаботы = МестоРаботыННКод Тогда  		
			КоличествоКладовщиковНН = КоличествоКладовщиковНН +1; 		
		КонецЕсли;
		Если  СтрокаМестоРаботы = МестоРаботыМСККод Тогда  		
			КоличествоКладовщиковМСК = КоличествоКладовщиковМСК +1; 		
		КонецЕсли;
		Если  СтрокаМестоРаботы = МестоРаботыЕКБКод Тогда  		
			КоличествоКладовщиковЕКБ = КоличествоКладовщиковЕКБ +1; 		
		КонецЕсли;
	КонецЕсли; 
	
КонецЦикла; 

Для Каждого СтрокаТЧ Из Объект.Ответственные Цикл
	
	Если СтрокаТЧ.Роль = Перечисления.дт_РолиВПродаже.Получить(2)  Тогда
	
	СтрокаМестоРаботы =  ВернутьМестоРаботыпользователя(СтрокаТЧ.Сотрудник); 
		
		Если СтрокаМестоРаботы = МестоРаботыННКод  И СтрокаУдаления.Склад.Код = СкладНН И Месяц(ТекущаяДата()) > Месяц(СтрокаУдаления.ДатаУстановки) Тогда
			ЗаписьВРегистреСведений 			= РегистрыСведений.БонусыСотрудниковОтПродажи.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.Период 		= ТекущаяДата();
			ЗаписьВРегистреСведений.Сотрудник 	= СтрокаТЧ.Сотрудник;
			ЗаписьВРегистреСведений.Сумма 		=  (0 - (СтрокаУдаления.СуммаВсего / КоличествоКладовщиковНН));
			ЗаписьВРегистреСведений.ДокументРег = Объект.ссылка;
			ЗаписьВРегистреСведений.Продажа 	= Объект.ссылка;
			ЗаписьВРегистреСведений.Роль 		= Справочники.ДолжностиДляУК.НайтиПоКоду("000000003"); //Кладовщик
			ЗаписьВРегистреСведений.Бонус 		= ( 0 - (СтрокаУдаления.СуммаВсего / КоличествоКладовщиковНН* 0.005));
			ЗаписьВРегистреСведений.ФлагЗащитаОтУдаленияЗаписи = ИСТИНА; 
			ЗаписьВРегистреСведений.Записать();
		КонецЕсли;
		
		Если СтрокаМестоРаботы = МестоРаботыМСККод И СтрокаУдаления.Склад.Код = СкладМСК И Месяц(ТекущаяДата()) > Месяц(СтрокаУдаления.ДатаУстановки) Тогда
			ЗаписьВРегистреСведений 			= РегистрыСведений.БонусыСотрудниковОтПродажи.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.Период 		= ТекущаяДата();
			ЗаписьВРегистреСведений.Сотрудник 	= СтрокаТЧ.Сотрудник;
			ЗаписьВРегистреСведений.Сумма 		= ( 0 - (СтрокаУдаления.СуммаВсего / КоличествоКладовщиковМСК));
			ЗаписьВРегистреСведений.ДокументРег = Объект.ссылка;
			ЗаписьВРегистреСведений.Продажа 	= Объект.ссылка;
			ЗаписьВРегистреСведений.Роль 		= Справочники.ДолжностиДляУК.НайтиПоКоду("000000003"); //Кладовщик
			ЗаписьВРегистреСведений.Бонус 		= ( 0 - (СтрокаУдаления.СуммаВсего / КоличествоКладовщиковМСК* 0.005));
			ЗаписьВРегистреСведений.ФлагЗащитаОтУдаленияЗаписи = ИСТИНА; 
			ЗаписьВРегистреСведений.Записать();
		КонецЕсли;

		Если СтрокаМестоРаботы = МестоРаботыЕКБКод  И СтрокаУдаления.Склад.Код = СкладЕКБ И Месяц(ТекущаяДата()) > Месяц(СтрокаУдаления.ДатаУстановки) Тогда
			ЗаписьВРегистреСведений 			= РегистрыСведений.БонусыСотрудниковОтПродажи.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.Период 		= ТекущаяДата();
			ЗаписьВРегистреСведений.Сотрудник 	= СтрокаТЧ.Сотрудник;
			ЗаписьВРегистреСведений.Сумма 		= (0 - (СтрокаУдаления.СуммаВсего / КоличествоКладовщиковЕКБ));
			ЗаписьВРегистреСведений.ДокументРег = Объект.ссылка;
			ЗаписьВРегистреСведений.Продажа 	= Объект.ссылка;
			ЗаписьВРегистреСведений.Роль 		= Справочники.ДолжностиДляУК.НайтиПоКоду("000000003"); //Кладовщик
			ЗаписьВРегистреСведений.Бонус 		= ( 0 - (СтрокаУдаления.СуммаВсего / КоличествоКладовщиковЕКБ* 0.005));
			ЗаписьВРегистреСведений.ФлагЗащитаОтУдаленияЗаписи = ИСТИНА; 
			ЗаписьВРегистреСведений.Записать();
		КонецЕсли;
	КонецЕсли;
КонецЦикла;
	
	ЗаписьЛога("Сотрудник №" + Пользователи.ТекущийПользователь().Наименование + " Удолил строку " + СтрокаУдаления.Номенклатура + " - " + СтрокаУдаления.Партия);
 
КонецФункции

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Флаг = ЭтотОбъект.Записать(); 
	Если Флаг Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Документ сохранен!";
		Сообщение.Сообщить();
	Иначе 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Документ не сохранен!";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьМестоРаботыпользователя(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.МестоРаботы.Код КАК Код 
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Пользователь.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

Если Выборка.Код <> Неопределено Тогда  
	Возврат Выборка.Код; 
Иначе 
	Возврат неопределено; 
КонецЕсли; 

КонецФункции
&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Строка = Новый Структура; 
	Строка.Вставить("СуммаВсего", Элементы.Товары.ТекущиеДанные.СуммаВсего);
	Строка.Вставить("ДатаУстановки", Элементы.Товары.ТекущиеДанные.ДатаУстановки);
	Строка.Вставить("Номенклатура", Элементы.Товары.ТекущиеДанные.Номенклатура);
	Строка.Вставить("Партия", Элементы.Товары.ТекущиеДанные.Партия);
	Строка.Вставить("Склад", Элементы.Товары.ТекущиеДанные.Склад);

УдалитьБонусыКладовПриУдоленСтроки(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр, СтрокаТаблицы)

	Если Объект.ЗаблокироватьТЧТовары Тогда
		Отказ = Истина;
	КонецЕсли;
	
	/// Комлев 16/9/24 +++
	Отказ = Истина;
	НоваяСтрока = Объект.Товары.Добавить();
	НоваяСтрока.Состояние = СтатусТовара();
	ЗаписьЛога("Добавил строку товара №" + Число(НоваяСтрока.НомерСтроки));
	/// Комлев 16/9/24 ---	

КонецПроцедуры


&НаСервереБезКонтекста
Функция  СтатусТовара()
Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Ожидание;
Возврат Состояние;
КонецФункции

	 
&НаКлиенте 
Процедура ТоварыАвтомобильПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке товара №" + ТекДанные.НомерСтроки + " машину на " + ТекДанные.Автомобиль);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры


#КонецОбласти



#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Склад = Объект.Склад;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.Материалы Цикл
		СтрокаТаблицы.Склад = Объект.Склад;
	КонецЦикла;
	
	//ОбновитьДобавленныеКолонки();
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил склад на " + Объект.Склад);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры




&НаКлиенте
Процедура РекомендацииПриИзменении(Элемент)
	ОбновитьПризнакРекомендации(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	//	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен") Тогда
	//		Объект.ДатаОкончания = ТекущаяДата();
	//		Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
	//			Объект.ДатаНачала = Объект.ДатаОкончания;
	//		КонецЕсли;
	//		
	//		СформироватьУПД(Неопределено);
	//		
	//	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.ВРаботе") Тогда
	//		Объект.ДатаНачала = ТекущаяДата();
	//		Объект.ДатаОкончания = '00010101';
	//		Объект.НомерУПД = "";
	//	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Предварительный") Тогда	
	//		Объект.ДатаНачала = '00010101';
	//		Объект.ДатаОкончания = '00010101';
	//		Объект.НомерУПД = "";
	//	КонецЕсли;
	//	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	СостояниеПриИзмененииНаСервере();
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил состояние на " + Объект.Состояние);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
	Если  ЗаказНарядВзятВРаботу() Тогда 
		Для каждого Строка	 из Объект.Работы Цикл
			Строка.ВРаботе = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СостояниеПриИзмененииНаСервере()
	
	///+ГомзМА 04.10.2023
	Если Объект.Состояние = Перечисления.СостоянияЗаказНаряда.Выполнен Тогда
		Объект.ДатаОкончания = ТекущаяДатаСеанса();
	КонецЕсли;
	///-ГомзМА 04.10.2023
	
	
КонецПроцедуры



&НаКлиенте
Процедура ТипНаценкиПриИзменении(Элемент)
	
	Для каждого СтрокаТаблицы Из Объект.Работы Цикл
		
		РаботаПриИзменении(СтрокаТаблицы);
		
	КонецЦикла;

	Объект.СкидкаМенеджер = 0; 
	Объект.НаценкаМенеджер = 0; 
	///+ГомзМА 26.06.2023
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		ТоварыПриИзменении(СтрокаТаблицы);
		
	КонецЦикла;
	///-ГомзМА 26.06.2023
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил тип оплаты на " + Объект.ТипНаценки);
	КонецЕсли;
	///-ГомзМА 22.12.2023

	//++Мазин 13.05.24
	
//	ПересчетТаблицТоварыИРаботаСкидкаНаценка ();
	
	//--Мазин 13.05.24		
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОбращенияПриИзменении(Элемент)
	ОбновитьПризнакПричинаОбращения(ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен") Тогда
		Объект.ДатаУПД = Объект.ДатаОкончания;
	КонецЕсли;
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил конец периода на " + Объект.ДатаОкончания);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьУПД(Команда)
	
	СформироватьУПДНаСервере();
	ПоказатьОповещениеПользователя("УПД сформирован", , "Номер УПД заполнен");		
	
	Подключаемый_ОбновитьКоманды();	
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Сформировал УПД");
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
	// КомлевАА 05/12/24 +++ 
	Объект.Заблокирован = Истина;
	ЗаблокироватьРазблокироватьЗаказНаряд();
	ЭтотОбъект.Записать();
	/// Комлев АА 05/12/24 ---
КонецПроцедуры

Процедура ЗаблокироватьРазблокироватьЗаказНаряд()
	// Комлев АА 05/12/24 +++
	Если Объект.Заблокирован = Истина Тогда
		Элементы.ГруппаНомерИДата.ТолькоПросмотр = Истина;
		Элементы.ГруппаШапка.ТолькоПросмотр = Истина;
		Элементы.ГруппаПричинаОбращения.ТолькоПросмотр = Истина;
		Элементы.ГруппаТабличныеЧасти.ТолькоПросмотр = Истина;
		Элементы.ГруппаРекомендации.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПодвал.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ГруппаНомерИДата.ТолькоПросмотр = Ложь;
		Элементы.ГруппаШапка.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПричинаОбращения.ТолькоПросмотр = Ложь;
		Элементы.ГруппаТабличныеЧасти.ТолькоПросмотр = Ложь;
		Элементы.ГруппаРекомендации.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПодвал.ТолькоПросмотр = Ложь;
	КонецЕсли;

	ТекушийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ТекушийПользователь.Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава")) Или ТекушийПользователь.ПолноеИмя
		= "Вадяева Дарья Викторовна" Или ТекушийПользователь.Роли.Содержит(
		Метаданные.Роли.Найти("ПолныеПрава")) Тогда

		Элементы.Заблокирован.Доступность			 = Истина;
		Элементы.ДатаБлокировкиЗаказНаряда.Доступность	 = Истина; 
	КонецЕсли;
	// Комлев АА 05/12/24 ---
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокированПриИзменении(Элемент)
	ЗаблокироватьРазблокироватьЗаказНаряд();
	// +++ МазинЕС (ЗакНаряд считаем закрытой когда ее заблокировали, дата блокировки становится основным периодом)
	Если НЕ ЗначениеЗаполнено(объект.ДатаБлокировкиЗаказНаряда) Тогда 	
		объект.ДатаБлокировкиЗаказНаряда = ТекущаяДата(); 
	КонецЕсли; 
	// --- МазинЕС (ЗакНаряд считаем закрытой когда ее заблокировали, дата блокировки становится основным периодом)
КонецПроцедуры


&НаСервере
Процедура СформироватьУПДНаСервере()
	
	Объект.ДатаУПД = Объект.ДатаОкончания;
	//Если НЕ ЗначениеЗаполнено(Объект.ДатаУПД) Тогда
	//	Объект.ДатаУПД = ТекущаяДата();
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерУПД) ИЛИ НЕ дт_Нумерация.НомерУникален(Объект, Истина, Истина, Ложь, "НомерУПД") Тогда
		
		ПрефиксОрганизации = дт_ОбщегоНазначения.ПрефиксОрганизации(Объект.Организация);
		
		НомерУПД1 = дт_Нумерация.СвободныйНомерДокумента(
		"ПродажаЗапчастей", 
		Объект.ДатаУПД, 
		ПрефиксОрганизации,
		"НомерУПД"
		);
		
		НомерУПД2 = дт_Нумерация.СвободныйНомерДокумента(
		Объект.Ссылка.Метаданные().Имя, 
		Объект.ДатаУПД, 
		ПрефиксОрганизации,
		"НомерУПД",
		Объект.Ссылка
		);
		
		Объект.НомерУПД	= Макс(НомерУПД1, НомерУПД2);	
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьПартииПоОстаткам(Команда)
	
	Если Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ИмяТабличнойЧасти = СтрЗаменить(Элементы.ГруппаТабличныеЧасти.ТекущаяСтраница.Имя, "Группа", "");
	
	
	Если НЕ ПроверитьЗаполнениеВФорме(ИмяТабличнойЧасти) Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьПартииПоОстаткамНаСервере(ИмяТабличнойЧасти);
	
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьПартииПоОстаткамНаСервере(ИмяТабличнойЧасти)
	
	
	Источник = Объект[ИмяТабличнойЧасти].Выгрузить(); //, "НомерСтроки,Номенклатура,Количество,Склад");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Источник.НомерСтроки КАК НомерСтроки,
	|	Источник.Номенклатура КАК Номенклатура,
	|	Источник.Количество КАК Количество,
	|	Источник.Склад КАК Склад,
	|	Источник.Автомобиль КАК Автомобиль
	|ПОМЕСТИТЬ ВТ_Источник
	|ИЗ
	|	&Источник КАК Источник";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Запрос.Выполнить();
	
	дт_Склад.ЗаполнитьПартииПоОстаткамНаСервере(Объект,
	ИмяТабличнойЧасти,
	"Склад",
	Новый Граница(ПолучитьДатуОстатков(ЭтаФорма), ВидГраницы.Исключая),
	Запрос.МенеджерВременныхТаблиц
	);
	
КонецПроцедуры // ЗаполнитьПартииПоОстаткамНаСервере()


&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)
	ПараметрыОткрытия = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Документ.ПоступлениеЗапчастей.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоПоступлениюСервер(ПоступлениеСсылка, ИмяТабличнойЧасти)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Товар КАК Номенклатура,
	|	Товары.Колво КАК Количество,
	|	ИндКод.Ссылка КАК Партия,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Ссылка.Машина КАК Автомобиль
	|ПОМЕСТИТЬ ВТ_ТоварыПартии
	|ИЗ
	|	Документ.ПоступлениеЗапчастей.Таблица КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИндКод КАК ИндКод
	|		ПО Товары.Товар = ИндКод.Владелец
	|			И (ИндКод.ДокументПоступления = &Ссылка)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыПартии.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыПартии.Количество КАК Количество,
	|	ВТ_ТоварыПартии.Автомобиль КАК Автомобиль,
	|	ВТ_ТоварыПартии.Партия КАК Партия,
	|	ЕСТЬNULL(дт_ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ВТ_ТоварыПартии.Количество * ЕСТЬNULL(дт_ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Сумма
	|ИЗ
	|	ВТ_ТоварыПартии КАК ВТ_ТоварыПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дт_ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ТипЦен = &ТипЦен
	|					И (Номенклатура, Партия) В
	|						(ВЫБРАТЬ
	|							ВТ_ТоварыПартии.Номенклатура,
	|							ВТ_ТоварыПартии.Партия
	|						ИЗ
	|							ВТ_ТоварыПартии)) КАК дт_ЦеныНоменклатурыСрезПоследних
	|		ПО ВТ_ТоварыПартии.Номенклатура = дт_ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВТ_ТоварыПартии.Партия = дт_ЦеныНоменклатурыСрезПоследних.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыПартии.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ПоступлениеСсылка);
	Запрос.УстановитьПараметр("ТипЦен", Справочники.ТипыЦен.Розничная);
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтроки(Объект, ИмяТабличнойЧасти, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьКоды(Команда)
	
	///+ГомзМА 09.08.2023
	ОО1 = Новый ОписаниеОповещения("ОбработкаОкончанияСканирования", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаСканироватьКоды",, ЭтаФорма,,,, ОО1);
	///-ГомзМА 09.08.2023
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПризнакПричинаОбращения(Форма)
	
	Форма.ПризнакПричинаОбращения = НЕ ПустаяСтрока(Форма.Объект.ПричинаОбращения)
	
КонецПроцедуры // ОбновитьПризнакПричинаОбращения()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ОбновитьПризнакПричинаОбращения(Форма);	
	ОбновитьПризнакРекомендации(Форма);	
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	УчитыватьВремя = Форма.ПолучитьФункциональнуюОпциюФормы("дт_УчитыватьВремяВыполненияРабот"); 
	
	РаботыВыполнены = Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен");
	
	//СкладЗаполненВШапке = ЗначениеЗаполнено(Объект.Склад);
	//РаботыНачаты = Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Предварительный");
	
	//Элементы.МатериалыСклад.Видимость = НЕ СкладЗаполненВШапке;
	//Элементы.ТоварыСклад.Видимость = НЕ СкладЗаполненВШапке;
	
	Элементы.ГруппаМатериалыЗаказчика.Видимость = Ложь;
	
	Элементы.ГруппаУПД.Видимость = РаботыВыполнены;//Форма.ЕстьУчетНДС;
	Элементы.ГруппаУПД.ТолькоПросмотр = Объект.ПометкаУдаления;
	
//	Элементы.РаботыЦена.ТолькоПросмотр = Истина;
	Элементы.РаботыСуммаНалог.ТолькоПросмотр = Истина;
	
	Элементы.ТоварыСуммаНалог.ТолькоПросмотр = Истина;
	Элементы.ТоварыСебестоимостьЕдиницы.Видимость = Ложь;
	Элементы.ТоварыВаловаяПрибыль.Видимость = Ложь;
	
	Элементы.РаботыСуммаВсего.ТолькоПросмотр = НЕ Форма.ДоступноИзменениеЦеныРаботы;
	
	Элементы.РаботыНормочас.Видимость = УчитыватьВремя;
	Элементы.РаботыГруппаВремя.Видимость = УчитыватьВремя;
	Элементы.ИсполнителиВремяФакт.Видимость = УчитыватьВремя;
	Элементы.ИсполнителиВремяФактСек.Видимость = УчитыватьВремя;
	Элементы.ГруппаВремяИтого.Видимость = УчитыватьВремя;
	
КонецПроцедуры



&НаКлиенте
Процедура УправлениеФормойКлиент()
	
	ШрифтРубляУстановлен = дт_ШрифтРубляКлиентПовтИсп.ШрифтУстановлен();
	Элементы.ДекорацияРубль.Видимость = ШрифтРубляУстановлен;
	Элементы.ДекорацияРубльАльт.Видимость = НЕ ШрифтРубляУстановлен;
	
КонецПроцедуры // УправлениеФормойКлиент()


&НаСервере
Функция ВключитьРасходникиВСтоимость()
	
	///+ГомзМА 11.05.2023
	Если Объект.ВклВыклРасходникиВСтоимость = Перечисления.ВклВыклРасходниковВСтоимость.ВключитьРасходникиВСтоимость Тогда
		ВключитьВСтоимость = Истина;
	ИначеЕсли Объект.ВклВыклРасходникиВСтоимость = Перечисления.ВклВыклРасходниковВСтоимость.НеВключатьРасходникиВСтоимость Тогда
		ВключитьВСтоимость = Ложь;
	КонецЕсли;
	
	Возврат ВключитьВСтоимость;
	///-ГомзМА 11.05.2023
	
КонецФункции



&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммуДокумента(Форма, ВключитьВСтоимость = Истина)
	

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	СуммаРаботы = Объект.Работы.Итог("СуммаВсего");
	//СуммаТовары = Объект.Товары.Итог("СуммаВсего");
	СуммаТовары = 0;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если НЕ СтрокаТЧ.Отменено Тогда
			СуммаТовары = СуммаТовары + СтрокаТЧ.СуммаВсего;
		КонецЕсли;
	КонецЦикла;
	
	СуммаТМЦ 	= Объект.ТМЦ.Итог("Сумма");
	СуммаТоварыНаКомиссии = Объект.ТоварыНаКомиссии.Итог("СуммаВсего");
	СуммаБезТоваровНаКомиссии = СуммаРаботы + СуммаТовары;
	//СуммаВсего = СуммаБезТоваровНаКомиссии + СуммаТоварыНаКомиссии;
	ФорматСуммы = "ЧДЦ=2; ЧН=0; ЧГ=3,0";
	
	///+ГомзМА 11.05.2023
	//ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	
	Если ВключитьВСтоимость Тогда
		Форма.Элементы.СуммаДокумента.Заголовок = Формат(СуммаБезТоваровНаКомиссии + СуммаТМЦ, ФорматСуммы);
	Иначе
		Форма.Элементы.СуммаДокумента.Заголовок = Формат(СуммаБезТоваровНаКомиссии, ФорматСуммы);
	КонецЕсли;
	///-ГомзМА 11.05.2023
	
	Элементы.ДекорацияВремяПлан.Заголовок = СтрШаблон("Время нормированное %1", 
	дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(Объект.Работы.Итог("ВремяПлан"))
	);
	
	Элементы.ДекорацияВремяФакт.Заголовок = СтрШаблон("Время фактическое %1", 
	дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(Объект.Работы.Итог("ВремяФакт"))
	);
	
	РаботыФОТ = Объект.Работы.Итог("ВремяПлан") * дт_АвтосервисВызовСервера.ПолучитьСтавкуПоРаботам(Объект.Дата);
	Элементы.ДекорацияРаботыФОТ.Заголовок = СтрШаблон("ФОТ: %1", Формат(РаботыФОТ, ФорматСуммы));	
КонецПроцедуры


 // ОбновитьСуммуДокумента()
&НаКлиенте
Процедура ОбработкаИзмененияСтроки1(ИмяТабличнойЧасти, Поле = Неопределено, ДанныеСтроки = Неопределено)
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = ?(ДанныеСтроки = Неопределено, Элементы[ИмяТабличнойЧасти].ТекущиеДанные, ДанныеСтроки);
	Если Поле = "Нормочас" Тогда
		ТекДанные.Нормочас = дт_ОбщегоНазначенияКлиентСервер.ВремяСтрВЧасы(ТекДанные.НормочасСек);
		ТекДанные.ВремяПлан = ТекДанные.Нормочас * ТекДанные.Количество;
	КонецЕсли;
	///дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтроки(Объект, ИмяТабличнойЧасти, ТекДанные, Поле);
	
	Если ИмяТабличнойЧасти = "Работы" Тогда
		ТекДанные.НормочасСек = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(ТекДанные.Нормочас);
		ТекДанные.ВремяПланСек = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(ТекДанные.ВремяПлан);
		дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтроки(Объект, ИмяТабличнойЧасти, ТекДанные, Поле);
		
	КонецЕсли;

	Если Объект.Дата > Дата("20240110") и ИмяТабличнойЧасти = "Товары" Тогда
	Иначе
			Если (Объект.СкидкаМенеджер = 0 И Объект.НаценкаМенеджер = 0) Или (Объект.НаценкаМенеджер = Неопределено
				И Объект.СкидкаМенеджер = Неопределено) Тогда
				дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтроки(Объект, ИмяТабличнойЧасти, ТекДанные, Поле);
			КонецЕсли; 
			
	КонецЕсли;
		
		
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	
КонецПроцедуры
// ОбработкаИзмененияСтроки()
&НаКлиенте
Процедура ОбработкаИзмененияСтроки(ИмяТабличнойЧасти, Поле = Неопределено, ДанныеСтроки = Неопределено)
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = ?(ДанныеСтроки = Неопределено, Элементы[ИмяТабличнойЧасти].ТекущиеДанные, ДанныеСтроки);
	Если Поле = "Нормочас" Тогда
		ТекДанные.Нормочас = дт_ОбщегоНазначенияКлиентСервер.ВремяСтрВЧасы(ТекДанные.НормочасСек);
		ТекДанные.ВремяПлан = ТекДанные.Нормочас * ТекДанные.Количество;
	КонецЕсли;
	///дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтроки(Объект, ИмяТабличнойЧасти, ТекДанные, Поле);
	
	Если ИмяТабличнойЧасти = "Работы" Тогда
		ТекДанные.НормочасСек = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(ТекДанные.Нормочас);
		ТекДанные.ВремяПланСек = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(ТекДанные.ВремяПлан);
		дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтроки(Объект, ИмяТабличнойЧасти, ТекДанные, Поле);
//			//++Мазин
//			Если  (Объект.СкидкаМенеджер > 0  ИЛИ Объект.НаценкаМенеджер > 0)  Тогда
//			дт_АвтосервисКлиентСервер.ОбработкаИзмененияСтрокиСкидкаНаценка (Объект, ИмяТабличнойЧасти, ТекДанные, Поле);
//			КонецЕсли;
//			//--Мазин
	КонецЕсли;

	Если ИмяТабличнойЧасти = "Товары" И ТекДанные <> Неопределено Тогда
		Попытка
			ТекДанные.Сумма = ТекДанные.количество * ТекДанные.Цена;  
		Исключение
		КонецПопытки;
		
		Если Объект.ТипНаценки = ПроверкаНДС() Тогда

			ТекДанные.СуммаНалог = ТекДанные.Сумма * 0.2;
			ТекДанные.СуммаВсего = ТекДанные.Сумма + ТекДанные.СуммаНалог;
			
		
		//++Мазин 01-06-2024 // Окргулить сумму +++

		ИначеЕсли Объект.ТипНаценки = ПроверкаБезНДС() Тогда
			ТекДанные.СуммаНалог = ТекДанные.Сумма * 0.06;
			СуммаВсегоОкр = ТекДанные.Сумма + ТекДанные.СуммаНалог;
			ТекДанные.СуммаВсего = Окр(СуммаВсегоОкр);
		ИначеЕсли Объект.ТипНаценки = Наличка() ИЛИ Объект.ТипНаценки = ТипНаценкиПустой() Тогда
			Попытка
				ТекДанные.СуммаНалог = 0;
				СуммаВсегоОкр = ТекДанные.Сумма + ТекДанные.СуммаНалог;
				ТекДанные.СуммаВсего = Окр(СуммаВсегоОкр);
			Исключение
				П = Истина;
			КонецПопытки;
		Иначе
			
		КонецЕсли;
		
	КонецЕсли;
		// --Мазин 13_05_24 Добавил "ЕСЛИ"	
		
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	
КонецПроцедуры
// ОбработкаИзмененияСтроки()

Функция ТипНаценкиПустой()
	Возврат Справочники.ТипыНаценок.ПустаяСсылка();
КонецФункции

функция ПроверкаНДС()  
	Возврат Справочники.ТипыНаценок.НайтиПоКоду("000000002");	
Конецфункции

//++Мазин 
Функция ПроверкаБезНДС()
Возврат Справочники.ТипыНаценок.НайтиПоКоду("000000001");	
КонецФункции

Функция Наличка()
Возврат Справочники.ТипыНаценок.НайтиПоКоду("000000003");	
КонецФункции
//--Мазин 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	Если дт_Нумерация.ГодИзменен(Объект.Ссылка, Объект.Дата) Тогда
		Объект.Номер = "";
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзмененииСервер()



Процедура ЗаписьЛога(Событие)
	
	///+ГомзМА 22.12.2023
	ТекстЛога =  "----------------------------------------------------" + Символы.ПС + ТекущаяДата() + Символы.ПС + Пользователи.ТекущийПользователь() + Символы.ПС +" "+ Событие + Символы.ПС ;
	
	Запись = РегистрыСведений.ЛогЗаказНарядов.СоздатьМенеджерЗаписи();
	Запись.ЗаказНаряд	 = Объект.Ссылка;
	Запись.Дата 		 = ТекущаяДата();
	Запись.Менеджер	     = Пользователи.ТекущийПользователь();
	Запись.Текст         = ТекстЛога;
	Запись.Записать();
	ВыводЛога();
	///-ГомзМА 22.12.2023
	
КонецПроцедуры



Процедура ВыводЛога()
	
	///+ГомзМА 22.12.2023
	НаборЛогов = "";
	Запрос = Новый запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ЛогЗаказНарядов.Текст КАК Текст
	|ИЗ
	|	РегистрСведений.ЛогЗаказНарядов КАК ЛогЗаказНарядов
	|ГДЕ
	|	ЛогЗаказНарядов.ЗаказНаряд = &ЗаказНаряд";
	Запрос.УстановитьПараметр("ЗаказНаряд", Объект.Ссылка);
	
	Логи = Запрос.Выполнить().Выбрать();
	
	Пока Логи.Следующий() Цикл
		НаборЛогов = НаборЛогов + Логи.Текст;
	КонецЦикла;
	Лог = НаборЛогов;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаСервере
Функция ЗаказНарядВзятВРаботу()
	
	///+ГомзМА 06.05.2024
	Если Объект.Состояние = Перечисления.СостоянияЗаказНаряда.ВРаботе Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 06.05.2024
	
КонецФункции
#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Товары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.Склад = Объект.Склад;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ДанныеЗаполнения = Новый Структура("МестоХранения,Цена,Номенклатура,КоличествоОстаток,НомерСтроки");
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Дата",			Объект.Дата);
	//ДанныеЗаполнения.Вставить("Склад",			Объект.Склад);
	//ДанныеЗаполнения.Вставить("Партия",			Неопределено);
	
	//ТоварыНоменклатураПриИзмененииНаСервере(ДанныеЗаполнения);
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеЗаполнения, , "Номенклатура");
	КонецЕсли;
	
	//бработкаИзмененияСтроки("Товары");
	//элементы.Товары.ТекущиеДанные.Цена = ВозвратЦены(элементы.Товары.ТекущиеДанные.Номенклатура);
	
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
//	ПересчетТаблицТоварыИРаботаСкидкаНаценка (Истина);
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	ОбработкаСтатусаТовара();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСтатусаТовара()
ТекДанные =  Элементы.Товары.ТекущиеДанные;
	
КонецПроцедуры



&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеЗаполнения)
	
	ДанныеЗаполнения.МестоХранения = дт_АдресноеХранение.ПолучитьМестоХранения(ДанныеЗаполнения);
	
	дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(ДанныеЗаполнения, ПредопределенноеЗначение("Справочник.ТипыЦен.Рекомендованная"));
	
	ЗаполнитьПродажиОстатки(ДанныеЗаполнения);
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПродажиОстатки(ДанныеЗаполнения,строка=неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.НомерСтроки КАК НомерСтроки,
	|	Т.Номенклатура,
	|	ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) КАК КоличествоПродано,
	|	ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 0) КАК СуммаОборот,
	|	ЕСТЬNULL(РегистрНакопления1Остатки.КолвоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	Т КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки(, Склад = &Склад
	|		И Товар В
	|			(ВЫБРАТЬ
	|				Т.Номенклатура
	|			ИЗ
	|				Т)) КАК РегистрНакопления1Остатки
	|		ПО Т.Номенклатура = РегистрНакопления1Остатки.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(,,, Номенклатура В
	|			(ВЫБРАТЬ
	|				Т.Номенклатура
	|			ИЗ
	|				Т)) КАК ПродажиОбороты
	|		ПО ПродажиОбороты.Номенклатура = Т.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ЗаполнениеДокумента = ТипЗнч(ДанныеЗаполнения) = Тип("ДанныеФормыСтруктура");
	ЗаполнениеДокумента2 = ТипЗнч(ДанныеЗаполнения)= Тип("Структура");
	Если ЗаполнениеДокумента Тогда
		Товары = ДанныеЗаполнения.Товары.Выгрузить();
	Иначе
		
		Товары = Новый ТаблицаЗначений();
		Товары.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(4));
		Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ДанныеЗаполнения);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("Склад", ДанныеЗаполнения.Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗаполнениеДокумента  Тогда
			СтрокаТовары = ДанныеЗаполнения.Товары[Выборка.НомерСтроки - 1];
			//СтрокаТовары.КоличествоПродано = Выборка.КоличествоПродано;
			СтрокаТовары.КоличествоОстаток = Выборка.КоличествоОстаток;
		ИначеЕсли ЗаполнениеДокумента2 Тогда
			Попытка
				//Строка.КоличествоПродано = Выборка.КоличествоПродано;
				Строка.КоличествоОстаток = Выборка.КоличествоОстаток;
			Исключение
				//ДанныеЗаполнения.КоличествоПродано = Выборка.КоличествоПродано; 	
				ДанныеЗаполнения.КоличествоОстаток = Выборка.КоличествоОстаток;
			КонецПопытки;
		Иначе
			
			//ДанныеЗаполнения.КоличествоПродано = Выборка.КоличествоПродано; 	
			ДанныеЗаполнения.КоличествоОстаток = Выборка.КоличествоОстаток;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ОбработкаИзмененияСтроки("Товары");
	Элементы.ДляБланкаОтчёта.Заголовок = "Для бланка отчёта "+ "("+КоличествоДеталей+")";
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке товара №" + ТекДанные.НомерСтроки + " количество на " + ТекДанные.Количество);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары");
	ОбновитьПоказателиТоваров();
	Объект.СкидкаМенеджер = 0; 
	Объект.НаценкаМенеджер = 0; 
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке товара №" + ТекДанные.НомерСтроки + " цену на " + ТекДанные.Цена);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаСуммаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары", "СкидкаСумма");
	ОбновитьПоказателиТоваров();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаПроцентПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары", "СкидкаПроцент");
	ОбновитьПоказателиТоваров();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Товары", "Сумма");
	ОбновитьПоказателиТоваров();
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке товара №" + ТекДанные.НомерСтроки + " сумму на " + ТекДанные.Сумма);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
//	ОбработкаИзмененияСтроки("Товары", "СуммаВсего");
//	ОбновитьПоказателиТоваров();
	
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Объект.ТипНаценки = ПроверкаБезНДС() Тогда 
		ТекСтрока.СуммаНалог 				= ТекСтрока.СуммаВсего * 0.06 / 1.06;
			Если ТекСтрока.Количество = 0 ИЛИ ТекСтрока.Количество = Неопределено Тогда 
				ТекСтрока.Количество = 1; 
			КонецЕсли; 
		ТекСтрока.Цена		= ТекСтрока.СуммаВсего / (ТекСтрока.Количество * 1.06);
		
	ИначеЕсли Объект.ТипНаценки = ПроверкаНДС()  Тогда
		ТекСтрока.СуммаНалог 				= ТекСтрока.СуммаВсего * 0.2 / 1.2;
			Если ТекСтрока.Количество = 0 ИЛИ ТекСтрока.Количество = Неопределено Тогда 
				ТекСтрока.Количество = 1; 
			КонецЕсли; 
		ТекСтрока.Цена		= ТекСтрока.СуммаВсего / (ТекСтрока.Количество * 1.2); 
	иначе 
		ТекСтрока.СуммаНалог 				= 0	;
		ТекСтрока.Сумма = ТекСтрока.СуммаВсего;
		ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Количество;
	КонецЕсли;
	Объект.СкидкаМенеджер = 0; 
	Объект.НаценкаМенеджер = 0; 
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке товара №" + ТекДанные.НомерСтроки + " сумму на " + ТекДанные.СуммаВсего);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьТипыЦен()
	ТипыЦен = Справочники.ТипыЦен.НайтиПоКоду("000000004");
	Если ЗначениеЗаполнено(ТипыЦен) Тогда 
		Возврат ТипыЦен; 
	Иначе 
		Возврат Неопределено;
	КонецЕсли;  
КонецФункции
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.Товары.ТекущиеДанные);
//	СтруктураСтроки.Вставить("Дата", Объект.Дата);
	СтруктураСтроки.Вставить("Дата", ТекущаяДата());
	
	дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(СтруктураСтроки, ПолучитьТипыЦен());
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, СтруктураСтроки,, "Номенклатура");
	
	ОбработкаИзмененияСтроки("Товары");
	
	ОбновитьПоказателиТоваров(Истина);	
	
	///+ГомзМА 11.05.2023
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПодставитьЗначенияТЧ(ТекСтрока.Состояние);
	///-ГомзМА 11.05.2023
	
	ВключитьРасходникиВСтоимость();
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке товара №" + ТекДанные.НомерСтроки + " номенклатуру на " + ТекДанные.Номенклатура);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	СкладНН  = ПолучитьСклады().СкладНН;
	СкладМСК  = ПолучитьСклады().СкладМСК;	
	СкладЕКБ  = ПолучитьСклады().СкладЕКБ;
	ТекДанные.КоличествоОстаток = ПолучитьОстаткиПоСкладам(ТекДанные.Номенклатура, СкладНН, Объект.Дата);
	ТекДанные.ОстаткиМСК 	= ПолучитьОстаткиПоСкладам(ТекДанные.Номенклатура, СкладМСК, Объект.Дата);
	ТекДанные.ОстаткиЕКБ 	= ПолучитьОстаткиПоСкладам(ТекДанные.Номенклатура, СкладЕКБ, Объект.Дата);
	ТекДанные.Количество 	= 1;
	ТекДанные.Состояние 	= ПолучитьСтатусПланово(); // для WT10 "Ожидание" для прил склад "Планово"  
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьСтатусПланово()
	
	Статус = Перечисления.СтатусыТовараВЗаказНаряде.Планово; 
	
	Возврат Статус; 	
КонецФункции
Функция ПолучитьСклады()
	СкладНН  = Справочники.Склады.НайтиПоКоду("000000002");
	СкладМСК  = Справочники.Склады.НайтиПоКоду("000000005");	
	СкладЕКБ  = Справочники.Склады.НайтиПоКоду("000000008");
	
	СтруктураСклады = Новый Структура;
	СтруктураСклады.Вставить("СкладНН", СкладНН);
	СтруктураСклады.Вставить("СкладМСК", СкладМСК);
	СтруктураСклады.Вставить("СкладЕКБ", СкладЕКБ);
	
	Возврат СтруктураСклады;
КонецФункции

Функция ПолучитьОстаткиПоСкладам(Товар, Склад, ДатаДокумента)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РегистрНакопления1Остатки.КолвоОстаток КАК Остаток
		|ИЗ
		|	РегистрНакопления.РегистрНакопления1.Остатки(&ДатаДокумента, Товар = &Товар
		|	И Склад = &Склад) КАК РегистрНакопления1Остатки";
	
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Остаток;
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПартияНачалоВыбора("Товары", ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры


&НаСервере
Функция ЗаполнитьЦенуУПартии(Партия)

	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИндНомер.индкод КАК ИндКод,
		|	ИндНомер.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ИндНомер КАК ИндНомер
		|ГДЕ
		|	ИндНомер.индкод = &индкод";
	
	Запрос.УстановитьПараметр("индкод", Партия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Цена; 
	КонецЦикла;
	 
	Если  ВыборкаДетальныеЗаписи.Количество() = 0 Тогда 
		Возврат Неопределено; 
	КонецЕсли; 
	
	
КонецФункции


&НаКлиенте
Процедура ТоварыПартияПриИзменении(Элемент)
	
	//СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
	//ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.Товары.ТекущиеДанные);
	//СтруктураСтроки.Вставить("Дата", Объект.Дата);
	
	//дт_ЦенообразованиеВызовСервера.НоменклатураПриИзменении(СтруктураСтроки);
	//ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, СтруктураСтроки,, "Номенклатура,Партия");
	//
	//ОбработкаИзмененияСтроки("Товары");
	//ОбновитьПоказателиТоваров(Истина);
	
	Если НЕ ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Цена) Тогда
		Элементы.Товары.ТекущиеДанные.Цена = ЗаполнитьЦенуУПартии(Элементы.Товары.ТекущиеДанные.Партия); 
	КонецЕсли;
		
	ПартияТЧ = Элементы.Товары.ТекущиеДанные; 
	Если ПартияТЧ = Неопределено Тогда 
		Возврат; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Партия) Тогда
	ЗаполнитьАвтомобиль();
	Элементы.Товары.ТекущиеДанные.состояние = ВыдачаТовара(Элементы.Товары.ТекущиеДанные.Партия);
	Элементы.Товары.ТекущиеДанные.ДатаУстановки = Дата('00010101'); 
	КонецЕсли;
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если Не Объект.Ссылка.Пустая() Тогда
		ЗаписьЛога("Изменил в строке товара №" + ТекДанные.НомерСтроки + " партию на " + ТекДанные.Партия);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
	/// Комлев 9/9/24 +++
	ТекДанные  = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Партия) Тогда
	Попытка
		ТекДанные.Номенклатура = ПолучитьНоменклатуруПоПартии(ТекДанные.Партия);
	Исключение
		п  = Истина;
	КонецПопытки;
	КонецЕсли;
	/// Комлев 9/9/24 --- 
	
	Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Партия) Тогда
	///+ТатарМА 23.09.2024
	ЭтоДетальКлиента = ПроверитьНаДетальКлиента(ТекДанные.Партия);
	ТекДанные.КлиентскаяДеталь = ЭтоДетальКлиента;
	///-ТатарМА 23.09.2024
	
	///  Комлев АА 17/12/24++++
	ТекДанные.Склад = ПолучитьСкладПоПартии(ТекДанные.Партия);
	
	///  Комлев АА 17/12/24---
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСкладПоПартии(Партия)
	///  Комлев АА 17/12/24 ++++
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндНомер.Стеллаж.Владелец.Ссылка КАК Склад
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|ГДЕ
	|	ИндНомер.индкод = &индкод";

	Запрос.УстановитьПараметр("индкод", Партия);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Если НЕ ТипЗнч(ВыборкаДетальныеЗаписи.Склад) = Тип("NULL") Тогда
			Возврат ВыборкаДетальныеЗаписи.Склад;
		Иначе
			Возврат Справочники.Склады.НайтиПоКоду("000000002"); //Нижний Новгород WorkTruck
		КонецЕсли;		
	Иначе
		//По умолчанию наполнять склад Нижнего Новгорода
		Возврат Справочники.Склады.НайтиПоКоду("000000002"); //Нижний Новгород WorkTruck
		//Возврат Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	///  Комлев АА 17/12/24 ----
КонецФункции



&НаСервереБезКонтекста
Функция ПроверитьНаДетальКлиента(Индкод) 
	
	///+ТатарМА 23.09.2024
	Результат = Ложь;
	
	ЗаписьВРегистреСведений 		= РегистрыСведений.ИндНомер.СоздатьМенеджерЗаписи();
	ЗаписьВРегистреСведений.индкод 	= Справочники.ИндКод.НайтиПоНаименованию(Индкод);
	ЗаписьВРегистреСведений.Прочитать();
	Если ЗаписьВРегистреСведений.Выбран() Тогда
		Результат = ЗаписьВРегистреСведений.ДетальКлиента;
		ЗаписьВРегистреСведений.Записать();
	КонецЕсли;
	
	Возврат Результат;
	///-ТатарМА 23.09.2024
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНоменклатуруПоПартии(Партия)
/// Комлев 9/9/24 +++
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндКод.Владелец КАК Номенклатура
	|ИЗ
	|	Справочник.ИндКод КАК ИндКод
	|ГДЕ
	|	ИндКод.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Партия);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Номенклатура;
	КонецЦикла;
	/// Комлев 9/9/24 --- 
КонецФункции

&НаКлиенте
Процедура ТоварыПартияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	/// Комлев 9/9/24 +++
	ТекДанные  = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		СвязьПарВыбора = Новый СвязьПараметраВыбора("Отбор.Владелец", "Номенклатура",
			РежимИзмененияСвязанногоЗначения.Очищать);
		НоваяСвязь = Новый Массив;
		НоваяСвязь.Добавить(СвязьПарВыбора);
		Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(НоваяСвязь);
	КонецЕсли;
	/// Комлев 9/9/24 --- 
	ТоварыПартияНачалоВыбораИзСпискаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТоварыПартияНачалоВыбораИзСпискаНаСервере()

КонецПроцедуры
  

&НаСервереБезКонтекста
Функция МожноРедактироватьПартию(Состояние)
	
	///+ГомзМА 16.11.2023
	Результат = Истина;
	Если (Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Выдано ИЛИ Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Установлена) И
		НЕ (ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) 		ИЛИ
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава")) 		ИЛИ  
		ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("РедактированиеПартии")))  Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;	
	///-ГомзМА 16.11.2023
	
КонецФункции

&НаСервереБезКонтекста
Функция МожноРедактироватьЦену(Состояние)

	///+ГомзМА 14.02.2024
	Результат = Истина;
	Если (Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Выдано ИЛИ Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Установлена) И
		  НЕ (ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("МенеджерПоПродажам")) ИЛИ
		  	  ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) 		 ИЛИ
			  ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("дт_ПолныеПрава"))) 	 Тогда 
			 Результат = Ложь;
	КонецЕсли;
		 
	Возврат Результат;	 
	///-ГомзМА 14.02.2024
	

КонецФункции


&НаСервереБезКонтекста
Функция ВыдачаТовара(Партия)
	
	///+ГомзМА 18.12.2023
	Если ЗначениеЗаполнено(Партия) Тогда
		Результат = Перечисления.СтатусыТовараВЗаказНаряде.Выдано;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 18.12.2023
	
КонецФункции

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	ОбновитьПоказателиТоваров(Истина);
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке товара №" + ТекДанные.НомерСтроки + " склад на " + ТекДанные.Склад);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Материалы

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Материалы.ТекущиеДанные.Склад = Объект.Склад;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура МатериалыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПартияНачалоВыбора("Материалы", ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Работы


&НаКлиенте
Процедура РаботыРаботаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	РаботаПриИзменении(ТекущаяСтрока, Истина);
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке работы №" + ТекДанные.НомерСтроки + " работу на " + ТекДанные.Работа);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаПриИзменении(ТекущаяСтрока, ЗаполнитьНормуВремени = Ложь) Экспорт
	
	СтруктураСтроки = Новый Структура("Работа,Цена,Нормочас,Количество,ВремяПлан");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущаяСтрока);
	
	СтруктураСтроки.Вставить("ТипНаценки", Объект.ТипНаценки);
	
	дт_АвтосервисВызовСервера.РаботаПриИзменении(СтруктураСтроки, ЗаполнитьНормуВремени);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураСтроки,, "Работа");
	
	
	ОбработкаИзмененияСтроки("Работы",, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Работы");
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке работы №" + ТекДанные.НомерСтроки + " количество на " + ТекДанные.Количество);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры



&НаКлиенте
Процедура РаботыНормочасПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Работы", "Нормочас");
	
	///+ГомзМА 04.10.2023
	ТекДанныеИсполнители = Элементы.Исполнители.ТекущиеДанные;
	ТекДанныеРаботы = Элементы.Работы.ТекущиеДанные;
	Если ТекДанныеИсполнители <> Неопределено Тогда
		ИсполнителиПроцентПриИзмененииНаСервере(ТекДанныеИсполнители.ВремяФакт, ТекДанныеИсполнители.Процент, ТекДанныеРаботы.Нормочас, ТекДанныеИсполнители.ВремяФактСек, ТекДанныеРаботы.Количество);
	КонецЕсли;
	///-ГомзМА 04.10.2023
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВремяФактПриИзменении(Элемент)
	ОбработкаИзмененияСтроки("Работы", "ВремяФакт");
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаВсегоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Строка = Новый Структура(); 
	Строка.Вставить("НомерСтроки",ТекДанные.НомерСтроки);
 	
	ПересчитатьСтрокуРаботыПриИзмененииСуммыВсего(Строка);	
	
	Объект.СкидкаМенеджер = 0; 
	Объект.НаценкаМенеджер = 0; 
 
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке работы №" + ТекДанные.НомерСтроки + " сумму на " + ТекДанные.СуммаВсего);
	КонецЕсли;
	///-ГомзМА 22.12.2023
КонецПроцедуры
  &НаСервере
Процедура ПересчитатьСтрокуРаботыПриИзмененииСуммыВсего(Строка)
	
	СтрокаТЧ =  Объект.Работы.Получить(Строка.НомерСтроки - 1); 
	
	СтруктураСтроки = Новый Структура("Работа,Цена,Нормочас,Количество,ВремяПлан");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
	СтруктураСтроки.Вставить("ТипНаценки", Объект.ТипНаценки);
	дт_АвтосервисВызовСервера.РаботаПриИзменении(СтруктураСтроки, Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСтроки,, "Работа");
	ОбработкаИзмененияСтрокиНаСервере("Работы","СуммаВсего", СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
  	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Строка = Новый Структура(); 
	Строка.Вставить("Цена",ТекДанные.Цена);
	Строка.Вставить("НомерСтроки",ТекДанные.НомерСтроки);
 	
	ПересчитатьСтрокуРаботыПриИзмененииЦены(Строка);	
	
	Объект.СкидкаМенеджер = 0; 
	Объект.НаценкаМенеджер = 0; 
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке работы №" + ТекДанные.НомерСтроки + " сумму на " + ТекДанные.СуммаВсего);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры
&НаСервере
Процедура ПересчитатьСтрокуРаботыПриИзмененииЦены(Строка)
	
	СтрокаТЧ =  Объект.Работы.Получить(Строка.НомерСтроки - 1); 
	
	СтруктураСтроки = Новый Структура("Работа,Цена,Нормочас,Количество,ВремяПлан");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
	СтруктураСтроки.Вставить("ТипНаценки", Объект.ТипНаценки);
	дт_АвтосервисВызовСервера.РаботаПриИзменении(СтруктураСтроки, Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСтроки,, "Работа");
	СтрокаТЧ.Цена = Строка.Цена; 
	ОбработкаИзмененияСтрокиНаСервере("Работы",, СтрокаТЧ);
КонецПроцедуры


&НаКлиенте
Процедура РаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	//
	дт_СвязанныеТабличныеЧастиКлиент.ПередОкончаниемРедактированияГлавнойТабличнойЧасти(
	ЭтаФорма,
	Элемент,
	НоваяСтрока,
	ОтменаРедактирования,
	Отказ,
	"Исполнители"
	);

КонецПроцедуры



&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	дт_СвязанныеТабличныеЧастиКлиент.ПриНачалеРедактированияCтрокиГлавнойТабличнойЧасти(
	ЭтаФорма,
	Элемент,
	НоваяСтрока,
	Копирование,
	"Исполнители"
	);
КонецПроцедуры

/// Комлев 22/05/24 +++
Функция ТекущийПользовательБазы()
	Возврат	ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
КонецФункции

Функция ГрязевИлиСоболев()
	ТекущийПользователь = ТекущийПользовательБазы();
		Если ТекущийПользователь = "Грязев Илья Константинович"  ИЛИ ТекущийПользователь = "Соболев Дмитрий Львович" ИЛИ ТекущийПользователь = "Вадяев Илья Владимирович" Тогда
			Возврат Истина;
		Иначе 
			Возврат Ложь;
		КонецЕсли;
КонецФункции
/// Комлев 22/05/24 ---
&НаКлиенте
Процедура РаботыПриАктивизацииСтроки(Элемент)
	дт_СвязанныеТабличныеЧастиКлиент.ОбновитьОтборСтрокПодчиненнойТабличнойЧасти(
	ЭтаФорма,
	Элемент, 
	"Исполнители"
	);
	
	///+ГомзМА 05.10.2023
	//ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	//ЗначениеОтбора = ТекущиеДанные.ИдентификаторСтроки;
	//Элементы.Исполнители.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиРодитель", ЗначениеОтбора);
	
	//ИтогоПроцент = 0;
	//Для каждого СтрокаТЧ Из Элементы.Исполнители.ОтборСтрок Цикл
	//	ИтогоПроцент = ИтогоПроцент + СтрокаТЧ.Процент;
	//КонецЦикла;
	
	///-ГомзМА 05.10.2023
	
	
/// Комлев 22/05/24 +++
//	Если ГрязевИлиСоболев() Тогда
//		Возврат;
//	КонецЕсли;
//
/// Комлев 22/05/24 ---
///+ГомзМА 06.05.2024
	
		
//	Если Элементы.Работы.ТекущиеДанные <> Неопределено Тогда
//		ВРаботе = ЗаказНарядВзятВРаботу();
//		Если ВРаботе И Элемент.ТекущиеДанные.ВРаботе = Истина Тогда
//			Элементы.РаботыРабота.ТолькоПросмотр 		= Истина;
//			Элементы.РаботыСодержание.ТолькоПросмотр 	= Истина;	
//			Элементы.РаботыКоличество.ТолькоПросмотр 	= Истина;
//			Элементы.РаботыЦена.ТолькоПросмотр 			= Истина;
//			Элементы.РаботыНормочас.ТолькоПросмотр 		= Истина;
//			Элементы.РаботыВремяПлан.ТолькоПросмотр 	= Истина;
//			Элементы.РаботыВремяФакт.ТолькоПросмотр 	= Истина;
//			Элементы.РаботыСуммаНалог.ТолькоПросмотр 	= Истина;
//			Элементы.РаботыСуммаВсего.ТолькоПросмотр 	= Истина;
//		Иначе
//			Элементы.РаботыРабота.ТолькоПросмотр 		= Ложь;
//			Элементы.РаботыСодержание.ТолькоПросмотр 	= Ложь;	
//			Элементы.РаботыКоличество.ТолькоПросмотр 	= Ложь;
//			Элементы.РаботыЦена.ТолькоПросмотр 			= Ложь;
//			Элементы.РаботыНормочас.ТолькоПросмотр 		= Ложь;
//			Элементы.РаботыВремяПлан.ТолькоПросмотр 	= Ложь;
//			Элементы.РаботыВремяФакт.ТолькоПросмотр 	= Ложь;
//			Элементы.РаботыСуммаНалог.ТолькоПросмотр 	= Ложь;
//			Элементы.РаботыСуммаВсего.ТолькоПросмотр 	= Ложь;
//		КонецЕсли;
//	КонецЕсли;
		///-ГомзМА 06.05.2024	
КонецПроцедуры



&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	//++Мазин 08/05/24
//ПересчетТаблицТоварыИРаботаСкидкаНаценка ();
	//--Мазин 08/05/24	
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Исполнители

&НаКлиенте
Процедура ИсполнителиПриИзменении(Элемент)
	
	///+ГомзМА 04.10.2023
	ИсполнителиПриИзмененииНаСервере();
	///-ГомзМА 04.10.2023
	
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
КонецПроцедуры

&НаСервере
Процедура ИсполнителиПриИзмененииНаСервере()
	
	///+ГомзМА 04.10.2023
	//ИтогоПроцент = 0;
	//Для каждого СтрокаТЧ Из Объект.Исполнители Цикл
	//ИтогоПроцент = ИтогоПроцент + СтрокаТЧ.Процент;	
	
	
	//КонецЦикла;
	///-ГомзМА 04.10.2023
	
КонецПроцедуры


&НаКлиенте
Процедура ИсполнителиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	дт_СвязанныеТабличныеЧастиКлиент.ПередОкончаниемРедактированияПодчиненнойТабличнойЧасти(
	ЭтаФорма,
	Элемент, 
	НоваяСтрока, 
	ОтменаРедактирования, 
	Отказ, 
	"Работы"
	);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиВремяФактПриИзменении(Элемент)
	
	ПоляПодытог = Новый Структура();
	ПоляПодытог.Вставить("ВремяФакт", "ВремяФактПодытог");
	дт_СвязанныеТабличныеЧастиКлиент.ПриИзмененииСуммыПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент, ПоляПодытог, "Работы");
	
	ОбработкаИзмененияСтроки("Исполнители", "ВремяФакт");
	
	ОбновитьВремяФактВРодительскойСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	//	ПоляПодытог = Новый Структура();
	//	ПоляПодытог.Вставить("ВремяФакт", "ВремяФактПодытог");
	//	дт_СвязанныеТабличныеЧастиКлиент.ПриИзмененииСуммыПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент, ПоляПодытог, "Работы");
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока Тогда
		
		дт_СвязанныеТабличныеЧастиКлиент.ПриИзмененииСуммыПодчиненнойТабличнойЧасти(
		ЭтаФорма,
		Элемент, 
		Новый Структура("ВремяФакт", "ВремяФактПодытог"), 
		"Работы"
		);
		
	КонецЕсли;
	
	ОбновитьВремяФактВРодительскойСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	дт_СвязанныеТабличныеЧастиКлиент.ПередНачаломДобавленияПодчиненнойТабличнойЧасти(ЭтаФорма, 
	Элемент, 
	Отказ, 
	Копирование, 
	Родитель, 
	ЭтоГруппа, 
	Параметр, 
	"Работы"
	);
КонецПроцедуры



&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	дт_СвязанныеТабличныеЧастиКлиент.ПриИзмененииСуммыПодчиненнойТабличнойЧасти(
	ЭтаФорма,
	Элемент, 
	Новый Структура("ВремяФакт", "ВремяФактПодытог"), 
	"Работы"
	);
	ОбновитьВремяФактВРодительскойСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиВремяФактСекПриИзменении(Элемент)
	
	Если НЕ Объект.ВнутреннийЗаказНаряд Тогда
		Элементы.Исполнители.ТекущиеДанные.ВремяФакт = дт_ОбщегоНазначенияКлиентСервер.ВремяВЧасы(Элементы.Исполнители.ТекущиеДанные.ВремяФактСек);
		ИсполнителиВремяФактПриИзменении(Элементы.ИсполнителиВремяФакт);
		
		ОбновитьВремяФактВРодительскойСтроке();
	Иначе
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбновитьВремяФактВРодительскойСтроке()
	
	// Обновить ВремяФактСек в родительской ТЧ
	СтрокиРаботы = Объект.Работы.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Элементы.Исполнители.ОтборСтрок.ИдентификаторСтрокиРодитель));
	Для каждого СтрокаРаботы Из СтрокиРаботы Цикл
		СтрокаРаботы.ВремяФактСек = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(СтрокаРаботы.ВремяФакт);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти



#Область Служебные

&НаКлиенте
Процедура ПартияНачалоВыбора(ИмяТаблицы, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Владелец", ТекДанные.Номенклатура);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ДатаОстатков", ПолучитьДатуОстатков(ЭтаФорма));
	ПараметрыОткрытия.Вставить("Склад", ?(ЗначениеЗаполнено(ТекДанные.Склад), ТекДанные.Склад, Объект.Склад));
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекДанные.Партия);
	ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
	
	
	ОткрытьФорму("Справочник.ИндКод.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор); 
	
КонецПроцедуры // ПартияНачалоВыбора()


&НаСервере
Процедура ОбновитьПризнакУчетаНДС()
	
	ЕстьУчетНДС = Ложь;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЕстьУчетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЕстьУчетНДС");
		
	КонецЕсли;
	
	
КонецПроцедуры // ОбновитьПризнакУчетаНДС()

&НаКлиенте
Функция ПроверитьЗаполнениеВФорме(ИмяТабличнойЧасти)
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, "Склад");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки,
		,
		"Склад",
		,
		Отказ
		);
		
	КонецЕсли;
	
	СкладЗаполненВШапке = ЗначениеЗаполнено(Объект.Склад);
	
	Для каждого СтрокаТаблицы Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если НЕ СкладЗаполненВШапке 
			И Не ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, "Склад", СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Склад");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			Поле,
			,
			Отказ
			);
			
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, "Номенклатура", СтрокаТаблицы.НомерСтроки, ИмяТабличнойЧасти);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			Поле,
			"Объект",
			Отказ
			);
			
		КонецЕсли;	
		
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции // ПроверитьЗаполнениеВФорме()

&НаКлиенте
Процедура ПроверитьЗаполнениеИсполнителей(Корректировать, Отказ = Ложь)
	
	Если Объект.Исполнители.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ИмяГлавнойТабличнойЧасти = "Работы";
	ИмяПодчиненнойТабличнойЧасти = "Исполнители";
	
	Если Корректировать Тогда
		
		ИсполнителиШаблон = Новый Массив();
		// найдем первую строку с исполнителями
		Для каждого СтрокаТаблицы Из Объект[ИмяГлавнойТабличнойЧасти] Цикл
			
			ЗначениеОтбора = СтрокаТаблицы.ИдентификаторСтроки;
			СтрокиИсполнители = Объект[ИмяПодчиненнойТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодитель", ЗначениеОтбора));
			
			Если СтрокиИсполнители.Количество() <> 0 Тогда
				
				Для каждого СтрокаИсполнитель Из СтрокиИсполнители Цикл
					ИсполнителиШаблон.Добавить(СтрокаИсполнитель.Исполнитель);	
				КонецЦикла;
				
				Прервать;
				
			КонецЕсли;
			
			
		КонецЦикла; 
		
		Если ИсполнителиШаблон.Количество() = 0 Тогда
			ПоказатьОповещениеПользователя(,,"Нет данных об исполнителях в первой строке");
			Возврат
		КонецЕсли;
	КонецЕсли;	
	
	Для каждого СтрокаТаблицы Из Объект[ИмяГлавнойТабличнойЧасти] Цикл
		
		ЗначениеОтбора = СтрокаТаблицы.ИдентификаторСтроки;
		СтрокиИсполнители = Объект[ИмяПодчиненнойТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодитель", ЗначениеОтбора));
		
		Если СтрокиИсполнители.Количество() = 0 Тогда
			
			Если Корректировать Тогда
				
				Для каждого Исполнитель Из ИсполнителиШаблон Цикл
					
					НоваяСтрока = Объект[ИмяПодчиненнойТабличнойЧасти].Добавить();
					НоваяСтрока.Исполнитель = Исполнитель;
					НоваяСтрока.ИдентификаторСтрокиРодитель = ЗначениеОтбора;
					
				КонецЦикла;
				
			Иначе
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяГлавнойТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "НомерСтроки");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("Не заполнены исполнители в строке %1 таблицы %2",
				СтрокаТаблицы.НомерСтроки,
				ИмяГлавнойТабличнойЧасти),
				,
				Поле,
				"Объект",
				Отказ
				);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ И НЕ Корректировать Тогда
		//Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоПервойСтроке", ЭтаФорма);
		//ПоказатьВопрос(Оповещение, "Заполнить исполнителей по данным первой строки?", РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеИсполнителей()


&НаКлиенте
Процедура ЗаполнитьИсполнителейПоПервойСтроке(КодВозврата, Парам2) Экспорт
	
	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат
	КонецЕсли;
	
	ПроверитьЗаполнениеИсполнителей(Истина);
	
КонецПроцедуры // ЗаполнитьИсполнителейПоПервойСтроке()


&НаСервере
Процедура ОбновитьПоказателиТоваров(ОбновитьСебестоимость = Ложь)
	
	// Себестоимость	
	Если ОбновитьСебестоимость Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Склад КАК Склад,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Партия КАК Партия,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрганизацийОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыОрганизацийОбороты.Партия КАК Партия,
		|	ТоварыОрганизацийОбороты.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ТоварыОрганизацийОбороты.КоличествоПриход = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыОрганизацийОбороты.СтоимостьПриход / ТоварыОрганизацийОбороты.КоличествоПриход КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СебестомостьЕдиницы,
		|	ВЫБОР
		|		КОГДА ТоварыОрганизацийОбороты.КоличествоПриход = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыОрганизацийОбороты.СтоимостьПриход / ТоварыОрганизацийОбороты.КоличествоПриход КАК ЧИСЛО(15, 2))
		|	КОНЕЦ * ВТ_Товары.Количество КАК Себестоимость
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Обороты(
		|			,
		|			,
		|			,
		|			(Склад, Номенклатура, Партия) В
		|				(ВЫБРАТЬ
		|					ВТ_Товары.Склад,
		|					ВТ_Товары.Номенклатура,
		|					ВТ_Товары.Партия
		|				ИЗ
		|					ВТ_Товары)) КАК ТоварыОрганизацийОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
		|		ПО ТоварыОрганизацийОбороты.Номенклатура = ВТ_Товары.Номенклатура
		|			И ТоварыОрганизацийОбороты.Партия = ВТ_Товары.Партия
		|ИТОГИ
		|	СУММА(Себестоимость)
		|ПО
		|	ОБЩИЕ";
		
		Товары = Объект.Товары.Выгрузить();
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Товары.ЗаполнитьЗначения(Объект.Склад, "Склад");
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("Товары", Товары);
		
		СуммаСебестоимость = 0;
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			СтрокаТаблицы.СебестоимостьЕдиницы = 0;
		КонецЦикла;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаВсего = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаВсего.Следующий() Тогда
			СуммаСебестоимость = ВыборкаВсего.Себестоимость;
			
			ВыборкаДетальныеЗаписи = ВыборкаВсего.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				СтрокиКлюч = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура,Партия", 
				ВыборкаДетальныеЗаписи.Номенклатура,
				ВыборкаДетальныеЗаписи.Партия
				)
				);
				
				
				Для каждого СтрокаТаблицы Из СтрокиКлюч Цикл
					
					СтрокаТаблицы.СебестоимостьЕдиницы = ВыборкаДетальныеЗаписи.СебестомостьЕдиницы;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.ВаловаяПрибыль =  СтрокаТаблицы.СуммаВсего - (СтрокаТаблицы.СебестоимостьЕдиницы * СтрокаТаблицы.Количество);
	КонецЦикла;
	
	СуммаВаловаяПрибыль = Объект.Товары.Итог("СуммаВсего") - СуммаСебестоимость;
	Рентабельность = ?(СуммаСебестоимость = 0, 0, Окр(СуммаВаловаяПрибыль * 100 / СуммаСебестоимость, 2));
	
КонецПроцедуры // ОбновитьПоказателиТоваров()


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуОстатков(Форма)
	
	Объект = Форма.Объект;
	ДатаОстатков = ?(Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен"),
	Объект.ДатаОкончания,
	ТекущаяДата()
	);
	
	Возврат ДатаОстатков;
	
	
КонецФункции // ПолучитьДатуОстатков()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//Товары.Отменено
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Товары");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Объект.Товары.Отменено", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Товары.ВаловаяПрибыль
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВаловаяПрибыль");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Объект.Товары.СебестоимостьЕдиницы", ВидСравненияКомпоновкиДанных.Равно, 0);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	// Товары.СебестоимостьЕдиницы
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимостьЕдиницы");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Объект.Товары.СебестоимостьЕдиницы", ВидСравненияКомпоновкиДанных.Равно, 0);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);
	
	// Товары.ВаловаяПрибыль
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВаловаяПрибыль");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	
	Если ПолучитьФункциональнуюОпцию("дт_ОтгрузкаСРазныхСкладов") Тогда	
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Товары");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Склад", ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных("Объект.Склад")); //дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновнойСклад());
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Желтый);
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Материалы");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.Склад", ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных("Объект.Склад")); //дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновнойСклад());
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Желтый);
		
	КонецЕсли;
	
	
	
КонецПроцедуры



// УстановитьУсловноеОформление()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДобавленныеКолонки(Форма)
	
	Объект = Форма.Объект;
	
	Для каждого СтрокаТаблицы Из Объект.Работы Цикл
		СтрокаТаблицы.ВремяПланСек = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(СтрокаТаблицы.ВремяПлан);
		СтрокаТаблицы.ВремяФактСек = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(СтрокаТаблицы.ВремяФакт);
		СтрокаТаблицы.НормочасСек = дт_ОбщегоНазначенияКлиентСервер.ФорматВремени(СтрокаТаблицы.Нормочас);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.Исполнители Цикл
		СтрокаТаблицы.ВремяФактСек = дт_ОбщегоНазначенияКлиентСервер.ЧасыВоВремя(СтрокаТаблицы.ВремяФакт);
		///+ГомзМА 05.10.2023
		СтрокаТаблицы.ВремяНормСек = дт_ОбщегоНазначенияКлиентСервер.ЧасыВоВремя(СтрокаТаблицы.ВремяНорм);
		///-ГомзМА 05.10.2023
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДобавленныеКолонкиСервер()
	
	// Ответственные.СуммаВыплачено
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаВыплаты = Документы.Расходы.ПолучитьСуммыВыплатПоОснованию(Объект.Ссылка);
	
	Если ТаблицаВыплаты = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для каждого СтрокаОтветственные Из Объект.Ответственные Цикл
		
		СтрокаОтветственные.СуммаВыплачено = 0;
		СтрокаВыплаты = ТаблицаВыплаты.Найти(СтрокаОтветственные.Сотрудник, "Пользователь");
		
		Если СтрокаВыплаты <> Неопределено Тогда
			СтрокаОтветственные.СуммаВыплачено = СтрокаВыплаты.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПризнакРекомендации(Форма)
	
	Объект = Форма.Объект;
	Рекомендации = СокрЛП(Объект.Рекомендации);
	Форма.ПризнакРекомендации = Мин(СтрЧислоСтрок(Рекомендации), СтрДлина(Рекомендации));
	
КонецПроцедуры // ОбновитьПризнакРекомендации()

&НаСервере
Процедура ПодставитьЗначенияТЧ(ТекСтрока)
	
	//ТекСтрока = Перечисления.СтатусыТовараВЗаказНаряде.Ожидание;	
	//Сергеев
КонецПроцедуры

&НаСервере
Функция ЕстьДоступКУдалению(Состояние)

	///+ГомзМА 31.01.2024
	Результат = Истина;
	Если Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Выдано ИЛИ Состояние = Перечисления.СтатусыТовараВЗаказНаряде.Установлена Тогда
		Если НЕ (Справочники.Пользователи.НайтиПоНаименованию(ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя) = Объект.Инициатор.Пользователь ИЛИ
			(ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("Руководитель")) ИЛИ ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава"))))  Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	///-ГомзМА 31.01.2024

КонецФункции // ЕстьДоступКУдалению()


#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьАвтомобиль()
	
	Авто = ЗаполнитьАвтомобильНаСервере(Элементы.Товары.ТекущиеДанные.партия);
	
	Попытка
		Элементы.Товары.ТекущиеДанные.Автомобиль = Авто;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ЗаполнитьАвтомобильНаСервере(Партия)
		
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегистрНакопления1.машина КАК машина
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1
	|ГДЕ
	|	РегистрНакопления1.индкод = &индкод";
	Запрос.УстановитьПараметр("ИндКод",Партия);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.машина;
КонецФункции

&НаСервере
Функция ПолучитьТабличныйДокументТоварныйЧек()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	Макет       =   ПолучитьМакет("ТоварнаяНакладная1");
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	номерТЧ = Объект.Номер;
	//Если объект.Номер > 0 Тогда
	//	номерТЧ = объект.Номер;
	//Иначе
	//	объект.НомерПП = номерТЧ;
	//КонецЕсли;
	
	// ++ obrv 24.07.18
	//ОбластьМакета.Параметры.ТекстЗаголовка = "Товарный чек № "+Объект.Номер +" от "+ Объект.Дата;

	ПараметрыШапки = Новый Структура;
	//ПараметрыШапки.Вставить("ТекстЗаголовка", СтрШаблон("Товарный чек № %1 от %2", Объект.Номер, Формат(Объект.Дата, "ДЛФ=DD")));
	ПараметрыШапки.Вставить("НомерДокумента", Объект.Номер);
	ПараметрыШапки.Вставить("ДатаДокумента", Формат(Объект.Дата, "ДЛФ=D"));
	// -- obrv 24.07.18
	
	// ++ obrv 02.03.18
	//ОбластьМакета.Параметры.Покупатель = Объект.Клиент.ФИО;
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Клиент, Объект.Дата);
	СведенияОПродавце = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	ПараметрыШапки.Вставить("ОрганизацияНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,
		"ПолноеНаименование"));
	ПараметрыШапки.Вставить("ОрганизацияРеквизиты", ПредставлениеДляПечати(СведенияОПродавце));

	ПараметрыШапки.Вставить("ПокупательНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,
		"ПолноеНаименование"));
	ПараметрыШапки.Вставить("ПокупательРеквизиты", ПредставлениеДляПечати(СведенияОПокупателе));
	// -- obrv 02.03.18
	
	// ++ obrv 24.07.18
	//Если  ПустаяСтрока(Объект.Клиент.ИНН) <> Истина Тогда
	//	ОбластьМакета.Параметры.Покупатель = ОбластьМакета.Параметры.Покупатель + ", ИНН "+	Объект.Клиент.ИНН;
	//КонецЕсли;
	//ОбластьМакета.Параметры.организация = Объект.Организация.ПолноеНаименование + ", ИНН " + Объект.Организация.ИНН;
	//обл = "";
	//Если Объект.Клиент.Область.Пустая() <> Истина Тогда
	//	обл = Объект.Клиент.Область.Наименование + ", ";
	//КонецЕсли;
	//ОбластьМакета.Параметры.Адрес = Объект.Клиент.Страна2.Наименование + ", " + Объект.Клиент.Область.Наименование + ", " + Объект.Клиент.Город2.Наименование;
	//ОбластьМакета.Параметры.Телефон = Объект.Клиент.Телефон;

	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
	// -- obrv 24.07.18
	ТабДокумент.Вывести(ОбластьМакета);

	ИтогоТовары = 0;
	Если Объект.Товары.Количество() <> 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("заголовок2");
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");

		НомерСтроки = 0;

		Скидка = 0;
		ТаблицаТовары = Объект.Товары.Выгрузить();
		Индекс = 0;
		Пока Индекс < ТаблицаТовары.Количество() Цикл
		//Если ТаблицаТовары[Индекс].Отменено Тогда
		//	ТаблицаТовары.Удалить(Индекс);
		//Иначе
			Индекс = Индекс + 1;
		//КонецЕсли;
		КонецЦикла;

		ТаблицаТовары.Колонки.Добавить("Наименование");
		ИспользоватьНаименованияПоставщиков = ПолучитьФункциональнуюОпцию("дт_ИспользоватьНаименованияПоставщиков")
			И дт_ОбщегоНазначенияВызовСервераПовтИсп.ДатаНачалаУчетаНаименованийПоставщиков() <= Объект.Дата;
		Если ИспользоватьНаименованияПоставщиков Тогда

			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаТовары.Партия КАК укод
			|ПОМЕСТИТЬ ВТ_Товары
			|ИЗ
			|	&ТаблицаТовары КАК ТаблицаТовары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
			|	ВТ_Товары.Номенклатура КАК Номенклатура,
			|	ИндКод.Ссылка КАК Партия
			|ПОМЕСТИТЬ ВТ_ТоварыПартии
			|ИЗ
			|	ВТ_Товары КАК ВТ_Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИндКод КАК ИндКод
			|		ПО ВТ_Товары.укод = ИндКод.Наименование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ТоварыПартии.НомерСтроки КАК НомерСтроки,
			|	МАКСИМУМ(НоменклатураПоставщиков.Наименование) КАК Наименование
			|ИЗ
			|	ВТ_ТоварыПартии КАК ВТ_ТоварыПартии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.дт_НоменклатураПоставщиков.СрезПоследних(
			|				&Дата,
			|				Номенклатура В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ВТ_Товары.Номенклатура
			|					ИЗ
			|						ВТ_Товары)) КАК НоменклатураПоставщиков
			|		ПО ВТ_ТоварыПартии.Номенклатура = НоменклатураПоставщиков.Номенклатура
			|			И ВТ_ТоварыПартии.Партия = НоменклатураПоставщиков.Партия
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ТоварыПартии.НомерСтроки";

			Запрос.УстановитьПараметр("Дата", Объект.Дата);
			Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
			РезультатЗапроса = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ТаблицаТовары[ВыборкаДетальныеЗаписи.НомерСтроки - 1].Наименование = ВыборкаДетальныеЗаписи.Наименование;
			КонецЦикла;
		Иначе

			Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл

				СтрокаТаблицы.Наименование = СтрокаТаблицы.Номенклатура.Наименование;

			КонецЦикла;
		КонецЕсли;

		Для Каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл

			НомерСтроки = НомерСтроки + 1;
			ОбластьСтроки.Параметры.н = НомерСтроки;
			ОбластьСтроки.Параметры.код = СтрокаТабличнойЧасти.Партия;
			ОбластьСтроки.Параметры.артикул = СтрокаТабличнойЧасти.Номенклатура.Артикул;
		//ОбластьСтроки.Параметры.нпроизв = СтрокаТабличнойЧасти.Товар.НомерПроизводителя;
			сост = СтрокаТабличнойЧасти.Номенклатура.Состояние;

			ОбластьСтроки.Параметры.состояние = сост;
		//Если Объект.АртикулВНазвании Тогда
		//	// ++ obrv 20.12.19
		//	//ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Артикул + " " +СтрокаТабличнойЧасти.Товар.Наименование;
		//	ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Номенклатура.Артикул + " " +СтрокаТабличнойЧасти.Наименование;
		//Иначе
		//ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Товар.Наименование;
			ОбластьСтроки.Параметры.наименование = СтрокаТабличнойЧасти.Наименование;
		// -- obrv 20.12.19
		//КонецЕсли;

			Скидка1 = 0;
			ОбластьСтроки.Параметры.цена = СтрокаТабличнойЧасти.Цена;
			ОбластьСтроки.Параметры.колво = СтрокаТабличнойЧасти.Количество;

			ИтогоТовары = ИтогоТовары + СтрокаТабличнойЧасти.СуммаВсего;
		//Если СтрокаТабличнойЧасти.Скидка <> Null И СтрокаТабличнойЧасти.Скидка > 0 Тогда
		//	Скидка = Скидка + СтрокаТабличнойЧасти.Скидка;
		//	Скидка1 = СтрокаТабличнойЧасти.Скидка;
		//Иначе
		//	Скидка = Скидка + (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
		//	Скидка1 = (СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество)*(Объект.Клиент.Скидка/100);
		//КонецЕсли;
			ОбластьСтроки.Параметры.сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		//ОбластьСтроки.Параметры.скидка = Скидка1; 

			ТабДокумент.Вывести(ОбластьСтроки);

		КонецЦикла;
		ОбластьИтогоТовары = Макет.ПолучитьОбласть("ИтогоТовары");
		ОбластьИтогоТовары.Параметры.СуммаТовары = ИтогоТовары;
		ТабДокумент.Вывести(ОбластьИтогоТовары);
	КонецЕсли;
	
	/// Комлев АА 22/10/24 +++
	

	ИтогоРаботы = 0;
	Если Объект.Работы.Количество() <> 0 Тогда
		ОбластьЗаголовокРаботы = Макет.ПолучитьОбласть("ЗаголовокРаботы");
		ОбластьШапкаРаботы = Макет.ПолучитьОбласть("ШапкаРаботы");
		ОбластьСтрокаРаботы = Макет.ПолучитьОбласть("СтрокаРаботы");
		ОбластьИтогоРаботы = Макет.ПолучитьОбласть("ИтогоРаботы");
		ТабДокумент.Вывести(ОбластьЗаголовокРаботы);
		ТабДокумент.Вывести(ОбластьШапкаРаботы);
		НомерСтрокиРаботы = 0;

		Для Каждого СтрокаРаботы Из Объект.Работы Цикл
			НомерСтрокиРаботы = НомерСтрокиРаботы + 1;
			ИтогоРаботы = ИтогоРаботы + СтрокаРаботы.СуммаВсего;
			ОбластьСтрокаРаботы.Параметры.Н = НомерСтрокиРаботы;
			ОбластьСтрокаРаботы.Параметры.Наименование = СтрокаРаботы.Работа;
			ОбластьСтрокаРаботы.Параметры.Сумма = СтрокаРаботы.СуммаВсего;
			ТабДокумент.Вывести(ОбластьСтрокаРаботы);
		КонецЦикла;
		ОбластьИтогоРаботы.Параметры.СуммаРаботы = ИтогоРаботы;
		ТабДокумент.Вывести(ОбластьИтогоРаботы);
	КонецЕсли;
	
	/// Комлев АА 22/10/24 ---

	ОбщийИтог = ИтогоРаботы + ИтогоТовары;
	ОбластьМакета = Макет.ПолучитьОбласть("подвал");
	
	//ОбластьМакета.Параметры.СрокПроверки = "5 дней";
	//ОбластьМакета.Параметры.доставка = "" + Объект.Доставка;
	
	// ++ obrv 24.07.18
	//ОбластьМакета.Параметры.ИтогоСумма = "" + Итого + " р.";
	//ФормСтрока = "Л = ru_RU; ДП = Истина";
	//ОбластьМакета.Параметры.прописью = ЧислоПрописью(Итого - Скидка,ФормСтрока,"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");

	ПараметрыПодвала = Новый Структура;
	ПараметрыПодвала.Вставить("КоличествоСтрок", НомерСтроки);
	ПараметрыПодвала.Вставить("СуммаИтого", Формат(ОбщийИтог, "ЧДЦ=2; ЧГ=3,0"));
	ПараметрыПодвала.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ОбщийИтог,
		дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()));
	ПараметрыПодвала.Вставить("ПродавецФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Объект.Инициатор));

	Ответственные = Объект.Ответственные.Выгрузить();
	СтрокаТаблицы = Ответственные.Найти(ПредопределенноеЗначение("Перечисление.дт_РолиВПродаже.Сборщик"), "Роль");
	Если СтрокаТаблицы <> Неопределено Тогда

		ФИО = СтрокаТаблицы.Сотрудник;
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПодвала.Вставить("СборщикФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЕсли;

	КонецЕсли;

	СтрокаТаблицы = Ответственные.Найти(Перечисления.дт_РолиВПродаже.Упаковщик, "Роль");
	Если СтрокаТаблицы <> Неопределено Тогда

		ФИО = СтрокаТаблицы.Сотрудник;
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПодвала.Вставить("УпаковщикФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЕсли;

	КонецЕсли;

	ОбластьМакета.Параметры.Заполнить(ПараметрыПодвала);
	// -- obrv 24.07.18
	
	//ОбластьМакета.Параметры.Скидка = "" + Скидка+ " р.";
	
	//ОбластьМакета.Параметры.Продавец = Объект.КтоПродал.ФИО;

	ТабДокумент.РазмерКолонтитулаСнизу=25;
	ТабДокумент.НижнийКолонтитул.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
	ТабДокумент.НижнийКолонтитул.Шрифт=Новый Шрифт(Макет.Область(1, 1).Шрифт, , 14);
	ТабДокумент.НижнийКолонтитул.ТекстСправа = "№" + номерТЧ + объект.Организация.БукваВНакладной + " / №"
		+ объект.Номер;
	ТабДокумент.НижнийКолонтитул.Выводить=Истина;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПолучитьТабличныйДокументТоварныйЧек()
&НаСервере
Функция ПолучитьМакет(название)
	Возврат  Документы.ЗаказНаряд.ПолучитьМакет(название);
КонецФункции


&НаСервереБезКонтекста
Функция ПредставлениеДляПечати(СведенияКонтрагента)
	
	ПоляПредставления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ФактическийАдрес,ИНН,Телефоны,EMail");
	
	
	Представление = "";
	Для каждого Поле Из ПоляПредставления Цикл
		
		ЗначениеПоля =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияКонтрагента, Поле);
		Если НЕ ПустаяСтрока(ЗначениеПоля) Тогда
			Представление = Представление + ЗначениеПоля + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Представление);
	
	Возврат Представление;
	
КонецФункции // ПредставлениеДляПечати()

&НаКлиенте
Процедура ПечатьЧека(Команда)
	ТабДокумент = ПолучитьТабличныйДокументТоварныйЧек();
	
	ТабДокумент.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСумму()
	
	ТекСтрока = Элементы.ТМЦ.ТекущиеДанные;
	//Если ЗначениеЗаполнено(ТекСтрока) Тогда
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	//КонецЕсли;
	
КонецПроцедуры






&НаКлиенте
Процедура ТМЦИнвентарныйНомерПриИзменении(Элемент)
	
	///+ГомзМА 02.05.2023
	ТекСтрока = Элементы.ТМЦ.ТекущиеДанные;
	
	РаботаСДокументамиТМЦКлиент.УстановитьДанныеПоИнвентарномуНомеру(ТекСтрока);
	
	РассчитатьСумму();
	
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	///-ГомзМА 02.05.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТМЦКоличествоПриИзменении(Элемент)
	
	РассчитатьСумму();
	
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ТМЦЦенаПриИзменении(Элемент)
	
	РассчитатьСумму();
	
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ТМЦПриИзменении(Элемент)
	
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВклВыклРасходникиВСтоимостьПриИзменении(Элемент)
	
	ВключитьВСтоимость = ВключитьРасходникиВСтоимость();
	
	ОбновитьСуммуДокумента(ЭтаФорма, ВключитьВСтоимость);
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры



&НаКлиенте
Процедура ОбработкаОкончанияСканирования(Результат, ДопПараметры) Экспорт
	
	///+ГомзМА 10.08.2023
	Если Результат.Количество() <> 0 Тогда
	//	Для каждого Код Из Результат Цикл
	//		Элементы.товары.ТекущаяСтрока = ВнешнееСобытиеНаСервере(Строка(Код));
	//		ОбработкаИзмененияСтроки("товары");
	//		СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
	//		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.товары.ТекущиеДанные);
			//СтруктураСтроки.Номенклатура = Элементы.товары.ТекущиеДанные.Номенклатура;
			//СтруктураСтроки.Вставить("Дата", Объект.Дата);
	//		ЗаполнитьЗначенияСвойств(Элементы.товары.ТекущиеДанные, СтруктураСтроки,, "Партия");
	//	КонецЦикла;
	КонецЕсли;
	///-ГомзМА 10.08.2023
	
КонецПроцедуры

&НаСервере
Функция ВнешнееСобытиеНаСервере(код)
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИндКод.Ссылка КАК Ссылка,
	|	ИндКод.Владелец КАК Владелец
	|ИЗ
	|	Справочник.ИндКод КАК ИндКод
	|ГДЕ
	|	ИндКод.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование",Код);
	
	Результат = запрос.Выполнить().Выгрузить();
	
	СтруктураДляПоиска = Новый Структура;
	структураДляПоиска.Вставить("Номенклатура",Результат[0].Владелец);
	
	МассивСтрок = Объект.Товары.НайтиСтроки(структураДляПоиска);
	Если  МассивСтрок.количество() > 0 Тогда
		
		СтруктураДляПоиска = Новый Структура;
		структураДляПоиска.Вставить("Партия",Справочники.ИндКод.ПустаяСсылка());
		структураДляПоиска.Вставить("Номенклатура",Результат[0].Владелец);
		
		МассивСтрок = Объект.Товары.НайтиСтроки(структураДляПоиска);
		Если  МассивСтрок.количество() > 0 Тогда
			МассивСтрок[0].партия = Результат[0].Ссылка;
			//МассивСтрок[0].Укод = Код;
			//элементы.Таблица.ТекущаяСтрока = 
			Возврат МассивСтрок[0].ПолучитьИдентификатор();	
		КонецЕсли;
		
		
	Иначе	
		НоваяСтрока = объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = Результат[0].Владелец;
		НоваяСтрока.партия = Результат[0].Ссылка;
		//НоваяСтрока.Укод = Код;
		НоваяСтрока.количество = 1;
		НоваяСтрока.Склад = Объект.Склад;
		//НоваяСтрока.Цена = ВозвратЦены(Результат[0].Владелец);
		
		//элементы.Таблица.ТекущаяСтрока = НоваяСтрока;
		Возврат НоваяСтрока.ПолучитьИдентификатор();	
	КонецЕсли;	
	
	
	СтруктураДляПоиска = Новый Структура;
	структураДляПоиска.Вставить("Партия",Результат[0].Ссылка);
	структураДляПоиска.Вставить("Номенклатура",Результат[0].Владелец);
	
	МассивСтрок = Объект.Товары.НайтиСтроки(структураДляПоиска);
	Если  МассивСтрок.количество() = 0 Тогда
		НоваяСтрока = объект.Таблица.Добавить();
		НоваяСтрока.Номенклатура = Результат[0].Владелец;
		НоваяСтрока.партия = Результат[0].Ссылка;
		//НоваяСтрока.Укод = Код;
		НоваяСтрока.количество = 1;
		НоваяСтрока.Склад = Объект.Склад;
		//НоваяСтрока.Цена = ВозвратЦены(Результат[0].Владелец);
		Возврат НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли
Конецфункции

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные) 
	Если Событие = "Штрихкод" Тогда
		
		
		элементы.товары.ТекущаяСтрока = ВнешнееСобытиеНаСервере(Данные);
		
		ОбработкаИзмененияСтроки("товары");
		СтруктураСтроки = Новый Структура("Номенклатура,Партия,Цена");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.товары.ТекущиеДанные);
		//СтруктураСтроки.Номенклатура = Элементы.товары.ТекущиеДанные.Номенклатура;
		//СтруктураСтроки.Вставить("Дата", Объект.Дата);
		ЗаполнитьЗначенияСвойств(Элементы.товары.ТекущиеДанные, СтруктураСтроки,, "Партия");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроектПриИзмененииНаСервере()
	Объект.Состояние  = объект.Проект.Состояние;
	//Объект.Клиент 	  = объект.Проект.Клиент;
	Объект.ДатаНачала = объект.Проект.ДатаПриема;
	Объект.ВинКод	  = объект.Проект.ВинКод;
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ПроектПриИзмененииНаСервере();
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил проект на " + Объект.Проект);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ВнутреннийЗаказНарядПриИзменении(Элемент)
	
	///+ГомзМА 03.10.2023
	УстановитьВидимостьИДоступностьЭлементов();
	//УстановитьСписокВыбора();
	ВнутреннийЗаказНарядПриИзмененииНаСервере();
	///-ГомзМА 03.10.2023
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		Если Объект.ВнутреннийЗаказНаряд Тогда
			ЗаписьЛога("Поставил галочку внутренний заказ-наряд");
		Иначе
			ЗаписьЛога("Снял галочку внутренний заказ-наряд");
		КонецЕсли;
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаСервере
Процедура ВнутреннийЗаказНарядПриИзмененииНаСервере()
	
	///+ГомзМА 04.10.2023
	Если Объект.Мастер = Справочники.Пользователи.ПустаяСсылка() И Объект.ВнутреннийЗаказНаряд Тогда
		Объект.Мастер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	///-ГомзМА 04.10.2023
	
КонецПроцедуры


&НаСервере
Процедура УстановитьСписокВыбора()
	
	///+ГомзМА 03.10.2023
	//УстановитьВидимостьИДоступностьЭлементов();
	Если НЕ ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("Руководитель")) Тогда
		Элементы.ТоварыСостояние.РежимВыбораИзСписка = Истина;
		Элементы.ТоварыСостояние.СписокВыбора.Очистить();
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Срочно);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Планово);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.НужнаНовая);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Заказать);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.НаСогласовании);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Установлена);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Ожидание);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Выдано);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Собрано);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.НетВНаличии);
		
	
	КонецЕсли;
	///-ГомзМА 03.10.2023
	Если ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя = "Вадяев Илья Владимирович" Тогда
		Элементы.ТоварыСостояние.РежимВыбораИзСписка = Истина;
		Элементы.ТоварыСостояние.СписокВыбора.Очистить();
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Срочно);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Планово);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.НужнаНовая);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Заказать);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.НаСогласовании);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Установлена);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Ожидание);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Выдано);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Собрано);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.НетВНаличии);
		Элементы.ТоварыСостояние.СписокВыбора.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Возвращена);
	
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ИсполнителиПроцентПриИзмененииНаСервере(ВремяНорм, Процент, Нормочас, ВремяНормСек, Количество)
	
	///+ГомзМА 03.10.2023
	ВремяНорм 		= Процент * (Нормочас * Количество) / 100;
	ВремяНормСек 	= '00010101' + ВремяНорм * 60 * 60;
	///-ГомзМА 03.10.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПроцентПриИзменении(Элемент)
	
	///+ГомзМА 03.10.2023
	ТекДанныеИсполнители = Элементы.Исполнители.ТекущиеДанные;
	ТекДанныеРаботы = Элементы.Работы.ТекущиеДанные;
	Если ТекДанныеИсполнители <> Неопределено Тогда
		ИсполнителиПроцентПриИзмененииНаСервере(ТекДанныеИсполнители.ВремяНорм, ТекДанныеИсполнители.Процент, ТекДанныеРаботы.Нормочас, ТекДанныеИсполнители.ВремяНормСек, ТекДанныеРаботы.Количество);
	КонецЕсли;
	///-ГомзМА 03.10.2023
	
КонецПроцедуры

&НаКлиенте
Процедура РассчётНДС(Команда)
	Для каждого стр из Объект.Товары Цикл 
		Стр.СуммаНалог = Стр.Сумма *0.2;
		
		Стр.СуммаВсего = Стр.Сумма + Стр.СуммаНалог; 
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчётНДСОбр(Команда)
	Для каждого стр из Объект.Товары Цикл 
		Стр.СуммаНалог = Стр.СуммаВсего *20/120;
		
		Стр.Сумма = Стр.СуммаВсего - Стр.СуммаНалог; 
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	///+ГомзМА 16.11.2023
//	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
//		РедактированиеРазрешено = МожноРедактироватьПартию(Элемент.ТекущиеДанные.Состояние);
//		Если НЕ РедактированиеРазрешено Тогда
//			Элемент.ПодчиненныеЭлементы.ТоварыАвтомобиль.ТолькоПросмотр 	= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыКоличество.ТолькоПросмотр 	= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыПартия.ТолькоПросмотр 		= Истина;
//			//Элемент.ПодчиненныеЭлементы.ТоварыЦена.ТолькоПросмотр 			= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыСостояние.ТолькоПросмотр 		= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыСумма.ТолькоПросмотр 			= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыСуммаНалог.ТолькоПросмотр 	= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыСуммаВсего.ТолькоПросмотр 	= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыСклад.ТолькоПросмотр 			= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыНоменклатура.ТолькоПросмотр 	= Истина;
//		Иначе
//			Элемент.ПодчиненныеЭлементы.ТоварыАвтомобиль.ТолькоПросмотр 	= Ложь;
//			Элемент.ПодчиненныеЭлементы.ТоварыКоличество.ТолькоПросмотр 	= Ложь;
//			//Элемент.ПодчиненныеЭлементы.ТоварыЦена.ТолькоПросмотр 			= Ложь;
//			Элемент.ПодчиненныеЭлементы.ТоварыСостояние.ТолькоПросмотр 		= Ложь;
//			Элемент.ПодчиненныеЭлементы.ТоварыСумма.ТолькоПросмотр 			= Ложь;
//			Элемент.ПодчиненныеЭлементы.ТоварыСуммаНалог.ТолькоПросмотр 	= Ложь;
//			Элемент.ПодчиненныеЭлементы.ТоварыСуммаВсего.ТолькоПросмотр 	= Ложь;
//			Элемент.ПодчиненныеЭлементы.ТоварыСклад.ТолькоПросмотр 			= Ложь;
//			Элемент.ПодчиненныеЭлементы.ТоварыНоменклатура.ТолькоПросмотр 	= Ложь;
//		КонецЕсли;
//		Если НЕ МожноРедактироватьЦену(Элемент.ТекущиеДанные.Состояние) Тогда
//			Элемент.ПодчиненныеЭлементы.ТоварыЦена.ТолькоПросмотр 			= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыСумма.ТолькоПросмотр 			= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыСуммаНалог.ТолькоПросмотр 	= Истина;
//			Элемент.ПодчиненныеЭлементы.ТоварыСуммаВсего.ТолькоПросмотр 	= Истина;
//		Иначе
//			Элемент.ПодчиненныеЭлементы.ТоварыЦена.ТолькоПросмотр 			= Ложь;
//			Элемент.ПодчиненныеЭлементы.ТоварыСумма.ТолькоПросмотр 			= Ложь;
//			Элемент.ПодчиненныеЭлементы.ТоварыСуммаНалог.ТолькоПросмотр 	= Ложь;
//			Элемент.ПодчиненныеЭлементы.ТоварыСуммаВсего.ТолькоПросмотр 	= Ложь;
//		КонецЕсли;
//		
//		/// Комлев 22/05/24 +++
//		Если ГрязевИлиСоболев() Тогда
//			Возврат;
//		КонецЕсли;
//		/// Комлев 22/05/24 ---
//		//
//			///+ГомзМА 06.05.2024
//		ВРаботе = ЗаказНарядВзятВРаботу();
//		Если ВРаботе И Элемент.ТекущиеДанные.ВРаботе = Истина Тогда
//			Элементы.ТоварыНоменклатура.ТолькоПросмотр 	= Истина;
//			Элементы.ТоварыКоличество.ТолькоПросмотр 	= Истина;	
//		Иначе
//			Элементы.ТоварыНоменклатура.ТолькоПросмотр 	= Ложь;
//			Элементы.ТоварыКоличество.ТолькоПросмотр 	= Ложь;
//		КонецЕсли;
//		///-ГомзМА 06.05.2024
//	КонецЕсли;
//	///-ГомзМА 16.11.2023
	
КонецПроцедуры

//Волков ИО 07.12.23 ++
&НаКлиенте
Процедура ЗаблокироватьТЧТоварыПриИзменении(Элемент)
	
	БлокироватьТЧТовары();
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Если Объект.ЗаблокироватьТЧТовары Тогда
			ЗаписьЛога("Установил галочку Заблокировать товары");
		Иначе
			ЗаписьЛога("Снял галочку Заблокировать товары");
		КонецЕсли;
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

Процедура БлокироватьТЧТовары();
	
	//Элементы.ГруппаТовары.ТолькоПросмотр = Объект.ЗаблокироватьТЧТовары;
	//Элементы.ГруппаТовары.ТолькоПросмотр = Истина;
	//ТоварыНомерСтроки
	//Элементы.ТоварыПартия.ТолькоПросмотр = Ложь; 
	
	//ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Объект.ЗаблокироватьТЧТовары Тогда 
		Элементы.ТоварыНомерСтроки.Доступность 					  = Ложь;
		Элементы.ТоварыНоменклатура.Доступность					  = Ложь; 
		//Волков ИО 20.02.24 Наряд 000005465 ++
		Элементы.ТоварыНоменклатураКод.ТолькоПросмотр				  = Истина;
		Элементы.ТоварыНоменклатураАртикул.ТолькоПросмотр 			  = Истина; 
		Элементы.ТоварыНоменклатураНомерПроизводителя.ТолькоПросмотр  = Истина; 
		Элементы.ТоварыПартия.ТолькоПросмотр 						  = Истина; //Истина
		//Волков ИО 20.02.24 Наряд 000005465 --	
		Элементы.ТоварыАвтомобиль.Доступность 					  = Ложь;
		Элементы.ТоварыКоличество.Доступность    				  = Ложь;
		Элементы.ТоварыКоличествоОстаток.Доступность  			  = Ложь;
		Элементы.ТоварыСебестоимостьЕдиницы.Доступность    		  = Ложь;
		Элементы.ТоварыЦена.Доступность           				  = Ложь; 
		//Волков ИО 14.12.23 ++
		Элементы.ТоварыСостояние.Доступность       				  = Истина;
		//Волков ИО 14.12.23 --
		Элементы.ТоварыСкидкаСумма.Доступность     				  = Ложь;
		Элементы.ТоварыСкидкаПроцент.Доступность  				  = Ложь;
		Элементы.ТоварыСумма.Доступность          				  = Ложь;
		Элементы.ТоварыСуммаНалог.Доступность     				  = Ложь;
		Элементы.ТоварыСуммаВсего.Доступность    				  = Ложь;
		Элементы.ТоварыВаловаяПрибыль.Доступность  				  = Ложь;
		Элементы.ТоварыСклад.Доступность         				  = Ложь;
	Иначе
		Элементы.ТоварыНомерСтроки.Доступность 					  = Истина;
		Элементы.ТоварыНоменклатура.Доступность					  = Истина; 
		Элементы.ТоварыНоменклатураКод.Доступность				  = Истина;
		Элементы.ТоварыНоменклатураАртикул.Доступность 			  = Истина; 
		Элементы.ТоварыНоменклатураНомерПроизводителя.Доступность = Истина; 
		Элементы.ТоварыПартия.Доступность 						  = Истина; //Истина
		Элементы.ТоварыАвтомобиль.Доступность 					  = Истина;
		Элементы.ТоварыКоличество.Доступность    				  = Истина;
		Элементы.ТоварыКоличествоОстаток.Доступность  			  = Истина;
		Элементы.ТоварыСебестоимостьЕдиницы.Доступность    		  = Истина;
		Элементы.ТоварыЦена.Доступность           				  = Истина;
		Элементы.ТоварыСостояние.Доступность       				  = Истина;
		Элементы.ТоварыСкидкаСумма.Доступность     				  = Истина;
		Элементы.ТоварыСкидкаПроцент.Доступность  				  = Истина;
		Элементы.ТоварыСумма.Доступность          				  = Истина;
		Элементы.ТоварыСуммаНалог.Доступность     				  = Истина;
		Элементы.ТоварыСуммаВсего.Доступность    				  = Истина;
		Элементы.ТоварыВаловаяПрибыль.Доступность  				  = Истина;
		Элементы.ТоварыСклад.Доступность         				  = Истина;
		// ++ МазинЕС 07-06-24
		Элементы.ТоварыПартия.ТолькоПросмотр 					= Ложь;
		// -- МазинЕС 07-06-24
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСостояниеПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке товара №" + ТекДанные.НомерСтроки + " состояние на " + ТекДанные.Состояние);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
	//++СергееВ Ф.В. Дата:14/03/24
	Если ТекДанные.Состояние = ВозвратТовара()  Тогда
		ПеремещениеНаПолкуВозврата(ТекДанные.Партия);
		ТекДанные.Автомобиль = "";
		ТекДанные.Партия	 = "";
	КонецЕсли;
	
	//--СергееВ Ф.В. Дата:14/03/24
	
	
КонецПроцедуры

Процедура ПеремещениеНаПолкуВозврата(Партия)
	НаборЗаписей = РегистрыСведений.ИндНомер.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.индкод.Установить(Партия);
	НаборЗаписей.Прочитать(); 
	
	Если НаборЗаписей.Количество() = 1 Тогда
		НовыйНомер = НаборЗаписей[0]; 
		Полка = Справочники.Стеллаж.НайтиПоКоду("000000682"); 
		Поддон = Справочники.Поддоны.НайтиПоКоду("");
		Если Полка <> Справочники.Стеллаж.ПустаяСсылка() Тогда  	
				Лог =  " сменил полку с " + НовыйНомер.Стеллаж +" на " + Полка; 
				ЛогированиеЗаписей.ЛогированиеИндНомера(НовыйНомер.индкод,Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",Пользователи.ТекущийПользователь()).Код,Лог,Полка,,НовыйНомер.Стеллаж, НовыйНомер.Поддон);
				НовыйНомер.Стеллаж = Полка;
				НовыйНомер.Поддон = Поддон;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ВозвратТовара()
Возврат Перечисления.СтатусыТовараВЗаказНаряде.Возвращена;
КонецФункции // ВозвратТовара()

&НаКлиенте
Процедура ТоварыСуммаНалогПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке товара №" + ТекДанные.НомерСтроки + " налог на " + ТекДанные.СуммаНалог);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр, СтрокаТаблицы)
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
	//	ЗаписьЛога("Добавил строку работы №" + Число(ТекДанные.НомерСтроки));
	КонецЕсли;
	///-ГомзМА 22.12.2023
	

КонецПроцедуры

&НаКлиенте
Процедура РаботыСодержаниеПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил в строке работы №" + ТекДанные.НомерСтроки + " содержание на " + ТекДанные.Содержание);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил организацию на " + Объект.Организация);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил инициатора на " + Объект.Инициатор);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил клиента на " + Объект.Клиент);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил подразделение на " + Объект.Подразделение);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил комментарий на " + Объект.Комментарий);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказКлиентаПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил заявку на " + Объект.ЗаказКлиента);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура РешениеКлиентаПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил решение клиента на " + Объект.РешениеКлиента);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеРасчетовПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил расчеты на " + Объект.СостояниеРасчетов);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил начало периода на " + Объект.ДатаНачала);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	///+ГомзМА 22.12.2023
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаписьЛога("Изменил руководителя на" + Объект.НачалоПериода);
	КонецЕсли;
	///-ГомзМА 22.12.2023
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСостояниеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТоварыСостояниеНачалоВыбораИзСпискаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТоварыСостояниеНачалоВыбораИзСпискаНаСервере()

		
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьЭтикетку(Команда)
	/// Комлев 18/07/24 +++
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекДанные.Партия) Тогда
		Оповещение = Новый ОписаниеОповещения;
		ПоказатьПредупреждение(Оповещение, "Партия не заполнена.");
		Возврат;
	КонецЕсли;
	ТабДок = ПечатьэтикеткиСерв(ТекДанные.Партия);

	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("Этикетка");
	// Добавляем в коллекцию (тип массив) сформированный Табличный документ
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	// если требуется устанавливаем параметры печати
	КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].СинонимМакета = "Этикетка";  // используется для формирования имени файла при сохранении из общей формы печати документов
	// .. и выводим стандартной процедурой БСП
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, Неопределено, ЭтаФорма);
	
	/// Комлев 18/07/24 ---
КонецПроцедуры
&НаСервере
Функция ПечатьэтикеткиСерв(Ссылка)
	/// Комлев 18/07/24 ++++++++++++++++++++++++++++++++++++++++++++
	ТабДок = Новый ТабличныйДокумент;

	Макет = Справочники.Номенклатура.ПолучитьМакет("Этикетка");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндКодc.Наименование КАК Наименование,
	|	ИндКодc.Владелец КАК Владелец,
	|	ВЫРАЗИТЬ(ИндКодc.Владелец.Наименование КАК СТРОКА(39)) КАК Название,
	|	ИндКодc.Владелец.МестоНаСкладе2 КАК ВладелецМестоНаСкладе2,
	|	ИндКодc.Владелец.Бренд КАК Бренд,
	|	ИндКодc.Владелец.НомерПроизводителя КАК НомерПроизводителя,
	|	ИндКодc.Владелец.Производитель КАК Производитель,
	|	ИндНомер.Стеллаж КАК Стеллаж
	|ИЗ
	|	РегистрСведений.ИндНомер КАК ИндНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИндКод КАК ИндКодc
	|		ПО ИндНомер.индкод = ИндКодc.Ссылка
	|ГДЕ
	|	ИндНомер.индкод = &Ссылка";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьМакета = Макет.ПолучитьОбласть("ШтрихКод");
	ТабДок.Очистить();

	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования("");
	Штрихкод.Ширина = 250;
	Штрихкод.Высота = 250;
	Штрихкод.ТипКода = 16;
	Штрихкод.УровеньКоррекцииQR = 3;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = Строка(Ссылка);
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;

	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод, Истина);
	ФайлКартинки 			             = КартинкаШтрихКод;
	ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаШтрихКод;

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		ОбластьМакета.Параметры.Название = Выборка.Название;
		ОбластьМакета.Параметры.Код = Выборка.Наименование;
		//ОбластьМакета.Параметры.Место = Выборка.Стеллаж;
	КонецЦикла;   
	//Запись.Поддон = Справочники.Поддоны.ПустаяСсылка();
	//Запись.Стеллаж = Справочники.Стеллаж.НайтиПоКоду("000001072");
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Вывести(ОбластьМакета);
	Возврат табдок; 
	/// Комлев 18/07/24 ------
КонецФункции

