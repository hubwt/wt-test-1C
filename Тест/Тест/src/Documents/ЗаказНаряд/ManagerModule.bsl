#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	НомераТаблиц = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("МоментВремени", ДокументСсылка.МоментВремени());
	
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	// Ставки налогов
	СтавкаНДС = 0;
	
	Если Реквизиты.ЕстьУчетНДС Тогда
		СтавкаНДС = дт_ОбщегоНазначенияВызовСервераПовтИсп.СтавкаНДСПоУмолчанию(Реквизиты.Дата);
	КонецЕсли;
	
	КоэффициентНалогов = 1 / (1 + СтавкаНДС / 100);
	
	
	ДатаОстатков = ?(Реквизиты.Состояние = Перечисления.СостоянияЗаказНаряда.Выполнен, Реквизиты.ДатаОкончания, Реквизиты.Дата);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(ДатаОстатков, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Склад", Реквизиты.Склад);
	Запрос.УстановитьПараметр("ДатаНачалаХраненияТоваровНаКомиссии", '20200510');
	Запрос.УстановитьПараметр("КоэффициентНалогов", КоэффициентНалогов);
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст =
		ТекстЗапросаРаботы(НомераТаблиц)
		+ ТекстЗапросаМатериалы(НомераТаблиц)
		+ ТекстЗапросаТовары(НомераТаблиц)
		+ ТекстЗапросаТоварыНаКомиссии(НомераТаблиц)
		+ ТекстЗапросаПродажи(НомераТаблиц)
		+ ТекстЗапросаТоварыОрганизаций(НомераТаблиц)
		+ ТекстЗапросаПродажиСебестоимость(НомераТаблиц)
		+ ТекстЗапросаРасчетыСПоставщиками(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();

	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		Таблица =  Результат[НомерТаблицы.Значение].Выгрузить();
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Таблица);
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции


Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Клиент КАК Клиент,
	|	Реквизиты.Состояние КАК Состояние,
	|	Реквизиты.Автомобиль КАК Автомобиль,
	|	Реквизиты.Ответственный КАК Ответственный,
	|	Реквизиты.Мастер КАК Мастер,
	|	Реквизиты.ДатаНачала КАК ДатаНачала,
	|	Реквизиты.ДатаОкончания КАК ДатаОкончания,
	|	Реквизиты.СостояниеРасчетовКлиентаКомитента КАК СостояниеРасчетовКлиентаКомитента,
	|	Реквизиты.СуммаАгентские КАК СуммаАгентские,
	|	Реквизиты.Комитент КАК Комитент,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация.ЕстьУчетНДС КАК ЕстьУчетНДС,
	|	Реквизиты.Организация.ЕстьНалогНаПрибыль КАК ЕстьНалогНаПрибыль,
	|	ЕСТЬNULL(СтавкиПоРаботамСрезПоследних.Ставка, 0) КАК СтавкаФОТ
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ЗаказНаряд КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиПоРаботам.СрезПоследних(&МоментВремени,) КАК СтавкиПоРаботамСрезПоследних
	|		ПО ИСТИНА
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Ответственный КАК Ответственный,
	|	Реквизиты.Клиент КАК Клиент,
	|	Реквизиты.Состояние КАК Состояние,
	|	Реквизиты.Автомобиль КАК Автомобиль,
	|	Реквизиты.ДатаНачала КАК ДатаНачала,
	|	Реквизиты.ДатаОкончания КАК ДатаОкончания,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СостояниеРасчетовКлиентаКомитента КАК СостояниеРасчетовКлиентаКомитента,
	|	Реквизиты.СуммаАгентские КАК СуммаАгентские,
	|	Реквизиты.Комитент КАК Комитент,
	|	Реквизиты.Мастер КАК Мастер,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.ЕстьУчетНДС,
	|	Реквизиты.ЕстьНалогНаПрибыль,
	|	Реквизиты.СтавкаФОТ
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()


Функция ТекстЗапросаТовары(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА Док.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Док.СуммаВсего / Док.Количество
	|	КОНЕЦ КАК Цена,
	|	Док.Автомобиль КАК Автомобиль,
	|	Док.СуммаВсего КАК Сумма,
	|	Док.Склад КАК Склад,
	|	Док.Партия КАК Партия,
	|	Док.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И (Док.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Установлена)
	|	ИЛИ Док.Состояние = ЗНАЧЕНИЕ(Перечисление.СтатусыТовараВЗаказНаряде.Выдано))
	|	И Док.Партия <> ЗНАЧЕНИЕ(Справочник.ИндКод.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Реквизиты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Выполнен)
	|			ТОГДА Реквизиты.ДатаОкончания
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК Период,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА ВТ_Товары.Склад
	|		ИНАЧЕ Реквизиты.Склад
	|	КОНЕЦ КАК Склад,
	|	ВТ_Товары.Номенклатура КАК Товар,
	|	ВТ_Товары.Количество КАК Колво,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВТ_Товары.Автомобиль КАК машина,
	|	ВТ_Товары.Партия КАК индкод,
	|	ВТ_Товары.Состояние КАК Состояние
	|ИЗ
	|	Реквизиты КАК Реквизиты,
	|	ВТ_Товары КАК ВТ_Товары
	|ГДЕ
	|	Реквизиты.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Предварительный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()

Функция ТекстЗапросаМатериалы(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаМатериалы", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаМатериалы", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Количество КАК Количество,
	|	Док.Автомобиль КАК Автомобиль,
	|	Док.Склад КАК Склад,
	|	Док.Партия КАК Партия
	|ПОМЕСТИТЬ ВТ_Материалы
	|ИЗ
	|	Документ.ЗаказНаряд.Материалы КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Реквизиты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Выполнен)
	|			ТОГДА Реквизиты.ДатаОкончания
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК Период,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА ВТ_Товары.Склад
	|		ИНАЧЕ Реквизиты.Склад
	|	КОНЕЦ КАК Склад,
	|	ВТ_Товары.Номенклатура КАК Товар,
	|	ВТ_Товары.Количество КАК Колво,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВТ_Товары.Автомобиль КАК машина,
	|	ВТ_Товары.Партия КАК индкод
	|ИЗ
	|	Реквизиты КАК Реквизиты,
	|	ВТ_Материалы КАК ВТ_Товары
	|ГДЕ
	|	Реквизиты.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Предварительный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()

Функция ТекстЗапросаТоварыНаКомиссии(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТоварыНаКомиссии", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаТоварыНаКомиссии", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА Док.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Док.СуммаВсего / Док.Количество
	|	КОНЕЦ КАК Цена,
	|	Док.Автомобиль КАК Автомобиль,
	|	Док.СуммаВсего КАК Сумма,
	|	Док.Склад КАК Склад,
	|	Док.Партия КАК Партия
	|ПОМЕСТИТЬ ВТ_ТоварыНаКомиссии
	|ИЗ
	|	Документ.ЗаказНаряд.ТоварыНаКомиссии КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Реквизиты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Выполнен)
	|			ТОГДА Реквизиты.ДатаОкончания
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК Период,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Реквизиты.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА ВТ_Товары.Склад
	|		ИНАЧЕ Реквизиты.Склад
	|	КОНЕЦ КАК Склад,
	|	ВТ_Товары.Номенклатура КАК Товар,
	|	ВТ_Товары.Количество КАК Колво,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВТ_Товары.Автомобиль КАК машина,
	|	ВТ_Товары.Партия КАК индкод
	|ИЗ
	|	Реквизиты КАК Реквизиты,
	|	ВТ_ТоварыНаКомиссии КАК ВТ_Товары
	|ГДЕ
	|	Реквизиты.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Предварительный)
	|	И Реквизиты.Дата >= &ДатаНачалаХраненияТоваровНаКомиссии
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()


Функция ТекстЗапросаРаботы(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаРаботы", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаИсполнители", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаИсполнителиКоличество", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРаботыИсполнители", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРаботы", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРаботы", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРаботы", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Работы.НомерСтроки КАК НомерСтроки,
	|	Работы.Работа КАК Работа,
	|	Работы.Количество КАК Количество,
	|	Работы.СуммаВсего * &КоэффициентНалогов КАК Сумма,
	|	Работы.ВремяПлан КАК ВремяПлан,
	|	Работы.ВремяФакт КАК ВремяФакт,
	|	Работы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_Работы
	|ИЗ
	|	Документ.ЗаказНаряд.Работы КАК Работы
	|ГДЕ
	|	Работы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исполнители.Дата КАК Дата,
	|	Исполнители.Исполнитель КАК Исполнитель,
	|	Исполнители.Процент КАК Процент,
	|	Исполнители.ВремяФакт КАК ВремяФакт,
	|	Исполнители.ИдентификаторСтрокиРодитель КАК ИдентификаторСтрокиРодитель,
	|	Исполнители.ВремяНорм КАК ВремяНорм
	|ПОМЕСТИТЬ ВТ_Исполнители
	|ИЗ
	|	Документ.ЗаказНаряд.Исполнители КАК Исполнители
	|ГДЕ
	|	Исполнители.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Работы.НомерСтроки КАК НомерСтроки,
	|	КОЛИЧЕСТВО(ЕСТЬNULL(ВТ_Исполнители.Исполнитель, 0)) КАК КоличествоИсполнителей
	|ПОМЕСТИТЬ ВТ_ИсполнителиКоличество
	|ИЗ
	|	ВТ_Работы КАК ВТ_Работы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исполнители КАК ВТ_Исполнители
	|		ПО ВТ_Работы.ИдентификаторСтроки = ВТ_Исполнители.ИдентификаторСтрокиРодитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Работы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Работы.НомерСтроки КАК НомерСтроки,
	|	ВТ_Работы.Работа КАК Работа,
	|	ВЫБОР
	|		КОГДА ВТ_ИсполнителиКоличество.КоличествоИсполнителей <= 1
	|			ТОГДА ВТ_Работы.Количество
	|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_Работы.Количество / ВТ_ИсполнителиКоличество.КоличествоИсполнителей КАК ЧИСЛО(12, 3))
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_ИсполнителиКоличество.КоличествоИсполнителей <= 1
	|			ТОГДА ВТ_Работы.Сумма
	|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_Работы.Сумма / ВТ_ИсполнителиКоличество.КоличествоИсполнителей КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВТ_ИсполнителиКоличество.КоличествоИсполнителей <= 1
	|			ТОГДА ВТ_Работы.ВремяПлан
	|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_Работы.ВремяПлан / ВТ_ИсполнителиКоличество.КоличествоИсполнителей КАК ЧИСЛО(15, 3))
	|	КОНЕЦ КАК ВремяПлан,
	|	ВТ_Исполнители.ВремяФакт КАК ВремяФакт,
	|	ВТ_Исполнители.Дата КАК Дата,
	|	ВТ_Исполнители.Исполнитель КАК Исполнитель,
	|	ВТ_Исполнители.ВремяНорм КАК ВремяНорм
	|ПОМЕСТИТЬ ВТ_РаботыИсполнители
	|ИЗ
	|	ВТ_Работы КАК ВТ_Работы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Исполнители КАК ВТ_Исполнители
	|		ПО ВТ_Работы.ИдентификаторСтроки = ВТ_Исполнители.ИдентификаторСтрокиРодитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсполнителиКоличество КАК ВТ_ИсполнителиКоличество
	|		ПО ВТ_Работы.НомерСтроки = ВТ_ИсполнителиКоличество.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаряд.ЗаказНарядВнутренний)
	|				И Работы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Работы.Дата
	|		КОГДА Реквизиты.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Реквизиты.Дата
	|		ИНАЧЕ Реквизиты.ДатаОкончания
	|	КОНЕЦ КАК Период,
	|	Работы.НомерСтроки КАК НомерСтроки,
	|	Работы.Работа КАК Работа,
	|	Работы.Количество КАК Количество,
	|	Реквизиты.Автомобиль КАК Автомобиль,
	|	Реквизиты.Клиент КАК Клиент,
	|	Работы.Сумма КАК Сумма,
	|	Работы.ВремяПлан КАК ВремяПлан,
	|	Работы.ВремяФакт КАК ВремяФакт,
	|	Работы.Исполнитель КАК Исполнитель,
	|	Работы.ВремяПлан * Реквизиты.СтавкаФОТ КАК СуммаФОТ,
	|	Работы.ВремяНорм КАК ВремяНорм
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РаботыИсполнители КАК Работы
	|		ПО (Работы.Количество <> 0
	|				ИЛИ Работы.ВремяПлан <> 0
	|				ИЛИ Работы.ВремяФакт <> 0
	|				ИЛИ Работы.Сумма <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции
 // ТекстЗапросаРеквизиты()

Функция ТекстЗапросаПродажи(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаПродажи", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.ДатаОкончания КАК Период,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Ответственный КАК Менеджер,
	|	ВТ_Товары.Автомобиль КАК Автомобиль,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.Сумма КАК Сумма,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	0 КАК Приоритет
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (Реквизиты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Выполнен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.ДатаОкончания,
	|	ВТ_Товары.НомерСтроки,
	|	Реквизиты.Организация,
	|	Реквизиты.Ответственный,
	|	ВТ_Товары.Автомобиль,
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Количество,
	|	ВТ_Товары.Цена,
	|	ВТ_Товары.Сумма,
	|	Реквизиты.Подразделение,
	|	1
	|ИЗ
	|	ВТ_ТоварыНаКомиссии КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (Реквизиты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Выполнен))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	НомерСтроки";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()

Функция ТекстЗапросаТоварыОрганизаций(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТоварыГр", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТоварыСебестоимость", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаТоварыОрганизаций", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(ВТ_Товары.НомерСтроки) КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Склад КАК Склад,
	|	ВТ_Товары.Партия КАК Партия,
	|	СУММА(ВТ_Товары.Количество) КАК Количество,
	|	ВТ_Товары.Автомобиль КАК Автомобиль
	|ПОМЕСТИТЬ ВТ_ТоварыГр
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Склад,
	|	ВТ_Товары.Партия,
	|	ВТ_Товары.Автомобиль
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ_Материалы.НомерСтроки),
	|	ВТ_Материалы.Номенклатура,
	|	ВТ_Материалы.Склад,
	|	ВТ_Материалы.Партия,
	|	СУММА(ВТ_Материалы.Количество),
	|	ВТ_Материалы.Автомобиль
	|ИЗ
	|	ВТ_Материалы КАК ВТ_Материалы
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Материалы.Номенклатура,
	|	ВТ_Материалы.Склад,
	|	ВТ_Материалы.Партия,
	|	ВТ_Материалы.Автомобиль
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ_ТоварыНаКомиссии.НомерСтроки),
	|	ВТ_ТоварыНаКомиссии.Номенклатура,
	|	Реквизиты.Склад,
	|	ВТ_ТоварыНаКомиссии.Партия,
	|	СУММА(ВТ_ТоварыНаКомиссии.Количество),
	|	ВТ_ТоварыНаКомиссии.Автомобиль
	|ИЗ
	|	ВТ_ТоварыНаКомиссии КАК ВТ_ТоварыНаКомиссии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО ИСТИНА
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТоварыНаКомиссии.Номенклатура,
	|	Реквизиты.Склад,
	|	ВТ_ТоварыНаКомиссии.Партия,
	|	ВТ_ТоварыНаКомиссии.Автомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Склад КАК Склад,
	|	ВТ_Товары.Автомобиль КАК Автомобиль,
	|	ВТ_Товары.Партия КАК Партия,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		КОГДА ТоварыОрганизацийОстатки.КоличествоОстаток > ВТ_Товары.Количество
	|			ТОГДА ВЫРАЗИТЬ(ТоварыОрганизацийОстатки.СтоимостьОстаток * ВТ_Товары.Количество /
	|				ТоварыОрганизацийОстатки.КоличествоОстаток КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТоварыОрганизацийОстатки.СтоимостьОстаток
	|	КОНЕЦ КАК Стоимость
	|ПОМЕСТИТЬ ВТ_ТоварыСебестоимость
	|ИЗ
	|	ВТ_ТоварыГр КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментВремени, Склад = &Склад
	|		И (Номенклатура, Партия) В
	|			(ВЫБРАТЬ
	|				ВТ_ТоварыГр.Номенклатура,
	|				ВТ_ТоварыГр.Партия
	|			ИЗ
	|				ВТ_ТоварыГр)) КАК ТоварыОрганизацийОстатки
	|		ПО ВТ_Товары.Номенклатура = ТоварыОрганизацийОстатки.Номенклатура
	|		И ВТ_Товары.Партия = ТоварыОрганизацийОстатки.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Выполнен)
	|			ТОГДА Реквизиты.ДатаОкончания
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	ВТ_Товары.Склад КАК Склад,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Партия КАК Партия,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.Стоимость КАК Стоимость
	|ИЗ
	|	ВТ_ТоварыСебестоимость КАК ВТ_Товары,
	|	Реквизиты КАК Реквизиты
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()

Функция ТекстЗапросаПродажиСебестоимость(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаПродажиСебестоимость", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Реквизиты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Выполнен)
	|			ТОГДА Реквизиты.ДатаОкончания
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Автомобиль КАК Автомобиль,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.Стоимость КАК Стоимость
	|ИЗ
	|	ВТ_ТоварыСебестоимость КАК ВТ_Товары,
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()

Функция ТекстЗапросаРасчетыСПоставщиками(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРасчетыСПоставщиками", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Выполнен)
	|			ТОГДА Реквизиты.ДатаОкончания
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Комитент КАК Контрагент,
	|   -Реквизиты.СуммаАгентские КАК Сумма
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|ГДЕ
	|	Реквизиты.СостояниеРасчетовКлиентаКомитента = ЗНАЧЕНИЕ(Перечисление.СостоянияВзаиморасчетов.Оплачено)
	|	И Реквизиты.Дата < &ДатаНачалаХраненияТоваровНаКомиссии";

	Возврат ТекстЗапроса + дт_ОбщегоНазначенияВызовСервераПовтИсп.ТекстРазделителяЗапросовПакета();
	

КонецФункции // ТекстЗапросаРеквизиты()


// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументОбъект, ИмяТЧ, ПараметрыПроведения, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	
	//СтруктураВременныеТаблицы = ПараметрыПроведения.ТаблицаЗапланированныеОтгрузки;
	СтруктураВременныеТаблицы = ПараметрыПроведения.ДляПроведения.СтруктураВременныеТаблицы;
	
		
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДвиженияТовары.Склад КАК Склад,
	|	ДвиженияТовары.Товар КАК Номенклатура,
	|	ДвиженияТовары.машина КАК Автомобиль,
	|	ДвиженияТовары.индкод КАК Партия,
	|	ВЫБОР
	|		КОГДА ДвиженияТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ДвиженияТовары.Колво
	|		ИНАЧЕ -ДвиженияТовары.Колво
	|	КОНЕЦ КАК КоличествоИзменение,
	|	ДвиженияТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ДвиженияТовары
	|ИЗ
	|	&ДвиженияТовары КАК ДвиженияТовары
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДвиженияТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДвиженияТовары.Колво
	|			ИНАЧЕ -ДвиженияТовары.Колво
	|		КОНЕЦ < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияТовары.Номенклатура) КАК НоменклатураПредставление,
	|	ДвиженияТовары.Склад КАК Склад,
	|	ДвиженияТовары.Номенклатура КАК Товар,
	|	ДвиженияТовары.Автомобиль КАК Автомобиль,
	|	ДвиженияТовары.Партия КАК индкод,
	|	ДвиженияТовары.КоличествоИзменение КАК КоличествоИзменение,
	|	ДвиженияТовары.НомерСтроки КАК НомерСтроки,
	|	ТоварыОстатки.КолвоОстаток КАК Количество
	|ИЗ
	|	ВТ_ДвиженияТовары КАК ДвиженияТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки(&МоментКонтроля, ) КАК ТоварыОстатки
	|		ПО ДвиженияТовары.Номенклатура = ТоварыОстатки.Товар
	|			И ДвиженияТовары.Склад = ТоварыОстатки.Склад
	|			И ДвиженияТовары.Автомобиль = ТоварыОстатки.машина
	|			И ДвиженияТовары.Партия = ТоварыОстатки.индкод
	|ГДЕ
	|	ЕСТЬNULL(ТоварыОстатки.КолвоОстаток, 0) < 0";
	
	//Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ТаблицаИсточник = ПараметрыПроведения.ТаблицыДляДвижений["Таблица" + ИмяТЧ];
	Запрос.УстановитьПараметр("МоментКонтроля", ПараметрыПроведения.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ДвиженияТовары", ТаблицаИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	// Отрицательный остаток по счету
	Если НЕ РезультатЗапроса.Пустой() Тогда
		//ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// определим индекс строки табличной части для отображения баллона
			ПараметрыПоискаСтроки = Новый Структура("Товар,индкод");
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаСтроки, Выборка);
			СтрокиТабличнойЧасти = ТаблицаИсточник.НайтиСтроки(ПараметрыПоискаСтроки);
			
			Поле = "";
			НомерСтроки = 0;
			
			Если СтрокиТабличнойЧасти.Количество() <> 0 Тогда
				
				НомерСтроки = СтрокиТабличнойЧасти[0].НомерСтроки;
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, НомерСтроки, "Количество");
				
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				"Таблица %1, строка %2: Количество товара %3 (код %4) превышает остаток по складу %5. Нехватка: %6", 
				ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Синоним,
				НомерСтроки,
				Выборка.НоменклатураПредставление,
				Выборка.индкод,
				Выборка.Склад,
				//Выборка.КоличествоИзменение, 
				-Выборка.Количество);
			
			
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьКонтроль()

Процедура ВыполнитьКонтрольТоварыОрганизаций(ДокументОбъект, ИмяТЧ, ПараметрыПроведения, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если НЕ Константы.дт_КонтролироватьОстаткиТоваровОрганизаций.Получить() Тогда
		Возврат
	КонецЕсли;
	
	//СтруктураВременныеТаблицы = ПараметрыПроведения.ТаблицаЗапланированныеОтгрузки;
	СтруктураВременныеТаблицы = ПараметрыПроведения.ДляПроведения.СтруктураВременныеТаблицы;
	
		
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДвиженияТовары.Организация КАК Организация,
	|	ДвиженияТовары.Склад КАК Склад,
	|	ДвиженияТовары.Номенклатура КАК Номенклатура,
	|	ДвиженияТовары.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ДвиженияТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ДвиженияТовары.Количество
	|		ИНАЧЕ -ДвиженияТовары.Количество
	|	КОНЕЦ КАК КоличествоИзменение,
	|	ДвиженияТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ДвиженияТоварыОрганизаций
	|ИЗ
	|	&ДвиженияТовары КАК ДвиженияТовары
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДвиженияТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДвиженияТовары.Количество
	|			ИНАЧЕ -ДвиженияТовары.Количество
	|		КОНЕЦ < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияТовары.Номенклатура) КАК НоменклатураПредставление,
	|	ДвиженияТовары.Организация КАК Организация,
	|	ДвиженияТовары.Склад КАК Склад,
	|	ДвиженияТовары.Номенклатура КАК Номенклатура,
	|	ДвиженияТовары.Партия КАК Партия,
	|	ДвиженияТовары.КоличествоИзменение КАК КоличествоИзменение,
	|	ДвиженияТовары.НомерСтроки КАК НомерСтроки,
	|	ТоварыОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	ВТ_ДвиженияТоварыОрганизаций КАК ДвиженияТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментКонтроля, ) КАК ТоварыОстатки
	|		ПО ДвиженияТовары.Номенклатура = ТоварыОстатки.Номенклатура
	|			И ДвиженияТовары.Организация = ТоварыОстатки.Организация
	|			И ДвиженияТовары.Склад = ТоварыОстатки.Склад
	|			И ДвиженияТовары.Партия = ТоварыОстатки.Партия
	|ГДЕ
	|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) < 0";
	
	//Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ТаблицаИсточник = ПараметрыПроведения.ТаблицыДляДвижений["ТаблицаТоварыОрганизаций"];
	Запрос.УстановитьПараметр("МоментКонтроля", ПараметрыПроведения.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ДвиженияТовары", ТаблицаИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	// Отрицательный остаток по счету
	Если НЕ РезультатЗапроса.Пустой() Тогда
		//ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// определим индекс строки табличной части для отображения баллона
			ПараметрыПоискаСтроки = Новый Структура("Номенклатура,Партия");
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаСтроки, Выборка);
			СтрокиТабличнойЧасти = ТаблицаИсточник.НайтиСтроки(ПараметрыПоискаСтроки);
			
			Поле = "";
			НомерСтроки = 0;
			
			Если СтрокиТабличнойЧасти.Количество() <> 0 Тогда
				
				НомерСтроки = СтрокиТабличнойЧасти[0].НомерСтроки;
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, НомерСтроки, "Количество");
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				"Строка %1: Количество %2 %3 (код %4) превышает остаток по организации %5 и складу %6. Нехватка: %7", 
				НомерСтроки, 
				?(ИмяТЧ = "Материалы", "материала", "товара"),
				Выборка.НоменклатураПредставление,
				Выборка.Партия,
				Выборка.Организация,
				Выборка.Склад,
				//Выборка.КоличествоИзменение, 
				-Выборка.Количество);
			
			
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьКонтроль()

#КонецОбласти 




#Область Печать
// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказНаряд";
	КомандаПечати.Представление = НСтр("ru = 'Заказ-наряд'");
	//КомандаПечати.ФункциональныеОпции = "дт_ИспользоватьАвтосервис";
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказНарядВнутренний";
	КомандаПечати.Представление = НСтр("ru = 'Заказ-наряд внутренний'");
	КомандаПечати.ФункциональныеОпции = "дт_ИспользоватьЗаказНарядВнутренний";
	КомандаПечати.Порядок = 11;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БланкВеденияРемонта";
	КомандаПечати.Представление = НСтр("ru = 'Бланк ведения ремонта'");
	КомандаПечати.Порядок = 12;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru = 'Акт'");
	КомандаПечати.Порядок = 15;
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
		КомандаПечати, 
		"НомерУПД",
		"",
		ВидСравнения.НеРавно
	);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.Порядок = 20;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (с печатью)'");
	КомандаПечати.ДополнительныеПараметры.Вставить("СПечатью", Истина);
	КомандаПечати.Порядок       = 30;
	
	
	// Универсальный передаточный документ (УПД)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "УПД";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Не Пользователи.РолиДоступны("дт_ПечатьНепроведенныхДокументов");
	КомандаПечати.Порядок = 40;
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
		КомандаПечати, 
		"НомерУПД",
		"",
		ВидСравнения.НеРавно
	);
	
	
	// Универсальный передаточный документ (УПД) с печатью
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "УПД";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД) с печатью'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Не Пользователи.РолиДоступны("дт_ПечатьНепроведенныхДокументов");
	КомандаПечати.Порядок = 41;
	КомандаПечати.ДополнительныеПараметры.Вставить("СПечатью", Истина);
	
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
		КомандаПечати, 
		"НомерУПД",
		"",
		ВидСравнения.НеРавно
	);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НарядНаСборку";
	КомандаПечати.Представление = НСтр("ru = 'Наряд на сборку'");
	КомандаПечати.Порядок       = 50;
	
	//Сергеев
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасчетЗП";
	КомандаПечати.Представление = НСтр("ru = 'Расчёт ЗП'");
	КомандаПечати.Порядок       = 60;
	
	///+ГомзМА 10.03.2023
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОВыполненииСроковРабот";
	КомандаПечати.Представление = НСтр("ru = 'Акт о выполнении сроков работ'");
	КомандаПечати.Порядок       = 70;
	
	///-ГомзМА 10.03.2023
	
	
	///+Сергеев 12.04.2023
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДефектовочныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Дефектовочный лист'");
	КомандаПечати.Порядок       = 80;
	///-Сергеев 12.04.2023
	
КонецПроцедуры

// Сформировать печатные формы объектов
//Акт о выполнении сроков работ
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаряд") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаряд", "Заказ-наряд", 
			ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати),,"Документ.ЗаказНаряд.ПФ_MXL_ЗаказНаряд");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНарядВнутренний") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНарядВнутренний", "Заказ-наряд внутренний", 
			ПечатьЗаказНарядВнутренний(МассивОбъектов, ОбъектыПечати),,"Документ.ЗаказНаряд.ПФ_MXL_ЗаказНарядВнутренний");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", "Акт", 
			ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати, "Акт"),,"Документ.ЗаказНаряд.ПФ_MXL_Акт");
	КонецЕсли;
	
	СПечатью = Ложь;
	Если ПараметрыПечати.Свойство("СПечатью") Тогда
		СПечатью = ПараметрыПечати.СПечатью;
	КонецЕсли;
	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплату", "Счет на оплату", 
			ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, СПечатью),,"Документ.ПредварительныйСчет.ПФ_MXL_СчетЗаказ");
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НарядНаСборку") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НарядНаСборку", "Наряд на сборку", 
			ПечатьНарядНаСборку(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БланкВеденияРемонта") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "БланкВеденияРемонта", "Бланк ведения ремонта", 
			ПечатьБланкВеденияРемонта(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетЗП") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетЗП", "Расчет ЗП", 
			ПечатьЗаказНарядЗП(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	///+ГомзМА 10.03.2023
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОВыполненииСроковРабот") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОВыполненииСроковРабот", "Акт о выполнении сроков работ", 
		ПечатьАктОВыполненииСроковРабот(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	///-ГомзМА 10.03.2023
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДефектовочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ДефектовочныйЛист", "Дефектовочный лист", 
		ПечатьДефектовочныйЛист(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	
		
	//ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов,
	//	КоллекцияПечатныхФорм,
	//	ОбъектыПечати,
	//	ПараметрыВывода);
	
КонецПроцедуры

Функция ПолучитьОбластьЗаказНаряда(Макет, ИмяОбласти, ЕстьСкидка, ЭтоТаблица = Ложь)
	
	Результат = Новый Массив();
	
	Если ЭтоТаблица Тогда
		Результат.Добавить(Макет.ПолучитьОбласть(ИмяОбласти + "|Основная"));
		Если ЕстьСкидка Тогда
			Результат.Добавить(Макет.ПолучитьОбласть(ИмяОбласти + "|Скидка"));
		КонецЕсли;
		Результат.Добавить(Макет.ПолучитьОбласть(ИмяОбласти + "|Сумма"));
	Иначе
		Результат.Добавить(Макет.ПолучитьОбласть(ИмяОбласти));
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции // ПолучитьОбластьЗаказНаряда()
Функция ПолучитьОбластьДефектовочногоЛиста(Макет, ИмяОбласти, ЕстьСкидка, ЭтоТаблица = Ложь)
	
	Результат = Новый Массив();
	

		Результат.Добавить(Макет.ПолучитьОбласть(ИмяОбласти));

	
	Возврат Результат;	

КонецФункции // ПолучитьОбластьЗаказНаряда()


Процедура ЗаполнитьПараметрыОбласти(Области, Источник)
	
	Для каждого Область Из Области Цикл
	
		Область.Параметры.Заполнить(Источник);
	
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, Области)
	
	ТабличныйДокумент.Вывести(Области[0]);
	
	Для Инд = 1 По Области.Количество() - 1 Цикл
		ТабличныйДокумент.Присоединить(Области[Инд]);
	КонецЦикла;

КонецПроцедуры

Функция ПечатьДефектовочныйЛист(МассивОбъектов, ОбъектыПечати)
	

ДанныеПечатиШапки  = ПолучитьДанныеПечатиДефектовочныйЛистШапка(МассивОбъектов);
ДанныеПечатиТаб    = ПолучитьДанныеПечатиДефектовочныйЛистТаб(МассивОбъектов);
ДанныеПечатиПодвал = ПолучитьДанныеПечатиДефектовочныйЛистПодвал(МассивОбъектов);

	Шапка 		 = ДанныеПечатиШапки;

	ТабДок = Новый ТабличныйДокумент;
	Макет  = Документы.ЗаказНаряд.ПолучитьМакет("ПФ_MXL_ДефектовочныйЛист");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка 	 = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкатаб  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьТаблица 	 = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодпись 	 = Макет.ПолучитьОбласть("Подпись");
	
	Шапка.Следующий();
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Заполнить(Шапка);  
	Штрихкод =  ГенераторШтрихКода.ПолучитьКомпонентуШтрихКодирования(""); 
	Штрихкод.Ширина = 140; 
	Штрихкод.Высота = 140;
	Штрихкод.ТипКода = 16;
	Штрихкод.УголПоворота = 0;
	Штрихкод.ЗначениеКода = Шапка.Номер;
	Штрихкод.ПрозрачныйФон = Истина;
	Штрихкод.ОтображатьТекст = Ложь;
	
	ДвоичныйШтрихКод = штрихкод.ПолучитьШтрихКод();
	КартинкаШтрихКод = Новый Картинка(ДвоичныйШтрихКод,Истина);
	ФайлКартинки 			             = КартинкаШтрихКод;
	ОбластьШапка.Рисунки.QrКод.Картинка = КартинкаШтрихКод;

	ТабДок.Вывести(ОбластьШапка);
	
	ТабДок.Вывести(ОбластьШапкатаб);
	
	Пока ДанныеПечатиТаб.следующий() Цикл
		Если Не ЗначениеЗаполнено(ДанныеПечатиТаб.Автомобиль) и ЗначениеЗаполнено(ДанныеПечатиТаб.Статус)  тогда
			ОбластьТаблица.Параметры.Заполнить(ДанныеПечатиТаб);
			ТабДок.Вывести(ОбластьТаблица);
		КонецЕсли;
	КонецЦикла;
	
	Слесари    = "";
	Мастера    = "";
	Кладовщики = "";
	Менеджеры  = "";
	Сборщики   = "";
	
	Пока ДанныеПечатиПодвал.следующий() Цикл
		Наименование = СтрРазделить(ДанныеПечатиПодвал.ФИО," ");
		ФИО 		 = Наименование[0] + " " + Лев(Наименование[1],1) + "." + Лев(Наименование[2],1)+ ".";
		
		 Если ДанныеПечатиПодвал.Роль = Перечисления.дт_РолиВПродаже.Кладовщик тогда
			 Кладовщики = Кладовщики + " " + ФИО;
		 КонецЕсли;
		 
		 Если ДанныеПечатиПодвал.Роль = Перечисления.дт_РолиВПродаже.Механик тогда
			 Слесари = Слесари + " " + ФИО;
		 КонецЕсли;
		 
		 Если ДанныеПечатиПодвал.Роль = Перечисления.дт_РолиВПродаже.Мастер тогда
			 Мастера = Мастера + " " + ФИО;
		 КонецЕсли;
		 
		 Если ДанныеПечатиПодвал.Роль = Перечисления.дт_РолиВПродаже.Продавец тогда
			 Менеджеры = Менеджеры + " " + ФИО;
		 КонецЕсли;
		 
		 Если ДанныеПечатиПодвал.Роль = Перечисления.дт_РолиВПродаже.Сборщик тогда
			 Сборщики = Сборщики + " " + ФИО;
		 КонецЕсли;
		 	
	КонецЦикла;
   // ОбластьПодпись.Параметры.Кладовщики = Кладовщики ;
	ОбластьПодпись.Параметры.Слесари 	= Слесари;
	ОбластьПодпись.Параметры.Мастера 	= Мастера;
	ОбластьПодпись.Параметры.Менеджеры  = Менеджеры;
	ОбластьПодпись.Параметры.Сборщики   = Сборщики;
	
	ТабДок.Вывести(ОбластьПодпись);

	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	табдок.АвтоМасштаб = Истина;


	Возврат ТабДок;
КонецФункции


// Процедура печати документа.
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму;
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
//  ИмяМакета      - Строка - "Счет" или "Заказ".
//  ВыводитьПлатежныеРеквизиты - Булево - если Истина, выводит шапку с платежными реквизитами в счете.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ЗаказНаряд", ВыводитьТоварыНаКомиссии = Истина) Экспорт
	
	ДанныеПечати = ПолучитьДанныеПечатиЗаказНаряда(МассивОбъектов);
	
	Шапка      	= ДанныеПечати.Шапка;
	ВыборкаТовары = ДанныеПечати.Товары;
	ВыборкаРаботы = ДанныеПечати.Работы;
	ВыборкаМатериалы = ДанныеПечати.Материалы;
	ВыборкаМатериалыЗаказчика = ДанныеПечати.МатериалыЗаказчика;
	ВыборкаТоварыНаКомиссии = ДанныеПечати.ТоварыНаКомиссии;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ЗаказНаряд_Основной";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_" + ИмяМакета);
	ФорматДаты = "ДФ='dd.MM.yyyy ""г.""'";
	ФорматДатаВремя = "ДЛФ=DT; ДП=---";
	
	Сообщить("ВНИМАНИЕ! Не забудьте вернуть клиенту свидетельство о регистрации");
	
	ВыводитьТолькоУслуги = ИмяМакета = "Акт";
	ВыводитьПустойДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
		ВыборкаТовары.Сбросить();
		ВыборкаРаботы.Сбросить();
		ВыборкаМатериалы.Сбросить();
		ВыборкаМатериалыЗаказчика.Сбросить();
		ВыборкаТоварыНаКомиссии.Сбросить();
		
		ЕстьТовары = ВыборкаТовары.НайтиСледующий(СтруктураПоиска) И НЕ ВыводитьТолькоУслуги;
		ЕстьРаботы = ВыборкаРаботы.НайтиСледующий(СтруктураПоиска);
		ЕстьМатериалы = ВыборкаМатериалы.НайтиСледующий(СтруктураПоиска) И НЕ ВыводитьТолькоУслуги;
		ЕстьМатериалыЗаказчика = ВыборкаМатериалыЗаказчика.НайтиСледующий(СтруктураПоиска) И НЕ ВыводитьТолькоУслуги;
		ЕстьТоварыНаКомиссии = ВыборкаТоварыНаКомиссии.НайтиСледующий(СтруктураПоиска) 
		    И ВыводитьТоварыНаКомиссии
			И НЕ ВыводитьТолькоУслуги;
		ЕстьПричинаОбращения =  НЕ ВыводитьТолькоУслуги;
		ЕстьСкидка = Шапка.ЕстьСкидки;
	
		
		Если НЕ ВыводитьПустойДокумент
			И НЕ ЕстьТовары
			И НЕ ЕстьРаботы
			И НЕ ЕстьМатериалы
			И Не ЕстьМатериалыЗаказчика Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют табличные части. Печать не требуется'"),
				Шапка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Шапка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		СведенияОКлиенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Клиент, Шапка.ДатаДокумента);
		
		
		ДанныеПечатиШапкаДоп = Новый Структура();
		ДанныеПечатиШапкаДоп.Вставить("НаименованиеДокумента", ?(Шапка.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен"), "Предварительный заказ-наряд", "Заказ-наряд"));
		ДанныеПечатиШапкаДоп.Вставить("Номер", дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.Номер));
		Если Шапка.Дата < '20200301' Тогда
			ДанныеПечатиШапкаДоп.Вставить("НомерДокумента", дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
		Иначе	
			ДанныеПечатиШапкаДоп.Вставить("НомерДокумента", ДанныеПечатиШапкаДоп.Номер);
		КонецЕсли;	
		ДанныеПечатиШапкаДоп.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, ФорматДаты));
		
		Если ИмяМакета = "Акт" И Шапка.ДатаДокумента >= '20200601'Тогда 
			ДанныеПечатиШапкаДоп.Вставить("НомерДокумента", дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.НомерУПД));
			ДанныеПечатиШапкаДоп.Вставить("ДатаДокумента", Формат(Шапка.ДатаУПД, ФорматДаты));
		КонецЕсли;
		
		ДанныеПечатиШапкаДоп.Вставить("АвтомобильГодВыпуска", Формат(Шапка.АвтомобильГодВыпуска, "ЧГ=0"));
		ДанныеПечатиШапкаДоп.Вставить("ДатаНачала", Формат(Шапка.ДатаНачала, ФорматДатаВремя));
		ДанныеПечатиШапкаДоп.Вставить("ДатаОкончания", Формат(Шапка.ДатаОкончания, ФорматДатаВремя));
		ДанныеПечатиШапкаДоп.Вставить("Ответственный", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.Ответственный));
		ДанныеПечатиШапкаДоп.Вставить("ИсполнительПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны"));
		ДанныеПечатиШапкаДоп.Вставить("ФирмаПолноеНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП"));
		ДанныеПечатиШапкаДоп.Вставить("ФирмаАдресЮридический", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
		ДанныеПечатиШапкаДоп.Вставить("ЗаказчикПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКлиенте, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны"));
		ДанныеПечатиШапкаДоп.Вставить("ЗаказчикПолноеНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКлиенте, "НаименованиеДляПечатныхФорм"));
		ДанныеПечатиШапкаДоп.Вставить("Сумма", Шапка.СуммаДокумента);
		
		Если ВыводитьТолькоУслуги Тогда
			СуммаДокумента = 0;
			СуммаНДС = 0;
		Иначе
			СуммаДокумента = Шапка.СуммаДокумента;
			СуммаНДС = Шапка.НДС;
		КонецЕсли;
		
		ДанныеПечатиШапкаДоп.Вставить("ТекстДоверенноеЛицо", 
			?(ЗначениеЗаполнено(Шапка.КонтактноеЛицо),
			СтрШаблон("Доверенное лицо: %1, тел.%2", Шапка.КонтактноеЛицо, Шапка.КонтактноеЛицоТелефон),
			"")
		);
		
		
		ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "Шапка", ЕстьСкидка);
		
		//ОбластьМакета.Параметры.Заполнить(Шапка);
		//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
		ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
		ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиШапкаДоп);
		
		//ТабличныйДокумент.Вывести(ОбластьМакета);
		ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
		
		Если ЕстьПричинаОбращения Тогда
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "Причина", ЕстьСкидка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
			
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
		КонецЕсли;
		
		
		// Работы
		Если ЕстьРаботы Тогда
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "Услуги2", ЕстьСкидка, Истина);
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
			СуммаВсего = 0;
			СкидкаСумма = 0;
			Количество = 0;
	        Сумма = 0;
			НДС = 0;
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "СтрокаРабот2", ЕстьСкидка, Истина);
			СтрокаВыборки = ВыборкаРаботы.Выбрать();
			Пока СтрокаВыборки.Следующий() Цикл
				
				//ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ЗаполнитьПараметрыОбласти(ОбластьМакета, СтрокаВыборки);
				
				Если ЗначениеЗаполнено(СтрокаВыборки.НаименованиеДополнительно) Тогда
					
					ДанныеПечатиДоп = Новый Структура();
					ДанныеПечатиДоп.Вставить("Наименование", СтрокаВыборки.Наименование + ". " + СтрокаВыборки.НаименованиеДополнительно);
					//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
					ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиДоп);
					
				КонецЕсли;
				
				ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
				//ТабличныйДокумент.Вывести(ОбластьМакета);
				
				Сумма = Сумма  + СтрокаВыборки.Сумма;
				СуммаВсего = СуммаВсего  + СтрокаВыборки.СуммаВсего;
				СкидкаСумма = СкидкаСумма + СтрокаВыборки.СкидкаСумма;
				Количество = Количество + СтрокаВыборки.Количество;
				НДС = НДС + СтрокаВыборки.НДС;
			КонецЦикла;
			
			ДанныеПечатиДоп = Новый Структура();
			ДанныеПечатиДоп.Вставить("Сумма", Сумма);
			ДанныеПечатиДоп.Вставить("СуммаВсего", СуммаВсего);
			ДанныеПечатиДоп.Вставить("СкидкаСумма", СкидкаСумма);
			ДанныеПечатиДоп.Вставить("Количество", Количество);
			ДанныеПечатиДоп.Вставить("НДС", НДС);
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "ПодвалУслуги2", ЕстьСкидка, Истина);
			//ОбластьМакета.Параметры.Заполнить(Шапка);
			//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
			ЗаполнитьПараметрыОбласти(ОбластьМакета,  Шапка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета,  ДанныеПечатиДоп);
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
			Если ВыводитьТолькоУслуги Тогда
				СуммаДокумента = СуммаВсего;
				СуммаНДС = НДС;
			КонецЕсли;
		КонецЕсли;
		
		// Материалы
		Если ЕстьМатериалы Тогда
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "Материалы", ЕстьСкидка, Истина);
			ОбластьМакета[0].Параметры.МатериалыЗаголовок = "Материалы исполнителя";
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "СтрокаМатериалы", ЕстьСкидка, Истина);
			СтрокаВыборки = ВыборкаМатериалы.Выбрать();
			
			Количество = 0;
			
			Пока СтрокаВыборки.Следующий() Цикл
				
				//ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ЗаполнитьПараметрыОбласти(ОбластьМакета, СтрокаВыборки);
				//ТабличныйДокумент.Вывести(ОбластьМакета);
				ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
				Количество = Количество + СтрокаВыборки.Количество;
			
			КонецЦикла;
			
			ДанныеПечатиДоп = Новый Структура();
			ДанныеПечатиДоп.Вставить("Количество", Количество);
		
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "ПодвалМатериалы", ЕстьСкидка, Истина);
			//ОбластьМакета.Параметры.Заполнить(Шапка);
			//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиДоп);
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
		КонецЕсли;
		
		// Материалы заказчика
		Если ЕстьМатериалыЗаказчика Тогда
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "Материалы", ЕстьСкидка, Истина);
			ОбластьМакета[0].Параметры.МатериалыЗаголовок = "Материалы заказчика";
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
			Количество = 0;
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "СтрокаМатериалы", ЕстьСкидка, Истина);
			СтрокаВыборки = ВыборкаМатериалыЗаказчика.Выбрать();
			Пока СтрокаВыборки.Следующий() Цикл
				
				//ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ЗаполнитьПараметрыОбласти(ОбластьМакета, СтрокаВыборки);
				
				Если ЗначениеЗаполнено(СтрокаВыборки.НаименованиеДополнительно) Тогда
					
					ДанныеПечатиДоп = Новый Структура();
					ДанныеПечатиДоп.Вставить("Наименование", 
						СтрокаВыборки.Наименование 
							+ ?(ЗначениеЗаполнено(СтрокаВыборки.Наименование), ". ", "") 
							+ СтрокаВыборки.НаименованиеДополнительно
						
					);
					//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
					ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиДоп);
				КонецЕсли;
				//ТабличныйДокумент.Вывести(ОбластьМакета);
				ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
				
				Количество = Количество + СтрокаВыборки.Количество;
				
			КонецЦикла;
			
			ДанныеПечатиДоп = Новый Структура();
			ДанныеПечатиДоп.Вставить("Количество", Количество);
	
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "ПодвалМатериалы", ЕстьСкидка, Истина);
			//ОбластьМакета.Параметры.Заполнить(Шапка);
			//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиДоп);
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
		КонецЕсли;
	
		// Товары
		Если ЕстьТовары Тогда
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "Детали", ЕстьСкидка, Истина);
			ДанныеПечатиШапкаДоп.Вставить("Заголовок", 
				СтрШаблон("Расходная накладная к заказ-наряду №%1 от %2", ДанныеПечатиШапкаДоп.НомерДокумента, ДанныеПечатиШапкаДоп.ДатаДокумента)
			);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиШапкаДоп);
			
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "СтрокаДеталей", ЕстьСкидка, Истина);
			СтрокаВыборки = ВыборкаТовары.Выбрать();
			СуммаВсего = 0;
			СкидкаСумма = 0;
			Количество = 0;
			НДС = 0;
			
			Пока СтрокаВыборки.Следующий() Цикл
				
				//ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ЗаполнитьПараметрыОбласти(ОбластьМакета, СтрокаВыборки);
				//ТабличныйДокумент.Вывести(ОбластьМакета);
				ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
				
				СуммаВсего = СуммаВсего  + СтрокаВыборки.СуммаВсего;
				СкидкаСумма = СкидкаСумма + СтрокаВыборки.СкидкаСумма;
				Количество = Количество + СтрокаВыборки.Количество;
				НДС = НДС + СтрокаВыборки.НДС;
				
			КонецЦикла;
			
			ДанныеПечатиДоп = Новый Структура();
			ДанныеПечатиДоп.Вставить("СуммаВсего", СуммаВсего);
			ДанныеПечатиДоп.Вставить("СкидкаСумма", СкидкаСумма);
			ДанныеПечатиДоп.Вставить("Количество", Количество);
			ДанныеПечатиДоп.Вставить("НДС", НДС);
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "ПодвалДетали", ЕстьСкидка, Истина);
			//ОбластьМакета.Параметры.Заполнить(Шапка);
			//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиДоп);
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
		
		КонецЕсли;
		
		
		// Товары на комиссии
		Если ЕстьТоварыНаКомиссии Тогда
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "Детали", ЕстьСкидка, Истина);
			ДанныеПечатиШапкаДоп.Вставить("Заголовок", "Запчасти б/у");
			ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиШапкаДоп);
			
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "СтрокаДеталей", ЕстьСкидка, Истина);
			СтрокаВыборки = ВыборкаТоварыНаКомиссии.Выбрать();
			СуммаВсего = 0;
			СкидкаСумма = 0;
			Количество = 0;
			НДС = 0;
			
			Пока СтрокаВыборки.Следующий() Цикл
				
				//ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ЗаполнитьПараметрыОбласти(ОбластьМакета, СтрокаВыборки);
				//ТабличныйДокумент.Вывести(ОбластьМакета);
				ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
				
				СуммаВсего = СуммаВсего  + СтрокаВыборки.СуммаВсего;
				СкидкаСумма = СкидкаСумма + СтрокаВыборки.СкидкаСумма;
				Количество = Количество + СтрокаВыборки.Количество;
				НДС = НДС + СтрокаВыборки.НДС;
				
			КонецЦикла;
			
			ДанныеПечатиДоп = Новый Структура();
			ДанныеПечатиДоп.Вставить("СуммаВсего", СуммаВсего);
			ДанныеПечатиДоп.Вставить("СкидкаСумма", СкидкаСумма);
			ДанныеПечатиДоп.Вставить("Количество", Количество);
			ДанныеПечатиДоп.Вставить("НДС", НДС);
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "ПодвалДетали", ЕстьСкидка, Истина);
			//ОбластьМакета.Параметры.Заполнить(Шапка);
			//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиДоп);
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
		
		КонецЕсли;
		
		
		ДанныеПечатиШапкаДоп.Вставить("СуммаВсегоПрописью", 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаДокумента, Шапка.ВалютаДокумента)
			+ ?(Шапка.ДокументБезНДС, ", НДС не облагается",
			", в т.ч. НДС " + Формат(НДС, "ЧДЦ=2; ЧГ=3,0")) + "."
		);
		
		ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "ПодвалНачало", ЕстьСкидка, Истина);
		//ОбластьМакета.Параметры.Заполнить(Шапка);
		//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
		ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
		ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиШапкаДоп);
		
		//ТабличныйДокумент.Вывести(ОбластьМакета);
		ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
		
		ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "ПодвалОкончание", ЕстьСкидка, Истина);
		//ОбластьМакета.Параметры.Заполнить(Шапка);
		//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
		ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
		ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиШапкаДоп);
		
		//ТабличныйДокумент.Вывести(ОбластьМакета);
		ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПечатьАктОВыполненииСроковРабот(МассивОбъектов, ОбъектыПечати) Экспорт
	
	///+ГомзМА 10.03.2023
	ДанныеПечати = ПолучитьДанныеПечатиАктОВыполненииСроковРабот(МассивОбъектов);
	Шапка 		 = ДанныеПечати.Шапка;

	ТабДок = Новый ТабличныйДокумент;
	Макет  = Документы.ЗаказНаряд.ПолучитьМакет("АктОВыполненииСроковРабот");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьШапка 	 = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьТаблица 	 = Макет.ПолучитьОбласть("ОбластьТаблица");
	ОбластьПодпись 	 = Макет.ПолучитьОбласть("ОбластьПодпись");
	
	Шапка.Следующий();
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Заполнить(Шапка);
	ТабДок.Вывести(ОбластьШапка);
		
	ТабДок.Вывести(ОбластьТаблица);
	ТабДок.Вывести(ОбластьПодпись);

	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	Возврат ТабДок;
	///-ГомзМА 10.03.2023 
	
КонецФункции 


Функция ПечатьЗаказНарядВнутренний(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ЗаказНарядВнутренний", ВыводитьТоварыНаКомиссии = Истина) Экспорт
	
	ДанныеПечати = ПолучитьДанныеПечатиЗаказНарядаВнутреннего(МассивОбъектов);
	
	Шапка      	= ДанныеПечати.Шапка;
	ВыборкаРаботы = ДанныеПечати.Работы;
	ВыборкаИсполнители = ДанныеПечати.Исполнители;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ЗаказНарядВнутренний_Основной";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_" + ИмяМакета);
	ФорматДаты = "ДФ='dd.MM.yyyy ""г.""'";
	ФорматДатаВремя = "ДЛФ=DT; ДП=---";
	
	ВыводитьПустойДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
		ВыборкаРаботы.Сбросить();
		ВыборкаИсполнители.Сбросить();
		
		ЕстьРаботы = ВыборкаРаботы.НайтиСледующий(СтруктураПоиска);
		ЕстьИсполнители = ВыборкаИсполнители.НайтиСледующий(СтруктураПоиска);
		
		Если НЕ ВыводитьПустойДокумент
			И НЕ ЕстьРаботы Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствует табличная часть Работы. Печать не требуется'"),
				Шапка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Шапка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечатиШапкаДоп = Новый Структура();
		//ДанныеПечатиШапкаДоп.Вставить("НаименованиеДокумента", ?(Шапка.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен"), "Предварительный заказ-наряд", "Заказ-наряд"));
		ДанныеПечатиШапкаДоп.Вставить("НомерДокумента", дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.Номер));
//		Если Шапка.Дата < '20200301' Тогда
//			ДанныеПечатиШапкаДоп.Вставить("НомерДокумента", дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
//		Иначе	
//			ДанныеПечатиШапкаДоп.Вставить("НомерДокумента", ДанныеПечатиШапкаДоп.Номер);
//		КонецЕсли;	
		ДанныеПечатиШапкаДоп.Вставить("Дата", Формат(Шапка.Дата, ФорматДаты));
		
		ДанныеПечатиШапкаДоп.Вставить("ДатаНачала", Формат(Шапка.ДатаНачала, ФорматДатаВремя));
		ДанныеПечатиШапкаДоп.Вставить("ДатаОкончания", Формат(Шапка.ДатаОкончания, ФорматДатаВремя));
		ДанныеПечатиШапкаДоп.Вставить("Инициатор", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.Инициатор));
		ДанныеПечатиШапкаДоп.Вставить("Мастер", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.Мастер));
		//ДанныеПечатиШапкаДоп.Вставить("Ответственный", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.Ответственный));
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		// Работы
		Если ЕстьРаботы Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакетаИсполнитель = Макет.ПолучитьОбласть("СтрокаИсполнитель");
			ВсеИсполнители = Новый Массив();
			
			СтрокаВыборки = ВыборкаРаботы.Выбрать();
			Если ЕстьИсполнители Тогда
				СтрокаИсполнители = ВыборкаИсполнители.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КонецЕсли;	
			
			ДанныеПечатиДоп = Новый Структура();
			
			Пока СтрокаВыборки.Следующий() Цикл
				
				ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				
				Если ЗначениеЗаполнено(СтрокаВыборки.НаименованиеДополнительно) Тогда
					
					ДанныеПечатиДоп.Вставить("Наименование", СтрокаВыборки.Наименование + ". " + СтрокаВыборки.НаименованиеДополнительно);
					ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
					
				КонецЕсли;
				
				ЕстьИсполнителиВСтроке = СтрокаИсполнители.НайтиСледующий(Новый Структура("НомерСтроки", СтрокаВыборки.НомерСтроки));
				ЭтоПервыйИсполнитель = Истина;
				
				Если ЕстьИсполнителиВСтроке Тогда
					
					СтрокаИсполнителиДетально = СтрокаИсполнители.Выбрать();
					Пока СтрокаИсполнителиДетально.Следующий() Цикл
						
						ДанныеПечатиДоп.Вставить("Исполнитель", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(СтрокаИсполнителиДетально.Исполнитель));
							
						Если ЭтоПервыйИсполнитель Тогда
							ОбластьМакета.Параметры.Заполнить(СтрокаИсполнителиДетально);
							ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
							ТабличныйДокумент.Вывести(ОбластьМакета);
						Иначе
							ОбластьМакетаИсполнитель.Параметры.Заполнить(СтрокаИсполнителиДетально);
							ОбластьМакетаИсполнитель.Параметры.Заполнить(ДанныеПечатиДоп);
							ТабличныйДокумент.Вывести(ОбластьМакетаИсполнитель);
						КонецЕсли;
						
						ЭтоПервыйИсполнитель = Ложь;
						Если ВсеИсполнители.Найти(СтрокаИсполнителиДетально.Исполнитель) = Неопределено Тогда
							ВсеИсполнители.Добавить(СтрокаИсполнителиДетально.Исполнитель);
						КонецЕсли;
					КонецЦикла;
				Иначе
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		Для Индекс = 1 По Мин(ВсеИсполнители.Количество(), 2) Цикл
			ДанныеПечатиШапкаДоп.Вставить("ФИО" + Индекс, ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВсеИсполнители[Индекс - 1]));	
		КонецЦикла;
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалИсполнитель");
		Для Индекс = 3 По ВсеИсполнители.Количество() Цикл
			ДанныеПечатиШапкаДоп.Вставить("ФИО", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВсеИсполнители[Индекс - 1]));	
			ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеПечатиАктОВыполненииСроковРабот(МассивОбъектов) Экспорт

	///+ГомзМА 10.03.2023
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНаряд.Организация КАК Организация,
		|	ЗаказНаряд.Клиент КАК Клиент,
		|	ЗаказНаряд.Номер КАК Номер,
		|	ЗаказНаряд.Дата КАК Дата
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Ссылка В (&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	Результат = Новый Структура();
	Результат.Вставить("Шапка", РезультатЗапроса[0].Выбрать());

	Возврат Результат;
	///-ГомзМА 10.03.2023
	
КонецФункции // ()

Функция ПолучитьДанныеПечатиДефектовочныйЛистШапка(МассивОбъектов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНаряд.Номер КАК Номер,
		|	ЗаказНаряд.Дата КАК Дата,
		|	ЗаказНаряд.Инициатор КАК Инициатор,
		|	ЗаказНаряд.ВинКод КАК АвтомобильVIN,
		|	ЗаказНаряд.Клиент КАК Клиент
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
	//Результат = Новый Структура();
	//Результат.Вставить("Шапка", РезультатЗапроса.Выбрать());

	Возврат РезультатЗапроса;
	
	
КонецФункции 
Функция ПолучитьДанныеПечатиДефектовочныйЛистТаб(МассивОбъектов) Экспорт

		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНарядТовары.Ссылка КАК Ссылка,
		|	ЗаказНарядТовары.НомерСтроки КАК НомерСтроки,
		|	ЗаказНарядТовары.Номенклатура КАК Наименование,
		|	ЗаказНарядТовары.Количество КАК Количество,
		|	ЗаказНарядТовары.Партия КАК Автомобиль,
		|	ЗаказНарядТовары.Номенклатура.Код КАК Код,
		|	ЗаказНарядТовары.Номенклатура.Артикул КАК Артикул,
		|	ЗаказНарядТовары.Номенклатура.МестоНаСкладе2 КАК МестоХранения,
		|	РегистрНакопления1Остатки.КолвоОстаток КАК остаток,
		|	ЗаказНарядТовары.Состояние КАК Статус
		|ИЗ
		|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РегистрНакопления1.Остатки КАК РегистрНакопления1Остатки
		|		ПО ЗаказНарядТовары.Номенклатура = РегистрНакопления1Остатки.Товар
		|ГДЕ
		|	ЗаказНарядТовары.Ссылка В(&МассивОбъектов)
		|	И ЗаказНарядТовары.Состояние В(&СостоянияТоваров)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов); 
	
	СостоянияТоваров = Новый массив;
	СостоянияТоваров.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Срочно);
	СостоянияТоваров.Добавить(Перечисления.СтатусыТовараВЗаказНаряде.Планово);
	Запрос.УстановитьПараметр("СостоянияТоваров", СостоянияТоваров);

	
	РезультатЗапроса = Запрос.Выполнить().выбрать();
		
	//Результат = Новый Структура();
	//Результат.Вставить("Таблица", РезультатЗапроса.Выгрузить());

	Возврат РезультатЗапроса;
		
КонецФункции 
Функция ПолучитьДанныеПечатиДефектовочныйЛистПодвал(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНарядОтветственные.Сотрудник КАК Сотрудник,
	|	ЗаказНарядОтветственные.Роль КАК Роль,
	|	ЗаказНарядОтветственные.Сотрудник.Наименование КАК ФИО
	|ИЗ
	|	Документ.ЗаказНаряд.Ответственные КАК ЗаказНарядОтветственные
	|ГДЕ
	|	ЗаказНарядОтветственные.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить().выбрать();
	
	//Результат = Новый Структура();
	//Результат.Вставить("Таблица", РезультатЗапроса.Выгрузить());
	
	Возврат РезультатЗапроса;
	
КонецФункции 



Функция ПолучитьДанныеПечатиЗаказНаряда(МассивОбъектов) Экспорт
		
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ВалютаРубли КАК ВалютаДокумента,
		|	Док.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Док.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Выполнен)
		|			ТОГДА Док.НомерУПД
		|		ИНАЧЕ Док.Номер
		|	КОНЕЦ КАК НомерДокумента,
		|	ВЫБОР
		|		КОГДА Док.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказНаряда.Выполнен)
		|			ТОГДА Док.ДатаУПД
		|		ИНАЧЕ Док.Дата
		|	КОНЕЦ КАК ДатаДокумента,
		|	Док.НомерУПД КАК НомерУПД,
		|	Док.ДатаУПД КАК ДатаУПД,
		|	Док.Номер КАК Номер,
		|	Док.Дата КАК Дата,
		|	Док.Клиент КАК Клиент,
		|	Док.Состояние КАК Состояние,
		|	Док.Автомобиль КАК Автомобиль,
		|	Док.Пробег КАК Пробег,
		|	Док.ДатаНачала КАК ДатаНачала,
		|	Док.ДатаОкончания КАК ДатаОкончания,
		|	Док.Ответственный КАК Ответственный,
		|	Док.Мастер КАК Мастер,
		|	Док.КонтактноеЛицо КАК КонтактноеЛицо,
		|	Док.Рекомендации КАК Рекомендации,
		|	Док.Гарантии КАК Гарантии,
		|	Док.СуммаДокумента КАК СуммаДокумента,
		|	Док.Организация КАК Организация,
		|	Док.Автомобиль.VIN КАК АвтомобильVIN,
		|	Док.Автомобиль.Год КАК АвтомобильГодВыпуска,
		|	Док.Автомобиль.ГосНомер КАК АвтомобильГосНомер,
		|	Док.Автомобиль.Модель КАК АвтомобильМодель,
		|	ВЫБОР
		|		КОГДА Док.Организация.ЕстьУчетНДС
		|			ТОГДА ВЫРАЗИТЬ(&СтавкаНДС * Док.СуммаДокумента / (100 + &СтавкаНДС) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НДС,
		|	НЕ ЕСТЬNULL(Док.Организация.ЕстьУчетНДС, ЛОЖЬ) КАК ДокументБезНДС,
		|	Док.Организация.ЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
		|	Док.ПричинаОбращения КАК ПричинаОбращения,
		|	ЕСТЬNULL(Док.ДоговорКонтрагента.Представление, ПРЕДСТАВЛЕНИЕ(Док.Ссылка)) КАК Основание,
		|	Док.Склад КАК Склад,
		|	Док.СуммаЗп КАК СуммаЗп,
		|	Док.Инициатор КАК Инициатор
		|ПОМЕСТИТЬ ВТ_Шапка
		|ИЗ
		|	Документ.ЗаказНаряд КАК Док
		|ГДЕ
		|	Док.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	Док.НомерДокумента КАК НомерДокумента,
		|	Док.ДатаДокумента КАК ДатаДокумента,
		|	Док.Клиент КАК Клиент,
		|	Док.Состояние КАК Состояние,
		|	Док.Автомобиль КАК Автомобиль,
		|	Док.Пробег КАК Пробег,
		|	Док.ДатаНачала КАК ДатаНачала,
		|	Док.ДатаОкончания КАК ДатаОкончания,
		|	Док.Ответственный КАК Ответственный,
		|	Док.Мастер КАК Мастер,
		|	Док.КонтактноеЛицо КАК КонтактноеЛицо,
		|	Док.Рекомендации КАК Рекомендации,
		|	Док.Гарантии КАК Гарантии,
		|	Док.СуммаДокумента КАК СуммаДокумента,
		|	Док.Организация КАК Организация,
		|	ЕСТЬNULL(КлиентыДополнительныеКонтакты.Телефон, """") КАК КонтактноеЛицоТелефон,
		|	Док.АвтомобильVIN КАК АвтомобильVIN,
		|	Док.АвтомобильГодВыпуска КАК АвтомобильГодВыпуска,
		|	Док.АвтомобильГосНомер КАК АвтомобильГосНомер,
		|	Док.АвтомобильМодель КАК АвтомобильМодель,
		|	Док.ВалютаДокумента КАК ВалютаДокумента,
		|	Док.НДС КАК НДС,
		|	Док.ДокументБезНДС КАК ДокументБезНДС,
		|	Док.ПричинаОбращения КАК ПричинаОбращения,
		|	Док.ОрганизацияЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
		|	Док.Основание КАК Основание,
		|	Док.Номер КАК Номер,
		|	Док.Дата КАК Дата,
		|	Док.НомерУПД КАК НомерУПД,
		|	Док.ДатаУПД КАК ДатаУПД,
		|	ЕСТЬNULL(Скидки.СкидкаСумма, 0) <> 0 КАК ЕстьСкидки
		|ИЗ
		|	ВТ_Шапка КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Клиенты.ДополнительныеКонтакты КАК КлиентыДополнительныеКонтакты
		|		ПО (НЕ Док.КонтактноеЛицо ПОДОБНО """")
		|			И (Док.КонтактноеЛицо = (ВЫРАЗИТЬ(КлиентыДополнительныеКонтакты.ФИО КАК СТРОКА(80))))
		|			И Док.Клиент = КлиентыДополнительныеКонтакты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СкидкиГрп.Ссылка КАК Ссылка,
		|			СУММА(СкидкиГрп.СкидкаСумма) КАК СкидкаСумма
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ВТ_Шапка.Ссылка КАК Ссылка,
		|				ЗаказНарядТовары.СкидкаСумма КАК СкидкаСумма
		|			ИЗ
		|				ВТ_Шапка КАК ВТ_Шапка
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
		|					ПО ВТ_Шапка.Ссылка = ЗаказНарядТовары.Ссылка
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВТ_Шапка.Ссылка,
		|				ЗаказНарядРаботы.СкидкаСумма
		|			ИЗ
		|				ВТ_Шапка КАК ВТ_Шапка
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Работы КАК ЗаказНарядРаботы
		|					ПО ВТ_Шапка.Ссылка = ЗаказНарядРаботы.Ссылка) КАК СкидкиГрп
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СкидкиГрп.Ссылка) КАК Скидки
		|		ПО Док.Ссылка = Скидки.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧТовары.НомерСтроки КАК НомерСтроки,
		|	ТЧТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА НЕ ТЧТовары.Номенклатура.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА ТЧТовары.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ ТЧТовары.Номенклатура.Наименование
		|	КОНЕЦ КАК Наименование,
		|	ТЧТовары.Номенклатура.Артикул КАК Артикул,
		|	ТЧТовары.Номенклатура.НомерПроизводителя КАК НомерПроизводителя,
		|	ТЧТовары.Номенклатура.Код КАК Код,
		|	ТЧТовары.Количество КАК Количество,
		|	ТЧТовары.Цена КАК Цена,
		|	ТЧТовары.Ссылка КАК Ссылка,
		|	""шт."" КАК ЕдиницаИзмерения,
		|	ТЧТовары.Партия.Представление КАК ПартияПредставление,
		|	ТЧТовары.Сумма КАК Сумма,
		|	ТЧТовары.СкидкаСумма КАК СкидкаСумма,
		|	ТЧТовары.СуммаВсего КАК СуммаВсего,
		|	ВЫБОР
		|		КОГДА НЕ Док.ДокументБезНДС
		|			ТОГДА ВЫРАЗИТЬ(&СтавкаНДС * ТЧТовары.СуммаВсего / (100 + &СтавкаНДС) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НДС,
		|	ВЫБОР
		|		КОГДА Док.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ТЧТовары.Склад
		|		ИНАЧЕ Док.Склад
		|	КОНЕЦ КАК Склад,
		|	ТЧТовары.СуммаЗп КАК СуммаЗп,
		|	ТЧТовары.Состояние КАК Статус,
		|	ТЧТовары.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	ВТ_Шапка КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Товары КАК ТЧТовары
		|		ПО (ТЧТовары.Ссылка = Док.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Наименование КАК Наименование,
		|	ВТ_Товары.Артикул КАК Артикул,
		|	ВТ_Товары.НомерПроизводителя КАК НомерПроизводителя,
		|	ВТ_Товары.Код КАК Код,
		|	ВТ_Товары.Количество КАК Количество,
		|	ВТ_Товары.Цена КАК Цена,
		|	ВТ_Товары.Ссылка КАК Ссылка,
		|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_Товары.ПартияПредставление КАК ПартияПредставление,
		|	ВТ_Товары.Сумма КАК Сумма,
		|	ВТ_Товары.СкидкаСумма КАК СкидкаСумма,
		|	ВТ_Товары.СуммаВсего КАК СуммаВсего,
		|	ВТ_Товары.НДС КАК НДС,
		|	ВТ_Товары.Склад КАК Склад,
		|	ВТ_Товары.Автомобиль КАК Автомобиль,
		|	ВТ_Товары.Статус КАК Статус,
		|	МестаХранения.МестоХранения КАК МестоХранения
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дт_МестаХраненияНоменклатуры.СрезПоследних КАК МестаХранения
		|		ПО ВТ_Товары.Номенклатура = МестаХранения.Номенклатура
		|			И ВТ_Товары.Склад = МестаХранения.Склад
		|ИТОГИ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботы.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботы.Работа КАК Работа,
		|	ВЫБОР
		|		КОГДА НЕ ТЧРаботы.Работа.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА ТЧРаботы.Работа.НаименованиеПолное
		|		ИНАЧЕ ТЧРаботы.Работа.Наименование
		|	КОНЕЦ КАК Наименование,
		|	ТЧРаботы.Содержание КАК НаименованиеДополнительно,
		|	ТЧРаботы.Работа.Код КАК Артикул,
		|	ТЧРаботы.Количество КАК Количество,
		|	ТЧРаботы.Цена КАК ЦенаАвтоработы,
		|	ТЧРаботы.Ссылка КАК Ссылка,
		|	""шт."" КАК ЕдиницаИзмерения,
		|	ТЧРаботы.Сумма КАК Сумма,
		|	ТЧРаботы.СкидкаСумма КАК СкидкаСумма,
		|	ТЧРаботы.СуммаВсего КАК СуммаВсего,
		|	ТЧРаботы.Нормочас КАК Нормочас,
		|	ВЫБОР
		|		КОГДА ТЧРаботы.Содержание ПОДОБНО ""%Работу выполнил:%""
		|			ТОГДА 0
		|		ИНАЧЕ ТЧРаботы.СуммаЗп
		|	КОНЕЦ КАК СуммаЗп,
		|	ВЫБОР
		|		КОГДА НЕ Док.ДокументБезНДС
		|			ТОГДА ВЫРАЗИТЬ(&СтавкаНДС * ТЧРаботы.СуммаВсего / (100 + &СтавкаНДС) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НДС,
		|	ВЫБОР
		|		КОГДА ТЧРаботы.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ТЧРаботы.СуммаВсего / ТЧРаботы.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	ВТ_Шапка КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Работы КАК ТЧРаботы
		|		ПО (ТЧРаботы.Ссылка = Док.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧМатериалы.НомерСтроки КАК НомерСтроки,
		|	ТЧМатериалы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА НЕ ТЧМатериалы.Номенклатура.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА ТЧМатериалы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ ТЧМатериалы.Номенклатура.Наименование
		|	КОНЕЦ КАК Наименование,
		|	ТЧМатериалы.Номенклатура.Код КАК Код,
		|	ТЧМатериалы.Номенклатура.Артикул КАК Артикул,
		|	ТЧМатериалы.Номенклатура.НомерПроизводителя КАК НомерПроизводителя,
		|	ТЧМатериалы.Количество КАК Количество,
		|	ТЧМатериалы.Ссылка КАК Ссылка,
		|	""шт."" КАК ЕдиницаИзмерения,
		|	ТЧМатериалы.Партия.Представление КАК ПартияПредставление,
		|	ВЫБОР
		|		КОГДА Док.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ТЧМатериалы.Склад
		|		ИНАЧЕ Док.Склад
		|	КОНЕЦ КАК Склад
		|ПОМЕСТИТЬ ВТ_Материалы
		|ИЗ
		|	ВТ_Шапка КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Материалы КАК ТЧМатериалы
		|		ПО (ТЧМатериалы.Ссылка = Док.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Материалы.НомерСтроки КАК НомерСтроки,
		|	ВТ_Материалы.Номенклатура КАК Номенклатура,
		|	ВТ_Материалы.Наименование КАК Наименование,
		|	ВТ_Материалы.Код КАК Код,
		|	ВТ_Материалы.Артикул КАК Артикул,
		|	ВТ_Материалы.Количество КАК Количество,
		|	ВТ_Материалы.Ссылка КАК Ссылка,
		|	ВТ_Материалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_Материалы.ПартияПредставление КАК ПартияПредставление,
		|	ВТ_Материалы.Склад КАК Склад,
		|	ВТ_Материалы.НомерПроизводителя КАК НомерПроизводителя,
		|	МестаХранения.МестоХранения КАК МестоХранения
		|ИЗ
		|	ВТ_Материалы КАК ВТ_Материалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дт_МестаХраненияНоменклатуры.СрезПоследних КАК МестаХранения
		|		ПО ВТ_Материалы.Номенклатура = МестаХранения.Номенклатура
		|			И ВТ_Материалы.Склад = МестаХранения.Склад
		|ИТОГИ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧМатериалыЗаказчика.НомерСтроки КАК НомерСтроки,
		|	ТЧМатериалыЗаказчика.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА НЕ ТЧМатериалыЗаказчика.Номенклатура.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА ЕСТЬNULL(ТЧМатериалыЗаказчика.Номенклатура.НаименованиеПолное, """")
		|		ИНАЧЕ ЕСТЬNULL(ТЧМатериалыЗаказчика.Номенклатура.Наименование, """")
		|	КОНЕЦ КАК Наименование,
		|	ТЧМатериалыЗаказчика.НоменклатураПредставление КАК НаименованиеДополнительно,
		|	ТЧМатериалыЗаказчика.Номенклатура.Артикул КАК Артикул,
		|	ТЧМатериалыЗаказчика.Количество КАК Количество,
		|	ТЧМатериалыЗаказчика.Ссылка КАК Ссылка,
		|	""шт."" КАК ЕдиницаИзмерения
		|ИЗ
		|	ВТ_Шапка КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.МатериалыЗаказчика КАК ТЧМатериалыЗаказчика
		|		ПО (ТЧМатериалыЗаказчика.Ссылка = Док.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧТоварыНаКомиссии.НомерСтроки КАК НомерСтроки,
		|	ТЧТоварыНаКомиссии.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА НЕ ТЧТоварыНаКомиссии.Номенклатура.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА ЕСТЬNULL(ТЧТоварыНаКомиссии.Номенклатура.НаименованиеПолное, """")
		|		ИНАЧЕ ЕСТЬNULL(ТЧТоварыНаКомиссии.Номенклатура.Наименование, """")
		|	КОНЕЦ КАК Наименование,
		|	ТЧТоварыНаКомиссии.Номенклатура.Артикул КАК Артикул,
		|	ТЧТоварыНаКомиссии.Номенклатура.НомерПроизводителя КАК НомерПроизводителя,
		|	ТЧТоварыНаКомиссии.Номенклатура.Код КАК Код,
		|	ТЧТоварыНаКомиссии.Количество КАК Количество,
		|	ТЧТоварыНаКомиссии.Ссылка КАК Ссылка,
		|	""шт."" КАК ЕдиницаИзмерения,
		|	ТЧТоварыНаКомиссии.Цена КАК Цена,
		|	ТЧТоварыНаКомиссии.Сумма КАК Сумма,
		|	ТЧТоварыНаКомиссии.СкидкаСумма КАК СкидкаСумма,
		|	ТЧТоварыНаКомиссии.СуммаВсего КАК СуммаВсего,
		|	ВЫБОР
		|		КОГДА НЕ Док.ДокументБезНДС
		|			ТОГДА ВЫРАЗИТЬ(&СтавкаНДС * ТЧТоварыНаКомиссии.СуммаВсего / (100 + &СтавкаНДС) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НДС,
		|	ВЫБОР
		|		КОГДА Док.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ТЧТоварыНаКомиссии.Склад
		|		ИНАЧЕ Док.Склад
		|	КОНЕЦ КАК Склад
		|ИЗ
		|	ВТ_Шапка КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.ТоварыНаКомиссии КАК ТЧТоварыНаКомиссии
		|		ПО (ТЧТоварыНаКомиссии.Ссылка = Док.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботы.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботы.Ссылка КАК Ссылка,
		|	Исполнители.Исполнитель КАК Исполнитель,
		|	Исполнители.Процент КАК Процент
		|ИЗ
		|	ВТ_Шапка КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Работы КАК ТЧРаботы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Исполнители КАК Исполнители
		|			ПО ТЧРаботы.Ссылка = Исполнители.Ссылка
		|				И ТЧРаботы.ИдентификаторСтроки = Исполнители.ИдентификаторСтрокиРодитель
		|		ПО (ТЧРаботы.Ссылка = Док.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТЧРаботы.Ссылка,
		|	НомерСтроки,
		|	Исполнитель
		|ИТОГИ ПО
		|	Ссылка,
		|	НомерСтроки
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("ВалютаРубли", дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		Запрос.УстановитьПараметр("СтавкаНДС", 20);//дт_ОбщегоНазначенияВызовСервераПовтИсп.СтавкаНДСПоУмолчанию('20190201'));
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Результат = Новый Структура();
		Результат.Вставить("Шапка", РезультатЗапроса[1].Выбрать());
		Результат.Вставить("Товары", РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
		Результат.Вставить("Работы", РезультатЗапроса[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
		Результат.Вставить("Материалы", РезультатЗапроса[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
		Результат.Вставить("МатериалыЗаказчика", РезультатЗапроса[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
		Результат.Вставить("ТоварыНаКомиссии", РезультатЗапроса[8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
		Результат.Вставить("Исполнители", РезультатЗапроса[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
		
		Возврат Результат;
		
	КонецФункции // ПолучитьДанныеПечатиПеремещениеТоваров()

Функция ПолучитьДанныеПечатиЗаказНарядаВнутреннего(МассивОбъектов) Экспорт

	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ВалютаРубли КАК ВалютаДокумента,
	|	Док.Ссылка КАК Ссылка,
	|	Док.Номер КАК Номер,
	|	Док.ДатаНачала КАК Дата,
	|	Док.Инициатор КАК Инициатор,
	|	Док.Состояние КАК Состояние,
	|	Док.АвтомобильСобственный КАК Автомобиль,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	Док.ДатаОкончания КАК ДатаОкончания,
	|	Док.Ответственный КАК Ответственный,
	|	Док.Мастер КАК Мастер,
	|	Док.Подразделение КАК Подразделение,
	|	Док.КоличествоВремяПлан КАК ВремяПлан,
	|	Док.КоличествоВремяФакт КАК ВремяФакт,
	|	Док.ПричинаОбращения КАК ПричинаОбращения,
	|	Док.Склад КАК Склад
	|ПОМЕСТИТЬ ВТ_Шапка
	|ИЗ
	|	Документ.ЗаказНаряд КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Номер КАК Номер,
	|	Док.Дата КАК Дата,
	|	Док.Инициатор КАК Инициатор,
	|	Док.Состояние КАК Состояние,
	|	Док.Автомобиль КАК Автомобиль,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	Док.ДатаОкончания КАК ДатаОкончания,
	|	Док.Ответственный КАК Ответственный,
	|	Док.Мастер КАК Мастер,
	|	Док.ВремяПлан КАК ВремяПлан,
	|	Док.ВремяФакт КАК ВремяФакт,
	|	Док.Подразделение КАК Подразделение
	|ИЗ
	|	ВТ_Шапка КАК Док
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботы.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботы.Работа КАК Работа,
	|	ВЫБОР
	|		КОГДА НЕ ТЧРаботы.Работа.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ТЧРаботы.Работа.НаименованиеПолное
	|		ИНАЧЕ ТЧРаботы.Работа.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ТЧРаботы.Содержание КАК НаименованиеДополнительно,
	|	ТЧРаботы.Работа.Артикул КАК Артикул,
	|	ТЧРаботы.Количество КАК Количество,
	|	ТЧРаботы.Цена КАК ЦенаАвтоработы,
	|	ТЧРаботы.Ссылка КАК Ссылка,
	|	""шт."" КАК ЕдиницаИзмерения,
	|	ТЧРаботы.Сумма КАК Сумма,
	|	ТЧРаботы.СкидкаСумма КАК СкидкаСумма,
	|	ТЧРаботы.СуммаВсего КАК СуммаВсего,
	|	ТЧРаботы.Нормочас КАК Нормочас,
	|	ТЧРаботы.ВремяФакт КАК ВремяФакт,
	|	ТЧРаботы.ВремяПлан КАК ВремяПлан
	|ИЗ
	|	ВТ_Шапка КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Работы КАК ТЧРаботы
	|		ПО (ТЧРаботы.Ссылка = Док.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Ссылка,
	|	ТЧРаботы.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботы.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботы.Ссылка КАК Ссылка,
	|	Исполнители.Исполнитель КАК Исполнитель,
	|	СУММА(Исполнители.Процент) КАК Процент,
	|	СУММА(Исполнители.ВремяФакт) КАК ВремяФакт
	|ИЗ
	|	ВТ_Шапка КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Работы КАК ТЧРаботы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Исполнители КАК Исполнители
	|			ПО ТЧРаботы.Ссылка = Исполнители.Ссылка
	|				И ТЧРаботы.ИдентификаторСтроки = Исполнители.ИдентификаторСтрокиРодитель
	|		ПО (ТЧРаботы.Ссылка = Док.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧРаботы.НомерСтроки,
	|	ТЧРаботы.Ссылка,
	|	Исполнители.Исполнитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧРаботы.Ссылка,
	|	НомерСтроки,
	|	Исполнитель
	|ИТОГИ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРубли", дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("СтавкаНДС", дт_ОбщегоНазначенияВызовСервераПовтИсп.СтавкаНДСПоУмолчанию('20190101'));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура();
	Результат.Вставить("Шапка", РезультатЗапроса[1].Выбрать());
	Результат.Вставить("Работы", РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	Результат.Вставить("Исполнители", РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));

	Возврат Результат;
		
КонецФункции 

Функция ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, СПечатью = Ложь, ВыводитьТоварыНаКомиссии = Истина) Экспорт
	
	ДанныеПечати = ПолучитьДанныеПечатиЗаказНаряда(МассивОбъектов);
	
	Шапка      	= ДанныеПечати.Шапка;
	ВыборкаТовары = ДанныеПечати.Товары;
	ВыборкаРаботы = ДанныеПечати.Работы;
	ВыборкаМатериалы = ДанныеПечати.Материалы;
	ВыборкаМатериалыЗаказчика = ДанныеПечати.МатериалыЗаказчика;
	ВыборкаТоварыНаКомиссии = ДанныеПечати.ТоварыНаКомиссии;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетНаОплату_СчетЗаказ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПредварительныйСчет.ПФ_MXL_СчетЗаказ");
	ФорматДаты = "ДФ=dd.MM.yyyy";
	
	Пока Шапка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
		ВыборкаТовары.Сбросить();
		ВыборкаРаботы.Сбросить();
		ВыборкаМатериалы.Сбросить();
		ВыборкаМатериалыЗаказчика.Сбросить();
		ВыборкаТоварыНаКомиссии.Сбросить();
		
		ЕстьТовары = ВыборкаТовары.НайтиСледующий(СтруктураПоиска);
		ЕстьРаботы = ВыборкаРаботы.НайтиСледующий(СтруктураПоиска);
		ЕстьМатериалы = ВыборкаМатериалы.НайтиСледующий(СтруктураПоиска);
		ЕстьМатериалыЗаказчика = ВыборкаМатериалыЗаказчика.НайтиСледующий(СтруктураПоиска);
		ЕстьТоварыНаКомиссии = ВыборкаТоварыНаКомиссии.НайтиСледующий(СтруктураПоиска) 
		    И ВыводитьТоварыНаКомиссии;
		ЕстьПричинаОбращения = Истина;
		ЭтоОрганизацияИП = ОбщегоНазначенияУТКЛиентСервер.ЭтоИП(Шапка.ОрганизацияЮрФизЛицо); //дт_ОбщегоНазначенияКлиентСервер.ЭтоИП(Шапка.ОрганизацияНаименованиеПолное);
		
		Если НЕ ЕстьТовары
			И НЕ ЕстьРаботы
			И НЕ ЕстьМатериалы
			И Не ЕстьМатериалыЗаказчика 
			И НЕ ЕстьТоварыНаКомиссии Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют табличные части. Печать не требуется'"),
				Шапка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Шапка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Заполнение доп. параметров (начало)
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		СведенияОКлиенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Клиент, Шапка.ДатаДокумента);
		
		ДанныеПечатиШапкаДоп = Новый Структура();
		ДанныеПечатиШапкаДоп.Вставить("ИННПолучателя", СведенияОбОрганизации.ИНН);
		ДанныеПечатиШапкаДоп.Вставить("КПППолучателя", СведенияОбОрганизации.КПП);
		
		ДанныеПечатиШапкаДоп.Вставить("БанкПолучателяПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "Банк,АдресБанка", Ложь));
		ДанныеПечатиШапкаДоп.Вставить("БИКБанкаПолучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "БИК", Ложь));
		ДанныеПечатиШапкаДоп.Вставить("СчетБанкаПолучателяПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КоррСчет", Ложь));
		ДанныеПечатиШапкаДоп.Вставить("СчетПолучателяПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета", Ложь));
		ДанныеПечатиШапкаДоп.Вставить("ПредставлениеПолучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм"));
		
		ДанныеПечатиШапкаДоп.Вставить("ТекстЗаголовка", 
			СтрШаблон("Счет на оплату № %1 от %2", 
				дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.Номер),
				Формат(Шапка.Дата, ФорматДаты)
			)
		);
		
		ДанныеПечатиШапкаДоп.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,EMail"));
		ДанныеПечатиШапкаДоп.Вставить("ПредставлениеПокупателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКлиенте, "НаименованиеДляПечатныхФорм,ИНН,КПП,ФактическийАдрес,Телефоны,EMail"));
		
		ИтогоСумма = Шапка.СуммаДокумента;
		ДанныеПечатиШапкаДоп.Вставить("Всего", ИтогоСумма);
		СтавкаНДС = дт_ОбщегоНазначенияВызовСервераПовтИсп.СтавкаНДСПоУмолчанию(Шапка.ДатаДокумента);
		
		ДанныеПечатиШапкаДоп.Вставить("ИтоговаяСумма", ИтогоСумма);
		ДанныеПечатиШапкаДоп.Вставить("СуммаПрописью", 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСумма, Шапка.ВалютаДокумента));
		
		Если НЕ Шапка.ДокументБезНДС Тогда
			ДанныеПечатиШапкаДоп.Вставить("НДС", НСтр("ru = 'В том числе НДС:'"));
			ДанныеПечатиШапкаДоп.Вставить("ВсегоНДС", Шапка.НДС);
		КонецЕсли;
		

		ДанныеОтветственногоЛица = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Шапка.Организация,
			Шапка.ДатаДокумента);
		Если ЗначениеЗаполнено(ДанныеОтветственногоЛица.ФизическоеЛицо) Тогда

			РуководительФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ДанныеОтветственногоЛица.ФизическоеЛицо);
			ДанныеПечатиШапкаДоп.Вставить("ФИОРуководителя", РуководительФИО);
			ДанныеПечатиШапкаДоп.Вставить("ФИОБухгалтера", РуководительФИО);
			ДанныеПечатиШапкаДоп.Вставить("ФИОПредпринимателя", РуководительФИО);

		КонецЕсли;
		// Заполнение доп. параметров (конец)
		
		
		
		// Вывод в табличный документ
		МассивОбластейМакета = Новый Массив;
		
		МассивОбластейМакета.Добавить("ЗаголовокСчета");
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("Поставщик");
		МассивОбластейМакета.Добавить("Покупатель");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Итого");
		
		Если Шапка.ДокументБезНДС Тогда
			МассивОбластейМакета.Добавить("БезНДС");
		Иначе
			МассивОбластейМакета.Добавить("ИтогоНДС");
		КонецЕсли;
		МассивОбластейМакета.Добавить("ИтогоКОплате");
		
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("ТекстВнимание");
		
		// Вывести подписи
		Если СПечатью Тогда
			
			ДвоичныеДанныеПечати              = Справочники.Организация.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПечать");
			ДвоичныеДанныеПодписьГлавногоБухгалтера = Справочники.Организация.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПодписьГлавногоБухгалтера");
			ДвоичныеДанныеПодписьРуководителя             = Справочники.Организация.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПодписьРуководителя");

		КонецЕсли;
		ВыводитьПечать = СПечатью И ЗначениеЗаполнено(ДвоичныеДанныеПечати);
		
		Если ЭтоОрганизацияИП Тогда
			МассивОбластейМакета.Добавить("ПодвалСчетаПредприниматель" + ?(ВыводитьПечать, "СПечатью", ""));
		Иначе	
			МассивОбластейМакета.Добавить("ПодвалСчета" + ?(ВыводитьПечать, "СПечатью", ""));
		КонецЕсли; 
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти = "Строка" Тогда
				
				КоличествоСтрок = 0;
				
				Если ЕстьРаботы	Тогда
					
					СтрокаВыборки = ВыборкаРаботы.Выбрать();
					Пока СтрокаВыборки.Следующий() Цикл
						
						ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
						
						ДанныеПечатиДоп = Новый Структура();
						ДанныеПечатиДоп.Вставить("Товар", 
						    ?(ЗначениеЗаполнено(СтрокаВыборки.НаименованиеДополнительно),
								СтрокаВыборки.Наименование + ". " + СтрокаВыборки.НаименованиеДополнительно,
								СтрокаВыборки.Наименование
							)
						);
						// Цена считается делением, т.к. может быть скидка, которая не выводится в счете
						ДанныеПечатиДоп.Вставить("Цена", ?(СтрокаВыборки.Количество = 0, СтрокаВыборки.СуммаВсего, Окр(СтрокаВыборки.СуммаВсего / СтрокаВыборки.Количество, 2)));
						ДанныеПечатиДоп.Вставить("Сумма", СтрокаВыборки.СуммаВсего);
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
						
						КоличествоСтрок = КоличествоСтрок + 1;
						ОбластьМакета.Параметры.НомерСтроки = КоличествоСтрок;
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
				
				КонецЕсли;
				
				Если ЕстьТовары Тогда
					
					СтрокаВыборки = ВыборкаТовары.Выбрать();
					
					Пока СтрокаВыборки.Следующий() Цикл
						
						ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
						
						// Наименование
						ДанныеПечатиДоп = Новый Структура();
						ДанныеПечатиДоп.Вставить("Товар", СтрокаВыборки.Артикул + ?(ЗначениеЗаполнено(СтрокаВыборки.Артикул), " ", "") + СтрокаВыборки.Наименование);
						
						// Цена считается делением, т.к. может быть скидка, которая не выводится в счете
						ДанныеПечатиДоп.Вставить("Цена", ?(СтрокаВыборки.Количество = 0, СтрокаВыборки.СуммаВсего, Окр(СтрокаВыборки.СуммаВсего / СтрокаВыборки.Количество, 2)));
						ДанныеПечатиДоп.Вставить("Сумма", СтрокаВыборки.СуммаВсего);
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
						
						КоличествоСтрок = КоличествоСтрок + 1;
						ОбластьМакета.Параметры.НомерСтроки = КоличествоСтрок;
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
					КонецЦикла;
				КонецЕсли;
				
				Если ЕстьТоварыНаКомиссии Тогда
					
					СтрокаВыборки = ВыборкаТоварыНаКомиссии.Выбрать();
					
					Пока СтрокаВыборки.Следующий() Цикл
						
						ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
						
						// Наименование
						ДанныеПечатиДоп = Новый Структура();
						ДанныеПечатиДоп.Вставить("Товар", СтрокаВыборки.Артикул + ?(ЗначениеЗаполнено(СтрокаВыборки.Артикул), " ", "") + СтрокаВыборки.Наименование);
						
						// Цена считается делением, т.к. может быть скидка, которая не выводится в счете
						ДанныеПечатиДоп.Вставить("Цена", ?(СтрокаВыборки.Количество = 0, СтрокаВыборки.СуммаВсего, Окр(СтрокаВыборки.СуммаВсего / СтрокаВыборки.Количество, 2)));
						ДанныеПечатиДоп.Вставить("Сумма", СтрокаВыборки.СуммаВсего);
						ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
						
						КоличествоСтрок = КоличествоСтрок + 1;
						ОбластьМакета.Параметры.НомерСтроки = КоличествоСтрок;
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
					КонецЦикла;
				КонецЕсли;
				
				ДанныеПечатиШапкаДоп.Вставить("ИтоговаяСтрока", 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Всего наименований %1, на сумму %2 %3'"),
					Формат(КоличествоСтрок, "ЧН=0; ЧГ=0"),
					Формат(ИтогоСумма, "ЧДЦ=2; ЧГ=3,0"),
					Шапка.ВалютаДокумента
					)
				);
				
			ИначеЕсли СтрНайти(ИмяОбласти, "ПодвалСчета") = 1 Тогда	
				
				ОбластьМакета.Параметры.Заполнить(Шапка);
				ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
				
				Если ВыводитьПечать Тогда
					Если ЭтоОрганизацияИП Тогда
						ОбластьМакета.Рисунки.ПечатьПредпринимателя.Картинка     = Новый Картинка(ДвоичныеДанныеПечати);
					Иначе
						ОбластьМакета.Рисунки.Печать.Картинка                    = Новый Картинка(ДвоичныеДанныеПечати);
						
						// Если есть подпись ГБ, то добавим и ее
						Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
							ОбластьМакета.Рисунки.ПодписьГлавногоБухгалтера.Картинка = Новый Картинка(ДвоичныеДанныеПодписьГлавногоБухгалтера);
						КонецЕсли;  
						
						Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда
							ОбластьМакета.Рисунки.ПодписьРуководителя.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
						КонецЕсли;

				    КонецЕсли;
				КонецЕсли;

				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			Иначе
				
				ОбластьМакета.Параметры.Заполнить(Шапка);
				ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции



Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл",       ПараметрыЗаполнения.ПересчитыватьВВалютуРегл);
	Запрос.УстановитьПараметр("ВключаяНомераГТД",               ПараметрыЗаполнения.ВключаяНомераГТД);
	Запрос.УстановитьПараметр("ПустаяГТД",                      Неопределено);
	Запрос.УстановитьПараметр("СтавкаНДС",						дт_ОбщегоНазначенияВызовСервераПовтИсп.СтавкаНДСПоУмолчанию());	
	Запрос.УстановитьПараметр("ДатаНачалаИспользованияОсновнойСтавки", дт_ОбщегоНазначенияВызовСервераПовтИсп.ДатаНачалаИспользованияОсновнойСтавкиНДС());
	Запрос.УстановитьПараметр("ВключатьУслуги", ПараметрыЗаполнения.ВключатьУслуги);
	Запрос.УстановитьПараметр("ВключатьТоварыНаКомиссии", ПараметрыЗаполнения.ВключатьТоварыНаКомиссии);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Количество КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВсего / ТаблицаДокумента.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(СпрОрганизации.ЕстьУчетНДС, ИСТИНА)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ &СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВсего * &ТекстСтавкаНДС / (100 + &ТекстСтавкаНДС) КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаВсего - (ВЫРАЗИТЬ(ТаблицаДокумента.Сумма * &ТекстСтавкаНДС / (100 + &ТекстСтавкаНДС) КАК ЧИСЛО(15, 2))) КАК СуммаБезНДС,
	|	ТаблицаДокумента.СуммаВсего КАК СуммаСНДС,
	|	""шт."" КАК ЕдиницаИзмеренияНаименование,
	|	""796"" КАК ЕдиницаИзмеренияКод,
	|	"""" КАК НаименованиеПостфикс,
	|	ТаблицаДокумента.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Партия.ДокументПоступления.Поставшик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСобственноеПроизводство
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ТаблицаДанныхДокументов
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаДанныхДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организация КАК СпрОрганизации
	|		ПО ТаблицаДокумента.Ссылка.Организация = СпрОрганизации.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВсего / ТаблицаДокумента.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(СпрОрганизации.ЕстьУчетНДС, ИСТИНА)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ &СтавкаНДС
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВсего * &ТекстСтавкаНДС / (100 + &ТекстСтавкаНДС) КАК ЧИСЛО(15, 2)),
	|	ТаблицаДокумента.СуммаВсего - (ВЫРАЗИТЬ(ТаблицаДокумента.Сумма * &ТекстСтавкаНДС / (100 + &ТекстСтавкаНДС) КАК ЧИСЛО(15, 2))),
	|	ТаблицаДокумента.СуммаВсего,
	|	""шт."",
	|	""796"",
	|	"""",
	|	ТаблицаДокумента.Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Партия.ДокументПоступления.Поставшик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаказНаряд.ТоварыНаКомиссии КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ТаблицаДанныхДокументов
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаДанныхДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организация КАК СпрОрганизации
	|		ПО ТаблицаДокумента.Ссылка.Организация = СпрОрганизации.Ссылка
	|ГДЕ
	|	&ВключатьТоварыНаКомиссии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.НомерСтроки + ТаблицаДанныхДокументов.КоличествоСтрокТовары + ТаблицаДанныхДокументов.КоличествоСтрокТоварыНаКомиссии,
	|	ТаблицаДокумента.Работа,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВсего / ТаблицаДокумента.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(СпрОрганизации.ЕстьУчетНДС, ИСТИНА)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ &СтавкаНДС
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВсего * &ТекстСтавкаНДС / (100 + &ТекстСтавкаНДС) КАК ЧИСЛО(15, 2)),
	|	ТаблицаДокумента.СуммаВсего - (ВЫРАЗИТЬ(ТаблицаДокумента.Сумма * &ТекстСтавкаНДС / (100 + &ТекстСтавкаНДС) КАК ЧИСЛО(15, 2))),
	|	ТаблицаДокумента.СуммаВсего,
	|	""шт."",
	|	""796"",
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Содержание КАК СТРОКА(400)),
	|	NULL,
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаряд.Работы КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ТаблицаДанныхДокументов
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаДанныхДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организация КАК СпрОрганизации
	|		ПО ТаблицаДокумента.Ссылка.Организация = СпрОрганизации.Ссылка
	|ГДЕ
	|	&ВключатьУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Ссылка КАК Ссылка,
	|	МИНИМУМ(ВТ_Товары.НомерСтроки) КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	СУММА(ВТ_Товары.Количество) КАК Количество,
	|	СУММА(ВТ_Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВТ_Товары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВТ_Товары.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВТ_Товары.СуммаСНДС) КАК СуммаСНДС,
	|	ВТ_Товары.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	ВТ_Товары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ВТ_Товары.НаименованиеПостфикс КАК НаименованиеПостфикс,
	|	ВТ_Товары.Партия КАК Партия,
	|	ВТ_Товары.ЭтоСобственноеПроизводство КАК ЭтоСобственноеПроизводство
	|ПОМЕСТИТЬ ВТ_ТоварыГр
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Товары.Ссылка,
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Цена,
	|	ВТ_Товары.СтавкаНДС,
	|	ВТ_Товары.ЕдиницаИзмеренияНаименование,
	|	ВТ_Товары.ЕдиницаИзмеренияКод,
	|	ВТ_Товары.НаименованиеПостфикс,
	|	ВТ_Товары.Партия,
	|	ВТ_Товары.ЭтоСобственноеПроизводство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыГр.Ссылка.ДатаУПД КАК Дата,
	|	ВТ_ТоварыГр.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыГр.Партия КАК Партия,
	|	ВТ_ТоварыГр.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДатыСрезов
	|ИЗ
	|	ВТ_ТоварыГр КАК ВТ_ТоварыГр
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТоварыГр.Номенклатура,
	|	ВТ_ТоварыГр.Партия,
	|	ВТ_ТоварыГр.Ссылка,
	|	ВТ_ТоварыГр.Ссылка.ДатаУПД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыСрезов.Дата КАК Дата,
	|	ДатыСрезов.Номенклатура КАК Номенклатура,
	|	ДатыСрезов.Партия КАК Партия,
	|	МАКСИМУМ(дт_НоменклатураПоставщиков.Период) КАК Период,
	|	ДатыСрезов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПериодыСрезов
	|ИЗ
	|	ДатыСрезов КАК ДатыСрезов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.дт_НоменклатураПоставщиков КАК дт_НоменклатураПоставщиков
	|		ПО (КОНЕЦПЕРИОДА(ДатыСрезов.Дата, ДЕНЬ) >= дт_НоменклатураПоставщиков.Период)
	|			И ДатыСрезов.Номенклатура = дт_НоменклатураПоставщиков.Номенклатура
	|			И ДатыСрезов.Партия = дт_НоменклатураПоставщиков.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыСрезов.Дата,
	|	ДатыСрезов.Номенклатура,
	|	ДатыСрезов.Партия,
	|	ДатыСрезов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыСрезов.Ссылка КАК Ссылка,
	|	ПериодыСрезов.Номенклатура КАК Номенклатура,
	|	ПериодыСрезов.Партия КАК Партия,
	|	НоменклатураПоставщиков.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_НаименованияПоставщиков
	|ИЗ
	|	ПериодыСрезов КАК ПериодыСрезов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.дт_НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО ПериодыСрезов.Номенклатура = НоменклатураПоставщиков.Номенклатура
	|			И ПериодыСрезов.Партия = НоменклатураПоставщиков.Партия
	|			И ПериодыСрезов.Период = НоменклатураПоставщиков.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(СпрНоменклатура.КодТНВЭД, """") КАК КодТНВЭД,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	"""" КАК Серия,
	|	&ПустаяГТД КАК НомерГТД,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Количество КАК КоличествоУпаковок,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.СуммаСНДС КАК СуммаСНДС,
	|	ИСТИНА КАК ЭтоТовар,
	|	ИСТИНА КАК ЭтоНеВозвратнаяТара,
	|	ЛОЖЬ КАК ВернутьМногооборотнуюТару,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	ТаблицаДокумента.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаДокумента.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.НаименованиеПостфикс КАК НаименованиеПостфикс,
	|	ЕСТЬNULL(ВТ_НаименованияПоставщиков.Наименование, """") КАК НаименованиеПоставщика,
	|	ТаблицаДокумента.ЭтоСобственноеПроизводство КАК ЭтоСобственноеПроизводство
	|ПОМЕСТИТЬ РеализацияТоваровУслугТаблицаТоваров
	|ИЗ
	|	ВТ_ТоварыГр КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаДокумента.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НаименованияПоставщиков КАК ВТ_НаименованияПоставщиков
	|		ПО ТаблицаДокумента.Ссылка = ВТ_НаименованияПоставщиков.Ссылка
	|			И ТаблицаДокумента.Номенклатура = ВТ_НаименованияПоставщиков.Номенклатура
	|			И ТаблицаДокумента.Партия = ВТ_НаименованияПоставщиков.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	
	ТекстСтавкаНДС = 
	"ВЫБОР
	|	КОГДА НЕ ЕСТЬNULL(СпрОрганизации.ЕстьУчетНДС, ИСТИНА)
	|		ТОГДА 0
	|	КОГДА ТаблицаДокумента.Ссылка.Дата < &ДатаНачалаИспользованияОсновнойСтавки
	|		ТОГДА 18
	|		ИНАЧЕ &СтавкаНДС
	|	КОНЕЦ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтавкаНДС", ТекстСтавкаНДС); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстСтавкаНДС", ТекстСтавкаНДС); 
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПечатьНарядНаСборку(МассивОбъектов, ОбъектыПечати, ВыводитьТоварыНаКомиссии = Истина) Экспорт
	
	ДанныеПечати = ПолучитьДанныеПечатиЗаказНаряда(МассивОбъектов);
	
	Шапка      	= ДанныеПечати.Шапка;
	ВыборкаТовары = ДанныеПечати.Товары;
	ВыборкаРаботы = ДанныеПечати.Работы;
	ВыборкаМатериалы = ДанныеПечати.Материалы;
	ВыборкаМатериалыЗаказчика = ДанныеПечати.МатериалыЗаказчика;
	ВыборкаТоварыНаКомиссии = ДанныеПечати.ТоварыНаКомиссии;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ЗаказНаряд_НарядНаСборку";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_НарядНаСборку");
	ФорматДаты = "ДФ=dd.MM.yyyy";
	
	Пока Шапка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
		ВыборкаТовары.Сбросить();
		ВыборкаМатериалы.Сбросить();
		ВыборкаТоварыНаКомиссии.Сбросить();
		
		ЕстьТовары = ВыборкаТовары.НайтиСледующий(СтруктураПоиска);
		ЕстьМатериалы = ВыборкаМатериалы.НайтиСледующий(СтруктураПоиска);
		ЕстьТоварыНаКомиссии = ВыборкаТоварыНаКомиссии.НайтиСледующий(СтруктураПоиска) 
		    И ВыводитьТоварыНаКомиссии;
		
		Если НЕ ЕстьТовары
			И НЕ ЕстьМатериалы
			И НЕ ЕстьТоварыНаКомиссии
				Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют табличные части Товары и Материалы. Печать не требуется'"),
				Шапка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Шапка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОКлиенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Клиент, Шапка.ДатаДокумента);
		
		ДанныеПечатиДоп = Новый Структура();
		
		ДанныеПечатиДоп.Вставить("ТекстЗаголовка", 
			СтрШаблон("Наряд на сборку № %1 от %2", 
				дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.Номер),
				Формат(Шапка.Дата, ФорматДаты)
			)
		);
		
		ДанныеПечатиДоп.Вставить("ПокупательПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКлиенте, "НаименованиеДляПечатныхФорм,Телефоны"));
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ДанныеПечатиДоп = Новый Структура();
		НомерСтроки = 1;
		
		Если ЕстьТовары Тогда
			
			СтрокаВыборки = ВыборкаТовары.Выбрать();
			
			Пока СтрокаВыборки.Следующий() Цикл
				
				ДанныеПечатиДоп.Вставить("НомерСтроки", НомерСтроки);
				ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьМатериалы Тогда
			
			СтрокаВыборки = ВыборкаМатериалы.Выбрать();
			
			Пока СтрокаВыборки.Следующий() Цикл
				
				ДанныеПечатиДоп.Вставить("НомерСтроки", НомерСтроки);
				ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьТоварыНаКомиссии Тогда
			
			СтрокаВыборки = ВыборкаТоварыНаКомиссии.Выбрать();
			
			Пока СтрокаВыборки.Следующий() Цикл
				
				ДанныеПечатиДоп.Вставить("НомерСтроки", НомерСтроки);
				ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьБланкВеденияРемонта(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ДанныеПечати = ПолучитьДанныеПечатиЗаказНаряда(МассивОбъектов);
	
	Шапка      	= ДанныеПечати.Шапка;
	ВыборкаРаботы = ДанныеПечати.Работы;
	ВыборкаИсполнители = ДанныеПечати.Исполнители;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ЗаказНаряд_БланкВеденияРемонта";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_БланкВеденияРемонта");
	ФорматДаты = "ДФ=dd.MM.yyyy";
	
	Пока Шапка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
		ВыборкаРаботы.Сбросить();
		
		ЕстьРаботы = ВыборкаРаботы.НайтиСледующий(СтруктураПоиска);
		ЕстьИсполнители = ВыборкаИсполнители.НайтиСледующий(СтруктураПоиска);
		//Если НЕ ЕстьРаботы	Тогда
		//	
		//	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//		НСтр("ru = 'В документе %1 отсутствуют табличная часть Работы. Печать не требуется'"),
		//		Шапка.Ссылка);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		Текст,
		//		Шапка.Ссылка);
		//	Продолжить;
		//КонецЕсли;
		
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОКлиенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Клиент, Шапка.ДатаДокумента);
		
		ДанныеПечатиДоп = Новый Структура();
		
		ДанныеПечатиДоп.Вставить("НомерДокумента", дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.Номер));
		ДанныеПечатиДоп.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, ФорматДаты));
		
		ДанныеПечатиДоп.Вставить("ЗаказчикПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКлиенте, "НаименованиеДляПечатныхФорм,Телефоны"));
		ДанныеПечатиДоп.Вставить("Мастер", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Шапка.Мастер));
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ДанныеПечатиДоп = Новый Структура();
		НомерСтроки = 1;
		
		Если ЕстьРаботы Тогда
			
			СтрокаВыборки = ВыборкаРаботы.Выбрать();
			
			Пока СтрокаВыборки.Следующий() Цикл
				
				Исполнители = Неопределено;
				Если ЕстьИсполнители Тогда
					СтруктураПоиска = Новый Структура("Ссылка,НомерСтроки", СтрокаВыборки.Ссылка, СтрокаВыборки.НомерСтроки);		
					ВыборкаНомераСтрок = ВыборкаИсполнители.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Если ВыборкаНомераСтрок.НайтиСледующий(СтруктураПоиска) Тогда
						ВыборкаИсполнитель = ВыборкаНомераСтрок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						ИсполнителиМассив = Новый Массив();
						Пока ВыборкаИсполнитель.Следующий() Цикл
							ИсполнителиМассив.Добавить(ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаИсполнитель.Исполнитель));
						КонецЦикла;
						Исполнители = СтрСоединить(ИсполнителиМассив, ", ");
					КонецЕсли;
				КонецЕсли;
				
				// если в табл. части исполнители не указаны, то укжем ответственного
				//Если Не ЗначениеЗаполнено(Исполнители) Тогда
				//	Исполнители = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Шапка.Ответственный);
				//КонецЕсли;

				ДанныеПечатиДоп.Вставить("Исполнители", Исполнители);
				ДанныеПечатиДоп.Вставить("НомерСтроки", НомерСтроки);
				ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
				ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Дополняем бланк до конца страницы пустыми строками
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПустая");
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		Макеты = Новый Массив();
		Макеты.Добавить(ОбластьМакета);
		Макеты.Добавить(ОбластьМакетаПодвал);
		
		Пока ТабличныйДокумент.ПроверитьВывод(Макеты) Цикл
			ДанныеПечатиДоп.Вставить("НомерСтроки", НомерСтроки);
			ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;	
		
		
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеПечатиДоп);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции


#Область Печать_УПД
	

Функция ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов) Экспорт
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.НомерУПД КАК НомерУПД,
	|	ДанныеДокументов.ДатаУПД КАК ДатаУПД,
	|	&ВалютаРегл КАК Валюта,
	|	ВЫБОР
	|		КОГДА &СПечатью
	|			ТОГДА &ОсновноеОтветственноеЛицо
	|		ИНАЧЕ ДанныеДокументов.Руководитель
	|	КОНЕЦ КАК Руководитель,
	|	ДанныеДокументов.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.ЗаказНаряд КАК ДанныеДокументов
	|ГДЕ
	|	ДанныеДокументов.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(ЗаказНарядТовары.НомерСтроки) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ_КоличествоСтрок
	|ИЗ
	|	ВТ_ТаблицаДанныхДокументов КАК ВТ_ТаблицаДанныхДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|		ПО ВТ_ТаблицаДанныхДокументов.Ссылка = ЗаказНарядТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаКомиссии.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(ТоварыНаКомиссии.НомерСтроки) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТ_КоличествоСтрокТоварыНаКомиссии
	|ИЗ
	|	ВТ_ТаблицаДанныхДокументов КАК ВТ_ТаблицаДанныхДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.ТоварыНаКомиссии КАК ТоварыНаКомиссии
	|		ПО ВТ_ТаблицаДанныхДокументов.Ссылка = ТоварыНаКомиссии.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаКомиссии.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДанныхДокументов.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаДанныхДокументов.Дата КАК Дата,
	|	ВТ_ТаблицаДанныхДокументов.Валюта КАК Валюта,
	|	ВТ_ТаблицаДанныхДокументов.Организация КАК Организация,
	|	ВТ_ТаблицаДанныхДокументов.Руководитель КАК Руководитель,
	|	ВТ_ТаблицаДанныхДокументов.НомерУПД КАК НомерУПД,
	|	ВТ_ТаблицаДанныхДокументов.ДатаУПД КАК ДатаУПД,
	|	ЕСТЬNULL(ВТ_КоличествоСтрок.КоличествоСтрок, 0) КАК КоличествоСтрокТовары,
	|	ЕСТЬNULL(ВТ_КоличествоСтрокТоварыНаКомиссии.КоличествоСтрок, 0) КАК КоличествоСтрокТоварыНаКомиссии
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	ВТ_ТаблицаДанныхДокументов КАК ВТ_ТаблицаДанныхДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоСтрок КАК ВТ_КоличествоСтрок
	|		ПО ВТ_ТаблицаДанныхДокументов.Ссылка = ВТ_КоличествоСтрок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоСтрокТоварыНаКомиссии КАК ВТ_КоличествоСтрокТоварыНаКомиссии
	|		ПО ВТ_ТаблицаДанныхДокументов.Ссылка = ВТ_КоличествоСтрокТоварыНаКомиссии.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаДанныхДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КоличествоСтрок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КоличествоСтрокТоварыНаКомиссии";
	
	
	СПечатью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПечати, "СПечатью", Ложь); 
	ОсновноеОтветственноеЛицо = Неопределено;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегл", дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("СПечатью", СПечатью);
	Запрос.УстановитьПараметр("ОсновноеОтветственноеЛицо", ОсновноеОтветственноеЛицо);
	
	Запрос.Выполнить();
	
	// Если выводится печать, то указываем только осноного ответстственного, независимо от подписанта, 
	//	указанного в документе
	Если СПечатью Тогда
			
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ТаблицаДанныхДокументов КАК ДанныеДокументов";


		ДанныеДокументов = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТаблицы Из ДанныеДокументов Цикл
			СтрокаТаблицы.Руководитель = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновноеОтветственноеЛицоОрганизации(СтрокаТаблицы.Организация, СтрокаТаблицы.ДатаУПД); 
		КонецЦикла;
		
		Запрос.Текст = 
		"УНИЧТОЖИТЬ ТаблицаДанныхДокументов;
		|ВЫБРАТЬ
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.Дата КАК Дата,
		|	ДанныеДокументов.НомерУПД КАК НомерУПД,
		|	ДанныеДокументов.ДатаУПД КАК ДатаУПД,
		|	ДанныеДокументов.Валюта КАК Валюта,
		|	ДанныеДокументов.Организация КАК Организация,
		|	ДанныеДокументов.КоличествоСтрокТовары КАК КоличествоСтрокТовары,
		|	ДанныеДокументов.КоличествоСтрокТоварыНаКомиссии КАК КоличествоСтрокТоварыНаКомиссии,
		|	ДанныеДокументов.Руководитель КАК Руководитель
		|ПОМЕСТИТЬ ТаблицаДанныхДокументов
		|ИЗ
		|	&ДанныеДокументов КАК ДанныеДокументов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
		Запрос.УстановитьПараметр("ДанныеДокументов", ДанныеДокументов);
		Запрос.Выполнить();
		
	КонецЕсли;	
	
	
	
	ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	ПараметрыЗаполнения.ВключаяНомераГТД = Истина;
	ПараметрыЗаполнения.ВключатьУслуги = Истина;
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения);
	
	//ПродажиСервер.ПоместитьВременнуюТаблицуДанныхПоставщика(МенеджерВременныхТаблиц);
	ОтветственныеЛицаСервер.дт_СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	СформироватьВТПорядковыеНомераТаблицыТоваровИПредставления5а(МенеджерВременныхТаблиц, ПараметрыПечати);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	&ПредставлениеСчетФактура КАК ПредставлениеДокумента,
	|	1 КАК СтатусУПД,
	|	ДанныеДокумента.НомерУПД КАК Номер,
	|	ДанныеДокумента.ДатаУПД КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ЛОЖЬ КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияСчетаФактуры,
	|	ЛОЖЬ КАК КорректировочныйСчетФактура,
	|	"""" КАК СтрокаПоДокументу,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаСчетаФактуры,
	|	ДанныеДокумента.Клиент КАК Партнер,
	|	ДанныеДокумента.Клиент КАК Контрагент,
	|	ДанныеДокумента.Организация.ЕстьУчетНДС КАК НалогообложениеНДС,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.БукваВНакладной КАК Префикс,
	|	0 КАК ИндексПодразделения,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК ГлавныйБухгалтер,
	|	ДанныеДокумента.Клиент КАК Грузополучатель,
	|	ДанныеДокумента.Организация КАК Грузоотправитель,
	|	ДанныеДокумента.Организация.КПП КАК КПППоставщика,
	|	ДанныеДокумента.Клиент.КПП КАК КПППокупателя,
	|	ДанныеДокумента.Клиент.Страна2 КАК СтранаРегистрации,
	|	"""" КАК АдресДоставки,
	|	ДанныеДокументов.Валюта КАК Валюта,
	|	ДанныеДокументов.Валюта.НаименованиеПолное КАК ВалютаНаименованиеПолное,
	|	ДанныеДокументов.Валюта.Код КАК ВалютаКод,
	|	ЛОЖЬ КАК ТолькоУслуги,
	|	ЛОЖЬ КАК ЭтоПередачаНаКомиссию,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.БезДоговора
	|			ТОГДА """"
	|		ИНАЧЕ ДанныеДокумента.ДоговорКонтрагента
	|	КОНЕЦ КАК Основание,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ДанныеДокумента.БезДоговора
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ДанныеДокумента.ДоговорКонтрагента.ДатаДоговора
	|		КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1)) КАК ОснованиеДата,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ДанныеДокумента.БезДоговора
	|				ТОГДА """"
	|			ИНАЧЕ ДанныеДокумента.ДоговорКонтрагента.НомерДоговора
	|		КОНЕЦ, """") КАК ОснованиеНомер,
	|	"""" КАК ДоверенностьНомер,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДоверенностьДата,
	|	"""" КАК ДоверенностьВыдана,
	|	"""" КАК ДоверенностьЛицо,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Кладовщик,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьКладовщика,
	|	ДанныеДокумента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.дт_ТипыКлиентов.ИП) КАК ЭтоИП,
	|	ПредставленияСтрок5а.ПредставлениеСтроки5а            КАК ПредставлениеСтроки5а
	|ИЗ
	|	Документ.ЗаказНаряд КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ДанныеДокумента.Ссылка = ДанныеДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияСтрок5а КАК ПредставленияСтрок5а
	|		ПО ДанныеДокумента.Ссылка = ПредставленияСтрок5а.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТоваров.ЭтоСобственноеПроизводство
	|				И &ИспользоватьНаименованияПоставщиков И (ТаблицаТоваров.Ссылка.Дата >= &ДатаНачалаУчетаНаименованийПоставщиков)
	|			ТОГДА ТаблицаТоваров.НаименованиеПоставщика
	|		КОГДА НЕ ТаблицаТоваров.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ТаблицаТоваров.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ ТаблицаТоваров.Номенклатура.Наименование
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ТаблицаТоваров.Номенклатура.Наименование КАК НоменклатураНаименованиеКраткое,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|				ИЛИ Док.ДатаУПД < &ДатаНачалаНовыхФорм
	|			ТОГДА ТаблицаТоваров.Номенклатура.Артикул
	|		ИНАЧЕ ТаблицаТоваров.Номенклатура.Код
	|	КОНЕЦ КАК НоменклатураКод,
	|	ТаблицаТоваров.ЭтоСобственноеПроизводство КАК ЭтоСобственноеПроизводство,
	|	ТаблицаТоваров.КодТНВЭД КАК КодТНВЭД,
	|	ТаблицаТоваров.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТоваров.Упаковка КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаТоваров.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	"""" КАК ХарактеристикаНаименование,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	"""" КАК УпаковкаНаименование,
	|	"""" КАК ВидУпаковки,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.НомерГТД КАК НомерГТД,
	|	"""" КАК СтранаПроисхождения,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	1 КАК КоличествоМест,
	|	1 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТоваров.СуммаБезНДС / ТаблицаТоваров.Количество
	|	КОНЕЦ КАК Цена,
	|	ТаблицаТоваров.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаСНДС КАК СуммаСНДС,
	|	0 КАК МассаНетто,
	|	0 КАК МассаБрутто,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.НаименованиеПостфикс КАК НаименованиеПостфикс,
	|	НЕ ТаблицаТоваров.ЭтоНеВозвратнаяТара КАК ЭтоВозвратнаяТара
	|ИЗ
	|	РеализацияТоваровУслугТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд КАК Док
	|		ПО ТаблицаТоваров.Ссылка = Док.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	
	Запрос.УстановитьПараметр("ИспользоватьНаименованияПоставщиков", ПолучитьФункциональнуюОпцию("дт_ИспользоватьНаименованияПоставщиков"));
	Запрос.УстановитьПараметр("ДатаНачалаУчетаНаименованийПоставщиков", дт_ОбщегоНазначенияВызовСервераПовтИсп.ДатаНачалаУчетаНаименованийПоставщиков());
	Запрос.УстановитьПараметр("ДатаНачалаНовыхФорм", ФормированиеПечатныхФорм.ДатаНачалаПримененияФормСАртикуломВНаименовании());
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru='счет-фактура'"));
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	//Запрос.УстановитьПараметр("ВыводитьУслуги",                  ПараметрыПечати.ВыводитьУслуги);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияВеса",            "кг");
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[МассивРезультатов.Количество() - 2];
	РезультатПоТабличнойЧасти = МассивРезультатов[МассивРезультатов.Количество() - 1];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
	                                               РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура СформироватьВТПорядковыеНомераТаблицыТоваровИПредставления5а(МенеджерВременныхТаблиц, ПараметрыПечати)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТаблицаТоваров.НомерСтроки,
	|	РеализацияТоваровУслугТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаДанныхДокументов.НомерУПД КАК Номер,
	|	ТаблицаДанныхДокументов.ДатаУПД КАК Дата
	|ИЗ
	|	РеализацияТоваровУслугТаблицаТоваров КАК РеализацияТоваровУслугТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ТаблицаДанныхДокументов
	|		ПО ТаблицаДанныхДокументов.Ссылка = РеализацияТоваровУслугТаблицаТоваров.Ссылка
	|ИТОГИ
	|ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПредставленияСтрок5а = ПолучитьПредставленияСтроки5а(РезультатЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ПредставленияСтрок5а
	|ИЗ
	|	&ПредставленияСтрок5а КАК ПредставленияСтрок5а
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ПредставленияСтрок5а", ПредставленияСтрок5а);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьПредставленияСтроки5а(РезультатЗапроса)

	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаряд"));
	Результат.Колонки.Добавить("ПредставлениеСтроки5а", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		Выборка = ВыборкаСсылка.Выбрать();
		
		ПредставлениеДокумента = "";
		Если Выборка.Следующий() Тогда
			ПредставлениеДокумента = СтрШаблон("№ %1 от %2", 
				дт_ПрефиксацияКлиентСервер.НомерНаПечать(Выборка.Номер), 
				Формат(Выборка.Дата, "ДЛФ=D;")
			);
		КонецЕсли;
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Ссылка = ВыборкаСсылка.Ссылка;
		НоваяСтрока.ПредставлениеСтроки5а = СтрШаблон("№ п/п %1 %2",
			?(Выборка.Количество() > 1, СтрШаблон("1-%1", Выборка.Количество()), "1"),
			ПредставлениеДокумента
		);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти




Функция ПечатьЗаказНарядЗП(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ЗаказНаряд", ВыводитьТоварыНаКомиссии = Истина) Экспорт
		
		ДанныеПечати = ПолучитьДанныеПечатиЗаказНаряда(МассивОбъектов);
		
		Шапка      	= ДанныеПечати.Шапка;
		ВыборкаТовары = ДанныеПечати.Товары;
		ВыборкаРаботы = ДанныеПечати.Работы;
		ВыборкаМатериалы = ДанныеПечати.Материалы;
		ВыборкаМатериалыЗаказчика = ДанныеПечати.МатериалыЗаказчика;
		ВыборкаТоварыНаКомиссии = ДанныеПечати.ТоварыНаКомиссии;
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.КлючПараметровПечати = "ЗаказНаряд_Основной";
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_РассчётЗП");
		ФорматДаты = "ДФ='dd.MM.yyyy ""г.""'";
		ФорматДатаВремя = "ДЛФ=DT; ДП=---";
		
		Сообщить("ВНИМАНИЕ! Не забудьте вернуть клиенту свидетельство о регистрации");
		
		ВыводитьТолькоУслуги = ИмяМакета = "Акт";
		ВыводитьПустойДокумент = Истина;
		
		Пока Шапка.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
			ВыборкаТовары.Сбросить();
			ВыборкаРаботы.Сбросить();
			ВыборкаМатериалы.Сбросить();
			ВыборкаМатериалыЗаказчика.Сбросить();
			ВыборкаТоварыНаКомиссии.Сбросить();
			
			ЕстьТовары = ВыборкаТовары.НайтиСледующий(СтруктураПоиска) И НЕ ВыводитьТолькоУслуги;
			ЕстьРаботы = ВыборкаРаботы.НайтиСледующий(СтруктураПоиска);
			ЕстьМатериалы = ВыборкаМатериалы.НайтиСледующий(СтруктураПоиска) И НЕ ВыводитьТолькоУслуги;
			ЕстьМатериалыЗаказчика = ВыборкаМатериалыЗаказчика.НайтиСледующий(СтруктураПоиска) И НЕ ВыводитьТолькоУслуги;
			ЕстьТоварыНаКомиссии = ВыборкаТоварыНаКомиссии.НайтиСледующий(СтруктураПоиска) 
			И ВыводитьТоварыНаКомиссии
			И НЕ ВыводитьТолькоУслуги;
			ЕстьПричинаОбращения =  НЕ ВыводитьТолькоУслуги;
			ЕстьСкидка = Шапка.ЕстьСкидки;
			
			
			Если НЕ ВыводитьПустойДокумент
				И НЕ ЕстьТовары
				И НЕ ЕстьРаботы
				И НЕ ЕстьМатериалы
				И Не ЕстьМатериалыЗаказчика Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют табличные части. Печать не требуется'"),
				Шапка.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Шапка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			
			Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
			СведенияОКлиенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Клиент, Шапка.ДатаДокумента);
			
			
			ДанныеПечатиШапкаДоп = Новый Структура();
			ДанныеПечатиШапкаДоп.Вставить("НаименованиеДокумента", ?(Шапка.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен"), "Предварительный заказ-наряд", "Заказ-наряд"));
			ДанныеПечатиШапкаДоп.Вставить("Номер", дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.Номер));
			Если Шапка.Дата < '20200301' Тогда
				ДанныеПечатиШапкаДоп.Вставить("НомерДокумента", дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
			Иначе	
				ДанныеПечатиШапкаДоп.Вставить("НомерДокумента", ДанныеПечатиШапкаДоп.Номер);
			КонецЕсли;	
			ДанныеПечатиШапкаДоп.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, ФорматДаты));
			
			Если ИмяМакета = "Акт" И Шапка.ДатаДокумента >= '20200601'Тогда 
				ДанныеПечатиШапкаДоп.Вставить("НомерДокумента", дт_ПрефиксацияКлиентСервер.НомерНаПечать(Шапка.НомерУПД));
				ДанныеПечатиШапкаДоп.Вставить("ДатаДокумента", Формат(Шапка.ДатаУПД, ФорматДаты));
			КонецЕсли;
			
			ДанныеПечатиШапкаДоп.Вставить("АвтомобильГодВыпуска", Формат(Шапка.АвтомобильГодВыпуска, "ЧГ=0"));
			ДанныеПечатиШапкаДоп.Вставить("ДатаНачала", Формат(Шапка.ДатаНачала, ФорматДатаВремя));
			ДанныеПечатиШапкаДоп.Вставить("ДатаОкончания", Формат(Шапка.ДатаОкончания, ФорматДатаВремя));
			ДанныеПечатиШапкаДоп.Вставить("Ответственный", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.Ответственный));
			ДанныеПечатиШапкаДоп.Вставить("ИсполнительПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны"));
			ДанныеПечатиШапкаДоп.Вставить("ФирмаПолноеНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП"));
			ДанныеПечатиШапкаДоп.Вставить("ФирмаАдресЮридический", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
			ДанныеПечатиШапкаДоп.Вставить("ЗаказчикПредставление", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКлиенте, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны"));
			ДанныеПечатиШапкаДоп.Вставить("ЗаказчикПолноеНаименование", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКлиенте, "НаименованиеДляПечатныхФорм"));
			ДанныеПечатиШапкаДоп.Вставить("Сумма", Шапка.СуммаДокумента);
			
			Если ВыводитьТолькоУслуги Тогда
				СуммаДокумента = 0;
				СуммаНДС = 0;
			Иначе
				СуммаДокумента = Шапка.СуммаДокумента;
				СуммаНДС = Шапка.НДС;
			КонецЕсли;
			
			ДанныеПечатиШапкаДоп.Вставить("ТекстДоверенноеЛицо", 
			?(ЗначениеЗаполнено(Шапка.КонтактноеЛицо),
			СтрШаблон("Доверенное лицо: %1, тел.%2", Шапка.КонтактноеЛицо, Шапка.КонтактноеЛицоТелефон),
			"")
			);
			
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "Шапка", ЕстьСкидка);
			
			//ОбластьМакета.Параметры.Заполнить(Шапка);
			//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиШапкаДоп);
			
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
			Если ЕстьПричинаОбращения Тогда
				
				ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "Причина", ЕстьСкидка);
				ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
				
				ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
				
			КонецЕсли;
			
			
			// Работы
							ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "Услуги2", ЕстьСкидка, Истина);
				//ТабличныйДокумент.Вывести(ОбластьМакета);
				ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
				
				СуммаВсего 	= 0;
				СкидкаСумма = 0;
				Количество  = 0;
				Сумма 		= 0;
				НДС 		= 0;
				СуммаЗП 	= 0;
				
				ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "СтрокаРабот2", ЕстьСкидка, Истина);
				СтрокаВыборки = ВыборкаРаботы.Выбрать();
				Пока СтрокаВыборки.Следующий() Цикл
					
					
					//ОбластьМакета.Параметры.Заполнить(СтрокаВыборки);
					ЗаполнитьПараметрыОбласти(ОбластьМакета, СтрокаВыборки);
					
					Если ЗначениеЗаполнено(СтрокаВыборки.НаименованиеДополнительно) Тогда
						
						ДанныеПечатиДоп = Новый Структура();
						ДанныеПечатиДоп.Вставить("Наименование", СтрокаВыборки.Наименование + ". " + СтрокаВыборки.НаименованиеДополнительно);
						//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
						ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиДоп);
						
					КонецЕсли;
					
					ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
					//ТабличныйДокумент.Вывести(ОбластьМакета);
					
					Сумма = Сумма  + СтрокаВыборки.Сумма;
					СуммаВсего = СуммаВсего  + СтрокаВыборки.СуммаВсего;
					СкидкаСумма = СкидкаСумма + СтрокаВыборки.СкидкаСумма;
					Количество = Количество + СтрокаВыборки.Количество;
					СуммаЗП = СуммаЗП + строкаВыборки.СуммаЗП;
					//НДС = НДС + СтрокаВыборки.НДС;
				КонецЦикла;
				
				ДанныеПечатиДоп = Новый Структура();
				ДанныеПечатиДоп.Вставить("Сумма", Сумма);
				ДанныеПечатиДоп.Вставить("СуммаВсего", СуммаВсего);
				ДанныеПечатиДоп.Вставить("СкидкаСумма", СкидкаСумма);
				ДанныеПечатиДоп.Вставить("Количество", Количество);
				ДанныеПечатиДоп.Вставить("НДС", НДС);
				ДанныеПечатиДоп.Вставить("СуммаЗП", СуммаЗП);
				
				ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "ПодвалУслуги2", ЕстьСкидка, Истина);
				//ОбластьМакета.Параметры.Заполнить(Шапка);
				//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиДоп);
				ЗаполнитьПараметрыОбласти(ОбластьМакета,  Шапка);
				ЗаполнитьПараметрыОбласти(ОбластьМакета,  ДанныеПечатиДоп);
				//ТабличныйДокумент.Вывести(ОбластьМакета);
				ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
				
				Если ВыводитьТолькоУслуги Тогда
					СуммаДокумента = СуммаВсего;
					СуммаНДС = НДС;
				КонецЕсли;
						
			// Материалы
						
			
			ДанныеПечатиШапкаДоп.Вставить("СуммаВсегоПрописью", 
			"К выплате за заказ-наряд: " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаЗП, Шапка.ВалютаДокумента));
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "ПодвалНачало", ЕстьСкидка, Истина);
			//ОбластьМакета.Параметры.Заполнить(Шапка);
			//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиШапкаДоп);
			
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
			ОбластьМакета = ПолучитьОбластьЗаказНаряда(Макет, "ПодвалОкончание", ЕстьСкидка, Истина);
			//ОбластьМакета.Параметры.Заполнить(Шапка);
			//ОбластьМакета.Параметры.Заполнить(ДанныеПечатиШапкаДоп);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, Шапка);
			ЗаполнитьПараметрыОбласти(ОбластьМакета, ДанныеПечатиШапкаДоп);
			
			//ТабличныйДокумент.Вывести(ОбластьМакета);
			ВывестиОбластиВТабличныйДокумент(ТабличныйДокумент, ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
		
		Возврат ТабличныйДокумент;
		
	КонецФункции


#КонецОбласти 

#Область События

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ПолучитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = ПолучитьВидОперацииПоДокументуОснованию(Неопределено);
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыПоступлениеТоваровУслуг = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыПоступлениеТоваровУслуг[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	Поля.Добавить("ВидОперации");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаряд.ЗаказНарядВнутренний") Тогда
		СтандартнаяОбработка = Ложь;
		Представление = СтрШаблон("Заказ-наряд внутренний %1 от %2", Данные.Номер, Формат(Данные.Дата, "ДЛФ=D;"));
	КонецЕсли;
		
КонецПроцедуры
 
#КонецОбласти 

#Область Отчеты

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов


#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ВидыОперацийЗаказНаряд.ЗаказНаряд;
	
	Если ПолучитьФункциональнуюОпцию("дт_ИспользоватьАвтосервис") Тогда
		Результат = Перечисления.ВидыОперацийЗаказНаряд.ЗаказНаряд;
	ИначеЕсли ПолучитьФункциональнуюОпцию("дт_ИспользоватьЗаказНарядВнутренний") Тогда
		Результат = Перечисления.ВидыОперацийЗаказНаряд.ЗаказНарядВнутренний;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийЗаказНаряд.ЗаказНаряд, "ФормаДокумента");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийЗаказНаряд.ЗаказНарядВнутренний, "ФормаВнутренний");
	
	Возврат ФормыДокумента;

КонецФункции




#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти

#КонецЕсли