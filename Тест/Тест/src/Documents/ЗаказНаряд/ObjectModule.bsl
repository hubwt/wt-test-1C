#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	
	#Область ПрограммныйИнтерфейс
	
	
	Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
				
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.Клиент КАК Клиент,
			|	ЗаказКлиента.Проект КАК Проект,
			|	ЗаказКлиента.ТипОплаты КАК ТипОплаты,
			|	ЗаказКлиента.Организация КАК Организация,
			|	ЗаказКлиента.Склад КАК Склад,
			|	ЗаказКлиента.Проект
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|ГДЕ
			|	ЗаказКлиента.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Клиент 		 = ВыборкаДетальныеЗаписи.Клиент;
				Инициатор 	 =  Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",Пользователи.ТекущийПользователь());
				ЗаказКлиента = ВыборкаДетальныеЗаписи.ссылка;
				Проект 		 = ВыборкаДетальныеЗаписи.Проект;
				Организация  = ВыборкаДетальныеЗаписи.Организация;
				ТипНаценки   = ВыборкаДетальныеЗаписи.ТипОплаты;
				Склад =      ВыборкаДетальныеЗаписи.Склад;
				Проект =  ВыборкаДетальныеЗаписи.Проект;
			КонецЦикла;
			ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
			///+ГомзМА 15.08.2023
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Рас_Комплектовка") Тогда
			Организация 			= ДанныеЗаполнения.Организация;
			Клиент 					= ДанныеЗаполнения.Клиент;
			ВосстановлениеДеталей 	= ДанныеЗаполнения.Ссылка;
			Склад 					= Справочники.Склады.НайтиПоНаименованию("000000002");
			
			Если ДанныеЗаполнения.РаботыСписок.Количество() > 0 Тогда
				Для каждого СтрокаТЧ Из ДанныеЗаполнения.РаботыСписок Цикл
					НоваяСтрока = Работы.Добавить();
					НоваяСтрока.Работа 		= СтрокаТЧ.Работа;
					Если СтрокаТЧ.Содержание = "" Тогда
						НоваяСтрока.Содержание  = "Работу выполнил: " + Строка(СтрокаТЧ.Ответственный);
					Иначе
						НоваяСтрока.Содержание  = "Работу выполнил: " + Строка(СтрокаТЧ.Ответственный) + " / " + СтрокаТЧ.Содержание;
					КонецЕсли;
					НоваяСтрока.Цена 		= СтрокаТЧ.Цена;
					НоваяСтрока.Количество 	= СтрокаТЧ.Количество;
					НоваяСтрока.СуммаВсего 	= СтрокаТЧ.СуммаВсего;
					НоваяСтрока.Сумма 		= СтрокаТЧ.Сумма;
					НоваяСтрока.Нормочас 	= СтрокаТЧ.Нормочас;
				КонецЦикла;
			КонецЕсли;
			
			ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
			///-ГомзМА 15.08.2023
		Иначе 
			Инициатор = Справочники.Сотрудники.НайтиПоРеквизиту("Пользователь",Пользователи.ТекущийПользователь());
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Состояние) Тогда
			Состояние = Перечисления.СостоянияЗаказНаряда.Предварительный;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СостояниеРасчетовКлиентаКомитента) Тогда
			СостояниеРасчетовКлиентаКомитента = Перечисления.СостоянияВзаиморасчетов.Долг;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СостояниеРасчетов) Тогда
			СостояниеРасчетов = Перечисления.СостоянияВзаиморасчетов.Долг;
		КонецЕсли;
		
		ВидОперации = Документы.ЗаказНаряд.ПолучитьВидОперацииПоДокументуОснованию(Неопределено);
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаряд.ЗаказНарядВнутренний") Тогда
			БезДоговора = Истина;
		КонецЕсли;
		
		//Волков ИО 05.03.24 ++   
		Попытка
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Клиент = ДанныеЗаполнения.Проект.Клиент;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВинКод) Тогда
			ВинКод =  ДанныеЗаполнения.Проект.ВинКод;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
			ДатаНачала = ТекущаяДата();	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = ДанныеЗаполнения.Проект;		
		КонецЕсли; 
	Исключение
	КонецПопытки;
		//Волков ИО 05.03.24 --
	КонецПроцедуры
	
	Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
		Если ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
		
		СуммаТовары = Товары.Итог("СуммаВсего");
		СуммаРаботы = Работы.Итог("СуммаВсего");
		СуммаАгентские = ТоварыНаКомиссии.Итог("СуммаАгентские");
		СуммаТоварыНаКомиссии = ТоварыНаКомиссии.Итог("СуммаВсего");
		
		СуммаДокумента = СуммаРаботы + СуммаТовары + СуммаТоварыНаКомиссии;
		
		КоличествоВремяПлан = Работы.Итог("ВремяПлан");
		КоличествоВремяФакт = Работы.Итог("ВремяФакт");
		
		Если БезДоговора Тогда
			ДоговорКонтрагента = Неопределено
		КонецЕсли;
		
		// Строки с пустыми исполнителями очистить
		Индекс = 0;
		Пока Индекс < Исполнители.Количество() Цикл
			СтрокаТаблицы = Исполнители[Индекс];
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Исполнитель) Тогда
				Исполнители.Удалить(Индекс);
			Иначе
				Индекс = Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Руководитель
		Если Не ЗначениеЗаполнено(Руководитель) 
			И ЗначениеЗаполнено(Организация) Тогда
			Руководитель = дт_ЗаполнениеОбъектов.ПолучитьПоследнееЗначение(
			Метаданные().Имя, 
			"Руководитель", 
			Новый Структура("Организация", Организация)
			);
			
			Если Не ЗначениеЗаполнено(Руководитель) Тогда
				Руководитель = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновноеОтветственноеЛицоОрганизации(Организация);
			КонецЕсли;	
		КонецЕсли;
		
		// Заполнить дату выполнения
		СтрокиИсполнители =  Исполнители.НайтиСтроки(Новый Структура("Дата", '00010101'));
		
		ДатаРабот = ?(Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен")
		И ЗначениеЗаполнено(ДатаОкончания), 
		ДатаОкончания, 
		Макс(Дата, ДатаНачала)
		);
		
		Для каждого СтрокаИсполнитель Из СтрокиИсполнители Цикл
			СтрокаИсполнитель.Дата = ДатаРабот;
		КонецЦикла;
		
		// Ответственные
		ОбновитьОтветственных();	
		
		///+ГомзМА 15.08.2023
		Если Товары.Количество() <> 0 Тогда
			Для каждого СтрокаТЧ Из Товары Цикл
				СсылкаНаДокумент = ПолучитьСсылкуНаДокументРасКомплектовка(СтрокаТЧ.Партия);
				Если СсылкаНаДокумент <> Неопределено Тогда
					ДокОбъект = СсылкаНаДокумент.ПолучитьОбъект();
					ДокОбъект.ДетальПродана = Истина;
					ДокОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		///-ГомзМА 15.08.2023
		

	БезДоговора = Истина;
	
	КонецПроцедуры
	
	
	Функция ПолучитьСсылкуНаДокументРасКомплектовка(Инкод)
		
		///+ГомзМА 15.08.2023
		Результат = Неопределено;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Рас_Комплектовка.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Рас_Комплектовка КАК Рас_Комплектовка
		|ГДЕ
		|	Рас_Комплектовка.Инкод = &Инкод
		|	И НЕ Рас_Комплектовка.ДетальПродана";
		
		Запрос.УстановитьПараметр("Инкод", Инкод);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Количество() > 0 Тогда
			РезультатЗапроса.Следующий();
			
			Результат = РезультатЗапроса.Ссылка;
		КонецЕсли;
		
		Возврат Результат;
		///-ГомзМА 15.08.2023
		
	КонецФункции // ПолучитьСсылкуНаДокументРасКомплектовка()
	
	
	Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора, внесенные вручную данные будут утеряны!

	// регистр РегистрНакопления1
	Движения.РегистрНакопления1.Записывать = Истина;
	Для Каждого ТекСтрокаТовары из Товары Цикл
		
		Движение = Движения.РегистрНакопления1.Добавить();
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Товар = ТекСтрокаТовары.Номенклатура;
		Движение.индкод = ТекСтрокаТовары.Партия;
		Движение.Склад = ТекСтрокаТовары.Склад;
		Движение.машина = ТекСтрокаТовары.Автомобиль;
		Движение.Колво = ТекСтрокаТовары.Количество;
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		//Волков ИО 07.12.23 ++
		// РН БалансКлиента Расход
		Если СписатьСБалансаКлиента Тогда 
			Движения.БалансКлиента.Записывать = Истина;
			Движение = Движения.БалансКлиента.Добавить();
			движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Клиент = Клиент;
			Движение.Баланс = СуммаДокумента;
		КонецЕсли;
		//Волков ИО 07.12.23 --
	
// ++ Мазин 28-08-2024 бонусы Кладовщиков 

	НачалоМесяца 	= НачалоМесяца(ТекущаяДата()); 
	КонецМесяца  	= КонецМесяца(ТекущаяДата());
	ДатаТек 		= НачалоМесяца; 
	
	НаборЗаписей = РегистрыСведений.БонусыСотрудниковОтПродажи.СоздатьНаборЗаписей();
	Пока ДатаТек <= КонецМесяца Цикл 
		НаборЗаписей.Отбор.ДокументРег.Установить(Ссылка);
		НаборЗаписей.Отбор.Период.Установить(ДатаТек);
		НаборЗаписей.Отбор.ФлагЗащитаОтУдаленияЗаписи.Установить(ЛОЖЬ);
		НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() <> 0 Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
	ДатаТек = ДатаТек + 86400; 
	КонецЦикла; 
	

	МассивДатаВыдачи = Новый Массив; 

	МестоРаботыННКод			= "000000003"; 
	СкладНН 					= "000000002";
	СуммаСтрокиТовараНН			= 0;
	КоличествоКладовщиковНН 	= 0;
				
	МестоРаботыМСККод			= "000000002";
	СкладМСК					= "000000005";
	СуммаСтрокиТовараМСК		= 0;
	КоличествоКладовщиковМСК 	= 0;
	
	МестоРаботыЕКБКод			= "000000004";
	СкладЕКБ					= "000000008";
	СуммаСтрокиТовараЕКБ		= 0;
	КоличествоКладовщиковЕКБ 	= 0;
	
Для Каждого Строка ИЗ Ответственные Цикл 
	
	Если Строка.Роль = Перечисления.дт_РолиВПродаже.Получить(2)  Тогда
		СтрокаМестоРаботы =  ВернутьМестоРаботыпользователя(Строка.Сотрудник); 
		Если  СтрокаМестоРаботы = МестоРаботыННКод Тогда  		
			КоличествоКладовщиковНН = КоличествоКладовщиковНН +1; 		
		КонецЕсли;
		Если  СтрокаМестоРаботы = МестоРаботыМСККод Тогда  		
			КоличествоКладовщиковМСК = КоличествоКладовщиковМСК +1; 		
		КонецЕсли;
		Если  СтрокаМестоРаботы = МестоРаботыЕКБКод Тогда  		
			КоличествоКладовщиковЕКБ = КоличествоКладовщиковЕКБ +1; 		
		КонецЕсли;
	КонецЕсли; 
	 
КонецЦикла; 

Для Каждого СтрокаТовары ИЗ Товары Цикл 
		Если  СтрокаТовары.Склад.Код	= СкладНН 	И НачалоМесяца <= СтрокаТовары.ДатаУстановки И КонецМесяца >= СтрокаТовары.ДатаУстановки  Тогда  		
			СуммаСтрокиТовараНН 		= СуммаСтрокиТовараНН + СтрокаТовары.СуммаВсего - СтрокаТовары.СуммаНалог;
			МассивДатаВыдачи.Добавить(СтрокаТовары.ДатаУстановки); 		
		КонецЕсли;
		Если  СтрокаТовары.Склад.Код	= СкладМСК 	И НачалоМесяца <= СтрокаТовары.ДатаУстановки И КонецМесяца >= СтрокаТовары.ДатаУстановки Тогда  		
			СуммаСтрокиТовараМСК		= СуммаСтрокиТовараМСК + СтрокаТовары.СуммаВсего- СтрокаТовары.СуммаНалог;
			МассивДатаВыдачи.Добавить(СтрокаТовары.ДатаУстановки);		
		КонецЕсли;
		Если  СтрокаТовары.Склад.Код	= СкладЕКБ 	И НачалоМесяца <= СтрокаТовары.ДатаУстановки И КонецМесяца >= СтрокаТовары.ДатаУстановки Тогда  		
			СуммаСтрокиТовараЕКБ		= СуммаСтрокиТовараЕКБ + СтрокаТовары.СуммаВсего - СтрокаТовары.СуммаНалог;
			МассивДатаВыдачи.Добавить(СтрокаТовары.ДатаУстановки);		
		КонецЕсли;
		
КонецЦикла;

		Если МассивДатаВыдачи.Количество() > 0 Тогда 
			ДатаВыдачиМакс = МассивДатаВыдачи[0];	
			Для Каждого Стрдата Из МассивДатаВыдачи Цикл 
				Если Стрдата > ДатаВыдачиМакс тогда 
					ДатаВыдачиМакс = Стрдата;  
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		


	
Для Каждого СтрокаТЧ Из Ответственные Цикл
	
	Если СтрокаТЧ.Роль = Перечисления.дт_РолиВПродаже.Получить(2)  Тогда
	
	СтрокаМестоРаботы =  ВернутьМестоРаботыпользователя(СтрокаТЧ.Сотрудник); 
		
		Если СтрокаМестоРаботы = МестоРаботыННКод И СуммаСтрокиТовараНН <> 0 И СуммаСтрокиТовараНН <> Неопределено Тогда
			ЗаписьВРегистреСведений 			= РегистрыСведений.БонусыСотрудниковОтПродажи.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.Период 		= ДатаВыдачиМакс;
			ЗаписьВРегистреСведений.Сотрудник 	= СтрокаТЧ.Сотрудник;
			ЗаписьВРегистреСведений.Сумма 		= СуммаСтрокиТовараНН / КоличествоКладовщиковНН;
			ЗаписьВРегистреСведений.ДокументРег = ссылка;
			ЗаписьВРегистреСведений.Продажа 	= ссылка;
			ЗаписьВРегистреСведений.Роль 		= Справочники.ДолжностиДляУК.НайтиПоКоду("000000003"); //Кладовщик
			ЗаписьВРегистреСведений.Бонус 		= ЗаписьВРегистреСведений.Сумма * 0.005;
			ЗаписьВРегистреСведений.Записать();
		КонецЕсли;
		
		Если СтрокаМестоРаботы = МестоРаботыМСККод И СуммаСтрокиТовараМСК <> 0 И СуммаСтрокиТовараМСК <> Неопределено Тогда
			ЗаписьВРегистреСведений 			= РегистрыСведений.БонусыСотрудниковОтПродажи.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.Период 		= ДатаВыдачиМакс;
			ЗаписьВРегистреСведений.Сотрудник 	= СтрокаТЧ.Сотрудник;
			ЗаписьВРегистреСведений.Сумма 		= СуммаСтрокиТовараМСК / КоличествоКладовщиковМСК;
			ЗаписьВРегистреСведений.ДокументРег = ссылка;
			ЗаписьВРегистреСведений.Продажа 	= ссылка;
			ЗаписьВРегистреСведений.Роль 		= Справочники.ДолжностиДляУК.НайтиПоКоду("000000003"); //Кладовщик
			ЗаписьВРегистреСведений.Бонус 		= ЗаписьВРегистреСведений.Сумма * 0.005;
			ЗаписьВРегистреСведений.Записать();
		КонецЕсли;

		Если СтрокаМестоРаботы = МестоРаботыЕКБКод И СуммаСтрокиТовараЕКБ <> 0 И СуммаСтрокиТовараЕКБ <> Неопределено Тогда
			ЗаписьВРегистреСведений 			= РегистрыСведений.БонусыСотрудниковОтПродажи.СоздатьМенеджерЗаписи();
			ЗаписьВРегистреСведений.Период 		= ДатаВыдачиМакс;
			ЗаписьВРегистреСведений.Сотрудник 	= СтрокаТЧ.Сотрудник;
			ЗаписьВРегистреСведений.Сумма 		= СуммаСтрокиТовараЕКБ / КоличествоКладовщиковЕКБ;
			ЗаписьВРегистреСведений.ДокументРег = ссылка;
			ЗаписьВРегистреСведений.Продажа 	= ссылка;
			ЗаписьВРегистреСведений.Роль 		= Справочники.ДолжностиДляУК.НайтиПоКоду("000000003"); //Кладовщик
			ЗаписьВРегистреСведений.Бонус 		= ЗаписьВРегистреСведений.Сумма * 0.005;
			ЗаписьВРегистреСведений.Записать();
		КонецЕсли;
	КонецЕсли;
КонецЦикла;

КонецПроцедуры

Функция ВернутьМестоРаботыпользователя(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.МестоРаботы.Код КАК Код 
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Пользователь.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

Если Выборка.Код <> Неопределено Тогда  
	Возврат Выборка.Код; 
Иначе 
	Возврат неопределено; 
КонецЕсли; 

КонецФункции
	Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
		Если ОбменДанными.Загрузка Тогда
			Возврат
		КонецЕсли;
		
		НепроверяемыеРеквизиты = Новый Массив();
		НепроверяемыеРеквизиты.Добавить("АвтомобильСобственный");
		НепроверяемыеРеквизиты.Добавить("Исполнители.Дата");	
		НепроверяемыеРеквизиты.Добавить("Исполнители.ВремяФакт");	
		НепроверяемыеРеквизиты.Добавить("Работы.ВремяФакт");
		НепроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");	
		
		// Обязательные по видам операций
		Если ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаряд.ЗаказНарядВнутренний") Тогда
			НепроверяемыеРеквизиты.Добавить("Инициатор");	
		ИначеЕсли ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаряд.ЗаказНаряд") Тогда
			//НепроверяемыеРеквизиты.Добавить("Клиент");	
			//НепроверяемыеРеквизиты.Добавить("Организация");	
			НепроверяемыеРеквизиты.Добавить("Автомобиль");
			НепроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");	
			//		НепроверяемыеРеквизиты.Добавить("Товары.Склад");	
			//		НепроверяемыеРеквизиты.Добавить("Материалы.Склад");	
		КонецЕсли;
		
		
		// Обязательные связанные
		Если ЗначениеЗаполнено(Склад) Тогда
			НепроверяемыеРеквизиты.Добавить("Товары.Склад");	
			НепроверяемыеРеквизиты.Добавить("Материалы.Склад");	
		КонецЕсли;
		
		///+ГомзМА 04.10.2023
		Если ВнутреннийЗаказНаряд Тогда
			НепроверяемыеРеквизиты.Добавить("Клиент");
			НепроверяемыеРеквизиты.Добавить("ДатаНачала");
			НепроверяемыеРеквизиты.Добавить("ДатаОкончания");
		КонецЕсли;
		///-ГомзМА 04.10.2023
		
		Если Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.Выполнен") Тогда
			ПроверяемыеРеквизиты.Добавить("ДатаНачала");	
			ПроверяемыеРеквизиты.Добавить("ДатаОкончания");	
			ПроверяемыеРеквизиты.Добавить("Работы.Работа");	
			ПроверяемыеРеквизиты.Добавить("Работы.Количество");	
		ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказНаряда.ВРаботе") Тогда
			ПроверяемыеРеквизиты.Добавить("ДатаНачала");	
		КонецЕсли;	
		
		
		Если БезДоговора Тогда
			НепроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");	
		КонецЕсли;
		
		Если НЕ ПолучитьФункциональнуюОпцию("дт_ОтгрузкаСРазныхСкладов") Тогда
			НепроверяемыеРеквизиты.Добавить("Товары.Склад");
			НепроверяемыеРеквизиты.Добавить("Материалы.Склад");
		КонецЕсли;
		
		
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
		
		Если НЕ дт_Нумерация.НомерУникален(ЭтотОбъект, Истина, Истина, Истина, "НомерУПД", Отказ) Тогда
			// можно не сообщать об ошибке
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаНачала) 
			И ЗначениеЗаполнено(ДатаОкончания) 
			И ДатаНачала > ДатаОкончания Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Дата окончания не может быть меньше даты начала",
			,
			"ДатаОкончания",
			"Объект",
			Отказ
			);
			
		КонецЕсли;
		
		ПроверятьДатуИсполнителей = НепроверяемыеРеквизиты.Найти("Исполнители.Дата") = Неопределено;
		ПроверятьВремяФактИсполнителей =  НепроверяемыеРеквизиты.Найти("Исполнители.ВремяФакт") = Неопределено;
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаряд.ЗаказНарядВнутренний") 
			И (ПроверятьДатуИсполнителей
			ИЛИ ПроверятьВремяФактИсполнителей) Тогда
			
			_ДатаОкончанияЗаполнена = ЗначениеЗаполнено(ДатаОкончания);
			
			Для каждого СтрокаТаблицы Из Исполнители Цикл
				
				СтрокаРаботы = Неопределено;
				
				Если ПроверятьВремяФактИсполнителей 
					И СтрокаТаблицы.ВремяФакт = 0 Тогда
					
					СтрокаРаботы = Работы.Найти(СтрокаТаблицы.ИдентификаторСтрокиРодитель, "ИдентификаторСтроки");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон("Для строки %1 списка Работы не заполнено Время факт. %2 по исполнителю %3", 
					?(СтрокаРаботы = Неопределено, 0, СтрокаРаботы.НомерСтроки), 
					Формат(СтрокаТаблицы.Дата, "ДЛФ=D;"),
					СтрокаТаблицы.Исполнитель
					),
					,
					,
					"Объект",
					Отказ
					);
					
				КонецЕсли;
				
				Если ПроверятьДатуИсполнителей
					И ЗначениеЗаполнено(СтрокаТаблицы.Дата)
					И ((СтрокаТаблицы.Дата > ДатаОкончания
					И _ДатаОкончанияЗаполнена)
					ИЛИ (СтрокаТаблицы.Дата < ДатаНачала)) Тогда
					
					Если СтрокаРаботы = Неопределено Тогда
						СтрокаРаботы = Работы.Найти(СтрокаТаблицы.ИдентификаторСтрокиРодитель, "ИдентификаторСтроки");
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон("Для строки %1 списка Работы дата %2 по исполнителю %3 не входит в период работ по заказ-наряду", 
					?(СтрокаРаботы = Неопределено, 0, СтрокаРаботы.НомерСтроки), 
					Формат(СтрокаТаблицы.Дата, "ДЛФ=D;"),
					СтрокаТаблицы.Исполнитель
					),
					,
					,
					"Объект",
					Отказ
					);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// время факт не должно превышать время план
		Для каждого СтрокаТаблицы Из Работы Цикл
			Если СтрокаТаблицы.ВремяФакт > СтрокаТаблицы.ВремяПлан Тогда
				Поле = "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Работы", СтрокаТаблицы.НомерСтроки, "ВремяФактСек");	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("В строке %1 списка Работы время факт. превышает время план.",
				СтрокаТаблицы.НомерСтроки),
				,
				Поле,
				,
				Отказ
				);
				
				
				
			КонецЕсли;
		КонецЦикла;	
		
	КонецПроцедуры
	
	Процедура ПриКопировании(ОбъектКопирования)
		
		Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
		Ответственный = Пользователи.ТекущийПользователь();
		
		НомерУПД = "";
		ДатаУПД = Дата(1, 1, 1);
		
	КонецПроцедуры
	
	Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
		
		Если ВнутреннийЗаказНаряд Тогда
			Префикс = "ВН-";
		Иначе
			Префикс = "ЗН-"; //дт_ОбщегоНазначения.ПрефиксОрганизации(Организация);
		КонецЕсли;
		
	КонецПроцедуры
	
	
	
	#КонецОбласти
	
	#Область СлужебныйПрограммныйИнтерфейс
	
	Функция ОбновитьОтветственных() Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНарядИсполнители.ВремяФакт,
		|	ЗаказНарядИсполнители.Исполнитель
		|ПОМЕСТИТЬ втИсполнители
		|ИЗ
		|	&Исполнители КАК ЗаказНарядИсполнители
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказНарядОтветственные.НомерСтроки,
		|	ЗаказНарядОтветственные.Сотрудник,
		|	ЗаказНарядОтветственные.Роль,
		|	ЗаказНарядОтветственные.Ставка,
		|	ЗаказНарядОтветственные.СуммаНачислено
		|ПОМЕСТИТЬ втОтветственные
		|ИЗ
		|	&Ответственные КАК ЗаказНарядОтветственные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОтветственные.Сотрудник,
		|	0 КАК Выработка
		|ПОМЕСТИТЬ втВыработкаВсе
		|ИЗ
		|	втОтветственные КАК втОтветственные
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втИсполнители.Исполнитель,
		|	СУММА(втИсполнители.ВремяФакт) КАК ВремяФакт
		|ИЗ
		|	втИсполнители КАК втИсполнители
		|СГРУППИРОВАТЬ ПО
		|	втИсполнители.Исполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВыработкаВсе.Сотрудник,
		|	СУММА(втВыработкаВсе.Выработка) КАК Выработка
		|ПОМЕСТИТЬ втВыработка
		|ИЗ
		|	втВыработкаВсе КАК втВыработкаВсе
		|СГРУППИРОВАТЬ ПО
		|	втВыработкаВсе.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОтветственные.Сотрудник КАК Сотрудник,
		|	втОтветственные.Роль,
		|	втОтветственные.Ставка,
		|	втВыработка.Выработка,
		|	втВыработка.Выработка * втОтветственные.Ставка КАК CуммаНачислено,
		|	втОтветственные.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	втОтветственные КАК втОтветственные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втВыработка КАК втВыработка
		|		ПО втОтветственные.Сотрудник = втВыработка.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втВыработка.Сотрудник,
		|	NULL,
		|	0,
		|	втВыработка.Выработка,
		|	NULL,
		|	999
		|ИЗ
		|	втВыработка КАК втВыработка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветственные КАК втОтветственные
		|		ПО втВыработка.Сотрудник = втОтветственные.Сотрудник
		|ГДЕ
		|	втОтветственные.Сотрудник ЕСТЬ NULL
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Сотрудник";
		
		
		Запрос.УстановитьПараметр("Исполнители", Исполнители.Выгрузить());
		Запрос.УстановитьПараметр("Ответственные", Ответственные.Выгрузить());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Ответственные.Загрузить(РезультатЗапроса.Выгрузить());
		
		ДатаАктуальности = ДатаОкончания;
		
		Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
			ДатаАктуальности = ДатаНачала;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
			ДатаАктуальности = Дата;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Для каждого СтрокаТаблицы Из Ответственные Цикл
			Если СтрокаТаблицы.Ставка = 0 
				ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
				
				Сотрудник = дт_Сотрудники.СотрудникПоПользователю(СтрокаТаблицы.Сотрудник); 
				Если ЗначениеЗаполнено(Сотрудник) Тогда
					СтрокаТаблицы.Ставка = дт_Зарплата.ПолучитьСтавкуСотрудника(Сотрудник, ДатаАктуальности);
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТаблицы.СуммаНачислено = СтрокаТаблицы.Ставка * СтрокаТаблицы.Выработка; 
			
		КонецЦикла;
		
	КонецФункции
	
	Функция ПолучитьСотрудника(Юзер) Экспорт
		
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь",Юзер);
		выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Возврат выборка.ссылка;
		
	КонецФункции
	
	
	
	#КонецОбласти
	
	#Область СлужебныеПроцедурыИФункции
	
	
	
	#КонецОбласти
	
#КонецЕсли
