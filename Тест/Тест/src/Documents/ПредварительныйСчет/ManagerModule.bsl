#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


// Процедура печати документа.
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму;
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
//  ИмяМакета      - Строка - "Счет" или "Заказ".
//  ВыводитьПлатежныеРеквизиты - Булево - если Истина, выводит шапку с платежными реквизитами в счете.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, ИмяМакета = "Счет", ВыводитьПлатежныеРеквизиты = Истина, СПечатью = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	СчетНаОплатуПокупателю.Номер КАК Номер,
	|	СчетНаОплатуПокупателю.Дата КАК Дата,
	|	СчетНаОплатуПокупателю.Организация КАК Организация,
	|	НЕ ЕСТЬNULL(СчетНаОплатуПокупателю.Организация.ЕстьУчетНДС, ЛОЖЬ) КАК ДокументБезНДС,
	|	&ВалютаРубли КАК ВалютаДокумента,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	СчетНаОплатуПокупателю.Дата КАК ДатаДокумента,
	|	СчетНаОплатуПокупателю.БанковскийСчет КАК БанковскийСчетОрганизации,
	|	СчетНаОплатуПокупателю.Клиент КАК Контрагент,
	|	СчетНаОплатуПокупателю.Клиент.ТипКлиента КАК ТипКлиента,
	|	СчетНаОплатуПокупателю.Организация.ЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
	|	БанковскийСчетКонтрагента.НомерСчета КАК ПолучательНомерСчета,
	//Волков ИО 27.02.24 Наряд 000005613 ++
	|	СчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента
	//Волков ИО 27.02.24 Наряд 000005613 --
	|ИЗ
	|	Документ.ПредварительныйСчет КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО СчетНаОплатуПокупателю.Организация.ОсновнойБанковскийСчет.Банк = КлассификаторБанков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|		ПО СчетНаОплатуПокупателю.Организация.ОсновнойБанковскийСчет.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскийСчетКонтрагента
	|		ПО СчетНаОплатуПокупателю.Организация.ОсновнойБанковскийСчет = БанковскийСчетКонтрагента.Ссылка
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуПокупателю.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК Порядок,
	|	МИНИМУМ(ПредварительныйСчетТаблица.НомерСтроки) КАК НомерСтроки,
	|	ПредварительныйСчетТаблица.Товар КАК Товар,
	|	СУММА(ПредварительныйСчетТаблица.Количество) КАК Количество,
	|	ПредварительныйСчетТаблица.Цена КАК Цена,
	|	СУММА(ПредварительныйСчетТаблица.Сумма) КАК Сумма,
	|	ПредварительныйСчетТаблица.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ПредварительныйСчетТаблица.Комментарий КАК СТРОКА(400)) КАК Комментарий
	|ПОМЕСТИТЬ ВТ_Таблицы
	|ИЗ
	|	Документ.ПредварительныйСчет.Таблица КАК ПредварительныйСчетТаблица
	|ГДЕ
	|	ПредварительныйСчетТаблица.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныйСчетТаблица.Товар,
	|	ПредварительныйСчетТаблица.Цена,
	|	ПредварительныйСчетТаблица.Ссылка,
	|	ВЫРАЗИТЬ(ПредварительныйСчетТаблица.Комментарий КАК СТРОКА(400))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ПредварительныйСчетУслуги.НомерСтроки,
	|	ПредварительныйСчетУслуги.Номенклатура,
	|	ПредварительныйСчетУслуги.Количество,
	|	ПредварительныйСчетУслуги.Цена,
	|	ПредварительныйСчетУслуги.Сумма,
	|	ПредварительныйСчетУслуги.Ссылка,
	|	ВЫРАЗИТЬ(ПредварительныйСчетУслуги.Содержание КАК СТРОКА(400))
	|ИЗ
	|	Документ.ПредварительныйСчет.Услуги КАК ПредварительныйСчетУслуги
	|ГДЕ
	|	ПредварительныйСчетУслуги.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Таблицы.Порядок КАК Порядок,
	|	МИНИМУМ(ВТ_Таблицы.НомерСтроки) КАК НомерСтроки,
	|	ВТ_Таблицы.Товар КАК Товар,
	|	СУММА(ВТ_Таблицы.Количество) КАК Количество,
	|	ВТ_Таблицы.Цена КАК Цена,
	|	СУММА(ВТ_Таблицы.Сумма) КАК Сумма,
	|	ВТ_Таблицы.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_Таблицы.Товар В (&ПустаяНоменклатура)
	|			ТОГДА ВТ_Таблицы.Комментарий
	|		ИНАЧЕ ЕСТЬNULL(ВТ_Таблицы.Товар.Наименование, """")
	|	КОНЕЦ КАК ТоварНаименование
	|ПОМЕСТИТЬ втТаблицыГрп
	|ИЗ
	|	ВТ_Таблицы КАК ВТ_Таблицы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Таблицы.Порядок,
	|	ВТ_Таблицы.Товар,
	|	ВТ_Таблицы.Цена,
	|	ВТ_Таблицы.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_Таблицы.Товар В (&ПустаяНоменклатура)
	|			ТОГДА ВТ_Таблицы.Комментарий
	|		ИНАЧЕ ЕСТЬNULL(ВТ_Таблицы.Товар.Наименование, """")
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительныйСчетТаблица.НомерСтроки КАК НомерСтроки,
	|	ПредварительныйСчетТаблица.Товар КАК Товар,
	|	ПредварительныйСчетТаблица.Количество КАК Количество,
	|	ПредварительныйСчетТаблица.Цена КАК Цена,
	|	ПредварительныйСчетТаблица.Сумма КАК Сумма,
	|	ПредварительныйСчетТаблица.Ссылка КАК Ссылка,
	|	""шт."" КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ПредварительныйСчетТаблица.Товар.Артикул, """") КАК ТоварАртикул,
	|	ПредварительныйСчетТаблица.ТоварНаименование КАК ТоварНаименование,
	|	ПредварительныйСчетТаблица.Порядок КАК Порядок
	|ИЗ
	|	втТаблицыГрп КАК ПредварительныйСчетТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРубли", дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	ПустаяНоменклатура = Новый массив();
	ПустаяНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	ПустаяНоменклатура.Добавить(Справочники.АвтоРаботы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ПустаяНоменклатура);
	



	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Шапка      	= РезультатЗапроса[0].Выбрать();
	ВыборкаПоТоварам = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СчетНаОплату_СчетЗаказ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПредварительныйСчет.ПФ_MXL_СчетЗаказ");
	
	Пока Шапка.Следующий() Цикл
		
		ЭтоОрганизацияИП = ОбщегоНазначенияУТКЛиентСервер.ЭтоИП(Шапка.ОрганизацияЮрФизЛицо); //дт_ОбщегоНазначенияКлиентСервер.ЭтоИП(Шапка.ОрганизацияНаименованиеПолное);
		//КонтактнаяИнформация = КонтактнаяИнформацияДляСчета(Шапка.Организация, Шапка.Дата);
		//КонтактнаяИнформацияКлиент = КонтактнаяИнформацияДляСчета(Шапка.Контрагент, Шапка.Дата);
		
		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, , Шапка.БанковскийСчетОрганизации);
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ДанныеПечати.Вставить("ИННПолучателя", СведенияОПоставщике.ИНН);
		ДанныеПечати.Вставить("КПППолучателя", СведенияОПоставщике.КПП);
		
		ДанныеПечати.Вставить("БанкПолучателяПредставление", СведенияОПоставщике.Банк);
		ДанныеПечати.Вставить("БИКБанкаПолучателя", СведенияОПоставщике.БИК);
		ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СведенияОПоставщике.КоррСчет);
		ДанныеПечати.Вставить("СчетПолучателяПредставление", СведенияОПоставщике.НомерСчета);
		ДанныеПечати.Вставить("ПредставлениеПолучателя", СведенияОПоставщике.НаименованиеДляПечатныхФорм);
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, ?(ИмяМакета = "Счет", НСтр("ru = 'Счет на оплату'"),НСтр("ru = 'Заказ покупателя'")));
		
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Поставщик", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,ЮридическийАдрес"));
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны,Email"));
		ДанныеПечати.Вставить("Покупатель", СведенияОПокупателе.НаименованиеДляПечатныхФорм);
		ДанныеПечати.Вставить("ПредставлениеПокупателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,Email,НомерСчета,Банк,БИК,КоррСчет"));
		
		СтруктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
		ВыборкаПоТоварам.Сбросить();
		Если НЕ ВыборкаПоТоварам.НайтиСледующий(СтруктураПоиска) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют товары. Печать счета не требуется'"),
				Шапка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Шапка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		
		//ТаблицаТовары = Шапка.Товары.Выгрузить();
		//ТаблицаТовары.Сортировать("НомерСтроки");
		
		
		ДанныеПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'")));
		
		Руководитель = дт_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьОсновноеОтветственноеЛицоОрганизации(Шапка.Организация, Шапка.Дата);
		РуководительФИО = Строка(Руководитель);//ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Шапка.РуководительФИО);
		ДанныеПечати.Вставить("ФИОРуководителя", РуководительФИО);
		ДанныеПечати.Вставить("ФИОБухгалтера",   РуководительФИО);
		ДанныеПечати.Вставить("ФИОПредпринимателя",   РуководительФИО);
		
		
		МассивОбластейМакета = Новый Массив;
		
		Если ИмяМакета = "Счет" И ВыводитьПлатежныеРеквизиты Тогда
			МассивОбластейМакета.Добавить("ЗаголовокСчета");
		КонецЕсли;
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("Поставщик");
		МассивОбластейМакета.Добавить("Покупатель");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Итого");
		
		Если Шапка.ДокументБезНДС Тогда
			МассивОбластейМакета.Добавить("БезНДС");
		Иначе
			МассивОбластейМакета.Добавить("ИтогоНДС");
		КонецЕсли;
		МассивОбластейМакета.Добавить("ИтогоКОплате");
		
		МассивОбластейМакета.Добавить("СуммаПрописью");
		
		Если ИмяМакета = "Счет" Тогда
			МассивОбластейМакета.Добавить("ТекстВнимание");
		КонецЕсли;
		
			// Вывести подписи
		Если СПечатью Тогда
			
			ДвоичныеДанныеПечати              = Справочники.Организация.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПечать");
			ДвоичныеДанныеПодписьРуководителя = Справочники.Организация.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПодписьРуководителя");
			ДвоичныеДанныеПодписьГлавногоБухгалтера = Справочники.Организация.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПодписьГлавногоБухгалтера");
			
		КонецЕсли;
		ВыводитьПечать = СПечатью И 
			(ЗначениеЗаполнено(ДвоичныеДанныеПечати) 
			ИЛИ ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя)
			ИЛИ ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера)
			);
		
		Если ЭтоОрганизацияИП Тогда
			МассивОбластейМакета.Добавить("ПодвалСчетаПредприниматель" + ?(ВыводитьПечать, "СПечатью", ""));
		Иначе	
			МассивОбластейМакета.Добавить("ПодвалСчета" + ?(ВыводитьПечать, "СПечатью", ""));
		КонецЕсли; 
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти = "Строка" Тогда
				
				ИтогоСумма = 0;
				КоличествоСтрок = 0;
				СтрокаТовары = ВыборкаПоТоварам.Выбрать();
				Пока СтрокаТовары.Следующий() Цикл
					ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
					
					КоличествоСтрок = КоличествоСтрок + 1;
					ИтогоСумма = ИтогоСумма + СтрокаТовары.Сумма;
					
					ОбластьМакета.Параметры.НомерСтроки = КоличествоСтрок;
					ОбластьМакета.Параметры.Товар = СтрокаТовары.ТоварАртикул + ?(ЗначениеЗаполнено(СтрокаТовары.ТоварАртикул), " ", "") + СтрокаТовары.ТоварНаименование;
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				
				ДанныеПечати.Вставить("Всего", ИтогоСумма);
				СтавкаНДС = дт_ОбщегоНазначенияВызовСервераПовтИсп.СтавкаНДСПоУмолчанию(Шапка.Дата);
				
				ДанныеПечати.Вставить("ВсегоНДС", Окр(ИтогоСумма * СтавкаНДС / (100 + СтавкаНДС), 2));
				
				ДанныеПечати.Вставить("ИтоговаяСумма", ДанныеПечати.Всего + ?(Шапка.СуммаВключаетНДС, 0, ДанныеПечати.ВсегоНДС));
				ДанныеПечати.Вставить("СуммаПрописью", 
					РаботаСКурсамиВалют.СформироватьСуммуПрописью(ДанныеПечати.ИтоговаяСумма, Шапка.ВалютаДокумента));
				ДанныеПечати.Вставить("ИтоговаяСтрока", 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Всего наименований %1, на сумму %2 %3'"),
					Формат(КоличествоСтрок, "ЧН=0; ЧГ=0"),
					Формат(ДанныеПечати.ИтоговаяСумма, "ЧДЦ=2; ЧГ=3,0"),
					Шапка.ВалютаДокумента
					)
				);
				
			ИначеЕсли СтрНайти(ИмяОбласти, "ПодвалСчета") = 1 Тогда	
				
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				
				Если ВыводитьПечать Тогда
					Если ЭтоОрганизацияИП Тогда
						ОбластьМакета.Рисунки.ПечатьПредпринимателя.Картинка     = Новый Картинка(ДвоичныеДанныеПечати);
						
						// Если есть подпись Руководителя, то добавим и ее
						Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда
							ОбластьМакета.Рисунки.ПодписьПредпринимателя.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
						КонецЕсли;
						
					Иначе
						ОбластьМакета.Рисунки.Печать.Картинка                    = Новый Картинка(ДвоичныеДанныеПечати);
						
						// Если есть подпись Руководителя, то добавим и ее
						Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда
							ОбластьМакета.Рисунки.ПодписьРуководителя.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
						КонецЕсли;
						
						// Если есть подпись ГБ, то добавим и ее
						Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
							ОбластьМакета.Рисунки.ПодписьГлавногоБухгалтера.Картинка = Новый Картинка(ДвоичныеДанныеПодписьГлавногоБухгалтера);
						КонецЕсли;
						
				    КонецЕсли;
				КонецЕсли;

				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции



// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Счет";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.Порядок       = 10;
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Счет";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (с печатью)'");
	КомандаПечати.ДополнительныеПараметры.Вставить("СПечатью", Истина);
	КомандаПечати.Порядок       = 20;
	
	
	// Счет на оплату без платежных реквизитов.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Счет";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату без реквизитов'");
	КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьПлатежныеРеквизиты", Ложь);
	КомандаПечати.Порядок       = 50;
	
	
	// Счет на оплату в документ Adobe PDF.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Счет";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в PDF'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматPDF;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.PDF;
	КомандаПечати.ДополнительныеПараметры.Вставить("СПечатью", Истина);
	КомандаПечати.Порядок       = 40;
	
	// Счет на оплату в Microsoft Word.
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "СчетНаОплату(MSWord)";
	//КомандаПечати.Представление = НСтр("ru = 'Счет на оплату в Microsoft Word'");
	//КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord2007;
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
	//КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// печать счета на оплату
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Счет");
	Если ПечатнаяФорма <> Неопределено Тогда
		// имена файлов
		ИменаФайлов = Новый Соответствие;
		Шаблон = НСтр("ru = '[Организация]-[Клиент] Счет №[Номер] от [Дата]'");
		ЗначенияРеквизитовДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектов, "Организация,Клиент,Номер,Дата,Ссылка");
		Для Каждого Ссылка Из МассивОбъектов Цикл
			ЗначенияРеквизитовДокумента = ЗначенияРеквизитовДокументов[Ссылка];
			ЗначенияРеквизитовДокумента.Дата = Формат(ЗначенияРеквизитовДокумента.Дата, "ДЛФ=D");
			ЗначенияРеквизитовДокумента.Номер = дт_ПрефиксацияКлиентСервер.НомерНаПечать(ЗначенияРеквизитовДокумента.Номер);
			ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЗначенияРеквизитовДокументов[Ссылка]);
			ИменаФайлов.Вставить(Ссылка, ИмяФайла);
		КонецЦикла;
		
		// описание печатной формы
		ВыводитьПлатежныеРеквизиты = Истина;
		Если ПараметрыПечати.Свойство("ВыводитьПлатежныеРеквизиты") Тогда
			ВыводитьПлатежныеРеквизиты = ПараметрыПечати.ВыводитьПлатежныеРеквизиты;
		КонецЕсли;
		
		СПечатью = Ложь;
		Если ПараметрыПечати.Свойство("СПечатью") Тогда
			СПечатью = ПараметрыПечати.СПечатью;
		КонецЕсли;
		
		ПечатнаяФорма.ТабличныйДокумент = ПечатьСчетаЗаказа(МассивОбъектов, ОбъектыПечати, "Счет", ВыводитьПлатежныеРеквизиты, СПечатью);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Счет на оплату'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ПредварительныйСчет.СчетЗаказ";
		ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИменаФайлов;
	КонецЕсли;
		
	// Параметры отправки печатных форм по электронной почте.
	//ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать



// Подготавливает данные объекта к выводу на печать.
// 
// Параметры:
//  МассивДокументов - Массив - ссылки на объекты, для которых запрашиваются данные для печати;
//  МассивИменМакетов - Массив - имена макетов, в которые подставляются данные для печати.
//
// Возвращаемое значение:
//  Соответствие - коллекция ссылок на объекты и их данные:
//   * Ключ - ЛюбаяСсылка - ссылка на объект информационной базы;
//   * Значение - Структура - макет и данные:
//    ** Ключ - Строка - имя макета,
//    ** Значение - Структура - данные объекта.
Функция ПолучитьДанныеПечати(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолучитьДанныеОбъекта(ОбъектСсылка));
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		Если ИмяМакета = "СчетНаОплату(MSWord)" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, 
				УправлениеПечатью.МакетПечатнойФормы("Документ.ПредварительныйСчет.ПФ_DOC_СчетНаОплату"));
			ТипыМакетов.Вставить(ИмяМакета, "DOC");
		ИначеЕсли ИмяМакета = "СчетНаОплату(ODT)" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_ODT_СчетНаОплату"));
			ТипыМакетов.Вставить(ИмяМакета, "ODT");
		КонецЕсли;
		ОписаниеОбластей.Вставить(ИмяМакета, ПолучитьОписаниеОбластейМакетаОфисногоДокумента());
	КонецЦикла;
	
	Макеты = Новый Структура;
	Макеты.Вставить("ОписаниеОбластей", ОписаниеОбластей);
	Макеты.Вставить("ТипыМакетов", ТипыМакетов);
	Макеты.Вставить("ДвоичныеДанныеМакетов", ДвоичныеДанныеМакетов);
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", ДанныеПоВсемОбъектам);
	Результат.Вставить("Макеты", Макеты);
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьОписаниеОбластейМакетаОфисногоДокумента()
	
	ОписаниеОбластей = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",	"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижнийКолонтитул",		"НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижняяЧасть",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблицаТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТоварыТекст",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыНоменклатура",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыНоменклатура",		"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыВсего",		"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыВсего",			"Список");
	
	Возврат ОписаниеОбластей;
	
КонецФункции

Функция НазваниеДокумента(Идентификатор)
	Результат = "";
	Если Идентификатор = "Счет" Тогда
		Результат = НСтр("ru = 'Счет на оплату'")
	ИначеЕсли Идентификатор = "Заказ" Тогда
		Результат = НСтр("ru = 'Заказ покупателя'")
	КонецЕсли;
	Возврат Результат;
КонецФункции


// СтандартныеПодсистемы.ЗаполнениеОбъектов

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов




#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс



#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Функция СведенияКонтактнойИнформации()
	Сведения = Новый Структура;
	Сведения.Вставить("ИНН", "");
	Сведения.Вставить("КПП", "");
	Сведения.Вставить("ЮридическийАдрес", "");
	Сведения.Вставить("Телефон", "");
	Сведения.Вставить("Email", "");
	
	
	Возврат Сведения;
КонецФункции


Функция КонтактнаяИнформацияДляСчета(Организация, Дата)
	
	Сведения = СведенияКонтактнойИнформации();
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организация") Тогда
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН,КПП, Адрес,Телефон,EMail");
		
		Сведения.ЮридическийАдрес = РеквизитыОрганизации.Адрес;
		Сведения.Телефон = РеквизитыОрганизации.Телефон;
		Сведения.ИНН = РеквизитыОрганизации.ИНН;
		Сведения.КПП = РеквизитыОрганизации.КПП;
		Сведения.email = РеквизитыОрганизации.EMail;
	
	Иначе
		РеквизитыКлиента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН,КПП,ЮридическийАдрес,Телефон,Email");
		Сведения.ЮридическийАдрес = РеквизитыКлиента.ЮридическийАдрес;
		Сведения.Телефон = РеквизитыКлиента.Телефон;
		Сведения.ИНН = РеквизитыКлиента.ИНН;
		Сведения.КПП = РеквизитыКлиента.КПП;
		Сведения.email = РеквизитыКлиента.Email;
	КонецЕсли;
	
	
	Возврат Сведения;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция КонтактнаяИнформацияСтрокой(КонтактнаяИнформация)

	Результат = "";
	Для каждого КлючИЗначение Из КонтактнаяИнформация Цикл
		
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Метка = КлючИЗначение.Ключ;
			Если КлючИЗначение.Ключ = "ЮридическийАдрес" Тогда
				Метка = "";
			ИначеЕсли  КлючИЗначение.Ключ = "Телефон" Тогда
				Метка = "тел.";
			ИначеЕсли  КлючИЗначение.Ключ = "Email" Тогда
				Метка = "";
			КонецЕсли;
			
			Результат = Результат + ?(НЕ ПустаяСтрока(Результат), ", ", "") + Метка + " " + КлючИЗначение.Значение;
		КонецЕсли;
	
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции // КонтактнаяИнформацияСтрокой()


// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "") Экспорт
	                                                           //Волков 27.02.24 / + "ДоговорКонтрагента"
	ДанныеДокумента = Новый Структура("Номер, Дата, Представление, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);

	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = дт_ПрефиксацияКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	
	//Волков ИО 27.02.24 + Условие на указание договора
	Если Не ЗначениеЗаполнено(ДанныеДокумента.ДоговорКонтрагента) Тогда 
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3'"),
			НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	Иначе 
			
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3, %4'"),
			НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"), ДанныеДокумента.ДоговорКонтрагента);
	КонецЕсли;
	//Волков ИО 27.02.24 --
	
КонецФункции


Функция ПолучитьДанныеОбъекта(СсылкаНаОбъект)
	
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("Комментарий",	Объект.Комментарий);
	ДанныеОбъекта.Вставить("Контрагент",	Объект.Клиент.Наименование);
	ДанныеОбъекта.Вставить("СуммаОплаты",	Объект.ИтогоРекв);
	ДанныеОбъекта.Вставить("Организация",	Объект.Организация.Наименование);
	ДанныеОбъекта.Вставить("Дата",			Строка(ТекущаяДатаСеанса()));
	
	ДанныеОбъекта.Вставить("Товары", Новый Массив);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТаблицыТовары = Новый Структура;
		СтрокаТаблицыТовары.Вставить("Номенклатура",СтрокаТабличнойЧасти.Товар);
		СтрокаТаблицыТовары.Вставить("Количество",	СтрокаТабличнойЧасти.Количество);
		СтрокаТаблицыТовары.Вставить("Цена",		СтрокаТабличнойЧасти.Цена);
		СтрокаТаблицыТовары.Вставить("Сумма",		СтрокаТабличнойЧасти.Сумма);
		СтрокаТаблицыТовары.Вставить("Всего",		СтрокаТабличнойЧасти.Сумма);
		
		//Если Не СтрокаТабличнойЧасти.Номенклатура.ФайлКартинки.Пустая() Тогда
		//	Рисунок = РаботаСФайлами.ДанныеФайла(СтрокаТабличнойЧасти.Номенклатура.ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
		//Иначе
		//	Рисунок = Неопределено;
		//КонецЕсли;
		//СтрокаТаблицыТовары.Вставить("Рисунок", Рисунок);
		
		ДанныеОбъекта.Товары.Добавить(СтрокаТаблицыТовары);
	КонецЦикла;
	
	Возврат ДанныеОбъекта;
	
КонецФункции


#КонецОбласти

#КонецЕсли