
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьСписки(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПризнакУчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьСписки(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПризнакУчетаНДС();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	ОбновитьСписки(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		АвтомобильПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьДанныеПоСчетчикам("Расстояние", "ПоказанияОдометра");
	СуммаДокументаПриИзменении(Неопределено);
	СостояниеПриИзменении(Неопределено)
	
КонецПроцедуры

&НаСервере
Процедура АвтомобильПриИзмененииСервер()
	
	Объект.Водитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Автомобиль, "Водитель");
	//Объект.ПоказанияОдометраНачало = дт_Грузоперевозки.ПолучитьПоказаниеОдометра(
	//	Объект.Автомобиль, 
	//	?(ЗначениеЗаполнено(Объект.Ссылка), Объект.ДатаНачала, Неопределено)
	//);
	//
	//Объект.ТопливоВБакеНачало = дт_Грузоперевозки.ПолучитьТопливоВБаке(
	//	Объект.Автомобиль, 
	//	?(ЗначениеЗаполнено(Объект.Ссылка), Объект.ДатаНачала, Неопределено)
	//);

	
КонецПроцедуры // АвтомобильПриИзмененииСервер()


&НаКлиенте
Процедура СтавкаПриИзменении(Элемент)
	Объект.СуммаДокумента = Объект.Ставка * Объект.Расстояние;
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если Не Объект.Расстояние = 0 Тогда
		Объект.Ставка = Объект.СуммаДокумента / Объект.Расстояние;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасстояниеПриИзменении(Элемент)
	
	// Когда указываем расстояние, сумму менять поздно. Рассчитываем ставку
	СуммаДокументаПриИзменении(Неопределено);
	//Объект.СуммаДокумента = Объект.Ставка * Объект.Расстояние;
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказаНаДоставку.Выполнен") Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
			Объект.ДатаОкончания = ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			Объект.ДатаНачала = Объект.ДатаОкончания;
		КонецЕсли;
		
		СформироватьУПД(Неопределено);
		
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказаНаДоставку.ВРаботе") Тогда
		//Объект.ДатаНачала = ТекущаяДата();
		//Объект.ДатаОкончания = '00010101';
		Объект.НомерУПД = "";
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказаНаДоставку.Предварительный") Тогда	
		//Объект.ДатаНачала = '00010101';
		//Объект.ДатаОкончания = '00010101';
		Объект.НомерУПД = "";
	КонецЕсли;
	
	// Если началась таксировка, то обновим расход топлива
	//Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказаНаДоставку.Выполнен") Тогда
	//	ОбновитьРасходСУчетомЗаправок(Неопределено);
	//КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказанияОдометраНачалоПриИзменении(Элемент)
	
	ОбновитьДанныеПоСчетчикам("Расстояние", "ПоказанияОдометра");
	СуммаДокументаПриИзменении(Неопределено);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказанияОдометраОкончаниеПриИзменении(Элемент)
	
	ОбновитьДанныеПоСчетчикам("Расстояние", "ПоказанияОдометра");
	СуммаДокументаПриИзменении(Неопределено);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоВБакеНачалоПриИзменении(Элемент)
	
	ОбновитьДанныеПоСчетчикам("ТопливоРасход", "ТопливоВБаке", Истина);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоВБакеОкончаниеПриИзменении(Элемент)
	
	ОбновитьДанныеПоСчетчикам("ТопливоРасход", "ТопливоВБаке", Истина);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура БезДоговораПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		АвтомобильПриИзмененииСервер();
	КонецЕсли;
	
	//ОбновитьРасходСУчетомЗаправок(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказаНаДоставку.Выполнен") Тогда
		Объект.ДатаУПД = Объект.ДатаОкончания;
	КонецЕсли;
	
	//ОбновитьРасходСУчетомЗаправок(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоРасходПриИзменении(Элемент)
	//ОбновитьРасходСУчетомЗаправокНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Клиент)
		И (НЕ ЗначениеЗаполнено(Объект.ПунктНазначения)
		И НЕ ЗначениеЗаполнено(Объект.ПунктНазначенияАдрес))
		
		ИЛИ (НЕ ЗначениеЗаполнено(Объект.ПунктОтправления)
		И НЕ ЗначениеЗаполнено(Объект.ПунктОтправленияАдрес)) Тогда
		
		КонтрагентПриИзмененииСервер();
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()

	Если НЕ ЗначениеЗаполнено(Объект.Грузополучатель)
		И (НЕ ЗначениеЗаполнено(Объект.ПунктНазначения)
		И НЕ ЗначениеЗаполнено(Объект.ПунктНазначенияАдрес)) Тогда
	
		УстановитьАдрес("Клиент", "ПунктНазначения", "ПунктНазначенияАдрес");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Грузоотправитель) 
		И (НЕ ЗначениеЗаполнено(Объект.ПунктОтправления)
		И НЕ ЗначениеЗаполнено(Объект.ПунктОтправленияАдрес)) Тогда
	
		УстановитьАдрес("Клиент", "ПунктОтправления", "ПунктОтправленияАдрес");
		
	КонецЕсли;

КонецПроцедуры // КонтрагентПриИзмененииСервер()

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Грузоотправитель)
		И (НЕ ЗначениеЗаполнено(Объект.ПунктОтправления)
		И НЕ ЗначениеЗаполнено(Объект.ПунктОтправленияАдрес)) Тогда
	
		УстановитьАдрес("Грузоотправитель", "ПунктОтправления", "ПунктОтправленияАдрес");
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Грузополучатель)
		И (НЕ ЗначениеЗаполнено(Объект.ПунктНазначения)
		И НЕ ЗначениеЗаполнено(Объект.ПунктНазначенияАдрес)) Тогда
	
		УстановитьАдрес("Грузополучатель", "ПунктНазначения", "ПунктНазначенияАдрес");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ДатаПриИзмененииСервер()

	Если дт_Нумерация.ГодИзменен(Объект.Ссылка, Объект.Дата) Тогда
		Объект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ДатаПриИзмененииСервер()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы



#КонецОбласти

#Область ОбработчикиКомандФормы


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаКлиенте
Процедура СформироватьУПД(Команда)
	
	СформироватьУПДНаСервере();
	ПоказатьОповещениеПользователя("УПД сформирован", , "Номер УПД заполнен");		
	
	Подключаемый_ОбновитьКоманды();	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьУПДНаСервере()
	
	Объект.ДатаУПД = Объект.ДатаОкончания;
	//Если НЕ ЗначениеЗаполнено(Объект.ДатаУПД) Тогда
	//	Объект.ДатаУПД = ТекущаяДата();
	//КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.НомерУПД) ИЛИ НЕ дт_Нумерация.НомерУникален(Объект, Истина, Истина, Истина, "НомерУПД") Тогда
	
		Объект.НомерУПД = дт_Нумерация.СвободныйНомерДокумента(
				Объект.Ссылка.Метаданные().Имя, 
				Объект.ДатаУПД, 
				дт_ОбщегоНазначения.ПрефиксОрганизации(Объект.Организация),
				"НомерУПД",
				Объект.Ссылка
			);
				
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасходСУчетомЗаправокНаСервере()
	Объект.ТопливоРасходВсего = дт_Грузоперевозки.ПолучитьОборотыТопливаВБаке(Объект.Автомобиль, Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Ссылка) + Объект.ТопливоРасход;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасходСУчетомЗаправок(Команда)
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) 
		И ЗначениеЗаполнено(Объект.ДатаНачала)
		И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		
		ОбновитьРасходСУчетомЗаправокНаСервере();
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не заполнено одно из полей: Автомобиль, Период выполнения",
			,
			,
			"ДатаНачала"
		);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСписки(Форма)

	Объект = Форма.Объект;

КонецПроцедуры // ОбновитьСписки()


&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	Элементы.Договор.Видимость = НЕ Объект.БезДоговора;
	
	Элементы.ГруппаУПД.Видимость = Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаказаНаДоставку.Выполнен");//Форма.ЕстьУчетНДС;
	Элементы.ГруппаУПД.ТолькоПросмотр = Объект.ПометкаУдаления;
	//Элементы.ГруппаУПД.Видимость = Форма.ЕстьУчетНДС;
	//Элементы.ГруппаУПД.ТолькоПросмотр = Объект.ПометкаУдаления;
	//Элементы.СформироватьУПД.Видимость = НЕ Объект.ПометкаУдаления;
	
	//Элементы.ДатаУПД.Видимость = Форма.ЕстьУчетНДС;	
	//Элементы.ДатаУПД.ТолькоПросмотр = Объект.ПометкаУдаления;
	
	
	Элементы.Расстояние.Доступность = Не ЗначениеЗаполнено(Объект.ПоказанияОдометраНачало) И НЕ ЗначениеЗаполнено(Объект.ПоказанияОдометраОкончание);
	Элементы.ТопливоРасход.Доступность = Не ЗначениеЗаполнено(Объект.ТопливоВБакеНачало) И НЕ ЗначениеЗаполнено(Объект.ТопливоВБакеОкончание);
	
	
КонецПроцедуры // УстановитьВидимостьДоступность()


&НаСервере
Процедура ОбновитьПризнакУчетаНДС()

	ЕстьУчетНДС = Ложь;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЕстьУчетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЕстьУчетНДС");
		
	КонецЕсли;
	

КонецПроцедуры // ОбновитьПризнакУчетаНДС()


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОбновитьДанныеПоСчетчикам(ИмяПоля, ПрефиксСвязанных, ОбратныйРасчет = Ложь)
	
	А = Объект[ПрефиксСвязанных + "Начало"];
	Б = Объект[ПрефиксСвязанных + "Окончание"];
	
	Если ОбратныйРасчет Тогда
		Объект[ИмяПоля] =  А - Б;
	Иначе
		Объект[ИмяПоля] =  Б - А;
	КонецЕсли;

КонецПроцедуры // ОбновитьДанныеПоСчетчикам()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура УстановитьАдрес(ИмяПоляКлиент, ИмяПоляГород, ИмяПоляАдрес)

	Клиент = Объект[ИмяПоляКлиент];
	СвойстваКлиента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Клиент, "ФактическийАдрес,Город2");	
	
	Объект[ИмяПоляГород] = СвойстваКлиента.Город2;	
	Объект[ИмяПоляАдрес] = СвойстваКлиента.ФактическийАдрес;	

КонецПроцедуры // УстановитьАдрес()




#КонецОбласти