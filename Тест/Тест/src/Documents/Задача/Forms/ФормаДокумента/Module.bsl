
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеФормой(ЭтаФорма);
	
	
	СписокЧек.Параметры.УстановитьЗначениеПараметра("Задача", Объект.Ссылка);
	ОбновлениеДиаграммы();
	//Если объект.Ответственный = ТекПользователь() тогда
	//	Элементы.ГруппаАвтора.Доступность = Истина;
	//иначе
	//	Элементы.ГруппаАвтора.Доступность = Ложь;
	//КонецЕсли;
	ПроверкаИсполнителя = Объект.Исполнитель;
	ПроверкаСтатуса = Объект.Статус;
	ПроверкаСтатусаАвтора = Объект.СтатусАвтора;
	
	Согласовано = ЗначениеЗаполнено(Объект.Согласовал);
	Элементы.Проверено.Доступность = Пользователи.РолиДоступны("ПолныеПрава");
	
	Если НЕ ПользователиИнформационнойБазы.ТекущийПользователь().Роли.Содержит(Метаданные.Роли.Найти("ПолныеПрава")) Тогда
		Для каждого ЭлементФормы Из ЭтаФорма.Элементы Цикл
			Если ТипЗнч(ЭлементФормы) <> Тип("ДекорацияФормы") Тогда
				ЭлементФормы.Доступность = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Описание = ТекущийОбъект.хранилищеОписания.Получить();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ВыводЛога();
	//ОбработкаКнопок();
	ЭтаФорма.Модифицированность = ложь;
	
	УстановитьВидимостьЭлементов();
	Элементы.ГруппаШапка.ТолькоПросмотр = блокЗадачи();
КонецПроцедуры

Функция текПользователь()
	Возврат Пользователи.ТекущийПользователь();
КонецФункции


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если Нов тогда
		ТекстЛога = "Создал задачу " + объект.Наименование;
		ЗаписьЛога(ТекстЛога);
		Нов = Ложь;
	КонецЕсли;
	//Если ПроверкаНадобавлениеПорядка() тогда
	//	Проверказадачи();
	//КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

Функция ПроверкаНадобавлениеПорядка()
	
	Добавить = НЕ (Объект.СтатусАвтора = Перечисления.СтатусыЗадачАвтора.Проверено ИЛИ Объект.СтатусАвтора = Перечисления.СтатусыЗадачАвтора.СнятоСРаботы);
	Возврат Добавить;
КонецФункции
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыполненоПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		ПриИзмененииИсполнителя();
	КонецЕсли;
	
	//Если объект.Исполнитель <> текПользователь()Тогда
	//	Элементы.ПринятьВРаботу.Видимость 			 = Ложь;
	//	Элементы.ВозобновитьОтложить.Видимость 		 = Ложь;
	//	Элементы.ВыполнитьОтменаВыполнения.Видимость = Ложь;
	//КонецЕсли;
	//Проверказадачи();
	
	
	//ОбработкаКнопок();
КонецПроцедуры


&НаСервере
Процедура ПриИзмененииИсполнителя()
	ПроверкаИсполнителя = Объект.Исполнитель;
	КадровыеДанные = дт_Зарплата.ПолучитьКадровыеДанные(Объект.Исполнитель);
	Если КадровыеДанные <> Неопределено Тогда
		Объект.Подразделение = КадровыеДанные.Подразделение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрупповаяЗадачаПриИзменении(Элемент)
	
	ПустаяСсылка = ПустаяСсылкаПользователя();
	Объект.Исполнитель = ПустаяСсылка;
	
	Объект.Исполнители.Очистить();
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры




#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы



#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	
	
КонецПроцедуры	
// УправлениеФормой()
&НаСервере
Функция блокЗадачи()
	Блок = (Объект.Выполнено и не Объект.СтатусАвтора = Перечисления.СтатусыЗадачАвтора.НаДоработку); 
	Возврат блок;
КонецФункции 

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Если НЕ Объект.ГрупповаяЗадача Тогда
		Элементы.Исполнители.Видимость = Ложь;
		Элементы.Исполнитель.Видимость = Истина;
	ИначеЕсли Объект.ГрупповаяЗадача Тогда
		Элементы.Исполнитель.Видимость = Ложь;
		Элементы.Исполнители.Видимость = Истина;	
	КонецЕсли;
	
	Если объект.Проект = Справочники.ПроектыРазвития.НайтиПоКоду("000000020") тогда
		Элементы.Согласовал.Видимость = Истина;
		Элементы.Проверено.Видимость  = Истина;
	Иначе
		Элементы.Согласовал.Видимость = Ложь;
		Элементы.Проверено.Видимость  = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПустаяСсылкаПользователя()
	
	ПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	Возврат ПустаяСсылка;
	
КонецФункции 


#КонецОбласти


&НаКлиенте
Процедура ДобавитьЧек(Команда)
	
	///+ГомзМА 13.02.2023 (Задача 000002700 от 10.02.2023)
	Если Объект.Ссылка.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
		
		ПоказатьВопрос(Оповещение, "Документ не создан! Создать?", РежимДиалогаВопрос.ДаНет);
		///+ГомзМА 13.02.2023 (Задача 000002700 от 10.02.2023)
	Иначе
		Этаформа.Записать();
		ОткрытьФормуМодально("РегистрСведений.ЧекЛисты.ФормаЗаписи",
		Новый Структура("ЗначенияЗаполнения", Новый Структура("Задача, Дата, Ответственный", Объект.Ссылка,ТекущаяДата(), Объект.Ответственный)));
		ОбновлениеДиаграммы();
		ВыводЛога();
		Элементы.СписокЧек.Обновить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	///+ГомзМА 13.02.2023 (Задача 000002700 от 10.02.2023)
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Записать();
		Если Объект.Ссылка.Пустая() Тогда
			Возврат;
		Иначе
			ОткрытьФормуМодально("РегистрСведений.ЧекЛисты.ФормаЗаписи",
			Новый Структура("ЗначенияЗаполнения", Новый Структура("Задача, Дата, Ответственный", Объект.Ссылка,ТекущаяДата(), Объект.Ответственный)));
			ОбновлениеДиаграммы();
			ВыводЛога();
			Элементы.СписокЧек.Обновить();
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	///+ГомзМА 13.02.2023 (Задача 000002700 от 10.02.2023)
	
КонецПроцедуры



&НаСервере
Процедура УдалитьЧекНаСервере(ТекСтрока)
	Событие = "Удалил запись в чек листе: " + ТекСтрока.Описание;
	ЗаписьЛога(Событие);
	
	ПовышениеПулаЧеков(ТекСтрока);
	
	Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
	Запись.Задача 		 = Объект.ссылка;
	Запись.Дата 		 = ТекСтрока.Дата;
	Запись.Ответственный = ТекСтрока.Ответственный;
	Запись.Удалить();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧек(Команда)
	ТекСтрока = Элементы.СписокЧек.ТекущиеДанные;
	УдалитьЧекНаСервере(ТекСтрока);
	Элементы.СписокЧек.Обновить();
	ОбновлениеДиаграммы();
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	Элементы.ПоказатьЧекЛист.Видимость = Не Элементы.ПоказатьЧекЛист.Видимость;
	Элементы.ЧекЛист.Видимость         = Не Элементы.ЧекЛист.Видимость;
	
	Элементы.ГруппаЧек.Видимость = Не Элементы.ГруппаЧек.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЧекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.СписокЧек.ТекущиеДанные;
	Если Поле.имя = "СписокЧекВыполнено" Тогда 
		СменаЗначенияЗадачи(ТекСтрока.Дата,Объект.Ссылка,ТекСтрока.Ответственный,ТекСтрока.Выполнено,ТекСтрока.Описание,ТекСтрока.Порядок);
		Событие = "Изменил статус в чек листе: " + ТекСтрока.Описание +" на "+ ТекСтрока.Выполнено;
		ЗаписьЛога(Событие);
	Иначе
		
		МассивКонструктораКлюча = Новый Массив;
		МассивКонструктораКлюча.Добавить(Новый Структура("Дата,Задача,Ответственный",ТекСтрока.Дата,Объект.Ссылка,ТекСтрока.Ответственный));
		
		КлючЗаписиРегистра = Новый ("РегистрСведенийКлючЗаписи.ЧекЛисты", МассивКонструктораКлюча);
		ОткрытьФормуМодально("РегистрСведений.ЧекЛисты.Форма.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиРегистра));
	КонецЕсли;
	ОбновлениеДиаграммы();
	Элементы.СписокЧек.Обновить();
КонецПроцедуры

Процедура СменаЗначенияЗадачи(Дата,Задача,Ответственный,В,Описание,порядок)
	Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
	Запись.Задача 		 	= Задача;
	Запись.Дата 		 	= Дата;
	Запись.Ответственный 	= Ответственный;
	Запись.Выполнено     	= Не В;
	Запись.Описание      	= Описание;
	Запись.Порядок      	= Порядок;
	Запись.ДатаВыполнения   = ТекущаяДата();
	Запись.Записать();
КонецПроцедуры

Процедура ОбновлениеДиаграммы()
	Чеки 		 = 0;
	ЗакрытыеЧеки = 0;
	Запрос       = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ЧекЛисты.Задача КАК Задача,
	|	ЧекЛисты.Выполнено КАК Выполнено
	|ИЗ
	|	РегистрСведений.ЧекЛисты КАК ЧекЛисты
	|ГДЕ
	|	ЧекЛисты.Задача = &Задача";
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока выборка.Следующий() Цикл
		Чеки = Чеки+1;
		Если выборка.выполнено Тогда
			ЗакрытыеЧеки = ЗакрытыеЧеки+1;
		КонецЕсли;
	КонецЦикла;
	Если Чеки > 0 тогда
		Процент = (ЗакрытыеЧеки/Чеки)*100;
	Иначе
		Процент = 0;
	КонецЕсли;
	
	Диаграмма = ПроцентВыполнения;
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	
	Диаграмма.КоличествоТочек = 1; 
	Диаграмма.Точки[0].Текст = " "; 
	
	Серия = Диаграмма.УстановитьСерию("Процент");
	
	Диаграмма.УстановитьЗначение(0, Серия, Процент);
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЧекЛист(Команда)
	Элементы.ПоказатьЧекЛист.Видимость = Не Элементы.ПоказатьЧекЛист.Видимость;
	Элементы.ЧекЛист.Видимость         = Не Элементы.ЧекЛист.Видимость;
	Элементы.ГруппаЧек.Видимость = Не Элементы.ГруппаЧек.Видимость;
КонецПроцедуры


Процедура ВыводЛога()
	
	СписокЧек.Параметры.УстановитьЗначениеПараметра("Задача", Объект.Ссылка);
	
	НаборЛогов = "";
	Запрос = Новый запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ЛогЗадач.Текст КАК Текст
	|ИЗ
	|	РегистрСведений.ЛогЗадач КАК ЛогЗадач
	|ГДЕ
	|	ЛогЗадач.Задача = &Задача";
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	
	Логи = Запрос.Выполнить().Выбрать();
	
	Пока Логи.Следующий() Цикл
		НаборЛогов = НаборЛогов + Логи.Текст;
	КонецЦикла;
	Лог = НаборЛогов;
КонецПроцедуры

Процедура ЗаписьЛога(Событие)
	
	ТекстЛога =  "----------------------------------------------------" + Символы.ПС + ТекущаяДата() + Символы.ПС + Пользователи.ТекущийПользователь() + Символы.ПС +" "+ Событие + Символы.ПС ;
	
	Запись = РегистрыСведений.ЛогЗадач.СоздатьМенеджерЗаписи();
	Запись.Задача 		 = Объект.Ссылка;
	Запись.Дата 		 = ТекущаяДата();
	Запись.Автор	     = Пользователи.ТекущийПользователь();
	Запись.Текст         = ТекстЛога;
	Запись.Записать();
	ВыводЛога();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛог(Команда)
	ТекстЛога = "Написал в лог: " + Символы.ПС + Ввод;
	ЗаписьЛога(ТекстЛога);
	Ввод = "";
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Параметры.Ключ.Пустая() Тогда
		Нов = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛог(Команда)
	
	Элементы.ГруппаЛог.Видимость = Не Элементы.ГруппаЛог.Видимость;
	Если Элементы.ГруппаЛог.Видимость тогда
		Элементы.ПоказатьЛог.Заголовок = "Скрыть лог";
	Иначе
		Элементы.ПоказатьЛог.Заголовок = "Показать лог";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Событие = "Изменил статус исполнителя на: " + объект.Статус;
	ЗаписьЛога(Событие);
	Выполнена();
	//Архивирование();
	ИзменениеСтатусаЗадач(); 
	//Волков ИО 26.12.23 ++
	//У 1 человека 1 задача в работе
	ОднаРабочаяЗадача();	
	//Волков ИО 26.12.23 --
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСтатусаЗадач()
	//Если объект.Статус = Перечисления.СтатусыЗадач.ВРаботе Тогда
	//	Запрос = Новый запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	Задача.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.Задача КАК Задача
	//	|ГДЕ
	//	|	Задача.Исполнитель = &Исполнитель
	//	|	И Задача.Ссылка <> &Ссылка
	//	|	И Задача.Статус = Значение(перечисление.СтатусыЗадач.ВРаботе)";
	//	Запрос.УстановитьПараметр("Исполнитель", Объект.исполнитель);
	//	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	//	
	//	выборка = Запрос.Выполнить().Выбрать();
	//	Пока  Выборка.Следующий() Цикл
	//		Док = Выборка.ссылка.Получитьобъект();
	//		Док.Статус = Перечисления.СтатусыЗадач.Отложена;
	//		Док.Записать();
	//	КонецЦикла;
	//КонецЕсли;
	Если Объект.Статус = Перечисления.СтатусыЗадач.Выполнена И Объект.ДатаОкончанияФакт = '00010101' Тогда
		Объект.ДатаОкончанияФакт = ТекущаяДата();
	КонецЕсли;
КонецПроцедуры

//Волков ИО 26.12.23 ++ 
Процедура ОднаРабочаяЗадача();
	
	Если Объект.Статус = Перечисления.СтатусыЗадач.ВРаботе Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задача.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.Исполнитель = &Исполнитель
		|	И НЕ Задача.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.Выполнена)
		|	И Задача.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.ВРаботе)";
		
		Запрос.УстановитьПараметр("Исполнитель", текПользователь());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			Док = Выборка.Ссылка.ПолучитьОбъект();
			Док.Статус = Перечисления.СтатусыЗадач.Отложена;
			Док.Записать();
			Сообщить("" + Док.Ссылка + " переведена в статус Отложена");
			
		КонецЦикла;
			
	КонецЕсли;	
	
КонецПроцедуры
//Волков ИО 26.12.23 --

Процедура ОбработкаКнопок()
	//
	//Если объект.Ответственный = пользователи.ТекущийПользователь() Тогда
	//	Элементы.ОтменитьВернутьЗадачу.Видимость = Истина;
	//Иначе
	//	Элементы.ОтменитьВернутьЗадачу.Видимость = Ложь;
	//КонецЕсли;
	/////////////////////////////////
	//Если объект.Ответственный = пользователи.ТекущийПользователь() и объект.статус = Перечисления.СтатусыЗадач.Выполнена Тогда
	//	Элементы.ПринятьВыполнение.Видимость  = Истина;
	//	Элементы.ВернутьНаДоработку.Видимость = Истина;
	//Иначе
	//	Элементы.ПринятьВыполнение.Видимость  = Ложь;
	//	Элементы.ВернутьНаДоработку.Видимость = Ложь;
	//КонецЕсли;
	//
	//Если объект.Исполнитель = пользователи.ТекущийПользователь() Тогда
	//	///////////////////////////////
	//	Если объект.Статус = Перечисления.СтатусыЗадач.Создана и НЕ Параметры.Ключ.Пустая() тогда
	//		Элементы.ПринятьВРаботу.Видимость 			 = истина;
	//		Элементы.ВозобновитьОтложить.Видимость 		 = Ложь;
	//		Элементы.ВыполнитьОтменаВыполнения.Видимость = Ложь;
	//	КонецЕсли;
	//	///////////////////////////////
	//	Если объект.Статус = Перечисления.СтатусыЗадач.Создана и НЕ Параметры.Ключ.Пустая() тогда
	//		Элементы.ПринятьВРаботу.Видимость 			 = истина;
	//		Элементы.ВозобновитьОтложить.Видимость 		 = Ложь;
	//		Элементы.ВыполнитьОтменаВыполнения.Видимость = Ложь;
	//	КонецЕсли;
	//	//////////////////////////////
	//	Если объект.Статус = Перечисления.СтатусыЗадач.ВРаботе Или объект.Статус = Перечисления.СтатусыЗадач.НаДоработку Тогда
	//		Элементы.ПринятьВРаботу.Видимость 			 = Ложь;
	//		Элементы.ВозобновитьОтложить.Видимость		 = Истина;
	//		Элементы.ВозобновитьОтложить.Заголовок 		 = "Отложить";
	//		Элементы.ВозобновитьОтложить.ЦветФона 		 = Новый Цвет(241,245,45);
	//		Элементы.ВыполнитьОтменаВыполнения.Видимость = Истина;
	//		Элементы.ВыполнитьОтменаВыполнения.Заголовок = "Выполнить";
	//		Элементы.ВыполнитьОтменаВыполнения.ЦветФона  = Новый Цвет(82,245,103);
	//	КонецЕсли;
	//	/////////////////////////////	
	//	Если объект.Статус = Перечисления.СтатусыЗадач.Отложена тогда
	//		Элементы.ПринятьВРаботу.Видимость 			 = Ложь;
	//		Элементы.ВозобновитьОтложить.Видимость 	     = Истина;
	//		Элементы.ВозобновитьОтложить.Заголовок 		 = "Возобновить";
	//		Элементы.ВозобновитьОтложить.ЦветФона 		 = Новый Цвет(82,245,103);
	//		Элементы.ВыполнитьОтменаВыполнения.Видимость = Ложь;
	//		Элементы.ВыполнитьОтменаВыполнения.Заголовок = "Выполнить";
	//		Элементы.ВыполнитьОтменаВыполнения.ЦветФона  = Новый Цвет(82,245,103);
	//	КонецЕсли;
	//	/////////////////////////////
	//	Если объект.Статус = Перечисления.СтатусыЗадач.Отменена тогда
	//		Элементы.ПринятьВРаботу.Видимость 			 = Ложь;
	//		Элементы.ВозобновитьОтложить.Видимость 	     = Ложь;
	//		Элементы.ВыполнитьОтменаВыполнения.Видимость = Ложь;
	//		Элементы.ОтменитьВернутьЗадачу.Заголовок	 = "Вернуть задачу";
	//		Элементы.ОтменитьВернутьЗадачу.ЦветФона  	 = Новый Цвет(82,245,103);
	//	Иначе
	//		Элементы.ОтменитьВернутьЗадачу.Заголовок	 = "Отменить задачу";
	//		Элементы.ОтменитьВернутьЗадачу.ЦветФона  	 = Новый Цвет(245,31,31);
	//	КонецЕсли;
	//	/////////////////////////////
	//	Если объект.Статус = Перечисления.СтатусыЗадач.Выполнена тогда
	//		Элементы.ПринятьВРаботу.Видимость 			 = Ложь;
	//		Элементы.ВозобновитьОтложить.Видимость 	     = Ложь;
	//		Элементы.ВыполнитьОтменаВыполнения.Видимость = Истина;
	//		Элементы.ВыполнитьОтменаВыполнения.Заголовок = "Отменить выполнение";
	//		Элементы.ВыполнитьОтменаВыполнения.ЦветФона  = Новый Цвет(245,31,31);
	//	КонецЕсли;
	//	/////////////////////////////
	//	Если объект.Статус = Перечисления.СтатусыЗадач.ПринятоВыполнение тогда
	//		Элементы.ПринятьВРаботу.Видимость 			 = Ложь;
	//		Элементы.ВозобновитьОтложить.Видимость 	     = Ложь;
	//		Элементы.ВыполнитьОтменаВыполнения.Видимость = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если объект.Статус <> Перечисления.СтатусыЗадач.Отменена тогда
	//	ЭтаФорма.Модифицированность = истина;
	//КонецЕсли;
	//Если НЕ Параметры.Ключ.Пустая() тогда
	//	ЭтаФорма.Записать();
	//КонецЕсли;
	//
КонецПроцедуры

&НаСервере
Процедура ПринятьВРаботуНаСервере()
	
	Если Объект.Исполнитель = Справочники.Пользователи.ПустаяСсылка() Тогда
		Объект.Исполнитель = Пользователи.ТекущийПользователь();
	ИначеЕсли  Объект.Исполнитель <> Пользователи.ТекущийПользователь() Тогда
		Сообщить("Это не ваша задача!");
		Возврат;
	КонецЕсли;
	
	
	Объект.Статус = Перечисления.СтатусыЗадач.ВРаботе;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
	ПринятьВРаботуНаСервере();
	ОбработкаКнопок();
КонецПроцедуры

&НаСервере
Процедура ВозобновитьОтложитьНаСервере()
	//Если Объект.Статус  =  Перечисления.СтатусыЗадач.ВРаботе или Объект.Статус =  Перечисления.СтатусыЗадач.НаДоработку Тогда
	//	Объект.Статус  =  Перечисления.СтатусыЗадач.Отложена;
	//Иначе
	//	Объект.Статус  =  Перечисления.СтатусыЗадач.ВРаботе;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВозобновитьОтложить(Команда)
	ВозобновитьОтложитьНаСервере();
	ОбработкаКнопок();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОтменаВыполненияНаСервере()
	Если Объект.Статус  =  Перечисления.СтатусыЗадач.ВРаботе Тогда
		Объект.Статус  =  Перечисления.СтатусыЗадач.Выполнена;
	Иначе
		Объект.Статус  =  Перечисления.СтатусыЗадач.ВРаботе;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтменаВыполнения(Команда)
	ВыполнитьОтменаВыполненияНаСервере();
	ОбработкаКнопок();
КонецПроцедуры

&НаСервере
Процедура ОтменитьВернутьЗадачуНаСервере()
	//Если Объект.Статус  =  Перечисления.СтатусыЗадач.Отменена Тогда
	//	Объект.Статус  =  Перечисления.СтатусыЗадач.ВРаботе;
	//	Объект.ПометкаУдаления = Ложь;
	//Иначе
	//	Объект.Статус  =  Перечисления.СтатусыЗадач.Отменена;
	//	Объект.ПометкаУдаления = Истина;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВернутьЗадачу(Команда)
	Если Параметры.Ключ.Пустая() тогда
		ЭтаФорма.закрыть();
	Иначе
		ОтменитьВернутьЗадачуНаСервере();
		ОбработкаКнопок();
		Если Объект.Статус  =  получитьстат() Тогда
			Этаформа.Закрыть();
		КонецЕсли;
	конецесли;
КонецПроцедуры

Функция Получитьстат()
	//Возврат Перечисления.СтатусыЗадач.Отменена;
КонецФункции


&НаСервере
Процедура ПринятьВыполнениеНаСервере()
	//Если Объект.Статус  =  Перечисления.СтатусыЗадач.Выполнена Тогда
	//	Объект.Статус  =  Перечисления.СтатусыЗадач.ПринятоВыполнение;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВыполнение(Команда)
	Объект.ДатаОкончанияФакт = ТекущаяДата();
	ПринятьВыполнениеНаСервере();
	ОбработкаКнопок();
КонецПроцедуры

&НаСервере
Процедура ВернутьНаДоработкуНаСервере()
	//Если Объект.Статус  =  Перечисления.СтатусыЗадач.Выполнена Тогда
	//	Объект.Статус  =  Перечисления.СтатусыЗадач.НаДоработку;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаДоработку(Команда)
	ВернутьНаДоработкуНаСервере();
	ОбработкаКнопок();
КонецПроцедуры


Процедура УровеньДоступа()
	Если объект.Ответственный = текПользователь() тогда
		Элементы.Исполнитель.Доступность   = истина;
		Элементы.Проект.Доступность        = истина;
		Элементы.Подразделение.Доступность = истина;
		Элементы.Наименование.Доступность  = истина;
		Элементы.Описание.ТолькоПросмотр   = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусАвтораПриИзменении(Элемент)
	Событие = "Изменил статус автора на: " + объект.СтатусАвтора;
	Выполнена();
	ЗаписьЛога(Событие);
	
	ИзменениеСтатусаЗадач();
КонецПроцедуры
&НаСервере
Процедура Выполнена()
	Если объект.Статус = Перечисления.СтатусыЗадач.Выполнена Тогда
		объект.Статус = Перечисления.СтатусыЗадач.Выполнена;
		Объект.Выполнено = Истина;
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура Архивирование()
	Если объект.Статус = Перечисления.СтатусыЗадач.Выполнена тогда
		Попытка
			//Объект.Статус = Перечисления.СтатусыЗадач.Выполнена;
			//ПовышениеПулаЗадач();
			Запись = РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
			Запись.Задача 		 = Объект.Ссылка;
			//Запись.Ответственный = Объект.Исполнитель;		
			Запись.Удалить();
			ПаузаИсполнения(1);
		Исключение
			Сообщить("Ошибка");
		КонецПопытки;
		Объект.Выполнено = Истина;
	Иначе
		Объект.Выполнено = ложь;
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры




&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Событие = "Изменил автора на: " + Символы.ПС + объект.Ответственный;
	ЗаписьЛога(Событие);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	
	Этаформа.Записать();
	ЭтаФорма.Закрыть();
	
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщение(Текст)
	
	Запрос =Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	СотрудникиКонтактнаяИнформация.Ссылка.ОтправлятьСМС КАК ОтправлятьСМС
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Ссылка.Пользователь = &Пользователь
	|	И СотрудникиКонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный);
	Запрос.УстановитьПараметр("Пользователь",объект.Исполнитель);
	Телефон = Запрос.Выполнить().Выбрать();
	Телефон.Следующий();
	
	НомераПреобразованные = дт_МоиЗвонки.ПреобразоватьНомерТелефона(Телефон.НомерТелефона);
	
	Если ТипЗнч(НомераПреобразованные) = Тип("Массив") Тогда
		НомерТелефона = НомераПреобразованные[0]; 
	Иначе
		НомерТелефона = НомераПреобразованные;
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Если Телефон.ОтправлятьСМС Тогда
		дт_УведомленияСМС.ОтправитьСМС(НомерТелефона, Текст +объект.Номер+ " "+Объект.Наименование, Константы.дт_SMS_Подпись.Получить() );	
	КонецЕсли;			   
КонецПроцедуры


&НаСервере
Процедура Проверказадачи()
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Задача = &задача
	|	И ПриоритетыЗадач.Ответственный = &Ответственный";
	Запрос.УстановитьПараметр("Задача",Объект.Ссылка);
	Запрос.УстановитьПараметр("Ответственный",Объект.Исполнитель);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Последниезадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Последниезадачи()
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Ответственный = &Ответственный
	|	И ПриоритетыЗадач.Приоритет > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Ответственный",Объект.Исполнитель);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Выборка.Следующий();
	
	Запись = РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
	Запись.Задача 		 = Объект.Ссылка;
	Запись.Ответственный = Объект.Исполнитель;
	Если Выборка.Приоритет = Неопределено тогда
		Запись.Приоритет     = 1;		
	Иначе
		Запись.Приоритет     = Выборка.Приоритет +1;
	КонецЕсли;
	
	Запись.Записать();
КонецПроцедуры		

&НаСервере
Процедура ПовышениеПулаЗадач()
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Ответственный = &Ответственный
	|	И ПриоритетыЗадач.Приоритет > &Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	Запрос.УстановитьПараметр("Ответственный",Объект.Исполнитель);
	Запрос.УстановитьПараметр("Приоритет",ПорядокТекущейЗадачи());
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.ПриоритетыЗадач.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Выборка.Задача;
		Запись.Ответственный = Выборка.Ответственный;
		Запись.Приоритет     = Выборка.Приоритет - 1;			
		Запись.Записать();
		//	ПаузаИсполнения(1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПовышениеПулаЧеков(ТекСтрока)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекЛисты.Задача КАК Задача,
	|	ЧекЛисты.Ответственный КАК Ответственный,
	|	ЧекЛисты.Выполнено КАК Выполнено,
	|	ЧекЛисты.Описание КАК Описание,
	|	ЧекЛисты.Дата КАК Дата,
	|	ЧекЛисты.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ЧекЛисты КАК ЧекЛисты
	|ГДЕ
	|	ЧекЛисты.Задача = &Задача
	|	И ЧекЛисты.Порядок > &Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("Задача",Объект.Ссылка);
	Запрос.УстановитьПараметр("порядок",ТекСтрока.порядок);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Выборка.Задача;
		Запись.Ответственный = Выборка.Ответственный;
		Запись.Дата 		 = Выборка.Дата;
		Запись.Описание 	 = Выборка.Описание;
		Запись.Выполнено     = Выборка.Выполнено;
		Запись.Порядок       = Выборка.Порядок - 1;			
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Функция ПорядокТекущейЗадачи()
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриоритетыЗадач.Задача КАК Задача,
	|	ПриоритетыЗадач.Ответственный КАК Ответственный,
	|	ПриоритетыЗадач.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыЗадач КАК ПриоритетыЗадач
	|ГДЕ
	|	ПриоритетыЗадач.Задача = &задача
	|	И ПриоритетыЗадач.Ответственный = &Ответственный";
	Запрос.УстановитьПараметр("Задача",Объект.Ссылка);
	Запрос.УстановитьПараметр("Ответственный",Объект.Исполнитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Приоритет;
КонецФункции



&НаСервере
Процедура СделатьПервымНаСервере(ТекСтрока)
	
	Проверка = 1;
	Выборка = ПолучитьЧеклисты("Возр",объект.ссылка).Выбрать();
	Выборка.следующий();
	Если Выборка.Порядок>1 Тогда
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Объект.Ссылка;
		Запись.Ответственный = ТекСтрока.Ответственный;
		Запись.Описание 	 = ТекСтрока.Описание;
		Запись.Выполнено     = ТекСтрока.Выполнено;
		Запись.Дата = ТекСтрока.Дата;
		Запись.Порядок     = 1;
		Запись.Записать();
	Иначе
		Если Выборка.Порядок = ТекСтрока.Порядок Тогда
			Возврат;
		КонецЕсли;
		
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Выборка.Задача;
		Запись.Ответственный = Выборка.Ответственный;
		Запись.Дата			 = Выборка.Дата;
		Запись.Описание 	 = Выборка.Описание;
		Запись.Выполнено     = Выборка.Выполнено;
		Запись.Порядок     	 = Выборка.Порядок + 1;
		Проверка = Проверка+1;
		Запись.Записать();
		Пока Выборка.следующий() Цикл
			Если Выборка.Порядок = Проверка И Выборка.Порядок <= ТекСтрока.Порядок Тогда
				Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
				Запись.Задача 		 = Выборка.Задача;
				Запись.Ответственный = Выборка.Ответственный;
				Запись.Описание 	 = Выборка.Описание;
				Запись.Выполнено     = Выборка.Выполнено;
				Запись.Дата			 = Выборка.Дата;
				Запись.Порядок     = Выборка.Порядок + 1;
				Запись.Записать();
				Проверка = Проверка+1;
			КонецЕсли;
		КонецЦикла;
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Объект.ссылка;
		Запись.Ответственный = ТекСтрока.Ответственный;
		Запись.Описание 	 = ТекСтрока.Описание;
		Запись.Выполнено     = ТекСтрока.Выполнено;
		Запись.Дата			 = ТекСтрока.Дата;
		Запись.Порядок     = 1;
		Запись.Записать();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьПервым(Команда)
	ТекСтрока = Элементы.СписокЧек.ТекущиеДанные;
	СделатьПервымНаСервере(ТекСтрока);
	Элементы.СписокЧек.Обновить();
КонецПроцедуры

&НаСервере
Функция  ПолучитьЧеклисты(Сорт = "",Задача)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекЛисты.Задача КАК Задача,
	|	ЧекЛисты.Ответственный КАК Ответственный,
	|	ЧекЛисты.Выполнено КАК Выполнено,
	|	ЧекЛисты.Описание КАК Описание,
	|	ЧекЛисты.Дата КАК Дата,
	|	ЧекЛисты.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ЧекЛисты КАК ЧекЛисты
	|ГДЕ
	|	ЧекЛисты.Задача = &Задача";
	
	Если Сорт = "Убыв" тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "упорядочить по"+ Символы.ПС +"Порядок убыв";
	ИначеЕсли Сорт = "Возр" тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "упорядочить по"+ Символы.ПС +"Порядок ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Таблица = Запрос.Выполнить();
	Возврат Таблица;		   
	
КонецФункции

&НаСервере
Процедура СделатьПоследнимНаСервере(ТекСтрока)
	
	Выборка = ПолучитьЧеклисты("Убыв",объект.Ссылка).Выбрать();
	Выборка.следующий();
	Проверка = Выборка.Порядок;
	
	
	Если Выборка.Порядок = Неопределено Тогда
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Объект.Ссылка;
		Запись.Ответственный = ТекСтрока.Ответственный;
		Запись.Описание 	 = ТекСтрока.Описание;
		Запись.Выполнено 	 = ТекСтрока.Выполнено;
		Запись.Дата			 = ТекСтрока.Дата;
		Запись.Порядок     = 999;
		Запись.Записать();
	Иначе
		Если Выборка.Порядок = ТекСтрока.Порядок Тогда
			Возврат;
		КонецЕсли;
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Объект.Ссылка;
		Запись.Ответственный = ТекСтрока.Ответственный;
		Запись.Дата			 = ТекСтрока.Дата;
		Запись.Описание 	 = ТекСтрока.Описание;
		Запись.Выполнено 	 = ТекСтрока.Выполнено;
		Запись.Порядок     = Проверка;
		Запись.Записать();
		
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Выборка.Задача;
		Запись.Ответственный = Выборка.Ответственный;
		Запись.Описание 	 = Выборка.Описание;
		Запись.Выполнено     = Выборка.Выполнено;
		Запись.Дата			 = Выборка.Дата;
		Запись.Порядок     = Выборка.Порядок - 1;
		Проверка = Проверка-1;
		Запись.Записать();
		Пока Выборка.следующий() Цикл
			Если Выборка.Порядок = Проверка И Выборка.Задача <> Объект.Ссылка Тогда
				Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
				Запись.Задача 		 = Выборка.Задача;
				Запись.Ответственный = Выборка.Ответственный;
				Запись.Описание 	 = Выборка.Описание;
				Запись.Выполнено     = Выборка.Выполнено;
				Запись.Дата			 = Выборка.Дата;
				Запись.Порядок     = Выборка.Порядок - 1;
				Запись.Записать();
				Проверка = Проверка-1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьПоследним(Команда)
	ТекСтрока = Элементы.СписокЧек.ТекущиеДанные;
	СделатьПоследнимНаСервере(ТекСтрока);
	Элементы.СписокЧек.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПовыситьПорядок(Команда)
	ТекСтрока = Элементы.СписокЧек.ТекущиеДанные;
	ПовыситьПорядокНаСервере(ТекСтрока);
	Элементы.СписокЧек.Обновить();
КонецПроцедуры

&НаСервере
Процедура ПовыситьПорядокНаСервере(ТекСтрока)
	Если ТекСтрока.Порядок = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекЛисты.Задача КАК Задача,
	|	ЧекЛисты.Порядок КАК Порядок,
	|	ЧекЛисты.Дата КАК Дата,
	|	ЧекЛисты.Описание КАК Описание,
	|	ЧекЛисты.Выполнено КАК Выполнено,
	|	ЧекЛисты.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ЧекЛисты КАК ЧекЛисты
	|ГДЕ
	|	(ЧекЛисты.Порядок = &Порядок
	|			ИЛИ ЧекЛисты.Порядок = &Порядок - 1)
	|    И ЧекЛисты.Задача = &Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("Задача", Объект.ссылка);
	Запрос.УстановитьПараметр("Порядок", ТекСтрока.Порядок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Попытка
		Выборка.следующий(); 
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Выборка.Задача;
		Запись.Ответственный = Выборка.Ответственный;
		Запись.Описание 	 = Выборка.Описание;
		Запись.Выполнено     = Выборка.Выполнено;
		Запись.Дата			 = Выборка.Дата;
		Запись.Порядок     = Выборка.Порядок + 1;
		Запись.Записать();
	Исключение
	КонецПопытки;
	Попытка
		Выборка.следующий();
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Выборка.Задача;
		Запись.Ответственный = Выборка.Ответственный;
		Запись.Описание 	 = Выборка.Описание;
		Запись.Выполнено     = Выборка.Выполнено;
		Запись.Дата 		 = Выборка.Дата;
		Запись.Порядок     = Выборка.Порядок - 1;
		Запись.Записать();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПонизитьПорядокНаСервере(ТекСтрока)
	Если ТекСтрока.Порядок = 999 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекЛисты.Задача КАК Задача,
	|	ЧекЛисты.Ответственный КАК Ответственный,
	|	ЧекЛисты.Дата КАК Дата,
	|	ЧекЛисты.Описание КАК Описание,
	|	ЧекЛисты.Выполнено КАК Выполнено,
	|	ЧекЛисты.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ЧекЛисты КАК ЧекЛисты
	|ГДЕ
	|	(ЧекЛисты.Порядок = &Порядок
	|			ИЛИ ЧекЛисты.Порядок = &Порядок + 1)
	|    И ЧекЛисты.Задача = &Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ";
	
	Запрос.УстановитьПараметр("Задача", Объект.ссылка);
	Запрос.УстановитьПараметр("Порядок", ТекСтрока.Порядок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Попытка
		Выборка.следующий(); 
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Выборка.Задача;
		Запись.Ответственный = Выборка.Ответственный;
		Запись.Описание 	 = Выборка.Описание;
		Запись.Выполнено     = Выборка.Выполнено;
		Запись.Дата 		 = Выборка.Дата;
		Запись.Порядок     = Выборка.Порядок - 1;
		Запись.Записать();
	Исключение
	КонецПопытки;
	Попытка
		Выборка.следующий();
		Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
		Запись.Задача 		 = Выборка.Задача;
		Запись.Ответственный = Выборка.Ответственный;
		Запись.Описание 	 = Выборка.Описание;
		Запись.Выполнено     = Выборка.Выполнено;
		Запись.Дата 		 = Выборка.Дата;
		Запись.Порядок     = Выборка.Порядок + 1;
		Запись.Записать();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьПорядок(Команда)
	ТекСтрока = Элементы.СписокЧек.ТекущиеДанные;
	ПонизитьПорядокНаСервере(ТекСтрока);
	Элементы.СписокЧек.Обновить();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Если НЕ Параметры.Ключ.Пустая() И объект.Статус <> ПроверкаСтатуса Тогда
	//	Попытка                                                                                                                                    
	//		ОтправитьСообщениеОстатусе(Истина);
	//	Исключение
	//	КонецПопытки;
	//КонецЕсли;
	//
	//Если НЕ Параметры.Ключ.Пустая() И объект.СтатусАвтора <> ПроверкаСтатусаАвтора Тогда
	//	Попытка                                                                                                                                    
	//		ОтправитьСообщениеОстатусе(Ложь);
	//	Исключение
	//	КонецПопытки;
	//КонецЕсли;
	
	Если  ЗначениеЗаполнено(Объект.Исполнитель) И объект.Исполнитель <> Объект.Ответственный Тогда
		Если  Параметры.Ключ.Пустая() Тогда
			Попытка
				ОтправитьСообщение("Для вас сформирована задача:");
			Исключение
			КонецПопытки;
		ИначеЕсли НЕ Параметры.Ключ.Пустая() и объект.Исполнитель <> ПроверкаИсполнителя Тогда
			Попытка                                                                                                                                    
				ОтправитьСообщение("На вас переведена задача:");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	
	ТекущийОбъект.ХранилищеОписания = Новый ХранилищеЗначения(Описание);
	
КонецПроцедуры


&НаСервере
Процедура ОтправитьСообщениеОстатусе(Проверка)
	
	Запрос =Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
	|ГДЕ
	|	СотрудникиКонтактнаяИнформация.Ссылка.Пользователь = &Пользователь
	|	И СотрудникиКонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонСотрудникаСлужебный);
	Если проверка тогда
		Запрос.УстановитьПараметр("Пользователь",объект.Ответственный);
	Иначе
		Запрос.УстановитьПараметр("Пользователь",объект.Исполнитель);
	конецЕсли;
	
	
	Телефон = Запрос.Выполнить().Выбрать();
	Телефон.Следующий();
	НомераПреобразованные = дт_МоиЗвонки.ПреобразоватьНомерТелефона(Телефон.НомерТелефона);
	
	Если ТипЗнч(НомераПреобразованные) = Тип("Массив") Тогда
		НомерТелефона = НомераПреобразованные[0]; 
	Иначе
		НомерТелефона = НомераПреобразованные;
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Если проверка тогда
		Текст = "В задаче " + объект.Номер + " " + Объект.Наименование + " Статус исполнителя изменён на: " + Объект.Статус;
		дт_УведомленияСМС.ОтправитьСМС(НомерТелефона, Текст, Константы.дт_SMS_Подпись.Получить() );
	Иначе
		Текст = "В задаче " + объект.Номер +  " " + Объект.Наименование + " Статус автора изменён на: " + Объект.СтатусАвтора;
		
		дт_УведомленияСМС.ОтправитьСМС(НомерТелефона, Текст , Константы.дт_SMS_Подпись.Получить() );
	конецЕсли;
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура СкопироватьЧекЛист(Команда)
	ОписаниеВыбора = Новый ОписаниеОповещения("ОбработатьВыборЗадачи",ЭтаФорма);
	//ОткрытьФорму("");
	ОткрытьФорму("Документ.Задача.ФормаВыбора",,,,,,
	ОписаниеВыбора,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Элементы.СписокЧек.Обновить();
	
КонецПроцедуры

&НаКлиенте

Процедура ОбработатьВыборЗадачи(РезультатЗакрытия,ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	//Таблица = ПолучитьЧеклисты(,);
	ЗаписьРегистраЧек(РезультатЗакрытия);
	Элементы.СписокЧек.Обновить();
КонецПроцедуры

Процедура ЗаписьРегистраЧек(Результат)
	Таблица = ПолучитьЧеклисты(,Результат);
	
	Выборка = таблица.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ЧекЛисты.СоздатьМенеджерЗаписи();
			Запись.Задача 		 = Объект.Ссылка;
			Запись.Ответственный = Выборка.Ответственный;
			Запись.Описание 	 = Выборка.Описание;
			Запись.Выполнено     = Ложь;
			Запись.Дата 		 = ТекущаяДата();
			Запись.Порядок       = Выборка.Порядок;
			Запись.Записать();
			ПаузаИсполнения(1);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЧек(Команда)
	Элементы.СписокЧек.Обновить();
КонецПроцедуры
&НаСервере
Процедура ПаузаИсполнения(Секунд) Экспорт	
	Перем ИмяВременногоФайла;
	
	//имя файла, куда сохраним скрипт
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("vbs");
	
	Попытка
		Скрипт = Новый ТекстовыйДокумент;
		Скрипт.УстановитьТекст("WScript.sleep " + XMLСтрока(Цел(Секунд * 1000)));
		Скрипт.Вывод = ИспользованиеВывода.Разрешить;
		Скрипт.Записать(ИмяВременногоФайла, КодировкаТекста.Системная);
		
		WshShell=Новый COMОбъект("WScript.Shell");
		WshShell.Run("wscript.exe """ + ИмяВременногоФайла + """", 0, -1);
		
		//удаляем временный файл
		УдалитьФайлы(ИмяВременногоФайла);
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры//ПаузаИсполнения()

&НаСервере
Процедура ПровереноПриИзмененииНаСервере()
	
	Если Согласовано тогда
		объект.Согласовал = Пользователи.ТекущийПользователь();
	Иначе
		Объект.Согласовал = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровереноПриИзменении(Элемент)
	ПровереноПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры





//&НаКлиенте
//Процедура ВставитьИзБуфера(Команда)
//	 КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту(); 
//     Если Не КомпонентаУстановлена Тогда 
//          Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект); 
//          РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик); 
//     Возврат; 
//     КонецЕсли; 
//     ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено); 
// КонецПроцедуры
// 
// &НаКлиенте 
//Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт 
//     Если Результат = Истина Тогда 
//          ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера(); 
//          Если Не ПустаяСтрока(ПутьКФайлу) Тогда 
//               Картинко = Новый Картинка(ПутьКФайлу); 
//               УдалитьФайлы(ПутьКФайлу); 
//               ПозицияНачала = 0; 
//               ПозицияОкончания = 0; 
//               Элементы.ВыводОписания.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания); 
//               Начало = Описание.ПолучитьПозициюПоЗакладке(ПозицияНачала); 
//               ВставитьКартинкуВФорматированныйДокумент(Картинко,Начало); 
//          Иначе 
//               ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'")); 
//          КонецЕсли; 
//     КонецЕсли; 
// КонецПроцедуры
// 
// &НаСервере 
//Процедура ВставитьКартинкуВФорматированныйДокумент(Кар,Позиция) 
//     Закладка = Описание.ПолучитьЗакладкуПоПозиции(Позиция); 
//     Описание.Вставить(Закладка,Кар, Тип("КартинкаФорматированногоДокумента")); 
//КонецПроцедуры
















